
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800ce14  0800ce14  0001ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd84  0800dd84  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd84  0800dd84  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd84  0800dd84  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd84  0800dd84  0001dd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800dd8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000104  0800de90  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800de90  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012612  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b5  00000000  00000000  00032782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00034e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e06  00000000  00000000  00035ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac99  00000000  00000000  00036df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fe6  00000000  00000000  00051a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ecbd  00000000  00000000  00069a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051c8  00000000  00000000  00108734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000104 	.word	0x20000104
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdfc 	.word	0x0800cdfc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000108 	.word	0x20000108
 8000220:	0800cdfc 	.word	0x0800cdfc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include <Essentials.h>
#include "ESP8266.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c f97a 	bl	800c53c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fb8a 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 faba 	bl	80087d8 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c f968 	bl	800c53c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fb78 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 faa8 	bl	80087d8 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c f956 	bl	800c53c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fb66 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fa96 	bl	80087d8 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c f944 	bl	800c53c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fb54 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fa84 	bl	80087d8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c f989 	bl	800c600 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c f976 	bl	800c600 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c f900 	bl	800c53c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b fb10 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 fa40 	bl	80087d8 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800ce14 	.word	0x0800ce14
 8000364:	20000120 	.word	0x20000120
 8000368:	0800ce24 	.word	0x0800ce24
 800036c:	0800ce30 	.word	0x0800ce30
 8000370:	0800ce38 	.word	0x0800ce38
 8000374:	0800ce48 	.word	0x0800ce48
 8000378:	0800ce54 	.word	0x0800ce54
 800037c:	0800ce58 	.word	0x0800ce58
 8000380:	0800ce5c 	.word	0x0800ce5c

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c f8c5 	bl	800c53c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b fad2 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 fa02 	bl	80087d8 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c f8a3 	bl	800c53c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c f893 	bl	800c53c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b fa9d 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 f9cd 	bl	80087d8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b fa89 	bl	800b970 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 f9b9 	bl	80087d8 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800ce60 	.word	0x0800ce60
 8000474:	0800ce70 	.word	0x0800ce70
 8000478:	20000120 	.word	0x20000120
 800047c:	0800ceec 	.word	0x0800ceec
 8000480:	0800ce90 	.word	0x0800ce90
 8000484:	0800cf00 	.word	0x0800cf00

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f009 fd7d 	bl	8009fca <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f009 fd69 	bl	8009fb0 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 f8cc 	bl	80096f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000244 	.word	0x20000244
 8000564:	2000021a 	.word	0x2000021a

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f009 fd0d 	bl	8009fca <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f009 fcf9 	bl	8009fb0 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 f85c 	bl	80096f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000244 	.word	0x20000244
 8000644:	2000021a 	.word	0x2000021a

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f009 fc87 	bl	8009fca <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f009 fc73 	bl	8009fb0 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f008 ffd6 	bl	80096f0 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000244 	.word	0x20000244
 8000750:	2000021a 	.word	0x2000021a

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f007 ffdc 	bl	80087d8 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000021a 	.word	0x2000021a

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80008d6:	20c8      	movs	r0, #200	; 0xc8
 80008d8:	f007 ff7e 	bl	80087d8 <HAL_Delay>
	lcd_clear();
 80008dc:	f7ff ff98 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d143      	bne.n	800096e <printTemplate+0xa2>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d140      	bne.n	800096e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80008ec:	4a9d      	ldr	r2, [pc, #628]	; (8000b64 <printTemplate+0x298>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ff61 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 80008f6:	4a9c      	ldr	r2, [pc, #624]	; (8000b68 <printTemplate+0x29c>)
 80008f8:	2103      	movs	r1, #3
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff ff5c 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000900:	4a9a      	ldr	r2, [pc, #616]	; (8000b6c <printTemplate+0x2a0>)
 8000902:	2104      	movs	r1, #4
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff ff57 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 800090a:	4a99      	ldr	r2, [pc, #612]	; (8000b70 <printTemplate+0x2a4>)
 800090c:	2105      	movs	r1, #5
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff ff52 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000914:	4a97      	ldr	r2, [pc, #604]	; (8000b74 <printTemplate+0x2a8>)
 8000916:	2106      	movs	r1, #6
 8000918:	2002      	movs	r0, #2
 800091a:	f7ff ff4d 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 800091e:	4a96      	ldr	r2, [pc, #600]	; (8000b78 <printTemplate+0x2ac>)
 8000920:	2107      	movs	r1, #7
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff ff48 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 8000928:	4a94      	ldr	r2, [pc, #592]	; (8000b7c <printTemplate+0x2b0>)
 800092a:	210a      	movs	r1, #10
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff ff43 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000932:	4a93      	ldr	r2, [pc, #588]	; (8000b80 <printTemplate+0x2b4>)
 8000934:	210b      	movs	r1, #11
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff ff3e 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 800093c:	4a91      	ldr	r2, [pc, #580]	; (8000b84 <printTemplate+0x2b8>)
 800093e:	210c      	movs	r1, #12
 8000940:	2002      	movs	r0, #2
 8000942:	f7ff ff39 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 8000946:	4a90      	ldr	r2, [pc, #576]	; (8000b88 <printTemplate+0x2bc>)
 8000948:	210d      	movs	r1, #13
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff ff34 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000950:	4a8e      	ldr	r2, [pc, #568]	; (8000b8c <printTemplate+0x2c0>)
 8000952:	210e      	movs	r1, #14
 8000954:	2002      	movs	r0, #2
 8000956:	f7ff ff2f 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 800095a:	4a8d      	ldr	r2, [pc, #564]	; (8000b90 <printTemplate+0x2c4>)
 800095c:	2105      	movs	r1, #5
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ff2a 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000964:	2103      	movs	r1, #3
 8000966:	2002      	movs	r0, #2
 8000968:	f7ff ff07 	bl	800077a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 800096c:	e0f5      	b.n	8000b5a <printTemplate+0x28e>
	} else if(type == 2) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d178      	bne.n	8000a66 <printTemplate+0x19a>
		if(page == 1) {
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d114      	bne.n	80009a4 <printTemplate+0xd8>
			lcd_clear();
 800097a:	f7ff ff49 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 800097e:	2064      	movs	r0, #100	; 0x64
 8000980:	f007 ff2a 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000984:	4a83      	ldr	r2, [pc, #524]	; (8000b94 <printTemplate+0x2c8>)
 8000986:	2101      	movs	r1, #1
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ff15 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800098e:	4a82      	ldr	r2, [pc, #520]	; (8000b98 <printTemplate+0x2cc>)
 8000990:	2107      	movs	r1, #7
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff10 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000998:	4a80      	ldr	r2, [pc, #512]	; (8000b9c <printTemplate+0x2d0>)
 800099a:	2101      	movs	r1, #1
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff ff0b 	bl	80007b8 <lcd_print>
}
 80009a2:	e0da      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 2) {
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d114      	bne.n	80009d4 <printTemplate+0x108>
			lcd_clear();
 80009aa:	f7ff ff31 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009ae:	2064      	movs	r0, #100	; 0x64
 80009b0:	f007 ff12 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009b4:	4a77      	ldr	r2, [pc, #476]	; (8000b94 <printTemplate+0x2c8>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fefd 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009be:	4a76      	ldr	r2, [pc, #472]	; (8000b98 <printTemplate+0x2cc>)
 80009c0:	2107      	movs	r1, #7
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fef8 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009c8:	4a75      	ldr	r2, [pc, #468]	; (8000ba0 <printTemplate+0x2d4>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff fef3 	bl	80007b8 <lcd_print>
}
 80009d2:	e0c2      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 3) {
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d114      	bne.n	8000a04 <printTemplate+0x138>
			lcd_clear();
 80009da:	f7ff ff19 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f007 fefa 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009e4:	4a6b      	ldr	r2, [pc, #428]	; (8000b94 <printTemplate+0x2c8>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fee5 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009ee:	4a6a      	ldr	r2, [pc, #424]	; (8000b98 <printTemplate+0x2cc>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff fee0 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009f8:	4a6a      	ldr	r2, [pc, #424]	; (8000ba4 <printTemplate+0x2d8>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fedb 	bl	80007b8 <lcd_print>
}
 8000a02:	e0aa      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 4) {
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d114      	bne.n	8000a34 <printTemplate+0x168>
			lcd_clear();
 8000a0a:	f7ff ff01 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f007 fee2 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a14:	4a5f      	ldr	r2, [pc, #380]	; (8000b94 <printTemplate+0x2c8>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff fecd 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a1e:	4a5e      	ldr	r2, [pc, #376]	; (8000b98 <printTemplate+0x2cc>)
 8000a20:	2107      	movs	r1, #7
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fec8 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a28:	4a5f      	ldr	r2, [pc, #380]	; (8000ba8 <printTemplate+0x2dc>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fec3 	bl	80007b8 <lcd_print>
}
 8000a32:	e092      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 5) {
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b05      	cmp	r3, #5
 8000a38:	f040 808f 	bne.w	8000b5a <printTemplate+0x28e>
			lcd_clear();
 8000a3c:	f7ff fee8 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f007 fec9 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a46:	4a53      	ldr	r2, [pc, #332]	; (8000b94 <printTemplate+0x2c8>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff feb4 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a50:	4a51      	ldr	r2, [pc, #324]	; (8000b98 <printTemplate+0x2cc>)
 8000a52:	2107      	movs	r1, #7
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff feaf 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a5a:	4a54      	ldr	r2, [pc, #336]	; (8000bac <printTemplate+0x2e0>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f7ff feaa 	bl	80007b8 <lcd_print>
}
 8000a64:	e079      	b.n	8000b5a <printTemplate+0x28e>
	} else if(type == 3) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d176      	bne.n	8000b5a <printTemplate+0x28e>
		if(page == 1) {
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d114      	bne.n	8000a9c <printTemplate+0x1d0>
			lcd_clear();
 8000a72:	f7ff fecd 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f007 feae 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a7c:	4a4c      	ldr	r2, [pc, #304]	; (8000bb0 <printTemplate+0x2e4>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fe99 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a86:	4a4b      	ldr	r2, [pc, #300]	; (8000bb4 <printTemplate+0x2e8>)
 8000a88:	2107      	movs	r1, #7
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fe94 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000a90:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <printTemplate+0x2d0>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2002      	movs	r0, #2
 8000a96:	f7ff fe8f 	bl	80007b8 <lcd_print>
}
 8000a9a:	e05e      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 2) {
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d114      	bne.n	8000acc <printTemplate+0x200>
			lcd_clear();
 8000aa2:	f7ff feb5 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f007 fe96 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000aac:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <printTemplate+0x2e4>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fe81 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <printTemplate+0x2e8>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fe7c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ac0:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <printTemplate+0x2d4>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fe77 	bl	80007b8 <lcd_print>
}
 8000aca:	e046      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 3) {
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d114      	bne.n	8000afc <printTemplate+0x230>
			lcd_clear();
 8000ad2:	f7ff fe9d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f007 fe7e 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000adc:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <printTemplate+0x2e4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe69 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <printTemplate+0x2e8>)
 8000ae8:	2107      	movs	r1, #7
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fe64 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000af0:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <printTemplate+0x2d8>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fe5f 	bl	80007b8 <lcd_print>
}
 8000afa:	e02e      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 4) {
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d114      	bne.n	8000b2c <printTemplate+0x260>
			lcd_clear();
 8000b02:	f7ff fe85 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b06:	2064      	movs	r0, #100	; 0x64
 8000b08:	f007 fe66 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b0c:	4a28      	ldr	r2, [pc, #160]	; (8000bb0 <printTemplate+0x2e4>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff fe51 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <printTemplate+0x2e8>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fe4c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <printTemplate+0x2dc>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fe47 	bl	80007b8 <lcd_print>
}
 8000b2a:	e016      	b.n	8000b5a <printTemplate+0x28e>
		} else if(page == 5) {
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	d113      	bne.n	8000b5a <printTemplate+0x28e>
			lcd_clear();
 8000b32:	f7ff fe6d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b36:	2064      	movs	r0, #100	; 0x64
 8000b38:	f007 fe4e 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <printTemplate+0x2e4>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fe39 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <printTemplate+0x2e8>)
 8000b48:	2107      	movs	r1, #7
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fe34 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <printTemplate+0x2e0>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff fe2f 	bl	80007b8 <lcd_print>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800cf8c 	.word	0x0800cf8c
 8000b68:	0800cf94 	.word	0x0800cf94
 8000b6c:	0800cf98 	.word	0x0800cf98
 8000b70:	0800cf9c 	.word	0x0800cf9c
 8000b74:	0800cfa0 	.word	0x0800cfa0
 8000b78:	0800cfa4 	.word	0x0800cfa4
 8000b7c:	0800cfa8 	.word	0x0800cfa8
 8000b80:	0800cfac 	.word	0x0800cfac
 8000b84:	0800cfb0 	.word	0x0800cfb0
 8000b88:	0800cfb4 	.word	0x0800cfb4
 8000b8c:	0800cfb8 	.word	0x0800cfb8
 8000b90:	200003c0 	.word	0x200003c0
 8000b94:	0800cfbc 	.word	0x0800cfbc
 8000b98:	200003cc 	.word	0x200003cc
 8000b9c:	0800cfc4 	.word	0x0800cfc4
 8000ba0:	0800cfd8 	.word	0x0800cfd8
 8000ba4:	0800cfec 	.word	0x0800cfec
 8000ba8:	0800d000 	.word	0x0800d000
 8000bac:	0800d014 	.word	0x0800d014
 8000bb0:	0800d028 	.word	0x0800d028
 8000bb4:	200003e0 	.word	0x200003e0

08000bb8 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <getCharFromCursorPosition+0x1c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000050 	.word	0x20000050

08000bd8 <getPositionFromChar>:

uint8_t getPositionFromChar(char currentChar) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	int arraySize = strlen(charactersArray);
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <getPositionFromChar+0x44>)
 8000be4:	f7ff fb1e 	bl	8000224 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<arraySize; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	e00c      	b.n	8000c0c <getPositionFromChar+0x34>
		if(currentChar == charactersArray[i]) {
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <getPositionFromChar+0x44>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d102      	bne.n	8000c06 <getPositionFromChar+0x2e>
			return i;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	e006      	b.n	8000c14 <getPositionFromChar+0x3c>
	for(int i=0; i<arraySize; i++) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbee      	blt.n	8000bf2 <getPositionFromChar+0x1a>
		}
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000050 	.word	0x20000050

08000c20 <takeMachineID>:

void takeMachineID(int state) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fe23 	bl	8000874 <lcd_cursor>

    int cursorPosition = 3;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000c36:	2305      	movs	r3, #5
 8000c38:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000c40:	220c      	movs	r2, #12
 8000c42:	2100      	movs	r1, #0
 8000c44:	4899      	ldr	r0, [pc, #612]	; (8000eac <takeMachineID+0x28c>)
 8000c46:	f00b fcea 	bl	800c61e <memset>
    }
    HAL_Delay(100);
 8000c4a:	2064      	movs	r0, #100	; 0x64
 8000c4c:	f007 fdc4 	bl	80087d8 <HAL_Delay>

    printTemplate(1, 0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fe3a 	bl	80008cc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4895      	ldr	r0, [pc, #596]	; (8000eb0 <takeMachineID+0x290>)
 8000c5c:	f008 fb8c 	bl	8009378 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d138      	bne.n	8000cd8 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fe04 	bl	8000874 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000c6c:	4b8f      	ldr	r3, [pc, #572]	; (8000eac <takeMachineID+0x28c>)
 8000c6e:	7adb      	ldrb	r3, [r3, #11]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d110      	bne.n	8000c96 <takeMachineID+0x76>
        		lcd_clear();
 8000c74:	f7ff fdcc 	bl	8000810 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000c78:	4a8e      	ldr	r2, [pc, #568]	; (8000eb4 <takeMachineID+0x294>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd9b 	bl	80007b8 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000c82:	4a8d      	ldr	r2, [pc, #564]	; (8000eb8 <takeMachineID+0x298>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fd96 	bl	80007b8 <lcd_print>
        		HAL_Delay(1200);
 8000c8c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c90:	f007 fda2 	bl	80087d8 <HAL_Delay>
        		goto mainSection;
 8000c94:	e7c8      	b.n	8000c28 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000c96:	4b89      	ldr	r3, [pc, #548]	; (8000ebc <takeMachineID+0x29c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b88      	ldr	r3, [pc, #544]	; (8000ec0 <takeMachineID+0x2a0>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a82      	ldr	r2, [pc, #520]	; (8000eac <takeMachineID+0x28c>)
 8000ca2:	461c      	mov	r4, r3
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ca8:	6020      	str	r0, [r4, #0]
 8000caa:	6061      	str	r1, [r4, #4]
 8000cac:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000cae:	20c8      	movs	r0, #200	; 0xc8
 8000cb0:	f007 fd92 	bl	80087d8 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000cb4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	236e      	movs	r3, #110	; 0x6e
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	4b80      	ldr	r3, [pc, #512]	; (8000ec0 <takeMachineID+0x2a0>)
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	236e      	movs	r3, #110	; 0x6e
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	21a0      	movs	r1, #160	; 0xa0
 8000cc8:	487e      	ldr	r0, [pc, #504]	; (8000ec4 <takeMachineID+0x2a4>)
 8000cca:	f008 fe0f 	bl	80098ec <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd2:	f007 fd81 	bl	80087d8 <HAL_Delay>

            break;
 8000cd6:	e0e5      	b.n	8000ea4 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4875      	ldr	r0, [pc, #468]	; (8000eb0 <takeMachineID+0x290>)
 8000cdc:	f008 fb4c 	bl	8009378 <HAL_GPIO_ReadPin>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d112      	bne.n	8000d0c <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d102      	bne.n	8000cf2 <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000cec:	230a      	movs	r3, #10
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e008      	b.n	8000d04 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2b0e      	cmp	r3, #14
 8000cf6:	d102      	bne.n	8000cfe <takeMachineID+0xde>
                cursorPosition = 3;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e002      	b.n	8000d04 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000d04:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d08:	f007 fd66 	bl	80087d8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	486e      	ldr	r0, [pc, #440]	; (8000ec8 <takeMachineID+0x2a8>)
 8000d10:	f008 fb32 	bl	8009378 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d112      	bne.n	8000d40 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d102      	bne.n	8000d26 <takeMachineID+0x106>
                cursorPosition = 14;
 8000d20:	230e      	movs	r3, #14
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e008      	b.n	8000d38 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	d102      	bne.n	8000d32 <takeMachineID+0x112>
            	cursorPosition = 7;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e002      	b.n	8000d38 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000d38:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d3c:	f007 fd4c 	bl	80087d8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000d40:	2102      	movs	r1, #2
 8000d42:	485b      	ldr	r0, [pc, #364]	; (8000eb0 <takeMachineID+0x290>)
 8000d44:	f008 fb18 	bl	8009378 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d16c      	bne.n	8000e28 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d105      	bne.n	8000d60 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000d54:	4a55      	ldr	r2, [pc, #340]	; (8000eac <takeMachineID+0x28c>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2230      	movs	r2, #48	; 0x30
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e04f      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d105      	bne.n	8000d72 <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000d66:	4a51      	ldr	r2, [pc, #324]	; (8000eac <takeMachineID+0x28c>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2231      	movs	r2, #49	; 0x31
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e046      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d105      	bne.n	8000d84 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000d78:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <takeMachineID+0x28c>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	2232      	movs	r2, #50	; 0x32
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e03d      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d105      	bne.n	8000d96 <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000d8a:	4a48      	ldr	r2, [pc, #288]	; (8000eac <takeMachineID+0x28c>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4413      	add	r3, r2
 8000d90:	2233      	movs	r2, #51	; 0x33
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e034      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d105      	bne.n	8000da8 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000d9c:	4a43      	ldr	r2, [pc, #268]	; (8000eac <takeMachineID+0x28c>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4413      	add	r3, r2
 8000da2:	2234      	movs	r2, #52	; 0x34
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e02b      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d105      	bne.n	8000dba <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000dae:	4a3f      	ldr	r2, [pc, #252]	; (8000eac <takeMachineID+0x28c>)
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4413      	add	r3, r2
 8000db4:	2235      	movs	r2, #53	; 0x35
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e022      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b0b      	cmp	r3, #11
 8000dbe:	d105      	bne.n	8000dcc <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000dc0:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <takeMachineID+0x28c>)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2236      	movs	r2, #54	; 0x36
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e019      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b0c      	cmp	r3, #12
 8000dd0:	d105      	bne.n	8000dde <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000dd2:	4a36      	ldr	r2, [pc, #216]	; (8000eac <takeMachineID+0x28c>)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	2237      	movs	r2, #55	; 0x37
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e010      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2b0d      	cmp	r3, #13
 8000de2:	d105      	bne.n	8000df0 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000de4:	4a31      	ldr	r2, [pc, #196]	; (8000eac <takeMachineID+0x28c>)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4413      	add	r3, r2
 8000dea:	2238      	movs	r2, #56	; 0x38
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e007      	b.n	8000e00 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b0e      	cmp	r3, #14
 8000df4:	d104      	bne.n	8000e00 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000df6:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <takeMachineID+0x28c>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	2239      	movs	r2, #57	; 0x39
 8000dfe:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	b2d9      	uxtb	r1, r3
 8000e04:	4a29      	ldr	r2, [pc, #164]	; (8000eac <takeMachineID+0x28c>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff fce7 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000e20:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000e24:	f007 fcd8 	bl	80087d8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <takeMachineID+0x290>)
 8000e2c:	f008 faa4 	bl	8009378 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d12f      	bne.n	8000e96 <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <takeMachineID+0x28c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d027      	beq.n	8000e8e <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000e3e:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <takeMachineID+0x28c>)
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4413      	add	r3, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fce6 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f007 fcbd 	bl	80087d8 <HAL_Delay>

                if(writeLoc > 5) {
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	dd03      	ble.n	8000e6c <takeMachineID+0x24c>
                	writeLoc--;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e004      	b.n	8000e76 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	dc01      	bgt.n	8000e76 <takeMachineID+0x256>
                	writeLoc = 5;
 8000e72:	2305      	movs	r3, #5
 8000e74:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	dd03      	ble.n	8000e84 <takeMachineID+0x264>
                	machineIDLoc--;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	e004      	b.n	8000e8e <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da01      	bge.n	8000e8e <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000e8e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e92:	f007 fca1 	bl	80087d8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff fc6c 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000ea2:	e6d9      	b.n	8000c58 <takeMachineID+0x38>
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	200003c0 	.word	0x200003c0
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	0800d030 	.word	0x0800d030
 8000eb8:	0800d044 	.word	0x0800d044
 8000ebc:	200000a1 	.word	0x200000a1
 8000ec0:	20000328 	.word	0x20000328
 8000ec4:	20000244 	.word	0x20000244
 8000ec8:	40011000 	.word	0x40011000

08000ecc <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08d      	sub	sp, #52	; 0x34
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff fccd 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d104      	bne.n	8000eea <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000ee0:	2214      	movs	r2, #20
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	489a      	ldr	r0, [pc, #616]	; (8001150 <takeWifiSSID+0x284>)
 8000ee6:	f00b fb9a 	bl	800c61e <memset>
    }

    int realCharPos = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
    cursorPosition = 1;
 8000eee:	4b99      	ldr	r3, [pc, #612]	; (8001154 <takeWifiSSID+0x288>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
    page = 1;
 8000ef4:	4b98      	ldr	r3, [pc, #608]	; (8001158 <takeWifiSSID+0x28c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
    int writeLoc = 7;
 8000efe:	2307      	movs	r3, #7
 8000f00:	617b      	str	r3, [r7, #20]

    uint8_t tempSSIDStartPos = ssidStartPos;
 8000f02:	4b96      	ldr	r3, [pc, #600]	; (800115c <takeWifiSSID+0x290>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	74fb      	strb	r3, [r7, #19]

    printTemplate(2, 1);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff fcde 	bl	80008cc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f10:	2108      	movs	r1, #8
 8000f12:	4893      	ldr	r0, [pc, #588]	; (8001160 <takeWifiSSID+0x294>)
 8000f14:	f008 fa30 	bl	8009378 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d14c      	bne.n	8000fb8 <takeWifiSSID+0xec>
            lcd_cursor(0);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff fca8 	bl	8000874 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000f24:	488a      	ldr	r0, [pc, #552]	; (8001150 <takeWifiSSID+0x284>)
 8000f26:	f7ff f97d 	bl	8000224 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b14      	cmp	r3, #20
 8000f2e:	d910      	bls.n	8000f52 <takeWifiSSID+0x86>
                lcd_clear();
 8000f30:	f7ff fc6e 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000f34:	4a8b      	ldr	r2, [pc, #556]	; (8001164 <takeWifiSSID+0x298>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fc3d 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000f3e:	4a8a      	ldr	r2, [pc, #552]	; (8001168 <takeWifiSSID+0x29c>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff fc38 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8000f48:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f4c:	f007 fc44 	bl	80087d8 <HAL_Delay>
                goto mainSSIDSection;
 8000f50:	e7c0      	b.n	8000ed4 <takeWifiSSID+0x8>
            }

            uint8_t ssidSize = strlen(wifiSSID);
 8000f52:	487f      	ldr	r0, [pc, #508]	; (8001150 <takeWifiSSID+0x284>)
 8000f54:	f7ff f966 	bl	8000224 <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	72fb      	strb	r3, [r7, #11]
            for(int i=0; i<ssidSize; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e011      	b.n	8000f86 <takeWifiSSID+0xba>
            	eepromData[tempSSIDStartPos] = getPositionFromChar(wifiSSID[i]);
 8000f62:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <takeWifiSSID+0x284>)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	7cfc      	ldrb	r4, [r7, #19]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fe33 	bl	8000bd8 <getPositionFromChar>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b7d      	ldr	r3, [pc, #500]	; (800116c <takeWifiSSID+0x2a0>)
 8000f78:	551a      	strb	r2, [r3, r4]
            	tempSSIDStartPos++;
 8000f7a:	7cfb      	ldrb	r3, [r7, #19]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	74fb      	strb	r3, [r7, #19]
            for(int i=0; i<ssidSize; i++) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbe9      	blt.n	8000f62 <takeWifiSSID+0x96>
            }
            HAL_Delay(250);
 8000f8e:	20fa      	movs	r0, #250	; 0xfa
 8000f90:	f007 fc22 	bl	80087d8 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000f94:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	236e      	movs	r3, #110	; 0x6e
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b73      	ldr	r3, [pc, #460]	; (800116c <takeWifiSSID+0x2a0>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	236e      	movs	r3, #110	; 0x6e
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	21a0      	movs	r1, #160	; 0xa0
 8000fa8:	4871      	ldr	r0, [pc, #452]	; (8001170 <takeWifiSSID+0x2a4>)
 8000faa:	f008 fc9f 	bl	80098ec <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000fae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb2:	f007 fc11 	bl	80087d8 <HAL_Delay>

            break;
 8000fb6:	e14e      	b.n	8001256 <takeWifiSSID+0x38a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4869      	ldr	r0, [pc, #420]	; (8001160 <takeWifiSSID+0x294>)
 8000fbc:	f008 f9dc 	bl	8009378 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d166      	bne.n	8001094 <takeWifiSSID+0x1c8>
        	realCharPos++;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
        	if(realCharPos > 80) {
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b50      	cmp	r3, #80	; 0x50
 8000fd0:	dd01      	ble.n	8000fd6 <takeWifiSSID+0x10a>
        		realCharPos = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61fb      	str	r3, [r7, #28]
        	}
            if (cursorPosition == 16) {
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <takeWifiSSID+0x288>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	d152      	bne.n	8001084 <takeWifiSSID+0x1b8>
            	if(page == 1) {
 8000fde:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <takeWifiSSID+0x28c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10c      	bne.n	8001000 <takeWifiSSID+0x134>
            		cursorPosition = 1;
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <takeWifiSSID+0x288>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
            		page++;
 8000fec:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <takeWifiSSID+0x28c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a59      	ldr	r2, [pc, #356]	; (8001158 <takeWifiSSID+0x28c>)
 8000ff4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f7ff fc67 	bl	80008cc <printTemplate>
 8000ffe:	e046      	b.n	800108e <takeWifiSSID+0x1c2>
            	} else if(page == 2) {
 8001000:	4b55      	ldr	r3, [pc, #340]	; (8001158 <takeWifiSSID+0x28c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d10c      	bne.n	8001022 <takeWifiSSID+0x156>
            		cursorPosition = 1;
 8001008:	4b52      	ldr	r3, [pc, #328]	; (8001154 <takeWifiSSID+0x288>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
            		page++;
 800100e:	4b52      	ldr	r3, [pc, #328]	; (8001158 <takeWifiSSID+0x28c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a50      	ldr	r2, [pc, #320]	; (8001158 <takeWifiSSID+0x28c>)
 8001016:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8001018:	2103      	movs	r1, #3
 800101a:	2002      	movs	r0, #2
 800101c:	f7ff fc56 	bl	80008cc <printTemplate>
 8001020:	e035      	b.n	800108e <takeWifiSSID+0x1c2>
            	} else if(page == 3) {
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <takeWifiSSID+0x28c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d10c      	bne.n	8001044 <takeWifiSSID+0x178>
            		cursorPosition = 1;
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <takeWifiSSID+0x288>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
            		page++;
 8001030:	4b49      	ldr	r3, [pc, #292]	; (8001158 <takeWifiSSID+0x28c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a48      	ldr	r2, [pc, #288]	; (8001158 <takeWifiSSID+0x28c>)
 8001038:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 800103a:	2104      	movs	r1, #4
 800103c:	2002      	movs	r0, #2
 800103e:	f7ff fc45 	bl	80008cc <printTemplate>
 8001042:	e024      	b.n	800108e <takeWifiSSID+0x1c2>
            	} else if(page == 4) {
 8001044:	4b44      	ldr	r3, [pc, #272]	; (8001158 <takeWifiSSID+0x28c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d10c      	bne.n	8001066 <takeWifiSSID+0x19a>
            		cursorPosition = 1;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <takeWifiSSID+0x288>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
            		page++;
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <takeWifiSSID+0x28c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a3f      	ldr	r2, [pc, #252]	; (8001158 <takeWifiSSID+0x28c>)
 800105a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 800105c:	2105      	movs	r1, #5
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff fc34 	bl	80008cc <printTemplate>
 8001064:	e013      	b.n	800108e <takeWifiSSID+0x1c2>
            	} else if(page == 5) {
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <takeWifiSSID+0x28c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10f      	bne.n	800108e <takeWifiSSID+0x1c2>
            		cursorPosition = 1;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <takeWifiSSID+0x288>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001074:	4b38      	ldr	r3, [pc, #224]	; (8001158 <takeWifiSSID+0x28c>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800107a:	2101      	movs	r1, #1
 800107c:	2002      	movs	r0, #2
 800107e:	f7ff fc25 	bl	80008cc <printTemplate>
 8001082:	e004      	b.n	800108e <takeWifiSSID+0x1c2>
            	}
            } else {
            	cursorPosition++;
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <takeWifiSSID+0x288>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <takeWifiSSID+0x288>)
 800108c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800108e:	20fa      	movs	r0, #250	; 0xfa
 8001090:	f007 fba2 	bl	80087d8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001094:	2108      	movs	r1, #8
 8001096:	4837      	ldr	r0, [pc, #220]	; (8001174 <takeWifiSSID+0x2a8>)
 8001098:	f008 f96e 	bl	8009378 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d172      	bne.n	8001188 <takeWifiSSID+0x2bc>
        	realCharPos--;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
        	if(realCharPos < 1) {
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dc01      	bgt.n	80010b2 <takeWifiSSID+0x1e6>
        		realCharPos = 80;
 80010ae:	2350      	movs	r3, #80	; 0x50
 80010b0:	61fb      	str	r3, [r7, #28]
        	}
            if(cursorPosition == 1) {
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <takeWifiSSID+0x288>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d15e      	bne.n	8001178 <takeWifiSSID+0x2ac>
            	if(page == 1) {
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <takeWifiSSID+0x28c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10a      	bne.n	80010d8 <takeWifiSSID+0x20c>
            		cursorPosition = 16;
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <takeWifiSSID+0x288>)
 80010c4:	2210      	movs	r2, #16
 80010c6:	601a      	str	r2, [r3, #0]
            		page = 5;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <takeWifiSSID+0x28c>)
 80010ca:	2205      	movs	r2, #5
 80010cc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80010ce:	2105      	movs	r1, #5
 80010d0:	2002      	movs	r0, #2
 80010d2:	f7ff fbfb 	bl	80008cc <printTemplate>
 80010d6:	e054      	b.n	8001182 <takeWifiSSID+0x2b6>
            	} else if(page == 2) {
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <takeWifiSSID+0x28c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d10a      	bne.n	80010f6 <takeWifiSSID+0x22a>
            		cursorPosition = 16;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <takeWifiSSID+0x288>)
 80010e2:	2210      	movs	r2, #16
 80010e4:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <takeWifiSSID+0x28c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80010ec:	2101      	movs	r1, #1
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff fbec 	bl	80008cc <printTemplate>
 80010f4:	e045      	b.n	8001182 <takeWifiSSID+0x2b6>
            	} else if(page == 3) {
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <takeWifiSSID+0x28c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d10a      	bne.n	8001114 <takeWifiSSID+0x248>
            		cursorPosition = 16;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <takeWifiSSID+0x288>)
 8001100:	2210      	movs	r2, #16
 8001102:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <takeWifiSSID+0x28c>)
 8001106:	2202      	movs	r2, #2
 8001108:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 800110a:	2102      	movs	r1, #2
 800110c:	2002      	movs	r0, #2
 800110e:	f7ff fbdd 	bl	80008cc <printTemplate>
 8001112:	e036      	b.n	8001182 <takeWifiSSID+0x2b6>
            	} else if(page == 4) {
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <takeWifiSSID+0x28c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d10a      	bne.n	8001132 <takeWifiSSID+0x266>
            		cursorPosition = 16;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <takeWifiSSID+0x288>)
 800111e:	2210      	movs	r2, #16
 8001120:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <takeWifiSSID+0x28c>)
 8001124:	2203      	movs	r2, #3
 8001126:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8001128:	2103      	movs	r1, #3
 800112a:	2002      	movs	r0, #2
 800112c:	f7ff fbce 	bl	80008cc <printTemplate>
 8001130:	e027      	b.n	8001182 <takeWifiSSID+0x2b6>
            	} else if(page == 5) {
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <takeWifiSSID+0x28c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d123      	bne.n	8001182 <takeWifiSSID+0x2b6>
            		cursorPosition = 16;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <takeWifiSSID+0x288>)
 800113c:	2210      	movs	r2, #16
 800113e:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <takeWifiSSID+0x28c>)
 8001142:	2204      	movs	r2, #4
 8001144:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8001146:	2104      	movs	r1, #4
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fbbf 	bl	80008cc <printTemplate>
 800114e:	e018      	b.n	8001182 <takeWifiSSID+0x2b6>
 8001150:	200003cc 	.word	0x200003cc
 8001154:	20000034 	.word	0x20000034
 8001158:	20000038 	.word	0x20000038
 800115c:	200000a2 	.word	0x200000a2
 8001160:	40010800 	.word	0x40010800
 8001164:	0800d058 	.word	0x0800d058
 8001168:	0800d06c 	.word	0x0800d06c
 800116c:	20000328 	.word	0x20000328
 8001170:	20000244 	.word	0x20000244
 8001174:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <takeWifiSSID+0x394>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <takeWifiSSID+0x394>)
 8001180:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001182:	20fa      	movs	r0, #250	; 0xfa
 8001184:	f007 fb28 	bl	80087d8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001188:	2102      	movs	r1, #2
 800118a:	4836      	ldr	r0, [pc, #216]	; (8001264 <takeWifiSSID+0x398>)
 800118c:	f008 f8f4 	bl	8009378 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d121      	bne.n	80011da <takeWifiSSID+0x30e>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b01      	subs	r3, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd0c 	bl	8000bb8 <getCharFromCursorPosition>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4a30      	ldr	r2, [pc, #192]	; (8001268 <takeWifiSSID+0x39c>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4413      	add	r3, r2
 80011aa:	460a      	mov	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <takeWifiSSID+0x39c>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fb10 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
            wifiNameLoc++;
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
            tempSSIDStartPos++;
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	3301      	adds	r3, #1
 80011d2:	74fb      	strb	r3, [r7, #19]

            HAL_Delay(250);
 80011d4:	20fa      	movs	r0, #250	; 0xfa
 80011d6:	f007 faff 	bl	80087d8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80011da:	2104      	movs	r1, #4
 80011dc:	4821      	ldr	r0, [pc, #132]	; (8001264 <takeWifiSSID+0x398>)
 80011de:	f008 f8cb 	bl	8009378 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d12e      	bne.n	8001246 <takeWifiSSID+0x37a>
        	if(strlen(wifiSSID) >= 1) {
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <takeWifiSSID+0x39c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d027      	beq.n	8001240 <takeWifiSSID+0x374>
        		wifiSSID[wifiNameLoc] = '\0';
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <takeWifiSSID+0x39c>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4413      	add	r3, r2
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	3306      	adds	r3, #6
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4619      	mov	r1, r3
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fb0d 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 800120a:	2032      	movs	r0, #50	; 0x32
 800120c:	f007 fae4 	bl	80087d8 <HAL_Delay>
        		if(writeLoc > 7) {
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b07      	cmp	r3, #7
 8001214:	dd03      	ble.n	800121e <takeWifiSSID+0x352>
        			writeLoc--;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3b01      	subs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e004      	b.n	8001228 <takeWifiSSID+0x35c>
        		} else if(writeLoc < 7) {
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b06      	cmp	r3, #6
 8001222:	dc01      	bgt.n	8001228 <takeWifiSSID+0x35c>
        			writeLoc = 7;
 8001224:	2307      	movs	r3, #7
 8001226:	617b      	str	r3, [r7, #20]
        		}

        		if(wifiNameLoc > 0) {
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dd03      	ble.n	8001236 <takeWifiSSID+0x36a>
        			wifiNameLoc--;
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	3b01      	subs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	e004      	b.n	8001240 <takeWifiSSID+0x374>
        		} else if(wifiNameLoc < 0) {
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da01      	bge.n	8001240 <takeWifiSSID+0x374>
        			wifiNameLoc = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
        		}
        	}

        	HAL_Delay(250);
 8001240:	20fa      	movs	r0, #250	; 0xfa
 8001242:	f007 fac9 	bl	80087d8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <takeWifiSSID+0x394>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	2002      	movs	r0, #2
 8001250:	f7ff fa93 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001254:	e65c      	b.n	8000f10 <takeWifiSSID+0x44>
    }
}
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	20000034 	.word	0x20000034
 8001264:	40010800 	.word	0x40010800
 8001268:	200003cc 	.word	0x200003cc

0800126c <takeWifiPass>:

void takeWifiPass(int state) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08d      	sub	sp, #52	; 0x34
 8001270:	af04      	add	r7, sp, #16
 8001272:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fafd 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001280:	2214      	movs	r2, #20
 8001282:	2100      	movs	r1, #0
 8001284:	489a      	ldr	r0, [pc, #616]	; (80014f0 <takeWifiPass+0x284>)
 8001286:	f00b f9ca 	bl	800c61e <memset>
    }

    int realCharPos = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
    cursorPosition = 1;
 800128e:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <takeWifiPass+0x288>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
    page = 1;
 8001294:	4b98      	ldr	r3, [pc, #608]	; (80014f8 <takeWifiPass+0x28c>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
    int writeLoc = 7;
 800129e:	2307      	movs	r3, #7
 80012a0:	617b      	str	r3, [r7, #20]

    uint8_t tempPassStartPos = passStartPos;
 80012a2:	4b96      	ldr	r3, [pc, #600]	; (80014fc <takeWifiPass+0x290>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	74fb      	strb	r3, [r7, #19]

    printTemplate(3, 1);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2003      	movs	r0, #3
 80012ac:	f7ff fb0e 	bl	80008cc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012b0:	2108      	movs	r1, #8
 80012b2:	4893      	ldr	r0, [pc, #588]	; (8001500 <takeWifiPass+0x294>)
 80012b4:	f008 f860 	bl	8009378 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d14c      	bne.n	8001358 <takeWifiPass+0xec>
            lcd_cursor(0);
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff fad8 	bl	8000874 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80012c4:	488a      	ldr	r0, [pc, #552]	; (80014f0 <takeWifiPass+0x284>)
 80012c6:	f7fe ffad 	bl	8000224 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b14      	cmp	r3, #20
 80012ce:	d910      	bls.n	80012f2 <takeWifiPass+0x86>
                lcd_clear();
 80012d0:	f7ff fa9e 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80012d4:	4a8b      	ldr	r2, [pc, #556]	; (8001504 <takeWifiPass+0x298>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fa6d 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80012de:	4a8a      	ldr	r2, [pc, #552]	; (8001508 <takeWifiPass+0x29c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff fa68 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 80012e8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80012ec:	f007 fa74 	bl	80087d8 <HAL_Delay>
                goto mainPASSSection;
 80012f0:	e7c0      	b.n	8001274 <takeWifiPass+0x8>
            }

            uint8_t passSize = strlen(wifiPass);
 80012f2:	487f      	ldr	r0, [pc, #508]	; (80014f0 <takeWifiPass+0x284>)
 80012f4:	f7fe ff96 	bl	8000224 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	72fb      	strb	r3, [r7, #11]

            for(int i=0; i<passSize; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e011      	b.n	8001326 <takeWifiPass+0xba>
                eepromData[tempPassStartPos] = getPositionFromChar(wifiPass[i]);
 8001302:	4a7b      	ldr	r2, [pc, #492]	; (80014f0 <takeWifiPass+0x284>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	7cfc      	ldrb	r4, [r7, #19]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fc63 	bl	8000bd8 <getPositionFromChar>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <takeWifiPass+0x2a0>)
 8001318:	551a      	strb	r2, [r3, r4]
                tempPassStartPos++;
 800131a:	7cfb      	ldrb	r3, [r7, #19]
 800131c:	3301      	adds	r3, #1
 800131e:	74fb      	strb	r3, [r7, #19]
            for(int i=0; i<passSize; i++) {
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbe9      	blt.n	8001302 <takeWifiPass+0x96>
            }
            HAL_Delay(250);
 800132e:	20fa      	movs	r0, #250	; 0xfa
 8001330:	f007 fa52 	bl	80087d8 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001334:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	236e      	movs	r3, #110	; 0x6e
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	4b73      	ldr	r3, [pc, #460]	; (800150c <takeWifiPass+0x2a0>)
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	236e      	movs	r3, #110	; 0x6e
 8001344:	2200      	movs	r2, #0
 8001346:	21a0      	movs	r1, #160	; 0xa0
 8001348:	4871      	ldr	r0, [pc, #452]	; (8001510 <takeWifiPass+0x2a4>)
 800134a:	f008 facf 	bl	80098ec <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800134e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001352:	f007 fa41 	bl	80087d8 <HAL_Delay>

            break;
 8001356:	e14b      	b.n	80015f0 <takeWifiPass+0x384>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001358:	2101      	movs	r1, #1
 800135a:	4869      	ldr	r0, [pc, #420]	; (8001500 <takeWifiPass+0x294>)
 800135c:	f008 f80c 	bl	8009378 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d166      	bne.n	8001434 <takeWifiPass+0x1c8>
        	realCharPos++;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
        	if(realCharPos > 80) {
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b50      	cmp	r3, #80	; 0x50
 8001370:	dd01      	ble.n	8001376 <takeWifiPass+0x10a>
        	    realCharPos = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
        	}
            if (cursorPosition == 16) {
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <takeWifiPass+0x288>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d152      	bne.n	8001424 <takeWifiPass+0x1b8>
            	if(page == 1) {
 800137e:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <takeWifiPass+0x28c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10c      	bne.n	80013a0 <takeWifiPass+0x134>
            		cursorPosition = 1;
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <takeWifiPass+0x288>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
            		page++;
 800138c:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <takeWifiPass+0x28c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a59      	ldr	r2, [pc, #356]	; (80014f8 <takeWifiPass+0x28c>)
 8001394:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001396:	2102      	movs	r1, #2
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff fa97 	bl	80008cc <printTemplate>
 800139e:	e046      	b.n	800142e <takeWifiPass+0x1c2>
            	} else if(page == 2) {
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <takeWifiPass+0x28c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d10c      	bne.n	80013c2 <takeWifiPass+0x156>
            		cursorPosition = 1;
 80013a8:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <takeWifiPass+0x288>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
            		page++;
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <takeWifiPass+0x28c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <takeWifiPass+0x28c>)
 80013b6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80013b8:	2103      	movs	r1, #3
 80013ba:	2003      	movs	r0, #3
 80013bc:	f7ff fa86 	bl	80008cc <printTemplate>
 80013c0:	e035      	b.n	800142e <takeWifiPass+0x1c2>
            	} else if(page == 3) {
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <takeWifiPass+0x28c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d10c      	bne.n	80013e4 <takeWifiPass+0x178>
            		cursorPosition = 1;
 80013ca:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <takeWifiPass+0x288>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
            		page++;
 80013d0:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <takeWifiPass+0x28c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <takeWifiPass+0x28c>)
 80013d8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80013da:	2104      	movs	r1, #4
 80013dc:	2003      	movs	r0, #3
 80013de:	f7ff fa75 	bl	80008cc <printTemplate>
 80013e2:	e024      	b.n	800142e <takeWifiPass+0x1c2>
            	} else if(page == 4) {
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <takeWifiPass+0x28c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d10c      	bne.n	8001406 <takeWifiPass+0x19a>
            		cursorPosition = 1;
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <takeWifiPass+0x288>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
            		page++;
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <takeWifiPass+0x28c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <takeWifiPass+0x28c>)
 80013fa:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80013fc:	2105      	movs	r1, #5
 80013fe:	2003      	movs	r0, #3
 8001400:	f7ff fa64 	bl	80008cc <printTemplate>
 8001404:	e013      	b.n	800142e <takeWifiPass+0x1c2>
            	} else if(page == 5) {
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <takeWifiPass+0x28c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d10f      	bne.n	800142e <takeWifiPass+0x1c2>
            		cursorPosition = 1;
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <takeWifiPass+0x288>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <takeWifiPass+0x28c>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	2003      	movs	r0, #3
 800141e:	f7ff fa55 	bl	80008cc <printTemplate>
 8001422:	e004      	b.n	800142e <takeWifiPass+0x1c2>
            	}
            } else {
            	cursorPosition++;
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <takeWifiPass+0x288>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <takeWifiPass+0x288>)
 800142c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800142e:	20fa      	movs	r0, #250	; 0xfa
 8001430:	f007 f9d2 	bl	80087d8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001434:	2108      	movs	r1, #8
 8001436:	4837      	ldr	r0, [pc, #220]	; (8001514 <takeWifiPass+0x2a8>)
 8001438:	f007 ff9e 	bl	8009378 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d172      	bne.n	8001528 <takeWifiPass+0x2bc>
        	realCharPos--;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b01      	subs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
        	if(realCharPos < 1) {
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b00      	cmp	r3, #0
 800144c:	dc01      	bgt.n	8001452 <takeWifiPass+0x1e6>
        	    realCharPos = 80;
 800144e:	2350      	movs	r3, #80	; 0x50
 8001450:	61fb      	str	r3, [r7, #28]
        	}
            if(cursorPosition == 1) {
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <takeWifiPass+0x288>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d15e      	bne.n	8001518 <takeWifiPass+0x2ac>
            	if(page == 1) {
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <takeWifiPass+0x28c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10a      	bne.n	8001478 <takeWifiPass+0x20c>
            		cursorPosition = 16;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <takeWifiPass+0x288>)
 8001464:	2210      	movs	r2, #16
 8001466:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <takeWifiPass+0x28c>)
 800146a:	2205      	movs	r2, #5
 800146c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800146e:	2105      	movs	r1, #5
 8001470:	2003      	movs	r0, #3
 8001472:	f7ff fa2b 	bl	80008cc <printTemplate>
 8001476:	e054      	b.n	8001522 <takeWifiPass+0x2b6>
            	} else if(page == 2) {
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <takeWifiPass+0x28c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d10a      	bne.n	8001496 <takeWifiPass+0x22a>
            		cursorPosition = 16;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <takeWifiPass+0x288>)
 8001482:	2210      	movs	r2, #16
 8001484:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <takeWifiPass+0x28c>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800148c:	2101      	movs	r1, #1
 800148e:	2003      	movs	r0, #3
 8001490:	f7ff fa1c 	bl	80008cc <printTemplate>
 8001494:	e045      	b.n	8001522 <takeWifiPass+0x2b6>
            	} else if(page == 3) {
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <takeWifiPass+0x28c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d10a      	bne.n	80014b4 <takeWifiPass+0x248>
            		cursorPosition = 16;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <takeWifiPass+0x288>)
 80014a0:	2210      	movs	r2, #16
 80014a2:	601a      	str	r2, [r3, #0]
            		page = 2;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <takeWifiPass+0x28c>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80014aa:	2102      	movs	r1, #2
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7ff fa0d 	bl	80008cc <printTemplate>
 80014b2:	e036      	b.n	8001522 <takeWifiPass+0x2b6>
            	} else if(page == 4) {
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <takeWifiPass+0x28c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d10a      	bne.n	80014d2 <takeWifiPass+0x266>
            		cursorPosition = 16;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <takeWifiPass+0x288>)
 80014be:	2210      	movs	r2, #16
 80014c0:	601a      	str	r2, [r3, #0]
            		page = 3;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <takeWifiPass+0x28c>)
 80014c4:	2203      	movs	r2, #3
 80014c6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80014c8:	2103      	movs	r1, #3
 80014ca:	2003      	movs	r0, #3
 80014cc:	f7ff f9fe 	bl	80008cc <printTemplate>
 80014d0:	e027      	b.n	8001522 <takeWifiPass+0x2b6>
            	} else if(page == 5) {
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <takeWifiPass+0x28c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d123      	bne.n	8001522 <takeWifiPass+0x2b6>
            		cursorPosition = 16;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <takeWifiPass+0x288>)
 80014dc:	2210      	movs	r2, #16
 80014de:	601a      	str	r2, [r3, #0]
            		page = 4;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <takeWifiPass+0x28c>)
 80014e2:	2204      	movs	r2, #4
 80014e4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80014e6:	2104      	movs	r1, #4
 80014e8:	2003      	movs	r0, #3
 80014ea:	f7ff f9ef 	bl	80008cc <printTemplate>
 80014ee:	e018      	b.n	8001522 <takeWifiPass+0x2b6>
 80014f0:	200003e0 	.word	0x200003e0
 80014f4:	20000034 	.word	0x20000034
 80014f8:	20000038 	.word	0x20000038
 80014fc:	200000a3 	.word	0x200000a3
 8001500:	40010800 	.word	0x40010800
 8001504:	0800d058 	.word	0x0800d058
 8001508:	0800d080 	.word	0x0800d080
 800150c:	20000328 	.word	0x20000328
 8001510:	20000244 	.word	0x20000244
 8001514:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <takeWifiPass+0x38c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	4a36      	ldr	r2, [pc, #216]	; (80015f8 <takeWifiPass+0x38c>)
 8001520:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001522:	20fa      	movs	r0, #250	; 0xfa
 8001524:	f007 f958 	bl	80087d8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001528:	2102      	movs	r1, #2
 800152a:	4834      	ldr	r0, [pc, #208]	; (80015fc <takeWifiPass+0x390>)
 800152c:	f007 ff24 	bl	8009378 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d11e      	bne.n	8001574 <takeWifiPass+0x308>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b01      	subs	r3, #1
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb3c 	bl	8000bb8 <getCharFromCursorPosition>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <takeWifiPass+0x394>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4413      	add	r3, r2
 800154a:	460a      	mov	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	b2d9      	uxtb	r1, r3
 8001552:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <takeWifiPass+0x394>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff f940 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
            wifiPassLoc++;
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	3301      	adds	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]

            HAL_Delay(250);
 800156e:	20fa      	movs	r0, #250	; 0xfa
 8001570:	f007 f932 	bl	80087d8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001574:	2104      	movs	r1, #4
 8001576:	4821      	ldr	r0, [pc, #132]	; (80015fc <takeWifiPass+0x390>)
 8001578:	f007 fefe 	bl	8009378 <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12e      	bne.n	80015e0 <takeWifiPass+0x374>
            if(strlen(wifiPass) >= 1) {
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <takeWifiPass+0x394>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d027      	beq.n	80015da <takeWifiPass+0x36e>
            	wifiPass[wifiPassLoc] = '\0';
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <takeWifiPass+0x394>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4413      	add	r3, r2
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3306      	adds	r3, #6
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff f940 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 80015a4:	2032      	movs	r0, #50	; 0x32
 80015a6:	f007 f917 	bl	80087d8 <HAL_Delay>

            	if(writeLoc > 7) {
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b07      	cmp	r3, #7
 80015ae:	dd03      	ble.n	80015b8 <takeWifiPass+0x34c>
            		writeLoc--;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e004      	b.n	80015c2 <takeWifiPass+0x356>
            	} else if(writeLoc < 7) {
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	dc01      	bgt.n	80015c2 <takeWifiPass+0x356>
            		writeLoc = 7;
 80015be:	2307      	movs	r3, #7
 80015c0:	617b      	str	r3, [r7, #20]
            	}

            	if(wifiPassLoc > 0) {
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd03      	ble.n	80015d0 <takeWifiPass+0x364>
            		wifiPassLoc--;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	e004      	b.n	80015da <takeWifiPass+0x36e>
            	} else if(wifiPassLoc < 0) {
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da01      	bge.n	80015da <takeWifiPass+0x36e>
            		wifiPassLoc = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
            	}
            }

            HAL_Delay(250);
 80015da:	20fa      	movs	r0, #250	; 0xfa
 80015dc:	f007 f8fc 	bl	80087d8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <takeWifiPass+0x38c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff f8c6 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80015ee:	e65f      	b.n	80012b0 <takeWifiPass+0x44>
    }
}
 80015f0:	bf00      	nop
 80015f2:	3724      	adds	r7, #36	; 0x24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	20000034 	.word	0x20000034
 80015fc:	40010800 	.word	0x40010800
 8001600:	200003e0 	.word	0x200003e0

08001604 <checkSlideVal>:

int checkSlideVal(int state) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d111      	bne.n	8001636 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001612:	2101      	movs	r1, #1
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <checkSlideVal+0x60>)
 8001616:	f007 feaf 	bl	8009378 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <checkSlideVal+0x20>
			return 34;
 8001620:	2322      	movs	r3, #34	; 0x22
 8001622:	e01b      	b.n	800165c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001624:	2108      	movs	r1, #8
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <checkSlideVal+0x64>)
 8001628:	f007 fea6 	bl	8009378 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d113      	bne.n	800165a <checkSlideVal+0x56>
			return 32;
 8001632:	2320      	movs	r3, #32
 8001634:	e012      	b.n	800165c <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001636:	2101      	movs	r1, #1
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <checkSlideVal+0x60>)
 800163a:	f007 fe9d 	bl	8009378 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <checkSlideVal+0x44>
			return 35;
 8001644:	2323      	movs	r3, #35	; 0x23
 8001646:	e009      	b.n	800165c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001648:	2108      	movs	r1, #8
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <checkSlideVal+0x64>)
 800164c:	f007 fe94 	bl	8009378 <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <checkSlideVal+0x56>
			return 33;
 8001656:	2321      	movs	r3, #33	; 0x21
 8001658:	e000      	b.n	800165c <checkSlideVal+0x58>
		}
	}
	return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40010800 	.word	0x40010800
 8001668:	40011000 	.word	0x40011000

0800166c <readValFromEEPROM>:

void readValFromEEPROM(int state) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d11c      	bne.n	80016b4 <readValFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <readValFromEEPROM+0x88>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	e012      	b.n	80016ac <readValFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <readValFromEEPROM+0x8c>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa93 	bl	8000bb8 <getCharFromCursorPosition>
 8001692:	4603      	mov	r3, r0
 8001694:	4619      	mov	r1, r3
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <readValFromEEPROM+0x90>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4413      	add	r3, r2
 800169c:	460a      	mov	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	3301      	adds	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3301      	adds	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b13      	cmp	r3, #19
 80016b0:	dde9      	ble.n	8001686 <readValFromEEPROM+0x1a>
		for(int i=0; i<wifiCharLimit; i++) {
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
			tempPassStartPos++;
		}
	}
}
 80016b2:	e01b      	b.n	80016ec <readValFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <readValFromEEPROM+0x94>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	e012      	b.n	80016e6 <readValFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <readValFromEEPROM+0x8c>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fa76 	bl	8000bb8 <getCharFromCursorPosition>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <readValFromEEPROM+0x98>)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4413      	add	r3, r2
 80016d6:	460a      	mov	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3301      	adds	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b13      	cmp	r3, #19
 80016ea:	dde9      	ble.n	80016c0 <readValFromEEPROM+0x54>
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000a2 	.word	0x200000a2
 80016f8:	20000328 	.word	0x20000328
 80016fc:	200003cc 	.word	0x200003cc
 8001700:	200000a3 	.word	0x200000a3
 8001704:	200003e0 	.word	0x200003e0

08001708 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7fe fd84 	bl	8000224 <strlen>
 800171c:	4603      	mov	r3, r0
 800171e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001724:	e08a      	b.n	800183c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f7ff ff6c 	bl	8001604 <checkSlideVal>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	dd07      	ble.n	8001742 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f7ff ff66 	bl	8001604 <checkSlideVal>
 8001738:	4603      	mov	r3, r0
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <slideText+0x148>)
 800173e:	701a      	strb	r2, [r3, #0]
			break;
 8001740:	e081      	b.n	8001846 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
 8001746:	e075      	b.n	8001834 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f7ff ff5b 	bl	8001604 <checkSlideVal>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd09      	ble.n	8001768 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f7ff ff55 	bl	8001604 <checkSlideVal>
 800175a:	4603      	mov	r3, r0
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <slideText+0x148>)
 8001760:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001766:	e069      	b.n	800183c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	4413      	add	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	e029      	b.n	80017c6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001772:	6838      	ldr	r0, [r7, #0]
 8001774:	f7ff ff46 	bl	8001604 <checkSlideVal>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd0b      	ble.n	8001796 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f7ff ff40 	bl	8001604 <checkSlideVal>
 8001784:	4603      	mov	r3, r0
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <slideText+0x148>)
 800178a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001794:	e01d      	b.n	80017d2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	b2d8      	uxtb	r0, r3
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b2d9      	uxtb	r1, r3
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f7ff f814 	bl	80007e2 <lcd_print_char>
				HAL_Delay(30);
 80017ba:	201e      	movs	r0, #30
 80017bc:	f007 f80c 	bl	80087d8 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	3301      	adds	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	7dfa      	ldrb	r2, [r7, #23]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4413      	add	r3, r2
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbcf      	blt.n	8001772 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	e023      	b.n	8001822 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80017da:	6838      	ldr	r0, [r7, #0]
 80017dc:	f7ff ff12 	bl	8001604 <checkSlideVal>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dd0b      	ble.n	80017fe <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f7ff ff0c 	bl	8001604 <checkSlideVal>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <slideText+0x148>)
 80017f2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80017fc:	e017      	b.n	800182e <slideText+0x126>
				}
			     if(j >= startPos) {
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	429a      	cmp	r2, r3
 8001804:	db0a      	blt.n	800181c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	b2d1      	uxtb	r1, r2
 800180e:	2220      	movs	r2, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ffe6 	bl	80007e2 <lcd_print_char>
			    	 HAL_Delay(30);
 8001816:	201e      	movs	r0, #30
 8001818:	f006 ffde 	bl	80087d8 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	3b01      	subs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	7dfa      	ldrb	r2, [r7, #23]
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	429a      	cmp	r2, r3
 800182c:	dad5      	bge.n	80017da <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	3301      	adds	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	6a3a      	ldr	r2, [r7, #32]
 8001838:	429a      	cmp	r2, r3
 800183a:	db85      	blt.n	8001748 <slideText+0x40>
	while(mainLoopVal == 1) {
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2b01      	cmp	r3, #1
 8001840:	f43f af71 	beq.w	8001726 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200003f8 	.word	0x200003f8

08001854 <menu>:

void menu() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001858:	2101      	movs	r1, #1
 800185a:	488f      	ldr	r0, [pc, #572]	; (8001a98 <menu+0x244>)
 800185c:	f007 fd8c 	bl	8009378 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	f040 808e 	bne.w	8001984 <menu+0x130>
 8001868:	4b8c      	ldr	r3, [pc, #560]	; (8001a9c <menu+0x248>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8086 	beq.w	8001984 <menu+0x130>
		menuSayac = menuSayac+1;
 8001878:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <menu+0x24c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <menu+0x24c>)
 8001882:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001884:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <menu+0x24c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b24      	cmp	r3, #36	; 0x24
 800188a:	d102      	bne.n	8001892 <menu+0x3e>
			menuSayac = 1;
 800188c:	4b84      	ldr	r3, [pc, #528]	; (8001aa0 <menu+0x24c>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001892:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <menu+0x24c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b12      	cmp	r3, #18
 8001898:	d106      	bne.n	80018a8 <menu+0x54>
 800189a:	4b82      	ldr	r3, [pc, #520]	; (8001aa4 <menu+0x250>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <menu+0x54>
			menuSayac = 21;
 80018a2:	4b7f      	ldr	r3, [pc, #508]	; (8001aa0 <menu+0x24c>)
 80018a4:	2215      	movs	r2, #21
 80018a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80018a8:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <menu+0x24c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d106      	bne.n	80018be <menu+0x6a>
 80018b0:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <menu+0x254>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <menu+0x6a>
			menuSayac = 16;
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <menu+0x24c>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80018be:	4b78      	ldr	r3, [pc, #480]	; (8001aa0 <menu+0x24c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b0d      	cmp	r3, #13
 80018c4:	d106      	bne.n	80018d4 <menu+0x80>
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <menu+0x254>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <menu+0x80>
			menuSayac = 16;
 80018ce:	4b74      	ldr	r3, [pc, #464]	; (8001aa0 <menu+0x24c>)
 80018d0:	2210      	movs	r2, #16
 80018d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80018d4:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <menu+0x24c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d106      	bne.n	80018ea <menu+0x96>
 80018dc:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <menu+0x254>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d102      	bne.n	80018ea <menu+0x96>
			menuSayac = 13;
 80018e4:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <menu+0x24c>)
 80018e6:	220d      	movs	r2, #13
 80018e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80018ea:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <menu+0x24c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d10a      	bne.n	8001908 <menu+0xb4>
 80018f2:	4b6e      	ldr	r3, [pc, #440]	; (8001aac <menu+0x258>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d003      	beq.n	8001902 <menu+0xae>
 80018fa:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <menu+0x258>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d102      	bne.n	8001908 <menu+0xb4>
			menuSayac = 11;
 8001902:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <menu+0x24c>)
 8001904:	220b      	movs	r2, #11
 8001906:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <menu+0x24c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d10e      	bne.n	800192e <menu+0xda>
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <menu+0x25c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <menu+0xcc>
 8001918:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <menu+0x25c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d106      	bne.n	800192e <menu+0xda>
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <menu+0x254>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d102      	bne.n	800192e <menu+0xda>
			menuSayac = 16;
 8001928:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <menu+0x24c>)
 800192a:	2210      	movs	r2, #16
 800192c:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800192e:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <menu+0x24c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d10e      	bne.n	8001954 <menu+0x100>
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <menu+0x25c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d003      	beq.n	8001946 <menu+0xf2>
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <menu+0x25c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d106      	bne.n	8001954 <menu+0x100>
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <menu+0x254>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d102      	bne.n	8001954 <menu+0x100>
			menuSayac = 13;
 800194e:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <menu+0x24c>)
 8001950:	220d      	movs	r2, #13
 8001952:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001954:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <menu+0x24c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d106      	bne.n	800196a <menu+0x116>
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <menu+0x260>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <menu+0x116>
			menuSayac = 16;
 8001964:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <menu+0x24c>)
 8001966:	2210      	movs	r2, #16
 8001968:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800196a:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <menu+0x24c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b18      	cmp	r3, #24
 8001970:	d106      	bne.n	8001980 <menu+0x12c>
 8001972:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <menu+0x250>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <menu+0x12c>
			menuSayac = 26;
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <menu+0x24c>)
 800197c:	221a      	movs	r2, #26
 800197e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001980:	f003 ff24 	bl	80057cc <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001984:	2108      	movs	r1, #8
 8001986:	484c      	ldr	r0, [pc, #304]	; (8001ab8 <menu+0x264>)
 8001988:	f007 fcf6 	bl	8009378 <HAL_GPIO_ReadPin>
 800198c:	4603      	mov	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	d175      	bne.n	8001a7e <menu+0x22a>
 8001992:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <menu+0x248>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f083 0301 	eor.w	r3, r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d06e      	beq.n	8001a7e <menu+0x22a>
		if (menuSayac <= 1) {
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <menu+0x24c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d802      	bhi.n	80019ae <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80019a8:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <menu+0x24c>)
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <menu+0x24c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <menu+0x24c>)
 80019b8:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <menu+0x24c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b14      	cmp	r3, #20
 80019c0:	d106      	bne.n	80019d0 <menu+0x17c>
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <menu+0x250>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <menu+0x17c>
			menuSayac = 17;
 80019ca:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <menu+0x24c>)
 80019cc:	2211      	movs	r2, #17
 80019ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <menu+0x24c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d106      	bne.n	80019e6 <menu+0x192>
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <menu+0x254>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <menu+0x192>
			menuSayac = 7;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <menu+0x24c>)
 80019e2:	2207      	movs	r2, #7
 80019e4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <menu+0x24c>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	d106      	bne.n	80019fc <menu+0x1a8>
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <menu+0x254>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d102      	bne.n	80019fc <menu+0x1a8>
			menuSayac = 12;
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <menu+0x24c>)
 80019f8:	220c      	movs	r2, #12
 80019fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <menu+0x24c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d106      	bne.n	8001a12 <menu+0x1be>
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <menu+0x254>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d102      	bne.n	8001a12 <menu+0x1be>
			menuSayac = 8;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <menu+0x24c>)
 8001a0e:	2208      	movs	r2, #8
 8001a10:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <menu+0x24c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d10a      	bne.n	8001a30 <menu+0x1dc>
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <menu+0x258>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d003      	beq.n	8001a2a <menu+0x1d6>
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <menu+0x258>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d102      	bne.n	8001a30 <menu+0x1dc>
			menuSayac = 9;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <menu+0x24c>)
 8001a2c:	2209      	movs	r2, #9
 8001a2e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <menu+0x24c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d10a      	bne.n	8001a4e <menu+0x1fa>
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <menu+0x25c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d003      	beq.n	8001a48 <menu+0x1f4>
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <menu+0x25c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d102      	bne.n	8001a4e <menu+0x1fa>
			menuSayac = 11;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <menu+0x24c>)
 8001a4a:	220b      	movs	r2, #11
 8001a4c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <menu+0x24c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d106      	bne.n	8001a64 <menu+0x210>
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <menu+0x260>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d102      	bne.n	8001a64 <menu+0x210>
			menuSayac = 14;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <menu+0x24c>)
 8001a60:	220e      	movs	r2, #14
 8001a62:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <menu+0x24c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b19      	cmp	r3, #25
 8001a6a:	d106      	bne.n	8001a7a <menu+0x226>
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <menu+0x250>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <menu+0x226>
			menuSayac = 23;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <menu+0x24c>)
 8001a76:	2217      	movs	r2, #23
 8001a78:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001a7a:	f003 fea7 	bl	80057cc <bekle>
	}

	if (menuSayac == 0) {
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <menu+0x24c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d134      	bne.n	8001af0 <menu+0x29c>
		if(dilSecim == 0) {
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <menu+0x268>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d122      	bne.n	8001ad4 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <menu+0x26c>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	2001      	movs	r0, #1
 8001a94:	e016      	b.n	8001ac4 <menu+0x270>
 8001a96:	bf00      	nop
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	20000427 	.word	0x20000427
 8001aa0:	200003f8 	.word	0x200003f8
 8001aa4:	20000407 	.word	0x20000407
 8001aa8:	20000400 	.word	0x20000400
 8001aac:	20000401 	.word	0x20000401
 8001ab0:	20000402 	.word	0x20000402
 8001ab4:	20000403 	.word	0x20000403
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	20000419 	.word	0x20000419
 8001ac0:	0800d094 	.word	0x0800d094
 8001ac4:	f7fe fe78 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001ac8:	4a94      	ldr	r2, [pc, #592]	; (8001d1c <menu+0x4c8>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2002      	movs	r0, #2
 8001ace:	f7fe fe73 	bl	80007b8 <lcd_print>
 8001ad2:	e00d      	b.n	8001af0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <menu+0x4cc>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d109      	bne.n	8001af0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001adc:	4a91      	ldr	r2, [pc, #580]	; (8001d24 <menu+0x4d0>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7fe fe69 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001ae6:	4a90      	ldr	r2, [pc, #576]	; (8001d28 <menu+0x4d4>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	2002      	movs	r0, #2
 8001aec:	f7fe fe64 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <menu+0x4d8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	f040 82b5 	bne.w	8002064 <menu+0x810>
		if(dilSecim == 0) {
 8001afa:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <menu+0x4cc>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001b02:	4a8b      	ldr	r2, [pc, #556]	; (8001d30 <menu+0x4dc>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7fe fe56 	bl	80007b8 <lcd_print>
 8001b0c:	e008      	b.n	8001b20 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001b0e:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <menu+0x4cc>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d104      	bne.n	8001b20 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001b16:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <menu+0x4e0>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7fe fe4c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001b20:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <menu+0x4e4>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d123      	bne.n	8001b70 <menu+0x31c>
			if(dilSecim == 0) {
 8001b28:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <menu+0x4cc>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001b30:	4a82      	ldr	r2, [pc, #520]	; (8001d3c <menu+0x4e8>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7fe fe3f 	bl	80007b8 <lcd_print>
 8001b3a:	e008      	b.n	8001b4e <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001b3c:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <menu+0x4cc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d104      	bne.n	8001b4e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001b44:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <menu+0x4ec>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7fe fe35 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001b4e:	4a7d      	ldr	r2, [pc, #500]	; (8001d44 <menu+0x4f0>)
 8001b50:	210f      	movs	r1, #15
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7fe fe30 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <menu+0x4f4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	497b      	ldr	r1, [pc, #492]	; (8001d4c <menu+0x4f8>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00a fc35 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001b66:	4a79      	ldr	r2, [pc, #484]	; (8001d4c <menu+0x4f8>)
 8001b68:	210e      	movs	r1, #14
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f7fe fe24 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001b70:	4b71      	ldr	r3, [pc, #452]	; (8001d38 <menu+0x4e4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d123      	bne.n	8001bc0 <menu+0x36c>
			if(dilSecim == 0) {
 8001b78:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <menu+0x4cc>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001b80:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <menu+0x4fc>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2002      	movs	r0, #2
 8001b86:	f7fe fe17 	bl	80007b8 <lcd_print>
 8001b8a:	e008      	b.n	8001b9e <menu+0x34a>
			} else if(dilSecim == 1) {
 8001b8c:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <menu+0x4cc>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d104      	bne.n	8001b9e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001b94:	4a6f      	ldr	r2, [pc, #444]	; (8001d54 <menu+0x500>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7fe fe0d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b9e:	4a6e      	ldr	r2, [pc, #440]	; (8001d58 <menu+0x504>)
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f7fe fe08 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <menu+0x508>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	220a      	movs	r2, #10
 8001bae:	4967      	ldr	r1, [pc, #412]	; (8001d4c <menu+0x4f8>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00a fc0d 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001bb6:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <menu+0x4f8>)
 8001bb8:	210e      	movs	r1, #14
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7fe fdfc 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <menu+0x4e4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d123      	bne.n	8001c10 <menu+0x3bc>
			if(dilSecim == 0) {
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <menu+0x4cc>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001bd0:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <menu+0x50c>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f7fe fdef 	bl	80007b8 <lcd_print>
 8001bda:	e008      	b.n	8001bee <menu+0x39a>
			} else if(dilSecim == 1) {
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <menu+0x4cc>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d104      	bne.n	8001bee <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001be4:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <menu+0x510>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f7fe fde5 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bee:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <menu+0x504>)
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7fe fde0 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <menu+0x514>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	4953      	ldr	r1, [pc, #332]	; (8001d4c <menu+0x4f8>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00a fbe5 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001c06:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <menu+0x4f8>)
 8001c08:	210e      	movs	r1, #14
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7fe fdd4 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001c10:	4b49      	ldr	r3, [pc, #292]	; (8001d38 <menu+0x4e4>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d123      	bne.n	8001c60 <menu+0x40c>
			if(dilSecim == 0) {
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <menu+0x4cc>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <menu+0x518>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2002      	movs	r0, #2
 8001c26:	f7fe fdc7 	bl	80007b8 <lcd_print>
 8001c2a:	e008      	b.n	8001c3e <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001c2c:	4b3c      	ldr	r3, [pc, #240]	; (8001d20 <menu+0x4cc>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d104      	bne.n	8001c3e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001c34:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <menu+0x51c>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7fe fdbd 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c3e:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <menu+0x504>)
 8001c40:	210f      	movs	r1, #15
 8001c42:	2002      	movs	r0, #2
 8001c44:	f7fe fdb8 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <menu+0x520>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	220a      	movs	r2, #10
 8001c4e:	493f      	ldr	r1, [pc, #252]	; (8001d4c <menu+0x4f8>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00a fbbd 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001c56:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <menu+0x4f8>)
 8001c58:	210e      	movs	r1, #14
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f7fe fdac 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <menu+0x4e4>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d123      	bne.n	8001cb0 <menu+0x45c>
			if(dilSecim == 0) {
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <menu+0x4cc>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001c70:	4a41      	ldr	r2, [pc, #260]	; (8001d78 <menu+0x524>)
 8001c72:	2101      	movs	r1, #1
 8001c74:	2002      	movs	r0, #2
 8001c76:	f7fe fd9f 	bl	80007b8 <lcd_print>
 8001c7a:	e008      	b.n	8001c8e <menu+0x43a>
			} else if(dilSecim == 1) {
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <menu+0x4cc>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d104      	bne.n	8001c8e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001c84:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <menu+0x528>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7fe fd95 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <menu+0x504>)
 8001c90:	210f      	movs	r1, #15
 8001c92:	2002      	movs	r0, #2
 8001c94:	f7fe fd90 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <menu+0x52c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	220a      	movs	r2, #10
 8001c9e:	492b      	ldr	r1, [pc, #172]	; (8001d4c <menu+0x4f8>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f00a fb95 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001ca6:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <menu+0x4f8>)
 8001ca8:	210e      	movs	r1, #14
 8001caa:	2002      	movs	r0, #2
 8001cac:	f7fe fd84 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <menu+0x4e4>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d123      	bne.n	8001d00 <menu+0x4ac>
			if(dilSecim == 0) {
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <menu+0x4cc>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001cc0:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <menu+0x530>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7fe fd77 	bl	80007b8 <lcd_print>
 8001cca:	e008      	b.n	8001cde <menu+0x48a>
			} else if(dilSecim == 1) {
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <menu+0x4cc>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d104      	bne.n	8001cde <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <menu+0x534>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7fe fd6d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <menu+0x504>)
 8001ce0:	210f      	movs	r1, #15
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f7fe fd68 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <menu+0x538>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	220a      	movs	r2, #10
 8001cee:	4917      	ldr	r1, [pc, #92]	; (8001d4c <menu+0x4f8>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a fb6d 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <menu+0x4f8>)
 8001cf8:	210e      	movs	r1, #14
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f7fe fd5c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <menu+0x4e4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d15f      	bne.n	8001dc8 <menu+0x574>
			if(dilSecim == 0) {
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <menu+0x4cc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d141      	bne.n	8001d94 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001d10:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <menu+0x53c>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7fe fd4f 	bl	80007b8 <lcd_print>
 8001d1a:	e044      	b.n	8001da6 <menu+0x552>
 8001d1c:	0800d0a8 	.word	0x0800d0a8
 8001d20:	20000419 	.word	0x20000419
 8001d24:	0800d0bc 	.word	0x0800d0bc
 8001d28:	0800d0d0 	.word	0x0800d0d0
 8001d2c:	200003f8 	.word	0x200003f8
 8001d30:	0800d0e4 	.word	0x0800d0e4
 8001d34:	0800d0f8 	.word	0x0800d0f8
 8001d38:	200003fa 	.word	0x200003fa
 8001d3c:	0800d10c 	.word	0x0800d10c
 8001d40:	0800d11c 	.word	0x0800d11c
 8001d44:	0800d12c 	.word	0x0800d12c
 8001d48:	2000041a 	.word	0x2000041a
 8001d4c:	20000398 	.word	0x20000398
 8001d50:	0800d130 	.word	0x0800d130
 8001d54:	0800d140 	.word	0x0800d140
 8001d58:	0800d150 	.word	0x0800d150
 8001d5c:	2000041b 	.word	0x2000041b
 8001d60:	0800d154 	.word	0x0800d154
 8001d64:	0800d164 	.word	0x0800d164
 8001d68:	2000041c 	.word	0x2000041c
 8001d6c:	0800d174 	.word	0x0800d174
 8001d70:	0800d184 	.word	0x0800d184
 8001d74:	2000041d 	.word	0x2000041d
 8001d78:	0800d194 	.word	0x0800d194
 8001d7c:	0800d1a4 	.word	0x0800d1a4
 8001d80:	2000041e 	.word	0x2000041e
 8001d84:	0800d1b4 	.word	0x0800d1b4
 8001d88:	0800d1c4 	.word	0x0800d1c4
 8001d8c:	2000041f 	.word	0x2000041f
 8001d90:	0800d1d4 	.word	0x0800d1d4
			} else if(dilSecim == 1) {
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <menu+0x680>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d104      	bne.n	8001da6 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <menu+0x684>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7fe fd09 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001da6:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <menu+0x688>)
 8001da8:	210f      	movs	r1, #15
 8001daa:	2002      	movs	r0, #2
 8001dac:	f7fe fd04 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001db0:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <menu+0x68c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	220a      	movs	r2, #10
 8001db6:	494b      	ldr	r1, [pc, #300]	; (8001ee4 <menu+0x690>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00a fb09 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001dbe:	4a49      	ldr	r2, [pc, #292]	; (8001ee4 <menu+0x690>)
 8001dc0:	210e      	movs	r1, #14
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7fe fcf8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <menu+0x694>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d123      	bne.n	8001e18 <menu+0x5c4>
			if(dilSecim == 0) {
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <menu+0x680>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001dd8:	4a44      	ldr	r2, [pc, #272]	; (8001eec <menu+0x698>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f7fe fceb 	bl	80007b8 <lcd_print>
 8001de2:	e008      	b.n	8001df6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <menu+0x680>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001dec:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <menu+0x69c>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7fe fce1 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001df6:	4a39      	ldr	r2, [pc, #228]	; (8001edc <menu+0x688>)
 8001df8:	210f      	movs	r1, #15
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f7fe fcdc 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <menu+0x6a0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	220a      	movs	r2, #10
 8001e06:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <menu+0x690>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00a fae1 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001e0e:	4a35      	ldr	r2, [pc, #212]	; (8001ee4 <menu+0x690>)
 8001e10:	210e      	movs	r1, #14
 8001e12:	2002      	movs	r0, #2
 8001e14:	f7fe fcd0 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <menu+0x694>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d123      	bne.n	8001e68 <menu+0x614>
			if(dilSecim == 0) {
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <menu+0x680>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001e28:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <menu+0x6a4>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7fe fcc3 	bl	80007b8 <lcd_print>
 8001e32:	e008      	b.n	8001e46 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <menu+0x680>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d104      	bne.n	8001e46 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <menu+0x6a8>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	2002      	movs	r0, #2
 8001e42:	f7fe fcb9 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <menu+0x688>)
 8001e48:	210f      	movs	r1, #15
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f7fe fcb4 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <menu+0x6ac>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	220a      	movs	r2, #10
 8001e56:	4923      	ldr	r1, [pc, #140]	; (8001ee4 <menu+0x690>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00a fab9 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8001e5e:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <menu+0x690>)
 8001e60:	210e      	movs	r1, #14
 8001e62:	2002      	movs	r0, #2
 8001e64:	f7fe fca8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <menu+0x694>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	d123      	bne.n	8001eb8 <menu+0x664>
			if(dilSecim == 0) {
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <menu+0x680>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <menu+0x6b0>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f7fe fc9b 	bl	80007b8 <lcd_print>
 8001e82:	e008      	b.n	8001e96 <menu+0x642>
			} else if(dilSecim == 1) {
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <menu+0x680>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d104      	bne.n	8001e96 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <menu+0x6b4>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7fe fc91 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <menu+0x6b8>)
 8001e98:	2110      	movs	r1, #16
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7fe fc8c 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <menu+0x6bc>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	490f      	ldr	r1, [pc, #60]	; (8001ee4 <menu+0x690>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00a fa91 	bl	800c3d0 <itoa>
			lcd_print(2, 15, snum);
 8001eae:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <menu+0x690>)
 8001eb0:	210f      	movs	r1, #15
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7fe fc80 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <menu+0x694>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b0a      	cmp	r3, #10
 8001ebe:	d134      	bne.n	8001f2a <menu+0x6d6>
			if(dilSecim == 0) {
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <menu+0x680>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d127      	bne.n	8001f18 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <menu+0x6c0>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f7fe fc73 	bl	80007b8 <lcd_print>
 8001ed2:	e02a      	b.n	8001f2a <menu+0x6d6>
 8001ed4:	20000419 	.word	0x20000419
 8001ed8:	0800d1e4 	.word	0x0800d1e4
 8001edc:	0800d150 	.word	0x0800d150
 8001ee0:	20000420 	.word	0x20000420
 8001ee4:	20000398 	.word	0x20000398
 8001ee8:	200003fa 	.word	0x200003fa
 8001eec:	0800d1f4 	.word	0x0800d1f4
 8001ef0:	0800d204 	.word	0x0800d204
 8001ef4:	20000421 	.word	0x20000421
 8001ef8:	0800d214 	.word	0x0800d214
 8001efc:	0800d224 	.word	0x0800d224
 8001f00:	20000422 	.word	0x20000422
 8001f04:	0800d234 	.word	0x0800d234
 8001f08:	0800d244 	.word	0x0800d244
 8001f0c:	0800d254 	.word	0x0800d254
 8001f10:	20000423 	.word	0x20000423
 8001f14:	0800d258 	.word	0x0800d258
			} else if(dilSecim == 1) {
 8001f18:	4b82      	ldr	r3, [pc, #520]	; (8002124 <menu+0x8d0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d104      	bne.n	8001f2a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001f20:	4a81      	ldr	r2, [pc, #516]	; (8002128 <menu+0x8d4>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7fe fc47 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	487f      	ldr	r0, [pc, #508]	; (800212c <menu+0x8d8>)
 8001f2e:	f007 fa23 	bl	8009378 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d119      	bne.n	8001f6c <menu+0x718>
 8001f38:	4b7d      	ldr	r3, [pc, #500]	; (8002130 <menu+0x8dc>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <menu+0x718>
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <menu+0x8e0>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10e      	bne.n	8001f6c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001f4e:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <menu+0x8e4>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b78      	ldr	r3, [pc, #480]	; (8002138 <menu+0x8e4>)
 8001f58:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <menu+0x8e4>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b0a      	cmp	r3, #10
 8001f60:	d902      	bls.n	8001f68 <menu+0x714>
				hataGostermeSirasi = 0;
 8001f62:	4b75      	ldr	r3, [pc, #468]	; (8002138 <menu+0x8e4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f68:	f003 fc30 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	486f      	ldr	r0, [pc, #444]	; (800212c <menu+0x8d8>)
 8001f70:	f007 fa02 	bl	8009378 <HAL_GPIO_ReadPin>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d119      	bne.n	8001fae <menu+0x75a>
 8001f7a:	4b6d      	ldr	r3, [pc, #436]	; (8002130 <menu+0x8dc>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d012      	beq.n	8001fae <menu+0x75a>
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <menu+0x8e0>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10e      	bne.n	8001fae <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001f90:	4b69      	ldr	r3, [pc, #420]	; (8002138 <menu+0x8e4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b67      	ldr	r3, [pc, #412]	; (8002138 <menu+0x8e4>)
 8001f9a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001f9c:	4b66      	ldr	r3, [pc, #408]	; (8002138 <menu+0x8e4>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b0b      	cmp	r3, #11
 8001fa2:	d902      	bls.n	8001faa <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001fa4:	4b64      	ldr	r3, [pc, #400]	; (8002138 <menu+0x8e4>)
 8001fa6:	220a      	movs	r2, #10
 8001fa8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001faa:	f003 fc0f 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001fae:	2108      	movs	r1, #8
 8001fb0:	485e      	ldr	r0, [pc, #376]	; (800212c <menu+0x8d8>)
 8001fb2:	f007 f9e1 	bl	8009378 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d153      	bne.n	8002064 <menu+0x810>
 8001fbc:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <menu+0x8dc>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f083 0301 	eor.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d04c      	beq.n	8002064 <menu+0x810>
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <menu+0x8e4>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b0a      	cmp	r3, #10
 8001fd0:	d148      	bne.n	8002064 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	; (800213c <menu+0x8e8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <menu+0x8ec>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001fe0:	4b58      	ldr	r3, [pc, #352]	; (8002144 <menu+0x8f0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	4b56      	ldr	r3, [pc, #344]	; (8002140 <menu+0x8ec>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001fee:	4b56      	ldr	r3, [pc, #344]	; (8002148 <menu+0x8f4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	4b52      	ldr	r3, [pc, #328]	; (8002140 <menu+0x8ec>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <menu+0x8f8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <menu+0x8ec>)
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <menu+0x8fc>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <menu+0x8ec>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8002018:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <menu+0x900>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	4b48      	ldr	r3, [pc, #288]	; (8002140 <menu+0x8ec>)
 8002020:	2200      	movs	r2, #0
 8002022:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8002026:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <menu+0x904>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <menu+0x8ec>)
 800202e:	2200      	movs	r2, #0
 8002030:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <menu+0x908>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <menu+0x8ec>)
 800203c:	2200      	movs	r2, #0
 800203e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <menu+0x90c>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <menu+0x8ec>)
 800204a:	2200      	movs	r2, #0
 800204c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <menu+0x910>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <menu+0x8ec>)
 8002058:	2200      	movs	r2, #0
 800205a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <menu+0x914>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <menu+0x918>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b02      	cmp	r3, #2
 800206a:	f040 80fc 	bne.w	8002266 <menu+0xa12>
		if(dilSecim == 0) {
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <menu+0x8d0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8002076:	4a3e      	ldr	r2, [pc, #248]	; (8002170 <menu+0x91c>)
 8002078:	2101      	movs	r1, #1
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe fb9c 	bl	80007b8 <lcd_print>
 8002080:	e008      	b.n	8002094 <menu+0x840>
		} else if(dilSecim == 1) {
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <menu+0x8d0>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d104      	bne.n	8002094 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800208a:	4a3a      	ldr	r2, [pc, #232]	; (8002174 <menu+0x920>)
 800208c:	2101      	movs	r1, #1
 800208e:	2001      	movs	r0, #1
 8002090:	f7fe fb92 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <menu+0x8e0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d003      	beq.n	80020a4 <menu+0x850>
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <menu+0x8e0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d112      	bne.n	80020ca <menu+0x876>
			if(dilSecim == 0) {
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <menu+0x8d0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80020ac:	4a32      	ldr	r2, [pc, #200]	; (8002178 <menu+0x924>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7fe fb81 	bl	80007b8 <lcd_print>
 80020b6:	e008      	b.n	80020ca <menu+0x876>
			} else if(dilSecim == 1) {
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <menu+0x8d0>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d104      	bne.n	80020ca <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80020c0:	4a2e      	ldr	r2, [pc, #184]	; (800217c <menu+0x928>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f7fe fb77 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <menu+0x92c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <menu+0x8ac>
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <menu+0x8e0>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <menu+0x8ac>
			if(dilSecim == 0) {
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <menu+0x8d0>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80020e2:	4a28      	ldr	r2, [pc, #160]	; (8002184 <menu+0x930>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7fe fb66 	bl	80007b8 <lcd_print>
 80020ec:	e008      	b.n	8002100 <menu+0x8ac>
			} else if(dilSecim == 1) {
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <menu+0x8d0>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d104      	bne.n	8002100 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80020f6:	4a24      	ldr	r2, [pc, #144]	; (8002188 <menu+0x934>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	2002      	movs	r0, #2
 80020fc:	f7fe fb5c 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <menu+0x92c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d14c      	bne.n	80021a2 <menu+0x94e>
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <menu+0x8e0>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d148      	bne.n	80021a2 <menu+0x94e>
			if(dilSecim == 0) {
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <menu+0x8d0>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d13b      	bne.n	8002190 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <menu+0x938>)
 800211a:	2101      	movs	r1, #1
 800211c:	2002      	movs	r0, #2
 800211e:	f7fe fb4b 	bl	80007b8 <lcd_print>
 8002122:	e03e      	b.n	80021a2 <menu+0x94e>
 8002124:	20000419 	.word	0x20000419
 8002128:	0800d26c 	.word	0x0800d26c
 800212c:	40010800 	.word	0x40010800
 8002130:	20000427 	.word	0x20000427
 8002134:	20000407 	.word	0x20000407
 8002138:	200003fa 	.word	0x200003fa
 800213c:	2000041a 	.word	0x2000041a
 8002140:	20000328 	.word	0x20000328
 8002144:	2000041b 	.word	0x2000041b
 8002148:	2000041c 	.word	0x2000041c
 800214c:	2000041d 	.word	0x2000041d
 8002150:	2000041e 	.word	0x2000041e
 8002154:	2000041f 	.word	0x2000041f
 8002158:	20000420 	.word	0x20000420
 800215c:	20000421 	.word	0x20000421
 8002160:	20000422 	.word	0x20000422
 8002164:	20000423 	.word	0x20000423
 8002168:	20000424 	.word	0x20000424
 800216c:	200003f8 	.word	0x200003f8
 8002170:	0800d280 	.word	0x0800d280
 8002174:	0800d294 	.word	0x0800d294
 8002178:	0800d2a8 	.word	0x0800d2a8
 800217c:	0800d2bc 	.word	0x0800d2bc
 8002180:	200003f9 	.word	0x200003f9
 8002184:	0800d2d0 	.word	0x0800d2d0
 8002188:	0800d2e0 	.word	0x0800d2e0
 800218c:	0800d2f0 	.word	0x0800d2f0
			} else if(dilSecim == 1) {
 8002190:	4b98      	ldr	r3, [pc, #608]	; (80023f4 <menu+0xba0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d104      	bne.n	80021a2 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8002198:	4a97      	ldr	r2, [pc, #604]	; (80023f8 <menu+0xba4>)
 800219a:	2101      	movs	r1, #1
 800219c:	2002      	movs	r0, #2
 800219e:	f7fe fb0b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80021a2:	2102      	movs	r1, #2
 80021a4:	4895      	ldr	r0, [pc, #596]	; (80023fc <menu+0xba8>)
 80021a6:	f007 f8e7 	bl	8009378 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d119      	bne.n	80021e4 <menu+0x990>
 80021b0:	4b93      	ldr	r3, [pc, #588]	; (8002400 <menu+0xbac>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <menu+0x990>
 80021be:	4b91      	ldr	r3, [pc, #580]	; (8002404 <menu+0xbb0>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 80021c6:	4b90      	ldr	r3, [pc, #576]	; (8002408 <menu+0xbb4>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <menu+0xbb4>)
 80021d0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80021d2:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <menu+0xbb4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d902      	bls.n	80021e0 <menu+0x98c>
				calismaSekli = 0;
 80021da:	4b8b      	ldr	r3, [pc, #556]	; (8002408 <menu+0xbb4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021e0:	f003 faf4 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80021e4:	2104      	movs	r1, #4
 80021e6:	4885      	ldr	r0, [pc, #532]	; (80023fc <menu+0xba8>)
 80021e8:	f007 f8c6 	bl	8009378 <HAL_GPIO_ReadPin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d119      	bne.n	8002226 <menu+0x9d2>
 80021f2:	4b83      	ldr	r3, [pc, #524]	; (8002400 <menu+0xbac>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d012      	beq.n	8002226 <menu+0x9d2>
 8002200:	4b80      	ldr	r3, [pc, #512]	; (8002404 <menu+0xbb0>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10e      	bne.n	8002226 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8002208:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <menu+0xbb4>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b7d      	ldr	r3, [pc, #500]	; (8002408 <menu+0xbb4>)
 8002212:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002214:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <menu+0xbb4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <menu+0x9ce>
	    		calismaSekli = 1;
 800221c:	4b7a      	ldr	r3, [pc, #488]	; (8002408 <menu+0xbb4>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8002222:	f003 fad3 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002226:	2108      	movs	r1, #8
 8002228:	4874      	ldr	r0, [pc, #464]	; (80023fc <menu+0xba8>)
 800222a:	f007 f8a5 	bl	8009378 <HAL_GPIO_ReadPin>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d118      	bne.n	8002266 <menu+0xa12>
 8002234:	4b72      	ldr	r3, [pc, #456]	; (8002400 <menu+0xbac>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d011      	beq.n	8002266 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8002242:	4b71      	ldr	r3, [pc, #452]	; (8002408 <menu+0xbb4>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b71      	ldr	r3, [pc, #452]	; (800240c <menu+0xbb8>)
 8002248:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800224a:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <menu+0xbb4>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d106      	bne.n	8002260 <menu+0xa0c>
				altLimit = 1;
 8002252:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <menu+0xbbc>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002258:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <menu+0xbbc>)
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b6b      	ldr	r3, [pc, #428]	; (800240c <menu+0xbb8>)
 800225e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002260:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <menu+0xbc0>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8002266:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <menu+0xbc4>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b03      	cmp	r3, #3
 800226c:	f040 8083 	bne.w	8002376 <menu+0xb22>
		if(dilSecim == 0) {
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <menu+0xba0>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8002278:	4a68      	ldr	r2, [pc, #416]	; (800241c <menu+0xbc8>)
 800227a:	2101      	movs	r1, #1
 800227c:	2001      	movs	r0, #1
 800227e:	f7fe fa9b 	bl	80007b8 <lcd_print>
 8002282:	e008      	b.n	8002296 <menu+0xa42>
		} else if(dilSecim == 1) {
 8002284:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <menu+0xba0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d104      	bne.n	8002296 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 800228c:	4a64      	ldr	r2, [pc, #400]	; (8002420 <menu+0xbcc>)
 800228e:	2101      	movs	r1, #1
 8002290:	2001      	movs	r0, #1
 8002292:	f7fe fa91 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <menu+0xbd0>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d113      	bne.n	80022c6 <menu+0xa72>
			if(dilSecim == 0) {
 800229e:	4b55      	ldr	r3, [pc, #340]	; (80023f4 <menu+0xba0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 80022a6:	4a60      	ldr	r2, [pc, #384]	; (8002428 <menu+0xbd4>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	2002      	movs	r0, #2
 80022ac:	f7fe fa84 	bl	80007b8 <lcd_print>
 80022b0:	e012      	b.n	80022d8 <menu+0xa84>
			} else if(dilSecim == 1) {
 80022b2:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <menu+0xba0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10e      	bne.n	80022d8 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 80022ba:	4a5c      	ldr	r2, [pc, #368]	; (800242c <menu+0xbd8>)
 80022bc:	2101      	movs	r1, #1
 80022be:	2002      	movs	r0, #2
 80022c0:	f7fe fa7a 	bl	80007b8 <lcd_print>
 80022c4:	e008      	b.n	80022d8 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 80022c6:	4b57      	ldr	r3, [pc, #348]	; (8002424 <menu+0xbd0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d104      	bne.n	80022d8 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 80022ce:	4a58      	ldr	r2, [pc, #352]	; (8002430 <menu+0xbdc>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	2002      	movs	r0, #2
 80022d4:	f7fe fa70 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d8:	2102      	movs	r1, #2
 80022da:	4848      	ldr	r0, [pc, #288]	; (80023fc <menu+0xba8>)
 80022dc:	f007 f84c 	bl	8009378 <HAL_GPIO_ReadPin>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d115      	bne.n	8002312 <menu+0xabe>
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <menu+0xbac>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00e      	beq.n	8002312 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <menu+0xbd0>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <menu+0xbd0>)
 80022fe:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002300:	4b48      	ldr	r3, [pc, #288]	; (8002424 <menu+0xbd0>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d902      	bls.n	800230e <menu+0xaba>
				emniyetCercevesi = 0;
 8002308:	4b46      	ldr	r3, [pc, #280]	; (8002424 <menu+0xbd0>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800230e:	f003 fa5d 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002312:	2104      	movs	r1, #4
 8002314:	4839      	ldr	r0, [pc, #228]	; (80023fc <menu+0xba8>)
 8002316:	f007 f82f 	bl	8009378 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d115      	bne.n	800234c <menu+0xaf8>
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <menu+0xbac>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00e      	beq.n	800234c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <menu+0xbd0>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3b01      	subs	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <menu+0xbd0>)
 8002338:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800233a:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <menu+0xbd0>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <menu+0xbd0>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002348:	f003 fa40 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 800234c:	2108      	movs	r1, #8
 800234e:	482b      	ldr	r0, [pc, #172]	; (80023fc <menu+0xba8>)
 8002350:	f007 f812 	bl	8009378 <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10d      	bne.n	8002376 <menu+0xb22>
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <menu+0xbac>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8002368:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <menu+0xbd0>)
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <menu+0xbb8>)
 800236e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <menu+0xbc0>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <menu+0xbc4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b04      	cmp	r3, #4
 800237c:	f040 80ba 	bne.w	80024f4 <menu+0xca0>
		if(dilSecim == 0) {
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <menu+0xba0>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002388:	4a2a      	ldr	r2, [pc, #168]	; (8002434 <menu+0xbe0>)
 800238a:	2101      	movs	r1, #1
 800238c:	2001      	movs	r0, #1
 800238e:	f7fe fa13 	bl	80007b8 <lcd_print>
 8002392:	e008      	b.n	80023a6 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <menu+0xba0>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d104      	bne.n	80023a6 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <menu+0xbe4>)
 800239e:	2101      	movs	r1, #1
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe fa09 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <menu+0xbe8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <menu+0xb82>
			if(dilSecim == 0) {
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <menu+0xba0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <menu+0xbd4>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f7fe f9fc 	bl	80007b8 <lcd_print>
 80023c0:	e049      	b.n	8002456 <menu+0xc02>
			} else if(dilSecim == 1) {
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <menu+0xba0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d145      	bne.n	8002456 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <menu+0xbd8>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	2002      	movs	r0, #2
 80023d0:	f7fe f9f2 	bl	80007b8 <lcd_print>
 80023d4:	e03f      	b.n	8002456 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <menu+0xbe8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d13b      	bne.n	8002456 <menu+0xc02>
			if(dilSecim == 0) {
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <menu+0xba0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12e      	bne.n	8002444 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 80023e6:	4a16      	ldr	r2, [pc, #88]	; (8002440 <menu+0xbec>)
 80023e8:	2101      	movs	r1, #1
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7fe f9e4 	bl	80007b8 <lcd_print>
 80023f0:	e031      	b.n	8002456 <menu+0xc02>
 80023f2:	bf00      	nop
 80023f4:	20000419 	.word	0x20000419
 80023f8:	0800d300 	.word	0x0800d300
 80023fc:	40010800 	.word	0x40010800
 8002400:	20000427 	.word	0x20000427
 8002404:	20000407 	.word	0x20000407
 8002408:	200003f9 	.word	0x200003f9
 800240c:	20000328 	.word	0x20000328
 8002410:	200003fe 	.word	0x200003fe
 8002414:	20000424 	.word	0x20000424
 8002418:	200003f8 	.word	0x200003f8
 800241c:	0800d310 	.word	0x0800d310
 8002420:	0800d324 	.word	0x0800d324
 8002424:	200003fc 	.word	0x200003fc
 8002428:	0800d338 	.word	0x0800d338
 800242c:	0800d34c 	.word	0x0800d34c
 8002430:	0800d360 	.word	0x0800d360
 8002434:	0800d370 	.word	0x0800d370
 8002438:	0800d384 	.word	0x0800d384
 800243c:	200003fd 	.word	0x200003fd
 8002440:	0800d398 	.word	0x0800d398
			} else if(dilSecim == 1) {
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <menu+0xe3c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d104      	bne.n	8002456 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 800244c:	4a91      	ldr	r2, [pc, #580]	; (8002694 <menu+0xe40>)
 800244e:	2101      	movs	r1, #1
 8002450:	2002      	movs	r0, #2
 8002452:	f7fe f9b1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002456:	2102      	movs	r1, #2
 8002458:	488f      	ldr	r0, [pc, #572]	; (8002698 <menu+0xe44>)
 800245a:	f006 ff8d 	bl	8009378 <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d115      	bne.n	8002490 <menu+0xc3c>
 8002464:	4b8d      	ldr	r3, [pc, #564]	; (800269c <menu+0xe48>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f083 0301 	eor.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <menu+0xe4c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <menu+0xe4c>)
 800247c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <menu+0xe4c>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d902      	bls.n	800248c <menu+0xc38>
				yavaslamaLimit = 0;
 8002486:	4b86      	ldr	r3, [pc, #536]	; (80026a0 <menu+0xe4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800248c:	f003 f99e 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002490:	2104      	movs	r1, #4
 8002492:	4881      	ldr	r0, [pc, #516]	; (8002698 <menu+0xe44>)
 8002494:	f006 ff70 	bl	8009378 <HAL_GPIO_ReadPin>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d115      	bne.n	80024ca <menu+0xc76>
 800249e:	4b7f      	ldr	r3, [pc, #508]	; (800269c <menu+0xe48>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80024ac:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <menu+0xe4c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <menu+0xe4c>)
 80024b6:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80024b8:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <menu+0xe4c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80024c0:	4b77      	ldr	r3, [pc, #476]	; (80026a0 <menu+0xe4c>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024c6:	f003 f981 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ca:	2108      	movs	r1, #8
 80024cc:	4872      	ldr	r0, [pc, #456]	; (8002698 <menu+0xe44>)
 80024ce:	f006 ff53 	bl	8009378 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10d      	bne.n	80024f4 <menu+0xca0>
 80024d8:	4b70      	ldr	r3, [pc, #448]	; (800269c <menu+0xe48>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80024e6:	4b6e      	ldr	r3, [pc, #440]	; (80026a0 <menu+0xe4c>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <menu+0xe50>)
 80024ec:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80024ee:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <menu+0xe54>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80024f4:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <menu+0xe58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	f040 80b9 	bne.w	8002670 <menu+0xe1c>
		if(dilSecim == 0) {
 80024fe:	4b64      	ldr	r3, [pc, #400]	; (8002690 <menu+0xe3c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002506:	4a6a      	ldr	r2, [pc, #424]	; (80026b0 <menu+0xe5c>)
 8002508:	2101      	movs	r1, #1
 800250a:	2001      	movs	r0, #1
 800250c:	f7fe f954 	bl	80007b8 <lcd_print>
 8002510:	e008      	b.n	8002524 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <menu+0xe3c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d104      	bne.n	8002524 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800251a:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <menu+0xe60>)
 800251c:	2101      	movs	r1, #1
 800251e:	2001      	movs	r0, #1
 8002520:	f7fe f94a 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <menu+0xe64>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d113      	bne.n	8002554 <menu+0xd00>
			if(dilSecim == 0) {
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <menu+0xe3c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002534:	4a61      	ldr	r2, [pc, #388]	; (80026bc <menu+0xe68>)
 8002536:	2101      	movs	r1, #1
 8002538:	2002      	movs	r0, #2
 800253a:	f7fe f93d 	bl	80007b8 <lcd_print>
 800253e:	e020      	b.n	8002582 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <menu+0xe3c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d11c      	bne.n	8002582 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002548:	4a5d      	ldr	r2, [pc, #372]	; (80026c0 <menu+0xe6c>)
 800254a:	2101      	movs	r1, #1
 800254c:	2002      	movs	r0, #2
 800254e:	f7fe f933 	bl	80007b8 <lcd_print>
 8002552:	e016      	b.n	8002582 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <menu+0xe64>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d112      	bne.n	8002582 <menu+0xd2e>
			if(dilSecim == 0){
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <menu+0xe3c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002564:	4a57      	ldr	r2, [pc, #348]	; (80026c4 <menu+0xe70>)
 8002566:	2101      	movs	r1, #1
 8002568:	2002      	movs	r0, #2
 800256a:	f7fe f925 	bl	80007b8 <lcd_print>
 800256e:	e008      	b.n	8002582 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002570:	4b47      	ldr	r3, [pc, #284]	; (8002690 <menu+0xe3c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d104      	bne.n	8002582 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002578:	4a46      	ldr	r2, [pc, #280]	; (8002694 <menu+0xe40>)
 800257a:	2101      	movs	r1, #1
 800257c:	2002      	movs	r0, #2
 800257e:	f7fe f91b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002582:	2102      	movs	r1, #2
 8002584:	4844      	ldr	r0, [pc, #272]	; (8002698 <menu+0xe44>)
 8002586:	f006 fef7 	bl	8009378 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d119      	bne.n	80025c4 <menu+0xd70>
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <menu+0xe48>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d012      	beq.n	80025c4 <menu+0xd70>
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <menu+0xe74>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10e      	bne.n	80025c4 <menu+0xd70>
			altLimit = altLimit + 1;
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <menu+0xe64>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <menu+0xe64>)
 80025b0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <menu+0xe64>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d902      	bls.n	80025c0 <menu+0xd6c>
				altLimit = 0;
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <menu+0xe64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c0:	f003 f904 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80025c4:	2104      	movs	r1, #4
 80025c6:	4834      	ldr	r0, [pc, #208]	; (8002698 <menu+0xe44>)
 80025c8:	f006 fed6 	bl	8009378 <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d119      	bne.n	8002606 <menu+0xdb2>
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <menu+0xe48>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <menu+0xdb2>
 80025e0:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <menu+0xe74>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10e      	bne.n	8002606 <menu+0xdb2>
			altLimit = altLimit - 1;
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <menu+0xe64>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <menu+0xe64>)
 80025f2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <menu+0xe64>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <menu+0xdae>
		   		altLimit = 1;
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <menu+0xe64>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002602:	f003 f8e3 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002606:	2108      	movs	r1, #8
 8002608:	4823      	ldr	r0, [pc, #140]	; (8002698 <menu+0xe44>)
 800260a:	f006 feb5 	bl	8009378 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d12d      	bne.n	8002670 <menu+0xe1c>
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <menu+0xe48>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d026      	beq.n	8002670 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <menu+0xe64>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <menu+0xe50>)
 8002628:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <menu+0xe64>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d110      	bne.n	8002654 <menu+0xe00>
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <menu+0xe78>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <menu+0xdee>
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <menu+0xe78>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d108      	bne.n	8002654 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <menu+0xe78>)
 8002644:	2203      	movs	r2, #3
 8002646:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <menu+0xe78>)
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <menu+0xe50>)
 800264e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002652:	e00a      	b.n	800266a <menu+0xe16>
			} else if(altLimit == 0) {
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <menu+0xe64>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <menu+0xe16>
				platformSilindirTipi = 0;
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <menu+0xe7c>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <menu+0xe7c>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <menu+0xe50>)
 8002668:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <menu+0xe54>)
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <menu+0xe58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b06      	cmp	r3, #6
 8002676:	f040 80b6 	bne.w	80027e6 <menu+0xf92>
		if(dilSecim == 0) {
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <menu+0xe3c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d12a      	bne.n	80026d8 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <menu+0xe80>)
 8002684:	2101      	movs	r1, #1
 8002686:	2001      	movs	r0, #1
 8002688:	f7fe f896 	bl	80007b8 <lcd_print>
 800268c:	e02d      	b.n	80026ea <menu+0xe96>
 800268e:	bf00      	nop
 8002690:	20000419 	.word	0x20000419
 8002694:	0800d3ac 	.word	0x0800d3ac
 8002698:	40010800 	.word	0x40010800
 800269c:	20000427 	.word	0x20000427
 80026a0:	200003fd 	.word	0x200003fd
 80026a4:	20000328 	.word	0x20000328
 80026a8:	20000424 	.word	0x20000424
 80026ac:	200003f8 	.word	0x200003f8
 80026b0:	0800d3c0 	.word	0x0800d3c0
 80026b4:	0800d3d4 	.word	0x0800d3d4
 80026b8:	200003fe 	.word	0x200003fe
 80026bc:	0800d338 	.word	0x0800d338
 80026c0:	0800d34c 	.word	0x0800d34c
 80026c4:	0800d398 	.word	0x0800d398
 80026c8:	200003f9 	.word	0x200003f9
 80026cc:	20000405 	.word	0x20000405
 80026d0:	2000040b 	.word	0x2000040b
 80026d4:	0800d3e8 	.word	0x0800d3e8
		} else if(dilSecim == 1){
 80026d8:	4b7a      	ldr	r3, [pc, #488]	; (80028c4 <menu+0x1070>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d104      	bne.n	80026ea <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80026e0:	4a79      	ldr	r2, [pc, #484]	; (80028c8 <menu+0x1074>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe f867 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 80026ea:	4b78      	ldr	r3, [pc, #480]	; (80028cc <menu+0x1078>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <menu+0xec6>
			if(dilSecim == 0) {
 80026f2:	4b74      	ldr	r3, [pc, #464]	; (80028c4 <menu+0x1070>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <menu+0x107c>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2002      	movs	r0, #2
 8002700:	f7fe f85a 	bl	80007b8 <lcd_print>
 8002704:	e020      	b.n	8002748 <menu+0xef4>
			} else if(dilSecim == 1){
 8002706:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <menu+0x1070>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d11c      	bne.n	8002748 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800270e:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <menu+0x1080>)
 8002710:	2101      	movs	r1, #1
 8002712:	2002      	movs	r0, #2
 8002714:	f7fe f850 	bl	80007b8 <lcd_print>
 8002718:	e016      	b.n	8002748 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800271a:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <menu+0x1078>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d112      	bne.n	8002748 <menu+0xef4>
			if(dilSecim == 0) {
 8002722:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <menu+0x1070>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800272a:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <menu+0x1084>)
 800272c:	2101      	movs	r1, #1
 800272e:	2002      	movs	r0, #2
 8002730:	f7fe f842 	bl	80007b8 <lcd_print>
 8002734:	e008      	b.n	8002748 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <menu+0x1070>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d104      	bne.n	8002748 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800273e:	4a67      	ldr	r2, [pc, #412]	; (80028dc <menu+0x1088>)
 8002740:	2101      	movs	r1, #1
 8002742:	2002      	movs	r0, #2
 8002744:	f7fe f838 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002748:	2102      	movs	r1, #2
 800274a:	4865      	ldr	r0, [pc, #404]	; (80028e0 <menu+0x108c>)
 800274c:	f006 fe14 	bl	8009378 <HAL_GPIO_ReadPin>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d115      	bne.n	8002782 <menu+0xf2e>
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <menu+0x1090>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00e      	beq.n	8002782 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <menu+0x1078>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b57      	ldr	r3, [pc, #348]	; (80028cc <menu+0x1078>)
 800276e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <menu+0x1078>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d902      	bls.n	800277e <menu+0xf2a>
				basincSalteri = 0;
 8002778:	4b54      	ldr	r3, [pc, #336]	; (80028cc <menu+0x1078>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800277e:	f003 f825 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002782:	2104      	movs	r1, #4
 8002784:	4856      	ldr	r0, [pc, #344]	; (80028e0 <menu+0x108c>)
 8002786:	f006 fdf7 	bl	8009378 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d115      	bne.n	80027bc <menu+0xf68>
 8002790:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <menu+0x1090>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800279e:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <menu+0x1078>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <menu+0x1078>)
 80027a8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80027aa:	4b48      	ldr	r3, [pc, #288]	; (80028cc <menu+0x1078>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <menu+0xf64>
		   		basincSalteri = 1;
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <menu+0x1078>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b8:	f003 f808 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027bc:	2108      	movs	r1, #8
 80027be:	4848      	ldr	r0, [pc, #288]	; (80028e0 <menu+0x108c>)
 80027c0:	f006 fdda 	bl	8009378 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10d      	bne.n	80027e6 <menu+0xf92>
 80027ca:	4b46      	ldr	r3, [pc, #280]	; (80028e4 <menu+0x1090>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80027d8:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <menu+0x1078>)
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <menu+0x1094>)
 80027de:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80027e0:	4b42      	ldr	r3, [pc, #264]	; (80028ec <menu+0x1098>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80027e6:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <menu+0x109c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b07      	cmp	r3, #7
 80027ec:	f040 80f5 	bne.w	80029da <menu+0x1186>
		if(dilSecim == 0) {
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <menu+0x1070>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80027f8:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <menu+0x10a0>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7fd ffdb 	bl	80007b8 <lcd_print>
 8002802:	e008      	b.n	8002816 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002804:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <menu+0x1070>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d104      	bne.n	8002816 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800280c:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <menu+0x10a4>)
 800280e:	2101      	movs	r1, #1
 8002810:	2001      	movs	r0, #1
 8002812:	f7fd ffd1 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <menu+0x10a8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d113      	bne.n	8002846 <menu+0xff2>
			if(dilSecim == 0) {
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <menu+0x1070>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <menu+0x107c>)
 8002828:	2101      	movs	r1, #1
 800282a:	2002      	movs	r0, #2
 800282c:	f7fd ffc4 	bl	80007b8 <lcd_print>
 8002830:	e079      	b.n	8002926 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <menu+0x1070>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d175      	bne.n	8002926 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <menu+0x1080>)
 800283c:	2101      	movs	r1, #1
 800283e:	2002      	movs	r0, #2
 8002840:	f7fd ffba 	bl	80007b8 <lcd_print>
 8002844:	e06f      	b.n	8002926 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <menu+0x10a8>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d113      	bne.n	8002876 <menu+0x1022>
			if(dilSecim == 0) {
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <menu+0x1070>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <menu+0x10ac>)
 8002858:	2101      	movs	r1, #1
 800285a:	2002      	movs	r0, #2
 800285c:	f7fd ffac 	bl	80007b8 <lcd_print>
 8002860:	e061      	b.n	8002926 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <menu+0x1070>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d15d      	bne.n	8002926 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <menu+0x10b0>)
 800286c:	2101      	movs	r1, #1
 800286e:	2002      	movs	r0, #2
 8002870:	f7fd ffa2 	bl	80007b8 <lcd_print>
 8002874:	e057      	b.n	8002926 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <menu+0x10a8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d113      	bne.n	80028a6 <menu+0x1052>
			if(dilSecim == 0) {
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <menu+0x1070>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <menu+0x10b4>)
 8002888:	2101      	movs	r1, #1
 800288a:	2002      	movs	r0, #2
 800288c:	f7fd ff94 	bl	80007b8 <lcd_print>
 8002890:	e049      	b.n	8002926 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <menu+0x1070>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d145      	bne.n	8002926 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <menu+0x10b8>)
 800289c:	2101      	movs	r1, #1
 800289e:	2002      	movs	r0, #2
 80028a0:	f7fd ff8a 	bl	80007b8 <lcd_print>
 80028a4:	e03f      	b.n	8002926 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <menu+0x10a8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d13b      	bne.n	8002926 <menu+0x10d2>
			if(dilSecim == 0) {
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <menu+0x1070>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d12e      	bne.n	8002914 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <menu+0x10bc>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	2002      	movs	r0, #2
 80028bc:	f7fd ff7c 	bl	80007b8 <lcd_print>
 80028c0:	e031      	b.n	8002926 <menu+0x10d2>
 80028c2:	bf00      	nop
 80028c4:	20000419 	.word	0x20000419
 80028c8:	0800d3f8 	.word	0x0800d3f8
 80028cc:	200003ff 	.word	0x200003ff
 80028d0:	0800d338 	.word	0x0800d338
 80028d4:	0800d34c 	.word	0x0800d34c
 80028d8:	0800d398 	.word	0x0800d398
 80028dc:	0800d3ac 	.word	0x0800d3ac
 80028e0:	40010800 	.word	0x40010800
 80028e4:	20000427 	.word	0x20000427
 80028e8:	20000328 	.word	0x20000328
 80028ec:	20000424 	.word	0x20000424
 80028f0:	200003f8 	.word	0x200003f8
 80028f4:	0800d408 	.word	0x0800d408
 80028f8:	0800d41c 	.word	0x0800d41c
 80028fc:	20000400 	.word	0x20000400
 8002900:	0800d430 	.word	0x0800d430
 8002904:	0800d444 	.word	0x0800d444
 8002908:	0800d458 	.word	0x0800d458
 800290c:	0800d46c 	.word	0x0800d46c
 8002910:	0800d480 	.word	0x0800d480
			} else if(dilSecim == 1){
 8002914:	4b99      	ldr	r3, [pc, #612]	; (8002b7c <menu+0x1328>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d104      	bne.n	8002926 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800291c:	4a98      	ldr	r2, [pc, #608]	; (8002b80 <menu+0x132c>)
 800291e:	2101      	movs	r1, #1
 8002920:	2002      	movs	r0, #2
 8002922:	f7fd ff49 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002926:	2102      	movs	r1, #2
 8002928:	4896      	ldr	r0, [pc, #600]	; (8002b84 <menu+0x1330>)
 800292a:	f006 fd25 	bl	8009378 <HAL_GPIO_ReadPin>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d115      	bne.n	8002960 <menu+0x110c>
 8002934:	4b94      	ldr	r3, [pc, #592]	; (8002b88 <menu+0x1334>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	f083 0301 	eor.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00e      	beq.n	8002960 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002942:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <menu+0x1338>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b90      	ldr	r3, [pc, #576]	; (8002b8c <menu+0x1338>)
 800294c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800294e:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <menu+0x1338>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d902      	bls.n	800295c <menu+0x1108>
				kapiSecimleri = 0;
 8002956:	4b8d      	ldr	r3, [pc, #564]	; (8002b8c <menu+0x1338>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800295c:	f002 ff36 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002960:	2104      	movs	r1, #4
 8002962:	4888      	ldr	r0, [pc, #544]	; (8002b84 <menu+0x1330>)
 8002964:	f006 fd08 	bl	8009378 <HAL_GPIO_ReadPin>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d115      	bne.n	800299a <menu+0x1146>
 800296e:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <menu+0x1334>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	f083 0301 	eor.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800297c:	4b83      	ldr	r3, [pc, #524]	; (8002b8c <menu+0x1338>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3b01      	subs	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b81      	ldr	r3, [pc, #516]	; (8002b8c <menu+0x1338>)
 8002986:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002988:	4b80      	ldr	r3, [pc, #512]	; (8002b8c <menu+0x1338>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d902      	bls.n	8002996 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <menu+0x1338>)
 8002992:	2203      	movs	r2, #3
 8002994:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002996:	f002 ff19 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800299a:	2108      	movs	r1, #8
 800299c:	4879      	ldr	r0, [pc, #484]	; (8002b84 <menu+0x1330>)
 800299e:	f006 fceb 	bl	8009378 <HAL_GPIO_ReadPin>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d118      	bne.n	80029da <menu+0x1186>
 80029a8:	4b77      	ldr	r3, [pc, #476]	; (8002b88 <menu+0x1334>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d011      	beq.n	80029da <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80029b6:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <menu+0x1338>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <menu+0x133c>)
 80029bc:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <menu+0x1338>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <menu+0x1180>
				altLimit = 1;
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <menu+0x1340>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80029cc:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <menu+0x1340>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <menu+0x133c>)
 80029d2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80029d4:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <menu+0x1344>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <menu+0x1348>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	f040 8092 	bne.w	8002b08 <menu+0x12b4>
		if(dilSecim == 0) {
 80029e4:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <menu+0x1328>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80029ec:	4a6c      	ldr	r2, [pc, #432]	; (8002ba0 <menu+0x134c>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2001      	movs	r0, #1
 80029f2:	f7fd fee1 	bl	80007b8 <lcd_print>
 80029f6:	e008      	b.n	8002a0a <menu+0x11b6>
		} else if(dilSecim == 1) {
 80029f8:	4b60      	ldr	r3, [pc, #384]	; (8002b7c <menu+0x1328>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d104      	bne.n	8002a0a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002a00:	4a68      	ldr	r2, [pc, #416]	; (8002ba4 <menu+0x1350>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7fd fed7 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002a0a:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <menu+0x1354>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d113      	bne.n	8002a3a <menu+0x11e6>
			if(dilSecim == 0) {
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <menu+0x1328>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002a1a:	4a64      	ldr	r2, [pc, #400]	; (8002bac <menu+0x1358>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f7fd feca 	bl	80007b8 <lcd_print>
 8002a24:	e020      	b.n	8002a68 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002a26:	4b55      	ldr	r3, [pc, #340]	; (8002b7c <menu+0x1328>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d11c      	bne.n	8002a68 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002a2e:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <menu+0x135c>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	2002      	movs	r0, #2
 8002a34:	f7fd fec0 	bl	80007b8 <lcd_print>
 8002a38:	e016      	b.n	8002a68 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002a3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <menu+0x1354>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d112      	bne.n	8002a68 <menu+0x1214>
			if(dilSecim == 0){
 8002a42:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <menu+0x1328>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002a4a:	4a5a      	ldr	r2, [pc, #360]	; (8002bb4 <menu+0x1360>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2002      	movs	r0, #2
 8002a50:	f7fd feb2 	bl	80007b8 <lcd_print>
 8002a54:	e008      	b.n	8002a68 <menu+0x1214>
			} else if(dilSecim == 1){
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <menu+0x1328>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d104      	bne.n	8002a68 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002a5e:	4a56      	ldr	r2, [pc, #344]	; (8002bb8 <menu+0x1364>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	2002      	movs	r0, #2
 8002a64:	f7fd fea8 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4846      	ldr	r0, [pc, #280]	; (8002b84 <menu+0x1330>)
 8002a6c:	f006 fc84 	bl	8009378 <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d115      	bne.n	8002aa2 <menu+0x124e>
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <menu+0x1334>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002a84:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <menu+0x1354>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <menu+0x1354>)
 8002a8e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002a90:	4b45      	ldr	r3, [pc, #276]	; (8002ba8 <menu+0x1354>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d902      	bls.n	8002a9e <menu+0x124a>
				kapiAcTipi = 0;
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <menu+0x1354>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a9e:	f002 fe95 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4837      	ldr	r0, [pc, #220]	; (8002b84 <menu+0x1330>)
 8002aa6:	f006 fc67 	bl	8009378 <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d115      	bne.n	8002adc <menu+0x1288>
 8002ab0:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <menu+0x1334>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <menu+0x1354>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <menu+0x1354>)
 8002ac8:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <menu+0x1354>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <menu+0x1354>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ad8:	f002 fe78 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002adc:	2108      	movs	r1, #8
 8002ade:	4829      	ldr	r0, [pc, #164]	; (8002b84 <menu+0x1330>)
 8002ae0:	f006 fc4a 	bl	8009378 <HAL_GPIO_ReadPin>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10e      	bne.n	8002b08 <menu+0x12b4>
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <menu+0x1334>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <menu+0x1354>)
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <menu+0x133c>)
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <menu+0x1344>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <menu+0x1348>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	f040 80b9 	bne.w	8002c84 <menu+0x1430>
		if(dilSecim == 0){
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <menu+0x1328>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <menu+0x1368>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7fd fe4a 	bl	80007b8 <lcd_print>
 8002b24:	e008      	b.n	8002b38 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <menu+0x1328>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d104      	bne.n	8002b38 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <menu+0x136c>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	2001      	movs	r0, #1
 8002b34:	f7fd fe40 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <menu+0x1370>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b40:	4a21      	ldr	r2, [pc, #132]	; (8002bc8 <menu+0x1374>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fd fe37 	bl	80007b8 <lcd_print>
 8002b4a:	e04c      	b.n	8002be6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <menu+0x1370>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d13f      	bne.n	8002bd4 <menu+0x1380>
			if(dilSecim == 0){
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <menu+0x1328>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <menu+0x1378>)
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2002      	movs	r0, #2
 8002b62:	f7fd fe29 	bl	80007b8 <lcd_print>
 8002b66:	e03e      	b.n	8002be6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <menu+0x1328>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d13a      	bne.n	8002be6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <menu+0x137c>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	2002      	movs	r0, #2
 8002b76:	f7fd fe1f 	bl	80007b8 <lcd_print>
 8002b7a:	e034      	b.n	8002be6 <menu+0x1392>
 8002b7c:	20000419 	.word	0x20000419
 8002b80:	0800d494 	.word	0x0800d494
 8002b84:	40010800 	.word	0x40010800
 8002b88:	20000427 	.word	0x20000427
 8002b8c:	20000400 	.word	0x20000400
 8002b90:	20000328 	.word	0x20000328
 8002b94:	200003fe 	.word	0x200003fe
 8002b98:	20000424 	.word	0x20000424
 8002b9c:	200003f8 	.word	0x200003f8
 8002ba0:	0800d4a8 	.word	0x0800d4a8
 8002ba4:	0800d4bc 	.word	0x0800d4bc
 8002ba8:	20000404 	.word	0x20000404
 8002bac:	0800d4d0 	.word	0x0800d4d0
 8002bb0:	0800d4e0 	.word	0x0800d4e0
 8002bb4:	0800d4f0 	.word	0x0800d4f0
 8002bb8:	0800d504 	.word	0x0800d504
 8002bbc:	0800d518 	.word	0x0800d518
 8002bc0:	0800d52c 	.word	0x0800d52c
 8002bc4:	20000401 	.word	0x20000401
 8002bc8:	0800d540 	.word	0x0800d540
 8002bcc:	0800d554 	.word	0x0800d554
 8002bd0:	0800d564 	.word	0x0800d564
			}
		} else if(kapi1Tip == 2) {
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <menu+0x15ac>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d104      	bne.n	8002be6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002bdc:	4a89      	ldr	r2, [pc, #548]	; (8002e04 <menu+0x15b0>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	2002      	movs	r0, #2
 8002be2:	f7fd fde9 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be6:	2102      	movs	r1, #2
 8002be8:	4887      	ldr	r0, [pc, #540]	; (8002e08 <menu+0x15b4>)
 8002bea:	f006 fbc5 	bl	8009378 <HAL_GPIO_ReadPin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d115      	bne.n	8002c20 <menu+0x13cc>
 8002bf4:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <menu+0x15b8>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00e      	beq.n	8002c20 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <menu+0x15ac>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	; (8002e00 <menu+0x15ac>)
 8002c0c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <menu+0x15ac>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <menu+0x13c8>
				kapi1Tip = 0;
 8002c16:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <menu+0x15ac>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c1c:	f002 fdd6 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c20:	2104      	movs	r1, #4
 8002c22:	4879      	ldr	r0, [pc, #484]	; (8002e08 <menu+0x15b4>)
 8002c24:	f006 fba8 	bl	8009378 <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d115      	bne.n	8002c5a <menu+0x1406>
 8002c2e:	4b77      	ldr	r3, [pc, #476]	; (8002e0c <menu+0x15b8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002c3c:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <menu+0x15ac>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b6e      	ldr	r3, [pc, #440]	; (8002e00 <menu+0x15ac>)
 8002c46:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002c48:	4b6d      	ldr	r3, [pc, #436]	; (8002e00 <menu+0x15ac>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d902      	bls.n	8002c56 <menu+0x1402>
		   		kapi1Tip = 2;
 8002c50:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <menu+0x15ac>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c56:	f002 fdb9 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5a:	2108      	movs	r1, #8
 8002c5c:	486a      	ldr	r0, [pc, #424]	; (8002e08 <menu+0x15b4>)
 8002c5e:	f006 fb8b 	bl	8009378 <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10d      	bne.n	8002c84 <menu+0x1430>
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <menu+0x15b8>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002c76:	4b62      	ldr	r3, [pc, #392]	; (8002e00 <menu+0x15ac>)
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <menu+0x15bc>)
 8002c7c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <menu+0x15c0>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <menu+0x15c4>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b0a      	cmp	r3, #10
 8002c8a:	d17f      	bne.n	8002d8c <menu+0x1538>
		if(dilSecim == 0) {
 8002c8c:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <menu+0x15c8>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002c94:	4a62      	ldr	r2, [pc, #392]	; (8002e20 <menu+0x15cc>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f7fd fd8d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c9e:	4a61      	ldr	r2, [pc, #388]	; (8002e24 <menu+0x15d0>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f7fd fd88 	bl	80007b8 <lcd_print>
 8002ca8:	e00d      	b.n	8002cc6 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002caa:	4b5c      	ldr	r3, [pc, #368]	; (8002e1c <menu+0x15c8>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d109      	bne.n	8002cc6 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002cb2:	4a5d      	ldr	r2, [pc, #372]	; (8002e28 <menu+0x15d4>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7fd fd7e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002cbc:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <menu+0x15d8>)
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	2002      	movs	r0, #2
 8002cc2:	f7fd fd79 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <menu+0x15dc>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	220a      	movs	r2, #10
 8002ccc:	4959      	ldr	r1, [pc, #356]	; (8002e34 <menu+0x15e0>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f009 fb7e 	bl	800c3d0 <itoa>
		lcd_print(2,16,snum);
 8002cd4:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <menu+0x15e0>)
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f7fd fd6d 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4849      	ldr	r0, [pc, #292]	; (8002e08 <menu+0x15b4>)
 8002ce2:	f006 fb49 	bl	8009378 <HAL_GPIO_ReadPin>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d119      	bne.n	8002d20 <menu+0x14cc>
 8002cec:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <menu+0x15b8>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f083 0301 	eor.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <menu+0x14cc>
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <menu+0x15ac>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <menu+0x15dc>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <menu+0x15dc>)
 8002d0c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <menu+0x15dc>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d902      	bls.n	8002d1c <menu+0x14c8>
				kapi1AcSure = 0;
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <menu+0x15dc>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d1c:	f002 fd56 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002d20:	2104      	movs	r1, #4
 8002d22:	4839      	ldr	r0, [pc, #228]	; (8002e08 <menu+0x15b4>)
 8002d24:	f006 fb28 	bl	8009378 <HAL_GPIO_ReadPin>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d119      	bne.n	8002d62 <menu+0x150e>
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <menu+0x15b8>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <menu+0x150e>
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <menu+0x15ac>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10e      	bne.n	8002d62 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <menu+0x15dc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <menu+0x15dc>)
 8002d4e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <menu+0x15dc>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d902      	bls.n	8002d5e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <menu+0x15dc>)
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d5e:	f002 fd35 	bl	80057cc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d62:	2108      	movs	r1, #8
 8002d64:	4828      	ldr	r0, [pc, #160]	; (8002e08 <menu+0x15b4>)
 8002d66:	f006 fb07 	bl	8009378 <HAL_GPIO_ReadPin>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10d      	bne.n	8002d8c <menu+0x1538>
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <menu+0x15b8>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <menu+0x15dc>)
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <menu+0x15bc>)
 8002d84:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <menu+0x15c0>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <menu+0x15c4>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b0b      	cmp	r3, #11
 8002d92:	f040 80b5 	bne.w	8002f00 <menu+0x16ac>
		if(dilSecim == 0) {
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <menu+0x15c8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <menu+0x15e4>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7fd fd08 	bl	80007b8 <lcd_print>
 8002da8:	e008      	b.n	8002dbc <menu+0x1568>
		} else if(dilSecim == 1) {
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <menu+0x15c8>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d104      	bne.n	8002dbc <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002db2:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <menu+0x15e8>)
 8002db4:	2101      	movs	r1, #1
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fd fcfe 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <menu+0x15ec>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <menu+0x15f0>)
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f7fd fcf5 	bl	80007b8 <lcd_print>
 8002dce:	e048      	b.n	8002e62 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <menu+0x15ec>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d13b      	bne.n	8002e50 <menu+0x15fc>
			if(dilSecim == 0) {
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <menu+0x15c8>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <menu+0x15f4>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f7fd fce7 	bl	80007b8 <lcd_print>
 8002dea:	e03a      	b.n	8002e62 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <menu+0x15c8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d136      	bne.n	8002e62 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <menu+0x15f8>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	2002      	movs	r0, #2
 8002dfa:	f7fd fcdd 	bl	80007b8 <lcd_print>
 8002dfe:	e030      	b.n	8002e62 <menu+0x160e>
 8002e00:	20000401 	.word	0x20000401
 8002e04:	0800d578 	.word	0x0800d578
 8002e08:	40010800 	.word	0x40010800
 8002e0c:	20000427 	.word	0x20000427
 8002e10:	20000328 	.word	0x20000328
 8002e14:	20000424 	.word	0x20000424
 8002e18:	200003f8 	.word	0x200003f8
 8002e1c:	20000419 	.word	0x20000419
 8002e20:	0800d588 	.word	0x0800d588
 8002e24:	0800d59c 	.word	0x0800d59c
 8002e28:	0800d5ac 	.word	0x0800d5ac
 8002e2c:	0800d5c0 	.word	0x0800d5c0
 8002e30:	20000411 	.word	0x20000411
 8002e34:	20000398 	.word	0x20000398
 8002e38:	0800d5d0 	.word	0x0800d5d0
 8002e3c:	0800d5e4 	.word	0x0800d5e4
 8002e40:	20000402 	.word	0x20000402
 8002e44:	0800d540 	.word	0x0800d540
 8002e48:	0800d554 	.word	0x0800d554
 8002e4c:	0800d564 	.word	0x0800d564
			}
		} else if(kapi2Tip == 2) {
 8002e50:	4b8a      	ldr	r3, [pc, #552]	; (800307c <menu+0x1828>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d104      	bne.n	8002e62 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002e58:	4a89      	ldr	r2, [pc, #548]	; (8003080 <menu+0x182c>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f7fd fcab 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e62:	2102      	movs	r1, #2
 8002e64:	4887      	ldr	r0, [pc, #540]	; (8003084 <menu+0x1830>)
 8002e66:	f006 fa87 	bl	8009378 <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d115      	bne.n	8002e9c <menu+0x1648>
 8002e70:	4b85      	ldr	r3, [pc, #532]	; (8003088 <menu+0x1834>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	f083 0301 	eor.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00e      	beq.n	8002e9c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <menu+0x1828>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4b7d      	ldr	r3, [pc, #500]	; (800307c <menu+0x1828>)
 8002e88:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <menu+0x1828>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <menu+0x1644>
				kapi2Tip = 0;
 8002e92:	4b7a      	ldr	r3, [pc, #488]	; (800307c <menu+0x1828>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e98:	f002 fc98 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4879      	ldr	r0, [pc, #484]	; (8003084 <menu+0x1830>)
 8002ea0:	f006 fa6a 	bl	8009378 <HAL_GPIO_ReadPin>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d115      	bne.n	8002ed6 <menu+0x1682>
 8002eaa:	4b77      	ldr	r3, [pc, #476]	; (8003088 <menu+0x1834>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002eb8:	4b70      	ldr	r3, [pc, #448]	; (800307c <menu+0x1828>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b6e      	ldr	r3, [pc, #440]	; (800307c <menu+0x1828>)
 8002ec2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002ec4:	4b6d      	ldr	r3, [pc, #436]	; (800307c <menu+0x1828>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d902      	bls.n	8002ed2 <menu+0x167e>
		   		kapi2Tip = 2;
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	; (800307c <menu+0x1828>)
 8002ece:	2202      	movs	r2, #2
 8002ed0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ed2:	f002 fc7b 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	486a      	ldr	r0, [pc, #424]	; (8003084 <menu+0x1830>)
 8002eda:	f006 fa4d 	bl	8009378 <HAL_GPIO_ReadPin>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10d      	bne.n	8002f00 <menu+0x16ac>
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <menu+0x1834>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f083 0301 	eor.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002ef2:	4b62      	ldr	r3, [pc, #392]	; (800307c <menu+0x1828>)
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	4b65      	ldr	r3, [pc, #404]	; (800308c <menu+0x1838>)
 8002ef8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <menu+0x183c>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <menu+0x1840>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d17f      	bne.n	8003008 <menu+0x17b4>
		if(dilSecim == 0) {
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <menu+0x1844>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002f10:	4a62      	ldr	r2, [pc, #392]	; (800309c <menu+0x1848>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7fd fc4f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f1a:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <menu+0x184c>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f7fd fc4a 	bl	80007b8 <lcd_print>
 8002f24:	e00d      	b.n	8002f42 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <menu+0x1844>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d109      	bne.n	8002f42 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002f2e:	4a5d      	ldr	r2, [pc, #372]	; (80030a4 <menu+0x1850>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7fd fc40 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f38:	4a5b      	ldr	r2, [pc, #364]	; (80030a8 <menu+0x1854>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7fd fc3b 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002f42:	4b5a      	ldr	r3, [pc, #360]	; (80030ac <menu+0x1858>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	220a      	movs	r2, #10
 8002f48:	4959      	ldr	r1, [pc, #356]	; (80030b0 <menu+0x185c>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f009 fa40 	bl	800c3d0 <itoa>
		lcd_print(2,16,snum);
 8002f50:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <menu+0x185c>)
 8002f52:	2110      	movs	r1, #16
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7fd fc2f 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4849      	ldr	r0, [pc, #292]	; (8003084 <menu+0x1830>)
 8002f5e:	f006 fa0b 	bl	8009378 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d119      	bne.n	8002f9c <menu+0x1748>
 8002f68:	4b47      	ldr	r3, [pc, #284]	; (8003088 <menu+0x1834>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <menu+0x1748>
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <menu+0x1828>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <menu+0x1858>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b49      	ldr	r3, [pc, #292]	; (80030ac <menu+0x1858>)
 8002f88:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002f8a:	4b48      	ldr	r3, [pc, #288]	; (80030ac <menu+0x1858>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d902      	bls.n	8002f98 <menu+0x1744>
				kapi2AcSure = 0;
 8002f92:	4b46      	ldr	r3, [pc, #280]	; (80030ac <menu+0x1858>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f98:	f002 fc18 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	4839      	ldr	r0, [pc, #228]	; (8003084 <menu+0x1830>)
 8002fa0:	f006 f9ea 	bl	8009378 <HAL_GPIO_ReadPin>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d119      	bne.n	8002fde <menu+0x178a>
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <menu+0x1834>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	f083 0301 	eor.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <menu+0x178a>
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <menu+0x1828>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10e      	bne.n	8002fde <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002fc0:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <menu+0x1858>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b38      	ldr	r3, [pc, #224]	; (80030ac <menu+0x1858>)
 8002fca:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002fcc:	4b37      	ldr	r3, [pc, #220]	; (80030ac <menu+0x1858>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d902      	bls.n	8002fda <menu+0x1786>
		   		kapi2AcSure = 5;
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <menu+0x1858>)
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fda:	f002 fbf7 	bl	80057cc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fde:	2108      	movs	r1, #8
 8002fe0:	4828      	ldr	r0, [pc, #160]	; (8003084 <menu+0x1830>)
 8002fe2:	f006 f9c9 	bl	8009378 <HAL_GPIO_ReadPin>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10d      	bne.n	8003008 <menu+0x17b4>
 8002fec:	4b26      	ldr	r3, [pc, #152]	; (8003088 <menu+0x1834>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	f083 0301 	eor.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <menu+0x1858>)
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <menu+0x1838>)
 8003000:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <menu+0x183c>)
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8003008:	4b22      	ldr	r3, [pc, #136]	; (8003094 <menu+0x1840>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b0d      	cmp	r3, #13
 800300e:	f040 80b5 	bne.w	800317c <menu+0x1928>
		if(dilSecim == 0) {
 8003012:	4b21      	ldr	r3, [pc, #132]	; (8003098 <menu+0x1844>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800301a:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <menu+0x1860>)
 800301c:	2101      	movs	r1, #1
 800301e:	2001      	movs	r0, #1
 8003020:	f7fd fbca 	bl	80007b8 <lcd_print>
 8003024:	e008      	b.n	8003038 <menu+0x17e4>
		} else if(dilSecim == 1){
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <menu+0x1844>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d104      	bne.n	8003038 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800302e:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <menu+0x1864>)
 8003030:	2101      	movs	r1, #1
 8003032:	2001      	movs	r0, #1
 8003034:	f7fd fbc0 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <menu+0x1868>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <menu+0x186c>)
 8003042:	2101      	movs	r1, #1
 8003044:	2002      	movs	r0, #2
 8003046:	f7fd fbb7 	bl	80007b8 <lcd_print>
 800304a:	e048      	b.n	80030de <menu+0x188a>
		} else if(kapitablaTip == 1) {
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <menu+0x1868>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13b      	bne.n	80030cc <menu+0x1878>
			if(dilSecim == 0) {
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <menu+0x1844>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <menu+0x1870>)
 800305e:	2101      	movs	r1, #1
 8003060:	2002      	movs	r0, #2
 8003062:	f7fd fba9 	bl	80007b8 <lcd_print>
 8003066:	e03a      	b.n	80030de <menu+0x188a>
			} else if(dilSecim == 1) {
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <menu+0x1844>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d136      	bne.n	80030de <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8003070:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <menu+0x1874>)
 8003072:	2101      	movs	r1, #1
 8003074:	2002      	movs	r0, #2
 8003076:	f7fd fb9f 	bl	80007b8 <lcd_print>
 800307a:	e030      	b.n	80030de <menu+0x188a>
 800307c:	20000402 	.word	0x20000402
 8003080:	0800d578 	.word	0x0800d578
 8003084:	40010800 	.word	0x40010800
 8003088:	20000427 	.word	0x20000427
 800308c:	20000328 	.word	0x20000328
 8003090:	20000424 	.word	0x20000424
 8003094:	200003f8 	.word	0x200003f8
 8003098:	20000419 	.word	0x20000419
 800309c:	0800d5f8 	.word	0x0800d5f8
 80030a0:	0800d59c 	.word	0x0800d59c
 80030a4:	0800d60c 	.word	0x0800d60c
 80030a8:	0800d5c0 	.word	0x0800d5c0
 80030ac:	20000412 	.word	0x20000412
 80030b0:	20000398 	.word	0x20000398
 80030b4:	0800d620 	.word	0x0800d620
 80030b8:	0800d634 	.word	0x0800d634
 80030bc:	20000403 	.word	0x20000403
 80030c0:	0800d540 	.word	0x0800d540
 80030c4:	0800d554 	.word	0x0800d554
 80030c8:	0800d564 	.word	0x0800d564
			}
		} else if(kapitablaTip == 2) {
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <menu+0x19e8>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d104      	bne.n	80030de <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 80030d4:	4a5a      	ldr	r2, [pc, #360]	; (8003240 <menu+0x19ec>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	2002      	movs	r0, #2
 80030da:	f7fd fb6d 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030de:	2102      	movs	r1, #2
 80030e0:	4858      	ldr	r0, [pc, #352]	; (8003244 <menu+0x19f0>)
 80030e2:	f006 f949 	bl	8009378 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d115      	bne.n	8003118 <menu+0x18c4>
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <menu+0x19f4>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00e      	beq.n	8003118 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80030fa:	4b50      	ldr	r3, [pc, #320]	; (800323c <menu+0x19e8>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b4e      	ldr	r3, [pc, #312]	; (800323c <menu+0x19e8>)
 8003104:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8003106:	4b4d      	ldr	r3, [pc, #308]	; (800323c <menu+0x19e8>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <menu+0x18c0>
				kapitablaTip = 0;
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <menu+0x19e8>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003114:	f002 fb5a 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003118:	2104      	movs	r1, #4
 800311a:	484a      	ldr	r0, [pc, #296]	; (8003244 <menu+0x19f0>)
 800311c:	f006 f92c 	bl	8009378 <HAL_GPIO_ReadPin>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d115      	bne.n	8003152 <menu+0x18fe>
 8003126:	4b48      	ldr	r3, [pc, #288]	; (8003248 <menu+0x19f4>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8003134:	4b41      	ldr	r3, [pc, #260]	; (800323c <menu+0x19e8>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b3f      	ldr	r3, [pc, #252]	; (800323c <menu+0x19e8>)
 800313e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8003140:	4b3e      	ldr	r3, [pc, #248]	; (800323c <menu+0x19e8>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d902      	bls.n	800314e <menu+0x18fa>
		   		kapitablaTip = 2;
 8003148:	4b3c      	ldr	r3, [pc, #240]	; (800323c <menu+0x19e8>)
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800314e:	f002 fb3d 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003152:	2108      	movs	r1, #8
 8003154:	483b      	ldr	r0, [pc, #236]	; (8003244 <menu+0x19f0>)
 8003156:	f006 f90f 	bl	8009378 <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10d      	bne.n	800317c <menu+0x1928>
 8003160:	4b39      	ldr	r3, [pc, #228]	; (8003248 <menu+0x19f4>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 800316e:	4b33      	ldr	r3, [pc, #204]	; (800323c <menu+0x19e8>)
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <menu+0x19f8>)
 8003174:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <menu+0x19fc>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <menu+0x1a00>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b0e      	cmp	r3, #14
 8003182:	f040 80f2 	bne.w	800336a <menu+0x1b16>
		if(dilSecim == 0) {
 8003186:	4b34      	ldr	r3, [pc, #208]	; (8003258 <menu+0x1a04>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800318e:	4a33      	ldr	r2, [pc, #204]	; (800325c <menu+0x1a08>)
 8003190:	2101      	movs	r1, #1
 8003192:	2001      	movs	r0, #1
 8003194:	f7fd fb10 	bl	80007b8 <lcd_print>
 8003198:	e008      	b.n	80031ac <menu+0x1958>
		} else if(dilSecim == 1) {
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <menu+0x1a04>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d104      	bne.n	80031ac <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <menu+0x1a0c>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7fd fb06 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <menu+0x1a10>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d113      	bne.n	80031dc <menu+0x1988>
			if(dilSecim == 0){
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <menu+0x1a04>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 80031bc:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <menu+0x1a14>)
 80031be:	2101      	movs	r1, #1
 80031c0:	2002      	movs	r0, #2
 80031c2:	f7fd faf9 	bl	80007b8 <lcd_print>
 80031c6:	e071      	b.n	80032ac <menu+0x1a58>
			} else if(dilSecim == 1) {
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <menu+0x1a04>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d16d      	bne.n	80032ac <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <menu+0x1a18>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7fd faef 	bl	80007b8 <lcd_print>
 80031da:	e067      	b.n	80032ac <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <menu+0x1a10>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d112      	bne.n	800320a <menu+0x19b6>
			if(dilSecim == 0){
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <menu+0x1a04>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 80031ec:	4a20      	ldr	r2, [pc, #128]	; (8003270 <menu+0x1a1c>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2002      	movs	r0, #2
 80031f2:	f7fd fae1 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <menu+0x1a04>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d156      	bne.n	80032ac <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <menu+0x1a20>)
 8003200:	2101      	movs	r1, #1
 8003202:	2002      	movs	r0, #2
 8003204:	f7fd fad8 	bl	80007b8 <lcd_print>
 8003208:	e050      	b.n	80032ac <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <menu+0x1a10>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d136      	bne.n	8003280 <menu+0x1a2c>
			if(dilSecim == 0){
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <menu+0x1a04>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <menu+0x1a24>)
 800321c:	2101      	movs	r1, #1
 800321e:	2002      	movs	r0, #2
 8003220:	f7fd faca 	bl	80007b8 <lcd_print>
 8003224:	e042      	b.n	80032ac <menu+0x1a58>
			} else if(dilSecim == 1) {
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <menu+0x1a04>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d13e      	bne.n	80032ac <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <menu+0x1a28>)
 8003230:	2101      	movs	r1, #1
 8003232:	2002      	movs	r0, #2
 8003234:	f7fd fac0 	bl	80007b8 <lcd_print>
 8003238:	e038      	b.n	80032ac <menu+0x1a58>
 800323a:	bf00      	nop
 800323c:	20000403 	.word	0x20000403
 8003240:	0800d578 	.word	0x0800d578
 8003244:	40010800 	.word	0x40010800
 8003248:	20000427 	.word	0x20000427
 800324c:	20000328 	.word	0x20000328
 8003250:	20000424 	.word	0x20000424
 8003254:	200003f8 	.word	0x200003f8
 8003258:	20000419 	.word	0x20000419
 800325c:	0800d648 	.word	0x0800d648
 8003260:	0800d65c 	.word	0x0800d65c
 8003264:	20000405 	.word	0x20000405
 8003268:	0800d670 	.word	0x0800d670
 800326c:	0800d680 	.word	0x0800d680
 8003270:	0800d690 	.word	0x0800d690
 8003274:	0800d6a0 	.word	0x0800d6a0
 8003278:	0800d6b0 	.word	0x0800d6b0
 800327c:	0800d6c4 	.word	0x0800d6c4
			}
		} else if(kapiTablaAcKonum == 3) {
 8003280:	4b9b      	ldr	r3, [pc, #620]	; (80034f0 <menu+0x1c9c>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d111      	bne.n	80032ac <menu+0x1a58>
			if(dilSecim == 0) {
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <menu+0x1ca0>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003290:	4a99      	ldr	r2, [pc, #612]	; (80034f8 <menu+0x1ca4>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd fa8f 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800329a:	4b96      	ldr	r3, [pc, #600]	; (80034f4 <menu+0x1ca0>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d104      	bne.n	80032ac <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 80032a2:	4a96      	ldr	r2, [pc, #600]	; (80034fc <menu+0x1ca8>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	2002      	movs	r0, #2
 80032a8:	f7fd fa86 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ac:	2102      	movs	r1, #2
 80032ae:	4894      	ldr	r0, [pc, #592]	; (8003500 <menu+0x1cac>)
 80032b0:	f006 f862 	bl	8009378 <HAL_GPIO_ReadPin>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d115      	bne.n	80032e6 <menu+0x1a92>
 80032ba:	4b92      	ldr	r3, [pc, #584]	; (8003504 <menu+0x1cb0>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	f083 0301 	eor.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80032c8:	4b89      	ldr	r3, [pc, #548]	; (80034f0 <menu+0x1c9c>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	4b87      	ldr	r3, [pc, #540]	; (80034f0 <menu+0x1c9c>)
 80032d2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80032d4:	4b86      	ldr	r3, [pc, #536]	; (80034f0 <menu+0x1c9c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d902      	bls.n	80032e2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 80032dc:	4b84      	ldr	r3, [pc, #528]	; (80034f0 <menu+0x1c9c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e2:	f002 fa73 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e6:	2104      	movs	r1, #4
 80032e8:	4885      	ldr	r0, [pc, #532]	; (8003500 <menu+0x1cac>)
 80032ea:	f006 f845 	bl	8009378 <HAL_GPIO_ReadPin>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d115      	bne.n	8003320 <menu+0x1acc>
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <menu+0x1cb0>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	f083 0301 	eor.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00e      	beq.n	8003320 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003302:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <menu+0x1c9c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <menu+0x1c9c>)
 800330c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800330e:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <menu+0x1c9c>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d902      	bls.n	800331c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003316:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <menu+0x1c9c>)
 8003318:	2202      	movs	r2, #2
 800331a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800331c:	f002 fa56 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003320:	2108      	movs	r1, #8
 8003322:	4877      	ldr	r0, [pc, #476]	; (8003500 <menu+0x1cac>)
 8003324:	f006 f828 	bl	8009378 <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d11d      	bne.n	800336a <menu+0x1b16>
 800332e:	4b75      	ldr	r3, [pc, #468]	; (8003504 <menu+0x1cb0>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 800333c:	4b6c      	ldr	r3, [pc, #432]	; (80034f0 <menu+0x1c9c>)
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	4b71      	ldr	r3, [pc, #452]	; (8003508 <menu+0x1cb4>)
 8003342:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <menu+0x1c9c>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <menu+0x1b02>
 800334e:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <menu+0x1c9c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d106      	bne.n	8003364 <menu+0x1b10>
				altLimit = 1;
 8003356:	4b6d      	ldr	r3, [pc, #436]	; (800350c <menu+0x1cb8>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800335c:	4b6b      	ldr	r3, [pc, #428]	; (800350c <menu+0x1cb8>)
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	4b69      	ldr	r3, [pc, #420]	; (8003508 <menu+0x1cb4>)
 8003362:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <menu+0x1cbc>)
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <menu+0x1cc0>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	d17f      	bne.n	8003472 <menu+0x1c1e>
		if(dilSecim == 0) {
 8003372:	4b60      	ldr	r3, [pc, #384]	; (80034f4 <menu+0x1ca0>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800337a:	4a67      	ldr	r2, [pc, #412]	; (8003518 <menu+0x1cc4>)
 800337c:	2101      	movs	r1, #1
 800337e:	2001      	movs	r0, #1
 8003380:	f7fd fa1a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003384:	4a65      	ldr	r2, [pc, #404]	; (800351c <menu+0x1cc8>)
 8003386:	2101      	movs	r1, #1
 8003388:	2002      	movs	r0, #2
 800338a:	f7fd fa15 	bl	80007b8 <lcd_print>
 800338e:	e00d      	b.n	80033ac <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003390:	4b58      	ldr	r3, [pc, #352]	; (80034f4 <menu+0x1ca0>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d109      	bne.n	80033ac <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003398:	4a61      	ldr	r2, [pc, #388]	; (8003520 <menu+0x1ccc>)
 800339a:	2101      	movs	r1, #1
 800339c:	2001      	movs	r0, #1
 800339e:	f7fd fa0b 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80033a2:	4a60      	ldr	r2, [pc, #384]	; (8003524 <menu+0x1cd0>)
 80033a4:	2101      	movs	r1, #1
 80033a6:	2002      	movs	r0, #2
 80033a8:	f7fd fa06 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80033ac:	4b5e      	ldr	r3, [pc, #376]	; (8003528 <menu+0x1cd4>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	220a      	movs	r2, #10
 80033b2:	495e      	ldr	r1, [pc, #376]	; (800352c <menu+0x1cd8>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f009 f80b 	bl	800c3d0 <itoa>
		lcd_print(2,16,snum);
 80033ba:	4a5c      	ldr	r2, [pc, #368]	; (800352c <menu+0x1cd8>)
 80033bc:	2110      	movs	r1, #16
 80033be:	2002      	movs	r0, #2
 80033c0:	f7fd f9fa 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80033c4:	2102      	movs	r1, #2
 80033c6:	484e      	ldr	r0, [pc, #312]	; (8003500 <menu+0x1cac>)
 80033c8:	f005 ffd6 	bl	8009378 <HAL_GPIO_ReadPin>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d119      	bne.n	8003406 <menu+0x1bb2>
 80033d2:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <menu+0x1cb0>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f083 0301 	eor.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <menu+0x1bb2>
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <menu+0x1cdc>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10e      	bne.n	8003406 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80033e8:	4b4f      	ldr	r3, [pc, #316]	; (8003528 <menu+0x1cd4>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <menu+0x1cd4>)
 80033f2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <menu+0x1cd4>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d902      	bls.n	8003402 <menu+0x1bae>
				kapiTablaAcSure = 0;
 80033fc:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <menu+0x1cd4>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003402:	f002 f9e3 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003406:	2104      	movs	r1, #4
 8003408:	483d      	ldr	r0, [pc, #244]	; (8003500 <menu+0x1cac>)
 800340a:	f005 ffb5 	bl	8009378 <HAL_GPIO_ReadPin>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d119      	bne.n	8003448 <menu+0x1bf4>
 8003414:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <menu+0x1cb0>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f083 0301 	eor.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <menu+0x1bf4>
 8003422:	4b43      	ldr	r3, [pc, #268]	; (8003530 <menu+0x1cdc>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800342a:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <menu+0x1cd4>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <menu+0x1cd4>)
 8003434:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003436:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <menu+0x1cd4>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <menu+0x1cd4>)
 8003440:	2205      	movs	r2, #5
 8003442:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003444:	f002 f9c2 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003448:	2108      	movs	r1, #8
 800344a:	482d      	ldr	r0, [pc, #180]	; (8003500 <menu+0x1cac>)
 800344c:	f005 ff94 	bl	8009378 <HAL_GPIO_ReadPin>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10d      	bne.n	8003472 <menu+0x1c1e>
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <menu+0x1cb0>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f083 0301 	eor.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d006      	beq.n	8003472 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003464:	4b30      	ldr	r3, [pc, #192]	; (8003528 <menu+0x1cd4>)
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <menu+0x1cb4>)
 800346a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <menu+0x1cbc>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <menu+0x1cc0>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	f040 80bc 	bne.w	80035f4 <menu+0x1da0>
		if(dilSecim == 0) {
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <menu+0x1ca0>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <menu+0x1ce0>)
 8003486:	2101      	movs	r1, #1
 8003488:	2001      	movs	r0, #1
 800348a:	f7fd f995 	bl	80007b8 <lcd_print>
 800348e:	e008      	b.n	80034a2 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <menu+0x1ca0>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d104      	bne.n	80034a2 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <menu+0x1ce4>)
 800349a:	2101      	movs	r1, #1
 800349c:	2001      	movs	r0, #1
 800349e:	f7fd f98b 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <menu+0x1ce8>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d113      	bne.n	80034d2 <menu+0x1c7e>
			if(dilSecim == 0) {
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <menu+0x1ca0>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80034b2:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <menu+0x1ca4>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	2002      	movs	r0, #2
 80034b8:	f7fd f97e 	bl	80007b8 <lcd_print>
 80034bc:	e04b      	b.n	8003556 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <menu+0x1ca0>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d147      	bne.n	8003556 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <menu+0x1ca8>)
 80034c8:	2101      	movs	r1, #1
 80034ca:	2002      	movs	r0, #2
 80034cc:	f7fd f974 	bl	80007b8 <lcd_print>
 80034d0:	e041      	b.n	8003556 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <menu+0x1ce8>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d13d      	bne.n	8003556 <menu+0x1d02>
			if(dilSecim == 0) {
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <menu+0x1ca0>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d130      	bne.n	8003544 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <menu+0x1cec>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7fd f966 	bl	80007b8 <lcd_print>
 80034ec:	e033      	b.n	8003556 <menu+0x1d02>
 80034ee:	bf00      	nop
 80034f0:	20000405 	.word	0x20000405
 80034f4:	20000419 	.word	0x20000419
 80034f8:	0800d338 	.word	0x0800d338
 80034fc:	0800d34c 	.word	0x0800d34c
 8003500:	40010800 	.word	0x40010800
 8003504:	20000427 	.word	0x20000427
 8003508:	20000328 	.word	0x20000328
 800350c:	200003fe 	.word	0x200003fe
 8003510:	20000424 	.word	0x20000424
 8003514:	200003f8 	.word	0x200003f8
 8003518:	0800d6d8 	.word	0x0800d6d8
 800351c:	0800d59c 	.word	0x0800d59c
 8003520:	0800d6ec 	.word	0x0800d6ec
 8003524:	0800d5c0 	.word	0x0800d5c0
 8003528:	20000413 	.word	0x20000413
 800352c:	20000398 	.word	0x20000398
 8003530:	20000403 	.word	0x20000403
 8003534:	0800d700 	.word	0x0800d700
 8003538:	0800d714 	.word	0x0800d714
 800353c:	20000406 	.word	0x20000406
 8003540:	0800d398 	.word	0x0800d398
			} else if(dilSecim == 1) {
 8003544:	4b99      	ldr	r3, [pc, #612]	; (80037ac <menu+0x1f58>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d104      	bne.n	8003556 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 800354c:	4a98      	ldr	r2, [pc, #608]	; (80037b0 <menu+0x1f5c>)
 800354e:	2101      	movs	r1, #1
 8003550:	2002      	movs	r0, #2
 8003552:	f7fd f931 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003556:	2102      	movs	r1, #2
 8003558:	4896      	ldr	r0, [pc, #600]	; (80037b4 <menu+0x1f60>)
 800355a:	f005 ff0d 	bl	8009378 <HAL_GPIO_ReadPin>
 800355e:	4603      	mov	r3, r0
 8003560:	2b01      	cmp	r3, #1
 8003562:	d115      	bne.n	8003590 <menu+0x1d3c>
 8003564:	4b94      	ldr	r3, [pc, #592]	; (80037b8 <menu+0x1f64>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f083 0301 	eor.w	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003572:	4b92      	ldr	r3, [pc, #584]	; (80037bc <menu+0x1f68>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b90      	ldr	r3, [pc, #576]	; (80037bc <menu+0x1f68>)
 800357c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800357e:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <menu+0x1f68>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d902      	bls.n	800358c <menu+0x1d38>
				yukariYavasLimit = 0;
 8003586:	4b8d      	ldr	r3, [pc, #564]	; (80037bc <menu+0x1f68>)
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800358c:	f002 f91e 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003590:	2104      	movs	r1, #4
 8003592:	4888      	ldr	r0, [pc, #544]	; (80037b4 <menu+0x1f60>)
 8003594:	f005 fef0 	bl	8009378 <HAL_GPIO_ReadPin>
 8003598:	4603      	mov	r3, r0
 800359a:	2b01      	cmp	r3, #1
 800359c:	d115      	bne.n	80035ca <menu+0x1d76>
 800359e:	4b86      	ldr	r3, [pc, #536]	; (80037b8 <menu+0x1f64>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	f083 0301 	eor.w	r3, r3, #1
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80035ac:	4b83      	ldr	r3, [pc, #524]	; (80037bc <menu+0x1f68>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	4b81      	ldr	r3, [pc, #516]	; (80037bc <menu+0x1f68>)
 80035b6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80035b8:	4b80      	ldr	r3, [pc, #512]	; (80037bc <menu+0x1f68>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80035c0:	4b7e      	ldr	r3, [pc, #504]	; (80037bc <menu+0x1f68>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035c6:	f002 f901 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ca:	2108      	movs	r1, #8
 80035cc:	4879      	ldr	r0, [pc, #484]	; (80037b4 <menu+0x1f60>)
 80035ce:	f005 fed3 	bl	8009378 <HAL_GPIO_ReadPin>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d10d      	bne.n	80035f4 <menu+0x1da0>
 80035d8:	4b77      	ldr	r3, [pc, #476]	; (80037b8 <menu+0x1f64>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80035e6:	4b75      	ldr	r3, [pc, #468]	; (80037bc <menu+0x1f68>)
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <menu+0x1f6c>)
 80035ec:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80035ee:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <menu+0x1f70>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80035f4:	4b74      	ldr	r3, [pc, #464]	; (80037c8 <menu+0x1f74>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	f040 80c3 	bne.w	8003784 <menu+0x1f30>
		if(dilSecim == 0) {
 80035fe:	4b6b      	ldr	r3, [pc, #428]	; (80037ac <menu+0x1f58>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003606:	4a71      	ldr	r2, [pc, #452]	; (80037cc <menu+0x1f78>)
 8003608:	2101      	movs	r1, #1
 800360a:	2001      	movs	r0, #1
 800360c:	f7fd f8d4 	bl	80007b8 <lcd_print>
 8003610:	e008      	b.n	8003624 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003612:	4b66      	ldr	r3, [pc, #408]	; (80037ac <menu+0x1f58>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d104      	bne.n	8003624 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800361a:	4a6d      	ldr	r2, [pc, #436]	; (80037d0 <menu+0x1f7c>)
 800361c:	2101      	movs	r1, #1
 800361e:	2001      	movs	r0, #1
 8003620:	f7fd f8ca 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003624:	4b6b      	ldr	r3, [pc, #428]	; (80037d4 <menu+0x1f80>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d113      	bne.n	8003654 <menu+0x1e00>
			if(dilSecim == 0){
 800362c:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <menu+0x1f58>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003634:	4a68      	ldr	r2, [pc, #416]	; (80037d8 <menu+0x1f84>)
 8003636:	2101      	movs	r1, #1
 8003638:	2002      	movs	r0, #2
 800363a:	f7fd f8bd 	bl	80007b8 <lcd_print>
 800363e:	e038      	b.n	80036b2 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003640:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <menu+0x1f58>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d134      	bne.n	80036b2 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003648:	4a64      	ldr	r2, [pc, #400]	; (80037dc <menu+0x1f88>)
 800364a:	2101      	movs	r1, #1
 800364c:	2002      	movs	r0, #2
 800364e:	f7fd f8b3 	bl	80007b8 <lcd_print>
 8003652:	e02e      	b.n	80036b2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003654:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <menu+0x1f80>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d113      	bne.n	8003684 <menu+0x1e30>
			if(dilSecim == 0){
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <menu+0x1f58>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003664:	4a5e      	ldr	r2, [pc, #376]	; (80037e0 <menu+0x1f8c>)
 8003666:	2101      	movs	r1, #1
 8003668:	2002      	movs	r0, #2
 800366a:	f7fd f8a5 	bl	80007b8 <lcd_print>
 800366e:	e020      	b.n	80036b2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003670:	4b4e      	ldr	r3, [pc, #312]	; (80037ac <menu+0x1f58>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d11c      	bne.n	80036b2 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003678:	4a5a      	ldr	r2, [pc, #360]	; (80037e4 <menu+0x1f90>)
 800367a:	2101      	movs	r1, #1
 800367c:	2002      	movs	r0, #2
 800367e:	f7fd f89b 	bl	80007b8 <lcd_print>
 8003682:	e016      	b.n	80036b2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <menu+0x1f80>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d112      	bne.n	80036b2 <menu+0x1e5e>
			if(dilSecim == 0) {
 800368c:	4b47      	ldr	r3, [pc, #284]	; (80037ac <menu+0x1f58>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003694:	4a54      	ldr	r2, [pc, #336]	; (80037e8 <menu+0x1f94>)
 8003696:	2101      	movs	r1, #1
 8003698:	2002      	movs	r0, #2
 800369a:	f7fd f88d 	bl	80007b8 <lcd_print>
 800369e:	e008      	b.n	80036b2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80036a0:	4b42      	ldr	r3, [pc, #264]	; (80037ac <menu+0x1f58>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d104      	bne.n	80036b2 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80036a8:	4a50      	ldr	r2, [pc, #320]	; (80037ec <menu+0x1f98>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2002      	movs	r0, #2
 80036ae:	f7fd f883 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b2:	2102      	movs	r1, #2
 80036b4:	483f      	ldr	r0, [pc, #252]	; (80037b4 <menu+0x1f60>)
 80036b6:	f005 fe5f 	bl	8009378 <HAL_GPIO_ReadPin>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d115      	bne.n	80036ec <menu+0x1e98>
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <menu+0x1f64>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f083 0301 	eor.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00e      	beq.n	80036ec <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <menu+0x1f80>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <menu+0x1f80>)
 80036d8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <menu+0x1f80>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d902      	bls.n	80036e8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <menu+0x1f80>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036e8:	f002 f870 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ec:	2104      	movs	r1, #4
 80036ee:	4831      	ldr	r0, [pc, #196]	; (80037b4 <menu+0x1f60>)
 80036f0:	f005 fe42 	bl	8009378 <HAL_GPIO_ReadPin>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d115      	bne.n	8003726 <menu+0x1ed2>
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <menu+0x1f64>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <menu+0x1f80>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	3b01      	subs	r3, #1
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <menu+0x1f80>)
 8003712:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003714:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <menu+0x1f80>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d902      	bls.n	8003722 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <menu+0x1f80>)
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003722:	f002 f853 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003726:	2108      	movs	r1, #8
 8003728:	4822      	ldr	r0, [pc, #136]	; (80037b4 <menu+0x1f60>)
 800372a:	f005 fe25 	bl	8009378 <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d127      	bne.n	8003784 <menu+0x1f30>
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <menu+0x1f64>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003742:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <menu+0x1f80>)
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <menu+0x1f6c>)
 8003748:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <menu+0x1f80>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <menu+0x1f06>
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <menu+0x1f80>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d106      	bne.n	8003768 <menu+0x1f14>
				calismaSekli = 0;
 800375a:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <menu+0x1f9c>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003760:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <menu+0x1f9c>)
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <menu+0x1f6c>)
 8003766:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <menu+0x1f80>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <menu+0x1fa0>)
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003776:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <menu+0x1fa0>)
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <menu+0x1f6c>)
 800377c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <menu+0x1f70>)
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <menu+0x1f74>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b12      	cmp	r3, #18
 800378a:	f040 80d5 	bne.w	8003938 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <menu+0x1f80>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d13c      	bne.n	8003810 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <menu+0x1f58>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d12e      	bne.n	80037fc <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <menu+0x1fa4>)
 80037a0:	2101      	movs	r1, #1
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fd f808 	bl	80007b8 <lcd_print>
 80037a8:	e048      	b.n	800383c <menu+0x1fe8>
 80037aa:	bf00      	nop
 80037ac:	20000419 	.word	0x20000419
 80037b0:	0800d3ac 	.word	0x0800d3ac
 80037b4:	40010800 	.word	0x40010800
 80037b8:	20000427 	.word	0x20000427
 80037bc:	20000406 	.word	0x20000406
 80037c0:	20000328 	.word	0x20000328
 80037c4:	20000424 	.word	0x20000424
 80037c8:	200003f8 	.word	0x200003f8
 80037cc:	0800d728 	.word	0x0800d728
 80037d0:	0800d73c 	.word	0x0800d73c
 80037d4:	20000407 	.word	0x20000407
 80037d8:	0800d750 	.word	0x0800d750
 80037dc:	0800d760 	.word	0x0800d760
 80037e0:	0800d770 	.word	0x0800d770
 80037e4:	0800d780 	.word	0x0800d780
 80037e8:	0800d338 	.word	0x0800d338
 80037ec:	0800d34c 	.word	0x0800d34c
 80037f0:	200003f9 	.word	0x200003f9
 80037f4:	2000040a 	.word	0x2000040a
 80037f8:	0800d790 	.word	0x0800d790
			} else if(dilSecim == 1) {
 80037fc:	4b7b      	ldr	r3, [pc, #492]	; (80039ec <menu+0x2198>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d11b      	bne.n	800383c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003804:	4a7a      	ldr	r2, [pc, #488]	; (80039f0 <menu+0x219c>)
 8003806:	2101      	movs	r1, #1
 8003808:	2001      	movs	r0, #1
 800380a:	f7fc ffd5 	bl	80007b8 <lcd_print>
 800380e:	e015      	b.n	800383c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003810:	4b78      	ldr	r3, [pc, #480]	; (80039f4 <menu+0x21a0>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d111      	bne.n	800383c <menu+0x1fe8>
			if(dilSecim == 0){
 8003818:	4b74      	ldr	r3, [pc, #464]	; (80039ec <menu+0x2198>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003820:	4a75      	ldr	r2, [pc, #468]	; (80039f8 <menu+0x21a4>)
 8003822:	2101      	movs	r1, #1
 8003824:	2001      	movs	r0, #1
 8003826:	f7fc ffc7 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 800382a:	4b70      	ldr	r3, [pc, #448]	; (80039ec <menu+0x2198>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d104      	bne.n	800383c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003832:	4a72      	ldr	r2, [pc, #456]	; (80039fc <menu+0x21a8>)
 8003834:	2101      	movs	r1, #1
 8003836:	2001      	movs	r0, #1
 8003838:	f7fc ffbe 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800383c:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <menu+0x21ac>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d113      	bne.n	800386c <menu+0x2018>
			if(dilSecim == 0) {
 8003844:	4b69      	ldr	r3, [pc, #420]	; (80039ec <menu+0x2198>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800384c:	4a6d      	ldr	r2, [pc, #436]	; (8003a04 <menu+0x21b0>)
 800384e:	2101      	movs	r1, #1
 8003850:	2002      	movs	r0, #2
 8003852:	f7fc ffb1 	bl	80007b8 <lcd_print>
 8003856:	e020      	b.n	800389a <menu+0x2046>
			} else if(dilSecim == 1){
 8003858:	4b64      	ldr	r3, [pc, #400]	; (80039ec <menu+0x2198>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11c      	bne.n	800389a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003860:	4a69      	ldr	r2, [pc, #420]	; (8003a08 <menu+0x21b4>)
 8003862:	2101      	movs	r1, #1
 8003864:	2002      	movs	r0, #2
 8003866:	f7fc ffa7 	bl	80007b8 <lcd_print>
 800386a:	e016      	b.n	800389a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800386c:	4b64      	ldr	r3, [pc, #400]	; (8003a00 <menu+0x21ac>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d112      	bne.n	800389a <menu+0x2046>
			if(dilSecim == 0){
 8003874:	4b5d      	ldr	r3, [pc, #372]	; (80039ec <menu+0x2198>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800387c:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <menu+0x21b8>)
 800387e:	2101      	movs	r1, #1
 8003880:	2002      	movs	r0, #2
 8003882:	f7fc ff99 	bl	80007b8 <lcd_print>
 8003886:	e008      	b.n	800389a <menu+0x2046>
			} else if(dilSecim == 1){
 8003888:	4b58      	ldr	r3, [pc, #352]	; (80039ec <menu+0x2198>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d104      	bne.n	800389a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003890:	4a5f      	ldr	r2, [pc, #380]	; (8003a10 <menu+0x21bc>)
 8003892:	2101      	movs	r1, #1
 8003894:	2002      	movs	r0, #2
 8003896:	f7fc ff8f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800389a:	2102      	movs	r1, #2
 800389c:	485d      	ldr	r0, [pc, #372]	; (8003a14 <menu+0x21c0>)
 800389e:	f005 fd6b 	bl	8009378 <HAL_GPIO_ReadPin>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d115      	bne.n	80038d4 <menu+0x2080>
 80038a8:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <menu+0x21c4>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80038b6:	4b52      	ldr	r3, [pc, #328]	; (8003a00 <menu+0x21ac>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <menu+0x21ac>)
 80038c0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80038c2:	4b4f      	ldr	r3, [pc, #316]	; (8003a00 <menu+0x21ac>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d902      	bls.n	80038d0 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80038ca:	4b4d      	ldr	r3, [pc, #308]	; (8003a00 <menu+0x21ac>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038d0:	f001 ff7c 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d4:	2104      	movs	r1, #4
 80038d6:	484f      	ldr	r0, [pc, #316]	; (8003a14 <menu+0x21c0>)
 80038d8:	f005 fd4e 	bl	8009378 <HAL_GPIO_ReadPin>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d115      	bne.n	800390e <menu+0x20ba>
 80038e2:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <menu+0x21c4>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	f083 0301 	eor.w	r3, r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <menu+0x21ac>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <menu+0x21ac>)
 80038fa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <menu+0x21ac>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003904:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <menu+0x21ac>)
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800390a:	f001 ff5f 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2108      	movs	r1, #8
 8003910:	4840      	ldr	r0, [pc, #256]	; (8003a14 <menu+0x21c0>)
 8003912:	f005 fd31 	bl	8009378 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <menu+0x20e4>
 800391c:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <menu+0x21c4>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800392a:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <menu+0x21ac>)
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <menu+0x21c8>)
 8003930:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <menu+0x21cc>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003938:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <menu+0x21d0>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b13      	cmp	r3, #19
 800393e:	f040 80d5 	bne.w	8003aec <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <menu+0x21a0>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d113      	bne.n	8003972 <menu+0x211e>
			if(dilSecim == 0) {
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <menu+0x2198>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003952:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <menu+0x21d4>)
 8003954:	2101      	movs	r1, #1
 8003956:	2001      	movs	r0, #1
 8003958:	f7fc ff2e 	bl	80007b8 <lcd_print>
 800395c:	e01f      	b.n	800399e <menu+0x214a>
			} else if(dilSecim == 1) {
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <menu+0x2198>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d11b      	bne.n	800399e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003966:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <menu+0x21d8>)
 8003968:	2101      	movs	r1, #1
 800396a:	2001      	movs	r0, #1
 800396c:	f7fc ff24 	bl	80007b8 <lcd_print>
 8003970:	e015      	b.n	800399e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <menu+0x21a0>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d111      	bne.n	800399e <menu+0x214a>
			if(dilSecim == 0) {
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <menu+0x2198>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003982:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <menu+0x21dc>)
 8003984:	2101      	movs	r1, #1
 8003986:	2001      	movs	r0, #1
 8003988:	f7fc ff16 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800398c:	4b17      	ldr	r3, [pc, #92]	; (80039ec <menu+0x2198>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d104      	bne.n	800399e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003994:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <menu+0x21e0>)
 8003996:	2101      	movs	r1, #1
 8003998:	2001      	movs	r0, #1
 800399a:	f7fc ff0d 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <menu+0x21e4>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d113      	bne.n	80039ce <menu+0x217a>
			if(dilSecim == 0) {
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <menu+0x2198>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80039ae:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <menu+0x21b0>)
 80039b0:	2101      	movs	r1, #1
 80039b2:	2002      	movs	r0, #2
 80039b4:	f7fc ff00 	bl	80007b8 <lcd_print>
 80039b8:	e049      	b.n	8003a4e <menu+0x21fa>
			} else if(dilSecim == 1) {
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <menu+0x2198>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d145      	bne.n	8003a4e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <menu+0x21b4>)
 80039c4:	2101      	movs	r1, #1
 80039c6:	2002      	movs	r0, #2
 80039c8:	f7fc fef6 	bl	80007b8 <lcd_print>
 80039cc:	e03f      	b.n	8003a4e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80039ce:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <menu+0x21e4>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d13b      	bne.n	8003a4e <menu+0x21fa>
			if(dilSecim == 0) {
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <menu+0x2198>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12e      	bne.n	8003a3c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <menu+0x21b8>)
 80039e0:	2101      	movs	r1, #1
 80039e2:	2002      	movs	r0, #2
 80039e4:	f7fc fee8 	bl	80007b8 <lcd_print>
 80039e8:	e031      	b.n	8003a4e <menu+0x21fa>
 80039ea:	bf00      	nop
 80039ec:	20000419 	.word	0x20000419
 80039f0:	0800d7a4 	.word	0x0800d7a4
 80039f4:	20000407 	.word	0x20000407
 80039f8:	0800d7b4 	.word	0x0800d7b4
 80039fc:	0800d7c8 	.word	0x0800d7c8
 8003a00:	20000408 	.word	0x20000408
 8003a04:	0800d338 	.word	0x0800d338
 8003a08:	0800d34c 	.word	0x0800d34c
 8003a0c:	0800d398 	.word	0x0800d398
 8003a10:	0800d3ac 	.word	0x0800d3ac
 8003a14:	40010800 	.word	0x40010800
 8003a18:	20000427 	.word	0x20000427
 8003a1c:	20000328 	.word	0x20000328
 8003a20:	20000424 	.word	0x20000424
 8003a24:	200003f8 	.word	0x200003f8
 8003a28:	0800d7dc 	.word	0x0800d7dc
 8003a2c:	0800d7f0 	.word	0x0800d7f0
 8003a30:	0800d804 	.word	0x0800d804
 8003a34:	0800d818 	.word	0x0800d818
 8003a38:	20000409 	.word	0x20000409
			} else if(dilSecim == 1) {
 8003a3c:	4b90      	ldr	r3, [pc, #576]	; (8003c80 <menu+0x242c>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d104      	bne.n	8003a4e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003a44:	4a8f      	ldr	r2, [pc, #572]	; (8003c84 <menu+0x2430>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	2002      	movs	r0, #2
 8003a4a:	f7fc feb5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a4e:	2102      	movs	r1, #2
 8003a50:	488d      	ldr	r0, [pc, #564]	; (8003c88 <menu+0x2434>)
 8003a52:	f005 fc91 	bl	8009378 <HAL_GPIO_ReadPin>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d115      	bne.n	8003a88 <menu+0x2234>
 8003a5c:	4b8b      	ldr	r3, [pc, #556]	; (8003c8c <menu+0x2438>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f083 0301 	eor.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003a6a:	4b89      	ldr	r3, [pc, #548]	; (8003c90 <menu+0x243c>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	4b87      	ldr	r3, [pc, #540]	; (8003c90 <menu+0x243c>)
 8003a74:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003a76:	4b86      	ldr	r3, [pc, #536]	; (8003c90 <menu+0x243c>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d902      	bls.n	8003a84 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003a7e:	4b84      	ldr	r3, [pc, #528]	; (8003c90 <menu+0x243c>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a84:	f001 fea2 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a88:	2104      	movs	r1, #4
 8003a8a:	487f      	ldr	r0, [pc, #508]	; (8003c88 <menu+0x2434>)
 8003a8c:	f005 fc74 	bl	8009378 <HAL_GPIO_ReadPin>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d115      	bne.n	8003ac2 <menu+0x226e>
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <menu+0x2438>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	f083 0301 	eor.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003aa4:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <menu+0x243c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	4b78      	ldr	r3, [pc, #480]	; (8003c90 <menu+0x243c>)
 8003aae:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003ab0:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <menu+0x243c>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003ab8:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <menu+0x243c>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003abe:	f001 fe85 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac2:	2108      	movs	r1, #8
 8003ac4:	4870      	ldr	r0, [pc, #448]	; (8003c88 <menu+0x2434>)
 8003ac6:	f005 fc57 	bl	8009378 <HAL_GPIO_ReadPin>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10d      	bne.n	8003aec <menu+0x2298>
 8003ad0:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <menu+0x2438>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f083 0301 	eor.w	r3, r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003ade:	4b6c      	ldr	r3, [pc, #432]	; (8003c90 <menu+0x243c>)
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	4b6c      	ldr	r3, [pc, #432]	; (8003c94 <menu+0x2440>)
 8003ae4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <menu+0x2444>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003aec:	4b6b      	ldr	r3, [pc, #428]	; (8003c9c <menu+0x2448>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b14      	cmp	r3, #20
 8003af2:	f040 80b5 	bne.w	8003c60 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003af6:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <menu+0x244c>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d113      	bne.n	8003b26 <menu+0x22d2>
			if(dilSecim == 0) {
 8003afe:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <menu+0x242c>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003b06:	4a67      	ldr	r2, [pc, #412]	; (8003ca4 <menu+0x2450>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f7fc fe54 	bl	80007b8 <lcd_print>
 8003b10:	e020      	b.n	8003b54 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003b12:	4b5b      	ldr	r3, [pc, #364]	; (8003c80 <menu+0x242c>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d11c      	bne.n	8003b54 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003b1a:	4a63      	ldr	r2, [pc, #396]	; (8003ca8 <menu+0x2454>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f7fc fe4a 	bl	80007b8 <lcd_print>
 8003b24:	e016      	b.n	8003b54 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003b26:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <menu+0x244c>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d112      	bne.n	8003b54 <menu+0x2300>
			if(dilSecim == 0) {
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <menu+0x242c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d105      	bne.n	8003b42 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003b36:	4a5d      	ldr	r2, [pc, #372]	; (8003cac <menu+0x2458>)
 8003b38:	2101      	movs	r1, #1
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f7fc fe3c 	bl	80007b8 <lcd_print>
 8003b40:	e008      	b.n	8003b54 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003b42:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <menu+0x242c>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d104      	bne.n	8003b54 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003b4a:	4a59      	ldr	r2, [pc, #356]	; (8003cb0 <menu+0x245c>)
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f7fc fe32 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003b54:	4b57      	ldr	r3, [pc, #348]	; (8003cb4 <menu+0x2460>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <menu+0x2330>
			if(dilSecim == 0) {
 8003b5c:	4b48      	ldr	r3, [pc, #288]	; (8003c80 <menu+0x242c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003b64:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <menu+0x2464>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	2002      	movs	r0, #2
 8003b6a:	f7fc fe25 	bl	80007b8 <lcd_print>
 8003b6e:	e020      	b.n	8003bb2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <menu+0x242c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d11c      	bne.n	8003bb2 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003b78:	4a50      	ldr	r2, [pc, #320]	; (8003cbc <menu+0x2468>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f7fc fe1b 	bl	80007b8 <lcd_print>
 8003b82:	e016      	b.n	8003bb2 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <menu+0x2460>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d112      	bne.n	8003bb2 <menu+0x235e>
			if(dilSecim == 0) {
 8003b8c:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <menu+0x242c>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003b94:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <menu+0x246c>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	2002      	movs	r0, #2
 8003b9a:	f7fc fe0d 	bl	80007b8 <lcd_print>
 8003b9e:	e008      	b.n	8003bb2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003ba0:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <menu+0x242c>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d104      	bne.n	8003bb2 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003ba8:	4a46      	ldr	r2, [pc, #280]	; (8003cc4 <menu+0x2470>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2002      	movs	r0, #2
 8003bae:	f7fc fe03 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4834      	ldr	r0, [pc, #208]	; (8003c88 <menu+0x2434>)
 8003bb6:	f005 fbdf 	bl	8009378 <HAL_GPIO_ReadPin>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d119      	bne.n	8003bf4 <menu+0x23a0>
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <menu+0x2438>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d012      	beq.n	8003bf4 <menu+0x23a0>
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <menu+0x244c>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d10e      	bne.n	8003bf4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <menu+0x2460>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <menu+0x2460>)
 8003be0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <menu+0x2460>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d902      	bls.n	8003bf0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003bea:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <menu+0x2460>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bf0:	f001 fdec 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	4824      	ldr	r0, [pc, #144]	; (8003c88 <menu+0x2434>)
 8003bf8:	f005 fbbe 	bl	8009378 <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d119      	bne.n	8003c36 <menu+0x23e2>
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <menu+0x2438>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	f083 0301 	eor.w	r3, r3, #1
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <menu+0x23e2>
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <menu+0x244c>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d10e      	bne.n	8003c36 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <menu+0x2460>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <menu+0x2460>)
 8003c22:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003c24:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <menu+0x2460>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <menu+0x2460>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c32:	f001 fdcb 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c36:	2108      	movs	r1, #8
 8003c38:	4813      	ldr	r0, [pc, #76]	; (8003c88 <menu+0x2434>)
 8003c3a:	f005 fb9d 	bl	8009378 <HAL_GPIO_ReadPin>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10d      	bne.n	8003c60 <menu+0x240c>
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <menu+0x2438>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f083 0301 	eor.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <menu+0x2460>)
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <menu+0x2440>)
 8003c58:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <menu+0x2444>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <menu+0x2448>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b15      	cmp	r3, #21
 8003c66:	f040 80c2 	bne.w	8003dee <menu+0x259a>
		if(dilSecim == 0) {
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <menu+0x242c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d12c      	bne.n	8003ccc <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003c72:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <menu+0x2474>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	2001      	movs	r0, #1
 8003c78:	f7fc fd9e 	bl	80007b8 <lcd_print>
 8003c7c:	e02f      	b.n	8003cde <menu+0x248a>
 8003c7e:	bf00      	nop
 8003c80:	20000419 	.word	0x20000419
 8003c84:	0800d3ac 	.word	0x0800d3ac
 8003c88:	40010800 	.word	0x40010800
 8003c8c:	20000427 	.word	0x20000427
 8003c90:	20000409 	.word	0x20000409
 8003c94:	20000328 	.word	0x20000328
 8003c98:	20000424 	.word	0x20000424
 8003c9c:	200003f8 	.word	0x200003f8
 8003ca0:	20000407 	.word	0x20000407
 8003ca4:	0800d82c 	.word	0x0800d82c
 8003ca8:	0800d840 	.word	0x0800d840
 8003cac:	0800d854 	.word	0x0800d854
 8003cb0:	0800d868 	.word	0x0800d868
 8003cb4:	2000040a 	.word	0x2000040a
 8003cb8:	0800d87c 	.word	0x0800d87c
 8003cbc:	0800d890 	.word	0x0800d890
 8003cc0:	0800d8a0 	.word	0x0800d8a0
 8003cc4:	0800d8b4 	.word	0x0800d8b4
 8003cc8:	0800d8c4 	.word	0x0800d8c4
		} else if(dilSecim == 1) {
 8003ccc:	4b9c      	ldr	r3, [pc, #624]	; (8003f40 <menu+0x26ec>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d104      	bne.n	8003cde <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003cd4:	4a9b      	ldr	r2, [pc, #620]	; (8003f44 <menu+0x26f0>)
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7fc fd6d 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003cde:	4b9a      	ldr	r3, [pc, #616]	; (8003f48 <menu+0x26f4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d112      	bne.n	8003d0c <menu+0x24b8>
			if(dilSecim == 0) {
 8003ce6:	4b96      	ldr	r3, [pc, #600]	; (8003f40 <menu+0x26ec>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003cee:	4a97      	ldr	r2, [pc, #604]	; (8003f4c <menu+0x26f8>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f7fc fd60 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003cf8:	4b91      	ldr	r3, [pc, #580]	; (8003f40 <menu+0x26ec>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11c      	bne.n	8003d3a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003d00:	4a93      	ldr	r2, [pc, #588]	; (8003f50 <menu+0x26fc>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	2002      	movs	r0, #2
 8003d06:	f7fc fd57 	bl	80007b8 <lcd_print>
 8003d0a:	e016      	b.n	8003d3a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003d0c:	4b8e      	ldr	r3, [pc, #568]	; (8003f48 <menu+0x26f4>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d112      	bne.n	8003d3a <menu+0x24e6>
			if(dilSecim == 0) {
 8003d14:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <menu+0x26ec>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003d1c:	4a8d      	ldr	r2, [pc, #564]	; (8003f54 <menu+0x2700>)
 8003d1e:	2101      	movs	r1, #1
 8003d20:	2002      	movs	r0, #2
 8003d22:	f7fc fd49 	bl	80007b8 <lcd_print>
 8003d26:	e008      	b.n	8003d3a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003d28:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <menu+0x26ec>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d104      	bne.n	8003d3a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003d30:	4a89      	ldr	r2, [pc, #548]	; (8003f58 <menu+0x2704>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	2002      	movs	r0, #2
 8003d36:	f7fc fd3f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4887      	ldr	r0, [pc, #540]	; (8003f5c <menu+0x2708>)
 8003d3e:	f005 fb1b 	bl	8009378 <HAL_GPIO_ReadPin>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d115      	bne.n	8003d74 <menu+0x2520>
 8003d48:	4b85      	ldr	r3, [pc, #532]	; (8003f60 <menu+0x270c>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003d56:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <menu+0x26f4>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4b7a      	ldr	r3, [pc, #488]	; (8003f48 <menu+0x26f4>)
 8003d60:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003d62:	4b79      	ldr	r3, [pc, #484]	; (8003f48 <menu+0x26f4>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d902      	bls.n	8003d70 <menu+0x251c>
				platformSilindirTipi = 0;
 8003d6a:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <menu+0x26f4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d70:	f001 fd2c 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d74:	2104      	movs	r1, #4
 8003d76:	4879      	ldr	r0, [pc, #484]	; (8003f5c <menu+0x2708>)
 8003d78:	f005 fafe 	bl	8009378 <HAL_GPIO_ReadPin>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d115      	bne.n	8003dae <menu+0x255a>
 8003d82:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <menu+0x270c>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	f083 0301 	eor.w	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00e      	beq.n	8003dae <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003d90:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <menu+0x26f4>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b6b      	ldr	r3, [pc, #428]	; (8003f48 <menu+0x26f4>)
 8003d9a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003d9c:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <menu+0x26f4>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003da4:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <menu+0x26f4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003daa:	f001 fd0f 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dae:	2108      	movs	r1, #8
 8003db0:	486a      	ldr	r0, [pc, #424]	; (8003f5c <menu+0x2708>)
 8003db2:	f005 fae1 	bl	8009378 <HAL_GPIO_ReadPin>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d118      	bne.n	8003dee <menu+0x259a>
 8003dbc:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <menu+0x270c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	f083 0301 	eor.w	r3, r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <menu+0x26f4>)
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <menu+0x2710>)
 8003dd0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <menu+0x26f4>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d106      	bne.n	8003de8 <menu+0x2594>
				altLimit = 1;
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <menu+0x2714>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003de0:	4b61      	ldr	r3, [pc, #388]	; (8003f68 <menu+0x2714>)
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <menu+0x2710>)
 8003de6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003de8:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <menu+0x2718>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003dee:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <menu+0x271c>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b16      	cmp	r3, #22
 8003df4:	f040 8081 	bne.w	8003efa <menu+0x26a6>
		if(dilSecim == 0) {
 8003df8:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <menu+0x26ec>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003e00:	4a5c      	ldr	r2, [pc, #368]	; (8003f74 <menu+0x2720>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	2001      	movs	r0, #1
 8003e06:	f7fc fcd7 	bl	80007b8 <lcd_print>
 8003e0a:	e008      	b.n	8003e1e <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003e0c:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <menu+0x26ec>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d104      	bne.n	8003e1e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003e14:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <menu+0x2724>)
 8003e16:	2101      	movs	r1, #1
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f7fc fccd 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003e1e:	4b48      	ldr	r3, [pc, #288]	; (8003f40 <menu+0x26ec>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e26:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <menu+0x2728>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	2002      	movs	r0, #2
 8003e2c:	f7fc fcc4 	bl	80007b8 <lcd_print>
 8003e30:	e008      	b.n	8003e44 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003e32:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <menu+0x26ec>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d104      	bne.n	8003e44 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003e3a:	4a51      	ldr	r2, [pc, #324]	; (8003f80 <menu+0x272c>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	2002      	movs	r0, #2
 8003e40:	f7fc fcba 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003e44:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <menu+0x2730>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	220a      	movs	r2, #10
 8003e4a:	494f      	ldr	r1, [pc, #316]	; (8003f88 <menu+0x2734>)
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f008 fabf 	bl	800c3d0 <itoa>
		lcd_print(2,16,snum);
 8003e52:	4a4d      	ldr	r2, [pc, #308]	; (8003f88 <menu+0x2734>)
 8003e54:	2110      	movs	r1, #16
 8003e56:	2002      	movs	r0, #2
 8003e58:	f7fc fcae 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	483f      	ldr	r0, [pc, #252]	; (8003f5c <menu+0x2708>)
 8003e60:	f005 fa8a 	bl	8009378 <HAL_GPIO_ReadPin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d115      	bne.n	8003e96 <menu+0x2642>
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <menu+0x270c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f083 0301 	eor.w	r3, r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003e78:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <menu+0x2730>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <menu+0x2730>)
 8003e82:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <menu+0x2730>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d902      	bls.n	8003e92 <menu+0x263e>
				yukariValfTmr = 0;
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <menu+0x2730>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e92:	f001 fc9b 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e96:	2104      	movs	r1, #4
 8003e98:	4830      	ldr	r0, [pc, #192]	; (8003f5c <menu+0x2708>)
 8003e9a:	f005 fa6d 	bl	8009378 <HAL_GPIO_ReadPin>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d115      	bne.n	8003ed0 <menu+0x267c>
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <menu+0x270c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00e      	beq.n	8003ed0 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003eb2:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <menu+0x2730>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <menu+0x2730>)
 8003ebc:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <menu+0x2730>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <menu+0x2678>
		   		yukariValfTmr = 5;
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <menu+0x2730>)
 8003ec8:	2205      	movs	r2, #5
 8003eca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ecc:	f001 fc7e 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed0:	2108      	movs	r1, #8
 8003ed2:	4822      	ldr	r0, [pc, #136]	; (8003f5c <menu+0x2708>)
 8003ed4:	f005 fa50 	bl	8009378 <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10d      	bne.n	8003efa <menu+0x26a6>
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <menu+0x270c>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	f083 0301 	eor.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d006      	beq.n	8003efa <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <menu+0x2730>)
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <menu+0x2710>)
 8003ef2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <menu+0x2718>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <menu+0x271c>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b17      	cmp	r3, #23
 8003f00:	f040 80ac 	bne.w	800405c <menu+0x2808>
		if(dilSecim == 0) {
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <menu+0x26ec>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <menu+0x2738>)
 8003f0e:	2101      	movs	r1, #1
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7fc fc51 	bl	80007b8 <lcd_print>
 8003f16:	e008      	b.n	8003f2a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <menu+0x26ec>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d104      	bne.n	8003f2a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <menu+0x273c>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	2001      	movs	r0, #1
 8003f26:	f7fc fc47 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <menu+0x26ec>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d130      	bne.n	8003f94 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <menu+0x2728>)
 8003f34:	2101      	movs	r1, #1
 8003f36:	2002      	movs	r0, #2
 8003f38:	f7fc fc3e 	bl	80007b8 <lcd_print>
 8003f3c:	e033      	b.n	8003fa6 <menu+0x2752>
 8003f3e:	bf00      	nop
 8003f40:	20000419 	.word	0x20000419
 8003f44:	0800d8d8 	.word	0x0800d8d8
 8003f48:	2000040b 	.word	0x2000040b
 8003f4c:	0800d87c 	.word	0x0800d87c
 8003f50:	0800d890 	.word	0x0800d890
 8003f54:	0800d8a0 	.word	0x0800d8a0
 8003f58:	0800d8b4 	.word	0x0800d8b4
 8003f5c:	40010800 	.word	0x40010800
 8003f60:	20000427 	.word	0x20000427
 8003f64:	20000328 	.word	0x20000328
 8003f68:	200003fe 	.word	0x200003fe
 8003f6c:	20000424 	.word	0x20000424
 8003f70:	200003f8 	.word	0x200003f8
 8003f74:	0800d8e8 	.word	0x0800d8e8
 8003f78:	0800d8fc 	.word	0x0800d8fc
 8003f7c:	0800d59c 	.word	0x0800d59c
 8003f80:	0800d910 	.word	0x0800d910
 8003f84:	2000040c 	.word	0x2000040c
 8003f88:	20000398 	.word	0x20000398
 8003f8c:	0800d920 	.word	0x0800d920
 8003f90:	0800d934 	.word	0x0800d934
			} else if(dilSecim == 1) {
 8003f94:	4b98      	ldr	r3, [pc, #608]	; (80041f8 <menu+0x29a4>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d104      	bne.n	8003fa6 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003f9c:	4a97      	ldr	r2, [pc, #604]	; (80041fc <menu+0x29a8>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f7fc fc09 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003fa6:	4b96      	ldr	r3, [pc, #600]	; (8004200 <menu+0x29ac>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	220a      	movs	r2, #10
 8003fac:	4995      	ldr	r1, [pc, #596]	; (8004204 <menu+0x29b0>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f008 fa0e 	bl	800c3d0 <itoa>
		lcd_print(2,16,snum);
 8003fb4:	4a93      	ldr	r2, [pc, #588]	; (8004204 <menu+0x29b0>)
 8003fb6:	2110      	movs	r1, #16
 8003fb8:	2002      	movs	r0, #2
 8003fba:	f7fc fbfd 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4891      	ldr	r0, [pc, #580]	; (8004208 <menu+0x29b4>)
 8003fc2:	f005 f9d9 	bl	8009378 <HAL_GPIO_ReadPin>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d115      	bne.n	8003ff8 <menu+0x27a4>
 8003fcc:	4b8f      	ldr	r3, [pc, #572]	; (800420c <menu+0x29b8>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f083 0301 	eor.w	r3, r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003fda:	4b89      	ldr	r3, [pc, #548]	; (8004200 <menu+0x29ac>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4b87      	ldr	r3, [pc, #540]	; (8004200 <menu+0x29ac>)
 8003fe4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003fe6:	4b86      	ldr	r3, [pc, #536]	; (8004200 <menu+0x29ac>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d902      	bls.n	8003ff4 <menu+0x27a0>
				asagiValfTmr = 0;
 8003fee:	4b84      	ldr	r3, [pc, #528]	; (8004200 <menu+0x29ac>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ff4:	f001 fbea 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	4883      	ldr	r0, [pc, #524]	; (8004208 <menu+0x29b4>)
 8003ffc:	f005 f9bc 	bl	8009378 <HAL_GPIO_ReadPin>
 8004000:	4603      	mov	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d115      	bne.n	8004032 <menu+0x27de>
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <menu+0x29b8>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00e      	beq.n	8004032 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8004014:	4b7a      	ldr	r3, [pc, #488]	; (8004200 <menu+0x29ac>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b78      	ldr	r3, [pc, #480]	; (8004200 <menu+0x29ac>)
 800401e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8004020:	4b77      	ldr	r3, [pc, #476]	; (8004200 <menu+0x29ac>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b06      	cmp	r3, #6
 8004026:	d902      	bls.n	800402e <menu+0x27da>
		   		asagiValfTmr = 5;
 8004028:	4b75      	ldr	r3, [pc, #468]	; (8004200 <menu+0x29ac>)
 800402a:	2205      	movs	r2, #5
 800402c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800402e:	f001 fbcd 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004032:	2108      	movs	r1, #8
 8004034:	4874      	ldr	r0, [pc, #464]	; (8004208 <menu+0x29b4>)
 8004036:	f005 f99f 	bl	8009378 <HAL_GPIO_ReadPin>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10d      	bne.n	800405c <menu+0x2808>
 8004040:	4b72      	ldr	r3, [pc, #456]	; (800420c <menu+0x29b8>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f083 0301 	eor.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <menu+0x29ac>)
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <menu+0x29bc>)
 8004054:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8004056:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <menu+0x29c0>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800405c:	4b6e      	ldr	r3, [pc, #440]	; (8004218 <menu+0x29c4>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b18      	cmp	r3, #24
 8004062:	f040 809d 	bne.w	80041a0 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <menu+0x29c8>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d113      	bne.n	8004096 <menu+0x2842>
			if(dilSecim == 0) {
 800406e:	4b62      	ldr	r3, [pc, #392]	; (80041f8 <menu+0x29a4>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d105      	bne.n	8004082 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8004076:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <menu+0x29cc>)
 8004078:	2101      	movs	r1, #1
 800407a:	2001      	movs	r0, #1
 800407c:	f7fc fb9c 	bl	80007b8 <lcd_print>
 8004080:	e020      	b.n	80040c4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <menu+0x29a4>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d11c      	bne.n	80040c4 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800408a:	4a66      	ldr	r2, [pc, #408]	; (8004224 <menu+0x29d0>)
 800408c:	2101      	movs	r1, #1
 800408e:	2001      	movs	r0, #1
 8004090:	f7fc fb92 	bl	80007b8 <lcd_print>
 8004094:	e016      	b.n	80040c4 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8004096:	4b61      	ldr	r3, [pc, #388]	; (800421c <menu+0x29c8>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d112      	bne.n	80040c4 <menu+0x2870>
			if(dilSecim == 0) {
 800409e:	4b56      	ldr	r3, [pc, #344]	; (80041f8 <menu+0x29a4>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80040a6:	4a60      	ldr	r2, [pc, #384]	; (8004228 <menu+0x29d4>)
 80040a8:	2101      	movs	r1, #1
 80040aa:	2001      	movs	r0, #1
 80040ac:	f7fc fb84 	bl	80007b8 <lcd_print>
 80040b0:	e008      	b.n	80040c4 <menu+0x2870>
			} else if(dilSecim == 1) {
 80040b2:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <menu+0x29a4>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d104      	bne.n	80040c4 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80040ba:	4a5c      	ldr	r2, [pc, #368]	; (800422c <menu+0x29d8>)
 80040bc:	2101      	movs	r1, #1
 80040be:	2001      	movs	r0, #1
 80040c0:	f7fc fb7a 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <menu+0x29a4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <menu+0x29dc>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	2002      	movs	r0, #2
 80040d2:	f7fc fb71 	bl	80007b8 <lcd_print>
 80040d6:	e008      	b.n	80040ea <menu+0x2896>
			} else if(dilSecim == 1) {
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <menu+0x29a4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d104      	bne.n	80040ea <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80040e0:	4a46      	ldr	r2, [pc, #280]	; (80041fc <menu+0x29a8>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f7fc fb67 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80040ea:	4b52      	ldr	r3, [pc, #328]	; (8004234 <menu+0x29e0>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	220a      	movs	r2, #10
 80040f0:	4944      	ldr	r1, [pc, #272]	; (8004204 <menu+0x29b0>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f008 f96c 	bl	800c3d0 <itoa>
		lcd_print(2, 16, snum);
 80040f8:	4a42      	ldr	r2, [pc, #264]	; (8004204 <menu+0x29b0>)
 80040fa:	2110      	movs	r1, #16
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fc fb5b 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004102:	2102      	movs	r1, #2
 8004104:	4840      	ldr	r0, [pc, #256]	; (8004208 <menu+0x29b4>)
 8004106:	f005 f937 	bl	8009378 <HAL_GPIO_ReadPin>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d115      	bne.n	800413c <menu+0x28e8>
 8004110:	4b3e      	ldr	r3, [pc, #248]	; (800420c <menu+0x29b8>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	f083 0301 	eor.w	r3, r3, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800411e:	4b45      	ldr	r3, [pc, #276]	; (8004234 <menu+0x29e0>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4b43      	ldr	r3, [pc, #268]	; (8004234 <menu+0x29e0>)
 8004128:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <menu+0x29e0>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d902      	bls.n	8004138 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8004132:	4b40      	ldr	r3, [pc, #256]	; (8004234 <menu+0x29e0>)
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004138:	f001 fb48 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800413c:	2104      	movs	r1, #4
 800413e:	4832      	ldr	r0, [pc, #200]	; (8004208 <menu+0x29b4>)
 8004140:	f005 f91a 	bl	8009378 <HAL_GPIO_ReadPin>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d115      	bne.n	8004176 <menu+0x2922>
 800414a:	4b30      	ldr	r3, [pc, #192]	; (800420c <menu+0x29b8>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	f083 0301 	eor.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <menu+0x29e0>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	3b01      	subs	r3, #1
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b34      	ldr	r3, [pc, #208]	; (8004234 <menu+0x29e0>)
 8004162:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004164:	4b33      	ldr	r3, [pc, #204]	; (8004234 <menu+0x29e0>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b06      	cmp	r3, #6
 800416a:	d902      	bls.n	8004172 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 800416c:	4b31      	ldr	r3, [pc, #196]	; (8004234 <menu+0x29e0>)
 800416e:	2205      	movs	r2, #5
 8004170:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004172:	f001 fb2b 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004176:	2108      	movs	r1, #8
 8004178:	4823      	ldr	r0, [pc, #140]	; (8004208 <menu+0x29b4>)
 800417a:	f005 f8fd 	bl	8009378 <HAL_GPIO_ReadPin>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10d      	bne.n	80041a0 <menu+0x294c>
 8004184:	4b21      	ldr	r3, [pc, #132]	; (800420c <menu+0x29b8>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f083 0301 	eor.w	r3, r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d006      	beq.n	80041a0 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8004192:	4b28      	ldr	r3, [pc, #160]	; (8004234 <menu+0x29e0>)
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <menu+0x29bc>)
 8004198:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <menu+0x29c0>)
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <menu+0x29c4>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b19      	cmp	r3, #25
 80041a6:	f040 80c4 	bne.w	8004332 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <menu+0x29c8>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d113      	bne.n	80041da <menu+0x2986>
			if(dilSecim == 0) {
 80041b2:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <menu+0x29a4>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <menu+0x29e4>)
 80041bc:	2101      	movs	r1, #1
 80041be:	2001      	movs	r0, #1
 80041c0:	f7fc fafa 	bl	80007b8 <lcd_print>
 80041c4:	e047      	b.n	8004256 <menu+0x2a02>
			} else if(dilSecim == 1) {
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <menu+0x29a4>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d143      	bne.n	8004256 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80041ce:	4a1b      	ldr	r2, [pc, #108]	; (800423c <menu+0x29e8>)
 80041d0:	2101      	movs	r1, #1
 80041d2:	2001      	movs	r0, #1
 80041d4:	f7fc faf0 	bl	80007b8 <lcd_print>
 80041d8:	e03d      	b.n	8004256 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <menu+0x29c8>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d139      	bne.n	8004256 <menu+0x2a02>
			if(dilSecim == 0) {
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <menu+0x29a4>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d12c      	bne.n	8004244 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <menu+0x29ec>)
 80041ec:	2101      	movs	r1, #1
 80041ee:	2001      	movs	r0, #1
 80041f0:	f7fc fae2 	bl	80007b8 <lcd_print>
 80041f4:	e02f      	b.n	8004256 <menu+0x2a02>
 80041f6:	bf00      	nop
 80041f8:	20000419 	.word	0x20000419
 80041fc:	0800d910 	.word	0x0800d910
 8004200:	2000040d 	.word	0x2000040d
 8004204:	20000398 	.word	0x20000398
 8004208:	40010800 	.word	0x40010800
 800420c:	20000427 	.word	0x20000427
 8004210:	20000328 	.word	0x20000328
 8004214:	20000424 	.word	0x20000424
 8004218:	200003f8 	.word	0x200003f8
 800421c:	20000407 	.word	0x20000407
 8004220:	0800d948 	.word	0x0800d948
 8004224:	0800d95c 	.word	0x0800d95c
 8004228:	0800d970 	.word	0x0800d970
 800422c:	0800d984 	.word	0x0800d984
 8004230:	0800d59c 	.word	0x0800d59c
 8004234:	2000040e 	.word	0x2000040e
 8004238:	0800d998 	.word	0x0800d998
 800423c:	0800d9ac 	.word	0x0800d9ac
 8004240:	0800d9c0 	.word	0x0800d9c0
			} else if(dilSecim == 1) {
 8004244:	4b73      	ldr	r3, [pc, #460]	; (8004414 <menu+0x2bc0>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d104      	bne.n	8004256 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 800424c:	4a72      	ldr	r2, [pc, #456]	; (8004418 <menu+0x2bc4>)
 800424e:	2101      	movs	r1, #1
 8004250:	2001      	movs	r0, #1
 8004252:	f7fc fab1 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8004256:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <menu+0x2bc0>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 800425e:	4a6f      	ldr	r2, [pc, #444]	; (800441c <menu+0x2bc8>)
 8004260:	2101      	movs	r1, #1
 8004262:	2002      	movs	r0, #2
 8004264:	f7fc faa8 	bl	80007b8 <lcd_print>
 8004268:	e008      	b.n	800427c <menu+0x2a28>
			} else if(dilSecim == 1) {
 800426a:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <menu+0x2bc0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d104      	bne.n	800427c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8004272:	4a6b      	ldr	r2, [pc, #428]	; (8004420 <menu+0x2bcc>)
 8004274:	2101      	movs	r1, #1
 8004276:	2002      	movs	r0, #2
 8004278:	f7fc fa9e 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800427c:	4b69      	ldr	r3, [pc, #420]	; (8004424 <menu+0x2bd0>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	220a      	movs	r2, #10
 8004282:	4969      	ldr	r1, [pc, #420]	; (8004428 <menu+0x2bd4>)
 8004284:	4618      	mov	r0, r3
 8004286:	f008 f8a3 	bl	800c3d0 <itoa>
		lcd_print(2,16,snum);
 800428a:	4a67      	ldr	r2, [pc, #412]	; (8004428 <menu+0x2bd4>)
 800428c:	2110      	movs	r1, #16
 800428e:	2002      	movs	r0, #2
 8004290:	f7fc fa92 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004294:	2102      	movs	r1, #2
 8004296:	4865      	ldr	r0, [pc, #404]	; (800442c <menu+0x2bd8>)
 8004298:	f005 f86e 	bl	8009378 <HAL_GPIO_ReadPin>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d115      	bne.n	80042ce <menu+0x2a7a>
 80042a2:	4b63      	ldr	r3, [pc, #396]	; (8004430 <menu+0x2bdc>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	f083 0301 	eor.w	r3, r3, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80042b0:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <menu+0x2bd0>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	4b5a      	ldr	r3, [pc, #360]	; (8004424 <menu+0x2bd0>)
 80042ba:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <menu+0x2bd0>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	d902      	bls.n	80042ca <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 80042c4:	4b57      	ldr	r3, [pc, #348]	; (8004424 <menu+0x2bd0>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042ca:	f001 fa7f 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ce:	2104      	movs	r1, #4
 80042d0:	4856      	ldr	r0, [pc, #344]	; (800442c <menu+0x2bd8>)
 80042d2:	f005 f851 	bl	8009378 <HAL_GPIO_ReadPin>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d115      	bne.n	8004308 <menu+0x2ab4>
 80042dc:	4b54      	ldr	r3, [pc, #336]	; (8004430 <menu+0x2bdc>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f083 0301 	eor.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00e      	beq.n	8004308 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80042ea:	4b4e      	ldr	r3, [pc, #312]	; (8004424 <menu+0x2bd0>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b4c      	ldr	r3, [pc, #304]	; (8004424 <menu+0x2bd0>)
 80042f4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80042f6:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <menu+0x2bd0>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d902      	bls.n	8004304 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80042fe:	4b49      	ldr	r3, [pc, #292]	; (8004424 <menu+0x2bd0>)
 8004300:	2205      	movs	r2, #5
 8004302:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004304:	f001 fa62 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004308:	2108      	movs	r1, #8
 800430a:	4848      	ldr	r0, [pc, #288]	; (800442c <menu+0x2bd8>)
 800430c:	f005 f834 	bl	8009378 <HAL_GPIO_ReadPin>
 8004310:	4603      	mov	r3, r0
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10d      	bne.n	8004332 <menu+0x2ade>
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <menu+0x2bdc>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	f083 0301 	eor.w	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004324:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <menu+0x2bd0>)
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	4b42      	ldr	r3, [pc, #264]	; (8004434 <menu+0x2be0>)
 800432a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <menu+0x2be4>)
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004332:	4b42      	ldr	r3, [pc, #264]	; (800443c <menu+0x2be8>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b1a      	cmp	r3, #26
 8004338:	f040 80ec 	bne.w	8004514 <menu+0x2cc0>
		if(dilSecim == 0) {
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <menu+0x2bc0>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004344:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <menu+0x2bec>)
 8004346:	2101      	movs	r1, #1
 8004348:	2001      	movs	r0, #1
 800434a:	f7fc fa35 	bl	80007b8 <lcd_print>
 800434e:	e008      	b.n	8004362 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8004350:	4b30      	ldr	r3, [pc, #192]	; (8004414 <menu+0x2bc0>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d104      	bne.n	8004362 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8004358:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <menu+0x2bf0>)
 800435a:	2101      	movs	r1, #1
 800435c:	2001      	movs	r0, #1
 800435e:	f7fc fa2b 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <menu+0x2bf4>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b63      	cmp	r3, #99	; 0x63
 8004368:	d91e      	bls.n	80043a8 <menu+0x2b54>
			if(dilSecim == 0) {
 800436a:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <menu+0x2bc0>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8004372:	4a2a      	ldr	r2, [pc, #168]	; (800441c <menu+0x2bc8>)
 8004374:	2101      	movs	r1, #1
 8004376:	2002      	movs	r0, #2
 8004378:	f7fc fa1e 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <menu+0x2bc0>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d104      	bne.n	800438e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <menu+0x2bcc>)
 8004386:	2101      	movs	r1, #1
 8004388:	2002      	movs	r0, #2
 800438a:	f7fc fa15 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800438e:	4b2e      	ldr	r3, [pc, #184]	; (8004448 <menu+0x2bf4>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	220a      	movs	r2, #10
 8004394:	4924      	ldr	r1, [pc, #144]	; (8004428 <menu+0x2bd4>)
 8004396:	4618      	mov	r0, r3
 8004398:	f008 f81a 	bl	800c3d0 <itoa>
			lcd_print(2,14,snum);
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <menu+0x2bd4>)
 800439e:	210e      	movs	r1, #14
 80043a0:	2002      	movs	r0, #2
 80043a2:	f7fc fa09 	bl	80007b8 <lcd_print>
 80043a6:	e066      	b.n	8004476 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <menu+0x2bf4>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d923      	bls.n	80043f8 <menu+0x2ba4>
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <menu+0x2bf4>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b63      	cmp	r3, #99	; 0x63
 80043b6:	d81f      	bhi.n	80043f8 <menu+0x2ba4>
			if(dilSecim == 0) {
 80043b8:	4b16      	ldr	r3, [pc, #88]	; (8004414 <menu+0x2bc0>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <menu+0x2bc8>)
 80043c2:	2101      	movs	r1, #1
 80043c4:	2002      	movs	r0, #2
 80043c6:	f7fc f9f7 	bl	80007b8 <lcd_print>
 80043ca:	e008      	b.n	80043de <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <menu+0x2bc0>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d104      	bne.n	80043de <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <menu+0x2bcc>)
 80043d6:	2101      	movs	r1, #1
 80043d8:	2002      	movs	r0, #2
 80043da:	f7fc f9ed 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <menu+0x2bf4>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	220a      	movs	r2, #10
 80043e4:	4910      	ldr	r1, [pc, #64]	; (8004428 <menu+0x2bd4>)
 80043e6:	4618      	mov	r0, r3
 80043e8:	f007 fff2 	bl	800c3d0 <itoa>
			lcd_print(2, 15, snum);
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <menu+0x2bd4>)
 80043ee:	210f      	movs	r1, #15
 80043f0:	2002      	movs	r0, #2
 80043f2:	f7fc f9e1 	bl	80007b8 <lcd_print>
 80043f6:	e03e      	b.n	8004476 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <menu+0x2bf4>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	d83a      	bhi.n	8004476 <menu+0x2c22>
			if(dilSecim == 0) {
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <menu+0x2bc0>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d121      	bne.n	800444c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <menu+0x2bc8>)
 800440a:	2101      	movs	r1, #1
 800440c:	2002      	movs	r0, #2
 800440e:	f7fc f9d3 	bl	80007b8 <lcd_print>
 8004412:	e024      	b.n	800445e <menu+0x2c0a>
 8004414:	20000419 	.word	0x20000419
 8004418:	0800d9d4 	.word	0x0800d9d4
 800441c:	0800d59c 	.word	0x0800d59c
 8004420:	0800d910 	.word	0x0800d910
 8004424:	2000040f 	.word	0x2000040f
 8004428:	20000398 	.word	0x20000398
 800442c:	40010800 	.word	0x40010800
 8004430:	20000427 	.word	0x20000427
 8004434:	20000328 	.word	0x20000328
 8004438:	20000424 	.word	0x20000424
 800443c:	200003f8 	.word	0x200003f8
 8004440:	0800d9e8 	.word	0x0800d9e8
 8004444:	0800d9fc 	.word	0x0800d9fc
 8004448:	20000410 	.word	0x20000410
			} else if(dilSecim == 1) {
 800444c:	4b8f      	ldr	r3, [pc, #572]	; (800468c <menu+0x2e38>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d104      	bne.n	800445e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004454:	4a8e      	ldr	r2, [pc, #568]	; (8004690 <menu+0x2e3c>)
 8004456:	2101      	movs	r1, #1
 8004458:	2002      	movs	r0, #2
 800445a:	f7fc f9ad 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800445e:	4b8d      	ldr	r3, [pc, #564]	; (8004694 <menu+0x2e40>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	220a      	movs	r2, #10
 8004464:	498c      	ldr	r1, [pc, #560]	; (8004698 <menu+0x2e44>)
 8004466:	4618      	mov	r0, r3
 8004468:	f007 ffb2 	bl	800c3d0 <itoa>
			lcd_print(2, 16, snum);
 800446c:	4a8a      	ldr	r2, [pc, #552]	; (8004698 <menu+0x2e44>)
 800446e:	2110      	movs	r1, #16
 8004470:	2002      	movs	r0, #2
 8004472:	f7fc f9a1 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004476:	2102      	movs	r1, #2
 8004478:	4888      	ldr	r0, [pc, #544]	; (800469c <menu+0x2e48>)
 800447a:	f004 ff7d 	bl	8009378 <HAL_GPIO_ReadPin>
 800447e:	4603      	mov	r3, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d115      	bne.n	80044b0 <menu+0x2c5c>
 8004484:	4b86      	ldr	r3, [pc, #536]	; (80046a0 <menu+0x2e4c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00e      	beq.n	80044b0 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004492:	4b80      	ldr	r3, [pc, #512]	; (8004694 <menu+0x2e40>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b7e      	ldr	r3, [pc, #504]	; (8004694 <menu+0x2e40>)
 800449c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800449e:	4b7d      	ldr	r3, [pc, #500]	; (8004694 <menu+0x2e40>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2bb4      	cmp	r3, #180	; 0xb4
 80044a4:	d902      	bls.n	80044ac <menu+0x2c58>
				makineCalismaTmr = 0;
 80044a6:	4b7b      	ldr	r3, [pc, #492]	; (8004694 <menu+0x2e40>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044ac:	f001 f98e 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b0:	2104      	movs	r1, #4
 80044b2:	487a      	ldr	r0, [pc, #488]	; (800469c <menu+0x2e48>)
 80044b4:	f004 ff60 	bl	8009378 <HAL_GPIO_ReadPin>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d115      	bne.n	80044ea <menu+0x2c96>
 80044be:	4b78      	ldr	r3, [pc, #480]	; (80046a0 <menu+0x2e4c>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f083 0301 	eor.w	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00e      	beq.n	80044ea <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80044cc:	4b71      	ldr	r3, [pc, #452]	; (8004694 <menu+0x2e40>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	4b6f      	ldr	r3, [pc, #444]	; (8004694 <menu+0x2e40>)
 80044d6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80044d8:	4b6e      	ldr	r3, [pc, #440]	; (8004694 <menu+0x2e40>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2bb5      	cmp	r3, #181	; 0xb5
 80044de:	d902      	bls.n	80044e6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80044e0:	4b6c      	ldr	r3, [pc, #432]	; (8004694 <menu+0x2e40>)
 80044e2:	22b4      	movs	r2, #180	; 0xb4
 80044e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044e6:	f001 f971 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ea:	2108      	movs	r1, #8
 80044ec:	486b      	ldr	r0, [pc, #428]	; (800469c <menu+0x2e48>)
 80044ee:	f004 ff43 	bl	8009378 <HAL_GPIO_ReadPin>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10d      	bne.n	8004514 <menu+0x2cc0>
 80044f8:	4b69      	ldr	r3, [pc, #420]	; (80046a0 <menu+0x2e4c>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f083 0301 	eor.w	r3, r3, #1
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <menu+0x2e40>)
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <menu+0x2e50>)
 800450c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800450e:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <menu+0x2e54>)
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004514:	4b65      	ldr	r3, [pc, #404]	; (80046ac <menu+0x2e58>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b1b      	cmp	r3, #27
 800451a:	f040 8083 	bne.w	8004624 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800451e:	4a64      	ldr	r2, [pc, #400]	; (80046b0 <menu+0x2e5c>)
 8004520:	2101      	movs	r1, #1
 8004522:	2001      	movs	r0, #1
 8004524:	f7fc f948 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 8004528:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <menu+0x2e60>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <menu+0x2d04>
			if(dilSecim == 0) {
 8004530:	4b56      	ldr	r3, [pc, #344]	; (800468c <menu+0x2e38>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004538:	4a5f      	ldr	r2, [pc, #380]	; (80046b8 <menu+0x2e64>)
 800453a:	2101      	movs	r1, #1
 800453c:	2002      	movs	r0, #2
 800453e:	f7fc f93b 	bl	80007b8 <lcd_print>
 8004542:	e020      	b.n	8004586 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004544:	4b51      	ldr	r3, [pc, #324]	; (800468c <menu+0x2e38>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d11c      	bne.n	8004586 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 800454c:	4a5b      	ldr	r2, [pc, #364]	; (80046bc <menu+0x2e68>)
 800454e:	2101      	movs	r1, #1
 8004550:	2002      	movs	r0, #2
 8004552:	f7fc f931 	bl	80007b8 <lcd_print>
 8004556:	e016      	b.n	8004586 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004558:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <menu+0x2e60>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d112      	bne.n	8004586 <menu+0x2d32>
			if(dilSecim == 0) {
 8004560:	4b4a      	ldr	r3, [pc, #296]	; (800468c <menu+0x2e38>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004568:	4a55      	ldr	r2, [pc, #340]	; (80046c0 <menu+0x2e6c>)
 800456a:	2101      	movs	r1, #1
 800456c:	2002      	movs	r0, #2
 800456e:	f7fc f923 	bl	80007b8 <lcd_print>
 8004572:	e008      	b.n	8004586 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004574:	4b45      	ldr	r3, [pc, #276]	; (800468c <menu+0x2e38>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d104      	bne.n	8004586 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800457c:	4a51      	ldr	r2, [pc, #324]	; (80046c4 <menu+0x2e70>)
 800457e:	2101      	movs	r1, #1
 8004580:	2002      	movs	r0, #2
 8004582:	f7fc f919 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004586:	2102      	movs	r1, #2
 8004588:	4844      	ldr	r0, [pc, #272]	; (800469c <menu+0x2e48>)
 800458a:	f004 fef5 	bl	8009378 <HAL_GPIO_ReadPin>
 800458e:	4603      	mov	r3, r0
 8004590:	2b01      	cmp	r3, #1
 8004592:	d115      	bne.n	80045c0 <menu+0x2d6c>
 8004594:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <menu+0x2e4c>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f083 0301 	eor.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80045a2:	4b44      	ldr	r3, [pc, #272]	; (80046b4 <menu+0x2e60>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <menu+0x2e60>)
 80045ac:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <menu+0x2e60>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d902      	bls.n	80045bc <menu+0x2d68>
				buzzer = 0;
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <menu+0x2e60>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045bc:	f001 f906 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045c0:	2104      	movs	r1, #4
 80045c2:	4836      	ldr	r0, [pc, #216]	; (800469c <menu+0x2e48>)
 80045c4:	f004 fed8 	bl	8009378 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d115      	bne.n	80045fa <menu+0x2da6>
 80045ce:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <menu+0x2e4c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	f083 0301 	eor.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00e      	beq.n	80045fa <menu+0x2da6>
			buzzer = buzzer - 1;
 80045dc:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <menu+0x2e60>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	4b33      	ldr	r3, [pc, #204]	; (80046b4 <menu+0x2e60>)
 80045e6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <menu+0x2e60>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <menu+0x2da2>
		   		buzzer = 1;
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <menu+0x2e60>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045f6:	f001 f8e9 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045fa:	2108      	movs	r1, #8
 80045fc:	4827      	ldr	r0, [pc, #156]	; (800469c <menu+0x2e48>)
 80045fe:	f004 febb 	bl	8009378 <HAL_GPIO_ReadPin>
 8004602:	4603      	mov	r3, r0
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10d      	bne.n	8004624 <menu+0x2dd0>
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <menu+0x2e4c>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f083 0301 	eor.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <menu+0x2e60>)
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <menu+0x2e50>)
 800461c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <menu+0x2e54>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004624:	4b21      	ldr	r3, [pc, #132]	; (80046ac <menu+0x2e58>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b1c      	cmp	r3, #28
 800462a:	f040 80ab 	bne.w	8004784 <menu+0x2f30>
		calismaSayModu = 0;
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <menu+0x2e74>)
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004634:	4a25      	ldr	r2, [pc, #148]	; (80046cc <menu+0x2e78>)
 8004636:	2101      	movs	r1, #1
 8004638:	2001      	movs	r0, #1
 800463a:	f7fc f8bd 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <menu+0x2e7c>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d113      	bne.n	800466e <menu+0x2e1a>
			if(dilSecim == 0) {
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <menu+0x2e38>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <menu+0x2e64>)
 8004650:	2101      	movs	r1, #1
 8004652:	2002      	movs	r0, #2
 8004654:	f7fc f8b0 	bl	80007b8 <lcd_print>
 8004658:	e045      	b.n	80046e6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <menu+0x2e38>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d141      	bne.n	80046e6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <menu+0x2e68>)
 8004664:	2101      	movs	r1, #1
 8004666:	2002      	movs	r0, #2
 8004668:	f7fc f8a6 	bl	80007b8 <lcd_print>
 800466c:	e03b      	b.n	80046e6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <menu+0x2e7c>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d137      	bne.n	80046e6 <menu+0x2e92>
			if(dilSecim == 0){
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <menu+0x2e38>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d12a      	bne.n	80046d4 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800467e:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <menu+0x2e6c>)
 8004680:	2101      	movs	r1, #1
 8004682:	2002      	movs	r0, #2
 8004684:	f7fc f898 	bl	80007b8 <lcd_print>
 8004688:	e02d      	b.n	80046e6 <menu+0x2e92>
 800468a:	bf00      	nop
 800468c:	20000419 	.word	0x20000419
 8004690:	0800d910 	.word	0x0800d910
 8004694:	20000410 	.word	0x20000410
 8004698:	20000398 	.word	0x20000398
 800469c:	40010800 	.word	0x40010800
 80046a0:	20000427 	.word	0x20000427
 80046a4:	20000328 	.word	0x20000328
 80046a8:	20000424 	.word	0x20000424
 80046ac:	200003f8 	.word	0x200003f8
 80046b0:	0800da10 	.word	0x0800da10
 80046b4:	20000414 	.word	0x20000414
 80046b8:	0800d338 	.word	0x0800d338
 80046bc:	0800d34c 	.word	0x0800d34c
 80046c0:	0800d398 	.word	0x0800d398
 80046c4:	0800d3ac 	.word	0x0800d3ac
 80046c8:	20000418 	.word	0x20000418
 80046cc:	0800da24 	.word	0x0800da24
 80046d0:	20000416 	.word	0x20000416
			} else if(dilSecim == 1) {
 80046d4:	4b71      	ldr	r3, [pc, #452]	; (800489c <menu+0x3048>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d104      	bne.n	80046e6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80046dc:	4a70      	ldr	r2, [pc, #448]	; (80048a0 <menu+0x304c>)
 80046de:	2101      	movs	r1, #1
 80046e0:	2002      	movs	r0, #2
 80046e2:	f7fc f869 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e6:	2102      	movs	r1, #2
 80046e8:	486e      	ldr	r0, [pc, #440]	; (80048a4 <menu+0x3050>)
 80046ea:	f004 fe45 	bl	8009378 <HAL_GPIO_ReadPin>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d115      	bne.n	8004720 <menu+0x2ecc>
 80046f4:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <menu+0x3054>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00e      	beq.n	8004720 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004702:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <menu+0x3058>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b68      	ldr	r3, [pc, #416]	; (80048ac <menu+0x3058>)
 800470c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800470e:	4b67      	ldr	r3, [pc, #412]	; (80048ac <menu+0x3058>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d902      	bls.n	800471c <menu+0x2ec8>
				demoMode = 0;
 8004716:	4b65      	ldr	r3, [pc, #404]	; (80048ac <menu+0x3058>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800471c:	f001 f856 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004720:	2104      	movs	r1, #4
 8004722:	4860      	ldr	r0, [pc, #384]	; (80048a4 <menu+0x3050>)
 8004724:	f004 fe28 	bl	8009378 <HAL_GPIO_ReadPin>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d115      	bne.n	800475a <menu+0x2f06>
 800472e:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <menu+0x3054>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f083 0301 	eor.w	r3, r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <menu+0x2f06>
			demoMode = demoMode - 1;
 800473c:	4b5b      	ldr	r3, [pc, #364]	; (80048ac <menu+0x3058>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	3b01      	subs	r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	4b59      	ldr	r3, [pc, #356]	; (80048ac <menu+0x3058>)
 8004746:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004748:	4b58      	ldr	r3, [pc, #352]	; (80048ac <menu+0x3058>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <menu+0x2f02>
		   		demoMode = 1;
 8004750:	4b56      	ldr	r3, [pc, #344]	; (80048ac <menu+0x3058>)
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004756:	f001 f839 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800475a:	2108      	movs	r1, #8
 800475c:	4851      	ldr	r0, [pc, #324]	; (80048a4 <menu+0x3050>)
 800475e:	f004 fe0b 	bl	8009378 <HAL_GPIO_ReadPin>
 8004762:	4603      	mov	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10d      	bne.n	8004784 <menu+0x2f30>
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <menu+0x3054>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f083 0301 	eor.w	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004776:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <menu+0x3058>)
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	4b4d      	ldr	r3, [pc, #308]	; (80048b0 <menu+0x305c>)
 800477c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800477e:	4b4d      	ldr	r3, [pc, #308]	; (80048b4 <menu+0x3060>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004784:	4b4c      	ldr	r3, [pc, #304]	; (80048b8 <menu+0x3064>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b1d      	cmp	r3, #29
 800478a:	f040 8132 	bne.w	80049f2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800478e:	4b4b      	ldr	r3, [pc, #300]	; (80048bc <menu+0x3068>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d113      	bne.n	80047be <menu+0x2f6a>
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <menu+0x306c>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <menu+0x2f6a>
 800479e:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <menu+0x3070>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <menu+0x2f6a>
 80047a6:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <menu+0x3074>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <menu+0x2f6a>
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <menu+0x3078>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <menu+0x2f6a>
			calismaSayisiYar = 0;
 80047b6:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <menu+0x307c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e002      	b.n	80047c4 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80047be:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <menu+0x307c>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80047c4:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <menu+0x3080>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d154      	bne.n	8004876 <menu+0x3022>
			if(dilSecim == 0) {
 80047cc:	4b33      	ldr	r3, [pc, #204]	; (800489c <menu+0x3048>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80047d4:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <menu+0x3084>)
 80047d6:	2101      	movs	r1, #1
 80047d8:	2001      	movs	r0, #1
 80047da:	f7fb ffed 	bl	80007b8 <lcd_print>
 80047de:	e008      	b.n	80047f2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80047e0:	4b2e      	ldr	r3, [pc, #184]	; (800489c <menu+0x3048>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d104      	bne.n	80047f2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80047e8:	4a3c      	ldr	r2, [pc, #240]	; (80048dc <menu+0x3088>)
 80047ea:	2101      	movs	r1, #1
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7fb ffe3 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80047f2:	4b36      	ldr	r3, [pc, #216]	; (80048cc <menu+0x3078>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	220a      	movs	r2, #10
 80047f8:	4939      	ldr	r1, [pc, #228]	; (80048e0 <menu+0x308c>)
 80047fa:	4618      	mov	r0, r3
 80047fc:	f007 fde8 	bl	800c3d0 <itoa>
			lcd_print(2, 12, snum);
 8004800:	4a37      	ldr	r2, [pc, #220]	; (80048e0 <menu+0x308c>)
 8004802:	210c      	movs	r1, #12
 8004804:	2002      	movs	r0, #2
 8004806:	f7fb ffd7 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800480a:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <menu+0x3074>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	220a      	movs	r2, #10
 8004810:	4933      	ldr	r1, [pc, #204]	; (80048e0 <menu+0x308c>)
 8004812:	4618      	mov	r0, r3
 8004814:	f007 fddc 	bl	800c3d0 <itoa>
			lcd_print(2, 13, snum);
 8004818:	4a31      	ldr	r2, [pc, #196]	; (80048e0 <menu+0x308c>)
 800481a:	210d      	movs	r1, #13
 800481c:	2002      	movs	r0, #2
 800481e:	f7fb ffcb 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004822:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <menu+0x3070>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	220a      	movs	r2, #10
 8004828:	492d      	ldr	r1, [pc, #180]	; (80048e0 <menu+0x308c>)
 800482a:	4618      	mov	r0, r3
 800482c:	f007 fdd0 	bl	800c3d0 <itoa>
			lcd_print(2, 14, snum);
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <menu+0x308c>)
 8004832:	210e      	movs	r1, #14
 8004834:	2002      	movs	r0, #2
 8004836:	f7fb ffbf 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <menu+0x306c>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	220a      	movs	r2, #10
 8004840:	4927      	ldr	r1, [pc, #156]	; (80048e0 <menu+0x308c>)
 8004842:	4618      	mov	r0, r3
 8004844:	f007 fdc4 	bl	800c3d0 <itoa>
			lcd_print(2, 15, snum);
 8004848:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <menu+0x308c>)
 800484a:	210f      	movs	r1, #15
 800484c:	2002      	movs	r0, #2
 800484e:	f7fb ffb3 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004852:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <menu+0x3068>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	220a      	movs	r2, #10
 8004858:	4921      	ldr	r1, [pc, #132]	; (80048e0 <menu+0x308c>)
 800485a:	4618      	mov	r0, r3
 800485c:	f007 fdb8 	bl	800c3d0 <itoa>
			lcd_print(2, 16, snum);
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <menu+0x308c>)
 8004862:	2110      	movs	r1, #16
 8004864:	2002      	movs	r0, #2
 8004866:	f7fb ffa7 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <menu+0x3090>)
 800486c:	2101      	movs	r1, #1
 800486e:	2002      	movs	r0, #2
 8004870:	f7fb ffa2 	bl	80007b8 <lcd_print>
 8004874:	e048      	b.n	8004908 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004876:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <menu+0x3080>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d144      	bne.n	8004908 <menu+0x30b4>
			if(dilSecim == 0) {
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <menu+0x3048>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d132      	bne.n	80048ec <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004886:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <menu+0x3084>)
 8004888:	2101      	movs	r1, #1
 800488a:	2001      	movs	r0, #1
 800488c:	f7fb ff94 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004890:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <menu+0x3094>)
 8004892:	2101      	movs	r1, #1
 8004894:	2002      	movs	r0, #2
 8004896:	f7fb ff8f 	bl	80007b8 <lcd_print>
 800489a:	e035      	b.n	8004908 <menu+0x30b4>
 800489c:	20000419 	.word	0x20000419
 80048a0:	0800d3ac 	.word	0x0800d3ac
 80048a4:	40010800 	.word	0x40010800
 80048a8:	20000427 	.word	0x20000427
 80048ac:	20000416 	.word	0x20000416
 80048b0:	20000328 	.word	0x20000328
 80048b4:	20000424 	.word	0x20000424
 80048b8:	200003f8 	.word	0x200003f8
 80048bc:	200003f5 	.word	0x200003f5
 80048c0:	200003f6 	.word	0x200003f6
 80048c4:	200000a4 	.word	0x200000a4
 80048c8:	200000a5 	.word	0x200000a5
 80048cc:	200003f7 	.word	0x200003f7
 80048d0:	20000439 	.word	0x20000439
 80048d4:	20000418 	.word	0x20000418
 80048d8:	0800da34 	.word	0x0800da34
 80048dc:	0800da48 	.word	0x0800da48
 80048e0:	20000398 	.word	0x20000398
 80048e4:	0800da5c 	.word	0x0800da5c
 80048e8:	0800da68 	.word	0x0800da68
			} else if(dilSecim == 1) {
 80048ec:	4b94      	ldr	r3, [pc, #592]	; (8004b40 <menu+0x32ec>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d109      	bne.n	8004908 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80048f4:	4a93      	ldr	r2, [pc, #588]	; (8004b44 <menu+0x32f0>)
 80048f6:	2101      	movs	r1, #1
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fb ff5d 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80048fe:	4a92      	ldr	r2, [pc, #584]	; (8004b48 <menu+0x32f4>)
 8004900:	2101      	movs	r1, #1
 8004902:	2002      	movs	r0, #2
 8004904:	f7fb ff58 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004908:	2102      	movs	r1, #2
 800490a:	4890      	ldr	r0, [pc, #576]	; (8004b4c <menu+0x32f8>)
 800490c:	f004 fd34 	bl	8009378 <HAL_GPIO_ReadPin>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d119      	bne.n	800494a <menu+0x30f6>
 8004916:	4b8e      	ldr	r3, [pc, #568]	; (8004b50 <menu+0x32fc>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d012      	beq.n	800494a <menu+0x30f6>
 8004924:	4b8b      	ldr	r3, [pc, #556]	; (8004b54 <menu+0x3300>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00e      	beq.n	800494a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800492c:	4b8a      	ldr	r3, [pc, #552]	; (8004b58 <menu+0x3304>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <menu+0x3304>)
 8004936:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004938:	4b87      	ldr	r3, [pc, #540]	; (8004b58 <menu+0x3304>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d902      	bls.n	8004946 <menu+0x30f2>
				calismaSayModu = 0;
 8004940:	4b85      	ldr	r3, [pc, #532]	; (8004b58 <menu+0x3304>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004946:	f000 ff41 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800494a:	2104      	movs	r1, #4
 800494c:	487f      	ldr	r0, [pc, #508]	; (8004b4c <menu+0x32f8>)
 800494e:	f004 fd13 	bl	8009378 <HAL_GPIO_ReadPin>
 8004952:	4603      	mov	r3, r0
 8004954:	2b01      	cmp	r3, #1
 8004956:	d119      	bne.n	800498c <menu+0x3138>
 8004958:	4b7d      	ldr	r3, [pc, #500]	; (8004b50 <menu+0x32fc>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	f083 0301 	eor.w	r3, r3, #1
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d012      	beq.n	800498c <menu+0x3138>
 8004966:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <menu+0x3300>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800496e:	4b7a      	ldr	r3, [pc, #488]	; (8004b58 <menu+0x3304>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4b78      	ldr	r3, [pc, #480]	; (8004b58 <menu+0x3304>)
 8004978:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800497a:	4b77      	ldr	r3, [pc, #476]	; (8004b58 <menu+0x3304>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <menu+0x3134>
		   		calismaSayModu = 1;
 8004982:	4b75      	ldr	r3, [pc, #468]	; (8004b58 <menu+0x3304>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004988:	f000 ff20 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800498c:	2108      	movs	r1, #8
 800498e:	486f      	ldr	r0, [pc, #444]	; (8004b4c <menu+0x32f8>)
 8004990:	f004 fcf2 	bl	8009378 <HAL_GPIO_ReadPin>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d12b      	bne.n	80049f2 <menu+0x319e>
 800499a:	4b6d      	ldr	r3, [pc, #436]	; (8004b50 <menu+0x32fc>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	f083 0301 	eor.w	r3, r3, #1
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d024      	beq.n	80049f2 <menu+0x319e>
			eepromData[32] = 0;
 80049a8:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <menu+0x3308>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80049b0:	4b6a      	ldr	r3, [pc, #424]	; (8004b5c <menu+0x3308>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80049b6:	4b69      	ldr	r3, [pc, #420]	; (8004b5c <menu+0x3308>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80049bc:	4b67      	ldr	r3, [pc, #412]	; (8004b5c <menu+0x3308>)
 80049be:	2200      	movs	r2, #0
 80049c0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80049c2:	4b66      	ldr	r3, [pc, #408]	; (8004b5c <menu+0x3308>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80049c8:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <menu+0x330c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80049ce:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <menu+0x3310>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80049d4:	4b64      	ldr	r3, [pc, #400]	; (8004b68 <menu+0x3314>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80049da:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <menu+0x3318>)
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80049e0:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <menu+0x331c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80049e6:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <menu+0x3304>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80049ec:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <menu+0x3320>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80049f2:	4b61      	ldr	r3, [pc, #388]	; (8004b78 <menu+0x3324>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b1e      	cmp	r3, #30
 80049f8:	d16f      	bne.n	8004ada <menu+0x3286>
		calismaSayModu = 0;
 80049fa:	4b57      	ldr	r3, [pc, #348]	; (8004b58 <menu+0x3304>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004a00:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <menu+0x32ec>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004a08:	4a5c      	ldr	r2, [pc, #368]	; (8004b7c <menu+0x3328>)
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	f7fb fed3 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004a12:	4a5b      	ldr	r2, [pc, #364]	; (8004b80 <menu+0x332c>)
 8004a14:	2101      	movs	r1, #1
 8004a16:	2002      	movs	r0, #2
 8004a18:	f7fb fece 	bl	80007b8 <lcd_print>
 8004a1c:	e00d      	b.n	8004a3a <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004a1e:	4b48      	ldr	r3, [pc, #288]	; (8004b40 <menu+0x32ec>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d109      	bne.n	8004a3a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004a26:	4a57      	ldr	r2, [pc, #348]	; (8004b84 <menu+0x3330>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f7fb fec4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004a30:	4a55      	ldr	r2, [pc, #340]	; (8004b88 <menu+0x3334>)
 8004a32:	2101      	movs	r1, #1
 8004a34:	2002      	movs	r0, #2
 8004a36:	f7fb febf 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	4843      	ldr	r0, [pc, #268]	; (8004b4c <menu+0x32f8>)
 8004a3e:	f004 fc9b 	bl	8009378 <HAL_GPIO_ReadPin>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d115      	bne.n	8004a74 <menu+0x3220>
 8004a48:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <menu+0x32fc>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004a56:	4b3a      	ldr	r3, [pc, #232]	; (8004b40 <menu+0x32ec>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <menu+0x32ec>)
 8004a60:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004a62:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <menu+0x32ec>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d902      	bls.n	8004a70 <menu+0x321c>
				dilSecim = 0;
 8004a6a:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <menu+0x32ec>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004a70:	f000 feac 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a74:	2104      	movs	r1, #4
 8004a76:	4835      	ldr	r0, [pc, #212]	; (8004b4c <menu+0x32f8>)
 8004a78:	f004 fc7e 	bl	8009378 <HAL_GPIO_ReadPin>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d115      	bne.n	8004aae <menu+0x325a>
 8004a82:	4b33      	ldr	r3, [pc, #204]	; (8004b50 <menu+0x32fc>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004a90:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <menu+0x32ec>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <menu+0x32ec>)
 8004a9a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <menu+0x32ec>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <menu+0x3256>
		   		dilSecim = 1;
 8004aa4:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <menu+0x32ec>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004aaa:	f000 fe8f 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004aae:	2108      	movs	r1, #8
 8004ab0:	4826      	ldr	r0, [pc, #152]	; (8004b4c <menu+0x32f8>)
 8004ab2:	f004 fc61 	bl	8009378 <HAL_GPIO_ReadPin>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10e      	bne.n	8004ada <menu+0x3286>
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <menu+0x32fc>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f083 0301 	eor.w	r3, r3, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <menu+0x3286>
			eepromData[33] = dilSecim;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <menu+0x32ec>)
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <menu+0x3308>)
 8004ad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <menu+0x3320>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <menu+0x3324>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b1f      	cmp	r3, #31
 8004ae0:	f040 80b7 	bne.w	8004c52 <menu+0x33fe>
		calismaSayModu = 0;
 8004ae4:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <menu+0x3304>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004aea:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <menu+0x3338>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	2001      	movs	r0, #1
 8004af0:	f7fb fe62 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004af4:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <menu+0x333c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d113      	bne.n	8004b24 <menu+0x32d0>
			if(dilSecim == 0) {
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <menu+0x32ec>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <menu+0x3340>)
 8004b06:	2101      	movs	r1, #1
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fb fe55 	bl	80007b8 <lcd_print>
 8004b0e:	e050      	b.n	8004bb2 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <menu+0x32ec>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d14c      	bne.n	8004bb2 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <menu+0x3344>)
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	f7fb fe4b 	bl	80007b8 <lcd_print>
 8004b22:	e046      	b.n	8004bb2 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <menu+0x333c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d142      	bne.n	8004bb2 <menu+0x335e>
			if(dilSecim == 0){
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <menu+0x32ec>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d135      	bne.n	8004ba0 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <menu+0x3348>)
 8004b36:	2101      	movs	r1, #1
 8004b38:	2002      	movs	r0, #2
 8004b3a:	f7fb fe3d 	bl	80007b8 <lcd_print>
 8004b3e:	e038      	b.n	8004bb2 <menu+0x335e>
 8004b40:	20000419 	.word	0x20000419
 8004b44:	0800da48 	.word	0x0800da48
 8004b48:	0800da7c 	.word	0x0800da7c
 8004b4c:	40010800 	.word	0x40010800
 8004b50:	20000427 	.word	0x20000427
 8004b54:	20000439 	.word	0x20000439
 8004b58:	20000418 	.word	0x20000418
 8004b5c:	20000328 	.word	0x20000328
 8004b60:	200003f7 	.word	0x200003f7
 8004b64:	200000a5 	.word	0x200000a5
 8004b68:	200000a4 	.word	0x200000a4
 8004b6c:	200003f6 	.word	0x200003f6
 8004b70:	200003f5 	.word	0x200003f5
 8004b74:	20000424 	.word	0x20000424
 8004b78:	200003f8 	.word	0x200003f8
 8004b7c:	0800da90 	.word	0x0800da90
 8004b80:	0800daa4 	.word	0x0800daa4
 8004b84:	0800dab8 	.word	0x0800dab8
 8004b88:	0800dacc 	.word	0x0800dacc
 8004b8c:	0800dae0 	.word	0x0800dae0
 8004b90:	20000417 	.word	0x20000417
 8004b94:	0800d338 	.word	0x0800d338
 8004b98:	0800d34c 	.word	0x0800d34c
 8004b9c:	0800d398 	.word	0x0800d398
			} else if(dilSecim == 1) {
 8004ba0:	4bac      	ldr	r3, [pc, #688]	; (8004e54 <menu+0x3600>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d104      	bne.n	8004bb2 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004ba8:	4aab      	ldr	r2, [pc, #684]	; (8004e58 <menu+0x3604>)
 8004baa:	2101      	movs	r1, #1
 8004bac:	2002      	movs	r0, #2
 8004bae:	f7fb fe03 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	48a9      	ldr	r0, [pc, #676]	; (8004e5c <menu+0x3608>)
 8004bb6:	f004 fbdf 	bl	8009378 <HAL_GPIO_ReadPin>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d115      	bne.n	8004bec <menu+0x3398>
 8004bc0:	4ba7      	ldr	r3, [pc, #668]	; (8004e60 <menu+0x360c>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f083 0301 	eor.w	r3, r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <menu+0x3398>
			iotMode = iotMode + 1;
 8004bce:	4ba5      	ldr	r3, [pc, #660]	; (8004e64 <menu+0x3610>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4ba3      	ldr	r3, [pc, #652]	; (8004e64 <menu+0x3610>)
 8004bd8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004bda:	4ba2      	ldr	r3, [pc, #648]	; (8004e64 <menu+0x3610>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d902      	bls.n	8004be8 <menu+0x3394>
				iotMode = 0;
 8004be2:	4ba0      	ldr	r3, [pc, #640]	; (8004e64 <menu+0x3610>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004be8:	f000 fdf0 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bec:	2104      	movs	r1, #4
 8004bee:	489b      	ldr	r0, [pc, #620]	; (8004e5c <menu+0x3608>)
 8004bf0:	f004 fbc2 	bl	8009378 <HAL_GPIO_ReadPin>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d115      	bne.n	8004c26 <menu+0x33d2>
 8004bfa:	4b99      	ldr	r3, [pc, #612]	; (8004e60 <menu+0x360c>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f083 0301 	eor.w	r3, r3, #1
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004c08:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <menu+0x3610>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	4b94      	ldr	r3, [pc, #592]	; (8004e64 <menu+0x3610>)
 8004c12:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004c14:	4b93      	ldr	r3, [pc, #588]	; (8004e64 <menu+0x3610>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <menu+0x33ce>
		   		iotMode = 1;
 8004c1c:	4b91      	ldr	r3, [pc, #580]	; (8004e64 <menu+0x3610>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004c22:	f000 fdd3 	bl	80057cc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c26:	2108      	movs	r1, #8
 8004c28:	488c      	ldr	r0, [pc, #560]	; (8004e5c <menu+0x3608>)
 8004c2a:	f004 fba5 	bl	8009378 <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10e      	bne.n	8004c52 <menu+0x33fe>
 8004c34:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <menu+0x360c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	f083 0301 	eor.w	r3, r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004c42:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <menu+0x3610>)
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <menu+0x3614>)
 8004c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004c4c:	4b87      	ldr	r3, [pc, #540]	; (8004e6c <menu+0x3618>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004c52:	4b87      	ldr	r3, [pc, #540]	; (8004e70 <menu+0x361c>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d138      	bne.n	8004ccc <menu+0x3478>
		calismaSayModu = 0;
 8004c5a:	4b86      	ldr	r3, [pc, #536]	; (8004e74 <menu+0x3620>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004c60:	4a85      	ldr	r2, [pc, #532]	; (8004e78 <menu+0x3624>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	2001      	movs	r0, #1
 8004c66:	f7fb fda7 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 8004c6a:	4a84      	ldr	r2, [pc, #528]	; (8004e7c <menu+0x3628>)
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	2002      	movs	r0, #2
 8004c70:	f7fb fda2 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "    ");
 8004c74:	4a82      	ldr	r2, [pc, #520]	; (8004e80 <menu+0x362c>)
 8004c76:	210d      	movs	r1, #13
 8004c78:	2002      	movs	r0, #2
 8004c7a:	f7fb fd9d 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c7e:	2102      	movs	r1, #2
 8004c80:	4876      	ldr	r0, [pc, #472]	; (8004e5c <menu+0x3608>)
 8004c82:	f004 fb79 	bl	8009378 <HAL_GPIO_ReadPin>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d11f      	bne.n	8004ccc <menu+0x3478>
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	4873      	ldr	r0, [pc, #460]	; (8004e5c <menu+0x3608>)
 8004c90:	f004 fb72 	bl	8009378 <HAL_GPIO_ReadPin>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d118      	bne.n	8004ccc <menu+0x3478>
 8004c9a:	4b71      	ldr	r3, [pc, #452]	; (8004e60 <menu+0x360c>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f083 0301 	eor.w	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d011      	beq.n	8004ccc <menu+0x3478>
			takeMachineID(0);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7fb ffb9 	bl	8000c20 <takeMachineID>

			HAL_Delay(50);
 8004cae:	2032      	movs	r0, #50	; 0x32
 8004cb0:	f003 fd92 	bl	80087d8 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004cb4:	4a71      	ldr	r2, [pc, #452]	; (8004e7c <menu+0x3628>)
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	2002      	movs	r0, #2
 8004cba:	f7fb fd7d 	bl	80007b8 <lcd_print>
			lcd_print(2, 13, "    ");
 8004cbe:	4a70      	ldr	r2, [pc, #448]	; (8004e80 <menu+0x362c>)
 8004cc0:	210d      	movs	r1, #13
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	f7fb fd78 	bl	80007b8 <lcd_print>

			bekle();
 8004cc8:	f000 fd80 	bl	80057cc <bekle>
		}
	}

	if (menuSayac == 33) {
 8004ccc:	4b68      	ldr	r3, [pc, #416]	; (8004e70 <menu+0x361c>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b21      	cmp	r3, #33	; 0x21
 8004cd2:	d153      	bne.n	8004d7c <menu+0x3528>
		calismaSayModu = 0;
 8004cd4:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <menu+0x3620>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004cda:	4a6a      	ldr	r2, [pc, #424]	; (8004e84 <menu+0x3630>)
 8004cdc:	2101      	movs	r1, #1
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f7fb fd6a 	bl	80007b8 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004ce4:	4868      	ldr	r0, [pc, #416]	; (8004e88 <menu+0x3634>)
 8004ce6:	f7fb fa9d 	bl	8000224 <strlen>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d811      	bhi.n	8004d14 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004cf0:	4a65      	ldr	r2, [pc, #404]	; (8004e88 <menu+0x3634>)
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	2002      	movs	r0, #2
 8004cf6:	f7fb fd5f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004cfa:	4863      	ldr	r0, [pc, #396]	; (8004e88 <menu+0x3634>)
 8004cfc:	f7fb fa92 	bl	8000224 <strlen>
 8004d00:	4603      	mov	r3, r0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4a60      	ldr	r2, [pc, #384]	; (8004e8c <menu+0x3638>)
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	2002      	movs	r0, #2
 8004d0e:	f7fb fd53 	bl	80007b8 <lcd_print>
 8004d12:	e005      	b.n	8004d20 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004d14:	2300      	movs	r3, #0
 8004d16:	2202      	movs	r2, #2
 8004d18:	2101      	movs	r1, #1
 8004d1a:	485b      	ldr	r0, [pc, #364]	; (8004e88 <menu+0x3634>)
 8004d1c:	f7fc fcf4 	bl	8001708 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d20:	2102      	movs	r1, #2
 8004d22:	484e      	ldr	r0, [pc, #312]	; (8004e5c <menu+0x3608>)
 8004d24:	f004 fb28 	bl	8009378 <HAL_GPIO_ReadPin>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d126      	bne.n	8004d7c <menu+0x3528>
 8004d2e:	2104      	movs	r1, #4
 8004d30:	484a      	ldr	r0, [pc, #296]	; (8004e5c <menu+0x3608>)
 8004d32:	f004 fb21 	bl	8009378 <HAL_GPIO_ReadPin>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d11f      	bne.n	8004d7c <menu+0x3528>
 8004d3c:	4b48      	ldr	r3, [pc, #288]	; (8004e60 <menu+0x360c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f083 0301 	eor.w	r3, r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <menu+0x3528>
			takeWifiSSID(0);
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f7fc f8be 	bl	8000ecc <takeWifiSSID>

			HAL_Delay(100);
 8004d50:	2064      	movs	r0, #100	; 0x64
 8004d52:	f003 fd41 	bl	80087d8 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004d56:	4a4c      	ldr	r2, [pc, #304]	; (8004e88 <menu+0x3634>)
 8004d58:	2101      	movs	r1, #1
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	f7fb fd2c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004d60:	4849      	ldr	r0, [pc, #292]	; (8004e88 <menu+0x3634>)
 8004d62:	f7fb fa5f 	bl	8000224 <strlen>
 8004d66:	4603      	mov	r3, r0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4a47      	ldr	r2, [pc, #284]	; (8004e8c <menu+0x3638>)
 8004d70:	4619      	mov	r1, r3
 8004d72:	2002      	movs	r0, #2
 8004d74:	f7fb fd20 	bl	80007b8 <lcd_print>

			bekle();
 8004d78:	f000 fd28 	bl	80057cc <bekle>
		}
	}

	if (menuSayac == 34) {
 8004d7c:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <menu+0x361c>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b22      	cmp	r3, #34	; 0x22
 8004d82:	d153      	bne.n	8004e2c <menu+0x35d8>
		calismaSayModu = 0;
 8004d84:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <menu+0x3620>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004d8a:	4a41      	ldr	r2, [pc, #260]	; (8004e90 <menu+0x363c>)
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f7fb fd12 	bl	80007b8 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004d94:	483f      	ldr	r0, [pc, #252]	; (8004e94 <menu+0x3640>)
 8004d96:	f7fb fa45 	bl	8000224 <strlen>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d811      	bhi.n	8004dc4 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004da0:	4a3c      	ldr	r2, [pc, #240]	; (8004e94 <menu+0x3640>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	2002      	movs	r0, #2
 8004da6:	f7fb fd07 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004daa:	483a      	ldr	r0, [pc, #232]	; (8004e94 <menu+0x3640>)
 8004dac:	f7fb fa3a 	bl	8000224 <strlen>
 8004db0:	4603      	mov	r3, r0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3301      	adds	r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	4a34      	ldr	r2, [pc, #208]	; (8004e8c <menu+0x3638>)
 8004dba:	4619      	mov	r1, r3
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f7fb fcfb 	bl	80007b8 <lcd_print>
 8004dc2:	e005      	b.n	8004dd0 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4832      	ldr	r0, [pc, #200]	; (8004e94 <menu+0x3640>)
 8004dcc:	f7fc fc9c 	bl	8001708 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4822      	ldr	r0, [pc, #136]	; (8004e5c <menu+0x3608>)
 8004dd4:	f004 fad0 	bl	8009378 <HAL_GPIO_ReadPin>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d126      	bne.n	8004e2c <menu+0x35d8>
 8004dde:	2104      	movs	r1, #4
 8004de0:	481e      	ldr	r0, [pc, #120]	; (8004e5c <menu+0x3608>)
 8004de2:	f004 fac9 	bl	8009378 <HAL_GPIO_ReadPin>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11f      	bne.n	8004e2c <menu+0x35d8>
 8004dec:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <menu+0x360c>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	f083 0301 	eor.w	r3, r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <menu+0x35d8>
			takeWifiPass(0);
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f7fc fa36 	bl	800126c <takeWifiPass>

			HAL_Delay(50);
 8004e00:	2032      	movs	r0, #50	; 0x32
 8004e02:	f003 fce9 	bl	80087d8 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004e06:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <menu+0x3640>)
 8004e08:	2101      	movs	r1, #1
 8004e0a:	2002      	movs	r0, #2
 8004e0c:	f7fb fcd4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004e10:	4820      	ldr	r0, [pc, #128]	; (8004e94 <menu+0x3640>)
 8004e12:	f7fb fa07 	bl	8000224 <strlen>
 8004e16:	4603      	mov	r3, r0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <menu+0x3638>)
 8004e20:	4619      	mov	r1, r3
 8004e22:	2002      	movs	r0, #2
 8004e24:	f7fb fcc8 	bl	80007b8 <lcd_print>

			bekle();
 8004e28:	f000 fcd0 	bl	80057cc <bekle>
		}
	}

	if (menuSayac == 35) {
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <menu+0x361c>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b23      	cmp	r3, #35	; 0x23
 8004e32:	d155      	bne.n	8004ee0 <menu+0x368c>
		if(dilSecim == 0) {
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <menu+0x3600>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d131      	bne.n	8004ea0 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <menu+0x3644>)
 8004e3e:	2101      	movs	r1, #1
 8004e40:	2001      	movs	r0, #1
 8004e42:	f7fb fcb9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <menu+0x3648>)
 8004e48:	2101      	movs	r1, #1
 8004e4a:	2002      	movs	r0, #2
 8004e4c:	f7fb fcb4 	bl	80007b8 <lcd_print>
 8004e50:	e034      	b.n	8004ebc <menu+0x3668>
 8004e52:	bf00      	nop
 8004e54:	20000419 	.word	0x20000419
 8004e58:	0800d3ac 	.word	0x0800d3ac
 8004e5c:	40010800 	.word	0x40010800
 8004e60:	20000427 	.word	0x20000427
 8004e64:	20000417 	.word	0x20000417
 8004e68:	20000328 	.word	0x20000328
 8004e6c:	20000424 	.word	0x20000424
 8004e70:	200003f8 	.word	0x200003f8
 8004e74:	20000418 	.word	0x20000418
 8004e78:	0800daf4 	.word	0x0800daf4
 8004e7c:	200003c0 	.word	0x200003c0
 8004e80:	0800db08 	.word	0x0800db08
 8004e84:	0800db10 	.word	0x0800db10
 8004e88:	200003cc 	.word	0x200003cc
 8004e8c:	2000003c 	.word	0x2000003c
 8004e90:	0800db24 	.word	0x0800db24
 8004e94:	200003e0 	.word	0x200003e0
 8004e98:	0800db38 	.word	0x0800db38
 8004e9c:	0800db4c 	.word	0x0800db4c
		} else if(dilSecim == 1) {
 8004ea0:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <menu+0x3690>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d109      	bne.n	8004ebc <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004ea8:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <menu+0x3694>)
 8004eaa:	2101      	movs	r1, #1
 8004eac:	2001      	movs	r0, #1
 8004eae:	f7fb fc83 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	; (8004eec <menu+0x3698>)
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	f7fb fc7e 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004ebc:	2108      	movs	r1, #8
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <menu+0x369c>)
 8004ec0:	f004 fa5a 	bl	8009378 <HAL_GPIO_ReadPin>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10a      	bne.n	8004ee0 <menu+0x368c>
			menuGiris = 0;
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <menu+0x36a0>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004ed0:	f7fb fc9e 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004ed4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ed8:	f003 fc7e 	bl	80087d8 <HAL_Delay>
			NVIC_SystemReset();
 8004edc:	f7fb fce0 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000419 	.word	0x20000419
 8004ee8:	0800db60 	.word	0x0800db60
 8004eec:	0800db74 	.word	0x0800db74
 8004ef0:	40010800 	.word	0x40010800
 8004ef4:	20000415 	.word	0x20000415

08004ef8 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004f08:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <lcdUpdate+0x9c>)
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	2002      	movs	r0, #2
 8004f0e:	f7fb fc53 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004f12:	e03b      	b.n	8004f8c <lcdUpdate+0x94>
	} else if(y==2) {
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d105      	bne.n	8004f26 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <lcdUpdate+0x9c>)
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	2002      	movs	r0, #2
 8004f20:	f7fb fc4a 	bl	80007b8 <lcd_print>
}
 8004f24:	e032      	b.n	8004f8c <lcdUpdate+0x94>
	} else if(y==3) {
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d105      	bne.n	8004f38 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <lcdUpdate+0x9c>)
 8004f2e:	2103      	movs	r1, #3
 8004f30:	2002      	movs	r0, #2
 8004f32:	f7fb fc41 	bl	80007b8 <lcd_print>
}
 8004f36:	e029      	b.n	8004f8c <lcdUpdate+0x94>
	} else if(y==4) {
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d105      	bne.n	8004f4a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <lcdUpdate+0x9c>)
 8004f40:	2104      	movs	r1, #4
 8004f42:	2002      	movs	r0, #2
 8004f44:	f7fb fc38 	bl	80007b8 <lcd_print>
}
 8004f48:	e020      	b.n	8004f8c <lcdUpdate+0x94>
	} else if(y==5) {
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d105      	bne.n	8004f5c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004f50:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <lcdUpdate+0x9c>)
 8004f52:	2105      	movs	r1, #5
 8004f54:	2002      	movs	r0, #2
 8004f56:	f7fb fc2f 	bl	80007b8 <lcd_print>
}
 8004f5a:	e017      	b.n	8004f8c <lcdUpdate+0x94>
	} else if(y==6) {
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d105      	bne.n	8004f6e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004f62:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <lcdUpdate+0x9c>)
 8004f64:	2106      	movs	r1, #6
 8004f66:	2002      	movs	r0, #2
 8004f68:	f7fb fc26 	bl	80007b8 <lcd_print>
}
 8004f6c:	e00e      	b.n	8004f8c <lcdUpdate+0x94>
	} else if (y==7) {
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	2b07      	cmp	r3, #7
 8004f72:	d10b      	bne.n	8004f8c <lcdUpdate+0x94>
		lcd_clear();
 8004f74:	f7fb fc4c 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004f78:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <lcdUpdate+0xa0>)
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	f7fb fc1b 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004f82:	4a06      	ldr	r2, [pc, #24]	; (8004f9c <lcdUpdate+0xa4>)
 8004f84:	2101      	movs	r1, #1
 8004f86:	2002      	movs	r0, #2
 8004f88:	f7fb fc16 	bl	80007b8 <lcd_print>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	0800d254 	.word	0x0800d254
 8004f98:	0800db88 	.word	0x0800db88
 8004f9c:	0800db9c 	.word	0x0800db9c

08004fa0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d11d      	bne.n	8004fec <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004fb0:	4b62      	ldr	r3, [pc, #392]	; (800513c <hataKoduLcdGoster+0x19c>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004fb8:	4a61      	ldr	r2, [pc, #388]	; (8005140 <hataKoduLcdGoster+0x1a0>)
 8004fba:	2101      	movs	r1, #1
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f7fb fbfb 	bl	80007b8 <lcd_print>
 8004fc2:	e008      	b.n	8004fd6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004fc4:	4b5d      	ldr	r3, [pc, #372]	; (800513c <hataKoduLcdGoster+0x19c>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d104      	bne.n	8004fd6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	; (8005144 <hataKoduLcdGoster+0x1a4>)
 8004fce:	2101      	movs	r1, #1
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f7fb fbf1 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004fd6:	4a5c      	ldr	r2, [pc, #368]	; (8005148 <hataKoduLcdGoster+0x1a8>)
 8004fd8:	2101      	movs	r1, #1
 8004fda:	2002      	movs	r0, #2
 8004fdc:	f7fb fbec 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004fe0:	4a5a      	ldr	r2, [pc, #360]	; (800514c <hataKoduLcdGoster+0x1ac>)
 8004fe2:	2107      	movs	r1, #7
 8004fe4:	2002      	movs	r0, #2
 8004fe6:	f7fb fbe7 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004fea:	e0a3      	b.n	8005134 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d11d      	bne.n	800502e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004ff2:	4b52      	ldr	r3, [pc, #328]	; (800513c <hataKoduLcdGoster+0x19c>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004ffa:	4a51      	ldr	r2, [pc, #324]	; (8005140 <hataKoduLcdGoster+0x1a0>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	2001      	movs	r0, #1
 8005000:	f7fb fbda 	bl	80007b8 <lcd_print>
 8005004:	e008      	b.n	8005018 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005006:	4b4d      	ldr	r3, [pc, #308]	; (800513c <hataKoduLcdGoster+0x19c>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d104      	bne.n	8005018 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 800500e:	4a4d      	ldr	r2, [pc, #308]	; (8005144 <hataKoduLcdGoster+0x1a4>)
 8005010:	2101      	movs	r1, #1
 8005012:	2001      	movs	r0, #1
 8005014:	f7fb fbd0 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8005018:	4a4d      	ldr	r2, [pc, #308]	; (8005150 <hataKoduLcdGoster+0x1b0>)
 800501a:	2102      	movs	r1, #2
 800501c:	2002      	movs	r0, #2
 800501e:	f7fb fbcb 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005022:	4a4a      	ldr	r2, [pc, #296]	; (800514c <hataKoduLcdGoster+0x1ac>)
 8005024:	2107      	movs	r1, #7
 8005026:	2002      	movs	r0, #2
 8005028:	f7fb fbc6 	bl	80007b8 <lcd_print>
}
 800502c:	e082      	b.n	8005134 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d11d      	bne.n	8005070 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005034:	4b41      	ldr	r3, [pc, #260]	; (800513c <hataKoduLcdGoster+0x19c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 800503c:	4a40      	ldr	r2, [pc, #256]	; (8005140 <hataKoduLcdGoster+0x1a0>)
 800503e:	2101      	movs	r1, #1
 8005040:	2001      	movs	r0, #1
 8005042:	f7fb fbb9 	bl	80007b8 <lcd_print>
 8005046:	e008      	b.n	800505a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005048:	4b3c      	ldr	r3, [pc, #240]	; (800513c <hataKoduLcdGoster+0x19c>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d104      	bne.n	800505a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005050:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <hataKoduLcdGoster+0x1a4>)
 8005052:	2101      	movs	r1, #1
 8005054:	2001      	movs	r0, #1
 8005056:	f7fb fbaf 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 800505a:	4a3e      	ldr	r2, [pc, #248]	; (8005154 <hataKoduLcdGoster+0x1b4>)
 800505c:	2103      	movs	r1, #3
 800505e:	2002      	movs	r0, #2
 8005060:	f7fb fbaa 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005064:	4a39      	ldr	r2, [pc, #228]	; (800514c <hataKoduLcdGoster+0x1ac>)
 8005066:	2107      	movs	r1, #7
 8005068:	2002      	movs	r0, #2
 800506a:	f7fb fba5 	bl	80007b8 <lcd_print>
}
 800506e:	e061      	b.n	8005134 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d11d      	bne.n	80050b2 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005076:	4b31      	ldr	r3, [pc, #196]	; (800513c <hataKoduLcdGoster+0x19c>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d105      	bne.n	800508a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800507e:	4a30      	ldr	r2, [pc, #192]	; (8005140 <hataKoduLcdGoster+0x1a0>)
 8005080:	2101      	movs	r1, #1
 8005082:	2001      	movs	r0, #1
 8005084:	f7fb fb98 	bl	80007b8 <lcd_print>
 8005088:	e008      	b.n	800509c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800508a:	4b2c      	ldr	r3, [pc, #176]	; (800513c <hataKoduLcdGoster+0x19c>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d104      	bne.n	800509c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005092:	4a2c      	ldr	r2, [pc, #176]	; (8005144 <hataKoduLcdGoster+0x1a4>)
 8005094:	2101      	movs	r1, #1
 8005096:	2001      	movs	r0, #1
 8005098:	f7fb fb8e 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 800509c:	4a2e      	ldr	r2, [pc, #184]	; (8005158 <hataKoduLcdGoster+0x1b8>)
 800509e:	2104      	movs	r1, #4
 80050a0:	2002      	movs	r0, #2
 80050a2:	f7fb fb89 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80050a6:	4a29      	ldr	r2, [pc, #164]	; (800514c <hataKoduLcdGoster+0x1ac>)
 80050a8:	2107      	movs	r1, #7
 80050aa:	2002      	movs	r0, #2
 80050ac:	f7fb fb84 	bl	80007b8 <lcd_print>
}
 80050b0:	e040      	b.n	8005134 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d11d      	bne.n	80050f4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <hataKoduLcdGoster+0x19c>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <hataKoduLcdGoster+0x1a0>)
 80050c2:	2101      	movs	r1, #1
 80050c4:	2001      	movs	r0, #1
 80050c6:	f7fb fb77 	bl	80007b8 <lcd_print>
 80050ca:	e008      	b.n	80050de <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <hataKoduLcdGoster+0x19c>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d104      	bne.n	80050de <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <hataKoduLcdGoster+0x1a4>)
 80050d6:	2101      	movs	r1, #1
 80050d8:	2001      	movs	r0, #1
 80050da:	f7fb fb6d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 80050de:	4a1f      	ldr	r2, [pc, #124]	; (800515c <hataKoduLcdGoster+0x1bc>)
 80050e0:	2105      	movs	r1, #5
 80050e2:	2002      	movs	r0, #2
 80050e4:	f7fb fb68 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80050e8:	4a18      	ldr	r2, [pc, #96]	; (800514c <hataKoduLcdGoster+0x1ac>)
 80050ea:	2107      	movs	r1, #7
 80050ec:	2002      	movs	r0, #2
 80050ee:	f7fb fb63 	bl	80007b8 <lcd_print>
}
 80050f2:	e01f      	b.n	8005134 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d11c      	bne.n	8005134 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <hataKoduLcdGoster+0x19c>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005102:	4a0f      	ldr	r2, [pc, #60]	; (8005140 <hataKoduLcdGoster+0x1a0>)
 8005104:	2101      	movs	r1, #1
 8005106:	2001      	movs	r0, #1
 8005108:	f7fb fb56 	bl	80007b8 <lcd_print>
 800510c:	e008      	b.n	8005120 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 800510e:	4b0b      	ldr	r3, [pc, #44]	; (800513c <hataKoduLcdGoster+0x19c>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d104      	bne.n	8005120 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005116:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <hataKoduLcdGoster+0x1a4>)
 8005118:	2101      	movs	r1, #1
 800511a:	2001      	movs	r0, #1
 800511c:	f7fb fb4c 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <hataKoduLcdGoster+0x1c0>)
 8005122:	2106      	movs	r1, #6
 8005124:	2002      	movs	r0, #2
 8005126:	f7fb fb47 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <hataKoduLcdGoster+0x1ac>)
 800512c:	2107      	movs	r1, #7
 800512e:	2002      	movs	r0, #2
 8005130:	f7fb fb42 	bl	80007b8 <lcd_print>
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000419 	.word	0x20000419
 8005140:	0800dbb0 	.word	0x0800dbb0
 8005144:	0800dbc4 	.word	0x0800dbc4
 8005148:	0800cf98 	.word	0x0800cf98
 800514c:	0800dbd8 	.word	0x0800dbd8
 8005150:	0800cf9c 	.word	0x0800cf9c
 8005154:	0800cfa0 	.word	0x0800cfa0
 8005158:	0800cfa4 	.word	0x0800cfa4
 800515c:	0800cfa8 	.word	0x0800cfa8
 8005160:	0800cfac 	.word	0x0800cfac

08005164 <convertAndSendData>:

void convertAndSendData() {
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 800516a:	4a14      	ldr	r2, [pc, #80]	; (80051bc <convertAndSendData+0x58>)
 800516c:	2101      	movs	r1, #1
 800516e:	2001      	movs	r0, #1
 8005170:	f7fb fb22 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005174:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <convertAndSendData+0x5c>)
 8005176:	2101      	movs	r1, #1
 8005178:	2002      	movs	r0, #2
 800517a:	f7fb fb1d 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	e00a      	b.n	800519a <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005184:	f002 fb4e 	bl	8007824 <mergeData>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	490d      	ldr	r1, [pc, #52]	; (80051c4 <convertAndSendData+0x60>)
 800518e:	480e      	ldr	r0, [pc, #56]	; (80051c8 <convertAndSendData+0x64>)
 8005190:	f7fb f8f8 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3301      	adds	r3, #1
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b01      	cmp	r3, #1
 800519e:	ddf1      	ble.n	8005184 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80051a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051a4:	f003 fb18 	bl	80087d8 <HAL_Delay>
	lcd_clear();
 80051a8:	f7fb fb32 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 80051ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051b0:	f003 fb12 	bl	80087d8 <HAL_Delay>
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	0800dbe4 	.word	0x0800dbe4
 80051c0:	0800dbf0 	.word	0x0800dbf0
 80051c4:	200003c0 	.word	0x200003c0
 80051c8:	200002e0 	.word	0x200002e0

080051cc <eepromKontrol>:

void eepromKontrol(int type) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af04      	add	r7, sp, #16
 80051d2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80051d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	236e      	movs	r3, #110	; 0x6e
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	4b9c      	ldr	r3, [pc, #624]	; (8005450 <eepromKontrol+0x284>)
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	236e      	movs	r3, #110	; 0x6e
 80051e4:	2200      	movs	r2, #0
 80051e6:	21a0      	movs	r1, #160	; 0xa0
 80051e8:	489a      	ldr	r0, [pc, #616]	; (8005454 <eepromKontrol+0x288>)
 80051ea:	f004 fc79 	bl	8009ae0 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 80051ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051f2:	f003 faf1 	bl	80087d8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80051f6:	4b96      	ldr	r3, [pc, #600]	; (8005450 <eepromKontrol+0x284>)
 80051f8:	78da      	ldrb	r2, [r3, #3]
 80051fa:	4b97      	ldr	r3, [pc, #604]	; (8005458 <eepromKontrol+0x28c>)
 80051fc:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80051fe:	4b94      	ldr	r3, [pc, #592]	; (8005450 <eepromKontrol+0x284>)
 8005200:	785a      	ldrb	r2, [r3, #1]
 8005202:	4b96      	ldr	r3, [pc, #600]	; (800545c <eepromKontrol+0x290>)
 8005204:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005206:	4b92      	ldr	r3, [pc, #584]	; (8005450 <eepromKontrol+0x284>)
 8005208:	789a      	ldrb	r2, [r3, #2]
 800520a:	4b95      	ldr	r3, [pc, #596]	; (8005460 <eepromKontrol+0x294>)
 800520c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800520e:	4b90      	ldr	r3, [pc, #576]	; (8005450 <eepromKontrol+0x284>)
 8005210:	791a      	ldrb	r2, [r3, #4]
 8005212:	4b94      	ldr	r3, [pc, #592]	; (8005464 <eepromKontrol+0x298>)
 8005214:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005216:	4b8e      	ldr	r3, [pc, #568]	; (8005450 <eepromKontrol+0x284>)
 8005218:	795a      	ldrb	r2, [r3, #5]
 800521a:	4b93      	ldr	r3, [pc, #588]	; (8005468 <eepromKontrol+0x29c>)
 800521c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800521e:	4b8c      	ldr	r3, [pc, #560]	; (8005450 <eepromKontrol+0x284>)
 8005220:	799a      	ldrb	r2, [r3, #6]
 8005222:	4b92      	ldr	r3, [pc, #584]	; (800546c <eepromKontrol+0x2a0>)
 8005224:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005226:	4b8a      	ldr	r3, [pc, #552]	; (8005450 <eepromKontrol+0x284>)
 8005228:	79da      	ldrb	r2, [r3, #7]
 800522a:	4b91      	ldr	r3, [pc, #580]	; (8005470 <eepromKontrol+0x2a4>)
 800522c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800522e:	4b88      	ldr	r3, [pc, #544]	; (8005450 <eepromKontrol+0x284>)
 8005230:	7a1a      	ldrb	r2, [r3, #8]
 8005232:	4b90      	ldr	r3, [pc, #576]	; (8005474 <eepromKontrol+0x2a8>)
 8005234:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005236:	4b86      	ldr	r3, [pc, #536]	; (8005450 <eepromKontrol+0x284>)
 8005238:	7a5a      	ldrb	r2, [r3, #9]
 800523a:	4b8f      	ldr	r3, [pc, #572]	; (8005478 <eepromKontrol+0x2ac>)
 800523c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800523e:	4b84      	ldr	r3, [pc, #528]	; (8005450 <eepromKontrol+0x284>)
 8005240:	7a9a      	ldrb	r2, [r3, #10]
 8005242:	4b8e      	ldr	r3, [pc, #568]	; (800547c <eepromKontrol+0x2b0>)
 8005244:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005246:	4b82      	ldr	r3, [pc, #520]	; (8005450 <eepromKontrol+0x284>)
 8005248:	7ada      	ldrb	r2, [r3, #11]
 800524a:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <eepromKontrol+0x2b4>)
 800524c:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 800524e:	4b80      	ldr	r3, [pc, #512]	; (8005450 <eepromKontrol+0x284>)
 8005250:	7b1a      	ldrb	r2, [r3, #12]
 8005252:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <eepromKontrol+0x2b8>)
 8005254:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005256:	4b7e      	ldr	r3, [pc, #504]	; (8005450 <eepromKontrol+0x284>)
 8005258:	7b5a      	ldrb	r2, [r3, #13]
 800525a:	4b8b      	ldr	r3, [pc, #556]	; (8005488 <eepromKontrol+0x2bc>)
 800525c:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 800525e:	4b7c      	ldr	r3, [pc, #496]	; (8005450 <eepromKontrol+0x284>)
 8005260:	7b9a      	ldrb	r2, [r3, #14]
 8005262:	4b8a      	ldr	r3, [pc, #552]	; (800548c <eepromKontrol+0x2c0>)
 8005264:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005266:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <eepromKontrol+0x284>)
 8005268:	7bda      	ldrb	r2, [r3, #15]
 800526a:	4b89      	ldr	r3, [pc, #548]	; (8005490 <eepromKontrol+0x2c4>)
 800526c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 800526e:	4b78      	ldr	r3, [pc, #480]	; (8005450 <eepromKontrol+0x284>)
 8005270:	7c1a      	ldrb	r2, [r3, #16]
 8005272:	4b88      	ldr	r3, [pc, #544]	; (8005494 <eepromKontrol+0x2c8>)
 8005274:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005276:	4b76      	ldr	r3, [pc, #472]	; (8005450 <eepromKontrol+0x284>)
 8005278:	7c5a      	ldrb	r2, [r3, #17]
 800527a:	4b87      	ldr	r3, [pc, #540]	; (8005498 <eepromKontrol+0x2cc>)
 800527c:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 800527e:	4b74      	ldr	r3, [pc, #464]	; (8005450 <eepromKontrol+0x284>)
 8005280:	7c9a      	ldrb	r2, [r3, #18]
 8005282:	4b86      	ldr	r3, [pc, #536]	; (800549c <eepromKontrol+0x2d0>)
 8005284:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005286:	4b72      	ldr	r3, [pc, #456]	; (8005450 <eepromKontrol+0x284>)
 8005288:	7cda      	ldrb	r2, [r3, #19]
 800528a:	4b85      	ldr	r3, [pc, #532]	; (80054a0 <eepromKontrol+0x2d4>)
 800528c:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 800528e:	4b70      	ldr	r3, [pc, #448]	; (8005450 <eepromKontrol+0x284>)
 8005290:	7d1a      	ldrb	r2, [r3, #20]
 8005292:	4b84      	ldr	r3, [pc, #528]	; (80054a4 <eepromKontrol+0x2d8>)
 8005294:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005296:	4b6e      	ldr	r3, [pc, #440]	; (8005450 <eepromKontrol+0x284>)
 8005298:	7d5a      	ldrb	r2, [r3, #21]
 800529a:	4b83      	ldr	r3, [pc, #524]	; (80054a8 <eepromKontrol+0x2dc>)
 800529c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 800529e:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <eepromKontrol+0x284>)
 80052a0:	7d9a      	ldrb	r2, [r3, #22]
 80052a2:	4b82      	ldr	r3, [pc, #520]	; (80054ac <eepromKontrol+0x2e0>)
 80052a4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80052a6:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <eepromKontrol+0x284>)
 80052a8:	7dda      	ldrb	r2, [r3, #23]
 80052aa:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <eepromKontrol+0x2e4>)
 80052ac:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80052ae:	4b68      	ldr	r3, [pc, #416]	; (8005450 <eepromKontrol+0x284>)
 80052b0:	7e1a      	ldrb	r2, [r3, #24]
 80052b2:	4b80      	ldr	r3, [pc, #512]	; (80054b4 <eepromKontrol+0x2e8>)
 80052b4:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80052b6:	4b66      	ldr	r3, [pc, #408]	; (8005450 <eepromKontrol+0x284>)
 80052b8:	7e5a      	ldrb	r2, [r3, #25]
 80052ba:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <eepromKontrol+0x2ec>)
 80052bc:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80052be:	4b64      	ldr	r3, [pc, #400]	; (8005450 <eepromKontrol+0x284>)
 80052c0:	7e9a      	ldrb	r2, [r3, #26]
 80052c2:	4b7e      	ldr	r3, [pc, #504]	; (80054bc <eepromKontrol+0x2f0>)
 80052c4:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80052c6:	4b62      	ldr	r3, [pc, #392]	; (8005450 <eepromKontrol+0x284>)
 80052c8:	7eda      	ldrb	r2, [r3, #27]
 80052ca:	4b7d      	ldr	r3, [pc, #500]	; (80054c0 <eepromKontrol+0x2f4>)
 80052cc:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80052ce:	4b60      	ldr	r3, [pc, #384]	; (8005450 <eepromKontrol+0x284>)
 80052d0:	7f1a      	ldrb	r2, [r3, #28]
 80052d2:	4b7c      	ldr	r3, [pc, #496]	; (80054c4 <eepromKontrol+0x2f8>)
 80052d4:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80052d6:	4b5e      	ldr	r3, [pc, #376]	; (8005450 <eepromKontrol+0x284>)
 80052d8:	7f5a      	ldrb	r2, [r3, #29]
 80052da:	4b7b      	ldr	r3, [pc, #492]	; (80054c8 <eepromKontrol+0x2fc>)
 80052dc:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80052de:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <eepromKontrol+0x284>)
 80052e0:	7f9a      	ldrb	r2, [r3, #30]
 80052e2:	4b7a      	ldr	r3, [pc, #488]	; (80054cc <eepromKontrol+0x300>)
 80052e4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80052e6:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <eepromKontrol+0x284>)
 80052e8:	7fda      	ldrb	r2, [r3, #31]
 80052ea:	4b79      	ldr	r3, [pc, #484]	; (80054d0 <eepromKontrol+0x304>)
 80052ec:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80052ee:	4b58      	ldr	r3, [pc, #352]	; (8005450 <eepromKontrol+0x284>)
 80052f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80052f4:	4b77      	ldr	r3, [pc, #476]	; (80054d4 <eepromKontrol+0x308>)
 80052f6:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80052f8:	4b55      	ldr	r3, [pc, #340]	; (8005450 <eepromKontrol+0x284>)
 80052fa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80052fe:	4b76      	ldr	r3, [pc, #472]	; (80054d8 <eepromKontrol+0x30c>)
 8005300:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005302:	4b53      	ldr	r3, [pc, #332]	; (8005450 <eepromKontrol+0x284>)
 8005304:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005308:	4b74      	ldr	r3, [pc, #464]	; (80054dc <eepromKontrol+0x310>)
 800530a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800530c:	4b50      	ldr	r3, [pc, #320]	; (8005450 <eepromKontrol+0x284>)
 800530e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005312:	4b73      	ldr	r3, [pc, #460]	; (80054e0 <eepromKontrol+0x314>)
 8005314:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005316:	4b4e      	ldr	r3, [pc, #312]	; (8005450 <eepromKontrol+0x284>)
 8005318:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800531c:	4b71      	ldr	r3, [pc, #452]	; (80054e4 <eepromKontrol+0x318>)
 800531e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005320:	4b4b      	ldr	r3, [pc, #300]	; (8005450 <eepromKontrol+0x284>)
 8005322:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005326:	4b70      	ldr	r3, [pc, #448]	; (80054e8 <eepromKontrol+0x31c>)
 8005328:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800532a:	4b49      	ldr	r3, [pc, #292]	; (8005450 <eepromKontrol+0x284>)
 800532c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005330:	4b6e      	ldr	r3, [pc, #440]	; (80054ec <eepromKontrol+0x320>)
 8005332:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005334:	4b46      	ldr	r3, [pc, #280]	; (8005450 <eepromKontrol+0x284>)
 8005336:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800533a:	4b6d      	ldr	r3, [pc, #436]	; (80054f0 <eepromKontrol+0x324>)
 800533c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800533e:	4b44      	ldr	r3, [pc, #272]	; (8005450 <eepromKontrol+0x284>)
 8005340:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005344:	4b6b      	ldr	r3, [pc, #428]	; (80054f4 <eepromKontrol+0x328>)
 8005346:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005348:	4b41      	ldr	r3, [pc, #260]	; (8005450 <eepromKontrol+0x284>)
 800534a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800534e:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <eepromKontrol+0x32c>)
 8005350:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005352:	4b3f      	ldr	r3, [pc, #252]	; (8005450 <eepromKontrol+0x284>)
 8005354:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005358:	4b68      	ldr	r3, [pc, #416]	; (80054fc <eepromKontrol+0x330>)
 800535a:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 800535c:	4b3c      	ldr	r3, [pc, #240]	; (8005450 <eepromKontrol+0x284>)
 800535e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005362:	4b67      	ldr	r3, [pc, #412]	; (8005500 <eepromKontrol+0x334>)
 8005364:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005366:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <eepromKontrol+0x284>)
 8005368:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800536c:	4b65      	ldr	r3, [pc, #404]	; (8005504 <eepromKontrol+0x338>)
 800536e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005370:	4b37      	ldr	r3, [pc, #220]	; (8005450 <eepromKontrol+0x284>)
 8005372:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005376:	4b64      	ldr	r3, [pc, #400]	; (8005508 <eepromKontrol+0x33c>)
 8005378:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 800537a:	4b35      	ldr	r3, [pc, #212]	; (8005450 <eepromKontrol+0x284>)
 800537c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005380:	4b62      	ldr	r3, [pc, #392]	; (800550c <eepromKontrol+0x340>)
 8005382:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005384:	4b32      	ldr	r3, [pc, #200]	; (8005450 <eepromKontrol+0x284>)
 8005386:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800538a:	4b61      	ldr	r3, [pc, #388]	; (8005510 <eepromKontrol+0x344>)
 800538c:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 800538e:	4b51      	ldr	r3, [pc, #324]	; (80054d4 <eepromKontrol+0x308>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b09      	cmp	r3, #9
 8005394:	d902      	bls.n	800539c <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 8005396:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <eepromKontrol+0x308>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800539c:	4b4c      	ldr	r3, [pc, #304]	; (80054d0 <eepromKontrol+0x304>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b09      	cmp	r3, #9
 80053a2:	d902      	bls.n	80053aa <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 80053a4:	4b4a      	ldr	r3, [pc, #296]	; (80054d0 <eepromKontrol+0x304>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <eepromKontrol+0x300>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b09      	cmp	r3, #9
 80053b0:	d902      	bls.n	80053b8 <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 80053b2:	4b46      	ldr	r3, [pc, #280]	; (80054cc <eepromKontrol+0x300>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80053b8:	4b43      	ldr	r3, [pc, #268]	; (80054c8 <eepromKontrol+0x2fc>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d902      	bls.n	80053c6 <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 80053c0:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <eepromKontrol+0x2fc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80053c6:	4b3f      	ldr	r3, [pc, #252]	; (80054c4 <eepromKontrol+0x2f8>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b09      	cmp	r3, #9
 80053cc:	d902      	bls.n	80053d4 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 80053ce:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <eepromKontrol+0x2f8>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80053d4:	4b21      	ldr	r3, [pc, #132]	; (800545c <eepromKontrol+0x290>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d902      	bls.n	80053e2 <eepromKontrol+0x216>
	    calismaSekli=0;
 80053dc:	4b1f      	ldr	r3, [pc, #124]	; (800545c <eepromKontrol+0x290>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80053e2:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <eepromKontrol+0x294>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d902      	bls.n	80053f0 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <eepromKontrol+0x294>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <eepromKontrol+0x298>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d902      	bls.n	80053fe <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 80053f8:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <eepromKontrol+0x298>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80053fe:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <eepromKontrol+0x29c>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d902      	bls.n	800540c <eepromKontrol+0x240>
	    altLimit=1;
 8005406:	4b18      	ldr	r3, [pc, #96]	; (8005468 <eepromKontrol+0x29c>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <eepromKontrol+0x2a0>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d902      	bls.n	800541a <eepromKontrol+0x24e>
	    basincSalteri=1;
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <eepromKontrol+0x2a0>)
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <eepromKontrol+0x2a4>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d902      	bls.n	8005428 <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8005422:	4b13      	ldr	r3, [pc, #76]	; (8005470 <eepromKontrol+0x2a4>)
 8005424:	2203      	movs	r2, #3
 8005426:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005428:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <eepromKontrol+0x31c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d902      	bls.n	8005436 <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005430:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <eepromKontrol+0x31c>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <eepromKontrol+0x2a8>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d902      	bls.n	8005444 <eepromKontrol+0x278>
	    kapi1Tip=1;
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <eepromKontrol+0x2a8>)
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <eepromKontrol+0x2ac>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d966      	bls.n	800551a <eepromKontrol+0x34e>
 800544c:	e062      	b.n	8005514 <eepromKontrol+0x348>
 800544e:	bf00      	nop
 8005450:	20000328 	.word	0x20000328
 8005454:	20000244 	.word	0x20000244
 8005458:	20000396 	.word	0x20000396
 800545c:	200003f9 	.word	0x200003f9
 8005460:	200003fc 	.word	0x200003fc
 8005464:	200003fd 	.word	0x200003fd
 8005468:	200003fe 	.word	0x200003fe
 800546c:	200003ff 	.word	0x200003ff
 8005470:	20000400 	.word	0x20000400
 8005474:	20000401 	.word	0x20000401
 8005478:	20000411 	.word	0x20000411
 800547c:	20000402 	.word	0x20000402
 8005480:	20000412 	.word	0x20000412
 8005484:	20000403 	.word	0x20000403
 8005488:	20000413 	.word	0x20000413
 800548c:	20000406 	.word	0x20000406
 8005490:	20000407 	.word	0x20000407
 8005494:	20000408 	.word	0x20000408
 8005498:	20000409 	.word	0x20000409
 800549c:	2000040a 	.word	0x2000040a
 80054a0:	2000040b 	.word	0x2000040b
 80054a4:	2000040c 	.word	0x2000040c
 80054a8:	2000040d 	.word	0x2000040d
 80054ac:	2000040e 	.word	0x2000040e
 80054b0:	2000040f 	.word	0x2000040f
 80054b4:	20000410 	.word	0x20000410
 80054b8:	20000414 	.word	0x20000414
 80054bc:	20000416 	.word	0x20000416
 80054c0:	200003f4 	.word	0x200003f4
 80054c4:	200003f5 	.word	0x200003f5
 80054c8:	200003f6 	.word	0x200003f6
 80054cc:	200000a4 	.word	0x200000a4
 80054d0:	200000a5 	.word	0x200000a5
 80054d4:	200003f7 	.word	0x200003f7
 80054d8:	20000419 	.word	0x20000419
 80054dc:	20000417 	.word	0x20000417
 80054e0:	20000405 	.word	0x20000405
 80054e4:	20000418 	.word	0x20000418
 80054e8:	20000404 	.word	0x20000404
 80054ec:	2000041a 	.word	0x2000041a
 80054f0:	2000041b 	.word	0x2000041b
 80054f4:	2000041c 	.word	0x2000041c
 80054f8:	2000041d 	.word	0x2000041d
 80054fc:	2000041e 	.word	0x2000041e
 8005500:	2000041f 	.word	0x2000041f
 8005504:	20000420 	.word	0x20000420
 8005508:	20000421 	.word	0x20000421
 800550c:	20000422 	.word	0x20000422
 8005510:	20000423 	.word	0x20000423
	    kapi1AcSure=5;
 8005514:	4b56      	ldr	r3, [pc, #344]	; (8005670 <eepromKontrol+0x4a4>)
 8005516:	2205      	movs	r2, #5
 8005518:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <eepromKontrol+0x4a8>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d902      	bls.n	8005528 <eepromKontrol+0x35c>
	    kapi2Tip=1;
 8005522:	4b54      	ldr	r3, [pc, #336]	; (8005674 <eepromKontrol+0x4a8>)
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005528:	4b53      	ldr	r3, [pc, #332]	; (8005678 <eepromKontrol+0x4ac>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b05      	cmp	r3, #5
 800552e:	d902      	bls.n	8005536 <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005530:	4b51      	ldr	r3, [pc, #324]	; (8005678 <eepromKontrol+0x4ac>)
 8005532:	2205      	movs	r2, #5
 8005534:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005536:	4b51      	ldr	r3, [pc, #324]	; (800567c <eepromKontrol+0x4b0>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d902      	bls.n	8005544 <eepromKontrol+0x378>
	    kapitablaTip=1;
 800553e:	4b4f      	ldr	r3, [pc, #316]	; (800567c <eepromKontrol+0x4b0>)
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005544:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <eepromKontrol+0x4b4>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d902      	bls.n	8005552 <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <eepromKontrol+0x4b4>)
 800554e:	2202      	movs	r2, #2
 8005550:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005552:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <eepromKontrol+0x4b8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b05      	cmp	r3, #5
 8005558:	d902      	bls.n	8005560 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <eepromKontrol+0x4b8>)
 800555c:	2205      	movs	r2, #5
 800555e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005560:	4b49      	ldr	r3, [pc, #292]	; (8005688 <eepromKontrol+0x4bc>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d902      	bls.n	800556e <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 8005568:	4b47      	ldr	r3, [pc, #284]	; (8005688 <eepromKontrol+0x4bc>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <eepromKontrol+0x4c0>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d902      	bls.n	800557c <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 8005576:	4b45      	ldr	r3, [pc, #276]	; (800568c <eepromKontrol+0x4c0>)
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800557c:	4b44      	ldr	r3, [pc, #272]	; (8005690 <eepromKontrol+0x4c4>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d902      	bls.n	800558a <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 8005584:	4b42      	ldr	r3, [pc, #264]	; (8005690 <eepromKontrol+0x4c4>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800558a:	4b42      	ldr	r3, [pc, #264]	; (8005694 <eepromKontrol+0x4c8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d902      	bls.n	8005598 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 8005592:	4b40      	ldr	r3, [pc, #256]	; (8005694 <eepromKontrol+0x4c8>)
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005598:	4b3f      	ldr	r3, [pc, #252]	; (8005698 <eepromKontrol+0x4cc>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d902      	bls.n	80055a6 <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 80055a0:	4b3d      	ldr	r3, [pc, #244]	; (8005698 <eepromKontrol+0x4cc>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80055a6:	4b3d      	ldr	r3, [pc, #244]	; (800569c <eepromKontrol+0x4d0>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d902      	bls.n	80055b4 <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 80055ae:	4b3b      	ldr	r3, [pc, #236]	; (800569c <eepromKontrol+0x4d0>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80055b4:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <eepromKontrol+0x4d4>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	d902      	bls.n	80055c2 <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 80055bc:	4b38      	ldr	r3, [pc, #224]	; (80056a0 <eepromKontrol+0x4d4>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80055c2:	4b38      	ldr	r3, [pc, #224]	; (80056a4 <eepromKontrol+0x4d8>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d902      	bls.n	80055d0 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 80055ca:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <eepromKontrol+0x4d8>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80055d0:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <eepromKontrol+0x4dc>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d902      	bls.n	80055de <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 80055d8:	4b33      	ldr	r3, [pc, #204]	; (80056a8 <eepromKontrol+0x4dc>)
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80055de:	4b33      	ldr	r3, [pc, #204]	; (80056ac <eepromKontrol+0x4e0>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d902      	bls.n	80055ec <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 80055e6:	4b31      	ldr	r3, [pc, #196]	; (80056ac <eepromKontrol+0x4e0>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80055ec:	4b30      	ldr	r3, [pc, #192]	; (80056b0 <eepromKontrol+0x4e4>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2bb4      	cmp	r3, #180	; 0xb4
 80055f2:	d902      	bls.n	80055fa <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <eepromKontrol+0x4e4>)
 80055f6:	223c      	movs	r2, #60	; 0x3c
 80055f8:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80055fa:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <eepromKontrol+0x4e8>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d902      	bls.n	8005608 <eepromKontrol+0x43c>
	    buzzer=0;
 8005602:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <eepromKontrol+0x4e8>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005608:	4b2b      	ldr	r3, [pc, #172]	; (80056b8 <eepromKontrol+0x4ec>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d902      	bls.n	8005616 <eepromKontrol+0x44a>
	    demoMode=0;
 8005610:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <eepromKontrol+0x4ec>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005616:	4b29      	ldr	r3, [pc, #164]	; (80056bc <eepromKontrol+0x4f0>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d902      	bls.n	8005624 <eepromKontrol+0x458>
	    calismaSayModu=0;
 800561e:	4b27      	ldr	r3, [pc, #156]	; (80056bc <eepromKontrol+0x4f0>)
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005624:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <eepromKontrol+0x4f4>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d902      	bls.n	8005632 <eepromKontrol+0x466>
	    dilSecim=0;
 800562c:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <eepromKontrol+0x4f4>)
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <eepromKontrol+0x4f8>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d902      	bls.n	8005640 <eepromKontrol+0x474>
		iotMode=0;
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <eepromKontrol+0x4f8>)
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <eepromKontrol+0x4fc>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	4b21      	ldr	r3, [pc, #132]	; (80056cc <eepromKontrol+0x500>)
 8005648:	441a      	add	r2, r3
 800564a:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <eepromKontrol+0x504>)
 800564c:	6810      	ldr	r0, [r2, #0]
 800564e:	6851      	ldr	r1, [r2, #4]
 8005650:	6892      	ldr	r2, [r2, #8]
 8005652:	c307      	stmia	r3!, {r0, r1, r2}
	readValFromEEPROM(1); //SSID Okuma
 8005654:	2001      	movs	r0, #1
 8005656:	f7fc f809 	bl	800166c <readValFromEEPROM>
	HAL_Delay(250);
 800565a:	20fa      	movs	r0, #250	; 0xfa
 800565c:	f003 f8bc 	bl	80087d8 <HAL_Delay>
	readValFromEEPROM(2); //Pass Okuma
 8005660:	2002      	movs	r0, #2
 8005662:	f7fc f803 	bl	800166c <readValFromEEPROM>
	//readWiFiCredentialsFromEEPROM(wifiSSID, wifiPass);
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000411 	.word	0x20000411
 8005674:	20000402 	.word	0x20000402
 8005678:	20000412 	.word	0x20000412
 800567c:	20000403 	.word	0x20000403
 8005680:	20000405 	.word	0x20000405
 8005684:	20000413 	.word	0x20000413
 8005688:	20000406 	.word	0x20000406
 800568c:	20000407 	.word	0x20000407
 8005690:	20000408 	.word	0x20000408
 8005694:	20000409 	.word	0x20000409
 8005698:	2000040a 	.word	0x2000040a
 800569c:	2000040b 	.word	0x2000040b
 80056a0:	2000040c 	.word	0x2000040c
 80056a4:	2000040d 	.word	0x2000040d
 80056a8:	2000040e 	.word	0x2000040e
 80056ac:	2000040f 	.word	0x2000040f
 80056b0:	20000410 	.word	0x20000410
 80056b4:	20000414 	.word	0x20000414
 80056b8:	20000416 	.word	0x20000416
 80056bc:	20000418 	.word	0x20000418
 80056c0:	20000419 	.word	0x20000419
 80056c4:	20000417 	.word	0x20000417
 80056c8:	200000a1 	.word	0x200000a1
 80056cc:	20000328 	.word	0x20000328
 80056d0:	200003c0 	.word	0x200003c0

080056d4 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b089      	sub	sp, #36	; 0x24
 80056d8:	af04      	add	r7, sp, #16
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <hata2EEPROM+0xa4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <hata2EEPROM+0xa8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	4a25      	ldr	r2, [pc, #148]	; (8005780 <hata2EEPROM+0xac>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80056f2:	f000 f849 	bl	8005788 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80056f6:	e000      	b.n	80056fa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80056f8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e012      	b.n	8005726 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005700:	4b1e      	ldr	r3, [pc, #120]	; (800577c <hata2EEPROM+0xa8>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <hata2EEPROM+0xac>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d107      	bne.n	8005720 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005710:	4b1a      	ldr	r3, [pc, #104]	; (800577c <hata2EEPROM+0xa8>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	4919      	ldr	r1, [pc, #100]	; (8005780 <hata2EEPROM+0xac>)
 800571a:	79fa      	ldrb	r2, [r7, #7]
 800571c:	54ca      	strb	r2, [r1, r3]
					break;
 800571e:	e007      	b.n	8005730 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <hata2EEPROM+0xa4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	dbe7      	blt.n	8005700 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <hata2EEPROM+0xa8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	b299      	uxth	r1, r3
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <hata2EEPROM+0xa4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	b298      	uxth	r0, r3
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <hata2EEPROM+0xa8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <hata2EEPROM+0xac>)
 8005742:	4413      	add	r3, r2
 8005744:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <hata2EEPROM+0xa4>)
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	b292      	uxth	r2, r2
 800574a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800574e:	9402      	str	r4, [sp, #8]
 8005750:	9201      	str	r2, [sp, #4]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4603      	mov	r3, r0
 8005756:	460a      	mov	r2, r1
 8005758:	21a0      	movs	r1, #160	; 0xa0
 800575a:	480a      	ldr	r0, [pc, #40]	; (8005784 <hata2EEPROM+0xb0>)
 800575c:	f004 f8c6 	bl	80098ec <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005760:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005764:	f003 f838 	bl	80087d8 <HAL_Delay>
	eepromKontrol(1);
 8005768:	2001      	movs	r0, #1
 800576a:	f7ff fd2f 	bl	80051cc <eepromKontrol>
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bd90      	pop	{r4, r7, pc}
 8005776:	bf00      	nop
 8005778:	20000028 	.word	0x20000028
 800577c:	2000002c 	.word	0x2000002c
 8005780:	20000328 	.word	0x20000328
 8005784:	20000244 	.word	0x20000244

08005788 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	e009      	b.n	80057a8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <eepromDataFillWithEmpty+0x38>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579c:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <eepromDataFillWithEmpty+0x3c>)
 800579e:	2100      	movs	r1, #0
 80057a0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3301      	adds	r3, #1
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <eepromDataFillWithEmpty+0x40>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	dbf0      	blt.n	8005794 <eepromDataFillWithEmpty+0xc>
	}
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	20000000 	.word	0x20000000
 80057c4:	20000328 	.word	0x20000328
 80057c8:	20000028 	.word	0x20000028

080057cc <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	timer1=millis;
 80057d0:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <bekle+0x124>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a47      	ldr	r2, [pc, #284]	; (80058f4 <bekle+0x128>)
 80057d6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057d8:	e002      	b.n	80057e0 <bekle+0x14>
    	butonKontrol = 1;
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <bekle+0x12c>)
 80057dc:	2201      	movs	r2, #1
 80057de:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057e0:	2101      	movs	r1, #1
 80057e2:	4846      	ldr	r0, [pc, #280]	; (80058fc <bekle+0x130>)
 80057e4:	f003 fdc8 	bl	8009378 <HAL_GPIO_ReadPin>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d109      	bne.n	8005802 <bekle+0x36>
 80057ee:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <bekle+0x124>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b40      	ldr	r3, [pc, #256]	; (80058f4 <bekle+0x128>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d0ef      	beq.n	80057da <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057fa:	e002      	b.n	8005802 <bekle+0x36>
    	butonKontrol = 1;
 80057fc:	4b3e      	ldr	r3, [pc, #248]	; (80058f8 <bekle+0x12c>)
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005802:	2108      	movs	r1, #8
 8005804:	483e      	ldr	r0, [pc, #248]	; (8005900 <bekle+0x134>)
 8005806:	f003 fdb7 	bl	8009378 <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d109      	bne.n	8005824 <bekle+0x58>
 8005810:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <bekle+0x124>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <bekle+0x128>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d0ef      	beq.n	80057fc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800581c:	e002      	b.n	8005824 <bekle+0x58>
    	butonKontrol = 1;
 800581e:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <bekle+0x12c>)
 8005820:	2201      	movs	r2, #1
 8005822:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005824:	2102      	movs	r1, #2
 8005826:	4835      	ldr	r0, [pc, #212]	; (80058fc <bekle+0x130>)
 8005828:	f003 fda6 	bl	8009378 <HAL_GPIO_ReadPin>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d109      	bne.n	8005846 <bekle+0x7a>
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <bekle+0x124>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <bekle+0x128>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d0ef      	beq.n	800581e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800583e:	e002      	b.n	8005846 <bekle+0x7a>
    	butonKontrol = 1;
 8005840:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <bekle+0x12c>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005846:	2104      	movs	r1, #4
 8005848:	482c      	ldr	r0, [pc, #176]	; (80058fc <bekle+0x130>)
 800584a:	f003 fd95 	bl	8009378 <HAL_GPIO_ReadPin>
 800584e:	4603      	mov	r3, r0
 8005850:	2b01      	cmp	r3, #1
 8005852:	d109      	bne.n	8005868 <bekle+0x9c>
 8005854:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <bekle+0x124>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <bekle+0x128>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d0ef      	beq.n	8005840 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005860:	e002      	b.n	8005868 <bekle+0x9c>
    	butonKontrol = 1;
 8005862:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <bekle+0x12c>)
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005868:	2108      	movs	r1, #8
 800586a:	4824      	ldr	r0, [pc, #144]	; (80058fc <bekle+0x130>)
 800586c:	f003 fd84 	bl	8009378 <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b01      	cmp	r3, #1
 8005874:	d109      	bne.n	800588a <bekle+0xbe>
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <bekle+0x124>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <bekle+0x128>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d0ef      	beq.n	8005862 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005882:	e002      	b.n	800588a <bekle+0xbe>
    	butonKontrol = 1;
 8005884:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <bekle+0x12c>)
 8005886:	2201      	movs	r2, #1
 8005888:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	481c      	ldr	r0, [pc, #112]	; (8005900 <bekle+0x134>)
 800588e:	f003 fd73 	bl	8009378 <HAL_GPIO_ReadPin>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <bekle+0xe0>
 8005898:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <bekle+0x124>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <bekle+0x128>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d0ef      	beq.n	8005884 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80058a4:	e002      	b.n	80058ac <bekle+0xe0>
    	butonKontrol = 1;
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <bekle+0x12c>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80058ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058b0:	4813      	ldr	r0, [pc, #76]	; (8005900 <bekle+0x134>)
 80058b2:	f003 fd61 	bl	8009378 <HAL_GPIO_ReadPin>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <bekle+0x104>
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <bekle+0x124>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <bekle+0x128>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d0ee      	beq.n	80058a6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80058c8:	e002      	b.n	80058d0 <bekle+0x104>
    	butonKontrol = 1;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <bekle+0x12c>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80058d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058d4:	480a      	ldr	r0, [pc, #40]	; (8005900 <bekle+0x134>)
 80058d6:	f003 fd4f 	bl	8009378 <HAL_GPIO_ReadPin>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <bekle+0x120>
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <bekle+0x124>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <bekle+0x128>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0ee      	beq.n	80058ca <bekle+0xfe>
    }

}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	200003a0 	.word	0x200003a0
 80058f4:	200003a8 	.word	0x200003a8
 80058f8:	20000427 	.word	0x20000427
 80058fc:	40010800 	.word	0x40010800
 8005900:	40011000 	.word	0x40011000

08005904 <i2cTest>:

void i2cTest() {
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800590a:	463b      	mov	r3, r7
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8005916:	4b50      	ldr	r3, [pc, #320]	; (8005a58 <i2cTest+0x154>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <i2cTest+0x154>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8005926:	484c      	ldr	r0, [pc, #304]	; (8005a58 <i2cTest+0x154>)
 8005928:	f003 feb2 	bl	8009690 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800592c:	23c0      	movs	r3, #192	; 0xc0
 800592e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005930:	2311      	movs	r3, #17
 8005932:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005934:	2301      	movs	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005938:	2303      	movs	r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800593c:	463b      	mov	r3, r7
 800593e:	4619      	mov	r1, r3
 8005940:	4846      	ldr	r0, [pc, #280]	; (8005a5c <i2cTest+0x158>)
 8005942:	f003 fab9 	bl	8008eb8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005946:	2201      	movs	r2, #1
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	4844      	ldr	r0, [pc, #272]	; (8005a5c <i2cTest+0x158>)
 800594c:	f003 fd2b 	bl	80093a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005950:	2201      	movs	r2, #1
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	4841      	ldr	r0, [pc, #260]	; (8005a5c <i2cTest+0x158>)
 8005956:	f003 fd26 	bl	80093a6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800595a:	200a      	movs	r0, #10
 800595c:	f002 ff3c 	bl	80087d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005960:	bf00      	nop
 8005962:	2140      	movs	r1, #64	; 0x40
 8005964:	483d      	ldr	r0, [pc, #244]	; (8005a5c <i2cTest+0x158>)
 8005966:	f003 fd07 	bl	8009378 <HAL_GPIO_ReadPin>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d006      	beq.n	800597e <i2cTest+0x7a>
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	483a      	ldr	r0, [pc, #232]	; (8005a5c <i2cTest+0x158>)
 8005974:	f003 fd00 	bl	8009378 <HAL_GPIO_ReadPin>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d1f1      	bne.n	8005962 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800597e:	2200      	movs	r2, #0
 8005980:	2180      	movs	r1, #128	; 0x80
 8005982:	4836      	ldr	r0, [pc, #216]	; (8005a5c <i2cTest+0x158>)
 8005984:	f003 fd0f 	bl	80093a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005988:	200a      	movs	r0, #10
 800598a:	f002 ff25 	bl	80087d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800598e:	bf00      	nop
 8005990:	2180      	movs	r1, #128	; 0x80
 8005992:	4832      	ldr	r0, [pc, #200]	; (8005a5c <i2cTest+0x158>)
 8005994:	f003 fcf0 	bl	8009378 <HAL_GPIO_ReadPin>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d0f8      	beq.n	8005990 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800599e:	2200      	movs	r2, #0
 80059a0:	2140      	movs	r1, #64	; 0x40
 80059a2:	482e      	ldr	r0, [pc, #184]	; (8005a5c <i2cTest+0x158>)
 80059a4:	f003 fcff 	bl	80093a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80059a8:	200a      	movs	r0, #10
 80059aa:	f002 ff15 	bl	80087d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80059ae:	bf00      	nop
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	482a      	ldr	r0, [pc, #168]	; (8005a5c <i2cTest+0x158>)
 80059b4:	f003 fce0 	bl	8009378 <HAL_GPIO_ReadPin>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d0f8      	beq.n	80059b0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80059be:	2201      	movs	r2, #1
 80059c0:	2140      	movs	r1, #64	; 0x40
 80059c2:	4826      	ldr	r0, [pc, #152]	; (8005a5c <i2cTest+0x158>)
 80059c4:	f003 fcef 	bl	80093a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80059c8:	200a      	movs	r0, #10
 80059ca:	f002 ff05 	bl	80087d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80059ce:	bf00      	nop
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	4822      	ldr	r0, [pc, #136]	; (8005a5c <i2cTest+0x158>)
 80059d4:	f003 fcd0 	bl	8009378 <HAL_GPIO_ReadPin>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d1f8      	bne.n	80059d0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80059de:	2201      	movs	r2, #1
 80059e0:	2180      	movs	r1, #128	; 0x80
 80059e2:	481e      	ldr	r0, [pc, #120]	; (8005a5c <i2cTest+0x158>)
 80059e4:	f003 fcdf 	bl	80093a6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80059e8:	200a      	movs	r0, #10
 80059ea:	f002 fef5 	bl	80087d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80059ee:	bf00      	nop
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	481a      	ldr	r0, [pc, #104]	; (8005a5c <i2cTest+0x158>)
 80059f4:	f003 fcc0 	bl	8009378 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d1f8      	bne.n	80059f0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059fe:	23c0      	movs	r3, #192	; 0xc0
 8005a00:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8005a02:	2312      	movs	r3, #18
 8005a04:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005a06:	2301      	movs	r3, #1
 8005a08:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005a0e:	463b      	mov	r3, r7
 8005a10:	4619      	mov	r1, r3
 8005a12:	4812      	ldr	r0, [pc, #72]	; (8005a5c <i2cTest+0x158>)
 8005a14:	f003 fa50 	bl	8008eb8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <i2cTest+0x154>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <i2cTest+0x154>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a26:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <i2cTest+0x154>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <i2cTest+0x154>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a36:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <i2cTest+0x154>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <i2cTest+0x154>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005a48:	4803      	ldr	r0, [pc, #12]	; (8005a58 <i2cTest+0x154>)
 8005a4a:	f003 fcdd 	bl	8009408 <HAL_I2C_Init>
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000244 	.word	0x20000244
 8005a5c:	40010c00 	.word	0x40010c00

08005a60 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <checkLCDBacklight+0x34>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <checkLCDBacklight+0x38>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	1ad2      	subs	r2, r2, r3
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <checkLCDBacklight+0x3c>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	460b      	mov	r3, r1
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d303      	bcc.n	8005a88 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8005a80:	2000      	movs	r0, #0
 8005a82:	f7fa fee5 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8005a86:	e002      	b.n	8005a8e <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8005a88:	2001      	movs	r0, #1
 8005a8a:	f7fa fee1 	bl	8000850 <lcd_backlight>
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	200003a0 	.word	0x200003a0
 8005a98:	200003bc 	.word	0x200003bc
 8005a9c:	20000030 	.word	0x20000030

08005aa0 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <checkBasincSalteri+0x54>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <checkBasincSalteri+0x12>
		basincVar=1;
 8005aac:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <checkBasincSalteri+0x58>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <checkBasincSalteri+0x54>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d119      	bne.n	8005aee <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005abe:	480f      	ldr	r0, [pc, #60]	; (8005afc <checkBasincSalteri+0x5c>)
 8005ac0:	f003 fc5a 	bl	8009378 <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <checkBasincSalteri+0x60>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <checkBasincSalteri+0x64>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d90a      	bls.n	8005aee <checkBasincSalteri+0x4e>
				basincVar=1;
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <checkBasincSalteri+0x58>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8005ade:	e006      	b.n	8005aee <checkBasincSalteri+0x4e>
			timer5=millis;
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <checkBasincSalteri+0x60>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a07      	ldr	r2, [pc, #28]	; (8005b04 <checkBasincSalteri+0x64>)
 8005ae6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <checkBasincSalteri+0x58>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200003ff 	.word	0x200003ff
 8005af8:	200003fb 	.word	0x200003fb
 8005afc:	40011000 	.word	0x40011000
 8005b00:	200003a0 	.word	0x200003a0
 8005b04:	200003b8 	.word	0x200003b8

08005b08 <checkBasGonder>:

void checkBasGonder() {
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005b0c:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <checkBasGonder+0x74>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10b      	bne.n	8005b2c <checkBasGonder+0x24>
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <checkBasGonder+0x78>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <checkBasGonder+0x24>
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <checkBasGonder+0x7c>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005b24:	4b18      	ldr	r3, [pc, #96]	; (8005b88 <checkBasGonder+0x80>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e009      	b.n	8005b40 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <checkBasGonder+0x78>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f083 0301 	eor.w	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005b3a:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <checkBasGonder+0x80>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <checkBasGonder+0x74>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10b      	bne.n	8005b60 <checkBasGonder+0x58>
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <checkBasGonder+0x84>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <checkBasGonder+0x58>
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <checkBasGonder+0x7c>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005b58:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <checkBasGonder+0x88>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8005b5e:	e009      	b.n	8005b74 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <checkBasGonder+0x84>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f083 0301 	eor.w	r3, r3, #1
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8005b6e:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <checkBasGonder+0x88>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	200003f9 	.word	0x200003f9
 8005b80:	2000042d 	.word	0x2000042d
 8005b84:	20000407 	.word	0x20000407
 8005b88:	20000434 	.word	0x20000434
 8005b8c:	20000430 	.word	0x20000430
 8005b90:	20000435 	.word	0x20000435

08005b94 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <checkKapiSecimleri+0x98>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005ba0:	4b23      	ldr	r3, [pc, #140]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8005ba6:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <checkKapiSecimleri+0x98>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10e      	bne.n	8005bcc <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bb2:	4820      	ldr	r0, [pc, #128]	; (8005c34 <checkKapiSecimleri+0xa0>)
 8005bb4:	f003 fbe0 	bl	8009378 <HAL_GPIO_ReadPin>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8005bbe:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e002      	b.n	8005bcc <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <checkKapiSecimleri+0x98>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d10e      	bne.n	8005bf2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bd8:	4816      	ldr	r0, [pc, #88]	; (8005c34 <checkKapiSecimleri+0xa0>)
 8005bda:	f003 fbcd 	bl	8009378 <HAL_GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d103      	bne.n	8005bec <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8005be4:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e002      	b.n	8005bf2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005bec:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <checkKapiSecimleri+0x98>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d116      	bne.n	8005c28 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bfe:	480d      	ldr	r0, [pc, #52]	; (8005c34 <checkKapiSecimleri+0xa0>)
 8005c00:	f003 fbba 	bl	8009378 <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <checkKapiSecimleri+0x8e>
 8005c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c0e:	4809      	ldr	r0, [pc, #36]	; (8005c34 <checkKapiSecimleri+0xa0>)
 8005c10:	f003 fbb2 	bl	8009378 <HAL_GPIO_ReadPin>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005c20:	e002      	b.n	8005c28 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <checkKapiSecimleri+0x9c>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000400 	.word	0x20000400
 8005c30:	2000044b 	.word	0x2000044b
 8005c34:	40010800 	.word	0x40010800

08005c38 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005c3c:	4b62      	ldr	r3, [pc, #392]	; (8005dc8 <checkAktifCalisma+0x190>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f041 833e 	bne.w	80072c2 <checkAktifCalisma+0x168a>
 8005c46:	4b61      	ldr	r3, [pc, #388]	; (8005dcc <checkAktifCalisma+0x194>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f041 8339 	bne.w	80072c2 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005c50:	4b5f      	ldr	r3, [pc, #380]	; (8005dd0 <checkAktifCalisma+0x198>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11a      	bne.n	8005c8e <checkAktifCalisma+0x56>
 8005c58:	4b5e      	ldr	r3, [pc, #376]	; (8005dd4 <checkAktifCalisma+0x19c>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d116      	bne.n	8005c8e <checkAktifCalisma+0x56>
 8005c60:	4b5d      	ldr	r3, [pc, #372]	; (8005dd8 <checkAktifCalisma+0x1a0>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <checkAktifCalisma+0x46>
 8005c68:	4b5c      	ldr	r3, [pc, #368]	; (8005ddc <checkAktifCalisma+0x1a4>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	f083 0301 	eor.w	r3, r3, #1
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <checkAktifCalisma+0x46>
 8005c76:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <checkAktifCalisma+0x1a8>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d007      	beq.n	8005c8e <checkAktifCalisma+0x56>
 8005c7e:	4b59      	ldr	r3, [pc, #356]	; (8005de4 <checkAktifCalisma+0x1ac>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d018      	beq.n	8005cb8 <checkAktifCalisma+0x80>
 8005c86:	4b58      	ldr	r3, [pc, #352]	; (8005de8 <checkAktifCalisma+0x1b0>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d114      	bne.n	8005cb8 <checkAktifCalisma+0x80>
 8005c8e:	4b57      	ldr	r3, [pc, #348]	; (8005dec <checkAktifCalisma+0x1b4>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <checkAktifCalisma+0x80>
 8005c96:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <checkAktifCalisma+0x1b8>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ca4:	4853      	ldr	r0, [pc, #332]	; (8005df4 <checkAktifCalisma+0x1bc>)
 8005ca6:	f003 fb7e 	bl	80093a6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005caa:	4b53      	ldr	r3, [pc, #332]	; (8005df8 <checkAktifCalisma+0x1c0>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005cb0:	4b52      	ldr	r3, [pc, #328]	; (8005dfc <checkAktifCalisma+0x1c4>)
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e008      	b.n	8005cca <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cbe:	484d      	ldr	r0, [pc, #308]	; (8005df4 <checkAktifCalisma+0x1bc>)
 8005cc0:	f003 fb71 	bl	80093a6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005cc4:	4b4c      	ldr	r3, [pc, #304]	; (8005df8 <checkAktifCalisma+0x1c0>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005cca:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <checkAktifCalisma+0x194>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d160      	bne.n	8005d94 <checkAktifCalisma+0x15c>
 8005cd2:	4b46      	ldr	r3, [pc, #280]	; (8005dec <checkAktifCalisma+0x1b4>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d05c      	beq.n	8005d94 <checkAktifCalisma+0x15c>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <checkAktifCalisma+0x1b8>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d058      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ce6:	4843      	ldr	r0, [pc, #268]	; (8005df4 <checkAktifCalisma+0x1bc>)
 8005ce8:	f003 fb46 	bl	8009378 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <checkAktifCalisma+0xc2>
 8005cf2:	4b43      	ldr	r3, [pc, #268]	; (8005e00 <checkAktifCalisma+0x1c8>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04c      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	4841      	ldr	r0, [pc, #260]	; (8005e04 <checkAktifCalisma+0x1cc>)
 8005cfe:	f003 fb3b 	bl	8009378 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d145      	bne.n	8005d94 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005d08:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <checkAktifCalisma+0x1d0>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d041      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d14:	4837      	ldr	r0, [pc, #220]	; (8005df4 <checkAktifCalisma+0x1bc>)
 8005d16:	f003 fb2f 	bl	8009378 <HAL_GPIO_ReadPin>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10e      	bne.n	8005d3e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d24:	4833      	ldr	r0, [pc, #204]	; (8005df4 <checkAktifCalisma+0x1bc>)
 8005d26:	f003 fb27 	bl	8009378 <HAL_GPIO_ReadPin>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d106      	bne.n	8005d3e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005d30:	2140      	movs	r1, #64	; 0x40
 8005d32:	4834      	ldr	r0, [pc, #208]	; (8005e04 <checkAktifCalisma+0x1cc>)
 8005d34:	f003 fb20 	bl	8009378 <HAL_GPIO_ReadPin>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d003      	beq.n	8005d46 <checkAktifCalisma+0x10e>
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <checkAktifCalisma+0x198>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d026      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <checkAktifCalisma+0x1a0>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01f      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005d54:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <checkAktifCalisma+0x19c>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d018      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <checkAktifCalisma+0x1ac>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f083 0301 	eor.w	r3, r3, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d011      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005d70:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <checkAktifCalisma+0x1d4>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f083 0301 	eor.w	r3, r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005d7e:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <checkAktifCalisma+0x1d8>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	f083 0301 	eor.w	r3, r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005d8c:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <checkAktifCalisma+0x198>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <checkAktifCalisma+0x198>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <checkAktifCalisma+0x198>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d03a      	beq.n	8005e18 <checkAktifCalisma+0x1e0>
 8005da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005da6:	4817      	ldr	r0, [pc, #92]	; (8005e04 <checkAktifCalisma+0x1cc>)
 8005da8:	f003 fae6 	bl	8009378 <HAL_GPIO_ReadPin>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d132      	bne.n	8005e18 <checkAktifCalisma+0x1e0>
 8005db2:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <checkAktifCalisma+0x1dc>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02e      	beq.n	8005e18 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dc0:	480c      	ldr	r0, [pc, #48]	; (8005df4 <checkAktifCalisma+0x1bc>)
 8005dc2:	f003 faf0 	bl	80093a6 <HAL_GPIO_WritePin>
 8005dc6:	e02d      	b.n	8005e24 <checkAktifCalisma+0x1ec>
 8005dc8:	20000416 	.word	0x20000416
 8005dcc:	20000415 	.word	0x20000415
 8005dd0:	2000042d 	.word	0x2000042d
 8005dd4:	2000042e 	.word	0x2000042e
 8005dd8:	20000430 	.word	0x20000430
 8005ddc:	20000428 	.word	0x20000428
 8005de0:	2000040b 	.word	0x2000040b
 8005de4:	2000042f 	.word	0x2000042f
 8005de8:	2000040a 	.word	0x2000040a
 8005dec:	2000044a 	.word	0x2000044a
 8005df0:	2000044b 	.word	0x2000044b
 8005df4:	40010c00 	.word	0x40010c00
 8005df8:	2000044c 	.word	0x2000044c
 8005dfc:	20000437 	.word	0x20000437
 8005e00:	20000434 	.word	0x20000434
 8005e04:	40011000 	.word	0x40011000
 8005e08:	200003fb 	.word	0x200003fb
 8005e0c:	20000432 	.word	0x20000432
 8005e10:	20000433 	.word	0x20000433
 8005e14:	20000406 	.word	0x20000406
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e1e:	4860      	ldr	r0, [pc, #384]	; (8005fa0 <checkAktifCalisma+0x368>)
 8005e20:	f003 fac1 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005e24:	4b5f      	ldr	r3, [pc, #380]	; (8005fa4 <checkAktifCalisma+0x36c>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <checkAktifCalisma+0x21c>
 8005e2c:	4b5e      	ldr	r3, [pc, #376]	; (8005fa8 <checkAktifCalisma+0x370>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d007      	beq.n	8005e44 <checkAktifCalisma+0x20c>
 8005e34:	4b5c      	ldr	r3, [pc, #368]	; (8005fa8 <checkAktifCalisma+0x370>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d003      	beq.n	8005e44 <checkAktifCalisma+0x20c>
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <checkAktifCalisma+0x374>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d107      	bne.n	8005e54 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005e44:	2201      	movs	r2, #1
 8005e46:	2104      	movs	r1, #4
 8005e48:	4855      	ldr	r0, [pc, #340]	; (8005fa0 <checkAktifCalisma+0x368>)
 8005e4a:	f003 faac 	bl	80093a6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005e4e:	4b58      	ldr	r3, [pc, #352]	; (8005fb0 <checkAktifCalisma+0x378>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005e54:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <checkAktifCalisma+0x378>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d02f      	beq.n	8005ebc <checkAktifCalisma+0x284>
 8005e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e60:	484f      	ldr	r0, [pc, #316]	; (8005fa0 <checkAktifCalisma+0x368>)
 8005e62:	f003 fa89 	bl	8009378 <HAL_GPIO_ReadPin>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d106      	bne.n	8005e7a <checkAktifCalisma+0x242>
 8005e6c:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <checkAktifCalisma+0x37c>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f083 0301 	eor.w	r3, r3, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <checkAktifCalisma+0x250>
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	484e      	ldr	r0, [pc, #312]	; (8005fb8 <checkAktifCalisma+0x380>)
 8005e7e:	f003 fa7b 	bl	8009378 <HAL_GPIO_ReadPin>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d119      	bne.n	8005ebc <checkAktifCalisma+0x284>
 8005e88:	4b4c      	ldr	r3, [pc, #304]	; (8005fbc <checkAktifCalisma+0x384>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <checkAktifCalisma+0x284>
 8005e90:	4b4b      	ldr	r3, [pc, #300]	; (8005fc0 <checkAktifCalisma+0x388>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <checkAktifCalisma+0x284>
 8005e98:	4b4a      	ldr	r3, [pc, #296]	; (8005fc4 <checkAktifCalisma+0x38c>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <checkAktifCalisma+0x284>
 8005ea0:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <checkAktifCalisma+0x390>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f083 0301 	eor.w	r3, r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d006      	beq.n	8005ebc <checkAktifCalisma+0x284>
			timer2=millis;
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <checkAktifCalisma+0x394>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a47      	ldr	r2, [pc, #284]	; (8005fd0 <checkAktifCalisma+0x398>)
 8005eb4:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005eb6:	4b44      	ldr	r3, [pc, #272]	; (8005fc8 <checkAktifCalisma+0x390>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005ebc:	4b43      	ldr	r3, [pc, #268]	; (8005fcc <checkAktifCalisma+0x394>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b43      	ldr	r3, [pc, #268]	; (8005fd0 <checkAktifCalisma+0x398>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	4a43      	ldr	r2, [pc, #268]	; (8005fd4 <checkAktifCalisma+0x39c>)
 8005ec8:	7812      	ldrb	r2, [r2, #0]
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d303      	bcc.n	8005ed6 <checkAktifCalisma+0x29e>
 8005ece:	4b3e      	ldr	r3, [pc, #248]	; (8005fc8 <checkAktifCalisma+0x390>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d111      	bne.n	8005efa <checkAktifCalisma+0x2c2>
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <checkAktifCalisma+0x384>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f083 0301 	eor.w	r3, r3, #1
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <checkAktifCalisma+0x2c2>
 8005ee4:	4b36      	ldr	r3, [pc, #216]	; (8005fc0 <checkAktifCalisma+0x388>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f083 0301 	eor.w	r3, r3, #1
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <checkAktifCalisma+0x2c2>
 8005ef2:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <checkAktifCalisma+0x38c>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005efa:	2200      	movs	r2, #0
 8005efc:	2104      	movs	r1, #4
 8005efe:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <checkAktifCalisma+0x368>)
 8005f00:	f003 fa51 	bl	80093a6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005f04:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <checkAktifCalisma+0x378>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <checkAktifCalisma+0x390>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005f10:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <checkAktifCalisma+0x3a0>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005f18:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <checkAktifCalisma+0x3a4>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <checkAktifCalisma+0x3a0>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d116      	bne.n	8005f54 <checkAktifCalisma+0x31c>
 8005f26:	4b2e      	ldr	r3, [pc, #184]	; (8005fe0 <checkAktifCalisma+0x3a8>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d112      	bne.n	8005f54 <checkAktifCalisma+0x31c>
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4821      	ldr	r0, [pc, #132]	; (8005fb8 <checkAktifCalisma+0x380>)
 8005f32:	f003 fa21 	bl	8009378 <HAL_GPIO_ReadPin>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <checkAktifCalisma+0x31c>
 8005f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f40:	4817      	ldr	r0, [pc, #92]	; (8005fa0 <checkAktifCalisma+0x368>)
 8005f42:	f003 fa19 	bl	8009378 <HAL_GPIO_ReadPin>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005f4c:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <checkAktifCalisma+0x3a4>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e011      	b.n	8005f78 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005f54:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <checkAktifCalisma+0x3a0>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10d      	bne.n	8005f78 <checkAktifCalisma+0x340>
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4816      	ldr	r0, [pc, #88]	; (8005fb8 <checkAktifCalisma+0x380>)
 8005f60:	f003 fa0a 	bl	8009378 <HAL_GPIO_ReadPin>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d106      	bne.n	8005f78 <checkAktifCalisma+0x340>
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <checkAktifCalisma+0x3a8>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005f72:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <checkAktifCalisma+0x3a4>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <checkAktifCalisma+0x3a0>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d134      	bne.n	8005fea <checkAktifCalisma+0x3b2>
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <checkAktifCalisma+0x3a8>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d130      	bne.n	8005fea <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005f88:	2101      	movs	r1, #1
 8005f8a:	480b      	ldr	r0, [pc, #44]	; (8005fb8 <checkAktifCalisma+0x380>)
 8005f8c:	f003 f9f4 	bl	8009378 <HAL_GPIO_ReadPin>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d126      	bne.n	8005fe4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005f96:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <checkAktifCalisma+0x3a4>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e025      	b.n	8005fea <checkAktifCalisma+0x3b2>
 8005f9e:	bf00      	nop
 8005fa0:	40010c00 	.word	0x40010c00
 8005fa4:	2000042d 	.word	0x2000042d
 8005fa8:	20000407 	.word	0x20000407
 8005fac:	2000040b 	.word	0x2000040b
 8005fb0:	20000431 	.word	0x20000431
 8005fb4:	20000434 	.word	0x20000434
 8005fb8:	40011000 	.word	0x40011000
 8005fbc:	2000044a 	.word	0x2000044a
 8005fc0:	2000044b 	.word	0x2000044b
 8005fc4:	200003fb 	.word	0x200003fb
 8005fc8:	20000429 	.word	0x20000429
 8005fcc:	200003a0 	.word	0x200003a0
 8005fd0:	200003ac 	.word	0x200003ac
 8005fd4:	2000040c 	.word	0x2000040c
 8005fd8:	200003fc 	.word	0x200003fc
 8005fdc:	2000044f 	.word	0x2000044f
 8005fe0:	200003f9 	.word	0x200003f9
			} else {
				cerceveVar=0;
 8005fe4:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <checkAktifCalisma+0x5ac>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005fea:	4b7f      	ldr	r3, [pc, #508]	; (80061e8 <checkAktifCalisma+0x5b0>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d17c      	bne.n	80060ec <checkAktifCalisma+0x4b4>
 8005ff2:	4b7e      	ldr	r3, [pc, #504]	; (80061ec <checkAktifCalisma+0x5b4>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d078      	beq.n	80060ec <checkAktifCalisma+0x4b4>
 8005ffa:	4b7d      	ldr	r3, [pc, #500]	; (80061f0 <checkAktifCalisma+0x5b8>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d074      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006006:	487b      	ldr	r0, [pc, #492]	; (80061f4 <checkAktifCalisma+0x5bc>)
 8006008:	f003 f9b6 	bl	8009378 <HAL_GPIO_ReadPin>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <checkAktifCalisma+0x3e2>
 8006012:	4b79      	ldr	r3, [pc, #484]	; (80061f8 <checkAktifCalisma+0x5c0>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d068      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800601a:	4b72      	ldr	r3, [pc, #456]	; (80061e4 <checkAktifCalisma+0x5ac>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d064      	beq.n	80060ec <checkAktifCalisma+0x4b4>
 8006022:	4b76      	ldr	r3, [pc, #472]	; (80061fc <checkAktifCalisma+0x5c4>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d05d      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006030:	2104      	movs	r1, #4
 8006032:	4873      	ldr	r0, [pc, #460]	; (8006200 <checkAktifCalisma+0x5c8>)
 8006034:	f003 f9a0 	bl	8009378 <HAL_GPIO_ReadPin>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <checkAktifCalisma+0x40e>
 800603e:	4b71      	ldr	r3, [pc, #452]	; (8006204 <checkAktifCalisma+0x5cc>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d152      	bne.n	80060ec <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800604a:	486a      	ldr	r0, [pc, #424]	; (80061f4 <checkAktifCalisma+0x5bc>)
 800604c:	f003 f994 	bl	8009378 <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10e      	bne.n	8006074 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800605a:	4866      	ldr	r0, [pc, #408]	; (80061f4 <checkAktifCalisma+0x5bc>)
 800605c:	f003 f98c 	bl	8009378 <HAL_GPIO_ReadPin>
 8006060:	4603      	mov	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d106      	bne.n	8006074 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006066:	2140      	movs	r1, #64	; 0x40
 8006068:	4865      	ldr	r0, [pc, #404]	; (8006200 <checkAktifCalisma+0x5c8>)
 800606a:	f003 f985 	bl	8009378 <HAL_GPIO_ReadPin>
 800606e:	4603      	mov	r3, r0
 8006070:	2b01      	cmp	r3, #1
 8006072:	d003      	beq.n	800607c <checkAktifCalisma+0x444>
 8006074:	4b64      	ldr	r3, [pc, #400]	; (8006208 <checkAktifCalisma+0x5d0>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d037      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800607c:	4b63      	ldr	r3, [pc, #396]	; (800620c <checkAktifCalisma+0x5d4>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f083 0301 	eor.w	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d030      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800608a:	4b61      	ldr	r3, [pc, #388]	; (8006210 <checkAktifCalisma+0x5d8>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f083 0301 	eor.w	r3, r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d029      	beq.n	80060ec <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006098:	4b5e      	ldr	r3, [pc, #376]	; (8006214 <checkAktifCalisma+0x5dc>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f083 0301 	eor.w	r3, r3, #1
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d022      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80060a6:	4b5c      	ldr	r3, [pc, #368]	; (8006218 <checkAktifCalisma+0x5e0>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f083 0301 	eor.w	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80060b4:	4b59      	ldr	r3, [pc, #356]	; (800621c <checkAktifCalisma+0x5e4>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	f083 0301 	eor.w	r3, r3, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d014      	beq.n	80060ec <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80060c2:	4b57      	ldr	r3, [pc, #348]	; (8006220 <checkAktifCalisma+0x5e8>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f083 0301 	eor.w	r3, r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80060d0:	2201      	movs	r2, #1
 80060d2:	2102      	movs	r1, #2
 80060d4:	4847      	ldr	r0, [pc, #284]	; (80061f4 <checkAktifCalisma+0x5bc>)
 80060d6:	f003 f966 	bl	80093a6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80060da:	4b4b      	ldr	r3, [pc, #300]	; (8006208 <checkAktifCalisma+0x5d0>)
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80060e0:	4b50      	ldr	r3, [pc, #320]	; (8006224 <checkAktifCalisma+0x5ec>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80060e6:	4b50      	ldr	r3, [pc, #320]	; (8006228 <checkAktifCalisma+0x5f0>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80060ec:	4b46      	ldr	r3, [pc, #280]	; (8006208 <checkAktifCalisma+0x5d0>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d033      	beq.n	800615c <checkAktifCalisma+0x524>
 80060f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060f8:	483e      	ldr	r0, [pc, #248]	; (80061f4 <checkAktifCalisma+0x5bc>)
 80060fa:	f003 f93d 	bl	8009378 <HAL_GPIO_ReadPin>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b01      	cmp	r3, #1
 8006102:	d106      	bne.n	8006112 <checkAktifCalisma+0x4da>
 8006104:	4b3c      	ldr	r3, [pc, #240]	; (80061f8 <checkAktifCalisma+0x5c0>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f083 0301 	eor.w	r3, r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <checkAktifCalisma+0x4f0>
 8006112:	2104      	movs	r1, #4
 8006114:	483a      	ldr	r0, [pc, #232]	; (8006200 <checkAktifCalisma+0x5c8>)
 8006116:	f003 f92f 	bl	8009378 <HAL_GPIO_ReadPin>
 800611a:	4603      	mov	r3, r0
 800611c:	2b01      	cmp	r3, #1
 800611e:	d11d      	bne.n	800615c <checkAktifCalisma+0x524>
 8006120:	4b38      	ldr	r3, [pc, #224]	; (8006204 <checkAktifCalisma+0x5cc>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d019      	beq.n	800615c <checkAktifCalisma+0x524>
 8006128:	4b30      	ldr	r3, [pc, #192]	; (80061ec <checkAktifCalisma+0x5b4>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <checkAktifCalisma+0x524>
 8006130:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <checkAktifCalisma+0x5b8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d011      	beq.n	800615c <checkAktifCalisma+0x524>
 8006138:	4b2a      	ldr	r3, [pc, #168]	; (80061e4 <checkAktifCalisma+0x5ac>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <checkAktifCalisma+0x524>
 8006140:	4b3a      	ldr	r3, [pc, #232]	; (800622c <checkAktifCalisma+0x5f4>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f083 0301 	eor.w	r3, r3, #1
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <checkAktifCalisma+0x524>
			timer2=millis;
 800614e:	4b38      	ldr	r3, [pc, #224]	; (8006230 <checkAktifCalisma+0x5f8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a38      	ldr	r2, [pc, #224]	; (8006234 <checkAktifCalisma+0x5fc>)
 8006154:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006156:	4b35      	ldr	r3, [pc, #212]	; (800622c <checkAktifCalisma+0x5f4>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800615c:	4b34      	ldr	r3, [pc, #208]	; (8006230 <checkAktifCalisma+0x5f8>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b34      	ldr	r3, [pc, #208]	; (8006234 <checkAktifCalisma+0x5fc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	4a34      	ldr	r2, [pc, #208]	; (8006238 <checkAktifCalisma+0x600>)
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	4293      	cmp	r3, r2
 800616c:	d303      	bcc.n	8006176 <checkAktifCalisma+0x53e>
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <checkAktifCalisma+0x5f4>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d114      	bne.n	80061a0 <checkAktifCalisma+0x568>
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <checkAktifCalisma+0x5b4>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f083 0301 	eor.w	r3, r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10d      	bne.n	80061a0 <checkAktifCalisma+0x568>
 8006184:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <checkAktifCalisma+0x5b8>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f083 0301 	eor.w	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <checkAktifCalisma+0x568>
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <checkAktifCalisma+0x5ac>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f083 0301 	eor.w	r3, r3, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80061a0:	2200      	movs	r2, #0
 80061a2:	2102      	movs	r1, #2
 80061a4:	4813      	ldr	r0, [pc, #76]	; (80061f4 <checkAktifCalisma+0x5bc>)
 80061a6:	f003 f8fe 	bl	80093a6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <checkAktifCalisma+0x5d0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80061b0:	4b1e      	ldr	r3, [pc, #120]	; (800622c <checkAktifCalisma+0x5f4>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <checkAktifCalisma+0x5d0>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d040      	beq.n	8006240 <checkAktifCalisma+0x608>
 80061be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061c2:	480f      	ldr	r0, [pc, #60]	; (8006200 <checkAktifCalisma+0x5c8>)
 80061c4:	f003 f8d8 	bl	8009378 <HAL_GPIO_ReadPin>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d138      	bne.n	8006240 <checkAktifCalisma+0x608>
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <checkAktifCalisma+0x604>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d034      	beq.n	8006240 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80061d6:	2201      	movs	r2, #1
 80061d8:	2101      	movs	r1, #1
 80061da:	4806      	ldr	r0, [pc, #24]	; (80061f4 <checkAktifCalisma+0x5bc>)
 80061dc:	f003 f8e3 	bl	80093a6 <HAL_GPIO_WritePin>
 80061e0:	e033      	b.n	800624a <checkAktifCalisma+0x612>
 80061e2:	bf00      	nop
 80061e4:	2000044f 	.word	0x2000044f
 80061e8:	20000415 	.word	0x20000415
 80061ec:	2000044a 	.word	0x2000044a
 80061f0:	2000044b 	.word	0x2000044b
 80061f4:	40010c00 	.word	0x40010c00
 80061f8:	20000435 	.word	0x20000435
 80061fc:	20000449 	.word	0x20000449
 8006200:	40011000 	.word	0x40011000
 8006204:	200003fe 	.word	0x200003fe
 8006208:	20000430 	.word	0x20000430
 800620c:	2000042d 	.word	0x2000042d
 8006210:	20000431 	.word	0x20000431
 8006214:	2000042e 	.word	0x2000042e
 8006218:	2000042f 	.word	0x2000042f
 800621c:	20000432 	.word	0x20000432
 8006220:	20000433 	.word	0x20000433
 8006224:	20000438 	.word	0x20000438
 8006228:	20000459 	.word	0x20000459
 800622c:	20000428 	.word	0x20000428
 8006230:	200003a0 	.word	0x200003a0
 8006234:	200003ac 	.word	0x200003ac
 8006238:	2000040d 	.word	0x2000040d
 800623c:	200003fd 	.word	0x200003fd
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006240:	2200      	movs	r2, #0
 8006242:	2101      	movs	r1, #1
 8006244:	4836      	ldr	r0, [pc, #216]	; (8006320 <checkAktifCalisma+0x6e8>)
 8006246:	f003 f8ae 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800624a:	4b36      	ldr	r3, [pc, #216]	; (8006324 <checkAktifCalisma+0x6ec>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 8080 	bne.w	8006354 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006254:	4b34      	ldr	r3, [pc, #208]	; (8006328 <checkAktifCalisma+0x6f0>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d003      	beq.n	8006264 <checkAktifCalisma+0x62c>
 800625c:	4b32      	ldr	r3, [pc, #200]	; (8006328 <checkAktifCalisma+0x6f0>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d177      	bne.n	8006354 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <checkAktifCalisma+0x6f4>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d073      	beq.n	8006354 <checkAktifCalisma+0x71c>
 800626c:	4b30      	ldr	r3, [pc, #192]	; (8006330 <checkAktifCalisma+0x6f8>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d06f      	beq.n	8006354 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006278:	4829      	ldr	r0, [pc, #164]	; (8006320 <checkAktifCalisma+0x6e8>)
 800627a:	f003 f87d 	bl	8009378 <HAL_GPIO_ReadPin>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d167      	bne.n	8006354 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006288:	482a      	ldr	r0, [pc, #168]	; (8006334 <checkAktifCalisma+0x6fc>)
 800628a:	f003 f875 	bl	8009378 <HAL_GPIO_ReadPin>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <checkAktifCalisma+0x664>
 8006294:	4b28      	ldr	r3, [pc, #160]	; (8006338 <checkAktifCalisma+0x700>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d15b      	bne.n	8006354 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800629c:	2140      	movs	r1, #64	; 0x40
 800629e:	4825      	ldr	r0, [pc, #148]	; (8006334 <checkAktifCalisma+0x6fc>)
 80062a0:	f003 f86a 	bl	8009378 <HAL_GPIO_ReadPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10f      	bne.n	80062ca <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80062aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062ae:	481c      	ldr	r0, [pc, #112]	; (8006320 <checkAktifCalisma+0x6e8>)
 80062b0:	f003 f862 	bl	8009378 <HAL_GPIO_ReadPin>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d107      	bne.n	80062ca <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80062ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062be:	4818      	ldr	r0, [pc, #96]	; (8006320 <checkAktifCalisma+0x6e8>)
 80062c0:	f003 f85a 	bl	8009378 <HAL_GPIO_ReadPin>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d003      	beq.n	80062d2 <checkAktifCalisma+0x69a>
 80062ca:	4b1c      	ldr	r3, [pc, #112]	; (800633c <checkAktifCalisma+0x704>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d040      	beq.n	8006354 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <checkAktifCalisma+0x708>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f083 0301 	eor.w	r3, r3, #1
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d039      	beq.n	8006354 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <checkAktifCalisma+0x70c>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f083 0301 	eor.w	r3, r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d032      	beq.n	8006354 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80062ee:	4b16      	ldr	r3, [pc, #88]	; (8006348 <checkAktifCalisma+0x710>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f083 0301 	eor.w	r3, r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d02b      	beq.n	8006354 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80062fc:	4b13      	ldr	r3, [pc, #76]	; (800634c <checkAktifCalisma+0x714>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f083 0301 	eor.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d024      	beq.n	8006354 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <checkAktifCalisma+0x718>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01d      	beq.n	8006354 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <checkAktifCalisma+0x704>)
 800631a:	2201      	movs	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e01c      	b.n	800635a <checkAktifCalisma+0x722>
 8006320:	40010c00 	.word	0x40010c00
 8006324:	20000415 	.word	0x20000415
 8006328:	20000407 	.word	0x20000407
 800632c:	2000044a 	.word	0x2000044a
 8006330:	2000044b 	.word	0x2000044b
 8006334:	40011000 	.word	0x40011000
 8006338:	20000408 	.word	0x20000408
 800633c:	2000042e 	.word	0x2000042e
 8006340:	2000042d 	.word	0x2000042d
 8006344:	20000431 	.word	0x20000431
 8006348:	20000430 	.word	0x20000430
 800634c:	2000042f 	.word	0x2000042f
 8006350:	20000433 	.word	0x20000433
		} else {
			devmotoryukaricalisiyor=0;
 8006354:	4b64      	ldr	r3, [pc, #400]	; (80064e8 <checkAktifCalisma+0x8b0>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800635a:	4b63      	ldr	r3, [pc, #396]	; (80064e8 <checkAktifCalisma+0x8b0>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006362:	2201      	movs	r2, #1
 8006364:	2120      	movs	r1, #32
 8006366:	4861      	ldr	r0, [pc, #388]	; (80064ec <checkAktifCalisma+0x8b4>)
 8006368:	f003 f81d 	bl	80093a6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800636c:	4b60      	ldr	r3, [pc, #384]	; (80064f0 <checkAktifCalisma+0x8b8>)
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006372:	4b5f      	ldr	r3, [pc, #380]	; (80064f0 <checkAktifCalisma+0x8b8>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d025      	beq.n	80063c6 <checkAktifCalisma+0x78e>
 800637a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800637e:	485d      	ldr	r0, [pc, #372]	; (80064f4 <checkAktifCalisma+0x8bc>)
 8006380:	f002 fffa 	bl	8009378 <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d007      	beq.n	800639a <checkAktifCalisma+0x762>
 800638a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800638e:	4857      	ldr	r0, [pc, #348]	; (80064ec <checkAktifCalisma+0x8b4>)
 8006390:	f002 fff2 	bl	8009378 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d115      	bne.n	80063c6 <checkAktifCalisma+0x78e>
 800639a:	4b57      	ldr	r3, [pc, #348]	; (80064f8 <checkAktifCalisma+0x8c0>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d011      	beq.n	80063c6 <checkAktifCalisma+0x78e>
 80063a2:	4b56      	ldr	r3, [pc, #344]	; (80064fc <checkAktifCalisma+0x8c4>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <checkAktifCalisma+0x78e>
 80063aa:	4b55      	ldr	r3, [pc, #340]	; (8006500 <checkAktifCalisma+0x8c8>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f083 0301 	eor.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <checkAktifCalisma+0x78e>
			timer2=millis;
 80063b8:	4b52      	ldr	r3, [pc, #328]	; (8006504 <checkAktifCalisma+0x8cc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a52      	ldr	r2, [pc, #328]	; (8006508 <checkAktifCalisma+0x8d0>)
 80063be:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80063c0:	4b4f      	ldr	r3, [pc, #316]	; (8006500 <checkAktifCalisma+0x8c8>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80063c6:	4b4f      	ldr	r3, [pc, #316]	; (8006504 <checkAktifCalisma+0x8cc>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <checkAktifCalisma+0x8d0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	4a4e      	ldr	r2, [pc, #312]	; (800650c <checkAktifCalisma+0x8d4>)
 80063d2:	7812      	ldrb	r2, [r2, #0]
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d303      	bcc.n	80063e0 <checkAktifCalisma+0x7a8>
 80063d8:	4b49      	ldr	r3, [pc, #292]	; (8006500 <checkAktifCalisma+0x8c8>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10d      	bne.n	80063fc <checkAktifCalisma+0x7c4>
 80063e0:	4b45      	ldr	r3, [pc, #276]	; (80064f8 <checkAktifCalisma+0x8c0>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <checkAktifCalisma+0x7c4>
 80063ee:	4b43      	ldr	r3, [pc, #268]	; (80064fc <checkAktifCalisma+0x8c4>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80063fc:	2200      	movs	r2, #0
 80063fe:	2120      	movs	r1, #32
 8006400:	483a      	ldr	r0, [pc, #232]	; (80064ec <checkAktifCalisma+0x8b4>)
 8006402:	f002 ffd0 	bl	80093a6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006406:	4b3a      	ldr	r3, [pc, #232]	; (80064f0 <checkAktifCalisma+0x8b8>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800640c:	4b3c      	ldr	r3, [pc, #240]	; (8006500 <checkAktifCalisma+0x8c8>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006412:	4b3f      	ldr	r3, [pc, #252]	; (8006510 <checkAktifCalisma+0x8d8>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 8088 	bne.w	800652c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800641c:	4b3d      	ldr	r3, [pc, #244]	; (8006514 <checkAktifCalisma+0x8dc>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d003      	beq.n	800642c <checkAktifCalisma+0x7f4>
 8006424:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <checkAktifCalisma+0x8dc>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d17f      	bne.n	800652c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800642c:	4b32      	ldr	r3, [pc, #200]	; (80064f8 <checkAktifCalisma+0x8c0>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d07b      	beq.n	800652c <checkAktifCalisma+0x8f4>
 8006434:	4b31      	ldr	r3, [pc, #196]	; (80064fc <checkAktifCalisma+0x8c4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d077      	beq.n	800652c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	482b      	ldr	r0, [pc, #172]	; (80064ec <checkAktifCalisma+0x8b4>)
 8006440:	f002 ff9a 	bl	8009378 <HAL_GPIO_ReadPin>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d170      	bne.n	800652c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800644a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800644e:	4827      	ldr	r0, [pc, #156]	; (80064ec <checkAktifCalisma+0x8b4>)
 8006450:	f002 ff92 	bl	8009378 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <checkAktifCalisma+0x82a>
 800645a:	4b2f      	ldr	r3, [pc, #188]	; (8006518 <checkAktifCalisma+0x8e0>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d164      	bne.n	800652c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006466:	4823      	ldr	r0, [pc, #140]	; (80064f4 <checkAktifCalisma+0x8bc>)
 8006468:	f002 ff86 	bl	8009378 <HAL_GPIO_ReadPin>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d10f      	bne.n	8006492 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006476:	481f      	ldr	r0, [pc, #124]	; (80064f4 <checkAktifCalisma+0x8bc>)
 8006478:	f002 ff7e 	bl	8009378 <HAL_GPIO_ReadPin>
 800647c:	4603      	mov	r3, r0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d107      	bne.n	8006492 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006486:	481b      	ldr	r0, [pc, #108]	; (80064f4 <checkAktifCalisma+0x8bc>)
 8006488:	f002 ff76 	bl	8009378 <HAL_GPIO_ReadPin>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d003      	beq.n	800649a <checkAktifCalisma+0x862>
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <checkAktifCalisma+0x8e4>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d048      	beq.n	800652c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800649a:	4b21      	ldr	r3, [pc, #132]	; (8006520 <checkAktifCalisma+0x8e8>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f083 0301 	eor.w	r3, r3, #1
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d041      	beq.n	800652c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <checkAktifCalisma+0x8ec>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f083 0301 	eor.w	r3, r3, #1
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d03a      	beq.n	800652c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80064b6:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <checkAktifCalisma+0x8f0>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f083 0301 	eor.w	r3, r3, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d033      	beq.n	800652c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <checkAktifCalisma+0x8b8>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f083 0301 	eor.w	r3, r3, #1
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02c      	beq.n	800652c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <checkAktifCalisma+0x8b0>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d025      	beq.n	800652c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80064e0:	4b0e      	ldr	r3, [pc, #56]	; (800651c <checkAktifCalisma+0x8e4>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e024      	b.n	8006532 <checkAktifCalisma+0x8fa>
 80064e8:	2000042e 	.word	0x2000042e
 80064ec:	40011000 	.word	0x40011000
 80064f0:	20000432 	.word	0x20000432
 80064f4:	40010c00 	.word	0x40010c00
 80064f8:	2000044a 	.word	0x2000044a
 80064fc:	2000044b 	.word	0x2000044b
 8006500:	2000042a 	.word	0x2000042a
 8006504:	200003a0 	.word	0x200003a0
 8006508:	200003ac 	.word	0x200003ac
 800650c:	2000040e 	.word	0x2000040e
 8006510:	20000415 	.word	0x20000415
 8006514:	20000407 	.word	0x20000407
 8006518:	20000409 	.word	0x20000409
 800651c:	2000042f 	.word	0x2000042f
 8006520:	2000042d 	.word	0x2000042d
 8006524:	20000431 	.word	0x20000431
 8006528:	20000430 	.word	0x20000430
		} else {
			devmotorasagicalisiyor=0;
 800652c:	4b96      	ldr	r3, [pc, #600]	; (8006788 <checkAktifCalisma+0xb50>)
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006532:	4b95      	ldr	r3, [pc, #596]	; (8006788 <checkAktifCalisma+0xb50>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800653a:	2201      	movs	r2, #1
 800653c:	2110      	movs	r1, #16
 800653e:	4893      	ldr	r0, [pc, #588]	; (800678c <checkAktifCalisma+0xb54>)
 8006540:	f002 ff31 	bl	80093a6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006544:	4b92      	ldr	r3, [pc, #584]	; (8006790 <checkAktifCalisma+0xb58>)
 8006546:	2201      	movs	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800654a:	4b91      	ldr	r3, [pc, #580]	; (8006790 <checkAktifCalisma+0xb58>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d024      	beq.n	800659c <checkAktifCalisma+0x964>
 8006552:	2140      	movs	r1, #64	; 0x40
 8006554:	488d      	ldr	r0, [pc, #564]	; (800678c <checkAktifCalisma+0xb54>)
 8006556:	f002 ff0f 	bl	8009378 <HAL_GPIO_ReadPin>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d007      	beq.n	8006570 <checkAktifCalisma+0x938>
 8006560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006564:	4889      	ldr	r0, [pc, #548]	; (800678c <checkAktifCalisma+0xb54>)
 8006566:	f002 ff07 	bl	8009378 <HAL_GPIO_ReadPin>
 800656a:	4603      	mov	r3, r0
 800656c:	2b01      	cmp	r3, #1
 800656e:	d115      	bne.n	800659c <checkAktifCalisma+0x964>
 8006570:	4b88      	ldr	r3, [pc, #544]	; (8006794 <checkAktifCalisma+0xb5c>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d011      	beq.n	800659c <checkAktifCalisma+0x964>
 8006578:	4b87      	ldr	r3, [pc, #540]	; (8006798 <checkAktifCalisma+0xb60>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <checkAktifCalisma+0x964>
 8006580:	4b86      	ldr	r3, [pc, #536]	; (800679c <checkAktifCalisma+0xb64>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d006      	beq.n	800659c <checkAktifCalisma+0x964>
			timer2=millis;
 800658e:	4b84      	ldr	r3, [pc, #528]	; (80067a0 <checkAktifCalisma+0xb68>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a84      	ldr	r2, [pc, #528]	; (80067a4 <checkAktifCalisma+0xb6c>)
 8006594:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006596:	4b81      	ldr	r3, [pc, #516]	; (800679c <checkAktifCalisma+0xb64>)
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800659c:	4b80      	ldr	r3, [pc, #512]	; (80067a0 <checkAktifCalisma+0xb68>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b80      	ldr	r3, [pc, #512]	; (80067a4 <checkAktifCalisma+0xb6c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	4a80      	ldr	r2, [pc, #512]	; (80067a8 <checkAktifCalisma+0xb70>)
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d303      	bcc.n	80065b6 <checkAktifCalisma+0x97e>
 80065ae:	4b7b      	ldr	r3, [pc, #492]	; (800679c <checkAktifCalisma+0xb64>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <checkAktifCalisma+0x99a>
 80065b6:	4b77      	ldr	r3, [pc, #476]	; (8006794 <checkAktifCalisma+0xb5c>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f083 0301 	eor.w	r3, r3, #1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <checkAktifCalisma+0x99a>
 80065c4:	4b74      	ldr	r3, [pc, #464]	; (8006798 <checkAktifCalisma+0xb60>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f083 0301 	eor.w	r3, r3, #1
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80065d2:	2200      	movs	r2, #0
 80065d4:	2110      	movs	r1, #16
 80065d6:	486d      	ldr	r0, [pc, #436]	; (800678c <checkAktifCalisma+0xb54>)
 80065d8:	f002 fee5 	bl	80093a6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80065dc:	4b6c      	ldr	r3, [pc, #432]	; (8006790 <checkAktifCalisma+0xb58>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80065e2:	4b6e      	ldr	r3, [pc, #440]	; (800679c <checkAktifCalisma+0xb64>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80065e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065ec:	486f      	ldr	r0, [pc, #444]	; (80067ac <checkAktifCalisma+0xb74>)
 80065ee:	f002 fec3 	bl	8009378 <HAL_GPIO_ReadPin>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d120      	bne.n	800663a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80065f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065fc:	486b      	ldr	r0, [pc, #428]	; (80067ac <checkAktifCalisma+0xb74>)
 80065fe:	f002 febb 	bl	8009378 <HAL_GPIO_ReadPin>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d118      	bne.n	800663a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006608:	2104      	movs	r1, #4
 800660a:	4868      	ldr	r0, [pc, #416]	; (80067ac <checkAktifCalisma+0xb74>)
 800660c:	f002 feb4 	bl	8009378 <HAL_GPIO_ReadPin>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d111      	bne.n	800663a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006616:	2102      	movs	r1, #2
 8006618:	4864      	ldr	r0, [pc, #400]	; (80067ac <checkAktifCalisma+0xb74>)
 800661a:	f002 fead 	bl	8009378 <HAL_GPIO_ReadPin>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006624:	2101      	movs	r1, #1
 8006626:	4861      	ldr	r0, [pc, #388]	; (80067ac <checkAktifCalisma+0xb74>)
 8006628:	f002 fea6 	bl	8009378 <HAL_GPIO_ReadPin>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <checkAktifCalisma+0xa02>
			makineStop=1;
 8006632:	4b5f      	ldr	r3, [pc, #380]	; (80067b0 <checkAktifCalisma+0xb78>)
 8006634:	2201      	movs	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e002      	b.n	8006640 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800663a:	4b5d      	ldr	r3, [pc, #372]	; (80067b0 <checkAktifCalisma+0xb78>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006640:	4b5c      	ldr	r3, [pc, #368]	; (80067b4 <checkAktifCalisma+0xb7c>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d144      	bne.n	80066d2 <checkAktifCalisma+0xa9a>
 8006648:	4b5b      	ldr	r3, [pc, #364]	; (80067b8 <checkAktifCalisma+0xb80>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d003      	beq.n	8006658 <checkAktifCalisma+0xa20>
 8006650:	4b59      	ldr	r3, [pc, #356]	; (80067b8 <checkAktifCalisma+0xb80>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d13c      	bne.n	80066d2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006658:	2180      	movs	r1, #128	; 0x80
 800665a:	484c      	ldr	r0, [pc, #304]	; (800678c <checkAktifCalisma+0xb54>)
 800665c:	f002 fe8c 	bl	8009378 <HAL_GPIO_ReadPin>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <checkAktifCalisma+0xa36>
 8006666:	4b55      	ldr	r3, [pc, #340]	; (80067bc <checkAktifCalisma+0xb84>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <checkAktifCalisma+0xa4e>
 800666e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006672:	484e      	ldr	r0, [pc, #312]	; (80067ac <checkAktifCalisma+0xb74>)
 8006674:	f002 fe80 	bl	8009378 <HAL_GPIO_ReadPin>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d129      	bne.n	80066d2 <checkAktifCalisma+0xa9a>
 800667e:	4b4f      	ldr	r3, [pc, #316]	; (80067bc <checkAktifCalisma+0xb84>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d125      	bne.n	80066d2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006686:	2104      	movs	r1, #4
 8006688:	4840      	ldr	r0, [pc, #256]	; (800678c <checkAktifCalisma+0xb54>)
 800668a:	f002 fe75 	bl	8009378 <HAL_GPIO_ReadPin>
 800668e:	4603      	mov	r3, r0
 8006690:	2b01      	cmp	r3, #1
 8006692:	d003      	beq.n	800669c <checkAktifCalisma+0xa64>
 8006694:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <checkAktifCalisma+0xb88>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d11a      	bne.n	80066d2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800669c:	2102      	movs	r1, #2
 800669e:	483b      	ldr	r0, [pc, #236]	; (800678c <checkAktifCalisma+0xb54>)
 80066a0:	f002 fe6a 	bl	8009378 <HAL_GPIO_ReadPin>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d113      	bne.n	80066d2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80066aa:	4b46      	ldr	r3, [pc, #280]	; (80067c4 <checkAktifCalisma+0xb8c>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	f083 0301 	eor.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80066b8:	4b3d      	ldr	r3, [pc, #244]	; (80067b0 <checkAktifCalisma+0xb78>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80066c0:	4b41      	ldr	r3, [pc, #260]	; (80067c8 <checkAktifCalisma+0xb90>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80066c6:	4b36      	ldr	r3, [pc, #216]	; (80067a0 <checkAktifCalisma+0xb68>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a40      	ldr	r2, [pc, #256]	; (80067cc <checkAktifCalisma+0xb94>)
 80066cc:	6013      	str	r3, [r2, #0]
			bekle();
 80066ce:	f7ff f87d 	bl	80057cc <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80066d2:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <checkAktifCalisma+0xb68>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <checkAktifCalisma+0xb94>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	4a3c      	ldr	r2, [pc, #240]	; (80067d0 <checkAktifCalisma+0xb98>)
 80066de:	7812      	ldrb	r2, [r2, #0]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d211      	bcs.n	8006708 <checkAktifCalisma+0xad0>
 80066e4:	2104      	movs	r1, #4
 80066e6:	4829      	ldr	r0, [pc, #164]	; (800678c <checkAktifCalisma+0xb54>)
 80066e8:	f002 fe46 	bl	8009378 <HAL_GPIO_ReadPin>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <checkAktifCalisma+0xad0>
 80066f2:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <checkAktifCalisma+0xb88>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d006      	beq.n	8006708 <checkAktifCalisma+0xad0>
 80066fa:	4b2d      	ldr	r3, [pc, #180]	; (80067b0 <checkAktifCalisma+0xb78>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f083 0301 	eor.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006708:	4b2f      	ldr	r3, [pc, #188]	; (80067c8 <checkAktifCalisma+0xb90>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <checkAktifCalisma+0xb7c>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d160      	bne.n	80067d8 <checkAktifCalisma+0xba0>
 8006716:	4b28      	ldr	r3, [pc, #160]	; (80067b8 <checkAktifCalisma+0xb80>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d003      	beq.n	8006726 <checkAktifCalisma+0xaee>
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <checkAktifCalisma+0xb80>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b03      	cmp	r3, #3
 8006724:	d158      	bne.n	80067d8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006726:	2104      	movs	r1, #4
 8006728:	4818      	ldr	r0, [pc, #96]	; (800678c <checkAktifCalisma+0xb54>)
 800672a:	f002 fe25 	bl	8009378 <HAL_GPIO_ReadPin>
 800672e:	4603      	mov	r3, r0
 8006730:	2b01      	cmp	r3, #1
 8006732:	d003      	beq.n	800673c <checkAktifCalisma+0xb04>
 8006734:	4b22      	ldr	r3, [pc, #136]	; (80067c0 <checkAktifCalisma+0xb88>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d14d      	bne.n	80067d8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800673c:	2102      	movs	r1, #2
 800673e:	4813      	ldr	r0, [pc, #76]	; (800678c <checkAktifCalisma+0xb54>)
 8006740:	f002 fe1a 	bl	8009378 <HAL_GPIO_ReadPin>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d146      	bne.n	80067d8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800674a:	2180      	movs	r1, #128	; 0x80
 800674c:	480f      	ldr	r0, [pc, #60]	; (800678c <checkAktifCalisma+0xb54>)
 800674e:	f002 fe13 	bl	8009378 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <checkAktifCalisma+0xb28>
 8006758:	4b18      	ldr	r3, [pc, #96]	; (80067bc <checkAktifCalisma+0xb84>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <checkAktifCalisma+0xb40>
 8006760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006764:	4811      	ldr	r0, [pc, #68]	; (80067ac <checkAktifCalisma+0xb74>)
 8006766:	f002 fe07 	bl	8009378 <HAL_GPIO_ReadPin>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d133      	bne.n	80067d8 <checkAktifCalisma+0xba0>
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <checkAktifCalisma+0xb84>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d12f      	bne.n	80067d8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006778:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <checkAktifCalisma+0xb78>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02b      	beq.n	80067d8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <checkAktifCalisma+0xb9c>)
 8006782:	2201      	movs	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e02a      	b.n	80067de <checkAktifCalisma+0xba6>
 8006788:	2000042f 	.word	0x2000042f
 800678c:	40011000 	.word	0x40011000
 8006790:	20000433 	.word	0x20000433
 8006794:	2000044a 	.word	0x2000044a
 8006798:	2000044b 	.word	0x2000044b
 800679c:	2000042b 	.word	0x2000042b
 80067a0:	200003a0 	.word	0x200003a0
 80067a4:	200003ac 	.word	0x200003ac
 80067a8:	2000040e 	.word	0x2000040e
 80067ac:	40010c00 	.word	0x40010c00
 80067b0:	2000043a 	.word	0x2000043a
 80067b4:	20000401 	.word	0x20000401
 80067b8:	20000400 	.word	0x20000400
 80067bc:	20000404 	.word	0x20000404
 80067c0:	200003fe 	.word	0x200003fe
 80067c4:	20000427 	.word	0x20000427
 80067c8:	2000043b 	.word	0x2000043b
 80067cc:	200003a4 	.word	0x200003a4
 80067d0:	20000411 	.word	0x20000411
 80067d4:	2000043c 	.word	0x2000043c
		} else {
			kapi1butonkontrol=0;
 80067d8:	4b8b      	ldr	r3, [pc, #556]	; (8006a08 <checkAktifCalisma+0xdd0>)
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80067de:	4b8b      	ldr	r3, [pc, #556]	; (8006a0c <checkAktifCalisma+0xdd4>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d121      	bne.n	800682a <checkAktifCalisma+0xbf2>
 80067e6:	4b8a      	ldr	r3, [pc, #552]	; (8006a10 <checkAktifCalisma+0xdd8>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d003      	beq.n	80067f6 <checkAktifCalisma+0xbbe>
 80067ee:	4b88      	ldr	r3, [pc, #544]	; (8006a10 <checkAktifCalisma+0xdd8>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d119      	bne.n	800682a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80067f6:	2104      	movs	r1, #4
 80067f8:	4886      	ldr	r0, [pc, #536]	; (8006a14 <checkAktifCalisma+0xddc>)
 80067fa:	f002 fdbd 	bl	8009378 <HAL_GPIO_ReadPin>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d003      	beq.n	800680c <checkAktifCalisma+0xbd4>
 8006804:	4b84      	ldr	r3, [pc, #528]	; (8006a18 <checkAktifCalisma+0xde0>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10e      	bne.n	800682a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800680c:	2102      	movs	r1, #2
 800680e:	4881      	ldr	r0, [pc, #516]	; (8006a14 <checkAktifCalisma+0xddc>)
 8006810:	f002 fdb2 	bl	8009378 <HAL_GPIO_ReadPin>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d107      	bne.n	800682a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800681a:	4b80      	ldr	r3, [pc, #512]	; (8006a1c <checkAktifCalisma+0xde4>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006822:	4b7f      	ldr	r3, [pc, #508]	; (8006a20 <checkAktifCalisma+0xde8>)
 8006824:	2201      	movs	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	e002      	b.n	8006830 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800682a:	4b7d      	ldr	r3, [pc, #500]	; (8006a20 <checkAktifCalisma+0xde8>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006830:	4b75      	ldr	r3, [pc, #468]	; (8006a08 <checkAktifCalisma+0xdd0>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d107      	bne.n	8006848 <checkAktifCalisma+0xc10>
 8006838:	4b79      	ldr	r3, [pc, #484]	; (8006a20 <checkAktifCalisma+0xde8>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <checkAktifCalisma+0xc10>
 8006840:	4b78      	ldr	r3, [pc, #480]	; (8006a24 <checkAktifCalisma+0xdec>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006848:	2201      	movs	r2, #1
 800684a:	2180      	movs	r1, #128	; 0x80
 800684c:	4876      	ldr	r0, [pc, #472]	; (8006a28 <checkAktifCalisma+0xdf0>)
 800684e:	f002 fdaa 	bl	80093a6 <HAL_GPIO_WritePin>
 8006852:	e004      	b.n	800685e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006854:	2200      	movs	r2, #0
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	4873      	ldr	r0, [pc, #460]	; (8006a28 <checkAktifCalisma+0xdf0>)
 800685a:	f002 fda4 	bl	80093a6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800685e:	4b73      	ldr	r3, [pc, #460]	; (8006a2c <checkAktifCalisma+0xdf4>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d141      	bne.n	80068ea <checkAktifCalisma+0xcb2>
 8006866:	4b6a      	ldr	r3, [pc, #424]	; (8006a10 <checkAktifCalisma+0xdd8>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d003      	beq.n	8006876 <checkAktifCalisma+0xc3e>
 800686e:	4b68      	ldr	r3, [pc, #416]	; (8006a10 <checkAktifCalisma+0xdd8>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d139      	bne.n	80068ea <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800687a:	4866      	ldr	r0, [pc, #408]	; (8006a14 <checkAktifCalisma+0xddc>)
 800687c:	f002 fd7c 	bl	8009378 <HAL_GPIO_ReadPin>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <checkAktifCalisma+0xc56>
 8006886:	4b6a      	ldr	r3, [pc, #424]	; (8006a30 <checkAktifCalisma+0xdf8>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <checkAktifCalisma+0xc6e>
 800688e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006892:	4868      	ldr	r0, [pc, #416]	; (8006a34 <checkAktifCalisma+0xdfc>)
 8006894:	f002 fd70 	bl	8009378 <HAL_GPIO_ReadPin>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d125      	bne.n	80068ea <checkAktifCalisma+0xcb2>
 800689e:	4b64      	ldr	r3, [pc, #400]	; (8006a30 <checkAktifCalisma+0xdf8>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d121      	bne.n	80068ea <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80068a6:	2102      	movs	r1, #2
 80068a8:	485a      	ldr	r0, [pc, #360]	; (8006a14 <checkAktifCalisma+0xddc>)
 80068aa:	f002 fd65 	bl	8009378 <HAL_GPIO_ReadPin>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d11a      	bne.n	80068ea <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80068b4:	2104      	movs	r1, #4
 80068b6:	4857      	ldr	r0, [pc, #348]	; (8006a14 <checkAktifCalisma+0xddc>)
 80068b8:	f002 fd5e 	bl	8009378 <HAL_GPIO_ReadPin>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d113      	bne.n	80068ea <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80068c2:	4b56      	ldr	r3, [pc, #344]	; (8006a1c <checkAktifCalisma+0xde4>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00f      	beq.n	80068ea <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <checkAktifCalisma+0xe00>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f083 0301 	eor.w	r3, r3, #1
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80068d8:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <checkAktifCalisma+0xe04>)
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <checkAktifCalisma+0xe08>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a58      	ldr	r2, [pc, #352]	; (8006a44 <checkAktifCalisma+0xe0c>)
 80068e4:	6013      	str	r3, [r2, #0]
			bekle();
 80068e6:	f7fe ff71 	bl	80057cc <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80068ea:	4b55      	ldr	r3, [pc, #340]	; (8006a40 <checkAktifCalisma+0xe08>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b55      	ldr	r3, [pc, #340]	; (8006a44 <checkAktifCalisma+0xe0c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	4a54      	ldr	r2, [pc, #336]	; (8006a48 <checkAktifCalisma+0xe10>)
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d20d      	bcs.n	8006918 <checkAktifCalisma+0xce0>
 80068fc:	2102      	movs	r1, #2
 80068fe:	4845      	ldr	r0, [pc, #276]	; (8006a14 <checkAktifCalisma+0xddc>)
 8006900:	f002 fd3a 	bl	8009378 <HAL_GPIO_ReadPin>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <checkAktifCalisma+0xce0>
 800690a:	4b44      	ldr	r3, [pc, #272]	; (8006a1c <checkAktifCalisma+0xde4>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	f083 0301 	eor.w	r3, r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006918:	4b48      	ldr	r3, [pc, #288]	; (8006a3c <checkAktifCalisma+0xe04>)
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800691e:	4b43      	ldr	r3, [pc, #268]	; (8006a2c <checkAktifCalisma+0xdf4>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d135      	bne.n	8006992 <checkAktifCalisma+0xd5a>
 8006926:	4b3a      	ldr	r3, [pc, #232]	; (8006a10 <checkAktifCalisma+0xdd8>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d003      	beq.n	8006936 <checkAktifCalisma+0xcfe>
 800692e:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <checkAktifCalisma+0xdd8>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d12d      	bne.n	8006992 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800693a:	4836      	ldr	r0, [pc, #216]	; (8006a14 <checkAktifCalisma+0xddc>)
 800693c:	f002 fd1c 	bl	8009378 <HAL_GPIO_ReadPin>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <checkAktifCalisma+0xd16>
 8006946:	4b3a      	ldr	r3, [pc, #232]	; (8006a30 <checkAktifCalisma+0xdf8>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <checkAktifCalisma+0xd2e>
 800694e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006952:	4838      	ldr	r0, [pc, #224]	; (8006a34 <checkAktifCalisma+0xdfc>)
 8006954:	f002 fd10 	bl	8009378 <HAL_GPIO_ReadPin>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d119      	bne.n	8006992 <checkAktifCalisma+0xd5a>
 800695e:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <checkAktifCalisma+0xdf8>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d115      	bne.n	8006992 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006966:	2102      	movs	r1, #2
 8006968:	482a      	ldr	r0, [pc, #168]	; (8006a14 <checkAktifCalisma+0xddc>)
 800696a:	f002 fd05 	bl	8009378 <HAL_GPIO_ReadPin>
 800696e:	4603      	mov	r3, r0
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10e      	bne.n	8006992 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006974:	2104      	movs	r1, #4
 8006976:	4827      	ldr	r0, [pc, #156]	; (8006a14 <checkAktifCalisma+0xddc>)
 8006978:	f002 fcfe 	bl	8009378 <HAL_GPIO_ReadPin>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8006982:	4b26      	ldr	r3, [pc, #152]	; (8006a1c <checkAktifCalisma+0xde4>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800698a:	4b30      	ldr	r3, [pc, #192]	; (8006a4c <checkAktifCalisma+0xe14>)
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	e002      	b.n	8006998 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8006992:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <checkAktifCalisma+0xe14>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006998:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <checkAktifCalisma+0xdf4>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d11d      	bne.n	80069dc <checkAktifCalisma+0xda4>
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <checkAktifCalisma+0xdd8>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d003      	beq.n	80069b0 <checkAktifCalisma+0xd78>
 80069a8:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <checkAktifCalisma+0xdd8>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d115      	bne.n	80069dc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80069b0:	2102      	movs	r1, #2
 80069b2:	4818      	ldr	r0, [pc, #96]	; (8006a14 <checkAktifCalisma+0xddc>)
 80069b4:	f002 fce0 	bl	8009378 <HAL_GPIO_ReadPin>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10e      	bne.n	80069dc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80069be:	2104      	movs	r1, #4
 80069c0:	4814      	ldr	r0, [pc, #80]	; (8006a14 <checkAktifCalisma+0xddc>)
 80069c2:	f002 fcd9 	bl	8009378 <HAL_GPIO_ReadPin>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d107      	bne.n	80069dc <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80069cc:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <checkAktifCalisma+0xde4>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80069d4:	4b1e      	ldr	r3, [pc, #120]	; (8006a50 <checkAktifCalisma+0xe18>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e002      	b.n	80069e2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80069dc:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <checkAktifCalisma+0xe18>)
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80069e2:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <checkAktifCalisma+0xe14>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d107      	bne.n	80069fa <checkAktifCalisma+0xdc2>
 80069ea:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <checkAktifCalisma+0xe18>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <checkAktifCalisma+0xdc2>
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <checkAktifCalisma+0xe04>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02c      	beq.n	8006a54 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80069fa:	2201      	movs	r2, #1
 80069fc:	2140      	movs	r1, #64	; 0x40
 80069fe:	480a      	ldr	r0, [pc, #40]	; (8006a28 <checkAktifCalisma+0xdf0>)
 8006a00:	f002 fcd1 	bl	80093a6 <HAL_GPIO_WritePin>
 8006a04:	e02b      	b.n	8006a5e <checkAktifCalisma+0xe26>
 8006a06:	bf00      	nop
 8006a08:	2000043c 	.word	0x2000043c
 8006a0c:	20000401 	.word	0x20000401
 8006a10:	20000400 	.word	0x20000400
 8006a14:	40011000 	.word	0x40011000
 8006a18:	200003fe 	.word	0x200003fe
 8006a1c:	2000043a 	.word	0x2000043a
 8006a20:	2000043d 	.word	0x2000043d
 8006a24:	2000043b 	.word	0x2000043b
 8006a28:	40010800 	.word	0x40010800
 8006a2c:	20000402 	.word	0x20000402
 8006a30:	20000404 	.word	0x20000404
 8006a34:	40010c00 	.word	0x40010c00
 8006a38:	20000427 	.word	0x20000427
 8006a3c:	2000043e 	.word	0x2000043e
 8006a40:	200003a0 	.word	0x200003a0
 8006a44:	200003a4 	.word	0x200003a4
 8006a48:	20000412 	.word	0x20000412
 8006a4c:	2000043f 	.word	0x2000043f
 8006a50:	20000440 	.word	0x20000440
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a54:	2200      	movs	r2, #0
 8006a56:	2140      	movs	r1, #64	; 0x40
 8006a58:	488d      	ldr	r0, [pc, #564]	; (8006c90 <checkAktifCalisma+0x1058>)
 8006a5a:	f002 fca4 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <checkAktifCalisma+0x105c>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <checkAktifCalisma+0xe36>
 8006a66:	4b8b      	ldr	r3, [pc, #556]	; (8006c94 <checkAktifCalisma+0x105c>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d115      	bne.n	8006a9a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006a6e:	2104      	movs	r1, #4
 8006a70:	4889      	ldr	r0, [pc, #548]	; (8006c98 <checkAktifCalisma+0x1060>)
 8006a72:	f002 fc81 	bl	8009378 <HAL_GPIO_ReadPin>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d003      	beq.n	8006a84 <checkAktifCalisma+0xe4c>
 8006a7c:	4b87      	ldr	r3, [pc, #540]	; (8006c9c <checkAktifCalisma+0x1064>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006a84:	2102      	movs	r1, #2
 8006a86:	4884      	ldr	r0, [pc, #528]	; (8006c98 <checkAktifCalisma+0x1060>)
 8006a88:	f002 fc76 	bl	8009378 <HAL_GPIO_ReadPin>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8006a92:	4b83      	ldr	r3, [pc, #524]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e002      	b.n	8006aa0 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8006a9a:	4b81      	ldr	r3, [pc, #516]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006aa0:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <checkAktifCalisma+0x105c>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d003      	beq.n	8006ab0 <checkAktifCalisma+0xe78>
 8006aa8:	4b7a      	ldr	r3, [pc, #488]	; (8006c94 <checkAktifCalisma+0x105c>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d111      	bne.n	8006ad4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4879      	ldr	r0, [pc, #484]	; (8006c98 <checkAktifCalisma+0x1060>)
 8006ab4:	f002 fc60 	bl	8009378 <HAL_GPIO_ReadPin>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d10a      	bne.n	8006ad4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006abe:	2104      	movs	r1, #4
 8006ac0:	4875      	ldr	r0, [pc, #468]	; (8006c98 <checkAktifCalisma+0x1060>)
 8006ac2:	f002 fc59 	bl	8009378 <HAL_GPIO_ReadPin>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8006acc:	4b75      	ldr	r3, [pc, #468]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e002      	b.n	8006ada <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8006ad4:	4b73      	ldr	r3, [pc, #460]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8006ada:	4b71      	ldr	r3, [pc, #452]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00f      	beq.n	8006b02 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8006ae2:	4b71      	ldr	r3, [pc, #452]	; (8006ca8 <checkAktifCalisma+0x1070>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10b      	bne.n	8006b02 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aee:	486f      	ldr	r0, [pc, #444]	; (8006cac <checkAktifCalisma+0x1074>)
 8006af0:	f002 fc42 	bl	8009378 <HAL_GPIO_ReadPin>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006afa:	4b6d      	ldr	r3, [pc, #436]	; (8006cb0 <checkAktifCalisma+0x1078>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	e002      	b.n	8006b08 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8006b02:	4b6b      	ldr	r3, [pc, #428]	; (8006cb0 <checkAktifCalisma+0x1078>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006b08:	4b66      	ldr	r3, [pc, #408]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00f      	beq.n	8006b30 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006b10:	4b65      	ldr	r3, [pc, #404]	; (8006ca8 <checkAktifCalisma+0x1070>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10b      	bne.n	8006b30 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b1c:	4863      	ldr	r0, [pc, #396]	; (8006cac <checkAktifCalisma+0x1074>)
 8006b1e:	f002 fc2b 	bl	8009378 <HAL_GPIO_ReadPin>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006b28:	4b62      	ldr	r3, [pc, #392]	; (8006cb4 <checkAktifCalisma+0x107c>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006b30:	4b60      	ldr	r3, [pc, #384]	; (8006cb4 <checkAktifCalisma+0x107c>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006b36:	4b60      	ldr	r3, [pc, #384]	; (8006cb8 <checkAktifCalisma+0x1080>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d137      	bne.n	8006bae <checkAktifCalisma+0xf76>
 8006b3e:	4b5f      	ldr	r3, [pc, #380]	; (8006cbc <checkAktifCalisma+0x1084>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d003      	beq.n	8006b4e <checkAktifCalisma+0xf16>
 8006b46:	4b5d      	ldr	r3, [pc, #372]	; (8006cbc <checkAktifCalisma+0x1084>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d12f      	bne.n	8006bae <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006b4e:	4b54      	ldr	r3, [pc, #336]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <checkAktifCalisma+0xf26>
 8006b56:	4b53      	ldr	r3, [pc, #332]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d027      	beq.n	8006bae <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b62:	484d      	ldr	r0, [pc, #308]	; (8006c98 <checkAktifCalisma+0x1060>)
 8006b64:	f002 fc08 	bl	8009378 <HAL_GPIO_ReadPin>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <checkAktifCalisma+0xf3e>
 8006b6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ca8 <checkAktifCalisma+0x1070>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006b76:	4b4e      	ldr	r3, [pc, #312]	; (8006cb0 <checkAktifCalisma+0x1078>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <checkAktifCalisma+0xf4e>
 8006b7e:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <checkAktifCalisma+0x107c>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d013      	beq.n	8006bae <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006b86:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <checkAktifCalisma+0x1088>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8006b8e:	4b4d      	ldr	r3, [pc, #308]	; (8006cc4 <checkAktifCalisma+0x108c>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	f083 0301 	eor.w	r3, r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006b9c:	4b4a      	ldr	r3, [pc, #296]	; (8006cc8 <checkAktifCalisma+0x1090>)
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006ba2:	4b4a      	ldr	r3, [pc, #296]	; (8006ccc <checkAktifCalisma+0x1094>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a4a      	ldr	r2, [pc, #296]	; (8006cd0 <checkAktifCalisma+0x1098>)
 8006ba8:	6013      	str	r3, [r2, #0]
			bekle();
 8006baa:	f7fe fe0f 	bl	80057cc <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006bae:	4b47      	ldr	r3, [pc, #284]	; (8006ccc <checkAktifCalisma+0x1094>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <checkAktifCalisma+0x1098>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	4a46      	ldr	r2, [pc, #280]	; (8006cd4 <checkAktifCalisma+0x109c>)
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d214      	bcs.n	8006bea <checkAktifCalisma+0xfb2>
 8006bc0:	4b37      	ldr	r3, [pc, #220]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f083 0301 	eor.w	r3, r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <checkAktifCalisma+0xfa4>
 8006bce:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f083 0301 	eor.w	r3, r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <checkAktifCalisma+0xfb2>
 8006bdc:	4b38      	ldr	r3, [pc, #224]	; (8006cc0 <checkAktifCalisma+0x1088>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006bea:	4b37      	ldr	r3, [pc, #220]	; (8006cc8 <checkAktifCalisma+0x1090>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006bf0:	4b31      	ldr	r3, [pc, #196]	; (8006cb8 <checkAktifCalisma+0x1080>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d12b      	bne.n	8006c50 <checkAktifCalisma+0x1018>
 8006bf8:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <checkAktifCalisma+0x1084>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d003      	beq.n	8006c08 <checkAktifCalisma+0xfd0>
 8006c00:	4b2e      	ldr	r3, [pc, #184]	; (8006cbc <checkAktifCalisma+0x1084>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d123      	bne.n	8006c50 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006c08:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <checkAktifCalisma+0xfe0>
 8006c10:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01b      	beq.n	8006c50 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c1c:	481e      	ldr	r0, [pc, #120]	; (8006c98 <checkAktifCalisma+0x1060>)
 8006c1e:	f002 fbab 	bl	8009378 <HAL_GPIO_ReadPin>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <checkAktifCalisma+0xff8>
 8006c28:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <checkAktifCalisma+0x1070>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006c30:	4b1f      	ldr	r3, [pc, #124]	; (8006cb0 <checkAktifCalisma+0x1078>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <checkAktifCalisma+0x1008>
 8006c38:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <checkAktifCalisma+0x107c>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006c40:	4b1f      	ldr	r3, [pc, #124]	; (8006cc0 <checkAktifCalisma+0x1088>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006c48:	4b23      	ldr	r3, [pc, #140]	; (8006cd8 <checkAktifCalisma+0x10a0>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006c50:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <checkAktifCalisma+0x10a0>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006c56:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <checkAktifCalisma+0x1080>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d140      	bne.n	8006ce0 <checkAktifCalisma+0x10a8>
 8006c5e:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <checkAktifCalisma+0x1084>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d003      	beq.n	8006c6e <checkAktifCalisma+0x1036>
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <checkAktifCalisma+0x1084>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d138      	bne.n	8006ce0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <checkAktifCalisma+0x1068>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <checkAktifCalisma+0x1046>
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <checkAktifCalisma+0x106c>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d030      	beq.n	8006ce0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <checkAktifCalisma+0x1088>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d02c      	beq.n	8006ce0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006c86:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <checkAktifCalisma+0x10a4>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e02b      	b.n	8006ce6 <checkAktifCalisma+0x10ae>
 8006c8e:	bf00      	nop
 8006c90:	40010800 	.word	0x40010800
 8006c94:	20000405 	.word	0x20000405
 8006c98:	40011000 	.word	0x40011000
 8006c9c:	200003fe 	.word	0x200003fe
 8006ca0:	20000444 	.word	0x20000444
 8006ca4:	20000445 	.word	0x20000445
 8006ca8:	20000404 	.word	0x20000404
 8006cac:	40010c00 	.word	0x40010c00
 8006cb0:	20000454 	.word	0x20000454
 8006cb4:	20000455 	.word	0x20000455
 8006cb8:	20000403 	.word	0x20000403
 8006cbc:	20000400 	.word	0x20000400
 8006cc0:	2000043a 	.word	0x2000043a
 8006cc4:	20000427 	.word	0x20000427
 8006cc8:	20000441 	.word	0x20000441
 8006ccc:	200003a0 	.word	0x200003a0
 8006cd0:	200003a4 	.word	0x200003a4
 8006cd4:	20000413 	.word	0x20000413
 8006cd8:	20000442 	.word	0x20000442
 8006cdc:	20000443 	.word	0x20000443
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006ce0:	4b8b      	ldr	r3, [pc, #556]	; (8006f10 <checkAktifCalisma+0x12d8>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006ce6:	4b8b      	ldr	r3, [pc, #556]	; (8006f14 <checkAktifCalisma+0x12dc>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <checkAktifCalisma+0x10c6>
 8006cee:	4b8a      	ldr	r3, [pc, #552]	; (8006f18 <checkAktifCalisma+0x12e0>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d103      	bne.n	8006cfe <checkAktifCalisma+0x10c6>
 8006cf6:	4b86      	ldr	r3, [pc, #536]	; (8006f10 <checkAktifCalisma+0x12d8>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006cfe:	2201      	movs	r2, #1
 8006d00:	2120      	movs	r1, #32
 8006d02:	4886      	ldr	r0, [pc, #536]	; (8006f1c <checkAktifCalisma+0x12e4>)
 8006d04:	f002 fb4f 	bl	80093a6 <HAL_GPIO_WritePin>
 8006d08:	e004      	b.n	8006d14 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2120      	movs	r1, #32
 8006d0e:	4883      	ldr	r0, [pc, #524]	; (8006f1c <checkAktifCalisma+0x12e4>)
 8006d10:	f002 fb49 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006d14:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <checkAktifCalisma+0x12e8>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <checkAktifCalisma+0x1102>
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4881      	ldr	r0, [pc, #516]	; (8006f24 <checkAktifCalisma+0x12ec>)
 8006d20:	f002 fb2a 	bl	8009378 <HAL_GPIO_ReadPin>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <checkAktifCalisma+0x1102>
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <checkAktifCalisma+0x12f0>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d103      	bne.n	8006d3a <checkAktifCalisma+0x1102>
 8006d32:	4b7e      	ldr	r3, [pc, #504]	; (8006f2c <checkAktifCalisma+0x12f4>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d112      	bne.n	8006d60 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006d3a:	4b7d      	ldr	r3, [pc, #500]	; (8006f30 <checkAktifCalisma+0x12f8>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d066      	beq.n	8006e10 <checkAktifCalisma+0x11d8>
 8006d42:	2104      	movs	r1, #4
 8006d44:	4877      	ldr	r0, [pc, #476]	; (8006f24 <checkAktifCalisma+0x12ec>)
 8006d46:	f002 fb17 	bl	8009378 <HAL_GPIO_ReadPin>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d15f      	bne.n	8006e10 <checkAktifCalisma+0x11d8>
 8006d50:	4b75      	ldr	r3, [pc, #468]	; (8006f28 <checkAktifCalisma+0x12f0>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d05b      	beq.n	8006e10 <checkAktifCalisma+0x11d8>
 8006d58:	4b74      	ldr	r3, [pc, #464]	; (8006f2c <checkAktifCalisma+0x12f4>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d057      	beq.n	8006e10 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006d60:	4b74      	ldr	r3, [pc, #464]	; (8006f34 <checkAktifCalisma+0x12fc>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	4b72      	ldr	r3, [pc, #456]	; (8006f34 <checkAktifCalisma+0x12fc>)
 8006d6a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006d6c:	4b71      	ldr	r3, [pc, #452]	; (8006f34 <checkAktifCalisma+0x12fc>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b09      	cmp	r3, #9
 8006d72:	d908      	bls.n	8006d86 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006d74:	4b6f      	ldr	r3, [pc, #444]	; (8006f34 <checkAktifCalisma+0x12fc>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006d7a:	4b6f      	ldr	r3, [pc, #444]	; (8006f38 <checkAktifCalisma+0x1300>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4b6d      	ldr	r3, [pc, #436]	; (8006f38 <checkAktifCalisma+0x1300>)
 8006d84:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006d86:	4b6c      	ldr	r3, [pc, #432]	; (8006f38 <checkAktifCalisma+0x1300>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d908      	bls.n	8006da0 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	; (8006f38 <checkAktifCalisma+0x1300>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006d94:	4b69      	ldr	r3, [pc, #420]	; (8006f3c <checkAktifCalisma+0x1304>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	4b67      	ldr	r3, [pc, #412]	; (8006f3c <checkAktifCalisma+0x1304>)
 8006d9e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006da0:	4b66      	ldr	r3, [pc, #408]	; (8006f3c <checkAktifCalisma+0x1304>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	d908      	bls.n	8006dba <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006da8:	4b64      	ldr	r3, [pc, #400]	; (8006f3c <checkAktifCalisma+0x1304>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006dae:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <checkAktifCalisma+0x1308>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	4b62      	ldr	r3, [pc, #392]	; (8006f40 <checkAktifCalisma+0x1308>)
 8006db8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006dba:	4b61      	ldr	r3, [pc, #388]	; (8006f40 <checkAktifCalisma+0x1308>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b09      	cmp	r3, #9
 8006dc0:	d908      	bls.n	8006dd4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <checkAktifCalisma+0x1308>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006dc8:	4b5e      	ldr	r3, [pc, #376]	; (8006f44 <checkAktifCalisma+0x130c>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	4b5c      	ldr	r3, [pc, #368]	; (8006f44 <checkAktifCalisma+0x130c>)
 8006dd2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006dd4:	4b5b      	ldr	r3, [pc, #364]	; (8006f44 <checkAktifCalisma+0x130c>)
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	4b5b      	ldr	r3, [pc, #364]	; (8006f48 <checkAktifCalisma+0x1310>)
 8006dda:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006dde:	4b58      	ldr	r3, [pc, #352]	; (8006f40 <checkAktifCalisma+0x1308>)
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	4b59      	ldr	r3, [pc, #356]	; (8006f48 <checkAktifCalisma+0x1310>)
 8006de4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006de6:	4b55      	ldr	r3, [pc, #340]	; (8006f3c <checkAktifCalisma+0x1304>)
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	4b57      	ldr	r3, [pc, #348]	; (8006f48 <checkAktifCalisma+0x1310>)
 8006dec:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006dee:	4b52      	ldr	r3, [pc, #328]	; (8006f38 <checkAktifCalisma+0x1300>)
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	4b55      	ldr	r3, [pc, #340]	; (8006f48 <checkAktifCalisma+0x1310>)
 8006df4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006df6:	4b4f      	ldr	r3, [pc, #316]	; (8006f34 <checkAktifCalisma+0x12fc>)
 8006df8:	781a      	ldrb	r2, [r3, #0]
 8006dfa:	4b53      	ldr	r3, [pc, #332]	; (8006f48 <checkAktifCalisma+0x1310>)
 8006dfc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006dfe:	4b53      	ldr	r3, [pc, #332]	; (8006f4c <checkAktifCalisma+0x1314>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006e04:	4b46      	ldr	r3, [pc, #280]	; (8006f20 <checkAktifCalisma+0x12e8>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006e0a:	4b49      	ldr	r3, [pc, #292]	; (8006f30 <checkAktifCalisma+0x12f8>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e14:	484e      	ldr	r0, [pc, #312]	; (8006f50 <checkAktifCalisma+0x1318>)
 8006e16:	f002 faaf 	bl	8009378 <HAL_GPIO_ReadPin>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d016      	beq.n	8006e4e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006e20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e24:	484a      	ldr	r0, [pc, #296]	; (8006f50 <checkAktifCalisma+0x1318>)
 8006e26:	f002 faa7 	bl	8009378 <HAL_GPIO_ReadPin>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e34:	4846      	ldr	r0, [pc, #280]	; (8006f50 <checkAktifCalisma+0x1318>)
 8006e36:	f002 fa9f 	bl	8009378 <HAL_GPIO_ReadPin>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d006      	beq.n	8006e4e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006e40:	2140      	movs	r1, #64	; 0x40
 8006e42:	4838      	ldr	r0, [pc, #224]	; (8006f24 <checkAktifCalisma+0x12ec>)
 8006e44:	f002 fa98 	bl	8009378 <HAL_GPIO_ReadPin>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <checkAktifCalisma+0x121e>
			startBasili=1;
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <checkAktifCalisma+0x131c>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e002      	b.n	8006e5c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006e56:	4b3f      	ldr	r3, [pc, #252]	; (8006f54 <checkAktifCalisma+0x131c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006e5c:	4b3d      	ldr	r3, [pc, #244]	; (8006f54 <checkAktifCalisma+0x131c>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d016      	beq.n	8006e92 <checkAktifCalisma+0x125a>
 8006e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e68:	4839      	ldr	r0, [pc, #228]	; (8006f50 <checkAktifCalisma+0x1318>)
 8006e6a:	f002 fa85 	bl	8009378 <HAL_GPIO_ReadPin>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d10e      	bne.n	8006e92 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006e74:	4b38      	ldr	r3, [pc, #224]	; (8006f58 <checkAktifCalisma+0x1320>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006e7a:	f7fe f973 	bl	8005164 <convertAndSendData>
			hataKoduLcdGoster(1);
 8006e7e:	2001      	movs	r0, #1
 8006e80:	f7fe f88e 	bl	8004fa0 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fe fc25 	bl	80056d4 <hata2EEPROM>
			acilstophatasi=1;
 8006e8a:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <checkAktifCalisma+0x1324>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e018      	b.n	8006ec4 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006e92:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <checkAktifCalisma+0x1324>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d014      	beq.n	8006ec4 <checkAktifCalisma+0x128c>
 8006e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e9e:	482c      	ldr	r0, [pc, #176]	; (8006f50 <checkAktifCalisma+0x1318>)
 8006ea0:	f002 fa6a 	bl	8009378 <HAL_GPIO_ReadPin>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10c      	bne.n	8006ec4 <checkAktifCalisma+0x128c>
 8006eaa:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <checkAktifCalisma+0x131c>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f083 0301 	eor.w	r3, r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <checkAktifCalisma+0x1324>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	f7fe f81a 	bl	8004ef8 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006ec4:	4b26      	ldr	r3, [pc, #152]	; (8006f60 <checkAktifCalisma+0x1328>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f083 0301 	eor.w	r3, r3, #1
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04e      	beq.n	8006f70 <checkAktifCalisma+0x1338>
 8006ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ed6:	481e      	ldr	r0, [pc, #120]	; (8006f50 <checkAktifCalisma+0x1318>)
 8006ed8:	f002 fa4e 	bl	8009378 <HAL_GPIO_ReadPin>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <checkAktifCalisma+0x12b2>
 8006ee2:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <checkAktifCalisma+0x132c>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d042      	beq.n	8006f70 <checkAktifCalisma+0x1338>
 8006eea:	4b1f      	ldr	r3, [pc, #124]	; (8006f68 <checkAktifCalisma+0x1330>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d13e      	bne.n	8006f70 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006ef2:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <checkAktifCalisma+0x1320>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006ef8:	f7fe f934 	bl	8005164 <convertAndSendData>
			hataKoduLcdGoster(2);
 8006efc:	2002      	movs	r0, #2
 8006efe:	f7fe f84f 	bl	8004fa0 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006f02:	2002      	movs	r0, #2
 8006f04:	f7fe fbe6 	bl	80056d4 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006f08:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <checkAktifCalisma+0x1334>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e047      	b.n	8006fa0 <checkAktifCalisma+0x1368>
 8006f10:	20000443 	.word	0x20000443
 8006f14:	20000442 	.word	0x20000442
 8006f18:	20000441 	.word	0x20000441
 8006f1c:	40010800 	.word	0x40010800
 8006f20:	20000437 	.word	0x20000437
 8006f24:	40011000 	.word	0x40011000
 8006f28:	200003fe 	.word	0x200003fe
 8006f2c:	2000043a 	.word	0x2000043a
 8006f30:	20000438 	.word	0x20000438
 8006f34:	200003f5 	.word	0x200003f5
 8006f38:	200003f6 	.word	0x200003f6
 8006f3c:	200000a4 	.word	0x200000a4
 8006f40:	200000a5 	.word	0x200000a5
 8006f44:	200003f7 	.word	0x200003f7
 8006f48:	20000328 	.word	0x20000328
 8006f4c:	20000424 	.word	0x20000424
 8006f50:	40010c00 	.word	0x40010c00
 8006f54:	20000446 	.word	0x20000446
 8006f58:	2000044d 	.word	0x2000044d
 8006f5c:	20000448 	.word	0x20000448
 8006f60:	2000044f 	.word	0x2000044f
 8006f64:	20000459 	.word	0x20000459
 8006f68:	200003fc 	.word	0x200003fc
 8006f6c:	20000449 	.word	0x20000449
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006f70:	4b9b      	ldr	r3, [pc, #620]	; (80071e0 <checkAktifCalisma+0x15a8>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d013      	beq.n	8006fa0 <checkAktifCalisma+0x1368>
 8006f78:	4b9a      	ldr	r3, [pc, #616]	; (80071e4 <checkAktifCalisma+0x15ac>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00f      	beq.n	8006fa0 <checkAktifCalisma+0x1368>
 8006f80:	4b99      	ldr	r3, [pc, #612]	; (80071e8 <checkAktifCalisma+0x15b0>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f083 0301 	eor.w	r3, r3, #1
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006f8e:	4b94      	ldr	r3, [pc, #592]	; (80071e0 <checkAktifCalisma+0x15a8>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006f94:	4b95      	ldr	r3, [pc, #596]	; (80071ec <checkAktifCalisma+0x15b4>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006f9a:	2002      	movs	r0, #2
 8006f9c:	f7fd ffac 	bl	8004ef8 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006fa0:	4b93      	ldr	r3, [pc, #588]	; (80071f0 <checkAktifCalisma+0x15b8>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11e      	bne.n	8006fe6 <checkAktifCalisma+0x13ae>
 8006fa8:	4b92      	ldr	r3, [pc, #584]	; (80071f4 <checkAktifCalisma+0x15bc>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d11a      	bne.n	8006fe6 <checkAktifCalisma+0x13ae>
 8006fb0:	4b91      	ldr	r3, [pc, #580]	; (80071f8 <checkAktifCalisma+0x15c0>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d016      	beq.n	8006fe6 <checkAktifCalisma+0x13ae>
 8006fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fbc:	488f      	ldr	r0, [pc, #572]	; (80071fc <checkAktifCalisma+0x15c4>)
 8006fbe:	f002 f9db 	bl	8009378 <HAL_GPIO_ReadPin>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d10e      	bne.n	8006fe6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006fc8:	4b8d      	ldr	r3, [pc, #564]	; (8007200 <checkAktifCalisma+0x15c8>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006fce:	f7fe f8c9 	bl	8005164 <convertAndSendData>
			hataKoduLcdGoster(3);
 8006fd2:	2003      	movs	r0, #3
 8006fd4:	f7fd ffe4 	bl	8004fa0 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006fd8:	2003      	movs	r0, #3
 8006fda:	f7fe fb7b 	bl	80056d4 <hata2EEPROM>
			basinchatasi=1;
 8006fde:	4b89      	ldr	r3, [pc, #548]	; (8007204 <checkAktifCalisma+0x15cc>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e015      	b.n	8007012 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006fe6:	4b87      	ldr	r3, [pc, #540]	; (8007204 <checkAktifCalisma+0x15cc>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d011      	beq.n	8007012 <checkAktifCalisma+0x13da>
 8006fee:	4b80      	ldr	r3, [pc, #512]	; (80071f0 <checkAktifCalisma+0x15b8>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10d      	bne.n	8007012 <checkAktifCalisma+0x13da>
 8006ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ffa:	4883      	ldr	r0, [pc, #524]	; (8007208 <checkAktifCalisma+0x15d0>)
 8006ffc:	f002 f9bc 	bl	8009378 <HAL_GPIO_ReadPin>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8007006:	4b7f      	ldr	r3, [pc, #508]	; (8007204 <checkAktifCalisma+0x15cc>)
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800700c:	2003      	movs	r0, #3
 800700e:	f7fd ff73 	bl	8004ef8 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007012:	4b7e      	ldr	r3, [pc, #504]	; (800720c <checkAktifCalisma+0x15d4>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <checkAktifCalisma+0x13ea>
 800701a:	4b7d      	ldr	r3, [pc, #500]	; (8007210 <checkAktifCalisma+0x15d8>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01e      	beq.n	8007060 <checkAktifCalisma+0x1428>
 8007022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007026:	487b      	ldr	r0, [pc, #492]	; (8007214 <checkAktifCalisma+0x15dc>)
 8007028:	f002 f9a6 	bl	8009378 <HAL_GPIO_ReadPin>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d116      	bne.n	8007060 <checkAktifCalisma+0x1428>
 8007032:	4b79      	ldr	r3, [pc, #484]	; (8007218 <checkAktifCalisma+0x15e0>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d003      	beq.n	8007042 <checkAktifCalisma+0x140a>
 800703a:	4b77      	ldr	r3, [pc, #476]	; (8007218 <checkAktifCalisma+0x15e0>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b03      	cmp	r3, #3
 8007040:	d10e      	bne.n	8007060 <checkAktifCalisma+0x1428>
			hataVar=1;
 8007042:	4b6f      	ldr	r3, [pc, #444]	; (8007200 <checkAktifCalisma+0x15c8>)
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8007048:	f7fe f88c 	bl	8005164 <convertAndSendData>
			hataKoduLcdGoster(4);
 800704c:	2004      	movs	r0, #4
 800704e:	f7fd ffa7 	bl	8004fa0 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007052:	2004      	movs	r0, #4
 8007054:	f7fe fb3e 	bl	80056d4 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007058:	4b70      	ldr	r3, [pc, #448]	; (800721c <checkAktifCalisma+0x15e4>)
 800705a:	2201      	movs	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e01f      	b.n	80070a0 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007060:	4b6e      	ldr	r3, [pc, #440]	; (800721c <checkAktifCalisma+0x15e4>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01b      	beq.n	80070a0 <checkAktifCalisma+0x1468>
 8007068:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <checkAktifCalisma+0x15e8>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d017      	beq.n	80070a0 <checkAktifCalisma+0x1468>
 8007070:	4b66      	ldr	r3, [pc, #408]	; (800720c <checkAktifCalisma+0x15d4>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f083 0301 	eor.w	r3, r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d010      	beq.n	80070a0 <checkAktifCalisma+0x1468>
 800707e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007082:	4864      	ldr	r0, [pc, #400]	; (8007214 <checkAktifCalisma+0x15dc>)
 8007084:	f002 f978 	bl	8009378 <HAL_GPIO_ReadPin>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d108      	bne.n	80070a0 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800708e:	4b63      	ldr	r3, [pc, #396]	; (800721c <checkAktifCalisma+0x15e4>)
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007094:	4b5e      	ldr	r3, [pc, #376]	; (8007210 <checkAktifCalisma+0x15d8>)
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800709a:	2004      	movs	r0, #4
 800709c:	f7fd ff2c 	bl	8004ef8 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80070a0:	4b5a      	ldr	r3, [pc, #360]	; (800720c <checkAktifCalisma+0x15d4>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <checkAktifCalisma+0x1478>
 80070a8:	4b5e      	ldr	r3, [pc, #376]	; (8007224 <checkAktifCalisma+0x15ec>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01e      	beq.n	80070ee <checkAktifCalisma+0x14b6>
 80070b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070b4:	4857      	ldr	r0, [pc, #348]	; (8007214 <checkAktifCalisma+0x15dc>)
 80070b6:	f002 f95f 	bl	8009378 <HAL_GPIO_ReadPin>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d116      	bne.n	80070ee <checkAktifCalisma+0x14b6>
 80070c0:	4b55      	ldr	r3, [pc, #340]	; (8007218 <checkAktifCalisma+0x15e0>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d003      	beq.n	80070d0 <checkAktifCalisma+0x1498>
 80070c8:	4b53      	ldr	r3, [pc, #332]	; (8007218 <checkAktifCalisma+0x15e0>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d10e      	bne.n	80070ee <checkAktifCalisma+0x14b6>
			hataVar=1;
 80070d0:	4b4b      	ldr	r3, [pc, #300]	; (8007200 <checkAktifCalisma+0x15c8>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 80070d6:	f7fe f845 	bl	8005164 <convertAndSendData>
			hataKoduLcdGoster(5);
 80070da:	2005      	movs	r0, #5
 80070dc:	f7fd ff60 	bl	8004fa0 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80070e0:	2005      	movs	r0, #5
 80070e2:	f7fe faf7 	bl	80056d4 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80070e6:	4b50      	ldr	r3, [pc, #320]	; (8007228 <checkAktifCalisma+0x15f0>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e023      	b.n	8007136 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80070ee:	4b4e      	ldr	r3, [pc, #312]	; (8007228 <checkAktifCalisma+0x15f0>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01f      	beq.n	8007136 <checkAktifCalisma+0x14fe>
 80070f6:	4b4a      	ldr	r3, [pc, #296]	; (8007220 <checkAktifCalisma+0x15e8>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01b      	beq.n	8007136 <checkAktifCalisma+0x14fe>
 80070fe:	4b43      	ldr	r3, [pc, #268]	; (800720c <checkAktifCalisma+0x15d4>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	f083 0301 	eor.w	r3, r3, #1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d014      	beq.n	8007136 <checkAktifCalisma+0x14fe>
 800710c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007110:	4840      	ldr	r0, [pc, #256]	; (8007214 <checkAktifCalisma+0x15dc>)
 8007112:	f002 f931 	bl	8009378 <HAL_GPIO_ReadPin>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10c      	bne.n	8007136 <checkAktifCalisma+0x14fe>
 800711c:	4b40      	ldr	r3, [pc, #256]	; (8007220 <checkAktifCalisma+0x15e8>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8007124:	4b40      	ldr	r3, [pc, #256]	; (8007228 <checkAktifCalisma+0x15f0>)
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800712a:	4b3e      	ldr	r3, [pc, #248]	; (8007224 <checkAktifCalisma+0x15ec>)
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007130:	2005      	movs	r0, #5
 8007132:	f7fd fee1 	bl	8004ef8 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007136:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <checkAktifCalisma+0x15c0>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d107      	bne.n	800714e <checkAktifCalisma+0x1516>
 800713e:	4b2a      	ldr	r3, [pc, #168]	; (80071e8 <checkAktifCalisma+0x15b0>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <checkAktifCalisma+0x1516>
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <checkAktifCalisma+0x15f4>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800714e:	4b38      	ldr	r3, [pc, #224]	; (8007230 <checkAktifCalisma+0x15f8>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b38      	ldr	r3, [pc, #224]	; (8007234 <checkAktifCalisma+0x15fc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	4a37      	ldr	r2, [pc, #220]	; (8007238 <checkAktifCalisma+0x1600>)
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	4293      	cmp	r3, r2
 800715e:	d30d      	bcc.n	800717c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8007160:	4b27      	ldr	r3, [pc, #156]	; (8007200 <checkAktifCalisma+0x15c8>)
 8007162:	2201      	movs	r2, #1
 8007164:	701a      	strb	r2, [r3, #0]
			  	convertAndSendData();
 8007166:	f7fd fffd 	bl	8005164 <convertAndSendData>
			  	hataKoduLcdGoster(6);
 800716a:	2006      	movs	r0, #6
 800716c:	f7fd ff18 	bl	8004fa0 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007170:	2006      	movs	r0, #6
 8007172:	f7fe faaf 	bl	80056d4 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007176:	4b31      	ldr	r3, [pc, #196]	; (800723c <checkAktifCalisma+0x1604>)
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800717c:	4b2f      	ldr	r3, [pc, #188]	; (800723c <checkAktifCalisma+0x1604>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d013      	beq.n	80071ac <checkAktifCalisma+0x1574>
 8007184:	2108      	movs	r1, #8
 8007186:	4823      	ldr	r0, [pc, #140]	; (8007214 <checkAktifCalisma+0x15dc>)
 8007188:	f002 f8f6 	bl	8009378 <HAL_GPIO_ReadPin>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <checkAktifCalisma+0x1574>
 8007192:	4b1e      	ldr	r3, [pc, #120]	; (800720c <checkAktifCalisma+0x15d4>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f083 0301 	eor.w	r3, r3, #1
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80071a0:	4b26      	ldr	r3, [pc, #152]	; (800723c <checkAktifCalisma+0x1604>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80071a6:	2006      	movs	r0, #6
 80071a8:	f7fd fea6 	bl	8004ef8 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80071ac:	4b24      	ldr	r3, [pc, #144]	; (8007240 <checkAktifCalisma+0x1608>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <checkAktifCalisma+0x1594>
 80071b4:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <checkAktifCalisma+0x15b0>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <checkAktifCalisma+0x1594>
 80071bc:	4b21      	ldr	r3, [pc, #132]	; (8007244 <checkAktifCalisma+0x160c>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <checkAktifCalisma+0x1594>
 80071c4:	4b19      	ldr	r3, [pc, #100]	; (800722c <checkAktifCalisma+0x15f4>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d03f      	beq.n	800724c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80071cc:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <checkAktifCalisma+0x1610>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80071d2:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <checkAktifCalisma+0x15d8>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80071d8:	4b12      	ldr	r3, [pc, #72]	; (8007224 <checkAktifCalisma+0x15ec>)
 80071da:	2201      	movs	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e03c      	b.n	800725a <checkAktifCalisma+0x1622>
 80071e0:	20000449 	.word	0x20000449
 80071e4:	2000044f 	.word	0x2000044f
 80071e8:	20000430 	.word	0x20000430
 80071ec:	20000459 	.word	0x20000459
 80071f0:	200003fb 	.word	0x200003fb
 80071f4:	200003ff 	.word	0x200003ff
 80071f8:	2000044c 	.word	0x2000044c
 80071fc:	40011000 	.word	0x40011000
 8007200:	2000044d 	.word	0x2000044d
 8007204:	20000456 	.word	0x20000456
 8007208:	40010c00 	.word	0x40010c00
 800720c:	20000446 	.word	0x20000446
 8007210:	2000045a 	.word	0x2000045a
 8007214:	40010800 	.word	0x40010800
 8007218:	20000400 	.word	0x20000400
 800721c:	20000457 	.word	0x20000457
 8007220:	2000043a 	.word	0x2000043a
 8007224:	2000045b 	.word	0x2000045b
 8007228:	20000458 	.word	0x20000458
 800722c:	2000042f 	.word	0x2000042f
 8007230:	200003a0 	.word	0x200003a0
 8007234:	200003b4 	.word	0x200003b4
 8007238:	20000410 	.word	0x20000410
 800723c:	20000447 	.word	0x20000447
 8007240:	2000042d 	.word	0x2000042d
 8007244:	2000042e 	.word	0x2000042e
 8007248:	2000044e 	.word	0x2000044e
		} else {
			makineCalisiyor=1;
 800724c:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <checkAktifCalisma+0x1690>)
 800724e:	2201      	movs	r2, #1
 8007250:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007252:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <checkAktifCalisma+0x1694>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <checkAktifCalisma+0x1698>)
 8007258:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800725a:	4b1e      	ldr	r3, [pc, #120]	; (80072d4 <checkAktifCalisma+0x169c>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d02f      	beq.n	80072c2 <checkAktifCalisma+0x168a>
 8007262:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <checkAktifCalisma+0x16a0>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f083 0301 	eor.w	r3, r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d028      	beq.n	80072c2 <checkAktifCalisma+0x168a>
 8007270:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <checkAktifCalisma+0x16a4>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f083 0301 	eor.w	r3, r3, #1
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d021      	beq.n	80072c2 <checkAktifCalisma+0x168a>
 800727e:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <checkAktifCalisma+0x16a8>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f083 0301 	eor.w	r3, r3, #1
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800728c:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <checkAktifCalisma+0x16ac>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f083 0301 	eor.w	r3, r3, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d013      	beq.n	80072c2 <checkAktifCalisma+0x168a>
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <checkAktifCalisma+0x16b0>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	f083 0301 	eor.w	r3, r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <checkAktifCalisma+0x168a>
 80072a8:	4b10      	ldr	r3, [pc, #64]	; (80072ec <checkAktifCalisma+0x16b4>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f083 0301 	eor.w	r3, r3, #1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <checkAktifCalisma+0x168a>
			hataVar=0;
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <checkAktifCalisma+0x169c>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80072bc:	2007      	movs	r0, #7
 80072be:	f7fd fe1b 	bl	8004ef8 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	2000044e 	.word	0x2000044e
 80072cc:	200003a0 	.word	0x200003a0
 80072d0:	200003b4 	.word	0x200003b4
 80072d4:	2000044d 	.word	0x2000044d
 80072d8:	20000448 	.word	0x20000448
 80072dc:	20000449 	.word	0x20000449
 80072e0:	20000456 	.word	0x20000456
 80072e4:	20000457 	.word	0x20000457
 80072e8:	20000458 	.word	0x20000458
 80072ec:	20000447 	.word	0x20000447

080072f0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80072f4:	4b8b      	ldr	r3, [pc, #556]	; (8007524 <checkDemoModCalisma+0x234>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f040 8229 	bne.w	8007750 <checkDemoModCalisma+0x460>
 80072fe:	4b8a      	ldr	r3, [pc, #552]	; (8007528 <checkDemoModCalisma+0x238>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8224 	beq.w	8007750 <checkDemoModCalisma+0x460>
 8007308:	4b88      	ldr	r3, [pc, #544]	; (800752c <checkDemoModCalisma+0x23c>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 821f 	bne.w	8007750 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007312:	2102      	movs	r1, #2
 8007314:	4886      	ldr	r0, [pc, #536]	; (8007530 <checkDemoModCalisma+0x240>)
 8007316:	f002 f82f 	bl	8009378 <HAL_GPIO_ReadPin>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11d      	bne.n	800735c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007320:	4b84      	ldr	r3, [pc, #528]	; (8007534 <checkDemoModCalisma+0x244>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f083 0301 	eor.w	r3, r3, #1
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d016      	beq.n	800735c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800732e:	4b82      	ldr	r3, [pc, #520]	; (8007538 <checkDemoModCalisma+0x248>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	f083 0301 	eor.w	r3, r3, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00f      	beq.n	800735c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 800733c:	4b7f      	ldr	r3, [pc, #508]	; (800753c <checkDemoModCalisma+0x24c>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f083 0301 	eor.w	r3, r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d008      	beq.n	800735c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800734a:	2201      	movs	r2, #1
 800734c:	2104      	movs	r1, #4
 800734e:	487c      	ldr	r0, [pc, #496]	; (8007540 <checkDemoModCalisma+0x250>)
 8007350:	f002 f829 	bl	80093a6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007354:	4b7b      	ldr	r3, [pc, #492]	; (8007544 <checkDemoModCalisma+0x254>)
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e00e      	b.n	800737a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800735c:	2102      	movs	r1, #2
 800735e:	4874      	ldr	r0, [pc, #464]	; (8007530 <checkDemoModCalisma+0x240>)
 8007360:	f002 f80a 	bl	8009378 <HAL_GPIO_ReadPin>
 8007364:	4603      	mov	r3, r0
 8007366:	2b01      	cmp	r3, #1
 8007368:	d107      	bne.n	800737a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800736a:	2200      	movs	r2, #0
 800736c:	2104      	movs	r1, #4
 800736e:	4874      	ldr	r0, [pc, #464]	; (8007540 <checkDemoModCalisma+0x250>)
 8007370:	f002 f819 	bl	80093a6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007374:	4b73      	ldr	r3, [pc, #460]	; (8007544 <checkDemoModCalisma+0x254>)
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800737a:	4b72      	ldr	r3, [pc, #456]	; (8007544 <checkDemoModCalisma+0x254>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <checkDemoModCalisma+0xaa>
 8007382:	4b6d      	ldr	r3, [pc, #436]	; (8007538 <checkDemoModCalisma+0x248>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <checkDemoModCalisma+0xaa>
 800738a:	4b6c      	ldr	r3, [pc, #432]	; (800753c <checkDemoModCalisma+0x24c>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <checkDemoModCalisma+0xaa>
 8007392:	4b68      	ldr	r3, [pc, #416]	; (8007534 <checkDemoModCalisma+0x244>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00c      	beq.n	80073b4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800739a:	2201      	movs	r2, #1
 800739c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073a0:	4867      	ldr	r0, [pc, #412]	; (8007540 <checkDemoModCalisma+0x250>)
 80073a2:	f002 f800 	bl	80093a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80073a6:	2201      	movs	r2, #1
 80073a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073ac:	4864      	ldr	r0, [pc, #400]	; (8007540 <checkDemoModCalisma+0x250>)
 80073ae:	f001 fffa 	bl	80093a6 <HAL_GPIO_WritePin>
 80073b2:	e00b      	b.n	80073cc <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073ba:	4861      	ldr	r0, [pc, #388]	; (8007540 <checkDemoModCalisma+0x250>)
 80073bc:	f001 fff3 	bl	80093a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80073c0:	2200      	movs	r2, #0
 80073c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073c6:	485e      	ldr	r0, [pc, #376]	; (8007540 <checkDemoModCalisma+0x250>)
 80073c8:	f001 ffed 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073cc:	2102      	movs	r1, #2
 80073ce:	4858      	ldr	r0, [pc, #352]	; (8007530 <checkDemoModCalisma+0x240>)
 80073d0:	f001 ffd2 	bl	8009378 <HAL_GPIO_ReadPin>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d10d      	bne.n	80073f6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80073da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073de:	4854      	ldr	r0, [pc, #336]	; (8007530 <checkDemoModCalisma+0x240>)
 80073e0:	f001 ffca 	bl	8009378 <HAL_GPIO_ReadPin>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80073ea:	4b56      	ldr	r3, [pc, #344]	; (8007544 <checkDemoModCalisma+0x254>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f083 0301 	eor.w	r3, r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073f6:	2102      	movs	r1, #2
 80073f8:	484d      	ldr	r0, [pc, #308]	; (8007530 <checkDemoModCalisma+0x240>)
 80073fa:	f001 ffbd 	bl	8009378 <HAL_GPIO_ReadPin>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d125      	bne.n	8007450 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007408:	4849      	ldr	r0, [pc, #292]	; (8007530 <checkDemoModCalisma+0x240>)
 800740a:	f001 ffb5 	bl	8009378 <HAL_GPIO_ReadPin>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11d      	bne.n	8007450 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007414:	4b4b      	ldr	r3, [pc, #300]	; (8007544 <checkDemoModCalisma+0x254>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f083 0301 	eor.w	r3, r3, #1
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007422:	4b44      	ldr	r3, [pc, #272]	; (8007534 <checkDemoModCalisma+0x244>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f083 0301 	eor.w	r3, r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007430:	4b42      	ldr	r3, [pc, #264]	; (800753c <checkDemoModCalisma+0x24c>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f083 0301 	eor.w	r3, r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800743e:	2201      	movs	r2, #1
 8007440:	2120      	movs	r1, #32
 8007442:	483b      	ldr	r0, [pc, #236]	; (8007530 <checkDemoModCalisma+0x240>)
 8007444:	f001 ffaf 	bl	80093a6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007448:	4b3b      	ldr	r3, [pc, #236]	; (8007538 <checkDemoModCalisma+0x248>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e007      	b.n	8007460 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007450:	2200      	movs	r2, #0
 8007452:	2120      	movs	r1, #32
 8007454:	4836      	ldr	r0, [pc, #216]	; (8007530 <checkDemoModCalisma+0x240>)
 8007456:	f001 ffa6 	bl	80093a6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800745a:	4b37      	ldr	r3, [pc, #220]	; (8007538 <checkDemoModCalisma+0x248>)
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007460:	2102      	movs	r1, #2
 8007462:	4833      	ldr	r0, [pc, #204]	; (8007530 <checkDemoModCalisma+0x240>)
 8007464:	f001 ff88 	bl	8009378 <HAL_GPIO_ReadPin>
 8007468:	4603      	mov	r3, r0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d125      	bne.n	80074ba <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800746e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007472:	482f      	ldr	r0, [pc, #188]	; (8007530 <checkDemoModCalisma+0x240>)
 8007474:	f001 ff80 	bl	8009378 <HAL_GPIO_ReadPin>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d11d      	bne.n	80074ba <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800747e:	4b31      	ldr	r3, [pc, #196]	; (8007544 <checkDemoModCalisma+0x254>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	f083 0301 	eor.w	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d016      	beq.n	80074ba <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800748c:	4b2a      	ldr	r3, [pc, #168]	; (8007538 <checkDemoModCalisma+0x248>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f083 0301 	eor.w	r3, r3, #1
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800749a:	4b26      	ldr	r3, [pc, #152]	; (8007534 <checkDemoModCalisma+0x244>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f083 0301 	eor.w	r3, r3, #1
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80074a8:	2201      	movs	r2, #1
 80074aa:	2110      	movs	r1, #16
 80074ac:	4820      	ldr	r0, [pc, #128]	; (8007530 <checkDemoModCalisma+0x240>)
 80074ae:	f001 ff7a 	bl	80093a6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80074b2:	4b22      	ldr	r3, [pc, #136]	; (800753c <checkDemoModCalisma+0x24c>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e007      	b.n	80074ca <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80074ba:	2200      	movs	r2, #0
 80074bc:	2110      	movs	r1, #16
 80074be:	481c      	ldr	r0, [pc, #112]	; (8007530 <checkDemoModCalisma+0x240>)
 80074c0:	f001 ff71 	bl	80093a6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80074c4:	4b1d      	ldr	r3, [pc, #116]	; (800753c <checkDemoModCalisma+0x24c>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80074ca:	2104      	movs	r1, #4
 80074cc:	4818      	ldr	r0, [pc, #96]	; (8007530 <checkDemoModCalisma+0x240>)
 80074ce:	f001 ff53 	bl	8009378 <HAL_GPIO_ReadPin>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d139      	bne.n	800754c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <checkDemoModCalisma+0x254>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f083 0301 	eor.w	r3, r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d032      	beq.n	800754c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80074e6:	4b15      	ldr	r3, [pc, #84]	; (800753c <checkDemoModCalisma+0x24c>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	f083 0301 	eor.w	r3, r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d02b      	beq.n	800754c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80074f4:	4b10      	ldr	r3, [pc, #64]	; (8007538 <checkDemoModCalisma+0x248>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f083 0301 	eor.w	r3, r3, #1
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d024      	beq.n	800754c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007502:	2201      	movs	r2, #1
 8007504:	2102      	movs	r1, #2
 8007506:	480e      	ldr	r0, [pc, #56]	; (8007540 <checkDemoModCalisma+0x250>)
 8007508:	f001 ff4d 	bl	80093a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800750c:	2201      	movs	r2, #1
 800750e:	2101      	movs	r1, #1
 8007510:	480b      	ldr	r0, [pc, #44]	; (8007540 <checkDemoModCalisma+0x250>)
 8007512:	f001 ff48 	bl	80093a6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007516:	4b07      	ldr	r3, [pc, #28]	; (8007534 <checkDemoModCalisma+0x244>)
 8007518:	2201      	movs	r2, #1
 800751a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <checkDemoModCalisma+0x258>)
 800751e:	2201      	movs	r2, #1
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	e027      	b.n	8007574 <checkDemoModCalisma+0x284>
 8007524:	20000416 	.word	0x20000416
 8007528:	2000044a 	.word	0x2000044a
 800752c:	20000415 	.word	0x20000415
 8007530:	40011000 	.word	0x40011000
 8007534:	20000451 	.word	0x20000451
 8007538:	20000452 	.word	0x20000452
 800753c:	20000453 	.word	0x20000453
 8007540:	40010c00 	.word	0x40010c00
 8007544:	20000450 	.word	0x20000450
 8007548:	20000436 	.word	0x20000436
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800754c:	2104      	movs	r1, #4
 800754e:	48a0      	ldr	r0, [pc, #640]	; (80077d0 <checkDemoModCalisma+0x4e0>)
 8007550:	f001 ff12 	bl	8009378 <HAL_GPIO_ReadPin>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d10c      	bne.n	8007574 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800755a:	2200      	movs	r2, #0
 800755c:	2102      	movs	r1, #2
 800755e:	489d      	ldr	r0, [pc, #628]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 8007560:	f001 ff21 	bl	80093a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007564:	2200      	movs	r2, #0
 8007566:	2101      	movs	r1, #1
 8007568:	489a      	ldr	r0, [pc, #616]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 800756a:	f001 ff1c 	bl	80093a6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800756e:	4b9a      	ldr	r3, [pc, #616]	; (80077d8 <checkDemoModCalisma+0x4e8>)
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007574:	2104      	movs	r1, #4
 8007576:	4896      	ldr	r0, [pc, #600]	; (80077d0 <checkDemoModCalisma+0x4e0>)
 8007578:	f001 fefe 	bl	8009378 <HAL_GPIO_ReadPin>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10d      	bne.n	800759e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007582:	2201      	movs	r2, #1
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	4895      	ldr	r0, [pc, #596]	; (80077dc <checkDemoModCalisma+0x4ec>)
 8007588:	f001 ff0d 	bl	80093a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800758c:	2201      	movs	r2, #1
 800758e:	2120      	movs	r1, #32
 8007590:	4892      	ldr	r0, [pc, #584]	; (80077dc <checkDemoModCalisma+0x4ec>)
 8007592:	f001 ff08 	bl	80093a6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007596:	4b92      	ldr	r3, [pc, #584]	; (80077e0 <checkDemoModCalisma+0x4f0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a92      	ldr	r2, [pc, #584]	; (80077e4 <checkDemoModCalisma+0x4f4>)
 800759c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800759e:	4b90      	ldr	r3, [pc, #576]	; (80077e0 <checkDemoModCalisma+0x4f0>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4b90      	ldr	r3, [pc, #576]	; (80077e4 <checkDemoModCalisma+0x4f4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d909      	bls.n	80075c0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80075ac:	2200      	movs	r2, #0
 80075ae:	2180      	movs	r1, #128	; 0x80
 80075b0:	488a      	ldr	r0, [pc, #552]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80075b2:	f001 fef8 	bl	80093a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80075b6:	2200      	movs	r2, #0
 80075b8:	2120      	movs	r1, #32
 80075ba:	4888      	ldr	r0, [pc, #544]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80075bc:	f001 fef3 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80075c0:	2102      	movs	r1, #2
 80075c2:	4883      	ldr	r0, [pc, #524]	; (80077d0 <checkDemoModCalisma+0x4e0>)
 80075c4:	f001 fed8 	bl	8009378 <HAL_GPIO_ReadPin>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d108      	bne.n	80075e0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80075ce:	2201      	movs	r2, #1
 80075d0:	2140      	movs	r1, #64	; 0x40
 80075d2:	4882      	ldr	r0, [pc, #520]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80075d4:	f001 fee7 	bl	80093a6 <HAL_GPIO_WritePin>
			timer3 = millis;
 80075d8:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <checkDemoModCalisma+0x4f0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a81      	ldr	r2, [pc, #516]	; (80077e4 <checkDemoModCalisma+0x4f4>)
 80075de:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80075e0:	4b7f      	ldr	r3, [pc, #508]	; (80077e0 <checkDemoModCalisma+0x4f0>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	4b7f      	ldr	r3, [pc, #508]	; (80077e4 <checkDemoModCalisma+0x4f4>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d904      	bls.n	80075f8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80075ee:	2200      	movs	r2, #0
 80075f0:	2140      	movs	r1, #64	; 0x40
 80075f2:	487a      	ldr	r0, [pc, #488]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80075f4:	f001 fed7 	bl	80093a6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80075f8:	4b7b      	ldr	r3, [pc, #492]	; (80077e8 <checkDemoModCalisma+0x4f8>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d058      	beq.n	80076b2 <checkDemoModCalisma+0x3c2>
 8007600:	4b7a      	ldr	r3, [pc, #488]	; (80077ec <checkDemoModCalisma+0x4fc>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d054      	beq.n	80076b2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007608:	4b79      	ldr	r3, [pc, #484]	; (80077f0 <checkDemoModCalisma+0x500>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	b2da      	uxtb	r2, r3
 8007610:	4b77      	ldr	r3, [pc, #476]	; (80077f0 <checkDemoModCalisma+0x500>)
 8007612:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007614:	4b76      	ldr	r3, [pc, #472]	; (80077f0 <checkDemoModCalisma+0x500>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b09      	cmp	r3, #9
 800761a:	d908      	bls.n	800762e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800761c:	4b74      	ldr	r3, [pc, #464]	; (80077f0 <checkDemoModCalisma+0x500>)
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007622:	4b74      	ldr	r3, [pc, #464]	; (80077f4 <checkDemoModCalisma+0x504>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	4b72      	ldr	r3, [pc, #456]	; (80077f4 <checkDemoModCalisma+0x504>)
 800762c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800762e:	4b71      	ldr	r3, [pc, #452]	; (80077f4 <checkDemoModCalisma+0x504>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b09      	cmp	r3, #9
 8007634:	d908      	bls.n	8007648 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007636:	4b6f      	ldr	r3, [pc, #444]	; (80077f4 <checkDemoModCalisma+0x504>)
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 800763c:	4b6e      	ldr	r3, [pc, #440]	; (80077f8 <checkDemoModCalisma+0x508>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	b2da      	uxtb	r2, r3
 8007644:	4b6c      	ldr	r3, [pc, #432]	; (80077f8 <checkDemoModCalisma+0x508>)
 8007646:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007648:	4b6b      	ldr	r3, [pc, #428]	; (80077f8 <checkDemoModCalisma+0x508>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b09      	cmp	r3, #9
 800764e:	d908      	bls.n	8007662 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007650:	4b69      	ldr	r3, [pc, #420]	; (80077f8 <checkDemoModCalisma+0x508>)
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007656:	4b69      	ldr	r3, [pc, #420]	; (80077fc <checkDemoModCalisma+0x50c>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	4b67      	ldr	r3, [pc, #412]	; (80077fc <checkDemoModCalisma+0x50c>)
 8007660:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007662:	4b66      	ldr	r3, [pc, #408]	; (80077fc <checkDemoModCalisma+0x50c>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b09      	cmp	r3, #9
 8007668:	d908      	bls.n	800767c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800766a:	4b64      	ldr	r3, [pc, #400]	; (80077fc <checkDemoModCalisma+0x50c>)
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007670:	4b63      	ldr	r3, [pc, #396]	; (8007800 <checkDemoModCalisma+0x510>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	b2da      	uxtb	r2, r3
 8007678:	4b61      	ldr	r3, [pc, #388]	; (8007800 <checkDemoModCalisma+0x510>)
 800767a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800767c:	4b60      	ldr	r3, [pc, #384]	; (8007800 <checkDemoModCalisma+0x510>)
 800767e:	781a      	ldrb	r2, [r3, #0]
 8007680:	4b60      	ldr	r3, [pc, #384]	; (8007804 <checkDemoModCalisma+0x514>)
 8007682:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007686:	4b5d      	ldr	r3, [pc, #372]	; (80077fc <checkDemoModCalisma+0x50c>)
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	4b5e      	ldr	r3, [pc, #376]	; (8007804 <checkDemoModCalisma+0x514>)
 800768c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800768e:	4b5a      	ldr	r3, [pc, #360]	; (80077f8 <checkDemoModCalisma+0x508>)
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	4b5c      	ldr	r3, [pc, #368]	; (8007804 <checkDemoModCalisma+0x514>)
 8007694:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007696:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <checkDemoModCalisma+0x504>)
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	4b5a      	ldr	r3, [pc, #360]	; (8007804 <checkDemoModCalisma+0x514>)
 800769c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800769e:	4b54      	ldr	r3, [pc, #336]	; (80077f0 <checkDemoModCalisma+0x500>)
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	4b58      	ldr	r3, [pc, #352]	; (8007804 <checkDemoModCalisma+0x514>)
 80076a4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80076a6:	4b58      	ldr	r3, [pc, #352]	; (8007808 <checkDemoModCalisma+0x518>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80076ac:	4b4f      	ldr	r3, [pc, #316]	; (80077ec <checkDemoModCalisma+0x4fc>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80076b2:	4b56      	ldr	r3, [pc, #344]	; (800780c <checkDemoModCalisma+0x51c>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 8087 	bne.w	80077ca <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80076bc:	4a54      	ldr	r2, [pc, #336]	; (8007810 <checkDemoModCalisma+0x520>)
 80076be:	2101      	movs	r1, #1
 80076c0:	2002      	movs	r0, #2
 80076c2:	f7f9 f879 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80076c6:	4a53      	ldr	r2, [pc, #332]	; (8007814 <checkDemoModCalisma+0x524>)
 80076c8:	2101      	movs	r1, #1
 80076ca:	2001      	movs	r0, #1
 80076cc:	f7f9 f874 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80076d0:	4b4b      	ldr	r3, [pc, #300]	; (8007800 <checkDemoModCalisma+0x510>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	220a      	movs	r2, #10
 80076d6:	4950      	ldr	r1, [pc, #320]	; (8007818 <checkDemoModCalisma+0x528>)
 80076d8:	4618      	mov	r0, r3
 80076da:	f004 fe79 	bl	800c3d0 <itoa>
			lcd_print(2,12,snum);
 80076de:	4a4e      	ldr	r2, [pc, #312]	; (8007818 <checkDemoModCalisma+0x528>)
 80076e0:	210c      	movs	r1, #12
 80076e2:	2002      	movs	r0, #2
 80076e4:	f7f9 f868 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80076e8:	4b44      	ldr	r3, [pc, #272]	; (80077fc <checkDemoModCalisma+0x50c>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	220a      	movs	r2, #10
 80076ee:	494a      	ldr	r1, [pc, #296]	; (8007818 <checkDemoModCalisma+0x528>)
 80076f0:	4618      	mov	r0, r3
 80076f2:	f004 fe6d 	bl	800c3d0 <itoa>
			lcd_print(2,13,snum);
 80076f6:	4a48      	ldr	r2, [pc, #288]	; (8007818 <checkDemoModCalisma+0x528>)
 80076f8:	210d      	movs	r1, #13
 80076fa:	2002      	movs	r0, #2
 80076fc:	f7f9 f85c 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007700:	4b3d      	ldr	r3, [pc, #244]	; (80077f8 <checkDemoModCalisma+0x508>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	220a      	movs	r2, #10
 8007706:	4944      	ldr	r1, [pc, #272]	; (8007818 <checkDemoModCalisma+0x528>)
 8007708:	4618      	mov	r0, r3
 800770a:	f004 fe61 	bl	800c3d0 <itoa>
			lcd_print(2,14,snum);
 800770e:	4a42      	ldr	r2, [pc, #264]	; (8007818 <checkDemoModCalisma+0x528>)
 8007710:	210e      	movs	r1, #14
 8007712:	2002      	movs	r0, #2
 8007714:	f7f9 f850 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007718:	4b36      	ldr	r3, [pc, #216]	; (80077f4 <checkDemoModCalisma+0x504>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	220a      	movs	r2, #10
 800771e:	493e      	ldr	r1, [pc, #248]	; (8007818 <checkDemoModCalisma+0x528>)
 8007720:	4618      	mov	r0, r3
 8007722:	f004 fe55 	bl	800c3d0 <itoa>
			lcd_print(2,15,snum);
 8007726:	4a3c      	ldr	r2, [pc, #240]	; (8007818 <checkDemoModCalisma+0x528>)
 8007728:	210f      	movs	r1, #15
 800772a:	2002      	movs	r0, #2
 800772c:	f7f9 f844 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007730:	4b2f      	ldr	r3, [pc, #188]	; (80077f0 <checkDemoModCalisma+0x500>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	220a      	movs	r2, #10
 8007736:	4938      	ldr	r1, [pc, #224]	; (8007818 <checkDemoModCalisma+0x528>)
 8007738:	4618      	mov	r0, r3
 800773a:	f004 fe49 	bl	800c3d0 <itoa>
			lcd_print(2,16,snum);
 800773e:	4a36      	ldr	r2, [pc, #216]	; (8007818 <checkDemoModCalisma+0x528>)
 8007740:	2110      	movs	r1, #16
 8007742:	2002      	movs	r0, #2
 8007744:	f7f9 f838 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007748:	4b34      	ldr	r3, [pc, #208]	; (800781c <checkDemoModCalisma+0x52c>)
 800774a:	2201      	movs	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800774e:	e03c      	b.n	80077ca <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007750:	4b33      	ldr	r3, [pc, #204]	; (8007820 <checkDemoModCalisma+0x530>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d003      	beq.n	8007760 <checkDemoModCalisma+0x470>
 8007758:	4b2c      	ldr	r3, [pc, #176]	; (800780c <checkDemoModCalisma+0x51c>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d134      	bne.n	80077ca <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007760:	2200      	movs	r2, #0
 8007762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007766:	481b      	ldr	r0, [pc, #108]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 8007768:	f001 fe1d 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800776c:	2200      	movs	r2, #0
 800776e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007772:	4818      	ldr	r0, [pc, #96]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 8007774:	f001 fe17 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007778:	2200      	movs	r2, #0
 800777a:	2104      	movs	r1, #4
 800777c:	4815      	ldr	r0, [pc, #84]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 800777e:	f001 fe12 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007782:	2200      	movs	r2, #0
 8007784:	2102      	movs	r1, #2
 8007786:	4813      	ldr	r0, [pc, #76]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 8007788:	f001 fe0d 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800778c:	2200      	movs	r2, #0
 800778e:	2101      	movs	r1, #1
 8007790:	4810      	ldr	r0, [pc, #64]	; (80077d4 <checkDemoModCalisma+0x4e4>)
 8007792:	f001 fe08 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007796:	2200      	movs	r2, #0
 8007798:	2120      	movs	r1, #32
 800779a:	480d      	ldr	r0, [pc, #52]	; (80077d0 <checkDemoModCalisma+0x4e0>)
 800779c:	f001 fe03 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80077a0:	2200      	movs	r2, #0
 80077a2:	2110      	movs	r1, #16
 80077a4:	480a      	ldr	r0, [pc, #40]	; (80077d0 <checkDemoModCalisma+0x4e0>)
 80077a6:	f001 fdfe 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2180      	movs	r1, #128	; 0x80
 80077ae:	480b      	ldr	r0, [pc, #44]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80077b0:	f001 fdf9 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80077b4:	2200      	movs	r2, #0
 80077b6:	2140      	movs	r1, #64	; 0x40
 80077b8:	4808      	ldr	r0, [pc, #32]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80077ba:	f001 fdf4 	bl	80093a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80077be:	2200      	movs	r2, #0
 80077c0:	2120      	movs	r1, #32
 80077c2:	4806      	ldr	r0, [pc, #24]	; (80077dc <checkDemoModCalisma+0x4ec>)
 80077c4:	f001 fdef 	bl	80093a6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80077c8:	e7ff      	b.n	80077ca <checkDemoModCalisma+0x4da>
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40011000 	.word	0x40011000
 80077d4:	40010c00 	.word	0x40010c00
 80077d8:	20000451 	.word	0x20000451
 80077dc:	40010800 	.word	0x40010800
 80077e0:	200003a0 	.word	0x200003a0
 80077e4:	200003b0 	.word	0x200003b0
 80077e8:	20000450 	.word	0x20000450
 80077ec:	20000436 	.word	0x20000436
 80077f0:	200003f5 	.word	0x200003f5
 80077f4:	200003f6 	.word	0x200003f6
 80077f8:	200000a4 	.word	0x200000a4
 80077fc:	200000a5 	.word	0x200000a5
 8007800:	200003f7 	.word	0x200003f7
 8007804:	20000328 	.word	0x20000328
 8007808:	20000424 	.word	0x20000424
 800780c:	20000415 	.word	0x20000415
 8007810:	0800dc00 	.word	0x0800dc00
 8007814:	0800dc0c 	.word	0x0800dc0c
 8007818:	20000398 	.word	0x20000398
 800781c:	2000042c 	.word	0x2000042c
 8007820:	20000416 	.word	0x20000416

08007824 <mergeData>:

char* mergeData() {
 8007824:	b580      	push	{r7, lr}
 8007826:	b09e      	sub	sp, #120	; 0x78
 8007828:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800782a:	2300      	movs	r3, #0
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
 800782e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007832:	2229      	movs	r2, #41	; 0x29
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f004 fef1 	bl	800c61e <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800783c:	4b6a      	ldr	r3, [pc, #424]	; (80079e8 <mergeData+0x1c4>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	713b      	strb	r3, [r7, #4]
 8007842:	4b6a      	ldr	r3, [pc, #424]	; (80079ec <mergeData+0x1c8>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	717b      	strb	r3, [r7, #5]
 8007848:	4b69      	ldr	r3, [pc, #420]	; (80079f0 <mergeData+0x1cc>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	71bb      	strb	r3, [r7, #6]
 800784e:	4b69      	ldr	r3, [pc, #420]	; (80079f4 <mergeData+0x1d0>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
 8007854:	4b68      	ldr	r3, [pc, #416]	; (80079f8 <mergeData+0x1d4>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	723b      	strb	r3, [r7, #8]
 800785a:	4b68      	ldr	r3, [pc, #416]	; (80079fc <mergeData+0x1d8>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	727b      	strb	r3, [r7, #9]
 8007860:	4b67      	ldr	r3, [pc, #412]	; (8007a00 <mergeData+0x1dc>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	72bb      	strb	r3, [r7, #10]
 8007866:	4b67      	ldr	r3, [pc, #412]	; (8007a04 <mergeData+0x1e0>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	72fb      	strb	r3, [r7, #11]
 800786c:	4b66      	ldr	r3, [pc, #408]	; (8007a08 <mergeData+0x1e4>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	733b      	strb	r3, [r7, #12]
 8007872:	4b66      	ldr	r3, [pc, #408]	; (8007a0c <mergeData+0x1e8>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	737b      	strb	r3, [r7, #13]
 8007878:	4b65      	ldr	r3, [pc, #404]	; (8007a10 <mergeData+0x1ec>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	73bb      	strb	r3, [r7, #14]
 800787e:	4b65      	ldr	r3, [pc, #404]	; (8007a14 <mergeData+0x1f0>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	73fb      	strb	r3, [r7, #15]
 8007884:	4b64      	ldr	r3, [pc, #400]	; (8007a18 <mergeData+0x1f4>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	743b      	strb	r3, [r7, #16]
 800788a:	4b64      	ldr	r3, [pc, #400]	; (8007a1c <mergeData+0x1f8>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	747b      	strb	r3, [r7, #17]
 8007890:	4b63      	ldr	r3, [pc, #396]	; (8007a20 <mergeData+0x1fc>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	74bb      	strb	r3, [r7, #18]
 8007896:	4b63      	ldr	r3, [pc, #396]	; (8007a24 <mergeData+0x200>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	74fb      	strb	r3, [r7, #19]
 800789c:	4b62      	ldr	r3, [pc, #392]	; (8007a28 <mergeData+0x204>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	753b      	strb	r3, [r7, #20]
 80078a2:	4b62      	ldr	r3, [pc, #392]	; (8007a2c <mergeData+0x208>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	757b      	strb	r3, [r7, #21]
 80078a8:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <mergeData+0x20c>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	75bb      	strb	r3, [r7, #22]
 80078ae:	4b61      	ldr	r3, [pc, #388]	; (8007a34 <mergeData+0x210>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	75fb      	strb	r3, [r7, #23]
 80078b4:	4b60      	ldr	r3, [pc, #384]	; (8007a38 <mergeData+0x214>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	763b      	strb	r3, [r7, #24]
 80078ba:	4b60      	ldr	r3, [pc, #384]	; (8007a3c <mergeData+0x218>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	767b      	strb	r3, [r7, #25]
 80078c0:	4b5f      	ldr	r3, [pc, #380]	; (8007a40 <mergeData+0x21c>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	76bb      	strb	r3, [r7, #26]
 80078c6:	4b5f      	ldr	r3, [pc, #380]	; (8007a44 <mergeData+0x220>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	76fb      	strb	r3, [r7, #27]
 80078cc:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <mergeData+0x224>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	773b      	strb	r3, [r7, #28]
 80078d2:	4b5e      	ldr	r3, [pc, #376]	; (8007a4c <mergeData+0x228>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	777b      	strb	r3, [r7, #29]
 80078d8:	4b5d      	ldr	r3, [pc, #372]	; (8007a50 <mergeData+0x22c>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	77bb      	strb	r3, [r7, #30]
 80078de:	4b5d      	ldr	r3, [pc, #372]	; (8007a54 <mergeData+0x230>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	4b5c      	ldr	r3, [pc, #368]	; (8007a58 <mergeData+0x234>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f887 3020 	strb.w	r3, [r7, #32]
 80078ec:	4b5b      	ldr	r3, [pc, #364]	; (8007a5c <mergeData+0x238>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80078f4:	4b5a      	ldr	r3, [pc, #360]	; (8007a60 <mergeData+0x23c>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078fc:	4b59      	ldr	r3, [pc, #356]	; (8007a64 <mergeData+0x240>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007904:	4b58      	ldr	r3, [pc, #352]	; (8007a68 <mergeData+0x244>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 800790c:	4b57      	ldr	r3, [pc, #348]	; (8007a6c <mergeData+0x248>)
 800790e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8007912:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8007916:	4b55      	ldr	r3, [pc, #340]	; (8007a6c <mergeData+0x248>)
 8007918:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800791c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007920:	4b52      	ldr	r3, [pc, #328]	; (8007a6c <mergeData+0x248>)
 8007922:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800792a:	4b50      	ldr	r3, [pc, #320]	; (8007a6c <mergeData+0x248>)
 800792c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007930:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8007934:	4b4d      	ldr	r3, [pc, #308]	; (8007a6c <mergeData+0x248>)
 8007936:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800793a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 800793e:	4b4b      	ldr	r3, [pc, #300]	; (8007a6c <mergeData+0x248>)
 8007940:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8007948:	4b48      	ldr	r3, [pc, #288]	; (8007a6c <mergeData+0x248>)
 800794a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8007952:	4b46      	ldr	r3, [pc, #280]	; (8007a6c <mergeData+0x248>)
 8007954:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007958:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 800795c:	4b43      	ldr	r3, [pc, #268]	; (8007a6c <mergeData+0x248>)
 800795e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007962:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8007966:	4b41      	ldr	r3, [pc, #260]	; (8007a6c <mergeData+0x248>)
 8007968:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800796c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8007970:	4b3e      	ldr	r3, [pc, #248]	; (8007a6c <mergeData+0x248>)
 8007972:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800797a:	4b3d      	ldr	r3, [pc, #244]	; (8007a70 <mergeData+0x24c>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007982:	2300      	movs	r3, #0
 8007984:	677b      	str	r3, [r7, #116]	; 0x74
 8007986:	e015      	b.n	80079b4 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8007988:	1d3a      	adds	r2, r7, #4
 800798a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800798c:	4413      	add	r3, r2
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007996:	4937      	ldr	r1, [pc, #220]	; (8007a74 <mergeData+0x250>)
 8007998:	4618      	mov	r0, r3
 800799a:	f004 fdcf 	bl	800c53c <siprintf>
	    strcat(combinedString, temp);
 800799e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80079a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f004 fe29 	bl	800c600 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80079ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b0:	3301      	adds	r3, #1
 80079b2:	677b      	str	r3, [r7, #116]	; 0x74
 80079b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b6:	2b2c      	cmp	r3, #44	; 0x2c
 80079b8:	d9e6      	bls.n	8007988 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80079ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f8 fc30 	bl	8000224 <strlen>
 80079c4:	4603      	mov	r3, r0
 80079c6:	3301      	adds	r3, #1
 80079c8:	4618      	mov	r0, r3
 80079ca:	f004 fd03 	bl	800c3d4 <malloc>
 80079ce:	4603      	mov	r3, r0
 80079d0:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80079d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079d6:	4619      	mov	r1, r3
 80079d8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80079da:	f004 fe65 	bl	800c6a8 <strcpy>
	return result;
 80079de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3778      	adds	r7, #120	; 0x78
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000407 	.word	0x20000407
 80079ec:	200003f9 	.word	0x200003f9
 80079f0:	200003fc 	.word	0x200003fc
 80079f4:	200003fd 	.word	0x200003fd
 80079f8:	200003fe 	.word	0x200003fe
 80079fc:	20000405 	.word	0x20000405
 8007a00:	200003ff 	.word	0x200003ff
 8007a04:	20000400 	.word	0x20000400
 8007a08:	20000404 	.word	0x20000404
 8007a0c:	20000401 	.word	0x20000401
 8007a10:	20000411 	.word	0x20000411
 8007a14:	20000402 	.word	0x20000402
 8007a18:	20000412 	.word	0x20000412
 8007a1c:	20000403 	.word	0x20000403
 8007a20:	20000413 	.word	0x20000413
 8007a24:	20000406 	.word	0x20000406
 8007a28:	20000408 	.word	0x20000408
 8007a2c:	20000409 	.word	0x20000409
 8007a30:	2000040a 	.word	0x2000040a
 8007a34:	2000040b 	.word	0x2000040b
 8007a38:	2000040c 	.word	0x2000040c
 8007a3c:	2000040d 	.word	0x2000040d
 8007a40:	2000040e 	.word	0x2000040e
 8007a44:	2000040f 	.word	0x2000040f
 8007a48:	20000410 	.word	0x20000410
 8007a4c:	20000414 	.word	0x20000414
 8007a50:	20000416 	.word	0x20000416
 8007a54:	200003f5 	.word	0x200003f5
 8007a58:	200003f6 	.word	0x200003f6
 8007a5c:	200000a4 	.word	0x200000a4
 8007a60:	200000a5 	.word	0x200000a5
 8007a64:	200003f7 	.word	0x200003f7
 8007a68:	20000419 	.word	0x20000419
 8007a6c:	20000328 	.word	0x20000328
 8007a70:	20000030 	.word	0x20000030
 8007a74:	0800dc20 	.word	0x0800dc20

08007a78 <mainLoop>:

void mainLoop() {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007a7e:	f7fd ffef 	bl	8005a60 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007a82:	2101      	movs	r1, #1
 8007a84:	48ad      	ldr	r0, [pc, #692]	; (8007d3c <mainLoop+0x2c4>)
 8007a86:	f001 fc77 	bl	8009378 <HAL_GPIO_ReadPin>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d136      	bne.n	8007afe <mainLoop+0x86>
 8007a90:	2108      	movs	r1, #8
 8007a92:	48ab      	ldr	r0, [pc, #684]	; (8007d40 <mainLoop+0x2c8>)
 8007a94:	f001 fc70 	bl	8009378 <HAL_GPIO_ReadPin>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d12f      	bne.n	8007afe <mainLoop+0x86>
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	48a6      	ldr	r0, [pc, #664]	; (8007d3c <mainLoop+0x2c4>)
 8007aa2:	f001 fc69 	bl	8009378 <HAL_GPIO_ReadPin>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d128      	bne.n	8007afe <mainLoop+0x86>
 8007aac:	2104      	movs	r1, #4
 8007aae:	48a3      	ldr	r0, [pc, #652]	; (8007d3c <mainLoop+0x2c4>)
 8007ab0:	f001 fc62 	bl	8009378 <HAL_GPIO_ReadPin>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d121      	bne.n	8007afe <mainLoop+0x86>
 8007aba:	2108      	movs	r1, #8
 8007abc:	489f      	ldr	r0, [pc, #636]	; (8007d3c <mainLoop+0x2c4>)
 8007abe:	f001 fc5b 	bl	8009378 <HAL_GPIO_ReadPin>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11a      	bne.n	8007afe <mainLoop+0x86>
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	489d      	ldr	r0, [pc, #628]	; (8007d40 <mainLoop+0x2c8>)
 8007acc:	f001 fc54 	bl	8009378 <HAL_GPIO_ReadPin>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d113      	bne.n	8007afe <mainLoop+0x86>
 8007ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ada:	4899      	ldr	r0, [pc, #612]	; (8007d40 <mainLoop+0x2c8>)
 8007adc:	f001 fc4c 	bl	8009378 <HAL_GPIO_ReadPin>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10b      	bne.n	8007afe <mainLoop+0x86>
 8007ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007aea:	4895      	ldr	r0, [pc, #596]	; (8007d40 <mainLoop+0x2c8>)
 8007aec:	f001 fc44 	bl	8009378 <HAL_GPIO_ReadPin>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d103      	bne.n	8007afe <mainLoop+0x86>
			butonKontrol=0;
 8007af6:	4b93      	ldr	r3, [pc, #588]	; (8007d44 <mainLoop+0x2cc>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	e003      	b.n	8007b06 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007afe:	4b92      	ldr	r3, [pc, #584]	; (8007d48 <mainLoop+0x2d0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a92      	ldr	r2, [pc, #584]	; (8007d4c <mainLoop+0x2d4>)
 8007b04:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007b06:	4b92      	ldr	r3, [pc, #584]	; (8007d50 <mainLoop+0x2d8>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d03a      	beq.n	8007b84 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b0e:	bf00      	nop
 8007b10:	4890      	ldr	r0, [pc, #576]	; (8007d54 <mainLoop+0x2dc>)
 8007b12:	f002 fa5a 	bl	8009fca <HAL_I2C_GetError>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d0f9      	beq.n	8007b10 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b1c:	bf00      	nop
 8007b1e:	488d      	ldr	r0, [pc, #564]	; (8007d54 <mainLoop+0x2dc>)
 8007b20:	f002 fa46 	bl	8009fb0 <HAL_I2C_GetState>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d1f9      	bne.n	8007b1e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007b2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	236e      	movs	r3, #110	; 0x6e
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	4b88      	ldr	r3, [pc, #544]	; (8007d58 <mainLoop+0x2e0>)
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	236e      	movs	r3, #110	; 0x6e
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	21a0      	movs	r1, #160	; 0xa0
 8007b3e:	4885      	ldr	r0, [pc, #532]	; (8007d54 <mainLoop+0x2dc>)
 8007b40:	f001 fed4 	bl	80098ec <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b48:	f000 fe46 	bl	80087d8 <HAL_Delay>

		  hafizaYaz=0;
 8007b4c:	4b80      	ldr	r3, [pc, #512]	; (8007d50 <mainLoop+0x2d8>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8007b52:	4b82      	ldr	r3, [pc, #520]	; (8007d5c <mainLoop+0x2e4>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8007b5a:	4a81      	ldr	r2, [pc, #516]	; (8007d60 <mainLoop+0x2e8>)
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	2002      	movs	r0, #2
 8007b60:	f7f8 fe2a 	bl	80007b8 <lcd_print>
 8007b64:	e008      	b.n	8007b78 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8007b66:	4b7d      	ldr	r3, [pc, #500]	; (8007d5c <mainLoop+0x2e4>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d104      	bne.n	8007b78 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8007b6e:	4a7d      	ldr	r2, [pc, #500]	; (8007d64 <mainLoop+0x2ec>)
 8007b70:	2101      	movs	r1, #1
 8007b72:	2002      	movs	r0, #2
 8007b74:	f7f8 fe20 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8007b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b7c:	f000 fe2c 	bl	80087d8 <HAL_Delay>
		  lcd_clear();
 8007b80:	f7f8 fe46 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007b84:	4b78      	ldr	r3, [pc, #480]	; (8007d68 <mainLoop+0x2f0>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f083 0301 	eor.w	r3, r3, #1
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d06e      	beq.n	8007c70 <mainLoop+0x1f8>
 8007b92:	4870      	ldr	r0, [pc, #448]	; (8007d54 <mainLoop+0x2dc>)
 8007b94:	f002 fa0c 	bl	8009fb0 <HAL_I2C_GetState>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d168      	bne.n	8007c70 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8007b9e:	4b73      	ldr	r3, [pc, #460]	; (8007d6c <mainLoop+0x2f4>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	f083 0301 	eor.w	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d044      	beq.n	8007c36 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007bac:	4a70      	ldr	r2, [pc, #448]	; (8007d70 <mainLoop+0x2f8>)
 8007bae:	2101      	movs	r1, #1
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f7f8 fe01 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8007bb6:	4b69      	ldr	r3, [pc, #420]	; (8007d5c <mainLoop+0x2e4>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8007bbe:	4a6d      	ldr	r2, [pc, #436]	; (8007d74 <mainLoop+0x2fc>)
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	2002      	movs	r0, #2
 8007bc4:	f7f8 fdf8 	bl	80007b8 <lcd_print>
 8007bc8:	e008      	b.n	8007bdc <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8007bca:	4b64      	ldr	r3, [pc, #400]	; (8007d5c <mainLoop+0x2e4>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d104      	bne.n	8007bdc <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8007bd2:	4a69      	ldr	r2, [pc, #420]	; (8007d78 <mainLoop+0x300>)
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	2002      	movs	r0, #2
 8007bd8:	f7f8 fdee 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007be0:	f000 fdfa 	bl	80087d8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007be4:	bf00      	nop
 8007be6:	485b      	ldr	r0, [pc, #364]	; (8007d54 <mainLoop+0x2dc>)
 8007be8:	f002 f9ef 	bl	8009fca <HAL_I2C_GetError>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d0f9      	beq.n	8007be6 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007bf2:	e003      	b.n	8007bfc <mainLoop+0x184>
				  HAL_Delay(1000);
 8007bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bf8:	f000 fdee 	bl	80087d8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007bfc:	4855      	ldr	r0, [pc, #340]	; (8007d54 <mainLoop+0x2dc>)
 8007bfe:	f002 f9d7 	bl	8009fb0 <HAL_I2C_GetState>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d1f5      	bne.n	8007bf4 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8007c08:	4b54      	ldr	r3, [pc, #336]	; (8007d5c <mainLoop+0x2e4>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8007c10:	4a5a      	ldr	r2, [pc, #360]	; (8007d7c <mainLoop+0x304>)
 8007c12:	2101      	movs	r1, #1
 8007c14:	2002      	movs	r0, #2
 8007c16:	f7f8 fdcf 	bl	80007b8 <lcd_print>
 8007c1a:	e008      	b.n	8007c2e <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8007c1c:	4b4f      	ldr	r3, [pc, #316]	; (8007d5c <mainLoop+0x2e4>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d104      	bne.n	8007c2e <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8007c24:	4a56      	ldr	r2, [pc, #344]	; (8007d80 <mainLoop+0x308>)
 8007c26:	2101      	movs	r1, #1
 8007c28:	2002      	movs	r0, #2
 8007c2a:	f7f8 fdc5 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	; (8007d6c <mainLoop+0x2f4>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	e014      	b.n	8007c60 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8007c36:	4b49      	ldr	r3, [pc, #292]	; (8007d5c <mainLoop+0x2e4>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007c3e:	4a51      	ldr	r2, [pc, #324]	; (8007d84 <mainLoop+0x30c>)
 8007c40:	2101      	movs	r1, #1
 8007c42:	2002      	movs	r0, #2
 8007c44:	f7f8 fdb8 	bl	80007b8 <lcd_print>
 8007c48:	e008      	b.n	8007c5c <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8007c4a:	4b44      	ldr	r3, [pc, #272]	; (8007d5c <mainLoop+0x2e4>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d104      	bne.n	8007c5c <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8007c52:	4a4d      	ldr	r2, [pc, #308]	; (8007d88 <mainLoop+0x310>)
 8007c54:	2101      	movs	r1, #1
 8007c56:	2002      	movs	r0, #2
 8007c58:	f7f8 fdae 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 8007c5c:	f7f8 fdd8 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8007c60:	f7f8 fdd6 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8007c64:	2001      	movs	r0, #1
 8007c66:	f7fd fab1 	bl	80051cc <eepromKontrol>
		  hafizaOku=1;
 8007c6a:	4b3f      	ldr	r3, [pc, #252]	; (8007d68 <mainLoop+0x2f0>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007c70:	4b46      	ldr	r3, [pc, #280]	; (8007d8c <mainLoop+0x314>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d11c      	bne.n	8007cb2 <mainLoop+0x23a>
 8007c78:	4b45      	ldr	r3, [pc, #276]	; (8007d90 <mainLoop+0x318>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	f083 0301 	eor.w	r3, r3, #1
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d015      	beq.n	8007cb2 <mainLoop+0x23a>
 8007c86:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <mainLoop+0x31c>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d111      	bne.n	8007cb2 <mainLoop+0x23a>
			lcd_clear();
 8007c8e:	f7f8 fdbf 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8007c92:	200a      	movs	r0, #10
 8007c94:	f000 fda0 	bl	80087d8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8007c98:	4a3f      	ldr	r2, [pc, #252]	; (8007d98 <mainLoop+0x320>)
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f7f8 fd8b 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007ca2:	4a3e      	ldr	r2, [pc, #248]	; (8007d9c <mainLoop+0x324>)
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	2002      	movs	r0, #2
 8007ca8:	f7f8 fd86 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007cac:	4b38      	ldr	r3, [pc, #224]	; (8007d90 <mainLoop+0x318>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007cb2:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <mainLoop+0x314>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d112      	bne.n	8007ce0 <mainLoop+0x268>
 8007cba:	2102      	movs	r1, #2
 8007cbc:	481f      	ldr	r0, [pc, #124]	; (8007d3c <mainLoop+0x2c4>)
 8007cbe:	f001 fb5b 	bl	8009378 <HAL_GPIO_ReadPin>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d10b      	bne.n	8007ce0 <mainLoop+0x268>
 8007cc8:	2104      	movs	r1, #4
 8007cca:	481c      	ldr	r0, [pc, #112]	; (8007d3c <mainLoop+0x2c4>)
 8007ccc:	f001 fb54 	bl	8009378 <HAL_GPIO_ReadPin>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d104      	bne.n	8007ce0 <mainLoop+0x268>
			menuGiris=1;
 8007cd6:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <mainLoop+0x314>)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007cdc:	f7f8 fd98 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8007ce0:	4b2a      	ldr	r3, [pc, #168]	; (8007d8c <mainLoop+0x314>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d102      	bne.n	8007cee <mainLoop+0x276>
			menu(&hi2c1);
 8007ce8:	481a      	ldr	r0, [pc, #104]	; (8007d54 <mainLoop+0x2dc>)
 8007cea:	f7f9 fdb3 	bl	8001854 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cf2:	4813      	ldr	r0, [pc, #76]	; (8007d40 <mainLoop+0x2c8>)
 8007cf4:	f001 fb6f 	bl	80093d6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007cf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cfc:	4828      	ldr	r0, [pc, #160]	; (8007da0 <mainLoop+0x328>)
 8007cfe:	f001 fb3b 	bl	8009378 <HAL_GPIO_ReadPin>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <mainLoop+0x2a6>
 8007d08:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <mainLoop+0x32c>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f083 0301 	eor.w	r3, r3, #1
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <mainLoop+0x2a6>
			stopVar=1;
 8007d16:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <mainLoop+0x330>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8007d1e:	4b22      	ldr	r3, [pc, #136]	; (8007da8 <mainLoop+0x330>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007d24:	f7fd febc 	bl	8005aa0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007d28:	f7fd feee 	bl	8005b08 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007d2c:	f7fd ff32 	bl	8005b94 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007d30:	f7fd ff82 	bl	8005c38 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007d34:	f7ff fadc 	bl	80072f0 <checkDemoModCalisma>
		checkLCDBacklight();
 8007d38:	e6a1      	b.n	8007a7e <mainLoop+0x6>
 8007d3a:	bf00      	nop
 8007d3c:	40010800 	.word	0x40010800
 8007d40:	40011000 	.word	0x40011000
 8007d44:	20000427 	.word	0x20000427
 8007d48:	200003a0 	.word	0x200003a0
 8007d4c:	200003bc 	.word	0x200003bc
 8007d50:	20000424 	.word	0x20000424
 8007d54:	20000244 	.word	0x20000244
 8007d58:	20000328 	.word	0x20000328
 8007d5c:	20000419 	.word	0x20000419
 8007d60:	0800dc24 	.word	0x0800dc24
 8007d64:	0800dc38 	.word	0x0800dc38
 8007d68:	20000425 	.word	0x20000425
 8007d6c:	20000426 	.word	0x20000426
 8007d70:	0800dc4c 	.word	0x0800dc4c
 8007d74:	0800dc60 	.word	0x0800dc60
 8007d78:	0800dc74 	.word	0x0800dc74
 8007d7c:	0800dc88 	.word	0x0800dc88
 8007d80:	0800dc9c 	.word	0x0800dc9c
 8007d84:	0800dcb0 	.word	0x0800dcb0
 8007d88:	0800dcc4 	.word	0x0800dcc4
 8007d8c:	20000415 	.word	0x20000415
 8007d90:	2000042c 	.word	0x2000042c
 8007d94:	20000416 	.word	0x20000416
 8007d98:	0800db88 	.word	0x0800db88
 8007d9c:	0800db9c 	.word	0x0800db9c
 8007da0:	40010c00 	.word	0x40010c00
 8007da4:	2000044d 	.word	0x2000044d
 8007da8:	2000044a 	.word	0x2000044a

08007dac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007db4:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a03      	ldr	r2, [pc, #12]	; (8007dc8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007dbc:	6013      	str	r3, [r2, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr
 8007dc8:	200003a0 	.word	0x200003a0

08007dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dd0:	f000 fca0 	bl	8008714 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dd8:	f000 fcfe 	bl	80087d8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ddc:	f000 f8d0 	bl	8007f80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007de0:	f000 f9f2 	bl	80081c8 <MX_GPIO_Init>
  MX_CAN_Init();
 8007de4:	f000 f912 	bl	800800c <MX_CAN_Init>
  MX_I2C1_Init();
 8007de8:	f000 f944 	bl	8008074 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007dec:	f000 f970 	bl	80080d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007df0:	f000 f9c0 	bl	8008174 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007df4:	2201      	movs	r2, #1
 8007df6:	2140      	movs	r1, #64	; 0x40
 8007df8:	4853      	ldr	r0, [pc, #332]	; (8007f48 <main+0x17c>)
 8007dfa:	f001 fad4 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dfe:	2201      	movs	r2, #1
 8007e00:	2180      	movs	r1, #128	; 0x80
 8007e02:	4851      	ldr	r0, [pc, #324]	; (8007f48 <main+0x17c>)
 8007e04:	f001 facf 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e08:	200a      	movs	r0, #10
 8007e0a:	f000 fce5 	bl	80087d8 <HAL_Delay>
  lcd_init();
 8007e0e:	f7f8 fca1 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8007e12:	200a      	movs	r0, #10
 8007e14:	f000 fce0 	bl	80087d8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e18:	484c      	ldr	r0, [pc, #304]	; (8007f4c <main+0x180>)
 8007e1a:	f003 f977 	bl	800b10c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e1e:	bf00      	nop
 8007e20:	484b      	ldr	r0, [pc, #300]	; (8007f50 <main+0x184>)
 8007e22:	f002 f8d2 	bl	8009fca <HAL_I2C_GetError>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d0f9      	beq.n	8007e20 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e2c:	bf00      	nop
 8007e2e:	4848      	ldr	r0, [pc, #288]	; (8007f50 <main+0x184>)
 8007e30:	f002 f8be 	bl	8009fb0 <HAL_I2C_GetState>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d1f9      	bne.n	8007e2e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e40:	4841      	ldr	r0, [pc, #260]	; (8007f48 <main+0x17c>)
 8007e42:	f001 fab0 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e46:	2200      	movs	r2, #0
 8007e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e4c:	483e      	ldr	r0, [pc, #248]	; (8007f48 <main+0x17c>)
 8007e4e:	f001 faaa 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e52:	2200      	movs	r2, #0
 8007e54:	2104      	movs	r1, #4
 8007e56:	483c      	ldr	r0, [pc, #240]	; (8007f48 <main+0x17c>)
 8007e58:	f001 faa5 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2102      	movs	r1, #2
 8007e60:	4839      	ldr	r0, [pc, #228]	; (8007f48 <main+0x17c>)
 8007e62:	f001 faa0 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4837      	ldr	r0, [pc, #220]	; (8007f48 <main+0x17c>)
 8007e6c:	f001 fa9b 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e70:	2200      	movs	r2, #0
 8007e72:	2120      	movs	r1, #32
 8007e74:	4837      	ldr	r0, [pc, #220]	; (8007f54 <main+0x188>)
 8007e76:	f001 fa96 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2110      	movs	r1, #16
 8007e7e:	4835      	ldr	r0, [pc, #212]	; (8007f54 <main+0x188>)
 8007e80:	f001 fa91 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e84:	2200      	movs	r2, #0
 8007e86:	2180      	movs	r1, #128	; 0x80
 8007e88:	4833      	ldr	r0, [pc, #204]	; (8007f58 <main+0x18c>)
 8007e8a:	f001 fa8c 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2140      	movs	r1, #64	; 0x40
 8007e92:	4831      	ldr	r0, [pc, #196]	; (8007f58 <main+0x18c>)
 8007e94:	f001 fa87 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2120      	movs	r1, #32
 8007e9c:	482e      	ldr	r0, [pc, #184]	; (8007f58 <main+0x18c>)
 8007e9e:	f001 fa82 	bl	80093a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2110      	movs	r1, #16
 8007ea6:	482c      	ldr	r0, [pc, #176]	; (8007f58 <main+0x18c>)
 8007ea8:	f001 fa7d 	bl	80093a6 <HAL_GPIO_WritePin>

  i2cTest();
 8007eac:	f7fd fd2a 	bl	8005904 <i2cTest>
  HAL_Delay(100);
 8007eb0:	2064      	movs	r0, #100	; 0x64
 8007eb2:	f000 fc91 	bl	80087d8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007eb6:	4a29      	ldr	r2, [pc, #164]	; (8007f5c <main+0x190>)
 8007eb8:	2101      	movs	r1, #1
 8007eba:	2001      	movs	r0, #1
 8007ebc:	f7f8 fc7c 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <main+0x194>)
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	2002      	movs	r0, #2
 8007ec6:	f7f8 fc77 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8007eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ece:	f000 fc83 	bl	80087d8 <HAL_Delay>
  lcd_clear();
 8007ed2:	f7f8 fc9d 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f7fd f978 	bl	80051cc <eepromKontrol>
  HAL_Delay(200);
 8007edc:	20c8      	movs	r0, #200	; 0xc8
 8007ede:	f000 fc7b 	bl	80087d8 <HAL_Delay>

  lcd_clear();
 8007ee2:	f7f8 fc95 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8007ee6:	20c8      	movs	r0, #200	; 0xc8
 8007ee8:	f000 fc76 	bl	80087d8 <HAL_Delay>

  backLightTimer = millis;
 8007eec:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <main+0x198>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	; (8007f68 <main+0x19c>)
 8007ef2:	6013      	str	r3, [r2, #0]

  if(iotMode != 0) {
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <main+0x1a0>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01c      	beq.n	8007f36 <main+0x16a>
	  if(machineID[11] == '\0') {
 8007efc:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <main+0x1a4>)
 8007efe:	7adb      	ldrb	r3, [r3, #11]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <main+0x13e>
	  	  takeMachineID(0);
 8007f04:	2000      	movs	r0, #0
 8007f06:	f7f8 fe8b 	bl	8000c20 <takeMachineID>
	  }

	  if(wifiSSID[0] == '\0') {
 8007f0a:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <main+0x1a8>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <main+0x154>
		  takeWifiSSID(0);
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7f8 ffda 	bl	8000ecc <takeWifiSSID>
		  HAL_Delay(500);
 8007f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f1c:	f000 fc5c 	bl	80087d8 <HAL_Delay>
	  }

	  if(wifiPass[0] == '\0') {
 8007f20:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <main+0x1ac>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <main+0x16a>
		  takeWifiPass(0);
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f7f9 f99f 	bl	800126c <takeWifiPass>
		  HAL_Delay(500);
 8007f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f32:	f000 fc51 	bl	80087d8 <HAL_Delay>
	  }
  }

  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007f36:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <main+0x1ac>)
 8007f38:	490e      	ldr	r1, [pc, #56]	; (8007f74 <main+0x1a8>)
 8007f3a:	4810      	ldr	r0, [pc, #64]	; (8007f7c <main+0x1b0>)
 8007f3c:	f7f8 f97a 	bl	8000234 <ESP8266_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f40:	f7ff fd9a 	bl	8007a78 <mainLoop>
 8007f44:	e7fc      	b.n	8007f40 <main+0x174>
 8007f46:	bf00      	nop
 8007f48:	40010c00 	.word	0x40010c00
 8007f4c:	20000298 	.word	0x20000298
 8007f50:	20000244 	.word	0x20000244
 8007f54:	40011000 	.word	0x40011000
 8007f58:	40010800 	.word	0x40010800
 8007f5c:	0800dcd8 	.word	0x0800dcd8
 8007f60:	0800dcec 	.word	0x0800dcec
 8007f64:	200003a0 	.word	0x200003a0
 8007f68:	200003bc 	.word	0x200003bc
 8007f6c:	20000417 	.word	0x20000417
 8007f70:	200003c0 	.word	0x200003c0
 8007f74:	200003cc 	.word	0x200003cc
 8007f78:	200003e0 	.word	0x200003e0
 8007f7c:	200002e0 	.word	0x200002e0

08007f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b090      	sub	sp, #64	; 0x40
 8007f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f86:	f107 0318 	add.w	r3, r7, #24
 8007f8a:	2228      	movs	r2, #40	; 0x28
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f004 fb45 	bl	800c61e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	609a      	str	r2, [r3, #8]
 8007f9e:	60da      	str	r2, [r3, #12]
 8007fa0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007faa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fac:	2300      	movs	r3, #0
 8007fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fbe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fc4:	f107 0318 	add.w	r3, r7, #24
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f002 fc3f 	bl	800a84c <HAL_RCC_OscConfig>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007fd4:	f000 f9a2 	bl	800831c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fd8:	230f      	movs	r3, #15
 8007fda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fea:	2300      	movs	r3, #0
 8007fec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fee:	1d3b      	adds	r3, r7, #4
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f002 feac 	bl	800ad50 <HAL_RCC_ClockConfig>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007ffe:	f000 f98d 	bl	800831c <Error_Handler>
  }
}
 8008002:	bf00      	nop
 8008004:	3740      	adds	r7, #64	; 0x40
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008010:	4b16      	ldr	r3, [pc, #88]	; (800806c <MX_CAN_Init+0x60>)
 8008012:	4a17      	ldr	r2, [pc, #92]	; (8008070 <MX_CAN_Init+0x64>)
 8008014:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <MX_CAN_Init+0x60>)
 8008018:	2210      	movs	r2, #16
 800801a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800801c:	4b13      	ldr	r3, [pc, #76]	; (800806c <MX_CAN_Init+0x60>)
 800801e:	2200      	movs	r2, #0
 8008020:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <MX_CAN_Init+0x60>)
 8008024:	2200      	movs	r2, #0
 8008026:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <MX_CAN_Init+0x60>)
 800802a:	2200      	movs	r2, #0
 800802c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <MX_CAN_Init+0x60>)
 8008030:	2200      	movs	r2, #0
 8008032:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <MX_CAN_Init+0x60>)
 8008036:	2200      	movs	r2, #0
 8008038:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <MX_CAN_Init+0x60>)
 800803c:	2200      	movs	r2, #0
 800803e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <MX_CAN_Init+0x60>)
 8008042:	2200      	movs	r2, #0
 8008044:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <MX_CAN_Init+0x60>)
 8008048:	2200      	movs	r2, #0
 800804a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <MX_CAN_Init+0x60>)
 800804e:	2200      	movs	r2, #0
 8008050:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <MX_CAN_Init+0x60>)
 8008054:	2200      	movs	r2, #0
 8008056:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008058:	4804      	ldr	r0, [pc, #16]	; (800806c <MX_CAN_Init+0x60>)
 800805a:	f000 fbe1 	bl	8008820 <HAL_CAN_Init>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008064:	f000 f95a 	bl	800831c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008068:	bf00      	nop
 800806a:	bd80      	pop	{r7, pc}
 800806c:	2000021c 	.word	0x2000021c
 8008070:	40006400 	.word	0x40006400

08008074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008078:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <MX_I2C1_Init+0x50>)
 800807a:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <MX_I2C1_Init+0x54>)
 800807c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800807e:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <MX_I2C1_Init+0x50>)
 8008080:	4a12      	ldr	r2, [pc, #72]	; (80080cc <MX_I2C1_Init+0x58>)
 8008082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008084:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <MX_I2C1_Init+0x50>)
 8008086:	2200      	movs	r2, #0
 8008088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800808a:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <MX_I2C1_Init+0x50>)
 800808c:	2200      	movs	r2, #0
 800808e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008090:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <MX_I2C1_Init+0x50>)
 8008092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <MX_I2C1_Init+0x50>)
 800809a:	2200      	movs	r2, #0
 800809c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <MX_I2C1_Init+0x50>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <MX_I2C1_Init+0x50>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080aa:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <MX_I2C1_Init+0x50>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080b0:	4804      	ldr	r0, [pc, #16]	; (80080c4 <MX_I2C1_Init+0x50>)
 80080b2:	f001 f9a9 	bl	8009408 <HAL_I2C_Init>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080bc:	f000 f92e 	bl	800831c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080c0:	bf00      	nop
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000244 	.word	0x20000244
 80080c8:	40005400 	.word	0x40005400
 80080cc:	00061a80 	.word	0x00061a80

080080d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080d6:	f107 0308 	add.w	r3, r7, #8
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	609a      	str	r2, [r3, #8]
 80080e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080e4:	463b      	mov	r3, r7
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80080ec:	4b1f      	ldr	r3, [pc, #124]	; (800816c <MX_TIM1_Init+0x9c>)
 80080ee:	4a20      	ldr	r2, [pc, #128]	; (8008170 <MX_TIM1_Init+0xa0>)
 80080f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80080f2:	4b1e      	ldr	r3, [pc, #120]	; (800816c <MX_TIM1_Init+0x9c>)
 80080f4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80080f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <MX_TIM1_Init+0x9c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008100:	4b1a      	ldr	r3, [pc, #104]	; (800816c <MX_TIM1_Init+0x9c>)
 8008102:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008106:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008108:	4b18      	ldr	r3, [pc, #96]	; (800816c <MX_TIM1_Init+0x9c>)
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <MX_TIM1_Init+0x9c>)
 8008110:	2200      	movs	r2, #0
 8008112:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008114:	4b15      	ldr	r3, [pc, #84]	; (800816c <MX_TIM1_Init+0x9c>)
 8008116:	2200      	movs	r2, #0
 8008118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800811a:	4814      	ldr	r0, [pc, #80]	; (800816c <MX_TIM1_Init+0x9c>)
 800811c:	f002 ffa6 	bl	800b06c <HAL_TIM_Base_Init>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008126:	f000 f8f9 	bl	800831c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800812a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800812e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	4619      	mov	r1, r3
 8008136:	480d      	ldr	r0, [pc, #52]	; (800816c <MX_TIM1_Init+0x9c>)
 8008138:	f003 f950 	bl	800b3dc <HAL_TIM_ConfigClockSource>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008142:	f000 f8eb 	bl	800831c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008146:	2300      	movs	r3, #0
 8008148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800814a:	2300      	movs	r3, #0
 800814c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800814e:	463b      	mov	r3, r7
 8008150:	4619      	mov	r1, r3
 8008152:	4806      	ldr	r0, [pc, #24]	; (800816c <MX_TIM1_Init+0x9c>)
 8008154:	f003 fb3e 	bl	800b7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800815e:	f000 f8dd 	bl	800831c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008162:	bf00      	nop
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000298 	.word	0x20000298
 8008170:	40012c00 	.word	0x40012c00

08008174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008178:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 800817a:	4a12      	ldr	r2, [pc, #72]	; (80081c4 <MX_USART1_UART_Init+0x50>)
 800817c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800817e:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 8008180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008186:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 8008188:	2200      	movs	r2, #0
 800818a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 800818e:	2200      	movs	r2, #0
 8008190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008192:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 8008194:	2200      	movs	r2, #0
 8008196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008198:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 800819a:	220c      	movs	r2, #12
 800819c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800819e:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081a4:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081aa:	4805      	ldr	r0, [pc, #20]	; (80081c0 <MX_USART1_UART_Init+0x4c>)
 80081ac:	f003 fb90 	bl	800b8d0 <HAL_UART_Init>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081b6:	f000 f8b1 	bl	800831c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081ba:	bf00      	nop
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200002e0 	.word	0x200002e0
 80081c4:	40013800 	.word	0x40013800

080081c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081ce:	f107 0310 	add.w	r3, r7, #16
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	609a      	str	r2, [r3, #8]
 80081da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081dc:	4b4b      	ldr	r3, [pc, #300]	; (800830c <MX_GPIO_Init+0x144>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4a4a      	ldr	r2, [pc, #296]	; (800830c <MX_GPIO_Init+0x144>)
 80081e2:	f043 0310 	orr.w	r3, r3, #16
 80081e6:	6193      	str	r3, [r2, #24]
 80081e8:	4b48      	ldr	r3, [pc, #288]	; (800830c <MX_GPIO_Init+0x144>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081f4:	4b45      	ldr	r3, [pc, #276]	; (800830c <MX_GPIO_Init+0x144>)
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4a44      	ldr	r2, [pc, #272]	; (800830c <MX_GPIO_Init+0x144>)
 80081fa:	f043 0320 	orr.w	r3, r3, #32
 80081fe:	6193      	str	r3, [r2, #24]
 8008200:	4b42      	ldr	r3, [pc, #264]	; (800830c <MX_GPIO_Init+0x144>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800820c:	4b3f      	ldr	r3, [pc, #252]	; (800830c <MX_GPIO_Init+0x144>)
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	4a3e      	ldr	r2, [pc, #248]	; (800830c <MX_GPIO_Init+0x144>)
 8008212:	f043 0304 	orr.w	r3, r3, #4
 8008216:	6193      	str	r3, [r2, #24]
 8008218:	4b3c      	ldr	r3, [pc, #240]	; (800830c <MX_GPIO_Init+0x144>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	607b      	str	r3, [r7, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008224:	4b39      	ldr	r3, [pc, #228]	; (800830c <MX_GPIO_Init+0x144>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	4a38      	ldr	r2, [pc, #224]	; (800830c <MX_GPIO_Init+0x144>)
 800822a:	f043 0308 	orr.w	r3, r3, #8
 800822e:	6193      	str	r3, [r2, #24]
 8008230:	4b36      	ldr	r3, [pc, #216]	; (800830c <MX_GPIO_Init+0x144>)
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800823c:	2200      	movs	r2, #0
 800823e:	21f0      	movs	r1, #240	; 0xf0
 8008240:	4833      	ldr	r0, [pc, #204]	; (8008310 <MX_GPIO_Init+0x148>)
 8008242:	f001 f8b0 	bl	80093a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008246:	2200      	movs	r2, #0
 8008248:	f241 0130 	movw	r1, #4144	; 0x1030
 800824c:	4831      	ldr	r0, [pc, #196]	; (8008314 <MX_GPIO_Init+0x14c>)
 800824e:	f001 f8aa 	bl	80093a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008252:	2200      	movs	r2, #0
 8008254:	f640 4107 	movw	r1, #3079	; 0xc07
 8008258:	482f      	ldr	r0, [pc, #188]	; (8008318 <MX_GPIO_Init+0x150>)
 800825a:	f001 f8a4 	bl	80093a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800825e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008262:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800826c:	f107 0310 	add.w	r3, r7, #16
 8008270:	4619      	mov	r1, r3
 8008272:	4828      	ldr	r0, [pc, #160]	; (8008314 <MX_GPIO_Init+0x14c>)
 8008274:	f000 fe20 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008278:	f248 130f 	movw	r3, #33039	; 0x810f
 800827c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008286:	f107 0310 	add.w	r3, r7, #16
 800828a:	4619      	mov	r1, r3
 800828c:	4820      	ldr	r0, [pc, #128]	; (8008310 <MX_GPIO_Init+0x148>)
 800828e:	f000 fe13 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008292:	23f0      	movs	r3, #240	; 0xf0
 8008294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008296:	2301      	movs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829a:	2300      	movs	r3, #0
 800829c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829e:	2302      	movs	r3, #2
 80082a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a2:	f107 0310 	add.w	r3, r7, #16
 80082a6:	4619      	mov	r1, r3
 80082a8:	4819      	ldr	r0, [pc, #100]	; (8008310 <MX_GPIO_Init+0x148>)
 80082aa:	f000 fe05 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082ae:	f241 0330 	movw	r3, #4144	; 0x1030
 80082b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082bc:	2302      	movs	r3, #2
 80082be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082c0:	f107 0310 	add.w	r3, r7, #16
 80082c4:	4619      	mov	r1, r3
 80082c6:	4813      	ldr	r0, [pc, #76]	; (8008314 <MX_GPIO_Init+0x14c>)
 80082c8:	f000 fdf6 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082cc:	f640 4307 	movw	r3, #3079	; 0xc07
 80082d0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082d2:	2301      	movs	r3, #1
 80082d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082da:	2302      	movs	r3, #2
 80082dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082de:	f107 0310 	add.w	r3, r7, #16
 80082e2:	4619      	mov	r1, r3
 80082e4:	480c      	ldr	r0, [pc, #48]	; (8008318 <MX_GPIO_Init+0x150>)
 80082e6:	f000 fde7 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80082ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80082ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	4619      	mov	r1, r3
 80082fe:	4806      	ldr	r0, [pc, #24]	; (8008318 <MX_GPIO_Init+0x150>)
 8008300:	f000 fdda 	bl	8008eb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008304:	bf00      	nop
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40021000 	.word	0x40021000
 8008310:	40010800 	.word	0x40010800
 8008314:	40011000 	.word	0x40011000
 8008318:	40010c00 	.word	0x40010c00

0800831c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008320:	bf00      	nop
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800832e:	4b15      	ldr	r3, [pc, #84]	; (8008384 <HAL_MspInit+0x5c>)
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	4a14      	ldr	r2, [pc, #80]	; (8008384 <HAL_MspInit+0x5c>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6193      	str	r3, [r2, #24]
 800833a:	4b12      	ldr	r3, [pc, #72]	; (8008384 <HAL_MspInit+0x5c>)
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <HAL_MspInit+0x5c>)
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	4a0e      	ldr	r2, [pc, #56]	; (8008384 <HAL_MspInit+0x5c>)
 800834c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008350:	61d3      	str	r3, [r2, #28]
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <HAL_MspInit+0x5c>)
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835a:	607b      	str	r3, [r7, #4]
 800835c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800835e:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <HAL_MspInit+0x60>)
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	4a04      	ldr	r2, [pc, #16]	; (8008388 <HAL_MspInit+0x60>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr
 8008384:	40021000 	.word	0x40021000
 8008388:	40010000 	.word	0x40010000

0800838c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008394:	f107 0310 	add.w	r3, r7, #16
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <HAL_CAN_MspInit+0x8c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d131      	bne.n	8008410 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <HAL_CAN_MspInit+0x90>)
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	4a1a      	ldr	r2, [pc, #104]	; (800841c <HAL_CAN_MspInit+0x90>)
 80083b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083b6:	61d3      	str	r3, [r2, #28]
 80083b8:	4b18      	ldr	r3, [pc, #96]	; (800841c <HAL_CAN_MspInit+0x90>)
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c4:	4b15      	ldr	r3, [pc, #84]	; (800841c <HAL_CAN_MspInit+0x90>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	4a14      	ldr	r2, [pc, #80]	; (800841c <HAL_CAN_MspInit+0x90>)
 80083ca:	f043 0304 	orr.w	r3, r3, #4
 80083ce:	6193      	str	r3, [r2, #24]
 80083d0:	4b12      	ldr	r3, [pc, #72]	; (800841c <HAL_CAN_MspInit+0x90>)
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ea:	f107 0310 	add.w	r3, r7, #16
 80083ee:	4619      	mov	r1, r3
 80083f0:	480b      	ldr	r0, [pc, #44]	; (8008420 <HAL_CAN_MspInit+0x94>)
 80083f2:	f000 fd61 	bl	8008eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083fc:	2302      	movs	r3, #2
 80083fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008400:	2303      	movs	r3, #3
 8008402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008404:	f107 0310 	add.w	r3, r7, #16
 8008408:	4619      	mov	r1, r3
 800840a:	4805      	ldr	r0, [pc, #20]	; (8008420 <HAL_CAN_MspInit+0x94>)
 800840c:	f000 fd54 	bl	8008eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008410:	bf00      	nop
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40006400 	.word	0x40006400
 800841c:	40021000 	.word	0x40021000
 8008420:	40010800 	.word	0x40010800

08008424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a15      	ldr	r2, [pc, #84]	; (8008494 <HAL_I2C_MspInit+0x70>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d123      	bne.n	800848c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008444:	4b14      	ldr	r3, [pc, #80]	; (8008498 <HAL_I2C_MspInit+0x74>)
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	4a13      	ldr	r2, [pc, #76]	; (8008498 <HAL_I2C_MspInit+0x74>)
 800844a:	f043 0308 	orr.w	r3, r3, #8
 800844e:	6193      	str	r3, [r2, #24]
 8008450:	4b11      	ldr	r3, [pc, #68]	; (8008498 <HAL_I2C_MspInit+0x74>)
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f003 0308 	and.w	r3, r3, #8
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800845c:	23c0      	movs	r3, #192	; 0xc0
 800845e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008460:	2312      	movs	r3, #18
 8008462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008464:	2303      	movs	r3, #3
 8008466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008468:	f107 0310 	add.w	r3, r7, #16
 800846c:	4619      	mov	r1, r3
 800846e:	480b      	ldr	r0, [pc, #44]	; (800849c <HAL_I2C_MspInit+0x78>)
 8008470:	f000 fd22 	bl	8008eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008474:	4b08      	ldr	r3, [pc, #32]	; (8008498 <HAL_I2C_MspInit+0x74>)
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	4a07      	ldr	r2, [pc, #28]	; (8008498 <HAL_I2C_MspInit+0x74>)
 800847a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800847e:	61d3      	str	r3, [r2, #28]
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <HAL_I2C_MspInit+0x74>)
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008488:	60bb      	str	r3, [r7, #8]
 800848a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800848c:	bf00      	nop
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40005400 	.word	0x40005400
 8008498:	40021000 	.word	0x40021000
 800849c:	40010c00 	.word	0x40010c00

080084a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <HAL_I2C_MspDeInit+0x38>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d10d      	bne.n	80084ce <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <HAL_I2C_MspDeInit+0x3c>)
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <HAL_I2C_MspDeInit+0x3c>)
 80084b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084bc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084be:	2140      	movs	r1, #64	; 0x40
 80084c0:	4807      	ldr	r0, [pc, #28]	; (80084e0 <HAL_I2C_MspDeInit+0x40>)
 80084c2:	f000 fe8d 	bl	80091e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084c6:	2180      	movs	r1, #128	; 0x80
 80084c8:	4805      	ldr	r0, [pc, #20]	; (80084e0 <HAL_I2C_MspDeInit+0x40>)
 80084ca:	f000 fe89 	bl	80091e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40005400 	.word	0x40005400
 80084dc:	40021000 	.word	0x40021000
 80084e0:	40010c00 	.word	0x40010c00

080084e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a0d      	ldr	r2, [pc, #52]	; (8008528 <HAL_TIM_Base_MspInit+0x44>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d113      	bne.n	800851e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <HAL_TIM_Base_MspInit+0x48>)
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	4a0c      	ldr	r2, [pc, #48]	; (800852c <HAL_TIM_Base_MspInit+0x48>)
 80084fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008500:	6193      	str	r3, [r2, #24]
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <HAL_TIM_Base_MspInit+0x48>)
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	2019      	movs	r0, #25
 8008514:	f000 fb57 	bl	8008bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008518:	2019      	movs	r0, #25
 800851a:	f000 fb70 	bl	8008bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	40012c00 	.word	0x40012c00
 800852c:	40021000 	.word	0x40021000

08008530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a20      	ldr	r2, [pc, #128]	; (80085cc <HAL_UART_MspInit+0x9c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d139      	bne.n	80085c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008550:	4b1f      	ldr	r3, [pc, #124]	; (80085d0 <HAL_UART_MspInit+0xa0>)
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <HAL_UART_MspInit+0xa0>)
 8008556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800855a:	6193      	str	r3, [r2, #24]
 800855c:	4b1c      	ldr	r3, [pc, #112]	; (80085d0 <HAL_UART_MspInit+0xa0>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008568:	4b19      	ldr	r3, [pc, #100]	; (80085d0 <HAL_UART_MspInit+0xa0>)
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	4a18      	ldr	r2, [pc, #96]	; (80085d0 <HAL_UART_MspInit+0xa0>)
 800856e:	f043 0304 	orr.w	r3, r3, #4
 8008572:	6193      	str	r3, [r2, #24]
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <HAL_UART_MspInit+0xa0>)
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	60bb      	str	r3, [r7, #8]
 800857e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008586:	2302      	movs	r3, #2
 8008588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800858a:	2303      	movs	r3, #3
 800858c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800858e:	f107 0310 	add.w	r3, r7, #16
 8008592:	4619      	mov	r1, r3
 8008594:	480f      	ldr	r0, [pc, #60]	; (80085d4 <HAL_UART_MspInit+0xa4>)
 8008596:	f000 fc8f 	bl	8008eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800859a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800859e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	4809      	ldr	r0, [pc, #36]	; (80085d4 <HAL_UART_MspInit+0xa4>)
 80085b0:	f000 fc82 	bl	8008eb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085b4:	2200      	movs	r2, #0
 80085b6:	2100      	movs	r1, #0
 80085b8:	2025      	movs	r0, #37	; 0x25
 80085ba:	f000 fb04 	bl	8008bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085be:	2025      	movs	r0, #37	; 0x25
 80085c0:	f000 fb1d 	bl	8008bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085c4:	bf00      	nop
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40013800 	.word	0x40013800
 80085d0:	40021000 	.word	0x40021000
 80085d4:	40010800 	.word	0x40010800

080085d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80085dc:	e7fe      	b.n	80085dc <NMI_Handler+0x4>

080085de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085de:	b480      	push	{r7}
 80085e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085e2:	e7fe      	b.n	80085e2 <HardFault_Handler+0x4>

080085e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085e8:	e7fe      	b.n	80085e8 <MemManage_Handler+0x4>

080085ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085ea:	b480      	push	{r7}
 80085ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085ee:	e7fe      	b.n	80085ee <BusFault_Handler+0x4>

080085f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085f4:	e7fe      	b.n	80085f4 <UsageFault_Handler+0x4>

080085f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085f6:	b480      	push	{r7}
 80085f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085fa:	bf00      	nop
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr

08008602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008602:	b480      	push	{r7}
 8008604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008606:	bf00      	nop
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800860e:	b480      	push	{r7}
 8008610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008612:	bf00      	nop
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800861e:	f000 f8bf 	bl	80087a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008622:	bf00      	nop
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800862c:	4802      	ldr	r0, [pc, #8]	; (8008638 <TIM1_UP_IRQHandler+0x10>)
 800862e:	f002 fdcd 	bl	800b1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008632:	bf00      	nop
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000298 	.word	0x20000298

0800863c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008640:	4802      	ldr	r0, [pc, #8]	; (800864c <USART1_IRQHandler+0x10>)
 8008642:	f003 f9cb 	bl	800b9dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200002e0 	.word	0x200002e0

08008650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008658:	4a14      	ldr	r2, [pc, #80]	; (80086ac <_sbrk+0x5c>)
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <_sbrk+0x60>)
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008664:	4b13      	ldr	r3, [pc, #76]	; (80086b4 <_sbrk+0x64>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d102      	bne.n	8008672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800866c:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <_sbrk+0x64>)
 800866e:	4a12      	ldr	r2, [pc, #72]	; (80086b8 <_sbrk+0x68>)
 8008670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008672:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <_sbrk+0x64>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	429a      	cmp	r2, r3
 800867e:	d207      	bcs.n	8008690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008680:	f003 ffe6 	bl	800c650 <__errno>
 8008684:	4603      	mov	r3, r0
 8008686:	220c      	movs	r2, #12
 8008688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800868e:	e009      	b.n	80086a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008690:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <_sbrk+0x64>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <_sbrk+0x64>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	4a05      	ldr	r2, [pc, #20]	; (80086b4 <_sbrk+0x64>)
 80086a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086a2:	68fb      	ldr	r3, [r7, #12]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	2000c000 	.word	0x2000c000
 80086b0:	00000400 	.word	0x00000400
 80086b4:	2000045c 	.word	0x2000045c
 80086b8:	200005b0 	.word	0x200005b0

080086bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086c0:	bf00      	nop
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086c8:	480c      	ldr	r0, [pc, #48]	; (80086fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086ca:	490d      	ldr	r1, [pc, #52]	; (8008700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086cc:	4a0d      	ldr	r2, [pc, #52]	; (8008704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086d0:	e002      	b.n	80086d8 <LoopCopyDataInit>

080086d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086d6:	3304      	adds	r3, #4

080086d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086dc:	d3f9      	bcc.n	80086d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086de:	4a0a      	ldr	r2, [pc, #40]	; (8008708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80086e0:	4c0a      	ldr	r4, [pc, #40]	; (800870c <LoopFillZerobss+0x22>)
  movs r3, #0
 80086e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086e4:	e001      	b.n	80086ea <LoopFillZerobss>

080086e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086e8:	3204      	adds	r2, #4

080086ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086ec:	d3fb      	bcc.n	80086e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80086ee:	f7ff ffe5 	bl	80086bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086f2:	f003 ffb3 	bl	800c65c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086f6:	f7ff fb69 	bl	8007dcc <main>
  bx lr
 80086fa:	4770      	bx	lr
  ldr r0, =_sdata
 80086fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008700:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8008704:	0800dd8c 	.word	0x0800dd8c
  ldr r2, =_sbss
 8008708:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800870c:	200005ac 	.word	0x200005ac

08008710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008710:	e7fe      	b.n	8008710 <ADC1_2_IRQHandler>
	...

08008714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008718:	4b08      	ldr	r3, [pc, #32]	; (800873c <HAL_Init+0x28>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a07      	ldr	r2, [pc, #28]	; (800873c <HAL_Init+0x28>)
 800871e:	f043 0310 	orr.w	r3, r3, #16
 8008722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008724:	2003      	movs	r0, #3
 8008726:	f000 fa43 	bl	8008bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800872a:	200f      	movs	r0, #15
 800872c:	f000 f808 	bl	8008740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008730:	f7ff fdfa 	bl	8008328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	40022000 	.word	0x40022000

08008740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008748:	4b12      	ldr	r3, [pc, #72]	; (8008794 <HAL_InitTick+0x54>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <HAL_InitTick+0x58>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	4619      	mov	r1, r3
 8008752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008756:	fbb3 f3f1 	udiv	r3, r3, r1
 800875a:	fbb2 f3f3 	udiv	r3, r2, r3
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fa5b 	bl	8008c1a <HAL_SYSTICK_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e00e      	b.n	800878c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b0f      	cmp	r3, #15
 8008772:	d80a      	bhi.n	800878a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008774:	2200      	movs	r2, #0
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800877c:	f000 fa23 	bl	8008bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008780:	4a06      	ldr	r2, [pc, #24]	; (800879c <HAL_InitTick+0x5c>)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	e000      	b.n	800878c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	200000a8 	.word	0x200000a8
 8008798:	200000b0 	.word	0x200000b0
 800879c:	200000ac 	.word	0x200000ac

080087a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_IncTick+0x1c>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <HAL_IncTick+0x20>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4413      	add	r3, r2
 80087b0:	4a03      	ldr	r2, [pc, #12]	; (80087c0 <HAL_IncTick+0x20>)
 80087b2:	6013      	str	r3, [r2, #0]
}
 80087b4:	bf00      	nop
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr
 80087bc:	200000b0 	.word	0x200000b0
 80087c0:	20000460 	.word	0x20000460

080087c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
  return uwTick;
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <HAL_GetTick+0x10>)
 80087ca:	681b      	ldr	r3, [r3, #0]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr
 80087d4:	20000460 	.word	0x20000460

080087d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087e0:	f7ff fff0 	bl	80087c4 <HAL_GetTick>
 80087e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087f0:	d005      	beq.n	80087fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087f2:	4b0a      	ldr	r3, [pc, #40]	; (800881c <HAL_Delay+0x44>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087fe:	bf00      	nop
 8008800:	f7ff ffe0 	bl	80087c4 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	429a      	cmp	r2, r3
 800880e:	d8f7      	bhi.n	8008800 <HAL_Delay+0x28>
  {
  }
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	200000b0 	.word	0x200000b0

08008820 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e0ed      	b.n	8008a0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fda4 	bl	800838c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008854:	f7ff ffb6 	bl	80087c4 <HAL_GetTick>
 8008858:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800885a:	e012      	b.n	8008882 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800885c:	f7ff ffb2 	bl	80087c4 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b0a      	cmp	r3, #10
 8008868:	d90b      	bls.n	8008882 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2205      	movs	r2, #5
 800887a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e0c5      	b.n	8008a0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0e5      	beq.n	800885c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0202 	bic.w	r2, r2, #2
 800889e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088a0:	f7ff ff90 	bl	80087c4 <HAL_GetTick>
 80088a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088a6:	e012      	b.n	80088ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088a8:	f7ff ff8c 	bl	80087c4 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b0a      	cmp	r3, #10
 80088b4:	d90b      	bls.n	80088ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2205      	movs	r2, #5
 80088c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e09f      	b.n	8008a0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e5      	bne.n	80088a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7e1b      	ldrb	r3, [r3, #24]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d108      	bne.n	80088f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	e007      	b.n	8008906 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008904:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7e5b      	ldrb	r3, [r3, #25]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d108      	bne.n	8008920 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e007      	b.n	8008930 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800892e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7e9b      	ldrb	r3, [r3, #26]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d108      	bne.n	800894a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0220 	orr.w	r2, r2, #32
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e007      	b.n	800895a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0220 	bic.w	r2, r2, #32
 8008958:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	7edb      	ldrb	r3, [r3, #27]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d108      	bne.n	8008974 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0210 	bic.w	r2, r2, #16
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e007      	b.n	8008984 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0210 	orr.w	r2, r2, #16
 8008982:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7f1b      	ldrb	r3, [r3, #28]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d108      	bne.n	800899e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0208 	orr.w	r2, r2, #8
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	e007      	b.n	80089ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0208 	bic.w	r2, r2, #8
 80089ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	7f5b      	ldrb	r3, [r3, #29]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d108      	bne.n	80089c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0204 	orr.w	r2, r2, #4
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	e007      	b.n	80089d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0204 	bic.w	r2, r2, #4
 80089d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	ea42 0103 	orr.w	r1, r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	1e5a      	subs	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <__NVIC_SetPriorityGrouping>:
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <__NVIC_SetPriorityGrouping+0x44>)
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a34:	4013      	ands	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a4a:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <__NVIC_SetPriorityGrouping+0x44>)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	60d3      	str	r3, [r2, #12]
}
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	e000ed00 	.word	0xe000ed00

08008a60 <__NVIC_GetPriorityGrouping>:
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <__NVIC_GetPriorityGrouping+0x18>)
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	f003 0307 	and.w	r3, r3, #7
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	e000ed00 	.word	0xe000ed00

08008a7c <__NVIC_EnableIRQ>:
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	db0b      	blt.n	8008aa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	f003 021f 	and.w	r2, r3, #31
 8008a94:	4906      	ldr	r1, [pc, #24]	; (8008ab0 <__NVIC_EnableIRQ+0x34>)
 8008a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9a:	095b      	lsrs	r3, r3, #5
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8008aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr
 8008ab0:	e000e100 	.word	0xe000e100

08008ab4 <__NVIC_SetPriority>:
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	db0a      	blt.n	8008ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	490c      	ldr	r1, [pc, #48]	; (8008b00 <__NVIC_SetPriority+0x4c>)
 8008ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad2:	0112      	lsls	r2, r2, #4
 8008ad4:	b2d2      	uxtb	r2, r2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008adc:	e00a      	b.n	8008af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4908      	ldr	r1, [pc, #32]	; (8008b04 <__NVIC_SetPriority+0x50>)
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	3b04      	subs	r3, #4
 8008aec:	0112      	lsls	r2, r2, #4
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	440b      	add	r3, r1
 8008af2:	761a      	strb	r2, [r3, #24]
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	e000e100 	.word	0xe000e100
 8008b04:	e000ed00 	.word	0xe000ed00

08008b08 <NVIC_EncodePriority>:
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f1c3 0307 	rsb	r3, r3, #7
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	bf28      	it	cs
 8008b26:	2304      	movcs	r3, #4
 8008b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	2b06      	cmp	r3, #6
 8008b30:	d902      	bls.n	8008b38 <NVIC_EncodePriority+0x30>
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3b03      	subs	r3, #3
 8008b36:	e000      	b.n	8008b3a <NVIC_EncodePriority+0x32>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	43da      	mvns	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	401a      	ands	r2, r3
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5a:	43d9      	mvns	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b60:	4313      	orrs	r3, r2
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3724      	adds	r7, #36	; 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bc80      	pop	{r7}
 8008b6a:	4770      	bx	lr

08008b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b7c:	d301      	bcc.n	8008b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e00f      	b.n	8008ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <SysTick_Config+0x40>)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b8a:	210f      	movs	r1, #15
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b90:	f7ff ff90 	bl	8008ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <SysTick_Config+0x40>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b9a:	4b04      	ldr	r3, [pc, #16]	; (8008bac <SysTick_Config+0x40>)
 8008b9c:	2207      	movs	r2, #7
 8008b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	e000e010 	.word	0xe000e010

08008bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff ff2d 	bl	8008a18 <__NVIC_SetPriorityGrouping>
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	4603      	mov	r3, r0
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bd8:	f7ff ff42 	bl	8008a60 <__NVIC_GetPriorityGrouping>
 8008bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	6978      	ldr	r0, [r7, #20]
 8008be4:	f7ff ff90 	bl	8008b08 <NVIC_EncodePriority>
 8008be8:	4602      	mov	r2, r0
 8008bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff ff5f 	bl	8008ab4 <__NVIC_SetPriority>
}
 8008bf6:	bf00      	nop
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	4603      	mov	r3, r0
 8008c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff ff35 	bl	8008a7c <__NVIC_EnableIRQ>
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff ffa2 	bl	8008b6c <SysTick_Config>
 8008c28:	4603      	mov	r3, r0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d008      	beq.n	8008c5c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e020      	b.n	8008c9e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 020e 	bic.w	r2, r2, #14
 8008c6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0201 	bic.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c84:	2101      	movs	r1, #1
 8008c86:	fa01 f202 	lsl.w	r2, r1, r2
 8008c8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d005      	beq.n	8008ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	73fb      	strb	r3, [r7, #15]
 8008cca:	e0d6      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 020e 	bic.w	r2, r2, #14
 8008cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0201 	bic.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4b64      	ldr	r3, [pc, #400]	; (8008e84 <HAL_DMA_Abort_IT+0x1dc>)
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d958      	bls.n	8008daa <HAL_DMA_Abort_IT+0x102>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a62      	ldr	r2, [pc, #392]	; (8008e88 <HAL_DMA_Abort_IT+0x1e0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d04f      	beq.n	8008da2 <HAL_DMA_Abort_IT+0xfa>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a61      	ldr	r2, [pc, #388]	; (8008e8c <HAL_DMA_Abort_IT+0x1e4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d048      	beq.n	8008d9e <HAL_DMA_Abort_IT+0xf6>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a5f      	ldr	r2, [pc, #380]	; (8008e90 <HAL_DMA_Abort_IT+0x1e8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d040      	beq.n	8008d98 <HAL_DMA_Abort_IT+0xf0>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a5e      	ldr	r2, [pc, #376]	; (8008e94 <HAL_DMA_Abort_IT+0x1ec>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d038      	beq.n	8008d92 <HAL_DMA_Abort_IT+0xea>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a5c      	ldr	r2, [pc, #368]	; (8008e98 <HAL_DMA_Abort_IT+0x1f0>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d030      	beq.n	8008d8c <HAL_DMA_Abort_IT+0xe4>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a5b      	ldr	r2, [pc, #364]	; (8008e9c <HAL_DMA_Abort_IT+0x1f4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d028      	beq.n	8008d86 <HAL_DMA_Abort_IT+0xde>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a52      	ldr	r2, [pc, #328]	; (8008e84 <HAL_DMA_Abort_IT+0x1dc>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d020      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xd8>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a57      	ldr	r2, [pc, #348]	; (8008ea0 <HAL_DMA_Abort_IT+0x1f8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d019      	beq.n	8008d7c <HAL_DMA_Abort_IT+0xd4>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a55      	ldr	r2, [pc, #340]	; (8008ea4 <HAL_DMA_Abort_IT+0x1fc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d012      	beq.n	8008d78 <HAL_DMA_Abort_IT+0xd0>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a54      	ldr	r2, [pc, #336]	; (8008ea8 <HAL_DMA_Abort_IT+0x200>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00a      	beq.n	8008d72 <HAL_DMA_Abort_IT+0xca>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a52      	ldr	r2, [pc, #328]	; (8008eac <HAL_DMA_Abort_IT+0x204>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d102      	bne.n	8008d6c <HAL_DMA_Abort_IT+0xc4>
 8008d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d6a:	e01b      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d70:	e018      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d76:	e015      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d78:	2310      	movs	r3, #16
 8008d7a:	e013      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e011      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d84:	e00e      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d8a:	e00b      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d90:	e008      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d96:	e005      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d9c:	e002      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008d9e:	2310      	movs	r3, #16
 8008da0:	e000      	b.n	8008da4 <HAL_DMA_Abort_IT+0xfc>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4a42      	ldr	r2, [pc, #264]	; (8008eb0 <HAL_DMA_Abort_IT+0x208>)
 8008da6:	6053      	str	r3, [r2, #4]
 8008da8:	e057      	b.n	8008e5a <HAL_DMA_Abort_IT+0x1b2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a36      	ldr	r2, [pc, #216]	; (8008e88 <HAL_DMA_Abort_IT+0x1e0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d04f      	beq.n	8008e54 <HAL_DMA_Abort_IT+0x1ac>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a34      	ldr	r2, [pc, #208]	; (8008e8c <HAL_DMA_Abort_IT+0x1e4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d048      	beq.n	8008e50 <HAL_DMA_Abort_IT+0x1a8>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a33      	ldr	r2, [pc, #204]	; (8008e90 <HAL_DMA_Abort_IT+0x1e8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d040      	beq.n	8008e4a <HAL_DMA_Abort_IT+0x1a2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a31      	ldr	r2, [pc, #196]	; (8008e94 <HAL_DMA_Abort_IT+0x1ec>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d038      	beq.n	8008e44 <HAL_DMA_Abort_IT+0x19c>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a30      	ldr	r2, [pc, #192]	; (8008e98 <HAL_DMA_Abort_IT+0x1f0>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d030      	beq.n	8008e3e <HAL_DMA_Abort_IT+0x196>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a2e      	ldr	r2, [pc, #184]	; (8008e9c <HAL_DMA_Abort_IT+0x1f4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d028      	beq.n	8008e38 <HAL_DMA_Abort_IT+0x190>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a26      	ldr	r2, [pc, #152]	; (8008e84 <HAL_DMA_Abort_IT+0x1dc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d020      	beq.n	8008e32 <HAL_DMA_Abort_IT+0x18a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a2a      	ldr	r2, [pc, #168]	; (8008ea0 <HAL_DMA_Abort_IT+0x1f8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d019      	beq.n	8008e2e <HAL_DMA_Abort_IT+0x186>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a29      	ldr	r2, [pc, #164]	; (8008ea4 <HAL_DMA_Abort_IT+0x1fc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d012      	beq.n	8008e2a <HAL_DMA_Abort_IT+0x182>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a27      	ldr	r2, [pc, #156]	; (8008ea8 <HAL_DMA_Abort_IT+0x200>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00a      	beq.n	8008e24 <HAL_DMA_Abort_IT+0x17c>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a26      	ldr	r2, [pc, #152]	; (8008eac <HAL_DMA_Abort_IT+0x204>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d102      	bne.n	8008e1e <HAL_DMA_Abort_IT+0x176>
 8008e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1c:	e01b      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e22:	e018      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e28:	e015      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e2a:	2310      	movs	r3, #16
 8008e2c:	e013      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e011      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e36:	e00e      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e3c:	e00b      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e42:	e008      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e48:	e005      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4e:	e002      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e50:	2310      	movs	r3, #16
 8008e52:	e000      	b.n	8008e56 <HAL_DMA_Abort_IT+0x1ae>
 8008e54:	2301      	movs	r3, #1
 8008e56:	4a17      	ldr	r2, [pc, #92]	; (8008eb4 <HAL_DMA_Abort_IT+0x20c>)
 8008e58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	4798      	blx	r3
    } 
  }
  return status;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40020080 	.word	0x40020080
 8008e88:	40020008 	.word	0x40020008
 8008e8c:	4002001c 	.word	0x4002001c
 8008e90:	40020030 	.word	0x40020030
 8008e94:	40020044 	.word	0x40020044
 8008e98:	40020058 	.word	0x40020058
 8008e9c:	4002006c 	.word	0x4002006c
 8008ea0:	40020408 	.word	0x40020408
 8008ea4:	4002041c 	.word	0x4002041c
 8008ea8:	40020430 	.word	0x40020430
 8008eac:	40020444 	.word	0x40020444
 8008eb0:	40020400 	.word	0x40020400
 8008eb4:	40020000 	.word	0x40020000

08008eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b08b      	sub	sp, #44	; 0x2c
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008eca:	e179      	b.n	80091c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008ecc:	2201      	movs	r2, #1
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	4013      	ands	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	f040 8168 	bne.w	80091ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	4a96      	ldr	r2, [pc, #600]	; (8009148 <HAL_GPIO_Init+0x290>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d05e      	beq.n	8008fb2 <HAL_GPIO_Init+0xfa>
 8008ef4:	4a94      	ldr	r2, [pc, #592]	; (8009148 <HAL_GPIO_Init+0x290>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d875      	bhi.n	8008fe6 <HAL_GPIO_Init+0x12e>
 8008efa:	4a94      	ldr	r2, [pc, #592]	; (800914c <HAL_GPIO_Init+0x294>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d058      	beq.n	8008fb2 <HAL_GPIO_Init+0xfa>
 8008f00:	4a92      	ldr	r2, [pc, #584]	; (800914c <HAL_GPIO_Init+0x294>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d86f      	bhi.n	8008fe6 <HAL_GPIO_Init+0x12e>
 8008f06:	4a92      	ldr	r2, [pc, #584]	; (8009150 <HAL_GPIO_Init+0x298>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d052      	beq.n	8008fb2 <HAL_GPIO_Init+0xfa>
 8008f0c:	4a90      	ldr	r2, [pc, #576]	; (8009150 <HAL_GPIO_Init+0x298>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d869      	bhi.n	8008fe6 <HAL_GPIO_Init+0x12e>
 8008f12:	4a90      	ldr	r2, [pc, #576]	; (8009154 <HAL_GPIO_Init+0x29c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d04c      	beq.n	8008fb2 <HAL_GPIO_Init+0xfa>
 8008f18:	4a8e      	ldr	r2, [pc, #568]	; (8009154 <HAL_GPIO_Init+0x29c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d863      	bhi.n	8008fe6 <HAL_GPIO_Init+0x12e>
 8008f1e:	4a8e      	ldr	r2, [pc, #568]	; (8009158 <HAL_GPIO_Init+0x2a0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d046      	beq.n	8008fb2 <HAL_GPIO_Init+0xfa>
 8008f24:	4a8c      	ldr	r2, [pc, #560]	; (8009158 <HAL_GPIO_Init+0x2a0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d85d      	bhi.n	8008fe6 <HAL_GPIO_Init+0x12e>
 8008f2a:	2b12      	cmp	r3, #18
 8008f2c:	d82a      	bhi.n	8008f84 <HAL_GPIO_Init+0xcc>
 8008f2e:	2b12      	cmp	r3, #18
 8008f30:	d859      	bhi.n	8008fe6 <HAL_GPIO_Init+0x12e>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <HAL_GPIO_Init+0x80>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008fb3 	.word	0x08008fb3
 8008f3c:	08008f8d 	.word	0x08008f8d
 8008f40:	08008f9f 	.word	0x08008f9f
 8008f44:	08008fe1 	.word	0x08008fe1
 8008f48:	08008fe7 	.word	0x08008fe7
 8008f4c:	08008fe7 	.word	0x08008fe7
 8008f50:	08008fe7 	.word	0x08008fe7
 8008f54:	08008fe7 	.word	0x08008fe7
 8008f58:	08008fe7 	.word	0x08008fe7
 8008f5c:	08008fe7 	.word	0x08008fe7
 8008f60:	08008fe7 	.word	0x08008fe7
 8008f64:	08008fe7 	.word	0x08008fe7
 8008f68:	08008fe7 	.word	0x08008fe7
 8008f6c:	08008fe7 	.word	0x08008fe7
 8008f70:	08008fe7 	.word	0x08008fe7
 8008f74:	08008fe7 	.word	0x08008fe7
 8008f78:	08008fe7 	.word	0x08008fe7
 8008f7c:	08008f95 	.word	0x08008f95
 8008f80:	08008fa9 	.word	0x08008fa9
 8008f84:	4a75      	ldr	r2, [pc, #468]	; (800915c <HAL_GPIO_Init+0x2a4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d013      	beq.n	8008fb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f8a:	e02c      	b.n	8008fe6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	623b      	str	r3, [r7, #32]
          break;
 8008f92:	e029      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	623b      	str	r3, [r7, #32]
          break;
 8008f9c:	e024      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	623b      	str	r3, [r7, #32]
          break;
 8008fa6:	e01f      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	330c      	adds	r3, #12
 8008fae:	623b      	str	r3, [r7, #32]
          break;
 8008fb0:	e01a      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d102      	bne.n	8008fc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fba:	2304      	movs	r3, #4
 8008fbc:	623b      	str	r3, [r7, #32]
          break;
 8008fbe:	e013      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d105      	bne.n	8008fd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fc8:	2308      	movs	r3, #8
 8008fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	611a      	str	r2, [r3, #16]
          break;
 8008fd2:	e009      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	615a      	str	r2, [r3, #20]
          break;
 8008fde:	e003      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	623b      	str	r3, [r7, #32]
          break;
 8008fe4:	e000      	b.n	8008fe8 <HAL_GPIO_Init+0x130>
          break;
 8008fe6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2bff      	cmp	r3, #255	; 0xff
 8008fec:	d801      	bhi.n	8008ff2 <HAL_GPIO_Init+0x13a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	e001      	b.n	8008ff6 <HAL_GPIO_Init+0x13e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	2bff      	cmp	r3, #255	; 0xff
 8008ffc:	d802      	bhi.n	8009004 <HAL_GPIO_Init+0x14c>
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	e002      	b.n	800900a <HAL_GPIO_Init+0x152>
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	3b08      	subs	r3, #8
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	210f      	movs	r1, #15
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	fa01 f303 	lsl.w	r3, r1, r3
 8009018:	43db      	mvns	r3, r3
 800901a:	401a      	ands	r2, r3
 800901c:	6a39      	ldr	r1, [r7, #32]
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	fa01 f303 	lsl.w	r3, r1, r3
 8009024:	431a      	orrs	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80c1 	beq.w	80091ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009038:	4b49      	ldr	r3, [pc, #292]	; (8009160 <HAL_GPIO_Init+0x2a8>)
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	4a48      	ldr	r2, [pc, #288]	; (8009160 <HAL_GPIO_Init+0x2a8>)
 800903e:	f043 0301 	orr.w	r3, r3, #1
 8009042:	6193      	str	r3, [r2, #24]
 8009044:	4b46      	ldr	r3, [pc, #280]	; (8009160 <HAL_GPIO_Init+0x2a8>)
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	60bb      	str	r3, [r7, #8]
 800904e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009050:	4a44      	ldr	r2, [pc, #272]	; (8009164 <HAL_GPIO_Init+0x2ac>)
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	089b      	lsrs	r3, r3, #2
 8009056:	3302      	adds	r3, #2
 8009058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	220f      	movs	r2, #15
 8009068:	fa02 f303 	lsl.w	r3, r2, r3
 800906c:	43db      	mvns	r3, r3
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a3c      	ldr	r2, [pc, #240]	; (8009168 <HAL_GPIO_Init+0x2b0>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d01f      	beq.n	80090bc <HAL_GPIO_Init+0x204>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a3b      	ldr	r2, [pc, #236]	; (800916c <HAL_GPIO_Init+0x2b4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d019      	beq.n	80090b8 <HAL_GPIO_Init+0x200>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a3a      	ldr	r2, [pc, #232]	; (8009170 <HAL_GPIO_Init+0x2b8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d013      	beq.n	80090b4 <HAL_GPIO_Init+0x1fc>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a39      	ldr	r2, [pc, #228]	; (8009174 <HAL_GPIO_Init+0x2bc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00d      	beq.n	80090b0 <HAL_GPIO_Init+0x1f8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a38      	ldr	r2, [pc, #224]	; (8009178 <HAL_GPIO_Init+0x2c0>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d007      	beq.n	80090ac <HAL_GPIO_Init+0x1f4>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a37      	ldr	r2, [pc, #220]	; (800917c <HAL_GPIO_Init+0x2c4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d101      	bne.n	80090a8 <HAL_GPIO_Init+0x1f0>
 80090a4:	2305      	movs	r3, #5
 80090a6:	e00a      	b.n	80090be <HAL_GPIO_Init+0x206>
 80090a8:	2306      	movs	r3, #6
 80090aa:	e008      	b.n	80090be <HAL_GPIO_Init+0x206>
 80090ac:	2304      	movs	r3, #4
 80090ae:	e006      	b.n	80090be <HAL_GPIO_Init+0x206>
 80090b0:	2303      	movs	r3, #3
 80090b2:	e004      	b.n	80090be <HAL_GPIO_Init+0x206>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e002      	b.n	80090be <HAL_GPIO_Init+0x206>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <HAL_GPIO_Init+0x206>
 80090bc:	2300      	movs	r3, #0
 80090be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c0:	f002 0203 	and.w	r2, r2, #3
 80090c4:	0092      	lsls	r2, r2, #2
 80090c6:	4093      	lsls	r3, r2
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090ce:	4925      	ldr	r1, [pc, #148]	; (8009164 <HAL_GPIO_Init+0x2ac>)
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	089b      	lsrs	r3, r3, #2
 80090d4:	3302      	adds	r3, #2
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80090e8:	4b25      	ldr	r3, [pc, #148]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	4924      	ldr	r1, [pc, #144]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	608b      	str	r3, [r1, #8]
 80090f4:	e006      	b.n	8009104 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80090f6:	4b22      	ldr	r3, [pc, #136]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 80090f8:	689a      	ldr	r2, [r3, #8]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	43db      	mvns	r3, r3
 80090fe:	4920      	ldr	r1, [pc, #128]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 8009100:	4013      	ands	r3, r2
 8009102:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d006      	beq.n	800911e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	491a      	ldr	r1, [pc, #104]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4313      	orrs	r3, r2
 800911a:	60cb      	str	r3, [r1, #12]
 800911c:	e006      	b.n	800912c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	43db      	mvns	r3, r3
 8009126:	4916      	ldr	r1, [pc, #88]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 8009128:	4013      	ands	r3, r2
 800912a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d025      	beq.n	8009184 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	4910      	ldr	r1, [pc, #64]	; (8009180 <HAL_GPIO_Init+0x2c8>)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	4313      	orrs	r3, r2
 8009142:	604b      	str	r3, [r1, #4]
 8009144:	e025      	b.n	8009192 <HAL_GPIO_Init+0x2da>
 8009146:	bf00      	nop
 8009148:	10320000 	.word	0x10320000
 800914c:	10310000 	.word	0x10310000
 8009150:	10220000 	.word	0x10220000
 8009154:	10210000 	.word	0x10210000
 8009158:	10120000 	.word	0x10120000
 800915c:	10110000 	.word	0x10110000
 8009160:	40021000 	.word	0x40021000
 8009164:	40010000 	.word	0x40010000
 8009168:	40010800 	.word	0x40010800
 800916c:	40010c00 	.word	0x40010c00
 8009170:	40011000 	.word	0x40011000
 8009174:	40011400 	.word	0x40011400
 8009178:	40011800 	.word	0x40011800
 800917c:	40011c00 	.word	0x40011c00
 8009180:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009184:	4b15      	ldr	r3, [pc, #84]	; (80091dc <HAL_GPIO_Init+0x324>)
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	43db      	mvns	r3, r3
 800918c:	4913      	ldr	r1, [pc, #76]	; (80091dc <HAL_GPIO_Init+0x324>)
 800918e:	4013      	ands	r3, r2
 8009190:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d006      	beq.n	80091ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800919e:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <HAL_GPIO_Init+0x324>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	490e      	ldr	r1, [pc, #56]	; (80091dc <HAL_GPIO_Init+0x324>)
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	600b      	str	r3, [r1, #0]
 80091aa:	e006      	b.n	80091ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091ac:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <HAL_GPIO_Init+0x324>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	43db      	mvns	r3, r3
 80091b4:	4909      	ldr	r1, [pc, #36]	; (80091dc <HAL_GPIO_Init+0x324>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	3301      	adds	r3, #1
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f47f ae7e 	bne.w	8008ecc <HAL_GPIO_Init+0x14>
  }
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	372c      	adds	r7, #44	; 0x2c
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	40010400 	.word	0x40010400

080091e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80091ee:	e0a6      	b.n	800933e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80091f0:	2201      	movs	r2, #1
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	fa02 f303 	lsl.w	r3, r2, r3
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	4013      	ands	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8099 	beq.w	8009338 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009206:	4a54      	ldr	r2, [pc, #336]	; (8009358 <HAL_GPIO_DeInit+0x178>)
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	089b      	lsrs	r3, r3, #2
 800920c:	3302      	adds	r3, #2
 800920e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009212:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	220f      	movs	r2, #15
 800921e:	fa02 f303 	lsl.w	r3, r2, r3
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4013      	ands	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a4c      	ldr	r2, [pc, #304]	; (800935c <HAL_GPIO_DeInit+0x17c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d01f      	beq.n	8009270 <HAL_GPIO_DeInit+0x90>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a4b      	ldr	r2, [pc, #300]	; (8009360 <HAL_GPIO_DeInit+0x180>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d019      	beq.n	800926c <HAL_GPIO_DeInit+0x8c>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a4a      	ldr	r2, [pc, #296]	; (8009364 <HAL_GPIO_DeInit+0x184>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d013      	beq.n	8009268 <HAL_GPIO_DeInit+0x88>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a49      	ldr	r2, [pc, #292]	; (8009368 <HAL_GPIO_DeInit+0x188>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00d      	beq.n	8009264 <HAL_GPIO_DeInit+0x84>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a48      	ldr	r2, [pc, #288]	; (800936c <HAL_GPIO_DeInit+0x18c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d007      	beq.n	8009260 <HAL_GPIO_DeInit+0x80>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a47      	ldr	r2, [pc, #284]	; (8009370 <HAL_GPIO_DeInit+0x190>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d101      	bne.n	800925c <HAL_GPIO_DeInit+0x7c>
 8009258:	2305      	movs	r3, #5
 800925a:	e00a      	b.n	8009272 <HAL_GPIO_DeInit+0x92>
 800925c:	2306      	movs	r3, #6
 800925e:	e008      	b.n	8009272 <HAL_GPIO_DeInit+0x92>
 8009260:	2304      	movs	r3, #4
 8009262:	e006      	b.n	8009272 <HAL_GPIO_DeInit+0x92>
 8009264:	2303      	movs	r3, #3
 8009266:	e004      	b.n	8009272 <HAL_GPIO_DeInit+0x92>
 8009268:	2302      	movs	r3, #2
 800926a:	e002      	b.n	8009272 <HAL_GPIO_DeInit+0x92>
 800926c:	2301      	movs	r3, #1
 800926e:	e000      	b.n	8009272 <HAL_GPIO_DeInit+0x92>
 8009270:	2300      	movs	r3, #0
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	f002 0203 	and.w	r2, r2, #3
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	4093      	lsls	r3, r2
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	429a      	cmp	r2, r3
 8009280:	d132      	bne.n	80092e8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009282:	4b3c      	ldr	r3, [pc, #240]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	43db      	mvns	r3, r3
 800928a:	493a      	ldr	r1, [pc, #232]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 800928c:	4013      	ands	r3, r2
 800928e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009290:	4b38      	ldr	r3, [pc, #224]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	43db      	mvns	r3, r3
 8009298:	4936      	ldr	r1, [pc, #216]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 800929a:	4013      	ands	r3, r2
 800929c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800929e:	4b35      	ldr	r3, [pc, #212]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	43db      	mvns	r3, r3
 80092a6:	4933      	ldr	r1, [pc, #204]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092ac:	4b31      	ldr	r3, [pc, #196]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	43db      	mvns	r3, r3
 80092b4:	492f      	ldr	r1, [pc, #188]	; (8009374 <HAL_GPIO_DeInit+0x194>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	220f      	movs	r2, #15
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092ca:	4a23      	ldr	r2, [pc, #140]	; (8009358 <HAL_GPIO_DeInit+0x178>)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	089b      	lsrs	r3, r3, #2
 80092d0:	3302      	adds	r3, #2
 80092d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	43da      	mvns	r2, r3
 80092da:	481f      	ldr	r0, [pc, #124]	; (8009358 <HAL_GPIO_DeInit+0x178>)
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	089b      	lsrs	r3, r3, #2
 80092e0:	400a      	ands	r2, r1
 80092e2:	3302      	adds	r3, #2
 80092e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2bff      	cmp	r3, #255	; 0xff
 80092ec:	d801      	bhi.n	80092f2 <HAL_GPIO_DeInit+0x112>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	e001      	b.n	80092f6 <HAL_GPIO_DeInit+0x116>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	2bff      	cmp	r3, #255	; 0xff
 80092fc:	d802      	bhi.n	8009304 <HAL_GPIO_DeInit+0x124>
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	e002      	b.n	800930a <HAL_GPIO_DeInit+0x12a>
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	3b08      	subs	r3, #8
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	210f      	movs	r1, #15
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	fa01 f303 	lsl.w	r3, r1, r3
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	2104      	movs	r1, #4
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	fa01 f303 	lsl.w	r3, r1, r3
 8009324:	431a      	orrs	r2, r3
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	43db      	mvns	r3, r3
 8009332:	401a      	ands	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	fa22 f303 	lsr.w	r3, r2, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	f47f af52 	bne.w	80091f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	3724      	adds	r7, #36	; 0x24
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr
 8009358:	40010000 	.word	0x40010000
 800935c:	40010800 	.word	0x40010800
 8009360:	40010c00 	.word	0x40010c00
 8009364:	40011000 	.word	0x40011000
 8009368:	40011400 	.word	0x40011400
 800936c:	40011800 	.word	0x40011800
 8009370:	40011c00 	.word	0x40011c00
 8009374:	40010400 	.word	0x40010400

08009378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	887b      	ldrh	r3, [r7, #2]
 800938a:	4013      	ands	r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009390:	2301      	movs	r3, #1
 8009392:	73fb      	strb	r3, [r7, #15]
 8009394:	e001      	b.n	800939a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr

080093a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	807b      	strh	r3, [r7, #2]
 80093b2:	4613      	mov	r3, r2
 80093b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093b6:	787b      	ldrb	r3, [r7, #1]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093bc:	887a      	ldrh	r2, [r7, #2]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093c2:	e003      	b.n	80093cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093c4:	887b      	ldrh	r3, [r7, #2]
 80093c6:	041a      	lsls	r2, r3, #16
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	611a      	str	r2, [r3, #16]
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093e8:	887a      	ldrh	r2, [r7, #2]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4013      	ands	r3, r2
 80093ee:	041a      	lsls	r2, r3, #16
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	43d9      	mvns	r1, r3
 80093f4:	887b      	ldrh	r3, [r7, #2]
 80093f6:	400b      	ands	r3, r1
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]
}
 80093fe:	bf00      	nop
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e12b      	b.n	8009672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fe fff8 	bl	8008424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2224      	movs	r2, #36	; 0x24
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0201 	bic.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800945a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800946a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800946c:	f001 fdb8 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 8009470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	4a81      	ldr	r2, [pc, #516]	; (800967c <HAL_I2C_Init+0x274>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d807      	bhi.n	800948c <HAL_I2C_Init+0x84>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a80      	ldr	r2, [pc, #512]	; (8009680 <HAL_I2C_Init+0x278>)
 8009480:	4293      	cmp	r3, r2
 8009482:	bf94      	ite	ls
 8009484:	2301      	movls	r3, #1
 8009486:	2300      	movhi	r3, #0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	e006      	b.n	800949a <HAL_I2C_Init+0x92>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a7d      	ldr	r2, [pc, #500]	; (8009684 <HAL_I2C_Init+0x27c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	bf94      	ite	ls
 8009494:	2301      	movls	r3, #1
 8009496:	2300      	movhi	r3, #0
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e0e7      	b.n	8009672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	4a78      	ldr	r2, [pc, #480]	; (8009688 <HAL_I2C_Init+0x280>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	0c9b      	lsrs	r3, r3, #18
 80094ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4a6a      	ldr	r2, [pc, #424]	; (800967c <HAL_I2C_Init+0x274>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d802      	bhi.n	80094dc <HAL_I2C_Init+0xd4>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	3301      	adds	r3, #1
 80094da:	e009      	b.n	80094f0 <HAL_I2C_Init+0xe8>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	4a69      	ldr	r2, [pc, #420]	; (800968c <HAL_I2C_Init+0x284>)
 80094e8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ec:	099b      	lsrs	r3, r3, #6
 80094ee:	3301      	adds	r3, #1
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	430b      	orrs	r3, r1
 80094f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	495c      	ldr	r1, [pc, #368]	; (800967c <HAL_I2C_Init+0x274>)
 800950c:	428b      	cmp	r3, r1
 800950e:	d819      	bhi.n	8009544 <HAL_I2C_Init+0x13c>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	1e59      	subs	r1, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	fbb1 f3f3 	udiv	r3, r1, r3
 800951e:	1c59      	adds	r1, r3, #1
 8009520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009524:	400b      	ands	r3, r1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <HAL_I2C_Init+0x138>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1e59      	subs	r1, r3, #1
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	fbb1 f3f3 	udiv	r3, r1, r3
 8009538:	3301      	adds	r3, #1
 800953a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800953e:	e051      	b.n	80095e4 <HAL_I2C_Init+0x1dc>
 8009540:	2304      	movs	r3, #4
 8009542:	e04f      	b.n	80095e4 <HAL_I2C_Init+0x1dc>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d111      	bne.n	8009570 <HAL_I2C_Init+0x168>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	1e58      	subs	r0, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6859      	ldr	r1, [r3, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	440b      	add	r3, r1
 800955a:	fbb0 f3f3 	udiv	r3, r0, r3
 800955e:	3301      	adds	r3, #1
 8009560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009564:	2b00      	cmp	r3, #0
 8009566:	bf0c      	ite	eq
 8009568:	2301      	moveq	r3, #1
 800956a:	2300      	movne	r3, #0
 800956c:	b2db      	uxtb	r3, r3
 800956e:	e012      	b.n	8009596 <HAL_I2C_Init+0x18e>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1e58      	subs	r0, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	0099      	lsls	r1, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	fbb0 f3f3 	udiv	r3, r0, r3
 8009586:	3301      	adds	r3, #1
 8009588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800958c:	2b00      	cmp	r3, #0
 800958e:	bf0c      	ite	eq
 8009590:	2301      	moveq	r3, #1
 8009592:	2300      	movne	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_I2C_Init+0x196>
 800959a:	2301      	movs	r3, #1
 800959c:	e022      	b.n	80095e4 <HAL_I2C_Init+0x1dc>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10e      	bne.n	80095c4 <HAL_I2C_Init+0x1bc>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	1e58      	subs	r0, r3, #1
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6859      	ldr	r1, [r3, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	440b      	add	r3, r1
 80095b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80095b8:	3301      	adds	r3, #1
 80095ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c2:	e00f      	b.n	80095e4 <HAL_I2C_Init+0x1dc>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1e58      	subs	r0, r3, #1
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6859      	ldr	r1, [r3, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	0099      	lsls	r1, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095da:	3301      	adds	r3, #1
 80095dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	6809      	ldr	r1, [r1, #0]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69da      	ldr	r2, [r3, #28]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6911      	ldr	r1, [r2, #16]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	68d2      	ldr	r2, [r2, #12]
 800961e:	4311      	orrs	r1, r2
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	430b      	orrs	r3, r1
 8009626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695a      	ldr	r2, [r3, #20]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	000186a0 	.word	0x000186a0
 8009680:	001e847f 	.word	0x001e847f
 8009684:	003d08ff 	.word	0x003d08ff
 8009688:	431bde83 	.word	0x431bde83
 800968c:	10624dd3 	.word	0x10624dd3

08009690 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e021      	b.n	80096e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	; 0x24
 80096a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fe fef0 	bl	80084a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	461a      	mov	r2, r3
 80096fc:	460b      	mov	r3, r1
 80096fe:	817b      	strh	r3, [r7, #10]
 8009700:	4613      	mov	r3, r2
 8009702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009704:	f7ff f85e 	bl	80087c4 <HAL_GetTick>
 8009708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b20      	cmp	r3, #32
 8009714:	f040 80e0 	bne.w	80098d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2319      	movs	r3, #25
 800971e:	2201      	movs	r2, #1
 8009720:	4970      	ldr	r1, [pc, #448]	; (80098e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fe5c 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800972e:	2302      	movs	r3, #2
 8009730:	e0d3      	b.n	80098da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009738:	2b01      	cmp	r3, #1
 800973a:	d101      	bne.n	8009740 <HAL_I2C_Master_Transmit+0x50>
 800973c:	2302      	movs	r3, #2
 800973e:	e0cc      	b.n	80098da <HAL_I2C_Master_Transmit+0x1ea>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b01      	cmp	r3, #1
 8009754:	d007      	beq.n	8009766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f042 0201 	orr.w	r2, r2, #1
 8009764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2221      	movs	r2, #33	; 0x21
 800977a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2210      	movs	r2, #16
 8009782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	893a      	ldrh	r2, [r7, #8]
 8009796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4a50      	ldr	r2, [pc, #320]	; (80098e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80097a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097a8:	8979      	ldrh	r1, [r7, #10]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a3a      	ldr	r2, [r7, #32]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fc16 	bl	8009fe0 <I2C_MasterRequestWrite>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e08d      	b.n	80098da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097d4:	e066      	b.n	80098a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	6a39      	ldr	r1, [r7, #32]
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 ff1a 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00d      	beq.n	8009802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d107      	bne.n	80097fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e06b      	b.n	80098da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	781a      	ldrb	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982a:	3b01      	subs	r3, #1
 800982c:	b29a      	uxth	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b04      	cmp	r3, #4
 800983e:	d11b      	bne.n	8009878 <HAL_I2C_Master_Transmit+0x188>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009844:	2b00      	cmp	r3, #0
 8009846:	d017      	beq.n	8009878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009862:	b29b      	uxth	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	6a39      	ldr	r1, [r7, #32]
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 ff11 	bl	800a6a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00d      	beq.n	80098a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	2b04      	cmp	r3, #4
 800988e:	d107      	bne.n	80098a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800989e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e01a      	b.n	80098da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d194      	bne.n	80097d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2220      	movs	r2, #32
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	e000      	b.n	80098da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098d8:	2302      	movs	r3, #2
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	00100002 	.word	0x00100002
 80098e8:	ffff0000 	.word	0xffff0000

080098ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	4608      	mov	r0, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	4603      	mov	r3, r0
 80098fc:	817b      	strh	r3, [r7, #10]
 80098fe:	460b      	mov	r3, r1
 8009900:	813b      	strh	r3, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009906:	f7fe ff5d 	bl	80087c4 <HAL_GetTick>
 800990a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b20      	cmp	r3, #32
 8009916:	f040 80d9 	bne.w	8009acc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	2319      	movs	r3, #25
 8009920:	2201      	movs	r2, #1
 8009922:	496d      	ldr	r1, [pc, #436]	; (8009ad8 <HAL_I2C_Mem_Write+0x1ec>)
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fd5b 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009930:	2302      	movs	r3, #2
 8009932:	e0cc      	b.n	8009ace <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_I2C_Mem_Write+0x56>
 800993e:	2302      	movs	r3, #2
 8009940:	e0c5      	b.n	8009ace <HAL_I2C_Mem_Write+0x1e2>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b01      	cmp	r3, #1
 8009956:	d007      	beq.n	8009968 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 0201 	orr.w	r2, r2, #1
 8009966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2221      	movs	r2, #33	; 0x21
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2240      	movs	r2, #64	; 0x40
 8009984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a3a      	ldr	r2, [r7, #32]
 8009992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800999e:	b29a      	uxth	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a4d      	ldr	r2, [pc, #308]	; (8009adc <HAL_I2C_Mem_Write+0x1f0>)
 80099a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099aa:	88f8      	ldrh	r0, [r7, #6]
 80099ac:	893a      	ldrh	r2, [r7, #8]
 80099ae:	8979      	ldrh	r1, [r7, #10]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	4603      	mov	r3, r0
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fb92 	bl	800a0e4 <I2C_RequestMemoryWrite>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d052      	beq.n	8009a6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e081      	b.n	8009ace <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fe20 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d107      	bne.n	80099f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e06b      	b.n	8009ace <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	781a      	ldrb	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d11b      	bne.n	8009a6c <HAL_I2C_Mem_Write+0x180>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d017      	beq.n	8009a6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a56:	3b01      	subs	r3, #1
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1aa      	bne.n	80099ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 fe13 	bl	800a6a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00d      	beq.n	8009aa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d107      	bne.n	8009a9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e016      	b.n	8009ace <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2220      	movs	r2, #32
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e000      	b.n	8009ace <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009acc:	2302      	movs	r3, #2
  }
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	00100002 	.word	0x00100002
 8009adc:	ffff0000 	.word	0xffff0000

08009ae0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08c      	sub	sp, #48	; 0x30
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	4608      	mov	r0, r1
 8009aea:	4611      	mov	r1, r2
 8009aec:	461a      	mov	r2, r3
 8009aee:	4603      	mov	r3, r0
 8009af0:	817b      	strh	r3, [r7, #10]
 8009af2:	460b      	mov	r3, r1
 8009af4:	813b      	strh	r3, [r7, #8]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009afe:	f7fe fe61 	bl	80087c4 <HAL_GetTick>
 8009b02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	f040 8244 	bne.w	8009f9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	2319      	movs	r3, #25
 8009b18:	2201      	movs	r2, #1
 8009b1a:	4982      	ldr	r1, [pc, #520]	; (8009d24 <HAL_I2C_Mem_Read+0x244>)
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 fc5f 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	e237      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d101      	bne.n	8009b3a <HAL_I2C_Mem_Read+0x5a>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e230      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d007      	beq.n	8009b60 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 0201 	orr.w	r2, r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2222      	movs	r2, #34	; 0x22
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2240      	movs	r2, #64	; 0x40
 8009b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4a62      	ldr	r2, [pc, #392]	; (8009d28 <HAL_I2C_Mem_Read+0x248>)
 8009ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ba2:	88f8      	ldrh	r0, [r7, #6]
 8009ba4:	893a      	ldrh	r2, [r7, #8]
 8009ba6:	8979      	ldrh	r1, [r7, #10]
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fb2c 	bl	800a210 <I2C_RequestMemoryRead>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e1ec      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d113      	bne.n	8009bf2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61fb      	str	r3, [r7, #28]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	e1c0      	b.n	8009f74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d11e      	bne.n	8009c38 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c0a:	b672      	cpsid	i
}
 8009c0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61bb      	str	r3, [r7, #24]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c34:	b662      	cpsie	i
}
 8009c36:	e035      	b.n	8009ca4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d11e      	bne.n	8009c7e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c50:	b672      	cpsid	i
}
 8009c52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	617b      	str	r3, [r7, #20]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c7a:	b662      	cpsie	i
}
 8009c7c:	e012      	b.n	8009ca4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c8c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	613b      	str	r3, [r7, #16]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009ca4:	e166      	b.n	8009f74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	f200 811f 	bhi.w	8009eee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d123      	bne.n	8009d00 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 fd39 	bl	800a734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e167      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691a      	ldr	r2, [r3, #16]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cfe:	e139      	b.n	8009f74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d152      	bne.n	8009dae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4906      	ldr	r1, [pc, #24]	; (8009d2c <HAL_I2C_Mem_Read+0x24c>)
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fb64 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d008      	beq.n	8009d30 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e13c      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
 8009d22:	bf00      	nop
 8009d24:	00100002 	.word	0x00100002
 8009d28:	ffff0000 	.word	0xffff0000
 8009d2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d30:	b672      	cpsid	i
}
 8009d32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691a      	ldr	r2, [r3, #16]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d60:	3b01      	subs	r3, #1
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d76:	b662      	cpsie	i
}
 8009d78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	691a      	ldr	r2, [r3, #16]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d96:	3b01      	subs	r3, #1
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	3b01      	subs	r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dac:	e0e2      	b.n	8009f74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	2200      	movs	r2, #0
 8009db6:	497b      	ldr	r1, [pc, #492]	; (8009fa4 <HAL_I2C_Mem_Read+0x4c4>)
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fb11 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e0e9      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dd8:	b672      	cpsid	i
}
 8009dda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691a      	ldr	r2, [r3, #16]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	b2d2      	uxtb	r2, r2
 8009de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e0e:	4b66      	ldr	r3, [pc, #408]	; (8009fa8 <HAL_I2C_Mem_Read+0x4c8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	08db      	lsrs	r3, r3, #3
 8009e14:	4a65      	ldr	r2, [pc, #404]	; (8009fac <HAL_I2C_Mem_Read+0x4cc>)
 8009e16:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1a:	0a1a      	lsrs	r2, r3, #8
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	00da      	lsls	r2, r3, #3
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d118      	bne.n	8009e66 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	f043 0220 	orr.w	r2, r3, #32
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e56:	b662      	cpsie	i
}
 8009e58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e09a      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d1d9      	bne.n	8009e28 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009eb6:	b662      	cpsie	i
}
 8009eb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009eec:	e042      	b.n	8009f74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 fc1e 	bl	800a734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e04c      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691a      	ldr	r2, [r3, #16]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d118      	bne.n	8009f74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	b2d2      	uxtb	r2, r2
 8009f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f47f ae94 	bne.w	8009ca6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f9a:	2302      	movs	r3, #2
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3728      	adds	r7, #40	; 0x28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	00010004 	.word	0x00010004
 8009fa8:	200000a8 	.word	0x200000a8
 8009fac:	14f8b589 	.word	0x14f8b589

08009fb0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fbe:	b2db      	uxtb	r3, r3
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bc80      	pop	{r7}
 8009fc8:	4770      	bx	lr

08009fca <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bc80      	pop	{r7}
 8009fde:	4770      	bx	lr

08009fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	460b      	mov	r3, r1
 8009fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d006      	beq.n	800a00a <I2C_MasterRequestWrite+0x2a>
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d003      	beq.n	800a00a <I2C_MasterRequestWrite+0x2a>
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a008:	d108      	bne.n	800a01c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e00b      	b.n	800a034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a020:	2b12      	cmp	r3, #18
 800a022:	d107      	bne.n	800a034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f9cd 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00d      	beq.n	800a068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05a:	d103      	bne.n	800a064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e035      	b.n	800a0d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a070:	d108      	bne.n	800a084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a072:	897b      	ldrh	r3, [r7, #10]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	461a      	mov	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a080:	611a      	str	r2, [r3, #16]
 800a082:	e01b      	b.n	800a0bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a084:	897b      	ldrh	r3, [r7, #10]
 800a086:	11db      	asrs	r3, r3, #7
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	f003 0306 	and.w	r3, r3, #6
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f063 030f 	orn	r3, r3, #15
 800a094:	b2da      	uxtb	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	490e      	ldr	r1, [pc, #56]	; (800a0dc <I2C_MasterRequestWrite+0xfc>)
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 fa16 	bl	800a4d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e010      	b.n	800a0d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0b2:	897b      	ldrh	r3, [r7, #10]
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	4907      	ldr	r1, [pc, #28]	; (800a0e0 <I2C_MasterRequestWrite+0x100>)
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 fa06 	bl	800a4d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e000      	b.n	800a0d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	00010008 	.word	0x00010008
 800a0e0:	00010002 	.word	0x00010002

0800a0e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	817b      	strh	r3, [r7, #10]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	813b      	strh	r3, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a10c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	2200      	movs	r2, #0
 800a116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 f960 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a134:	d103      	bne.n	800a13e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a13c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e05f      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a142:	897b      	ldrh	r3, [r7, #10]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	461a      	mov	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	492d      	ldr	r1, [pc, #180]	; (800a20c <I2C_RequestMemoryWrite+0x128>)
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f9bb 	bl	800a4d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e04c      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a180:	6a39      	ldr	r1, [r7, #32]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fa46 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00d      	beq.n	800a1aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	2b04      	cmp	r3, #4
 800a194:	d107      	bne.n	800a1a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e02b      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d105      	bne.n	800a1bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b0:	893b      	ldrh	r3, [r7, #8]
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	611a      	str	r2, [r3, #16]
 800a1ba:	e021      	b.n	800a200 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1cc:	6a39      	ldr	r1, [r7, #32]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fa20 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d107      	bne.n	800a1f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e005      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1f6:	893b      	ldrh	r3, [r7, #8]
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	00010002 	.word	0x00010002

0800a210 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af02      	add	r7, sp, #8
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	4608      	mov	r0, r1
 800a21a:	4611      	mov	r1, r2
 800a21c:	461a      	mov	r2, r3
 800a21e:	4603      	mov	r3, r0
 800a220:	817b      	strh	r3, [r7, #10]
 800a222:	460b      	mov	r3, r1
 800a224:	813b      	strh	r3, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a238:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	2200      	movs	r2, #0
 800a252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 f8c2 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00d      	beq.n	800a27e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a270:	d103      	bne.n	800a27a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e0aa      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a27e:	897b      	ldrh	r3, [r7, #10]
 800a280:	b2db      	uxtb	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a28c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	6a3a      	ldr	r2, [r7, #32]
 800a292:	4952      	ldr	r1, [pc, #328]	; (800a3dc <I2C_RequestMemoryRead+0x1cc>)
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 f91d 	bl	800a4d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e097      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2bc:	6a39      	ldr	r1, [r7, #32]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f9a8 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00d      	beq.n	800a2e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d107      	bne.n	800a2e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e076      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d105      	bne.n	800a2f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2ec:	893b      	ldrh	r3, [r7, #8]
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	611a      	str	r2, [r3, #16]
 800a2f6:	e021      	b.n	800a33c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2f8:	893b      	ldrh	r3, [r7, #8]
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a308:	6a39      	ldr	r1, [r7, #32]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f982 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d107      	bne.n	800a32e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a32c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e050      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a332:	893b      	ldrh	r3, [r7, #8]
 800a334:	b2da      	uxtb	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	6a39      	ldr	r1, [r7, #32]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f967 	bl	800a614 <I2C_WaitOnTXEFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	2b04      	cmp	r3, #4
 800a352:	d107      	bne.n	800a364 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a362:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e035      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a376:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	2200      	movs	r2, #0
 800a380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f82b 	bl	800a3e0 <I2C_WaitOnFlagUntilTimeout>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00d      	beq.n	800a3ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39e:	d103      	bne.n	800a3a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e013      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3ac:	897b      	ldrh	r3, [r7, #10]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f043 0301 	orr.w	r3, r3, #1
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	6a3a      	ldr	r2, [r7, #32]
 800a3c0:	4906      	ldr	r1, [pc, #24]	; (800a3dc <I2C_RequestMemoryRead+0x1cc>)
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 f886 	bl	800a4d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	00010002 	.word	0x00010002

0800a3e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3f0:	e048      	b.n	800a484 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3f8:	d044      	beq.n	800a484 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3fa:	f7fe f9e3 	bl	80087c4 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d139      	bne.n	800a484 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	0c1b      	lsrs	r3, r3, #16
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b01      	cmp	r3, #1
 800a418:	d10d      	bne.n	800a436 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	43da      	mvns	r2, r3
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4013      	ands	r3, r2
 800a426:	b29b      	uxth	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bf0c      	ite	eq
 800a42c:	2301      	moveq	r3, #1
 800a42e:	2300      	movne	r3, #0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	e00c      	b.n	800a450 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	43da      	mvns	r2, r3
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	4013      	ands	r3, r2
 800a442:	b29b      	uxth	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	bf0c      	ite	eq
 800a448:	2301      	moveq	r3, #1
 800a44a:	2300      	movne	r3, #0
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	461a      	mov	r2, r3
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	429a      	cmp	r2, r3
 800a454:	d116      	bne.n	800a484 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a470:	f043 0220 	orr.w	r2, r3, #32
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e023      	b.n	800a4cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	0c1b      	lsrs	r3, r3, #16
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d10d      	bne.n	800a4aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	43da      	mvns	r2, r3
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	4013      	ands	r3, r2
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bf0c      	ite	eq
 800a4a0:	2301      	moveq	r3, #1
 800a4a2:	2300      	movne	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	e00c      	b.n	800a4c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	43da      	mvns	r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bf0c      	ite	eq
 800a4bc:	2301      	moveq	r3, #1
 800a4be:	2300      	movne	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	79fb      	ldrb	r3, [r7, #7]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d093      	beq.n	800a3f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4e2:	e071      	b.n	800a5c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f2:	d123      	bne.n	800a53c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a502:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a50c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2220      	movs	r2, #32
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	f043 0204 	orr.w	r2, r3, #4
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e067      	b.n	800a60c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a542:	d041      	beq.n	800a5c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a544:	f7fe f93e 	bl	80087c4 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d302      	bcc.n	800a55a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d136      	bne.n	800a5c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	0c1b      	lsrs	r3, r3, #16
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	d10c      	bne.n	800a57e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	43da      	mvns	r2, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4013      	ands	r3, r2
 800a570:	b29b      	uxth	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	bf14      	ite	ne
 800a576:	2301      	movne	r3, #1
 800a578:	2300      	moveq	r3, #0
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	e00b      	b.n	800a596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	43da      	mvns	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	4013      	ands	r3, r2
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bf14      	ite	ne
 800a590:	2301      	movne	r3, #1
 800a592:	2300      	moveq	r3, #0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d016      	beq.n	800a5c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	f043 0220 	orr.w	r2, r3, #32
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e021      	b.n	800a60c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	0c1b      	lsrs	r3, r3, #16
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d10c      	bne.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	43da      	mvns	r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bf14      	ite	ne
 800a5e4:	2301      	movne	r3, #1
 800a5e6:	2300      	moveq	r3, #0
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	e00b      	b.n	800a604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	43da      	mvns	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	bf14      	ite	ne
 800a5fe:	2301      	movne	r3, #1
 800a600:	2300      	moveq	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f af6d 	bne.w	800a4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a620:	e034      	b.n	800a68c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f8e3 	bl	800a7ee <I2C_IsAcknowledgeFailed>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e034      	b.n	800a69c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a638:	d028      	beq.n	800a68c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a63a:	f7fe f8c3 	bl	80087c4 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	429a      	cmp	r2, r3
 800a648:	d302      	bcc.n	800a650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d11d      	bne.n	800a68c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65a:	2b80      	cmp	r3, #128	; 0x80
 800a65c:	d016      	beq.n	800a68c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2220      	movs	r2, #32
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a678:	f043 0220 	orr.w	r2, r3, #32
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e007      	b.n	800a69c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a696:	2b80      	cmp	r3, #128	; 0x80
 800a698:	d1c3      	bne.n	800a622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6b0:	e034      	b.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f89b 	bl	800a7ee <I2C_IsAcknowledgeFailed>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e034      	b.n	800a72c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c8:	d028      	beq.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ca:	f7fe f87b 	bl	80087c4 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d302      	bcc.n	800a6e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d11d      	bne.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d016      	beq.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	f043 0220 	orr.w	r2, r3, #32
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e007      	b.n	800a72c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	f003 0304 	and.w	r3, r3, #4
 800a726:	2b04      	cmp	r3, #4
 800a728:	d1c3      	bne.n	800a6b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a740:	e049      	b.n	800a7d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	2b10      	cmp	r3, #16
 800a74e:	d119      	bne.n	800a784 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0210 	mvn.w	r2, #16
 800a758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e030      	b.n	800a7e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a784:	f7fe f81e 	bl	80087c4 <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	429a      	cmp	r2, r3
 800a792:	d302      	bcc.n	800a79a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d11d      	bne.n	800a7d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d016      	beq.n	800a7d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	f043 0220 	orr.w	r2, r3, #32
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e007      	b.n	800a7e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e0:	2b40      	cmp	r3, #64	; 0x40
 800a7e2:	d1ae      	bne.n	800a742 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a804:	d11b      	bne.n	800a83e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a80e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	f043 0204 	orr.w	r2, r3, #4
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
	...

0800a84c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e272      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 8087 	beq.w	800a97a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a86c:	4b92      	ldr	r3, [pc, #584]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f003 030c 	and.w	r3, r3, #12
 800a874:	2b04      	cmp	r3, #4
 800a876:	d00c      	beq.n	800a892 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a878:	4b8f      	ldr	r3, [pc, #572]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f003 030c 	and.w	r3, r3, #12
 800a880:	2b08      	cmp	r3, #8
 800a882:	d112      	bne.n	800a8aa <HAL_RCC_OscConfig+0x5e>
 800a884:	4b8c      	ldr	r3, [pc, #560]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a890:	d10b      	bne.n	800a8aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a892:	4b89      	ldr	r3, [pc, #548]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d06c      	beq.n	800a978 <HAL_RCC_OscConfig+0x12c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d168      	bne.n	800a978 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e24c      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b2:	d106      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x76>
 800a8b4:	4b80      	ldr	r3, [pc, #512]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a7f      	ldr	r2, [pc, #508]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	e02e      	b.n	800a920 <HAL_RCC_OscConfig+0xd4>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10c      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x98>
 800a8ca:	4b7b      	ldr	r3, [pc, #492]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a7a      	ldr	r2, [pc, #488]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4b78      	ldr	r3, [pc, #480]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a77      	ldr	r2, [pc, #476]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	e01d      	b.n	800a920 <HAL_RCC_OscConfig+0xd4>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8ec:	d10c      	bne.n	800a908 <HAL_RCC_OscConfig+0xbc>
 800a8ee:	4b72      	ldr	r3, [pc, #456]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a71      	ldr	r2, [pc, #452]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	4b6f      	ldr	r3, [pc, #444]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a6e      	ldr	r2, [pc, #440]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	e00b      	b.n	800a920 <HAL_RCC_OscConfig+0xd4>
 800a908:	4b6b      	ldr	r3, [pc, #428]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a6a      	ldr	r2, [pc, #424]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a90e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	4b68      	ldr	r3, [pc, #416]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a67      	ldr	r2, [pc, #412]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a91a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a91e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d013      	beq.n	800a950 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a928:	f7fd ff4c 	bl	80087c4 <HAL_GetTick>
 800a92c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92e:	e008      	b.n	800a942 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a930:	f7fd ff48 	bl	80087c4 <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b64      	cmp	r3, #100	; 0x64
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e200      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a942:	4b5d      	ldr	r3, [pc, #372]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0f0      	beq.n	800a930 <HAL_RCC_OscConfig+0xe4>
 800a94e:	e014      	b.n	800a97a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a950:	f7fd ff38 	bl	80087c4 <HAL_GetTick>
 800a954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a956:	e008      	b.n	800a96a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a958:	f7fd ff34 	bl	80087c4 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	2b64      	cmp	r3, #100	; 0x64
 800a964:	d901      	bls.n	800a96a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e1ec      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a96a:	4b53      	ldr	r3, [pc, #332]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1f0      	bne.n	800a958 <HAL_RCC_OscConfig+0x10c>
 800a976:	e000      	b.n	800a97a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d063      	beq.n	800aa4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a986:	4b4c      	ldr	r3, [pc, #304]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f003 030c 	and.w	r3, r3, #12
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a992:	4b49      	ldr	r3, [pc, #292]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f003 030c 	and.w	r3, r3, #12
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d11c      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x18c>
 800a99e:	4b46      	ldr	r3, [pc, #280]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d116      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9aa:	4b43      	ldr	r3, [pc, #268]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d005      	beq.n	800a9c2 <HAL_RCC_OscConfig+0x176>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d001      	beq.n	800a9c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e1c0      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9c2:	4b3d      	ldr	r3, [pc, #244]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	4939      	ldr	r1, [pc, #228]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9d6:	e03a      	b.n	800aa4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d020      	beq.n	800aa22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9e0:	4b36      	ldr	r3, [pc, #216]	; (800aabc <HAL_RCC_OscConfig+0x270>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9e6:	f7fd feed 	bl	80087c4 <HAL_GetTick>
 800a9ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9ec:	e008      	b.n	800aa00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9ee:	f7fd fee9 	bl	80087c4 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d901      	bls.n	800aa00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e1a1      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa00:	4b2d      	ldr	r3, [pc, #180]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0302 	and.w	r3, r3, #2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0f0      	beq.n	800a9ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa0c:	4b2a      	ldr	r3, [pc, #168]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	4927      	ldr	r1, [pc, #156]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	600b      	str	r3, [r1, #0]
 800aa20:	e015      	b.n	800aa4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa22:	4b26      	ldr	r3, [pc, #152]	; (800aabc <HAL_RCC_OscConfig+0x270>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa28:	f7fd fecc 	bl	80087c4 <HAL_GetTick>
 800aa2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2e:	e008      	b.n	800aa42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa30:	f7fd fec8 	bl	80087c4 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e180      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa42:	4b1d      	ldr	r3, [pc, #116]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f0      	bne.n	800aa30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0308 	and.w	r3, r3, #8
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d03a      	beq.n	800aad0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d019      	beq.n	800aa96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <HAL_RCC_OscConfig+0x274>)
 800aa64:	2201      	movs	r2, #1
 800aa66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa68:	f7fd feac 	bl	80087c4 <HAL_GetTick>
 800aa6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa70:	f7fd fea8 	bl	80087c4 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e160      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa82:	4b0d      	ldr	r3, [pc, #52]	; (800aab8 <HAL_RCC_OscConfig+0x26c>)
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f0      	beq.n	800aa70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa8e:	2001      	movs	r0, #1
 800aa90:	f000 face 	bl	800b030 <RCC_Delay>
 800aa94:	e01c      	b.n	800aad0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa96:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <HAL_RCC_OscConfig+0x274>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9c:	f7fd fe92 	bl	80087c4 <HAL_GetTick>
 800aaa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaa2:	e00f      	b.n	800aac4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaa4:	f7fd fe8e 	bl	80087c4 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d908      	bls.n	800aac4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e146      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
 800aab6:	bf00      	nop
 800aab8:	40021000 	.word	0x40021000
 800aabc:	42420000 	.word	0x42420000
 800aac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aac4:	4b92      	ldr	r3, [pc, #584]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e9      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80a6 	beq.w	800ac2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aae2:	4b8b      	ldr	r3, [pc, #556]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10d      	bne.n	800ab0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaee:	4b88      	ldr	r3, [pc, #544]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	4a87      	ldr	r2, [pc, #540]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aaf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaf8:	61d3      	str	r3, [r2, #28]
 800aafa:	4b85      	ldr	r3, [pc, #532]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab02:	60bb      	str	r3, [r7, #8]
 800ab04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab06:	2301      	movs	r3, #1
 800ab08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab0a:	4b82      	ldr	r3, [pc, #520]	; (800ad14 <HAL_RCC_OscConfig+0x4c8>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d118      	bne.n	800ab48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab16:	4b7f      	ldr	r3, [pc, #508]	; (800ad14 <HAL_RCC_OscConfig+0x4c8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a7e      	ldr	r2, [pc, #504]	; (800ad14 <HAL_RCC_OscConfig+0x4c8>)
 800ab1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab22:	f7fd fe4f 	bl	80087c4 <HAL_GetTick>
 800ab26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab28:	e008      	b.n	800ab3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab2a:	f7fd fe4b 	bl	80087c4 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	2b64      	cmp	r3, #100	; 0x64
 800ab36:	d901      	bls.n	800ab3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e103      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab3c:	4b75      	ldr	r3, [pc, #468]	; (800ad14 <HAL_RCC_OscConfig+0x4c8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0f0      	beq.n	800ab2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d106      	bne.n	800ab5e <HAL_RCC_OscConfig+0x312>
 800ab50:	4b6f      	ldr	r3, [pc, #444]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	4a6e      	ldr	r2, [pc, #440]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	6213      	str	r3, [r2, #32]
 800ab5c:	e02d      	b.n	800abba <HAL_RCC_OscConfig+0x36e>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10c      	bne.n	800ab80 <HAL_RCC_OscConfig+0x334>
 800ab66:	4b6a      	ldr	r3, [pc, #424]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	4a69      	ldr	r2, [pc, #420]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab6c:	f023 0301 	bic.w	r3, r3, #1
 800ab70:	6213      	str	r3, [r2, #32]
 800ab72:	4b67      	ldr	r3, [pc, #412]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	4a66      	ldr	r2, [pc, #408]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab78:	f023 0304 	bic.w	r3, r3, #4
 800ab7c:	6213      	str	r3, [r2, #32]
 800ab7e:	e01c      	b.n	800abba <HAL_RCC_OscConfig+0x36e>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	2b05      	cmp	r3, #5
 800ab86:	d10c      	bne.n	800aba2 <HAL_RCC_OscConfig+0x356>
 800ab88:	4b61      	ldr	r3, [pc, #388]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	4a60      	ldr	r2, [pc, #384]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab8e:	f043 0304 	orr.w	r3, r3, #4
 800ab92:	6213      	str	r3, [r2, #32]
 800ab94:	4b5e      	ldr	r3, [pc, #376]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	4a5d      	ldr	r2, [pc, #372]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ab9a:	f043 0301 	orr.w	r3, r3, #1
 800ab9e:	6213      	str	r3, [r2, #32]
 800aba0:	e00b      	b.n	800abba <HAL_RCC_OscConfig+0x36e>
 800aba2:	4b5b      	ldr	r3, [pc, #364]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	4a5a      	ldr	r2, [pc, #360]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	6213      	str	r3, [r2, #32]
 800abae:	4b58      	ldr	r3, [pc, #352]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	4a57      	ldr	r2, [pc, #348]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800abb4:	f023 0304 	bic.w	r3, r3, #4
 800abb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d015      	beq.n	800abee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abc2:	f7fd fdff 	bl	80087c4 <HAL_GetTick>
 800abc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc8:	e00a      	b.n	800abe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abca:	f7fd fdfb 	bl	80087c4 <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd8:	4293      	cmp	r3, r2
 800abda:	d901      	bls.n	800abe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e0b1      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abe0:	4b4b      	ldr	r3, [pc, #300]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0ee      	beq.n	800abca <HAL_RCC_OscConfig+0x37e>
 800abec:	e014      	b.n	800ac18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abee:	f7fd fde9 	bl	80087c4 <HAL_GetTick>
 800abf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abf4:	e00a      	b.n	800ac0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf6:	f7fd fde5 	bl	80087c4 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d901      	bls.n	800ac0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e09b      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac0c:	4b40      	ldr	r3, [pc, #256]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1ee      	bne.n	800abf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d105      	bne.n	800ac2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac1e:	4b3c      	ldr	r3, [pc, #240]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	4a3b      	ldr	r2, [pc, #236]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 8087 	beq.w	800ad42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac34:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f003 030c 	and.w	r3, r3, #12
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d061      	beq.n	800ad04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d146      	bne.n	800acd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac48:	4b33      	ldr	r3, [pc, #204]	; (800ad18 <HAL_RCC_OscConfig+0x4cc>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac4e:	f7fd fdb9 	bl	80087c4 <HAL_GetTick>
 800ac52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac54:	e008      	b.n	800ac68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac56:	f7fd fdb5 	bl	80087c4 <HAL_GetTick>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d901      	bls.n	800ac68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e06d      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac68:	4b29      	ldr	r3, [pc, #164]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1f0      	bne.n	800ac56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7c:	d108      	bne.n	800ac90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac7e:	4b24      	ldr	r3, [pc, #144]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	4921      	ldr	r1, [pc, #132]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac90:	4b1f      	ldr	r3, [pc, #124]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a19      	ldr	r1, [r3, #32]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	430b      	orrs	r3, r1
 800aca2:	491b      	ldr	r1, [pc, #108]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aca8:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <HAL_RCC_OscConfig+0x4cc>)
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acae:	f7fd fd89 	bl	80087c4 <HAL_GetTick>
 800acb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acb4:	e008      	b.n	800acc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acb6:	f7fd fd85 	bl	80087c4 <HAL_GetTick>
 800acba:	4602      	mov	r2, r0
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d901      	bls.n	800acc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acc4:	2303      	movs	r3, #3
 800acc6:	e03d      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acc8:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0f0      	beq.n	800acb6 <HAL_RCC_OscConfig+0x46a>
 800acd4:	e035      	b.n	800ad42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <HAL_RCC_OscConfig+0x4cc>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acdc:	f7fd fd72 	bl	80087c4 <HAL_GetTick>
 800ace0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ace2:	e008      	b.n	800acf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ace4:	f7fd fd6e 	bl	80087c4 <HAL_GetTick>
 800ace8:	4602      	mov	r2, r0
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d901      	bls.n	800acf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e026      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <HAL_RCC_OscConfig+0x4c4>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1f0      	bne.n	800ace4 <HAL_RCC_OscConfig+0x498>
 800ad02:	e01e      	b.n	800ad42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d107      	bne.n	800ad1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e019      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
 800ad10:	40021000 	.word	0x40021000
 800ad14:	40007000 	.word	0x40007000
 800ad18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad1c:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <HAL_RCC_OscConfig+0x500>)
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d106      	bne.n	800ad3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d001      	beq.n	800ad42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e000      	b.n	800ad44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	40021000 	.word	0x40021000

0800ad50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e0d0      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad64:	4b6a      	ldr	r3, [pc, #424]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d910      	bls.n	800ad94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad72:	4b67      	ldr	r3, [pc, #412]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f023 0207 	bic.w	r2, r3, #7
 800ad7a:	4965      	ldr	r1, [pc, #404]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad82:	4b63      	ldr	r3, [pc, #396]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d001      	beq.n	800ad94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e0b8      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d020      	beq.n	800ade2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0304 	and.w	r3, r3, #4
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adac:	4b59      	ldr	r3, [pc, #356]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4a58      	ldr	r2, [pc, #352]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800adb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800adb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0308 	and.w	r3, r3, #8
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adc4:	4b53      	ldr	r3, [pc, #332]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4a52      	ldr	r2, [pc, #328]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800adca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800adce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800add0:	4b50      	ldr	r3, [pc, #320]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	494d      	ldr	r1, [pc, #308]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d040      	beq.n	800ae70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d107      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adf6:	4b47      	ldr	r3, [pc, #284]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d115      	bne.n	800ae2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e07f      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d107      	bne.n	800ae1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae0e:	4b41      	ldr	r3, [pc, #260]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e073      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae1e:	4b3d      	ldr	r3, [pc, #244]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0302 	and.w	r3, r3, #2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e06b      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae2e:	4b39      	ldr	r3, [pc, #228]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f023 0203 	bic.w	r2, r3, #3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	4936      	ldr	r1, [pc, #216]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae40:	f7fd fcc0 	bl	80087c4 <HAL_GetTick>
 800ae44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae46:	e00a      	b.n	800ae5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae48:	f7fd fcbc 	bl	80087c4 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d901      	bls.n	800ae5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e053      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae5e:	4b2d      	ldr	r3, [pc, #180]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f003 020c 	and.w	r2, r3, #12
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d1eb      	bne.n	800ae48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae70:	4b27      	ldr	r3, [pc, #156]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0307 	and.w	r3, r3, #7
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d210      	bcs.n	800aea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae7e:	4b24      	ldr	r3, [pc, #144]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f023 0207 	bic.w	r2, r3, #7
 800ae86:	4922      	ldr	r1, [pc, #136]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae8e:	4b20      	ldr	r3, [pc, #128]	; (800af10 <HAL_RCC_ClockConfig+0x1c0>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d001      	beq.n	800aea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e032      	b.n	800af06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d008      	beq.n	800aebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aeac:	4b19      	ldr	r3, [pc, #100]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	4916      	ldr	r1, [pc, #88]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0308 	and.w	r3, r3, #8
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d009      	beq.n	800aede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aeca:	4b12      	ldr	r3, [pc, #72]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	490e      	ldr	r1, [pc, #56]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aede:	f000 f821 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800aee2:	4602      	mov	r2, r0
 800aee4:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <HAL_RCC_ClockConfig+0x1c4>)
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	091b      	lsrs	r3, r3, #4
 800aeea:	f003 030f 	and.w	r3, r3, #15
 800aeee:	490a      	ldr	r1, [pc, #40]	; (800af18 <HAL_RCC_ClockConfig+0x1c8>)
 800aef0:	5ccb      	ldrb	r3, [r1, r3]
 800aef2:	fa22 f303 	lsr.w	r3, r2, r3
 800aef6:	4a09      	ldr	r2, [pc, #36]	; (800af1c <HAL_RCC_ClockConfig+0x1cc>)
 800aef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aefa:	4b09      	ldr	r3, [pc, #36]	; (800af20 <HAL_RCC_ClockConfig+0x1d0>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fd fc1e 	bl	8008740 <HAL_InitTick>

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	40022000 	.word	0x40022000
 800af14:	40021000 	.word	0x40021000
 800af18:	0800dd00 	.word	0x0800dd00
 800af1c:	200000a8 	.word	0x200000a8
 800af20:	200000ac 	.word	0x200000ac

0800af24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af3e:	4b1e      	ldr	r3, [pc, #120]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x94>)
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f003 030c 	and.w	r3, r3, #12
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d002      	beq.n	800af54 <HAL_RCC_GetSysClockFreq+0x30>
 800af4e:	2b08      	cmp	r3, #8
 800af50:	d003      	beq.n	800af5a <HAL_RCC_GetSysClockFreq+0x36>
 800af52:	e027      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af54:	4b19      	ldr	r3, [pc, #100]	; (800afbc <HAL_RCC_GetSysClockFreq+0x98>)
 800af56:	613b      	str	r3, [r7, #16]
      break;
 800af58:	e027      	b.n	800afaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	0c9b      	lsrs	r3, r3, #18
 800af5e:	f003 030f 	and.w	r3, r3, #15
 800af62:	4a17      	ldr	r2, [pc, #92]	; (800afc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af64:	5cd3      	ldrb	r3, [r2, r3]
 800af66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d010      	beq.n	800af94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af72:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x94>)
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	0c5b      	lsrs	r3, r3, #17
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	4a11      	ldr	r2, [pc, #68]	; (800afc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af7e:	5cd3      	ldrb	r3, [r2, r3]
 800af80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <HAL_RCC_GetSysClockFreq+0x98>)
 800af86:	fb03 f202 	mul.w	r2, r3, r2
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af90:	617b      	str	r3, [r7, #20]
 800af92:	e004      	b.n	800af9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a0c      	ldr	r2, [pc, #48]	; (800afc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af98:	fb02 f303 	mul.w	r3, r2, r3
 800af9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	613b      	str	r3, [r7, #16]
      break;
 800afa2:	e002      	b.n	800afaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800afa4:	4b05      	ldr	r3, [pc, #20]	; (800afbc <HAL_RCC_GetSysClockFreq+0x98>)
 800afa6:	613b      	str	r3, [r7, #16]
      break;
 800afa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afaa:	693b      	ldr	r3, [r7, #16]
}
 800afac:	4618      	mov	r0, r3
 800afae:	371c      	adds	r7, #28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bc80      	pop	{r7}
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	40021000 	.word	0x40021000
 800afbc:	007a1200 	.word	0x007a1200
 800afc0:	0800dd18 	.word	0x0800dd18
 800afc4:	0800dd28 	.word	0x0800dd28
 800afc8:	003d0900 	.word	0x003d0900

0800afcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <HAL_RCC_GetHCLKFreq+0x10>)
 800afd2:	681b      	ldr	r3, [r3, #0]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bc80      	pop	{r7}
 800afda:	4770      	bx	lr
 800afdc:	200000a8 	.word	0x200000a8

0800afe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800afe4:	f7ff fff2 	bl	800afcc <HAL_RCC_GetHCLKFreq>
 800afe8:	4602      	mov	r2, r0
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	0a1b      	lsrs	r3, r3, #8
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	4903      	ldr	r1, [pc, #12]	; (800b004 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aff6:	5ccb      	ldrb	r3, [r1, r3]
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800affc:	4618      	mov	r0, r3
 800affe:	bd80      	pop	{r7, pc}
 800b000:	40021000 	.word	0x40021000
 800b004:	0800dd10 	.word	0x0800dd10

0800b008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b00c:	f7ff ffde 	bl	800afcc <HAL_RCC_GetHCLKFreq>
 800b010:	4602      	mov	r2, r0
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	0adb      	lsrs	r3, r3, #11
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	4903      	ldr	r1, [pc, #12]	; (800b02c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b01e:	5ccb      	ldrb	r3, [r1, r3]
 800b020:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b024:	4618      	mov	r0, r3
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40021000 	.word	0x40021000
 800b02c:	0800dd10 	.word	0x0800dd10

0800b030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b038:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <RCC_Delay+0x34>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <RCC_Delay+0x38>)
 800b03e:	fba2 2303 	umull	r2, r3, r2, r3
 800b042:	0a5b      	lsrs	r3, r3, #9
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	fb02 f303 	mul.w	r3, r2, r3
 800b04a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b04c:	bf00      	nop
  }
  while (Delay --);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	1e5a      	subs	r2, r3, #1
 800b052:	60fa      	str	r2, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1f9      	bne.n	800b04c <RCC_Delay+0x1c>
}
 800b058:	bf00      	nop
 800b05a:	bf00      	nop
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	bc80      	pop	{r7}
 800b062:	4770      	bx	lr
 800b064:	200000a8 	.word	0x200000a8
 800b068:	10624dd3 	.word	0x10624dd3

0800b06c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e041      	b.n	800b102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d106      	bne.n	800b098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7fd fa26 	bl	80084e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2202      	movs	r2, #2
 800b09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	f000 fa82 	bl	800b5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d001      	beq.n	800b124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e044      	b.n	800b1ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2202      	movs	r2, #2
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0201 	orr.w	r2, r2, #1
 800b13a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a1d      	ldr	r2, [pc, #116]	; (800b1b8 <HAL_TIM_Base_Start_IT+0xac>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d018      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x6c>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a1c      	ldr	r2, [pc, #112]	; (800b1bc <HAL_TIM_Base_Start_IT+0xb0>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d013      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x6c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b158:	d00e      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x6c>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a18      	ldr	r2, [pc, #96]	; (800b1c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d009      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x6c>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a16      	ldr	r2, [pc, #88]	; (800b1c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d004      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x6c>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d111      	bne.n	800b19c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f003 0307 	and.w	r3, r3, #7
 800b182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b06      	cmp	r3, #6
 800b188:	d010      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f042 0201 	orr.w	r2, r2, #1
 800b198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19a:	e007      	b.n	800b1ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bc80      	pop	{r7}
 800b1b6:	4770      	bx	lr
 800b1b8:	40012c00 	.word	0x40012c00
 800b1bc:	40013400 	.word	0x40013400
 800b1c0:	40000400 	.word	0x40000400
 800b1c4:	40000800 	.word	0x40000800
 800b1c8:	40000c00 	.word	0x40000c00

0800b1cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	f003 0302 	and.w	r3, r3, #2
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d122      	bne.n	800b228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d11b      	bne.n	800b228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f06f 0202 	mvn.w	r2, #2
 800b1f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f9b4 	bl	800b57c <HAL_TIM_IC_CaptureCallback>
 800b214:	e005      	b.n	800b222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f9a7 	bl	800b56a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f9b6 	bl	800b58e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b04      	cmp	r3, #4
 800b234:	d122      	bne.n	800b27c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b04      	cmp	r3, #4
 800b242:	d11b      	bne.n	800b27c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f06f 0204 	mvn.w	r2, #4
 800b24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2202      	movs	r2, #2
 800b252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f98a 	bl	800b57c <HAL_TIM_IC_CaptureCallback>
 800b268:	e005      	b.n	800b276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f97d 	bl	800b56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f98c 	bl	800b58e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	f003 0308 	and.w	r3, r3, #8
 800b286:	2b08      	cmp	r3, #8
 800b288:	d122      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f003 0308 	and.w	r3, r3, #8
 800b294:	2b08      	cmp	r3, #8
 800b296:	d11b      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0208 	mvn.w	r2, #8
 800b2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f003 0303 	and.w	r3, r3, #3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f960 	bl	800b57c <HAL_TIM_IC_CaptureCallback>
 800b2bc:	e005      	b.n	800b2ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f953 	bl	800b56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f962 	bl	800b58e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	f003 0310 	and.w	r3, r3, #16
 800b2da:	2b10      	cmp	r3, #16
 800b2dc:	d122      	bne.n	800b324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f003 0310 	and.w	r3, r3, #16
 800b2e8:	2b10      	cmp	r3, #16
 800b2ea:	d11b      	bne.n	800b324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f06f 0210 	mvn.w	r2, #16
 800b2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2208      	movs	r2, #8
 800b2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	69db      	ldr	r3, [r3, #28]
 800b302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f936 	bl	800b57c <HAL_TIM_IC_CaptureCallback>
 800b310:	e005      	b.n	800b31e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f929 	bl	800b56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f938 	bl	800b58e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d10e      	bne.n	800b350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d107      	bne.n	800b350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f06f 0201 	mvn.w	r2, #1
 800b348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7fc fd2e 	bl	8007dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b35a:	2b80      	cmp	r3, #128	; 0x80
 800b35c:	d10e      	bne.n	800b37c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b368:	2b80      	cmp	r3, #128	; 0x80
 800b36a:	d107      	bne.n	800b37c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 faa1 	bl	800b8be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b386:	2b40      	cmp	r3, #64	; 0x40
 800b388:	d10e      	bne.n	800b3a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b394:	2b40      	cmp	r3, #64	; 0x40
 800b396:	d107      	bne.n	800b3a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f8fc 	bl	800b5a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	f003 0320 	and.w	r3, r3, #32
 800b3b2:	2b20      	cmp	r3, #32
 800b3b4:	d10e      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	f003 0320 	and.w	r3, r3, #32
 800b3c0:	2b20      	cmp	r3, #32
 800b3c2:	d107      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f06f 0220 	mvn.w	r2, #32
 800b3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa6c 	bl	800b8ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3d4:	bf00      	nop
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e0b4      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x186>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b41e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b430:	d03e      	beq.n	800b4b0 <HAL_TIM_ConfigClockSource+0xd4>
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b436:	f200 8087 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43e:	f000 8086 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x172>
 800b442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b446:	d87f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b448:	2b70      	cmp	r3, #112	; 0x70
 800b44a:	d01a      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0xa6>
 800b44c:	2b70      	cmp	r3, #112	; 0x70
 800b44e:	d87b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b450:	2b60      	cmp	r3, #96	; 0x60
 800b452:	d050      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x11a>
 800b454:	2b60      	cmp	r3, #96	; 0x60
 800b456:	d877      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b458:	2b50      	cmp	r3, #80	; 0x50
 800b45a:	d03c      	beq.n	800b4d6 <HAL_TIM_ConfigClockSource+0xfa>
 800b45c:	2b50      	cmp	r3, #80	; 0x50
 800b45e:	d873      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d058      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x13a>
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d86f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b468:	2b30      	cmp	r3, #48	; 0x30
 800b46a:	d064      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b46c:	2b30      	cmp	r3, #48	; 0x30
 800b46e:	d86b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b470:	2b20      	cmp	r3, #32
 800b472:	d060      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b474:	2b20      	cmp	r3, #32
 800b476:	d867      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d05c      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d05a      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b480:	e062      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b492:	f000 f980 	bl	800b796 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	609a      	str	r2, [r3, #8]
      break;
 800b4ae:	e04f      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4c0:	f000 f969 	bl	800b796 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4d2:	609a      	str	r2, [r3, #8]
      break;
 800b4d4:	e03c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f000 f8e0 	bl	800b6a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2150      	movs	r1, #80	; 0x50
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f937 	bl	800b762 <TIM_ITRx_SetConfig>
      break;
 800b4f4:	e02c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b502:	461a      	mov	r2, r3
 800b504:	f000 f8fe 	bl	800b704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2160      	movs	r1, #96	; 0x60
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f927 	bl	800b762 <TIM_ITRx_SetConfig>
      break;
 800b514:	e01c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b522:	461a      	mov	r2, r3
 800b524:	f000 f8c0 	bl	800b6a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2140      	movs	r1, #64	; 0x40
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f917 	bl	800b762 <TIM_ITRx_SetConfig>
      break;
 800b534:	e00c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f000 f90e 	bl	800b762 <TIM_ITRx_SetConfig>
      break;
 800b546:	e003      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
      break;
 800b54c:	e000      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b083      	sub	sp, #12
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b572:	bf00      	nop
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	bc80      	pop	{r7}
 800b57a:	4770      	bx	lr

0800b57c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	bc80      	pop	{r7}
 800b58c:	4770      	bx	lr

0800b58e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b596:	bf00      	nop
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bc80      	pop	{r7}
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr
	...

0800b5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a33      	ldr	r2, [pc, #204]	; (800b694 <TIM_Base_SetConfig+0xe0>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d013      	beq.n	800b5f4 <TIM_Base_SetConfig+0x40>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a32      	ldr	r2, [pc, #200]	; (800b698 <TIM_Base_SetConfig+0xe4>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00f      	beq.n	800b5f4 <TIM_Base_SetConfig+0x40>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5da:	d00b      	beq.n	800b5f4 <TIM_Base_SetConfig+0x40>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a2f      	ldr	r2, [pc, #188]	; (800b69c <TIM_Base_SetConfig+0xe8>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d007      	beq.n	800b5f4 <TIM_Base_SetConfig+0x40>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a2e      	ldr	r2, [pc, #184]	; (800b6a0 <TIM_Base_SetConfig+0xec>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d003      	beq.n	800b5f4 <TIM_Base_SetConfig+0x40>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a2d      	ldr	r2, [pc, #180]	; (800b6a4 <TIM_Base_SetConfig+0xf0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d108      	bne.n	800b606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a22      	ldr	r2, [pc, #136]	; (800b694 <TIM_Base_SetConfig+0xe0>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d013      	beq.n	800b636 <TIM_Base_SetConfig+0x82>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a21      	ldr	r2, [pc, #132]	; (800b698 <TIM_Base_SetConfig+0xe4>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d00f      	beq.n	800b636 <TIM_Base_SetConfig+0x82>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b61c:	d00b      	beq.n	800b636 <TIM_Base_SetConfig+0x82>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a1e      	ldr	r2, [pc, #120]	; (800b69c <TIM_Base_SetConfig+0xe8>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d007      	beq.n	800b636 <TIM_Base_SetConfig+0x82>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a1d      	ldr	r2, [pc, #116]	; (800b6a0 <TIM_Base_SetConfig+0xec>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d003      	beq.n	800b636 <TIM_Base_SetConfig+0x82>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a1c      	ldr	r2, [pc, #112]	; (800b6a4 <TIM_Base_SetConfig+0xf0>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d108      	bne.n	800b648 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b63c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	4313      	orrs	r3, r2
 800b646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	4313      	orrs	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a09      	ldr	r2, [pc, #36]	; (800b694 <TIM_Base_SetConfig+0xe0>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d003      	beq.n	800b67c <TIM_Base_SetConfig+0xc8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a08      	ldr	r2, [pc, #32]	; (800b698 <TIM_Base_SetConfig+0xe4>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d103      	bne.n	800b684 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	691a      	ldr	r2, [r3, #16]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	615a      	str	r2, [r3, #20]
}
 800b68a:	bf00      	nop
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr
 800b694:	40012c00 	.word	0x40012c00
 800b698:	40013400 	.word	0x40013400
 800b69c:	40000400 	.word	0x40000400
 800b6a0:	40000800 	.word	0x40000800
 800b6a4:	40000c00 	.word	0x40000c00

0800b6a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	f023 0201 	bic.w	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f023 030a 	bic.w	r3, r3, #10
 800b6e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	621a      	str	r2, [r3, #32]
}
 800b6fa:	bf00      	nop
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr

0800b704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a1b      	ldr	r3, [r3, #32]
 800b714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	f023 0210 	bic.w	r2, r3, #16
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b72e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	031b      	lsls	r3, r3, #12
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	4313      	orrs	r3, r2
 800b738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	011b      	lsls	r3, r3, #4
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	4313      	orrs	r3, r2
 800b74a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	621a      	str	r2, [r3, #32]
}
 800b758:	bf00      	nop
 800b75a:	371c      	adds	r7, #28
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bc80      	pop	{r7}
 800b760:	4770      	bx	lr

0800b762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b762:	b480      	push	{r7}
 800b764:	b085      	sub	sp, #20
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	f043 0307 	orr.w	r3, r3, #7
 800b784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	609a      	str	r2, [r3, #8]
}
 800b78c:	bf00      	nop
 800b78e:	3714      	adds	r7, #20
 800b790:	46bd      	mov	sp, r7
 800b792:	bc80      	pop	{r7}
 800b794:	4770      	bx	lr

0800b796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b796:	b480      	push	{r7}
 800b798:	b087      	sub	sp, #28
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	021a      	lsls	r2, r3, #8
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	609a      	str	r2, [r3, #8]
}
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bc80      	pop	{r7}
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d101      	bne.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	e050      	b.n	800b88e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a1b      	ldr	r2, [pc, #108]	; (800b898 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d018      	beq.n	800b862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a19      	ldr	r2, [pc, #100]	; (800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d013      	beq.n	800b862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b842:	d00e      	beq.n	800b862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d009      	beq.n	800b862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a14      	ldr	r2, [pc, #80]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d004      	beq.n	800b862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a12      	ldr	r2, [pc, #72]	; (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d10c      	bne.n	800b87c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	4313      	orrs	r3, r2
 800b872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	bc80      	pop	{r7}
 800b896:	4770      	bx	lr
 800b898:	40012c00 	.word	0x40012c00
 800b89c:	40013400 	.word	0x40013400
 800b8a0:	40000400 	.word	0x40000400
 800b8a4:	40000800 	.word	0x40000800
 800b8a8:	40000c00 	.word	0x40000c00

0800b8ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bc80      	pop	{r7}
 800b8bc:	4770      	bx	lr

0800b8be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bc80      	pop	{r7}
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e042      	b.n	800b968 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d106      	bne.n	800b8fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7fc fe1a 	bl	8008530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2224      	movs	r2, #36	; 0x24
 800b900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fcb5 	bl	800c284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	691a      	ldr	r2, [r3, #16]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	695a      	ldr	r2, [r3, #20]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68da      	ldr	r2, [r3, #12]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2220      	movs	r2, #32
 800b954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2220      	movs	r2, #32
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	4613      	mov	r3, r2
 800b97c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b20      	cmp	r3, #32
 800b988:	d121      	bne.n	800b9ce <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <HAL_UART_Transmit_IT+0x26>
 800b990:	88fb      	ldrh	r3, [r7, #6]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e01a      	b.n	800b9d0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	88fa      	ldrh	r2, [r7, #6]
 800b9a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	88fa      	ldrh	r2, [r7, #6]
 800b9aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2221      	movs	r2, #33	; 0x21
 800b9b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68da      	ldr	r2, [r3, #12]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e000      	b.n	800b9d0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9ce:	2302      	movs	r3, #2
  }
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bc80      	pop	{r7}
 800b9d8:	4770      	bx	lr
	...

0800b9dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b0ba      	sub	sp, #232	; 0xe8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba12:	f003 030f 	and.w	r3, r3, #15
 800ba16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10f      	bne.n	800ba42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d009      	beq.n	800ba42 <HAL_UART_IRQHandler+0x66>
 800ba2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fb63 	bl	800c106 <UART_Receive_IT>
      return;
 800ba40:	e25b      	b.n	800befa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 80de 	beq.w	800bc08 <HAL_UART_IRQHandler+0x22c>
 800ba4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d106      	bne.n	800ba66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 80d1 	beq.w	800bc08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <HAL_UART_IRQHandler+0xae>
 800ba72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d005      	beq.n	800ba8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba82:	f043 0201 	orr.w	r2, r3, #1
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8e:	f003 0304 	and.w	r3, r3, #4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00b      	beq.n	800baae <HAL_UART_IRQHandler+0xd2>
 800ba96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa6:	f043 0202 	orr.w	r2, r3, #2
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800baae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00b      	beq.n	800bad2 <HAL_UART_IRQHandler+0xf6>
 800baba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d005      	beq.n	800bad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baca:	f043 0204 	orr.w	r2, r3, #4
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad6:	f003 0308 	and.w	r3, r3, #8
 800bada:	2b00      	cmp	r3, #0
 800badc:	d011      	beq.n	800bb02 <HAL_UART_IRQHandler+0x126>
 800bade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d105      	bne.n	800baf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800baea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafa:	f043 0208 	orr.w	r2, r3, #8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 81f2 	beq.w	800bef0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb10:	f003 0320 	and.w	r3, r3, #32
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d008      	beq.n	800bb2a <HAL_UART_IRQHandler+0x14e>
 800bb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1c:	f003 0320 	and.w	r3, r3, #32
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 faee 	bl	800c106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	bf14      	ite	ne
 800bb38:	2301      	movne	r3, #1
 800bb3a:	2300      	moveq	r3, #0
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	f003 0308 	and.w	r3, r3, #8
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d103      	bne.n	800bb56 <HAL_UART_IRQHandler+0x17a>
 800bb4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d04f      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f9f8 	bl	800bf4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d041      	beq.n	800bbee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3314      	adds	r3, #20
 800bb70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3314      	adds	r3, #20
 800bb92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bba6:	e841 2300 	strex	r3, r2, [r1]
 800bbaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1d9      	bne.n	800bb6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d013      	beq.n	800bbe6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	4a7e      	ldr	r2, [pc, #504]	; (800bdbc <HAL_UART_IRQHandler+0x3e0>)
 800bbc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fd f86c 	bl	8008ca8 <HAL_DMA_Abort_IT>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d016      	beq.n	800bc04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe4:	e00e      	b.n	800bc04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f99c 	bl	800bf24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbec:	e00a      	b.n	800bc04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f998 	bl	800bf24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf4:	e006      	b.n	800bc04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f994 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc02:	e175      	b.n	800bef0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc04:	bf00      	nop
    return;
 800bc06:	e173      	b.n	800bef0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	f040 814f 	bne.w	800beb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc16:	f003 0310 	and.w	r3, r3, #16
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 8148 	beq.w	800beb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc24:	f003 0310 	and.w	r3, r3, #16
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 8141 	beq.w	800beb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60bb      	str	r3, [r7, #8]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60bb      	str	r3, [r7, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	60bb      	str	r3, [r7, #8]
 800bc42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80b6 	beq.w	800bdc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 8145 	beq.w	800bef4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc72:	429a      	cmp	r2, r3
 800bc74:	f080 813e 	bcs.w	800bef4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	f000 8088 	beq.w	800bd9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc9a:	e853 3f00 	ldrex	r3, [r3]
 800bc9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	330c      	adds	r3, #12
 800bcb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bcb8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bcbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1d9      	bne.n	800bc8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3314      	adds	r3, #20
 800bcde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcea:	f023 0301 	bic.w	r3, r3, #1
 800bcee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	3314      	adds	r3, #20
 800bcf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bcfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd08:	e841 2300 	strex	r3, r2, [r1]
 800bd0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e1      	bne.n	800bcd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3314      	adds	r3, #20
 800bd1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd1e:	e853 3f00 	ldrex	r3, [r3]
 800bd22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3314      	adds	r3, #20
 800bd34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd38:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e3      	bne.n	800bd14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	330c      	adds	r3, #12
 800bd60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd6c:	f023 0310 	bic.w	r3, r3, #16
 800bd70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	330c      	adds	r3, #12
 800bd7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd7e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1e3      	bne.n	800bd5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fc ff4b 	bl	8008c32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f8bf 	bl	800bf36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdb8:	e09c      	b.n	800bef4 <HAL_UART_IRQHandler+0x518>
 800bdba:	bf00      	nop
 800bdbc:	0800c011 	.word	0x0800c011
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 808e 	beq.w	800bef8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 8089 	beq.w	800bef8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	330c      	adds	r3, #12
 800bdec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	330c      	adds	r3, #12
 800be06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be0a:	647a      	str	r2, [r7, #68]	; 0x44
 800be0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be12:	e841 2300 	strex	r3, r2, [r1]
 800be16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1e3      	bne.n	800bde6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3314      	adds	r3, #20
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	623b      	str	r3, [r7, #32]
   return(result);
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3314      	adds	r3, #20
 800be3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be42:	633a      	str	r2, [r7, #48]	; 0x30
 800be44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be4a:	e841 2300 	strex	r3, r2, [r1]
 800be4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1e3      	bne.n	800be1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2220      	movs	r2, #32
 800be5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	330c      	adds	r3, #12
 800be6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	60fb      	str	r3, [r7, #12]
   return(result);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f023 0310 	bic.w	r3, r3, #16
 800be7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	330c      	adds	r3, #12
 800be84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be88:	61fa      	str	r2, [r7, #28]
 800be8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	69b9      	ldr	r1, [r7, #24]
 800be8e:	69fa      	ldr	r2, [r7, #28]
 800be90:	e841 2300 	strex	r3, r2, [r1]
 800be94:	617b      	str	r3, [r7, #20]
   return(result);
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e3      	bne.n	800be64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2202      	movs	r2, #2
 800bea0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f844 	bl	800bf36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800beae:	e023      	b.n	800bef8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800beb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d009      	beq.n	800bed0 <HAL_UART_IRQHandler+0x4f4>
 800bebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d003      	beq.n	800bed0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f8b5 	bl	800c038 <UART_Transmit_IT>
    return;
 800bece:	e014      	b.n	800befa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00e      	beq.n	800befa <HAL_UART_IRQHandler+0x51e>
 800bedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d008      	beq.n	800befa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f8f4 	bl	800c0d6 <UART_EndTransmit_IT>
    return;
 800beee:	e004      	b.n	800befa <HAL_UART_IRQHandler+0x51e>
    return;
 800bef0:	bf00      	nop
 800bef2:	e002      	b.n	800befa <HAL_UART_IRQHandler+0x51e>
      return;
 800bef4:	bf00      	nop
 800bef6:	e000      	b.n	800befa <HAL_UART_IRQHandler+0x51e>
      return;
 800bef8:	bf00      	nop
  }
}
 800befa:	37e8      	adds	r7, #232	; 0xe8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bc80      	pop	{r7}
 800bf10:	4770      	bx	lr

0800bf12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf1a:	bf00      	nop
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr

0800bf24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bc80      	pop	{r7}
 800bf34:	4770      	bx	lr

0800bf36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b083      	sub	sp, #12
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bc80      	pop	{r7}
 800bf4a:	4770      	bx	lr

0800bf4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b095      	sub	sp, #84	; 0x54
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	330c      	adds	r3, #12
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	e853 3f00 	ldrex	r3, [r3]
 800bf62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	330c      	adds	r3, #12
 800bf72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf74:	643a      	str	r2, [r7, #64]	; 0x40
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e5      	bne.n	800bf54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3314      	adds	r3, #20
 800bf8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	e853 3f00 	ldrex	r3, [r3]
 800bf96:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f023 0301 	bic.w	r3, r3, #1
 800bf9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3314      	adds	r3, #20
 800bfa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e5      	bne.n	800bf88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d119      	bne.n	800bff8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	330c      	adds	r3, #12
 800bfca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f023 0310 	bic.w	r3, r3, #16
 800bfda:	647b      	str	r3, [r7, #68]	; 0x44
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	330c      	adds	r3, #12
 800bfe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfe4:	61ba      	str	r2, [r7, #24]
 800bfe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6979      	ldr	r1, [r7, #20]
 800bfea:	69ba      	ldr	r2, [r7, #24]
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	613b      	str	r3, [r7, #16]
   return(result);
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e5      	bne.n	800bfc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2220      	movs	r2, #32
 800bffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c006:	bf00      	nop
 800c008:	3754      	adds	r7, #84	; 0x54
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr

0800c010 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2200      	movs	r2, #0
 800c028:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff ff7a 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b21      	cmp	r3, #33	; 0x21
 800c04a:	d13e      	bne.n	800c0ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c054:	d114      	bne.n	800c080 <UART_Transmit_IT+0x48>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d110      	bne.n	800c080 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	461a      	mov	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c072:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	1c9a      	adds	r2, r3, #2
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	621a      	str	r2, [r3, #32]
 800c07e:	e008      	b.n	800c092 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	1c59      	adds	r1, r3, #1
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	6211      	str	r1, [r2, #32]
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c096:	b29b      	uxth	r3, r3
 800c098:	3b01      	subs	r3, #1
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10f      	bne.n	800c0c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68da      	ldr	r2, [r3, #12]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	e000      	b.n	800c0cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0ca:	2302      	movs	r3, #2
  }
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr

0800c0d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68da      	ldr	r2, [r3, #12]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff ff02 	bl	800bf00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b08c      	sub	sp, #48	; 0x30
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b22      	cmp	r3, #34	; 0x22
 800c118:	f040 80ae 	bne.w	800c278 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c124:	d117      	bne.n	800c156 <UART_Receive_IT+0x50>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d113      	bne.n	800c156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c144:	b29a      	uxth	r2, r3
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	1c9a      	adds	r2, r3, #2
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	629a      	str	r2, [r3, #40]	; 0x28
 800c154:	e026      	b.n	800c1a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c15c:	2300      	movs	r3, #0
 800c15e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c168:	d007      	beq.n	800c17a <UART_Receive_IT+0x74>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <UART_Receive_IT+0x82>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	b2da      	uxtb	r2, r3
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	e008      	b.n	800c19a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c194:	b2da      	uxtb	r2, r3
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d15d      	bne.n	800c274 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68da      	ldr	r2, [r3, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f022 0220 	bic.w	r2, r2, #32
 800c1c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	695a      	ldr	r2, [r3, #20]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 0201 	bic.w	r2, r2, #1
 800c1e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2220      	movs	r2, #32
 800c1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d135      	bne.n	800c26a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	330c      	adds	r3, #12
 800c20a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	613b      	str	r3, [r7, #16]
   return(result);
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f023 0310 	bic.w	r3, r3, #16
 800c21a:	627b      	str	r3, [r7, #36]	; 0x24
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	330c      	adds	r3, #12
 800c222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c224:	623a      	str	r2, [r7, #32]
 800c226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c228:	69f9      	ldr	r1, [r7, #28]
 800c22a:	6a3a      	ldr	r2, [r7, #32]
 800c22c:	e841 2300 	strex	r3, r2, [r1]
 800c230:	61bb      	str	r3, [r7, #24]
   return(result);
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e5      	bne.n	800c204 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 0310 	and.w	r3, r3, #16
 800c242:	2b10      	cmp	r3, #16
 800c244:	d10a      	bne.n	800c25c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c246:	2300      	movs	r3, #0
 800c248:	60fb      	str	r3, [r7, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff fe67 	bl	800bf36 <HAL_UARTEx_RxEventCallback>
 800c268:	e002      	b.n	800c270 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff fe51 	bl	800bf12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	e002      	b.n	800c27a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	e000      	b.n	800c27a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c278:	2302      	movs	r3, #2
  }
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3730      	adds	r7, #48	; 0x30
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689a      	ldr	r2, [r3, #8]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2be:	f023 030c 	bic.w	r3, r3, #12
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6812      	ldr	r2, [r2, #0]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	430b      	orrs	r3, r1
 800c2ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	699a      	ldr	r2, [r3, #24]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a2c      	ldr	r2, [pc, #176]	; (800c398 <UART_SetConfig+0x114>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d103      	bne.n	800c2f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c2ec:	f7fe fe8c 	bl	800b008 <HAL_RCC_GetPCLK2Freq>
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	e002      	b.n	800c2fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2f4:	f7fe fe74 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 800c2f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	009a      	lsls	r2, r3, #2
 800c304:	441a      	add	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c310:	4a22      	ldr	r2, [pc, #136]	; (800c39c <UART_SetConfig+0x118>)
 800c312:	fba2 2303 	umull	r2, r3, r2, r3
 800c316:	095b      	lsrs	r3, r3, #5
 800c318:	0119      	lsls	r1, r3, #4
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009a      	lsls	r2, r3, #2
 800c324:	441a      	add	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c330:	4b1a      	ldr	r3, [pc, #104]	; (800c39c <UART_SetConfig+0x118>)
 800c332:	fba3 0302 	umull	r0, r3, r3, r2
 800c336:	095b      	lsrs	r3, r3, #5
 800c338:	2064      	movs	r0, #100	; 0x64
 800c33a:	fb00 f303 	mul.w	r3, r0, r3
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	3332      	adds	r3, #50	; 0x32
 800c344:	4a15      	ldr	r2, [pc, #84]	; (800c39c <UART_SetConfig+0x118>)
 800c346:	fba2 2303 	umull	r2, r3, r2, r3
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c350:	4419      	add	r1, r3
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4613      	mov	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	009a      	lsls	r2, r3, #2
 800c35c:	441a      	add	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	fbb2 f2f3 	udiv	r2, r2, r3
 800c368:	4b0c      	ldr	r3, [pc, #48]	; (800c39c <UART_SetConfig+0x118>)
 800c36a:	fba3 0302 	umull	r0, r3, r3, r2
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	2064      	movs	r0, #100	; 0x64
 800c372:	fb00 f303 	mul.w	r3, r0, r3
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	011b      	lsls	r3, r3, #4
 800c37a:	3332      	adds	r3, #50	; 0x32
 800c37c:	4a07      	ldr	r2, [pc, #28]	; (800c39c <UART_SetConfig+0x118>)
 800c37e:	fba2 2303 	umull	r2, r3, r2, r3
 800c382:	095b      	lsrs	r3, r3, #5
 800c384:	f003 020f 	and.w	r2, r3, #15
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	440a      	add	r2, r1
 800c38e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c390:	bf00      	nop
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	40013800 	.word	0x40013800
 800c39c:	51eb851f 	.word	0x51eb851f

0800c3a0 <__itoa>:
 800c3a0:	1e93      	subs	r3, r2, #2
 800c3a2:	2b22      	cmp	r3, #34	; 0x22
 800c3a4:	b510      	push	{r4, lr}
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	d904      	bls.n	800c3b4 <__itoa+0x14>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	461c      	mov	r4, r3
 800c3ae:	700b      	strb	r3, [r1, #0]
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	bd10      	pop	{r4, pc}
 800c3b4:	2a0a      	cmp	r2, #10
 800c3b6:	d109      	bne.n	800c3cc <__itoa+0x2c>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	da07      	bge.n	800c3cc <__itoa+0x2c>
 800c3bc:	232d      	movs	r3, #45	; 0x2d
 800c3be:	700b      	strb	r3, [r1, #0]
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	4240      	negs	r0, r0
 800c3c4:	4421      	add	r1, r4
 800c3c6:	f000 f8d9 	bl	800c57c <__utoa>
 800c3ca:	e7f1      	b.n	800c3b0 <__itoa+0x10>
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	e7f9      	b.n	800c3c4 <__itoa+0x24>

0800c3d0 <itoa>:
 800c3d0:	f7ff bfe6 	b.w	800c3a0 <__itoa>

0800c3d4 <malloc>:
 800c3d4:	4b02      	ldr	r3, [pc, #8]	; (800c3e0 <malloc+0xc>)
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	f000 b823 	b.w	800c424 <_malloc_r>
 800c3de:	bf00      	nop
 800c3e0:	20000100 	.word	0x20000100

0800c3e4 <sbrk_aligned>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	4e0e      	ldr	r6, [pc, #56]	; (800c420 <sbrk_aligned+0x3c>)
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	6831      	ldr	r1, [r6, #0]
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	b911      	cbnz	r1, 800c3f6 <sbrk_aligned+0x12>
 800c3f0:	f000 f91e 	bl	800c630 <_sbrk_r>
 800c3f4:	6030      	str	r0, [r6, #0]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f000 f919 	bl	800c630 <_sbrk_r>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	d00a      	beq.n	800c418 <sbrk_aligned+0x34>
 800c402:	1cc4      	adds	r4, r0, #3
 800c404:	f024 0403 	bic.w	r4, r4, #3
 800c408:	42a0      	cmp	r0, r4
 800c40a:	d007      	beq.n	800c41c <sbrk_aligned+0x38>
 800c40c:	1a21      	subs	r1, r4, r0
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 f90e 	bl	800c630 <_sbrk_r>
 800c414:	3001      	adds	r0, #1
 800c416:	d101      	bne.n	800c41c <sbrk_aligned+0x38>
 800c418:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c41c:	4620      	mov	r0, r4
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	20000468 	.word	0x20000468

0800c424 <_malloc_r>:
 800c424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c428:	1ccd      	adds	r5, r1, #3
 800c42a:	f025 0503 	bic.w	r5, r5, #3
 800c42e:	3508      	adds	r5, #8
 800c430:	2d0c      	cmp	r5, #12
 800c432:	bf38      	it	cc
 800c434:	250c      	movcc	r5, #12
 800c436:	2d00      	cmp	r5, #0
 800c438:	4607      	mov	r7, r0
 800c43a:	db01      	blt.n	800c440 <_malloc_r+0x1c>
 800c43c:	42a9      	cmp	r1, r5
 800c43e:	d905      	bls.n	800c44c <_malloc_r+0x28>
 800c440:	230c      	movs	r3, #12
 800c442:	2600      	movs	r6, #0
 800c444:	603b      	str	r3, [r7, #0]
 800c446:	4630      	mov	r0, r6
 800c448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c520 <_malloc_r+0xfc>
 800c450:	f000 f868 	bl	800c524 <__malloc_lock>
 800c454:	f8d8 3000 	ldr.w	r3, [r8]
 800c458:	461c      	mov	r4, r3
 800c45a:	bb5c      	cbnz	r4, 800c4b4 <_malloc_r+0x90>
 800c45c:	4629      	mov	r1, r5
 800c45e:	4638      	mov	r0, r7
 800c460:	f7ff ffc0 	bl	800c3e4 <sbrk_aligned>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	4604      	mov	r4, r0
 800c468:	d155      	bne.n	800c516 <_malloc_r+0xf2>
 800c46a:	f8d8 4000 	ldr.w	r4, [r8]
 800c46e:	4626      	mov	r6, r4
 800c470:	2e00      	cmp	r6, #0
 800c472:	d145      	bne.n	800c500 <_malloc_r+0xdc>
 800c474:	2c00      	cmp	r4, #0
 800c476:	d048      	beq.n	800c50a <_malloc_r+0xe6>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	4631      	mov	r1, r6
 800c47c:	4638      	mov	r0, r7
 800c47e:	eb04 0903 	add.w	r9, r4, r3
 800c482:	f000 f8d5 	bl	800c630 <_sbrk_r>
 800c486:	4581      	cmp	r9, r0
 800c488:	d13f      	bne.n	800c50a <_malloc_r+0xe6>
 800c48a:	6821      	ldr	r1, [r4, #0]
 800c48c:	4638      	mov	r0, r7
 800c48e:	1a6d      	subs	r5, r5, r1
 800c490:	4629      	mov	r1, r5
 800c492:	f7ff ffa7 	bl	800c3e4 <sbrk_aligned>
 800c496:	3001      	adds	r0, #1
 800c498:	d037      	beq.n	800c50a <_malloc_r+0xe6>
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	442b      	add	r3, r5
 800c49e:	6023      	str	r3, [r4, #0]
 800c4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d038      	beq.n	800c51a <_malloc_r+0xf6>
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	42a2      	cmp	r2, r4
 800c4ac:	d12b      	bne.n	800c506 <_malloc_r+0xe2>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	605a      	str	r2, [r3, #4]
 800c4b2:	e00f      	b.n	800c4d4 <_malloc_r+0xb0>
 800c4b4:	6822      	ldr	r2, [r4, #0]
 800c4b6:	1b52      	subs	r2, r2, r5
 800c4b8:	d41f      	bmi.n	800c4fa <_malloc_r+0xd6>
 800c4ba:	2a0b      	cmp	r2, #11
 800c4bc:	d917      	bls.n	800c4ee <_malloc_r+0xca>
 800c4be:	1961      	adds	r1, r4, r5
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	6025      	str	r5, [r4, #0]
 800c4c4:	bf18      	it	ne
 800c4c6:	6059      	strne	r1, [r3, #4]
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	bf08      	it	eq
 800c4cc:	f8c8 1000 	streq.w	r1, [r8]
 800c4d0:	5162      	str	r2, [r4, r5]
 800c4d2:	604b      	str	r3, [r1, #4]
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f104 060b 	add.w	r6, r4, #11
 800c4da:	f000 f829 	bl	800c530 <__malloc_unlock>
 800c4de:	f026 0607 	bic.w	r6, r6, #7
 800c4e2:	1d23      	adds	r3, r4, #4
 800c4e4:	1af2      	subs	r2, r6, r3
 800c4e6:	d0ae      	beq.n	800c446 <_malloc_r+0x22>
 800c4e8:	1b9b      	subs	r3, r3, r6
 800c4ea:	50a3      	str	r3, [r4, r2]
 800c4ec:	e7ab      	b.n	800c446 <_malloc_r+0x22>
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	6862      	ldr	r2, [r4, #4]
 800c4f2:	d1dd      	bne.n	800c4b0 <_malloc_r+0x8c>
 800c4f4:	f8c8 2000 	str.w	r2, [r8]
 800c4f8:	e7ec      	b.n	800c4d4 <_malloc_r+0xb0>
 800c4fa:	4623      	mov	r3, r4
 800c4fc:	6864      	ldr	r4, [r4, #4]
 800c4fe:	e7ac      	b.n	800c45a <_malloc_r+0x36>
 800c500:	4634      	mov	r4, r6
 800c502:	6876      	ldr	r6, [r6, #4]
 800c504:	e7b4      	b.n	800c470 <_malloc_r+0x4c>
 800c506:	4613      	mov	r3, r2
 800c508:	e7cc      	b.n	800c4a4 <_malloc_r+0x80>
 800c50a:	230c      	movs	r3, #12
 800c50c:	4638      	mov	r0, r7
 800c50e:	603b      	str	r3, [r7, #0]
 800c510:	f000 f80e 	bl	800c530 <__malloc_unlock>
 800c514:	e797      	b.n	800c446 <_malloc_r+0x22>
 800c516:	6025      	str	r5, [r4, #0]
 800c518:	e7dc      	b.n	800c4d4 <_malloc_r+0xb0>
 800c51a:	605b      	str	r3, [r3, #4]
 800c51c:	deff      	udf	#255	; 0xff
 800c51e:	bf00      	nop
 800c520:	20000464 	.word	0x20000464

0800c524 <__malloc_lock>:
 800c524:	4801      	ldr	r0, [pc, #4]	; (800c52c <__malloc_lock+0x8>)
 800c526:	f000 b8bd 	b.w	800c6a4 <__retarget_lock_acquire_recursive>
 800c52a:	bf00      	nop
 800c52c:	200005a4 	.word	0x200005a4

0800c530 <__malloc_unlock>:
 800c530:	4801      	ldr	r0, [pc, #4]	; (800c538 <__malloc_unlock+0x8>)
 800c532:	f000 b8b8 	b.w	800c6a6 <__retarget_lock_release_recursive>
 800c536:	bf00      	nop
 800c538:	200005a4 	.word	0x200005a4

0800c53c <siprintf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c542:	b500      	push	{lr}
 800c544:	b09c      	sub	sp, #112	; 0x70
 800c546:	ab1d      	add	r3, sp, #116	; 0x74
 800c548:	9002      	str	r0, [sp, #8]
 800c54a:	9006      	str	r0, [sp, #24]
 800c54c:	9107      	str	r1, [sp, #28]
 800c54e:	9104      	str	r1, [sp, #16]
 800c550:	4808      	ldr	r0, [pc, #32]	; (800c574 <siprintf+0x38>)
 800c552:	4909      	ldr	r1, [pc, #36]	; (800c578 <siprintf+0x3c>)
 800c554:	f853 2b04 	ldr.w	r2, [r3], #4
 800c558:	9105      	str	r1, [sp, #20]
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	a902      	add	r1, sp, #8
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	f000 f94c 	bl	800c7fc <_svfiprintf_r>
 800c564:	2200      	movs	r2, #0
 800c566:	9b02      	ldr	r3, [sp, #8]
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	b01c      	add	sp, #112	; 0x70
 800c56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c570:	b003      	add	sp, #12
 800c572:	4770      	bx	lr
 800c574:	20000100 	.word	0x20000100
 800c578:	ffff0208 	.word	0xffff0208

0800c57c <__utoa>:
 800c57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57e:	b08b      	sub	sp, #44	; 0x2c
 800c580:	4605      	mov	r5, r0
 800c582:	460b      	mov	r3, r1
 800c584:	466e      	mov	r6, sp
 800c586:	4c1d      	ldr	r4, [pc, #116]	; (800c5fc <__utoa+0x80>)
 800c588:	f104 0c20 	add.w	ip, r4, #32
 800c58c:	4637      	mov	r7, r6
 800c58e:	6820      	ldr	r0, [r4, #0]
 800c590:	6861      	ldr	r1, [r4, #4]
 800c592:	3408      	adds	r4, #8
 800c594:	c703      	stmia	r7!, {r0, r1}
 800c596:	4564      	cmp	r4, ip
 800c598:	463e      	mov	r6, r7
 800c59a:	d1f7      	bne.n	800c58c <__utoa+0x10>
 800c59c:	7921      	ldrb	r1, [r4, #4]
 800c59e:	6820      	ldr	r0, [r4, #0]
 800c5a0:	7139      	strb	r1, [r7, #4]
 800c5a2:	1e91      	subs	r1, r2, #2
 800c5a4:	2922      	cmp	r1, #34	; 0x22
 800c5a6:	6038      	str	r0, [r7, #0]
 800c5a8:	f04f 0100 	mov.w	r1, #0
 800c5ac:	d904      	bls.n	800c5b8 <__utoa+0x3c>
 800c5ae:	7019      	strb	r1, [r3, #0]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	b00b      	add	sp, #44	; 0x2c
 800c5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b8:	1e58      	subs	r0, r3, #1
 800c5ba:	4684      	mov	ip, r0
 800c5bc:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5c0:	fb02 5617 	mls	r6, r2, r7, r5
 800c5c4:	3628      	adds	r6, #40	; 0x28
 800c5c6:	446e      	add	r6, sp
 800c5c8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5d2:	462e      	mov	r6, r5
 800c5d4:	42b2      	cmp	r2, r6
 800c5d6:	463d      	mov	r5, r7
 800c5d8:	f101 0101 	add.w	r1, r1, #1
 800c5dc:	d9ee      	bls.n	800c5bc <__utoa+0x40>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	545a      	strb	r2, [r3, r1]
 800c5e2:	1919      	adds	r1, r3, r4
 800c5e4:	1aa5      	subs	r5, r4, r2
 800c5e6:	42aa      	cmp	r2, r5
 800c5e8:	dae3      	bge.n	800c5b2 <__utoa+0x36>
 800c5ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5ee:	780e      	ldrb	r6, [r1, #0]
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	7006      	strb	r6, [r0, #0]
 800c5f4:	f801 5901 	strb.w	r5, [r1], #-1
 800c5f8:	e7f4      	b.n	800c5e4 <__utoa+0x68>
 800c5fa:	bf00      	nop
 800c5fc:	0800dd2a 	.word	0x0800dd2a

0800c600 <strcat>:
 800c600:	4602      	mov	r2, r0
 800c602:	b510      	push	{r4, lr}
 800c604:	7814      	ldrb	r4, [r2, #0]
 800c606:	4613      	mov	r3, r2
 800c608:	3201      	adds	r2, #1
 800c60a:	2c00      	cmp	r4, #0
 800c60c:	d1fa      	bne.n	800c604 <strcat+0x4>
 800c60e:	3b01      	subs	r3, #1
 800c610:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c614:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c618:	2a00      	cmp	r2, #0
 800c61a:	d1f9      	bne.n	800c610 <strcat+0x10>
 800c61c:	bd10      	pop	{r4, pc}

0800c61e <memset>:
 800c61e:	4603      	mov	r3, r0
 800c620:	4402      	add	r2, r0
 800c622:	4293      	cmp	r3, r2
 800c624:	d100      	bne.n	800c628 <memset+0xa>
 800c626:	4770      	bx	lr
 800c628:	f803 1b01 	strb.w	r1, [r3], #1
 800c62c:	e7f9      	b.n	800c622 <memset+0x4>
	...

0800c630 <_sbrk_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	2300      	movs	r3, #0
 800c634:	4d05      	ldr	r5, [pc, #20]	; (800c64c <_sbrk_r+0x1c>)
 800c636:	4604      	mov	r4, r0
 800c638:	4608      	mov	r0, r1
 800c63a:	602b      	str	r3, [r5, #0]
 800c63c:	f7fc f808 	bl	8008650 <_sbrk>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_sbrk_r+0x1a>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_sbrk_r+0x1a>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	200005a8 	.word	0x200005a8

0800c650 <__errno>:
 800c650:	4b01      	ldr	r3, [pc, #4]	; (800c658 <__errno+0x8>)
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	20000100 	.word	0x20000100

0800c65c <__libc_init_array>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	2600      	movs	r6, #0
 800c660:	4d0c      	ldr	r5, [pc, #48]	; (800c694 <__libc_init_array+0x38>)
 800c662:	4c0d      	ldr	r4, [pc, #52]	; (800c698 <__libc_init_array+0x3c>)
 800c664:	1b64      	subs	r4, r4, r5
 800c666:	10a4      	asrs	r4, r4, #2
 800c668:	42a6      	cmp	r6, r4
 800c66a:	d109      	bne.n	800c680 <__libc_init_array+0x24>
 800c66c:	f000 fbc6 	bl	800cdfc <_init>
 800c670:	2600      	movs	r6, #0
 800c672:	4d0a      	ldr	r5, [pc, #40]	; (800c69c <__libc_init_array+0x40>)
 800c674:	4c0a      	ldr	r4, [pc, #40]	; (800c6a0 <__libc_init_array+0x44>)
 800c676:	1b64      	subs	r4, r4, r5
 800c678:	10a4      	asrs	r4, r4, #2
 800c67a:	42a6      	cmp	r6, r4
 800c67c:	d105      	bne.n	800c68a <__libc_init_array+0x2e>
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	f855 3b04 	ldr.w	r3, [r5], #4
 800c684:	4798      	blx	r3
 800c686:	3601      	adds	r6, #1
 800c688:	e7ee      	b.n	800c668 <__libc_init_array+0xc>
 800c68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68e:	4798      	blx	r3
 800c690:	3601      	adds	r6, #1
 800c692:	e7f2      	b.n	800c67a <__libc_init_array+0x1e>
 800c694:	0800dd84 	.word	0x0800dd84
 800c698:	0800dd84 	.word	0x0800dd84
 800c69c:	0800dd84 	.word	0x0800dd84
 800c6a0:	0800dd88 	.word	0x0800dd88

0800c6a4 <__retarget_lock_acquire_recursive>:
 800c6a4:	4770      	bx	lr

0800c6a6 <__retarget_lock_release_recursive>:
 800c6a6:	4770      	bx	lr

0800c6a8 <strcpy>:
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ae:	f803 2b01 	strb.w	r2, [r3], #1
 800c6b2:	2a00      	cmp	r2, #0
 800c6b4:	d1f9      	bne.n	800c6aa <strcpy+0x2>
 800c6b6:	4770      	bx	lr

0800c6b8 <_free_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	d040      	beq.n	800c742 <_free_r+0x8a>
 800c6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c4:	1f0c      	subs	r4, r1, #4
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bfb8      	it	lt
 800c6ca:	18e4      	addlt	r4, r4, r3
 800c6cc:	f7ff ff2a 	bl	800c524 <__malloc_lock>
 800c6d0:	4a1c      	ldr	r2, [pc, #112]	; (800c744 <_free_r+0x8c>)
 800c6d2:	6813      	ldr	r3, [r2, #0]
 800c6d4:	b933      	cbnz	r3, 800c6e4 <_free_r+0x2c>
 800c6d6:	6063      	str	r3, [r4, #4]
 800c6d8:	6014      	str	r4, [r2, #0]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6e0:	f7ff bf26 	b.w	800c530 <__malloc_unlock>
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	d908      	bls.n	800c6fa <_free_r+0x42>
 800c6e8:	6820      	ldr	r0, [r4, #0]
 800c6ea:	1821      	adds	r1, r4, r0
 800c6ec:	428b      	cmp	r3, r1
 800c6ee:	bf01      	itttt	eq
 800c6f0:	6819      	ldreq	r1, [r3, #0]
 800c6f2:	685b      	ldreq	r3, [r3, #4]
 800c6f4:	1809      	addeq	r1, r1, r0
 800c6f6:	6021      	streq	r1, [r4, #0]
 800c6f8:	e7ed      	b.n	800c6d6 <_free_r+0x1e>
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	b10b      	cbz	r3, 800c704 <_free_r+0x4c>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d9fa      	bls.n	800c6fa <_free_r+0x42>
 800c704:	6811      	ldr	r1, [r2, #0]
 800c706:	1850      	adds	r0, r2, r1
 800c708:	42a0      	cmp	r0, r4
 800c70a:	d10b      	bne.n	800c724 <_free_r+0x6c>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	4401      	add	r1, r0
 800c710:	1850      	adds	r0, r2, r1
 800c712:	4283      	cmp	r3, r0
 800c714:	6011      	str	r1, [r2, #0]
 800c716:	d1e0      	bne.n	800c6da <_free_r+0x22>
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	4408      	add	r0, r1
 800c71e:	6010      	str	r0, [r2, #0]
 800c720:	6053      	str	r3, [r2, #4]
 800c722:	e7da      	b.n	800c6da <_free_r+0x22>
 800c724:	d902      	bls.n	800c72c <_free_r+0x74>
 800c726:	230c      	movs	r3, #12
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	e7d6      	b.n	800c6da <_free_r+0x22>
 800c72c:	6820      	ldr	r0, [r4, #0]
 800c72e:	1821      	adds	r1, r4, r0
 800c730:	428b      	cmp	r3, r1
 800c732:	bf01      	itttt	eq
 800c734:	6819      	ldreq	r1, [r3, #0]
 800c736:	685b      	ldreq	r3, [r3, #4]
 800c738:	1809      	addeq	r1, r1, r0
 800c73a:	6021      	streq	r1, [r4, #0]
 800c73c:	6063      	str	r3, [r4, #4]
 800c73e:	6054      	str	r4, [r2, #4]
 800c740:	e7cb      	b.n	800c6da <_free_r+0x22>
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	20000464 	.word	0x20000464

0800c748 <__ssputs_r>:
 800c748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c74c:	461f      	mov	r7, r3
 800c74e:	688e      	ldr	r6, [r1, #8]
 800c750:	4682      	mov	sl, r0
 800c752:	42be      	cmp	r6, r7
 800c754:	460c      	mov	r4, r1
 800c756:	4690      	mov	r8, r2
 800c758:	680b      	ldr	r3, [r1, #0]
 800c75a:	d82c      	bhi.n	800c7b6 <__ssputs_r+0x6e>
 800c75c:	898a      	ldrh	r2, [r1, #12]
 800c75e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c762:	d026      	beq.n	800c7b2 <__ssputs_r+0x6a>
 800c764:	6965      	ldr	r5, [r4, #20]
 800c766:	6909      	ldr	r1, [r1, #16]
 800c768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c76c:	eba3 0901 	sub.w	r9, r3, r1
 800c770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c774:	1c7b      	adds	r3, r7, #1
 800c776:	444b      	add	r3, r9
 800c778:	106d      	asrs	r5, r5, #1
 800c77a:	429d      	cmp	r5, r3
 800c77c:	bf38      	it	cc
 800c77e:	461d      	movcc	r5, r3
 800c780:	0553      	lsls	r3, r2, #21
 800c782:	d527      	bpl.n	800c7d4 <__ssputs_r+0x8c>
 800c784:	4629      	mov	r1, r5
 800c786:	f7ff fe4d 	bl	800c424 <_malloc_r>
 800c78a:	4606      	mov	r6, r0
 800c78c:	b360      	cbz	r0, 800c7e8 <__ssputs_r+0xa0>
 800c78e:	464a      	mov	r2, r9
 800c790:	6921      	ldr	r1, [r4, #16]
 800c792:	f000 fb1c 	bl	800cdce <memcpy>
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a0:	81a3      	strh	r3, [r4, #12]
 800c7a2:	6126      	str	r6, [r4, #16]
 800c7a4:	444e      	add	r6, r9
 800c7a6:	6026      	str	r6, [r4, #0]
 800c7a8:	463e      	mov	r6, r7
 800c7aa:	6165      	str	r5, [r4, #20]
 800c7ac:	eba5 0509 	sub.w	r5, r5, r9
 800c7b0:	60a5      	str	r5, [r4, #8]
 800c7b2:	42be      	cmp	r6, r7
 800c7b4:	d900      	bls.n	800c7b8 <__ssputs_r+0x70>
 800c7b6:	463e      	mov	r6, r7
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	6820      	ldr	r0, [r4, #0]
 800c7be:	f000 fade 	bl	800cd7e <memmove>
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	68a3      	ldr	r3, [r4, #8]
 800c7c6:	1b9b      	subs	r3, r3, r6
 800c7c8:	60a3      	str	r3, [r4, #8]
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	4433      	add	r3, r6
 800c7ce:	6023      	str	r3, [r4, #0]
 800c7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	f000 faa3 	bl	800cd20 <_realloc_r>
 800c7da:	4606      	mov	r6, r0
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1e0      	bne.n	800c7a2 <__ssputs_r+0x5a>
 800c7e0:	4650      	mov	r0, sl
 800c7e2:	6921      	ldr	r1, [r4, #16]
 800c7e4:	f7ff ff68 	bl	800c6b8 <_free_r>
 800c7e8:	230c      	movs	r3, #12
 800c7ea:	f8ca 3000 	str.w	r3, [sl]
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f8:	81a3      	strh	r3, [r4, #12]
 800c7fa:	e7e9      	b.n	800c7d0 <__ssputs_r+0x88>

0800c7fc <_svfiprintf_r>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	4698      	mov	r8, r3
 800c802:	898b      	ldrh	r3, [r1, #12]
 800c804:	4607      	mov	r7, r0
 800c806:	061b      	lsls	r3, r3, #24
 800c808:	460d      	mov	r5, r1
 800c80a:	4614      	mov	r4, r2
 800c80c:	b09d      	sub	sp, #116	; 0x74
 800c80e:	d50e      	bpl.n	800c82e <_svfiprintf_r+0x32>
 800c810:	690b      	ldr	r3, [r1, #16]
 800c812:	b963      	cbnz	r3, 800c82e <_svfiprintf_r+0x32>
 800c814:	2140      	movs	r1, #64	; 0x40
 800c816:	f7ff fe05 	bl	800c424 <_malloc_r>
 800c81a:	6028      	str	r0, [r5, #0]
 800c81c:	6128      	str	r0, [r5, #16]
 800c81e:	b920      	cbnz	r0, 800c82a <_svfiprintf_r+0x2e>
 800c820:	230c      	movs	r3, #12
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c828:	e0d0      	b.n	800c9cc <_svfiprintf_r+0x1d0>
 800c82a:	2340      	movs	r3, #64	; 0x40
 800c82c:	616b      	str	r3, [r5, #20]
 800c82e:	2300      	movs	r3, #0
 800c830:	9309      	str	r3, [sp, #36]	; 0x24
 800c832:	2320      	movs	r3, #32
 800c834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c838:	2330      	movs	r3, #48	; 0x30
 800c83a:	f04f 0901 	mov.w	r9, #1
 800c83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c842:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9e4 <_svfiprintf_r+0x1e8>
 800c846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c84a:	4623      	mov	r3, r4
 800c84c:	469a      	mov	sl, r3
 800c84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c852:	b10a      	cbz	r2, 800c858 <_svfiprintf_r+0x5c>
 800c854:	2a25      	cmp	r2, #37	; 0x25
 800c856:	d1f9      	bne.n	800c84c <_svfiprintf_r+0x50>
 800c858:	ebba 0b04 	subs.w	fp, sl, r4
 800c85c:	d00b      	beq.n	800c876 <_svfiprintf_r+0x7a>
 800c85e:	465b      	mov	r3, fp
 800c860:	4622      	mov	r2, r4
 800c862:	4629      	mov	r1, r5
 800c864:	4638      	mov	r0, r7
 800c866:	f7ff ff6f 	bl	800c748 <__ssputs_r>
 800c86a:	3001      	adds	r0, #1
 800c86c:	f000 80a9 	beq.w	800c9c2 <_svfiprintf_r+0x1c6>
 800c870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c872:	445a      	add	r2, fp
 800c874:	9209      	str	r2, [sp, #36]	; 0x24
 800c876:	f89a 3000 	ldrb.w	r3, [sl]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 80a1 	beq.w	800c9c2 <_svfiprintf_r+0x1c6>
 800c880:	2300      	movs	r3, #0
 800c882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88a:	f10a 0a01 	add.w	sl, sl, #1
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	9307      	str	r3, [sp, #28]
 800c892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c896:	931a      	str	r3, [sp, #104]	; 0x68
 800c898:	4654      	mov	r4, sl
 800c89a:	2205      	movs	r2, #5
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	4850      	ldr	r0, [pc, #320]	; (800c9e4 <_svfiprintf_r+0x1e8>)
 800c8a2:	f000 fa86 	bl	800cdb2 <memchr>
 800c8a6:	9a04      	ldr	r2, [sp, #16]
 800c8a8:	b9d8      	cbnz	r0, 800c8e2 <_svfiprintf_r+0xe6>
 800c8aa:	06d0      	lsls	r0, r2, #27
 800c8ac:	bf44      	itt	mi
 800c8ae:	2320      	movmi	r3, #32
 800c8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b4:	0711      	lsls	r1, r2, #28
 800c8b6:	bf44      	itt	mi
 800c8b8:	232b      	movmi	r3, #43	; 0x2b
 800c8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8be:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c4:	d015      	beq.n	800c8f2 <_svfiprintf_r+0xf6>
 800c8c6:	4654      	mov	r4, sl
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f04f 0c0a 	mov.w	ip, #10
 800c8ce:	9a07      	ldr	r2, [sp, #28]
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d6:	3b30      	subs	r3, #48	; 0x30
 800c8d8:	2b09      	cmp	r3, #9
 800c8da:	d94d      	bls.n	800c978 <_svfiprintf_r+0x17c>
 800c8dc:	b1b0      	cbz	r0, 800c90c <_svfiprintf_r+0x110>
 800c8de:	9207      	str	r2, [sp, #28]
 800c8e0:	e014      	b.n	800c90c <_svfiprintf_r+0x110>
 800c8e2:	eba0 0308 	sub.w	r3, r0, r8
 800c8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	46a2      	mov	sl, r4
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	e7d2      	b.n	800c898 <_svfiprintf_r+0x9c>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	1d19      	adds	r1, r3, #4
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	9103      	str	r1, [sp, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfbb      	ittet	lt
 800c8fe:	425b      	neglt	r3, r3
 800c900:	f042 0202 	orrlt.w	r2, r2, #2
 800c904:	9307      	strge	r3, [sp, #28]
 800c906:	9307      	strlt	r3, [sp, #28]
 800c908:	bfb8      	it	lt
 800c90a:	9204      	strlt	r2, [sp, #16]
 800c90c:	7823      	ldrb	r3, [r4, #0]
 800c90e:	2b2e      	cmp	r3, #46	; 0x2e
 800c910:	d10c      	bne.n	800c92c <_svfiprintf_r+0x130>
 800c912:	7863      	ldrb	r3, [r4, #1]
 800c914:	2b2a      	cmp	r3, #42	; 0x2a
 800c916:	d134      	bne.n	800c982 <_svfiprintf_r+0x186>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	3402      	adds	r4, #2
 800c91c:	1d1a      	adds	r2, r3, #4
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	9203      	str	r2, [sp, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	bfb8      	it	lt
 800c926:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c92a:	9305      	str	r3, [sp, #20]
 800c92c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9e8 <_svfiprintf_r+0x1ec>
 800c930:	2203      	movs	r2, #3
 800c932:	4650      	mov	r0, sl
 800c934:	7821      	ldrb	r1, [r4, #0]
 800c936:	f000 fa3c 	bl	800cdb2 <memchr>
 800c93a:	b138      	cbz	r0, 800c94c <_svfiprintf_r+0x150>
 800c93c:	2240      	movs	r2, #64	; 0x40
 800c93e:	9b04      	ldr	r3, [sp, #16]
 800c940:	eba0 000a 	sub.w	r0, r0, sl
 800c944:	4082      	lsls	r2, r0
 800c946:	4313      	orrs	r3, r2
 800c948:	3401      	adds	r4, #1
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	2206      	movs	r2, #6
 800c952:	4826      	ldr	r0, [pc, #152]	; (800c9ec <_svfiprintf_r+0x1f0>)
 800c954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c958:	f000 fa2b 	bl	800cdb2 <memchr>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d038      	beq.n	800c9d2 <_svfiprintf_r+0x1d6>
 800c960:	4b23      	ldr	r3, [pc, #140]	; (800c9f0 <_svfiprintf_r+0x1f4>)
 800c962:	bb1b      	cbnz	r3, 800c9ac <_svfiprintf_r+0x1b0>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	3307      	adds	r3, #7
 800c968:	f023 0307 	bic.w	r3, r3, #7
 800c96c:	3308      	adds	r3, #8
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	4433      	add	r3, r6
 800c974:	9309      	str	r3, [sp, #36]	; 0x24
 800c976:	e768      	b.n	800c84a <_svfiprintf_r+0x4e>
 800c978:	460c      	mov	r4, r1
 800c97a:	2001      	movs	r0, #1
 800c97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c980:	e7a6      	b.n	800c8d0 <_svfiprintf_r+0xd4>
 800c982:	2300      	movs	r3, #0
 800c984:	f04f 0c0a 	mov.w	ip, #10
 800c988:	4619      	mov	r1, r3
 800c98a:	3401      	adds	r4, #1
 800c98c:	9305      	str	r3, [sp, #20]
 800c98e:	4620      	mov	r0, r4
 800c990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c994:	3a30      	subs	r2, #48	; 0x30
 800c996:	2a09      	cmp	r2, #9
 800c998:	d903      	bls.n	800c9a2 <_svfiprintf_r+0x1a6>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c6      	beq.n	800c92c <_svfiprintf_r+0x130>
 800c99e:	9105      	str	r1, [sp, #20]
 800c9a0:	e7c4      	b.n	800c92c <_svfiprintf_r+0x130>
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9aa:	e7f0      	b.n	800c98e <_svfiprintf_r+0x192>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	462a      	mov	r2, r5
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <_svfiprintf_r+0x1f8>)
 800c9b6:	a904      	add	r1, sp, #16
 800c9b8:	f3af 8000 	nop.w
 800c9bc:	1c42      	adds	r2, r0, #1
 800c9be:	4606      	mov	r6, r0
 800c9c0:	d1d6      	bne.n	800c970 <_svfiprintf_r+0x174>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	065b      	lsls	r3, r3, #25
 800c9c6:	f53f af2d 	bmi.w	800c824 <_svfiprintf_r+0x28>
 800c9ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9cc:	b01d      	add	sp, #116	; 0x74
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	ab03      	add	r3, sp, #12
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	462a      	mov	r2, r5
 800c9d8:	4638      	mov	r0, r7
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <_svfiprintf_r+0x1f8>)
 800c9dc:	a904      	add	r1, sp, #16
 800c9de:	f000 f87d 	bl	800cadc <_printf_i>
 800c9e2:	e7eb      	b.n	800c9bc <_svfiprintf_r+0x1c0>
 800c9e4:	0800dd4f 	.word	0x0800dd4f
 800c9e8:	0800dd55 	.word	0x0800dd55
 800c9ec:	0800dd59 	.word	0x0800dd59
 800c9f0:	00000000 	.word	0x00000000
 800c9f4:	0800c749 	.word	0x0800c749

0800c9f8 <_printf_common>:
 800c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	4616      	mov	r6, r2
 800c9fe:	4699      	mov	r9, r3
 800ca00:	688a      	ldr	r2, [r1, #8]
 800ca02:	690b      	ldr	r3, [r1, #16]
 800ca04:	4607      	mov	r7, r0
 800ca06:	4293      	cmp	r3, r2
 800ca08:	bfb8      	it	lt
 800ca0a:	4613      	movlt	r3, r2
 800ca0c:	6033      	str	r3, [r6, #0]
 800ca0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca12:	460c      	mov	r4, r1
 800ca14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca18:	b10a      	cbz	r2, 800ca1e <_printf_common+0x26>
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	6033      	str	r3, [r6, #0]
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	0699      	lsls	r1, r3, #26
 800ca22:	bf42      	ittt	mi
 800ca24:	6833      	ldrmi	r3, [r6, #0]
 800ca26:	3302      	addmi	r3, #2
 800ca28:	6033      	strmi	r3, [r6, #0]
 800ca2a:	6825      	ldr	r5, [r4, #0]
 800ca2c:	f015 0506 	ands.w	r5, r5, #6
 800ca30:	d106      	bne.n	800ca40 <_printf_common+0x48>
 800ca32:	f104 0a19 	add.w	sl, r4, #25
 800ca36:	68e3      	ldr	r3, [r4, #12]
 800ca38:	6832      	ldr	r2, [r6, #0]
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	42ab      	cmp	r3, r5
 800ca3e:	dc2b      	bgt.n	800ca98 <_printf_common+0xa0>
 800ca40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca44:	1e13      	subs	r3, r2, #0
 800ca46:	6822      	ldr	r2, [r4, #0]
 800ca48:	bf18      	it	ne
 800ca4a:	2301      	movne	r3, #1
 800ca4c:	0692      	lsls	r2, r2, #26
 800ca4e:	d430      	bmi.n	800cab2 <_printf_common+0xba>
 800ca50:	4649      	mov	r1, r9
 800ca52:	4638      	mov	r0, r7
 800ca54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca58:	47c0      	blx	r8
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	d023      	beq.n	800caa6 <_printf_common+0xae>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	6922      	ldr	r2, [r4, #16]
 800ca62:	f003 0306 	and.w	r3, r3, #6
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	bf14      	ite	ne
 800ca6a:	2500      	movne	r5, #0
 800ca6c:	6833      	ldreq	r3, [r6, #0]
 800ca6e:	f04f 0600 	mov.w	r6, #0
 800ca72:	bf08      	it	eq
 800ca74:	68e5      	ldreq	r5, [r4, #12]
 800ca76:	f104 041a 	add.w	r4, r4, #26
 800ca7a:	bf08      	it	eq
 800ca7c:	1aed      	subeq	r5, r5, r3
 800ca7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca82:	bf08      	it	eq
 800ca84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	bfc4      	itt	gt
 800ca8c:	1a9b      	subgt	r3, r3, r2
 800ca8e:	18ed      	addgt	r5, r5, r3
 800ca90:	42b5      	cmp	r5, r6
 800ca92:	d11a      	bne.n	800caca <_printf_common+0xd2>
 800ca94:	2000      	movs	r0, #0
 800ca96:	e008      	b.n	800caaa <_printf_common+0xb2>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	4652      	mov	r2, sl
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	4638      	mov	r0, r7
 800caa0:	47c0      	blx	r8
 800caa2:	3001      	adds	r0, #1
 800caa4:	d103      	bne.n	800caae <_printf_common+0xb6>
 800caa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caae:	3501      	adds	r5, #1
 800cab0:	e7c1      	b.n	800ca36 <_printf_common+0x3e>
 800cab2:	2030      	movs	r0, #48	; 0x30
 800cab4:	18e1      	adds	r1, r4, r3
 800cab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cac0:	4422      	add	r2, r4
 800cac2:	3302      	adds	r3, #2
 800cac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cac8:	e7c2      	b.n	800ca50 <_printf_common+0x58>
 800caca:	2301      	movs	r3, #1
 800cacc:	4622      	mov	r2, r4
 800cace:	4649      	mov	r1, r9
 800cad0:	4638      	mov	r0, r7
 800cad2:	47c0      	blx	r8
 800cad4:	3001      	adds	r0, #1
 800cad6:	d0e6      	beq.n	800caa6 <_printf_common+0xae>
 800cad8:	3601      	adds	r6, #1
 800cada:	e7d9      	b.n	800ca90 <_printf_common+0x98>

0800cadc <_printf_i>:
 800cadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cae0:	7e0f      	ldrb	r7, [r1, #24]
 800cae2:	4691      	mov	r9, r2
 800cae4:	2f78      	cmp	r7, #120	; 0x78
 800cae6:	4680      	mov	r8, r0
 800cae8:	460c      	mov	r4, r1
 800caea:	469a      	mov	sl, r3
 800caec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caf2:	d807      	bhi.n	800cb04 <_printf_i+0x28>
 800caf4:	2f62      	cmp	r7, #98	; 0x62
 800caf6:	d80a      	bhi.n	800cb0e <_printf_i+0x32>
 800caf8:	2f00      	cmp	r7, #0
 800cafa:	f000 80d5 	beq.w	800cca8 <_printf_i+0x1cc>
 800cafe:	2f58      	cmp	r7, #88	; 0x58
 800cb00:	f000 80c1 	beq.w	800cc86 <_printf_i+0x1aa>
 800cb04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb0c:	e03a      	b.n	800cb84 <_printf_i+0xa8>
 800cb0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb12:	2b15      	cmp	r3, #21
 800cb14:	d8f6      	bhi.n	800cb04 <_printf_i+0x28>
 800cb16:	a101      	add	r1, pc, #4	; (adr r1, 800cb1c <_printf_i+0x40>)
 800cb18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb1c:	0800cb75 	.word	0x0800cb75
 800cb20:	0800cb89 	.word	0x0800cb89
 800cb24:	0800cb05 	.word	0x0800cb05
 800cb28:	0800cb05 	.word	0x0800cb05
 800cb2c:	0800cb05 	.word	0x0800cb05
 800cb30:	0800cb05 	.word	0x0800cb05
 800cb34:	0800cb89 	.word	0x0800cb89
 800cb38:	0800cb05 	.word	0x0800cb05
 800cb3c:	0800cb05 	.word	0x0800cb05
 800cb40:	0800cb05 	.word	0x0800cb05
 800cb44:	0800cb05 	.word	0x0800cb05
 800cb48:	0800cc8f 	.word	0x0800cc8f
 800cb4c:	0800cbb5 	.word	0x0800cbb5
 800cb50:	0800cc49 	.word	0x0800cc49
 800cb54:	0800cb05 	.word	0x0800cb05
 800cb58:	0800cb05 	.word	0x0800cb05
 800cb5c:	0800ccb1 	.word	0x0800ccb1
 800cb60:	0800cb05 	.word	0x0800cb05
 800cb64:	0800cbb5 	.word	0x0800cbb5
 800cb68:	0800cb05 	.word	0x0800cb05
 800cb6c:	0800cb05 	.word	0x0800cb05
 800cb70:	0800cc51 	.word	0x0800cc51
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	1d1a      	adds	r2, r3, #4
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	602a      	str	r2, [r5, #0]
 800cb7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb84:	2301      	movs	r3, #1
 800cb86:	e0a0      	b.n	800ccca <_printf_i+0x1ee>
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	0607      	lsls	r7, r0, #24
 800cb8e:	f103 0104 	add.w	r1, r3, #4
 800cb92:	6029      	str	r1, [r5, #0]
 800cb94:	d501      	bpl.n	800cb9a <_printf_i+0xbe>
 800cb96:	681e      	ldr	r6, [r3, #0]
 800cb98:	e003      	b.n	800cba2 <_printf_i+0xc6>
 800cb9a:	0646      	lsls	r6, r0, #25
 800cb9c:	d5fb      	bpl.n	800cb96 <_printf_i+0xba>
 800cb9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cba2:	2e00      	cmp	r6, #0
 800cba4:	da03      	bge.n	800cbae <_printf_i+0xd2>
 800cba6:	232d      	movs	r3, #45	; 0x2d
 800cba8:	4276      	negs	r6, r6
 800cbaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbae:	230a      	movs	r3, #10
 800cbb0:	4859      	ldr	r0, [pc, #356]	; (800cd18 <_printf_i+0x23c>)
 800cbb2:	e012      	b.n	800cbda <_printf_i+0xfe>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	6820      	ldr	r0, [r4, #0]
 800cbb8:	1d19      	adds	r1, r3, #4
 800cbba:	6029      	str	r1, [r5, #0]
 800cbbc:	0605      	lsls	r5, r0, #24
 800cbbe:	d501      	bpl.n	800cbc4 <_printf_i+0xe8>
 800cbc0:	681e      	ldr	r6, [r3, #0]
 800cbc2:	e002      	b.n	800cbca <_printf_i+0xee>
 800cbc4:	0641      	lsls	r1, r0, #25
 800cbc6:	d5fb      	bpl.n	800cbc0 <_printf_i+0xe4>
 800cbc8:	881e      	ldrh	r6, [r3, #0]
 800cbca:	2f6f      	cmp	r7, #111	; 0x6f
 800cbcc:	bf0c      	ite	eq
 800cbce:	2308      	moveq	r3, #8
 800cbd0:	230a      	movne	r3, #10
 800cbd2:	4851      	ldr	r0, [pc, #324]	; (800cd18 <_printf_i+0x23c>)
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbda:	6865      	ldr	r5, [r4, #4]
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	bfa8      	it	ge
 800cbe0:	6821      	ldrge	r1, [r4, #0]
 800cbe2:	60a5      	str	r5, [r4, #8]
 800cbe4:	bfa4      	itt	ge
 800cbe6:	f021 0104 	bicge.w	r1, r1, #4
 800cbea:	6021      	strge	r1, [r4, #0]
 800cbec:	b90e      	cbnz	r6, 800cbf2 <_printf_i+0x116>
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	d04b      	beq.n	800cc8a <_printf_i+0x1ae>
 800cbf2:	4615      	mov	r5, r2
 800cbf4:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbf8:	fb03 6711 	mls	r7, r3, r1, r6
 800cbfc:	5dc7      	ldrb	r7, [r0, r7]
 800cbfe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc02:	4637      	mov	r7, r6
 800cc04:	42bb      	cmp	r3, r7
 800cc06:	460e      	mov	r6, r1
 800cc08:	d9f4      	bls.n	800cbf4 <_printf_i+0x118>
 800cc0a:	2b08      	cmp	r3, #8
 800cc0c:	d10b      	bne.n	800cc26 <_printf_i+0x14a>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	07de      	lsls	r6, r3, #31
 800cc12:	d508      	bpl.n	800cc26 <_printf_i+0x14a>
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	6861      	ldr	r1, [r4, #4]
 800cc18:	4299      	cmp	r1, r3
 800cc1a:	bfde      	ittt	le
 800cc1c:	2330      	movle	r3, #48	; 0x30
 800cc1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc26:	1b52      	subs	r2, r2, r5
 800cc28:	6122      	str	r2, [r4, #16]
 800cc2a:	464b      	mov	r3, r9
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	4640      	mov	r0, r8
 800cc30:	f8cd a000 	str.w	sl, [sp]
 800cc34:	aa03      	add	r2, sp, #12
 800cc36:	f7ff fedf 	bl	800c9f8 <_printf_common>
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	d14a      	bne.n	800ccd4 <_printf_i+0x1f8>
 800cc3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc42:	b004      	add	sp, #16
 800cc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	f043 0320 	orr.w	r3, r3, #32
 800cc4e:	6023      	str	r3, [r4, #0]
 800cc50:	2778      	movs	r7, #120	; 0x78
 800cc52:	4832      	ldr	r0, [pc, #200]	; (800cd1c <_printf_i+0x240>)
 800cc54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	6829      	ldr	r1, [r5, #0]
 800cc5c:	061f      	lsls	r7, r3, #24
 800cc5e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc62:	d402      	bmi.n	800cc6a <_printf_i+0x18e>
 800cc64:	065f      	lsls	r7, r3, #25
 800cc66:	bf48      	it	mi
 800cc68:	b2b6      	uxthmi	r6, r6
 800cc6a:	07df      	lsls	r7, r3, #31
 800cc6c:	bf48      	it	mi
 800cc6e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc72:	6029      	str	r1, [r5, #0]
 800cc74:	bf48      	it	mi
 800cc76:	6023      	strmi	r3, [r4, #0]
 800cc78:	b91e      	cbnz	r6, 800cc82 <_printf_i+0x1a6>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f023 0320 	bic.w	r3, r3, #32
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	2310      	movs	r3, #16
 800cc84:	e7a6      	b.n	800cbd4 <_printf_i+0xf8>
 800cc86:	4824      	ldr	r0, [pc, #144]	; (800cd18 <_printf_i+0x23c>)
 800cc88:	e7e4      	b.n	800cc54 <_printf_i+0x178>
 800cc8a:	4615      	mov	r5, r2
 800cc8c:	e7bd      	b.n	800cc0a <_printf_i+0x12e>
 800cc8e:	682b      	ldr	r3, [r5, #0]
 800cc90:	6826      	ldr	r6, [r4, #0]
 800cc92:	1d18      	adds	r0, r3, #4
 800cc94:	6961      	ldr	r1, [r4, #20]
 800cc96:	6028      	str	r0, [r5, #0]
 800cc98:	0635      	lsls	r5, r6, #24
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	d501      	bpl.n	800cca2 <_printf_i+0x1c6>
 800cc9e:	6019      	str	r1, [r3, #0]
 800cca0:	e002      	b.n	800cca8 <_printf_i+0x1cc>
 800cca2:	0670      	lsls	r0, r6, #25
 800cca4:	d5fb      	bpl.n	800cc9e <_printf_i+0x1c2>
 800cca6:	8019      	strh	r1, [r3, #0]
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4615      	mov	r5, r2
 800ccac:	6123      	str	r3, [r4, #16]
 800ccae:	e7bc      	b.n	800cc2a <_printf_i+0x14e>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	1d1a      	adds	r2, r3, #4
 800ccb6:	602a      	str	r2, [r5, #0]
 800ccb8:	681d      	ldr	r5, [r3, #0]
 800ccba:	6862      	ldr	r2, [r4, #4]
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f000 f878 	bl	800cdb2 <memchr>
 800ccc2:	b108      	cbz	r0, 800ccc8 <_printf_i+0x1ec>
 800ccc4:	1b40      	subs	r0, r0, r5
 800ccc6:	6060      	str	r0, [r4, #4]
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	2300      	movs	r3, #0
 800ccce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccd2:	e7aa      	b.n	800cc2a <_printf_i+0x14e>
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	4649      	mov	r1, r9
 800ccd8:	4640      	mov	r0, r8
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	47d0      	blx	sl
 800ccde:	3001      	adds	r0, #1
 800cce0:	d0ad      	beq.n	800cc3e <_printf_i+0x162>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	079b      	lsls	r3, r3, #30
 800cce6:	d413      	bmi.n	800cd10 <_printf_i+0x234>
 800cce8:	68e0      	ldr	r0, [r4, #12]
 800ccea:	9b03      	ldr	r3, [sp, #12]
 800ccec:	4298      	cmp	r0, r3
 800ccee:	bfb8      	it	lt
 800ccf0:	4618      	movlt	r0, r3
 800ccf2:	e7a6      	b.n	800cc42 <_printf_i+0x166>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	4632      	mov	r2, r6
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	47d0      	blx	sl
 800ccfe:	3001      	adds	r0, #1
 800cd00:	d09d      	beq.n	800cc3e <_printf_i+0x162>
 800cd02:	3501      	adds	r5, #1
 800cd04:	68e3      	ldr	r3, [r4, #12]
 800cd06:	9903      	ldr	r1, [sp, #12]
 800cd08:	1a5b      	subs	r3, r3, r1
 800cd0a:	42ab      	cmp	r3, r5
 800cd0c:	dcf2      	bgt.n	800ccf4 <_printf_i+0x218>
 800cd0e:	e7eb      	b.n	800cce8 <_printf_i+0x20c>
 800cd10:	2500      	movs	r5, #0
 800cd12:	f104 0619 	add.w	r6, r4, #25
 800cd16:	e7f5      	b.n	800cd04 <_printf_i+0x228>
 800cd18:	0800dd60 	.word	0x0800dd60
 800cd1c:	0800dd71 	.word	0x0800dd71

0800cd20 <_realloc_r>:
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	4680      	mov	r8, r0
 800cd26:	4614      	mov	r4, r2
 800cd28:	460e      	mov	r6, r1
 800cd2a:	b921      	cbnz	r1, 800cd36 <_realloc_r+0x16>
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd32:	f7ff bb77 	b.w	800c424 <_malloc_r>
 800cd36:	b92a      	cbnz	r2, 800cd44 <_realloc_r+0x24>
 800cd38:	f7ff fcbe 	bl	800c6b8 <_free_r>
 800cd3c:	4625      	mov	r5, r4
 800cd3e:	4628      	mov	r0, r5
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	f000 f851 	bl	800cdea <_malloc_usable_size_r>
 800cd48:	4284      	cmp	r4, r0
 800cd4a:	4607      	mov	r7, r0
 800cd4c:	d802      	bhi.n	800cd54 <_realloc_r+0x34>
 800cd4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd52:	d812      	bhi.n	800cd7a <_realloc_r+0x5a>
 800cd54:	4621      	mov	r1, r4
 800cd56:	4640      	mov	r0, r8
 800cd58:	f7ff fb64 	bl	800c424 <_malloc_r>
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d0ed      	beq.n	800cd3e <_realloc_r+0x1e>
 800cd62:	42bc      	cmp	r4, r7
 800cd64:	4622      	mov	r2, r4
 800cd66:	4631      	mov	r1, r6
 800cd68:	bf28      	it	cs
 800cd6a:	463a      	movcs	r2, r7
 800cd6c:	f000 f82f 	bl	800cdce <memcpy>
 800cd70:	4631      	mov	r1, r6
 800cd72:	4640      	mov	r0, r8
 800cd74:	f7ff fca0 	bl	800c6b8 <_free_r>
 800cd78:	e7e1      	b.n	800cd3e <_realloc_r+0x1e>
 800cd7a:	4635      	mov	r5, r6
 800cd7c:	e7df      	b.n	800cd3e <_realloc_r+0x1e>

0800cd7e <memmove>:
 800cd7e:	4288      	cmp	r0, r1
 800cd80:	b510      	push	{r4, lr}
 800cd82:	eb01 0402 	add.w	r4, r1, r2
 800cd86:	d902      	bls.n	800cd8e <memmove+0x10>
 800cd88:	4284      	cmp	r4, r0
 800cd8a:	4623      	mov	r3, r4
 800cd8c:	d807      	bhi.n	800cd9e <memmove+0x20>
 800cd8e:	1e43      	subs	r3, r0, #1
 800cd90:	42a1      	cmp	r1, r4
 800cd92:	d008      	beq.n	800cda6 <memmove+0x28>
 800cd94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd98:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd9c:	e7f8      	b.n	800cd90 <memmove+0x12>
 800cd9e:	4601      	mov	r1, r0
 800cda0:	4402      	add	r2, r0
 800cda2:	428a      	cmp	r2, r1
 800cda4:	d100      	bne.n	800cda8 <memmove+0x2a>
 800cda6:	bd10      	pop	{r4, pc}
 800cda8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdb0:	e7f7      	b.n	800cda2 <memmove+0x24>

0800cdb2 <memchr>:
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	b2c9      	uxtb	r1, r1
 800cdb8:	4402      	add	r2, r0
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	d101      	bne.n	800cdc4 <memchr+0x12>
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	e003      	b.n	800cdcc <memchr+0x1a>
 800cdc4:	7804      	ldrb	r4, [r0, #0]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	428c      	cmp	r4, r1
 800cdca:	d1f6      	bne.n	800cdba <memchr+0x8>
 800cdcc:	bd10      	pop	{r4, pc}

0800cdce <memcpy>:
 800cdce:	440a      	add	r2, r1
 800cdd0:	4291      	cmp	r1, r2
 800cdd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdd6:	d100      	bne.n	800cdda <memcpy+0xc>
 800cdd8:	4770      	bx	lr
 800cdda:	b510      	push	{r4, lr}
 800cddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cde0:	4291      	cmp	r1, r2
 800cde2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cde6:	d1f9      	bne.n	800cddc <memcpy+0xe>
 800cde8:	bd10      	pop	{r4, pc}

0800cdea <_malloc_usable_size_r>:
 800cdea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdee:	1f18      	subs	r0, r3, #4
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	bfbc      	itt	lt
 800cdf4:	580b      	ldrlt	r3, [r1, r0]
 800cdf6:	18c0      	addlt	r0, r0, r3
 800cdf8:	4770      	bx	lr
	...

0800cdfc <_init>:
 800cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfe:	bf00      	nop
 800ce00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce02:	bc08      	pop	{r3}
 800ce04:	469e      	mov	lr, r3
 800ce06:	4770      	bx	lr

0800ce08 <_fini>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	bf00      	nop
 800ce0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce0e:	bc08      	pop	{r3}
 800ce10:	469e      	mov	lr, r3
 800ce12:	4770      	bx	lr
