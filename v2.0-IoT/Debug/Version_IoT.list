
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d540  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d724  0800d724  0001d724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e628  0800e628  00020a10  2**0
                  CONTENTS
  4 .ARM          00000000  0800e628  0800e628  00020a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e628  0800e628  00020a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e628  0800e628  0001e628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e62c  0800e62c  0001e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0800e630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a10  0800f040  00020a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  0800f040  0002102c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a39  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136cc  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026fd  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0e  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018976  00000000  00000000  00053718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd86  00000000  00000000  0006c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005204  00000000  00000000  0010be14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a10 	.word	0x20000a10
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d70c 	.word	0x0800d70c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a14 	.word	0x20000a14
 8000220:	0800d70c 	.word	0x0800d70c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c fe44 	bl	800ced0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c f812 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 ff42 	bl	80090e8 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fe32 	bl	800ced0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c f800 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 ff30 	bl	80090e8 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c fe20 	bl	800ced0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b ffee 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 ff1e 	bl	80090e8 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c fe0e 	bl	800ced0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b ffdc 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 ff0c 	bl	80090e8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c fe19 	bl	800cf20 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c fe06 	bl	800cf20 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fdca 	bl	800ced0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b ff98 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 fec8 	bl	80090e8 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d724 	.word	0x0800d724
 8000364:	20000a2c 	.word	0x20000a2c
 8000368:	0800d734 	.word	0x0800d734
 800036c:	0800d740 	.word	0x0800d740
 8000370:	0800d748 	.word	0x0800d748
 8000374:	0800d758 	.word	0x0800d758
 8000378:	0800d764 	.word	0x0800d764
 800037c:	0800d768 	.word	0x0800d768
 8000380:	0800d76c 	.word	0x0800d76c

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c fd8f 	bl	800ced0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b ff5a 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 fe8a 	bl	80090e8 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fd6d 	bl	800ced0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fd5d 	bl	800ced0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b ff25 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 fe55 	bl	80090e8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b ff11 	bl	800c280 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 fe41 	bl	80090e8 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d770 	.word	0x0800d770
 8000474:	0800d780 	.word	0x0800d780
 8000478:	20000a2c 	.word	0x20000a2c
 800047c:	0800d7fc 	.word	0x0800d7fc
 8000480:	0800d7a0 	.word	0x0800d7a0
 8000484:	0800d810 	.word	0x0800d810

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a fa05 	bl	800a8da <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a f9f1 	bl	800a8c0 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 fd54 	bl	800a000 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000df8 	.word	0x20000df8
 8000564:	20000b26 	.word	0x20000b26

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a f995 	bl	800a8da <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a f981 	bl	800a8c0 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fce4 	bl	800a000 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000df8 	.word	0x20000df8
 8000644:	20000b26 	.word	0x20000b26

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f00a f90f 	bl	800a8da <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f00a f8fb 	bl	800a8c0 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fc5e 	bl	800a000 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000df8 	.word	0x20000df8
 8000750:	20000b26 	.word	0x20000b26

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f891 	bl	8000898 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fc64 	bl	80090e8 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_clear_line>:

void lcd_clear_line(int line) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if(line == 1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d105      	bne.n	800083e <lcd_clear_line+0x1a>
		lcd_line1();
 8000832:	f000 f822 	bl	800087a <lcd_line1>
		lcd_send_cmd(0x01);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe26 	bl	8000488 <lcd_send_cmd>
	}  else {
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}
 800083c:	e004      	b.n	8000848 <lcd_clear_line+0x24>
		lcd_line2();
 800083e:	f000 f823 	bl	8000888 <lcd_line2>
		lcd_send_cmd(0x01);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fe20 	bl	8000488 <lcd_send_cmd>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <lcd_delete_char>:

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff87 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff ff01 	bl	8000674 <lcd_send_char>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <lcd_line1>:

void lcd_line1(void) {
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f7ff fe02 	bl	8000488 <lcd_send_cmd>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <lcd_line2>:

void lcd_line2(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0xC0);
 800088c:	20c0      	movs	r0, #192	; 0xc0
 800088e:	f7ff fdfb 	bl	8000488 <lcd_send_cmd>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <lcd_backlight>:

void lcd_backlight(char state) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <lcd_backlight+0x20>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fded 	bl	8000488 <lcd_send_cmd>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000b26 	.word	0x20000b26

080008bc <lcd_cursor>:

void lcd_cursor(int state) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d106      	bne.n	80008d8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80008ca:	200e      	movs	r0, #14
 80008cc:	f7ff fddc 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80008d0:	200f      	movs	r0, #15
 80008d2:	f7ff fdd9 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80008d6:	e002      	b.n	80008de <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80008d8:	200c      	movs	r0, #12
 80008da:	f7ff fdd5 	bl	8000488 <lcd_send_cmd>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <__NVIC_SystemReset+0x24>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008fa:	4904      	ldr	r1, [pc, #16]	; (800090c <__NVIC_SystemReset+0x24>)
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_SystemReset+0x28>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <__NVIC_SystemReset+0x20>
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0004 	.word	0x05fa0004

08000914 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fc81 	bl	8000224 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	3301      	adds	r3, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f00c f9dc 	bl	800cce4 <malloc>
 800092c:	4603      	mov	r3, r0
 800092e:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <copyText+0x2a>
        strcpy(result, text);
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f00c fb3d 	bl	800cfb8 <strcpy>
    }
    return result;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f008 fbc8 	bl	80090e8 <HAL_Delay>
	lcd_clear();
 8000958:	f7ff ff5a 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d143      	bne.n	80009ea <printTemplate+0xa2>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d140      	bne.n	80009ea <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000968:	4ab6      	ldr	r2, [pc, #728]	; (8000c44 <printTemplate+0x2fc>)
 800096a:	2101      	movs	r1, #1
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff23 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 8000972:	4ab5      	ldr	r2, [pc, #724]	; (8000c48 <printTemplate+0x300>)
 8000974:	2103      	movs	r1, #3
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff ff1e 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 800097c:	4ab3      	ldr	r2, [pc, #716]	; (8000c4c <printTemplate+0x304>)
 800097e:	2104      	movs	r1, #4
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff ff19 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 8000986:	4ab2      	ldr	r2, [pc, #712]	; (8000c50 <printTemplate+0x308>)
 8000988:	2105      	movs	r1, #5
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff ff14 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000990:	4ab0      	ldr	r2, [pc, #704]	; (8000c54 <printTemplate+0x30c>)
 8000992:	2106      	movs	r1, #6
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff ff0f 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 800099a:	4aaf      	ldr	r2, [pc, #700]	; (8000c58 <printTemplate+0x310>)
 800099c:	2107      	movs	r1, #7
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff ff0a 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 80009a4:	4aad      	ldr	r2, [pc, #692]	; (8000c5c <printTemplate+0x314>)
 80009a6:	210a      	movs	r1, #10
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff ff05 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 80009ae:	4aac      	ldr	r2, [pc, #688]	; (8000c60 <printTemplate+0x318>)
 80009b0:	210b      	movs	r1, #11
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff ff00 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 80009b8:	4aaa      	ldr	r2, [pc, #680]	; (8000c64 <printTemplate+0x31c>)
 80009ba:	210c      	movs	r1, #12
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fefb 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 80009c2:	4aa9      	ldr	r2, [pc, #676]	; (8000c68 <printTemplate+0x320>)
 80009c4:	210d      	movs	r1, #13
 80009c6:	2002      	movs	r0, #2
 80009c8:	f7ff fef6 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 80009cc:	4aa7      	ldr	r2, [pc, #668]	; (8000c6c <printTemplate+0x324>)
 80009ce:	210e      	movs	r1, #14
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fef1 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 80009d6:	4aa6      	ldr	r2, [pc, #664]	; (8000c70 <printTemplate+0x328>)
 80009d8:	2105      	movs	r1, #5
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff feec 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 80009e0:	2103      	movs	r1, #3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fec9 	bl	800077a <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009e8:	e19d      	b.n	8000d26 <printTemplate+0x3de>
	} else if(type == 2) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	f040 80b8 	bne.w	8000b62 <printTemplate+0x21a>
		if(page == 1) {
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d123      	bne.n	8000a40 <printTemplate+0xf8>
			lcd_clear();
 80009f8:	f7ff ff0a 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f008 fb73 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a02:	4a9c      	ldr	r2, [pc, #624]	; (8000c74 <printTemplate+0x32c>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fed6 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID <= 10)) {
 8000a0c:	4b9a      	ldr	r3, [pc, #616]	; (8000c78 <printTemplate+0x330>)
 8000a0e:	2b0a      	cmp	r3, #10
 8000a10:	d801      	bhi.n	8000a16 <printTemplate+0xce>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <printTemplate+0xd0>
 8000a16:	2300      	movs	r3, #0
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d005      	beq.n	8000a2a <printTemplate+0xe2>
				lcd_print(1, 7, wifiSSID);
 8000a1e:	4a96      	ldr	r2, [pc, #600]	; (8000c78 <printTemplate+0x330>)
 8000a20:	2107      	movs	r1, #7
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fec8 	bl	80007b8 <lcd_print>
 8000a28:	e004      	b.n	8000a34 <printTemplate+0xec>
				slideText(wifiSSID, 7, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	4892      	ldr	r0, [pc, #584]	; (8000c78 <printTemplate+0x330>)
 8000a30:	f000 fda2 	bl	8001578 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000a34:	4a91      	ldr	r2, [pc, #580]	; (8000c7c <printTemplate+0x334>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff febd 	bl	80007b8 <lcd_print>
}
 8000a3e:	e172      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 2) {
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d120      	bne.n	8000a88 <printTemplate+0x140>
			lcd_clear();
 8000a46:	f7ff fee3 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f008 fb4c 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a50:	4a88      	ldr	r2, [pc, #544]	; (8000c74 <printTemplate+0x32c>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff feaf 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a5a:	4887      	ldr	r0, [pc, #540]	; (8000c78 <printTemplate+0x330>)
 8000a5c:	f7ff fbe2 	bl	8000224 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b0a      	cmp	r3, #10
 8000a64:	d805      	bhi.n	8000a72 <printTemplate+0x12a>
				lcd_print(1, 7, wifiSSID);
 8000a66:	4a84      	ldr	r2, [pc, #528]	; (8000c78 <printTemplate+0x330>)
 8000a68:	2107      	movs	r1, #7
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fea4 	bl	80007b8 <lcd_print>
 8000a70:	e004      	b.n	8000a7c <printTemplate+0x134>
				slideText(wifiSSID, 7, 1);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2107      	movs	r1, #7
 8000a76:	4880      	ldr	r0, [pc, #512]	; (8000c78 <printTemplate+0x330>)
 8000a78:	f000 fd7e 	bl	8001578 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a7c:	4a80      	ldr	r2, [pc, #512]	; (8000c80 <printTemplate+0x338>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fe99 	bl	80007b8 <lcd_print>
}
 8000a86:	e14e      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 3) {
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d120      	bne.n	8000ad0 <printTemplate+0x188>
			lcd_clear();
 8000a8e:	f7ff febf 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f008 fb28 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a98:	4a76      	ldr	r2, [pc, #472]	; (8000c74 <printTemplate+0x32c>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fe8b 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000aa2:	4875      	ldr	r0, [pc, #468]	; (8000c78 <printTemplate+0x330>)
 8000aa4:	f7ff fbbe 	bl	8000224 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d805      	bhi.n	8000aba <printTemplate+0x172>
				lcd_print(1, 7, wifiSSID);
 8000aae:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <printTemplate+0x330>)
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fe80 	bl	80007b8 <lcd_print>
 8000ab8:	e004      	b.n	8000ac4 <printTemplate+0x17c>
				slideText(wifiSSID, 7, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2107      	movs	r1, #7
 8000abe:	486e      	ldr	r0, [pc, #440]	; (8000c78 <printTemplate+0x330>)
 8000ac0:	f000 fd5a 	bl	8001578 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ac4:	4a6f      	ldr	r2, [pc, #444]	; (8000c84 <printTemplate+0x33c>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f7ff fe75 	bl	80007b8 <lcd_print>
}
 8000ace:	e12a      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 4) {
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d120      	bne.n	8000b18 <printTemplate+0x1d0>
			lcd_clear();
 8000ad6:	f7ff fe9b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f008 fb04 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ae0:	4a64      	ldr	r2, [pc, #400]	; (8000c74 <printTemplate+0x32c>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe67 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000aea:	4863      	ldr	r0, [pc, #396]	; (8000c78 <printTemplate+0x330>)
 8000aec:	f7ff fb9a 	bl	8000224 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b0a      	cmp	r3, #10
 8000af4:	d805      	bhi.n	8000b02 <printTemplate+0x1ba>
				lcd_print(1, 7, wifiSSID);
 8000af6:	4a60      	ldr	r2, [pc, #384]	; (8000c78 <printTemplate+0x330>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fe5c 	bl	80007b8 <lcd_print>
 8000b00:	e004      	b.n	8000b0c <printTemplate+0x1c4>
				slideText(wifiSSID, 7, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2107      	movs	r1, #7
 8000b06:	485c      	ldr	r0, [pc, #368]	; (8000c78 <printTemplate+0x330>)
 8000b08:	f000 fd36 	bl	8001578 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b0c:	4a5e      	ldr	r2, [pc, #376]	; (8000c88 <printTemplate+0x340>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff fe51 	bl	80007b8 <lcd_print>
}
 8000b16:	e106      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 5) {
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	f040 8103 	bne.w	8000d26 <printTemplate+0x3de>
			lcd_clear();
 8000b20:	f7ff fe76 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f008 fadf 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000b2a:	4a52      	ldr	r2, [pc, #328]	; (8000c74 <printTemplate+0x32c>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe42 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000b34:	4850      	ldr	r0, [pc, #320]	; (8000c78 <printTemplate+0x330>)
 8000b36:	f7ff fb75 	bl	8000224 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b0a      	cmp	r3, #10
 8000b3e:	d805      	bhi.n	8000b4c <printTemplate+0x204>
				lcd_print(1, 7, wifiSSID);
 8000b40:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <printTemplate+0x330>)
 8000b42:	2107      	movs	r1, #7
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fe37 	bl	80007b8 <lcd_print>
 8000b4a:	e004      	b.n	8000b56 <printTemplate+0x20e>
				slideText(wifiSSID, 7, 1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2107      	movs	r1, #7
 8000b50:	4849      	ldr	r0, [pc, #292]	; (8000c78 <printTemplate+0x330>)
 8000b52:	f000 fd11 	bl	8001578 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b56:	4a4d      	ldr	r2, [pc, #308]	; (8000c8c <printTemplate+0x344>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f7ff fe2c 	bl	80007b8 <lcd_print>
}
 8000b60:	e0e1      	b.n	8000d26 <printTemplate+0x3de>
	} else if(type == 3) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	f040 80de 	bne.w	8000d26 <printTemplate+0x3de>
		if(page == 1) {
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d120      	bne.n	8000bb2 <printTemplate+0x26a>
			lcd_clear();
 8000b70:	f7ff fe4e 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b74:	2064      	movs	r0, #100	; 0x64
 8000b76:	f008 fab7 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b7a:	4a45      	ldr	r2, [pc, #276]	; (8000c90 <printTemplate+0x348>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe1a 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b84:	4843      	ldr	r0, [pc, #268]	; (8000c94 <printTemplate+0x34c>)
 8000b86:	f7ff fb4d 	bl	8000224 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b0a      	cmp	r3, #10
 8000b8e:	d805      	bhi.n	8000b9c <printTemplate+0x254>
				lcd_print(1, 7, wifiPass);
 8000b90:	4a40      	ldr	r2, [pc, #256]	; (8000c94 <printTemplate+0x34c>)
 8000b92:	2107      	movs	r1, #7
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fe0f 	bl	80007b8 <lcd_print>
 8000b9a:	e004      	b.n	8000ba6 <printTemplate+0x25e>
				slideText(wifiPass, 7, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2107      	movs	r1, #7
 8000ba0:	483c      	ldr	r0, [pc, #240]	; (8000c94 <printTemplate+0x34c>)
 8000ba2:	f000 fce9 	bl	8001578 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ba6:	4a35      	ldr	r2, [pc, #212]	; (8000c7c <printTemplate+0x334>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2002      	movs	r0, #2
 8000bac:	f7ff fe04 	bl	80007b8 <lcd_print>
}
 8000bb0:	e0b9      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 2) {
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d120      	bne.n	8000bfa <printTemplate+0x2b2>
			lcd_clear();
 8000bb8:	f7ff fe2a 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f008 fa93 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000bc2:	4a33      	ldr	r2, [pc, #204]	; (8000c90 <printTemplate+0x348>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fdf6 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000bcc:	4831      	ldr	r0, [pc, #196]	; (8000c94 <printTemplate+0x34c>)
 8000bce:	f7ff fb29 	bl	8000224 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b0a      	cmp	r3, #10
 8000bd6:	d805      	bhi.n	8000be4 <printTemplate+0x29c>
				lcd_print(1, 7, wifiPass);
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <printTemplate+0x34c>)
 8000bda:	2107      	movs	r1, #7
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fdeb 	bl	80007b8 <lcd_print>
 8000be2:	e004      	b.n	8000bee <printTemplate+0x2a6>
				slideText(wifiPass, 7, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2107      	movs	r1, #7
 8000be8:	482a      	ldr	r0, [pc, #168]	; (8000c94 <printTemplate+0x34c>)
 8000bea:	f000 fcc5 	bl	8001578 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000bee:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <printTemplate+0x338>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f7ff fde0 	bl	80007b8 <lcd_print>
}
 8000bf8:	e095      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 3) {
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d14b      	bne.n	8000c98 <printTemplate+0x350>
			lcd_clear();
 8000c00:	f7ff fe06 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000c04:	2064      	movs	r0, #100	; 0x64
 8000c06:	f008 fa6f 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c0a:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <printTemplate+0x348>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fdd2 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000c14:	481f      	ldr	r0, [pc, #124]	; (8000c94 <printTemplate+0x34c>)
 8000c16:	f7ff fb05 	bl	8000224 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b0a      	cmp	r3, #10
 8000c1e:	d805      	bhi.n	8000c2c <printTemplate+0x2e4>
				lcd_print(1, 7, wifiPass);
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <printTemplate+0x34c>)
 8000c22:	2107      	movs	r1, #7
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fdc7 	bl	80007b8 <lcd_print>
 8000c2a:	e004      	b.n	8000c36 <printTemplate+0x2ee>
				slideText(wifiPass, 7, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2107      	movs	r1, #7
 8000c30:	4818      	ldr	r0, [pc, #96]	; (8000c94 <printTemplate+0x34c>)
 8000c32:	f000 fca1 	bl	8001578 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <printTemplate+0x33c>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff fdbc 	bl	80007b8 <lcd_print>
}
 8000c40:	e071      	b.n	8000d26 <printTemplate+0x3de>
 8000c42:	bf00      	nop
 8000c44:	0800d874 	.word	0x0800d874
 8000c48:	0800d87c 	.word	0x0800d87c
 8000c4c:	0800d880 	.word	0x0800d880
 8000c50:	0800d884 	.word	0x0800d884
 8000c54:	0800d888 	.word	0x0800d888
 8000c58:	0800d88c 	.word	0x0800d88c
 8000c5c:	0800d890 	.word	0x0800d890
 8000c60:	0800d894 	.word	0x0800d894
 8000c64:	0800d898 	.word	0x0800d898
 8000c68:	0800d89c 	.word	0x0800d89c
 8000c6c:	0800d8a0 	.word	0x0800d8a0
 8000c70:	20000be4 	.word	0x20000be4
 8000c74:	0800d8a4 	.word	0x0800d8a4
 8000c78:	20000bf0 	.word	0x20000bf0
 8000c7c:	0800d8ac 	.word	0x0800d8ac
 8000c80:	0800d8c0 	.word	0x0800d8c0
 8000c84:	0800d8d4 	.word	0x0800d8d4
 8000c88:	0800d8e8 	.word	0x0800d8e8
 8000c8c:	0800d8fc 	.word	0x0800d8fc
 8000c90:	0800d910 	.word	0x0800d910
 8000c94:	20000c14 	.word	0x20000c14
		} else if(page == 4) {
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d120      	bne.n	8000ce0 <printTemplate+0x398>
			lcd_clear();
 8000c9e:	f7ff fdb7 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f008 fa20 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <printTemplate+0x3e8>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff fd83 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <printTemplate+0x3ec>)
 8000cb4:	f7ff fab6 	bl	8000224 <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d805      	bhi.n	8000cca <printTemplate+0x382>
				lcd_print(1, 7, wifiPass);
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <printTemplate+0x3ec>)
 8000cc0:	2107      	movs	r1, #7
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff fd78 	bl	80007b8 <lcd_print>
 8000cc8:	e004      	b.n	8000cd4 <printTemplate+0x38c>
				slideText(wifiPass, 7, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2107      	movs	r1, #7
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <printTemplate+0x3ec>)
 8000cd0:	f000 fc52 	bl	8001578 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <printTemplate+0x3f0>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f7ff fd6d 	bl	80007b8 <lcd_print>
}
 8000cde:	e022      	b.n	8000d26 <printTemplate+0x3de>
		} else if(page == 5) {
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d11f      	bne.n	8000d26 <printTemplate+0x3de>
			lcd_clear();
 8000ce6:	f7ff fd93 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f008 f9fc 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <printTemplate+0x3e8>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff fd5f 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <printTemplate+0x3ec>)
 8000cfc:	f7ff fa92 	bl	8000224 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d805      	bhi.n	8000d12 <printTemplate+0x3ca>
				lcd_print(1, 7, wifiPass);
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <printTemplate+0x3ec>)
 8000d08:	2107      	movs	r1, #7
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fd54 	bl	80007b8 <lcd_print>
 8000d10:	e004      	b.n	8000d1c <printTemplate+0x3d4>
				slideText(wifiPass, 7, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2107      	movs	r1, #7
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <printTemplate+0x3ec>)
 8000d18:	f000 fc2e 	bl	8001578 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <printTemplate+0x3f4>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fd49 	bl	80007b8 <lcd_print>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800d910 	.word	0x0800d910
 8000d34:	20000c14 	.word	0x20000c14
 8000d38:	0800d8e8 	.word	0x0800d8e8
 8000d3c:	0800d8fc 	.word	0x0800d8fc

08000d40 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    return characters[cursorPosition];
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <getCharFromCursorPosition+0x1c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000960 	.word	0x20000960

08000d60 <takeMachineID>:
			machineID[i] = '9';
		}
	}
}

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fda6 	bl	80008bc <lcd_cursor>

	if(state == 0) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d104      	bne.n	8000d80 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000d76:	220c      	movs	r2, #12
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4880      	ldr	r0, [pc, #512]	; (8000f7c <takeMachineID+0x21c>)
 8000d7c:	f00c f8c8 	bl	800cf10 <memset>
	}

    int cursorPosition = 3;
 8000d80:	2303      	movs	r3, #3
 8000d82:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fdda 	bl	8000948 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d94:	2108      	movs	r1, #8
 8000d96:	487a      	ldr	r0, [pc, #488]	; (8000f80 <takeMachineID+0x220>)
 8000d98:	f008 ff76 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d103      	bne.n	8000daa <takeMachineID+0x4a>
        	lcd_cursor(0);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fd8a 	bl	80008bc <lcd_cursor>

            break;
 8000da8:	e0e4      	b.n	8000f74 <takeMachineID+0x214>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000daa:	2101      	movs	r1, #1
 8000dac:	4874      	ldr	r0, [pc, #464]	; (8000f80 <takeMachineID+0x220>)
 8000dae:	f008 ff6b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d112      	bne.n	8000dde <takeMachineID+0x7e>
        	if(cursorPosition == 7) {
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2b07      	cmp	r3, #7
 8000dbc:	d102      	bne.n	8000dc4 <takeMachineID+0x64>
        		cursorPosition = 10;
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	e008      	b.n	8000dd6 <takeMachineID+0x76>
        	} else if (cursorPosition == 14) {
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2b0e      	cmp	r3, #14
 8000dc8:	d102      	bne.n	8000dd0 <takeMachineID+0x70>
                cursorPosition = 3;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e002      	b.n	8000dd6 <takeMachineID+0x76>
            } else {
            	cursorPosition++;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000dd6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dda:	f008 f985 	bl	80090e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000dde:	2108      	movs	r1, #8
 8000de0:	4868      	ldr	r0, [pc, #416]	; (8000f84 <takeMachineID+0x224>)
 8000de2:	f008 ff51 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d112      	bne.n	8000e12 <takeMachineID+0xb2>
            if (cursorPosition == 3) {
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d102      	bne.n	8000df8 <takeMachineID+0x98>
                cursorPosition = 14;
 8000df2:	230e      	movs	r3, #14
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e008      	b.n	8000e0a <takeMachineID+0xaa>
            } else if(cursorPosition == 10) {
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d102      	bne.n	8000e04 <takeMachineID+0xa4>
            	cursorPosition = 7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e002      	b.n	8000e0a <takeMachineID+0xaa>
            } else {
            	cursorPosition--;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000e0a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e0e:	f008 f96b 	bl	80090e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000e12:	2102      	movs	r1, #2
 8000e14:	485a      	ldr	r0, [pc, #360]	; (8000f80 <takeMachineID+0x220>)
 8000e16:	f008 ff37 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d16c      	bne.n	8000efa <takeMachineID+0x19a>
        	if(cursorPosition == 3) {
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d105      	bne.n	8000e32 <takeMachineID+0xd2>
        		machineID[machineIDLoc] = '0';
 8000e26:	4a55      	ldr	r2, [pc, #340]	; (8000f7c <takeMachineID+0x21c>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2230      	movs	r2, #48	; 0x30
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e04f      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 4) {
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d105      	bne.n	8000e44 <takeMachineID+0xe4>
        		machineID[machineIDLoc] = '1';
 8000e38:	4a50      	ldr	r2, [pc, #320]	; (8000f7c <takeMachineID+0x21c>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	2231      	movs	r2, #49	; 0x31
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e046      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 5) {
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d105      	bne.n	8000e56 <takeMachineID+0xf6>
        		machineID[machineIDLoc] = '2';
 8000e4a:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <takeMachineID+0x21c>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	2232      	movs	r2, #50	; 0x32
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e03d      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 6) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d105      	bne.n	8000e68 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '3';
 8000e5c:	4a47      	ldr	r2, [pc, #284]	; (8000f7c <takeMachineID+0x21c>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4413      	add	r3, r2
 8000e62:	2233      	movs	r2, #51	; 0x33
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e034      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 7) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d105      	bne.n	8000e7a <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '4';
 8000e6e:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <takeMachineID+0x21c>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4413      	add	r3, r2
 8000e74:	2234      	movs	r2, #52	; 0x34
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e02b      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 10) {
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b0a      	cmp	r3, #10
 8000e7e:	d105      	bne.n	8000e8c <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '5';
 8000e80:	4a3e      	ldr	r2, [pc, #248]	; (8000f7c <takeMachineID+0x21c>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4413      	add	r3, r2
 8000e86:	2235      	movs	r2, #53	; 0x35
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e022      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 11) {
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b0b      	cmp	r3, #11
 8000e90:	d105      	bne.n	8000e9e <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '6';
 8000e92:	4a3a      	ldr	r2, [pc, #232]	; (8000f7c <takeMachineID+0x21c>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4413      	add	r3, r2
 8000e98:	2236      	movs	r2, #54	; 0x36
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e019      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 12) {
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b0c      	cmp	r3, #12
 8000ea2:	d105      	bne.n	8000eb0 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '7';
 8000ea4:	4a35      	ldr	r2, [pc, #212]	; (8000f7c <takeMachineID+0x21c>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2237      	movs	r2, #55	; 0x37
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e010      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 13) {
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b0d      	cmp	r3, #13
 8000eb4:	d105      	bne.n	8000ec2 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '8';
 8000eb6:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <takeMachineID+0x21c>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2238      	movs	r2, #56	; 0x38
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e007      	b.n	8000ed2 <takeMachineID+0x172>
        	} else if(cursorPosition == 14) {
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b0e      	cmp	r3, #14
 8000ec6:	d104      	bne.n	8000ed2 <takeMachineID+0x172>
        		machineID[machineIDLoc] = '9';
 8000ec8:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <takeMachineID+0x21c>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2239      	movs	r2, #57	; 0x39
 8000ed0:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	b2d9      	uxtb	r1, r3
 8000ed6:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <takeMachineID+0x21c>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fc7e 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000ef2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ef6:	f008 f8f7 	bl	80090e8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000efa:	2104      	movs	r1, #4
 8000efc:	4820      	ldr	r0, [pc, #128]	; (8000f80 <takeMachineID+0x220>)
 8000efe:	f008 fec3 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d12e      	bne.n	8000f66 <takeMachineID+0x206>
            if(strlen(machineID) >= 1) {
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <takeMachineID+0x21c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d027      	beq.n	8000f60 <takeMachineID+0x200>

                machineID[machineIDLoc] = '\0';
 8000f10:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <takeMachineID+0x21c>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4413      	add	r3, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3304      	adds	r3, #4
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4619      	mov	r1, r3
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fc93 	bl	8000850 <lcd_delete_char>
                HAL_Delay(50);
 8000f2a:	2032      	movs	r0, #50	; 0x32
 8000f2c:	f008 f8dc 	bl	80090e8 <HAL_Delay>

                if(writeLoc > 5) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	dd03      	ble.n	8000f3e <takeMachineID+0x1de>
                	writeLoc--;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e004      	b.n	8000f48 <takeMachineID+0x1e8>
                } else if(writeLoc < 5) {
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	dc01      	bgt.n	8000f48 <takeMachineID+0x1e8>
                	writeLoc = 5;
 8000f44:	2305      	movs	r3, #5
 8000f46:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dd03      	ble.n	8000f56 <takeMachineID+0x1f6>
                	machineIDLoc--;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e004      	b.n	8000f60 <takeMachineID+0x200>
                } else if(machineIDLoc < 0) {
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da01      	bge.n	8000f60 <takeMachineID+0x200>
                	machineIDLoc = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000f60:	20fa      	movs	r0, #250	; 0xfa
 8000f62:	f008 f8c1 	bl	80090e8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff fc04 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f72:	e70f      	b.n	8000d94 <takeMachineID+0x34>
    }
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000be4 	.word	0x20000be4
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40011000 	.word	0x40011000

08000f88 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fc93 	bl	80008bc <lcd_cursor>

    if(state == 0) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d104      	bne.n	8000fa6 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000f9c:	2221      	movs	r2, #33	; 0x21
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	48a1      	ldr	r0, [pc, #644]	; (8001228 <takeWifiSSID+0x2a0>)
 8000fa2:	f00b ffb5 	bl	800cf10 <memset>
    }

    int realCharPos = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8000faa:	4ba0      	ldr	r3, [pc, #640]	; (800122c <takeWifiSSID+0x2a4>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
    page = 1;
 8000fb0:	4b9f      	ldr	r3, [pc, #636]	; (8001230 <takeWifiSSID+0x2a8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fcc1 	bl	8000948 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	489a      	ldr	r0, [pc, #616]	; (8001234 <takeWifiSSID+0x2ac>)
 8000fca:	f008 fe5d 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d103      	bne.n	8000fdc <takeWifiSSID+0x54>
            lcd_cursor(0);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fc71 	bl	80008bc <lcd_cursor>

            break;
 8000fda:	e14b      	b.n	8001274 <takeWifiSSID+0x2ec>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4895      	ldr	r0, [pc, #596]	; (8001234 <takeWifiSSID+0x2ac>)
 8000fe0:	f008 fe52 	bl	8009c88 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d166      	bne.n	80010b8 <takeWifiSSID+0x130>
        	realCharPos++;
 8000fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fec:	3301      	adds	r3, #1
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	2b50      	cmp	r3, #80	; 0x50
 8000ff4:	dd01      	ble.n	8000ffa <takeWifiSSID+0x72>
        		realCharPos = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8000ffa:	4b8c      	ldr	r3, [pc, #560]	; (800122c <takeWifiSSID+0x2a4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b10      	cmp	r3, #16
 8001000:	d152      	bne.n	80010a8 <takeWifiSSID+0x120>
            	if(page == 1) {
 8001002:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <takeWifiSSID+0x2a8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d10c      	bne.n	8001024 <takeWifiSSID+0x9c>
            		cursorPosition = 1;
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <takeWifiSSID+0x2a4>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
            		page++;
 8001010:	4b87      	ldr	r3, [pc, #540]	; (8001230 <takeWifiSSID+0x2a8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a86      	ldr	r2, [pc, #536]	; (8001230 <takeWifiSSID+0x2a8>)
 8001018:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 800101a:	2102      	movs	r1, #2
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff fc93 	bl	8000948 <printTemplate>
 8001022:	e046      	b.n	80010b2 <takeWifiSSID+0x12a>
            	} else if(page == 2) {
 8001024:	4b82      	ldr	r3, [pc, #520]	; (8001230 <takeWifiSSID+0x2a8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d10c      	bne.n	8001046 <takeWifiSSID+0xbe>
            		cursorPosition = 1;
 800102c:	4b7f      	ldr	r3, [pc, #508]	; (800122c <takeWifiSSID+0x2a4>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
            		page++;
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <takeWifiSSID+0x2a8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a7d      	ldr	r2, [pc, #500]	; (8001230 <takeWifiSSID+0x2a8>)
 800103a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 800103c:	2103      	movs	r1, #3
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff fc82 	bl	8000948 <printTemplate>
 8001044:	e035      	b.n	80010b2 <takeWifiSSID+0x12a>
            	} else if(page == 3) {
 8001046:	4b7a      	ldr	r3, [pc, #488]	; (8001230 <takeWifiSSID+0x2a8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d10c      	bne.n	8001068 <takeWifiSSID+0xe0>
            		cursorPosition = 1;
 800104e:	4b77      	ldr	r3, [pc, #476]	; (800122c <takeWifiSSID+0x2a4>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
            		page++;
 8001054:	4b76      	ldr	r3, [pc, #472]	; (8001230 <takeWifiSSID+0x2a8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a75      	ldr	r2, [pc, #468]	; (8001230 <takeWifiSSID+0x2a8>)
 800105c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 800105e:	2104      	movs	r1, #4
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fc71 	bl	8000948 <printTemplate>
 8001066:	e024      	b.n	80010b2 <takeWifiSSID+0x12a>
            	} else if(page == 4) {
 8001068:	4b71      	ldr	r3, [pc, #452]	; (8001230 <takeWifiSSID+0x2a8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d10c      	bne.n	800108a <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8001070:	4b6e      	ldr	r3, [pc, #440]	; (800122c <takeWifiSSID+0x2a4>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
            		page++;
 8001076:	4b6e      	ldr	r3, [pc, #440]	; (8001230 <takeWifiSSID+0x2a8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a6c      	ldr	r2, [pc, #432]	; (8001230 <takeWifiSSID+0x2a8>)
 800107e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8001080:	2105      	movs	r1, #5
 8001082:	2002      	movs	r0, #2
 8001084:	f7ff fc60 	bl	8000948 <printTemplate>
 8001088:	e013      	b.n	80010b2 <takeWifiSSID+0x12a>
            	} else if(page == 5) {
 800108a:	4b69      	ldr	r3, [pc, #420]	; (8001230 <takeWifiSSID+0x2a8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d10f      	bne.n	80010b2 <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <takeWifiSSID+0x2a4>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001098:	4b65      	ldr	r3, [pc, #404]	; (8001230 <takeWifiSSID+0x2a8>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800109e:	2101      	movs	r1, #1
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff fc51 	bl	8000948 <printTemplate>
 80010a6:	e004      	b.n	80010b2 <takeWifiSSID+0x12a>
            	}
            } else {
            	cursorPosition++;
 80010a8:	4b60      	ldr	r3, [pc, #384]	; (800122c <takeWifiSSID+0x2a4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a5f      	ldr	r2, [pc, #380]	; (800122c <takeWifiSSID+0x2a4>)
 80010b0:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80010b2:	20fa      	movs	r0, #250	; 0xfa
 80010b4:	f008 f818 	bl	80090e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010b8:	2108      	movs	r1, #8
 80010ba:	485f      	ldr	r0, [pc, #380]	; (8001238 <takeWifiSSID+0x2b0>)
 80010bc:	f008 fde4 	bl	8009c88 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d15e      	bne.n	8001184 <takeWifiSSID+0x1fc>
        	realCharPos--;
 80010c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c8:	3b01      	subs	r3, #1
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dc01      	bgt.n	80010d6 <takeWifiSSID+0x14e>
        		realCharPos = 80;
 80010d2:	2350      	movs	r3, #80	; 0x50
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80010d6:	4b55      	ldr	r3, [pc, #340]	; (800122c <takeWifiSSID+0x2a4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d14a      	bne.n	8001174 <takeWifiSSID+0x1ec>
            	if(page == 1) {
 80010de:	4b54      	ldr	r3, [pc, #336]	; (8001230 <takeWifiSSID+0x2a8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10a      	bne.n	80010fc <takeWifiSSID+0x174>
            		cursorPosition = 16;
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <takeWifiSSID+0x2a4>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	601a      	str	r2, [r3, #0]
            		page = 5;
 80010ec:	4b50      	ldr	r3, [pc, #320]	; (8001230 <takeWifiSSID+0x2a8>)
 80010ee:	2205      	movs	r2, #5
 80010f0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80010f2:	2105      	movs	r1, #5
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff fc27 	bl	8000948 <printTemplate>
 80010fa:	e040      	b.n	800117e <takeWifiSSID+0x1f6>
            	} else if(page == 2) {
 80010fc:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <takeWifiSSID+0x2a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d10a      	bne.n	800111a <takeWifiSSID+0x192>
            		cursorPosition = 16;
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <takeWifiSSID+0x2a4>)
 8001106:	2210      	movs	r2, #16
 8001108:	601a      	str	r2, [r3, #0]
            		page = 1;
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <takeWifiSSID+0x2a8>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001110:	2101      	movs	r1, #1
 8001112:	2002      	movs	r0, #2
 8001114:	f7ff fc18 	bl	8000948 <printTemplate>
 8001118:	e031      	b.n	800117e <takeWifiSSID+0x1f6>
            	} else if(page == 3) {
 800111a:	4b45      	ldr	r3, [pc, #276]	; (8001230 <takeWifiSSID+0x2a8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d10a      	bne.n	8001138 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 8001122:	4b42      	ldr	r3, [pc, #264]	; (800122c <takeWifiSSID+0x2a4>)
 8001124:	2210      	movs	r2, #16
 8001126:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001128:	4b41      	ldr	r3, [pc, #260]	; (8001230 <takeWifiSSID+0x2a8>)
 800112a:	2202      	movs	r2, #2
 800112c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 800112e:	2102      	movs	r1, #2
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff fc09 	bl	8000948 <printTemplate>
 8001136:	e022      	b.n	800117e <takeWifiSSID+0x1f6>
            	} else if(page == 4) {
 8001138:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <takeWifiSSID+0x2a8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d10a      	bne.n	8001156 <takeWifiSSID+0x1ce>
            		cursorPosition = 16;
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <takeWifiSSID+0x2a4>)
 8001142:	2210      	movs	r2, #16
 8001144:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <takeWifiSSID+0x2a8>)
 8001148:	2203      	movs	r2, #3
 800114a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 800114c:	2103      	movs	r1, #3
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff fbfa 	bl	8000948 <printTemplate>
 8001154:	e013      	b.n	800117e <takeWifiSSID+0x1f6>
            	} else if(page == 5) {
 8001156:	4b36      	ldr	r3, [pc, #216]	; (8001230 <takeWifiSSID+0x2a8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d10f      	bne.n	800117e <takeWifiSSID+0x1f6>
            		cursorPosition = 16;
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <takeWifiSSID+0x2a4>)
 8001160:	2210      	movs	r2, #16
 8001162:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <takeWifiSSID+0x2a8>)
 8001166:	2204      	movs	r2, #4
 8001168:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 800116a:	2104      	movs	r1, #4
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fbeb 	bl	8000948 <printTemplate>
 8001172:	e004      	b.n	800117e <takeWifiSSID+0x1f6>
            	}
            } else {
            	cursorPosition--;
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <takeWifiSSID+0x2a4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	4a2c      	ldr	r2, [pc, #176]	; (800122c <takeWifiSSID+0x2a4>)
 800117c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800117e:	20fa      	movs	r0, #250	; 0xfa
 8001180:	f007 ffb2 	bl	80090e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001184:	2102      	movs	r1, #2
 8001186:	482b      	ldr	r0, [pc, #172]	; (8001234 <takeWifiSSID+0x2ac>)
 8001188:	f008 fd7e 	bl	8009c88 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d128      	bne.n	80011e4 <takeWifiSSID+0x25c>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001194:	3b01      	subs	r3, #1
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdd2 	bl	8000d40 <getCharFromCursorPosition>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <takeWifiSSID+0x2a0>)
 80011a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a4:	4413      	add	r3, r2
 80011a6:	460a      	mov	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	b2d9      	uxtb	r1, r3
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <takeWifiSSID+0x2a0>)
 80011b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fb12 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 80011be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b2d9      	uxtb	r1, r3
 80011c6:	f107 0208 	add.w	r2, r7, #8
 80011ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011cc:	4413      	add	r3, r2
 80011ce:	460a      	mov	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	3301      	adds	r3, #1
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	3301      	adds	r3, #1
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 80011de:	20fa      	movs	r0, #250	; 0xfa
 80011e0:	f007 ff82 	bl	80090e8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80011e4:	2104      	movs	r1, #4
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <takeWifiSSID+0x2ac>)
 80011e8:	f008 fd4e 	bl	8009c88 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d138      	bne.n	8001264 <takeWifiSSID+0x2dc>
        	if(strlen(wifiSSID) >= 1) {
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <takeWifiSSID+0x2a0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d031      	beq.n	800125e <takeWifiSSID+0x2d6>
        		wifiSSID[wifiNameLoc] = '\0';
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <takeWifiSSID+0x2a0>)
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	4413      	add	r3, r2
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3306      	adds	r3, #6
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4619      	mov	r1, r3
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fb1e 	bl	8000850 <lcd_delete_char>
        		HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	; 0x32
 8001216:	f007 ff67 	bl	80090e8 <HAL_Delay>
        		if(writeLoc > 7) {
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	2b07      	cmp	r3, #7
 800121e:	dd0d      	ble.n	800123c <takeWifiSSID+0x2b4>
        			writeLoc--;
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	3b01      	subs	r3, #1
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001226:	e00e      	b.n	8001246 <takeWifiSSID+0x2be>
 8001228:	20000bf0 	.word	0x20000bf0
 800122c:	20000944 	.word	0x20000944
 8001230:	20000948 	.word	0x20000948
 8001234:	40010800 	.word	0x40010800
 8001238:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	2b06      	cmp	r3, #6
 8001240:	dc01      	bgt.n	8001246 <takeWifiSSID+0x2be>
        			writeLoc = 7;
 8001242:	2307      	movs	r3, #7
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 8001246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001248:	2b00      	cmp	r3, #0
 800124a:	dd03      	ble.n	8001254 <takeWifiSSID+0x2cc>
        			wifiNameLoc--;
 800124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124e:	3b01      	subs	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
 8001252:	e004      	b.n	800125e <takeWifiSSID+0x2d6>
        		} else if(wifiNameLoc < 0) {
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	2b00      	cmp	r3, #0
 8001258:	da01      	bge.n	800125e <takeWifiSSID+0x2d6>
        			wifiNameLoc = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 800125e:	20fa      	movs	r0, #250	; 0xfa
 8001260:	f007 ff42 	bl	80090e8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <takeWifiSSID+0x2f4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff fa84 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001272:	e6a8      	b.n	8000fc6 <takeWifiSSID+0x3e>
    }
}
 8001274:	bf00      	nop
 8001276:	3738      	adds	r7, #56	; 0x38
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000944 	.word	0x20000944

08001280 <takeWifiPass>:

void takeWifiPass(int state) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fb17 	bl	80008bc <lcd_cursor>

    if(state == 0) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001294:	2221      	movs	r2, #33	; 0x21
 8001296:	2100      	movs	r1, #0
 8001298:	48a1      	ldr	r0, [pc, #644]	; (8001520 <takeWifiPass+0x2a0>)
 800129a:	f00b fe39 	bl	800cf10 <memset>
    }

    int realCharPos = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 80012a2:	4ba0      	ldr	r3, [pc, #640]	; (8001524 <takeWifiPass+0x2a4>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
    page = 1;
 80012a8:	4b9f      	ldr	r3, [pc, #636]	; (8001528 <takeWifiPass+0x2a8>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 80012b6:	2101      	movs	r1, #1
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff fb45 	bl	8000948 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012be:	2108      	movs	r1, #8
 80012c0:	489a      	ldr	r0, [pc, #616]	; (800152c <takeWifiPass+0x2ac>)
 80012c2:	f008 fce1 	bl	8009c88 <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <takeWifiPass+0x54>
            lcd_cursor(0);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff faf5 	bl	80008bc <lcd_cursor>

            break;
 80012d2:	e14b      	b.n	800156c <takeWifiPass+0x2ec>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012d4:	2101      	movs	r1, #1
 80012d6:	4895      	ldr	r0, [pc, #596]	; (800152c <takeWifiPass+0x2ac>)
 80012d8:	f008 fcd6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d166      	bne.n	80013b0 <takeWifiPass+0x130>
        	realCharPos++;
 80012e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e4:	3301      	adds	r3, #1
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 80012e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ea:	2b50      	cmp	r3, #80	; 0x50
 80012ec:	dd01      	ble.n	80012f2 <takeWifiPass+0x72>
        	    realCharPos = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 80012f2:	4b8c      	ldr	r3, [pc, #560]	; (8001524 <takeWifiPass+0x2a4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d152      	bne.n	80013a0 <takeWifiPass+0x120>
            	if(page == 1) {
 80012fa:	4b8b      	ldr	r3, [pc, #556]	; (8001528 <takeWifiPass+0x2a8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d10c      	bne.n	800131c <takeWifiPass+0x9c>
            		cursorPosition = 1;
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <takeWifiPass+0x2a4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
            		page++;
 8001308:	4b87      	ldr	r3, [pc, #540]	; (8001528 <takeWifiPass+0x2a8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a86      	ldr	r2, [pc, #536]	; (8001528 <takeWifiPass+0x2a8>)
 8001310:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001312:	2102      	movs	r1, #2
 8001314:	2003      	movs	r0, #3
 8001316:	f7ff fb17 	bl	8000948 <printTemplate>
 800131a:	e046      	b.n	80013aa <takeWifiPass+0x12a>
            	} else if(page == 2) {
 800131c:	4b82      	ldr	r3, [pc, #520]	; (8001528 <takeWifiPass+0x2a8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d10c      	bne.n	800133e <takeWifiPass+0xbe>
            		cursorPosition = 1;
 8001324:	4b7f      	ldr	r3, [pc, #508]	; (8001524 <takeWifiPass+0x2a4>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
            		page++;
 800132a:	4b7f      	ldr	r3, [pc, #508]	; (8001528 <takeWifiPass+0x2a8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a7d      	ldr	r2, [pc, #500]	; (8001528 <takeWifiPass+0x2a8>)
 8001332:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001334:	2103      	movs	r1, #3
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fb06 	bl	8000948 <printTemplate>
 800133c:	e035      	b.n	80013aa <takeWifiPass+0x12a>
            	} else if(page == 3) {
 800133e:	4b7a      	ldr	r3, [pc, #488]	; (8001528 <takeWifiPass+0x2a8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d10c      	bne.n	8001360 <takeWifiPass+0xe0>
            		cursorPosition = 1;
 8001346:	4b77      	ldr	r3, [pc, #476]	; (8001524 <takeWifiPass+0x2a4>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
            		page++;
 800134c:	4b76      	ldr	r3, [pc, #472]	; (8001528 <takeWifiPass+0x2a8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a75      	ldr	r2, [pc, #468]	; (8001528 <takeWifiPass+0x2a8>)
 8001354:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001356:	2104      	movs	r1, #4
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff faf5 	bl	8000948 <printTemplate>
 800135e:	e024      	b.n	80013aa <takeWifiPass+0x12a>
            	} else if(page == 4) {
 8001360:	4b71      	ldr	r3, [pc, #452]	; (8001528 <takeWifiPass+0x2a8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d10c      	bne.n	8001382 <takeWifiPass+0x102>
            		cursorPosition = 1;
 8001368:	4b6e      	ldr	r3, [pc, #440]	; (8001524 <takeWifiPass+0x2a4>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
            		page++;
 800136e:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <takeWifiPass+0x2a8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <takeWifiPass+0x2a8>)
 8001376:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001378:	2105      	movs	r1, #5
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fae4 	bl	8000948 <printTemplate>
 8001380:	e013      	b.n	80013aa <takeWifiPass+0x12a>
            	} else if(page == 5) {
 8001382:	4b69      	ldr	r3, [pc, #420]	; (8001528 <takeWifiPass+0x2a8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10f      	bne.n	80013aa <takeWifiPass+0x12a>
            		cursorPosition = 1;
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <takeWifiPass+0x2a4>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001390:	4b65      	ldr	r3, [pc, #404]	; (8001528 <takeWifiPass+0x2a8>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001396:	2101      	movs	r1, #1
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff fad5 	bl	8000948 <printTemplate>
 800139e:	e004      	b.n	80013aa <takeWifiPass+0x12a>
            	}
            } else {
            	cursorPosition++;
 80013a0:	4b60      	ldr	r3, [pc, #384]	; (8001524 <takeWifiPass+0x2a4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a5f      	ldr	r2, [pc, #380]	; (8001524 <takeWifiPass+0x2a4>)
 80013a8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80013aa:	20fa      	movs	r0, #250	; 0xfa
 80013ac:	f007 fe9c 	bl	80090e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80013b0:	2108      	movs	r1, #8
 80013b2:	485f      	ldr	r0, [pc, #380]	; (8001530 <takeWifiPass+0x2b0>)
 80013b4:	f008 fc68 	bl	8009c88 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d15e      	bne.n	800147c <takeWifiPass+0x1fc>
        	realCharPos--;
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	3b01      	subs	r3, #1
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 80013c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dc01      	bgt.n	80013ce <takeWifiPass+0x14e>
        	    realCharPos = 80;
 80013ca:	2350      	movs	r3, #80	; 0x50
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80013ce:	4b55      	ldr	r3, [pc, #340]	; (8001524 <takeWifiPass+0x2a4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d14a      	bne.n	800146c <takeWifiPass+0x1ec>
            	if(page == 1) {
 80013d6:	4b54      	ldr	r3, [pc, #336]	; (8001528 <takeWifiPass+0x2a8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10a      	bne.n	80013f4 <takeWifiPass+0x174>
            		cursorPosition = 16;
 80013de:	4b51      	ldr	r3, [pc, #324]	; (8001524 <takeWifiPass+0x2a4>)
 80013e0:	2210      	movs	r2, #16
 80013e2:	601a      	str	r2, [r3, #0]
            		page = 5;
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <takeWifiPass+0x2a8>)
 80013e6:	2205      	movs	r2, #5
 80013e8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80013ea:	2105      	movs	r1, #5
 80013ec:	2003      	movs	r0, #3
 80013ee:	f7ff faab 	bl	8000948 <printTemplate>
 80013f2:	e040      	b.n	8001476 <takeWifiPass+0x1f6>
            	} else if(page == 2) {
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <takeWifiPass+0x2a8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d10a      	bne.n	8001412 <takeWifiPass+0x192>
            		cursorPosition = 16;
 80013fc:	4b49      	ldr	r3, [pc, #292]	; (8001524 <takeWifiPass+0x2a4>)
 80013fe:	2210      	movs	r2, #16
 8001400:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001402:	4b49      	ldr	r3, [pc, #292]	; (8001528 <takeWifiPass+0x2a8>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001408:	2101      	movs	r1, #1
 800140a:	2003      	movs	r0, #3
 800140c:	f7ff fa9c 	bl	8000948 <printTemplate>
 8001410:	e031      	b.n	8001476 <takeWifiPass+0x1f6>
            	} else if(page == 3) {
 8001412:	4b45      	ldr	r3, [pc, #276]	; (8001528 <takeWifiPass+0x2a8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d10a      	bne.n	8001430 <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <takeWifiPass+0x2a4>)
 800141c:	2210      	movs	r2, #16
 800141e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001420:	4b41      	ldr	r3, [pc, #260]	; (8001528 <takeWifiPass+0x2a8>)
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001426:	2102      	movs	r1, #2
 8001428:	2003      	movs	r0, #3
 800142a:	f7ff fa8d 	bl	8000948 <printTemplate>
 800142e:	e022      	b.n	8001476 <takeWifiPass+0x1f6>
            	} else if(page == 4) {
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <takeWifiPass+0x2a8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d10a      	bne.n	800144e <takeWifiPass+0x1ce>
            		cursorPosition = 16;
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <takeWifiPass+0x2a4>)
 800143a:	2210      	movs	r2, #16
 800143c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <takeWifiPass+0x2a8>)
 8001440:	2203      	movs	r2, #3
 8001442:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001444:	2103      	movs	r1, #3
 8001446:	2003      	movs	r0, #3
 8001448:	f7ff fa7e 	bl	8000948 <printTemplate>
 800144c:	e013      	b.n	8001476 <takeWifiPass+0x1f6>
            	} else if(page == 5) {
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <takeWifiPass+0x2a8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d10f      	bne.n	8001476 <takeWifiPass+0x1f6>
            		cursorPosition = 16;
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <takeWifiPass+0x2a4>)
 8001458:	2210      	movs	r2, #16
 800145a:	601a      	str	r2, [r3, #0]
            		page = 4;
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <takeWifiPass+0x2a8>)
 800145e:	2204      	movs	r2, #4
 8001460:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001462:	2104      	movs	r1, #4
 8001464:	2003      	movs	r0, #3
 8001466:	f7ff fa6f 	bl	8000948 <printTemplate>
 800146a:	e004      	b.n	8001476 <takeWifiPass+0x1f6>
            	}
            } else {
            	cursorPosition--;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <takeWifiPass+0x2a4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a2c      	ldr	r2, [pc, #176]	; (8001524 <takeWifiPass+0x2a4>)
 8001474:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001476:	20fa      	movs	r0, #250	; 0xfa
 8001478:	f007 fe36 	bl	80090e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800147c:	2102      	movs	r1, #2
 800147e:	482b      	ldr	r0, [pc, #172]	; (800152c <takeWifiPass+0x2ac>)
 8001480:	f008 fc02 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	d128      	bne.n	80014dc <takeWifiPass+0x25c>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148c:	3b01      	subs	r3, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc56 	bl	8000d40 <getCharFromCursorPosition>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <takeWifiPass+0x2a0>)
 800149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	b2d9      	uxtb	r1, r3
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <takeWifiPass+0x2a0>)
 80014a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff f996 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 80014b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c4:	4413      	add	r3, r2
 80014c6:	460a      	mov	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	3301      	adds	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 80014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d2:	3301      	adds	r3, #1
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 80014d6:	20fa      	movs	r0, #250	; 0xfa
 80014d8:	f007 fe06 	bl	80090e8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80014dc:	2104      	movs	r1, #4
 80014de:	4813      	ldr	r0, [pc, #76]	; (800152c <takeWifiPass+0x2ac>)
 80014e0:	f008 fbd2 	bl	8009c88 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d138      	bne.n	800155c <takeWifiPass+0x2dc>
            if(strlen(wifiPass) >= 1) {
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <takeWifiPass+0x2a0>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d031      	beq.n	8001556 <takeWifiPass+0x2d6>
            	wifiPass[wifiPassLoc] = '\0';
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <takeWifiPass+0x2a0>)
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	4413      	add	r3, r2
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80014fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	3306      	adds	r3, #6
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff f9a2 	bl	8000850 <lcd_delete_char>
            	HAL_Delay(50);
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f007 fdeb 	bl	80090e8 <HAL_Delay>

            	if(writeLoc > 7) {
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	2b07      	cmp	r3, #7
 8001516:	dd0d      	ble.n	8001534 <takeWifiPass+0x2b4>
            		writeLoc--;
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	3b01      	subs	r3, #1
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800151e:	e00e      	b.n	800153e <takeWifiPass+0x2be>
 8001520:	20000c14 	.word	0x20000c14
 8001524:	20000944 	.word	0x20000944
 8001528:	20000948 	.word	0x20000948
 800152c:	40010800 	.word	0x40010800
 8001530:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b06      	cmp	r3, #6
 8001538:	dc01      	bgt.n	800153e <takeWifiPass+0x2be>
            		writeLoc = 7;
 800153a:	2307      	movs	r3, #7
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 800153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001540:	2b00      	cmp	r3, #0
 8001542:	dd03      	ble.n	800154c <takeWifiPass+0x2cc>
            		wifiPassLoc--;
 8001544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001546:	3b01      	subs	r3, #1
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
 800154a:	e004      	b.n	8001556 <takeWifiPass+0x2d6>
            	} else if(wifiPassLoc < 0) {
 800154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154e:	2b00      	cmp	r3, #0
 8001550:	da01      	bge.n	8001556 <takeWifiPass+0x2d6>
            		wifiPassLoc = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 8001556:	20fa      	movs	r0, #250	; 0xfa
 8001558:	f007 fdc6 	bl	80090e8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <takeWifiPass+0x2f4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff f908 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800156a:	e6a8      	b.n	80012be <takeWifiPass+0x3e>
    }
}
 800156c:	bf00      	nop
 800156e:	3738      	adds	r7, #56	; 0x38
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000944 	.word	0x20000944

08001578 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	int startPoint = startPos;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	617b      	str	r3, [r7, #20]

	lcd_gotoxy(startLine, startPos);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f8f1 	bl	800077a <lcd_gotoxy>

	while(text[startPoint] != '\0') {
 8001598:	e016      	b.n	80015c8 <slideText+0x50>
		lcd_print_char(startLine, startPoint, text[startPoint]);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f7ff f919 	bl	80007e2 <lcd_print_char>

		if(startPoint >= 14) {
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b0d      	cmp	r3, #13
 80015b4:	dd02      	ble.n	80015bc <slideText+0x44>
			lcd_send_cmd(0x18);
 80015b6:	2018      	movs	r0, #24
 80015b8:	f7fe ff66 	bl	8000488 <lcd_send_cmd>
		}

		HAL_Delay(50);
 80015bc:	2032      	movs	r0, #50	; 0x32
 80015be:	f007 fd93 	bl	80090e8 <HAL_Delay>
		startPoint++;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
	while(text[startPoint] != '\0') {
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e2      	bne.n	800159a <slideText+0x22>
	}

	lcd_clear_line(2);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff f925 	bl	8000824 <lcd_clear_line>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015ec:	2101      	movs	r1, #1
 80015ee:	488f      	ldr	r0, [pc, #572]	; (800182c <menu+0x248>)
 80015f0:	f008 fb4a 	bl	8009c88 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 808e 	bne.w	8001718 <menu+0x134>
 80015fc:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <menu+0x24c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	f083 0301 	eor.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8086 	beq.w	8001718 <menu+0x134>
		menuSayac = menuSayac+1;
 800160c:	4b89      	ldr	r3, [pc, #548]	; (8001834 <menu+0x250>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b87      	ldr	r3, [pc, #540]	; (8001834 <menu+0x250>)
 8001616:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001618:	4b86      	ldr	r3, [pc, #536]	; (8001834 <menu+0x250>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b24      	cmp	r3, #36	; 0x24
 800161e:	d102      	bne.n	8001626 <menu+0x42>
			menuSayac = 1;
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <menu+0x250>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <menu+0x250>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b12      	cmp	r3, #18
 800162c:	d106      	bne.n	800163c <menu+0x58>
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <menu+0x254>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <menu+0x58>
			menuSayac = 21;
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <menu+0x250>)
 8001638:	2215      	movs	r2, #21
 800163a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800163c:	4b7d      	ldr	r3, [pc, #500]	; (8001834 <menu+0x250>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d106      	bne.n	8001652 <menu+0x6e>
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <menu+0x258>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <menu+0x6e>
			menuSayac = 16;
 800164c:	4b79      	ldr	r3, [pc, #484]	; (8001834 <menu+0x250>)
 800164e:	2210      	movs	r2, #16
 8001650:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001652:	4b78      	ldr	r3, [pc, #480]	; (8001834 <menu+0x250>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b0d      	cmp	r3, #13
 8001658:	d106      	bne.n	8001668 <menu+0x84>
 800165a:	4b78      	ldr	r3, [pc, #480]	; (800183c <menu+0x258>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <menu+0x84>
			menuSayac = 16;
 8001662:	4b74      	ldr	r3, [pc, #464]	; (8001834 <menu+0x250>)
 8001664:	2210      	movs	r2, #16
 8001666:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001668:	4b72      	ldr	r3, [pc, #456]	; (8001834 <menu+0x250>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b09      	cmp	r3, #9
 800166e:	d106      	bne.n	800167e <menu+0x9a>
 8001670:	4b72      	ldr	r3, [pc, #456]	; (800183c <menu+0x258>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d102      	bne.n	800167e <menu+0x9a>
			menuSayac = 13;
 8001678:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <menu+0x250>)
 800167a:	220d      	movs	r2, #13
 800167c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800167e:	4b6d      	ldr	r3, [pc, #436]	; (8001834 <menu+0x250>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d10a      	bne.n	800169c <menu+0xb8>
 8001686:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <menu+0x25c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d003      	beq.n	8001696 <menu+0xb2>
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <menu+0x25c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d102      	bne.n	800169c <menu+0xb8>
			menuSayac = 11;
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <menu+0x250>)
 8001698:	220b      	movs	r2, #11
 800169a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800169c:	4b65      	ldr	r3, [pc, #404]	; (8001834 <menu+0x250>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b0c      	cmp	r3, #12
 80016a2:	d10e      	bne.n	80016c2 <menu+0xde>
 80016a4:	4b67      	ldr	r3, [pc, #412]	; (8001844 <menu+0x260>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d003      	beq.n	80016b4 <menu+0xd0>
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <menu+0x260>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d106      	bne.n	80016c2 <menu+0xde>
 80016b4:	4b61      	ldr	r3, [pc, #388]	; (800183c <menu+0x258>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d102      	bne.n	80016c2 <menu+0xde>
			menuSayac = 16;
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <menu+0x250>)
 80016be:	2210      	movs	r2, #16
 80016c0:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <menu+0x250>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d10e      	bne.n	80016e8 <menu+0x104>
 80016ca:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <menu+0x260>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d003      	beq.n	80016da <menu+0xf6>
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <menu+0x260>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d106      	bne.n	80016e8 <menu+0x104>
 80016da:	4b58      	ldr	r3, [pc, #352]	; (800183c <menu+0x258>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d102      	bne.n	80016e8 <menu+0x104>
			menuSayac = 13;
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <menu+0x250>)
 80016e4:	220d      	movs	r2, #13
 80016e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016e8:	4b52      	ldr	r3, [pc, #328]	; (8001834 <menu+0x250>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d106      	bne.n	80016fe <menu+0x11a>
 80016f0:	4b55      	ldr	r3, [pc, #340]	; (8001848 <menu+0x264>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <menu+0x11a>
			menuSayac = 16;
 80016f8:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <menu+0x250>)
 80016fa:	2210      	movs	r2, #16
 80016fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <menu+0x250>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b18      	cmp	r3, #24
 8001704:	d106      	bne.n	8001714 <menu+0x130>
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <menu+0x254>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <menu+0x130>
			menuSayac = 26;
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <menu+0x250>)
 8001710:	221a      	movs	r2, #26
 8001712:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001714:	f004 fcdc 	bl	80060d0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001718:	2108      	movs	r1, #8
 800171a:	484c      	ldr	r0, [pc, #304]	; (800184c <menu+0x268>)
 800171c:	f008 fab4 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d175      	bne.n	8001812 <menu+0x22e>
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <menu+0x24c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f083 0301 	eor.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d06e      	beq.n	8001812 <menu+0x22e>
		if (menuSayac <= 1) {
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <menu+0x250>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d802      	bhi.n	8001742 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <menu+0x250>)
 800173e:	2224      	movs	r2, #36	; 0x24
 8001740:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <menu+0x250>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3b01      	subs	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <menu+0x250>)
 800174c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <menu+0x250>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b14      	cmp	r3, #20
 8001754:	d106      	bne.n	8001764 <menu+0x180>
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <menu+0x254>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <menu+0x180>
			menuSayac = 17;
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <menu+0x250>)
 8001760:	2211      	movs	r2, #17
 8001762:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <menu+0x250>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d106      	bne.n	800177a <menu+0x196>
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <menu+0x258>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <menu+0x196>
			menuSayac = 7;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <menu+0x250>)
 8001776:	2207      	movs	r2, #7
 8001778:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <menu+0x250>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	d106      	bne.n	8001790 <menu+0x1ac>
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <menu+0x258>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <menu+0x1ac>
			menuSayac = 12;
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <menu+0x250>)
 800178c:	220c      	movs	r2, #12
 800178e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <menu+0x250>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d106      	bne.n	80017a6 <menu+0x1c2>
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <menu+0x258>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d102      	bne.n	80017a6 <menu+0x1c2>
			menuSayac = 8;
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <menu+0x250>)
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <menu+0x250>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d10a      	bne.n	80017c4 <menu+0x1e0>
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <menu+0x25c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d003      	beq.n	80017be <menu+0x1da>
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <menu+0x25c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d102      	bne.n	80017c4 <menu+0x1e0>
			menuSayac = 9;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <menu+0x250>)
 80017c0:	2209      	movs	r2, #9
 80017c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <menu+0x250>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d10a      	bne.n	80017e2 <menu+0x1fe>
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <menu+0x260>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d003      	beq.n	80017dc <menu+0x1f8>
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <menu+0x260>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d102      	bne.n	80017e2 <menu+0x1fe>
			menuSayac = 11;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <menu+0x250>)
 80017de:	220b      	movs	r2, #11
 80017e0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <menu+0x250>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	d106      	bne.n	80017f8 <menu+0x214>
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <menu+0x264>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <menu+0x214>
			menuSayac = 14;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <menu+0x250>)
 80017f4:	220e      	movs	r2, #14
 80017f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <menu+0x250>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b19      	cmp	r3, #25
 80017fe:	d106      	bne.n	800180e <menu+0x22a>
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <menu+0x254>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <menu+0x22a>
			menuSayac = 23;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <menu+0x250>)
 800180a:	2217      	movs	r2, #23
 800180c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800180e:	f004 fc5f 	bl	80060d0 <bekle>
	}

	if (menuSayac == 0) {
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <menu+0x250>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d134      	bne.n	8001884 <menu+0x2a0>
		if(dilSecim == 0) {
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <menu+0x26c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d122      	bne.n	8001868 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001822:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <menu+0x270>)
 8001824:	2101      	movs	r1, #1
 8001826:	2001      	movs	r0, #1
 8001828:	e016      	b.n	8001858 <menu+0x274>
 800182a:	bf00      	nop
 800182c:	40010800 	.word	0x40010800
 8001830:	20000c68 	.word	0x20000c68
 8001834:	20000c39 	.word	0x20000c39
 8001838:	20000c48 	.word	0x20000c48
 800183c:	20000c41 	.word	0x20000c41
 8001840:	20000c42 	.word	0x20000c42
 8001844:	20000c43 	.word	0x20000c43
 8001848:	20000c44 	.word	0x20000c44
 800184c:	40011000 	.word	0x40011000
 8001850:	20000c5a 	.word	0x20000c5a
 8001854:	0800d918 	.word	0x0800d918
 8001858:	f7fe ffae 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800185c:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <menu+0x4cc>)
 800185e:	2101      	movs	r1, #1
 8001860:	2002      	movs	r0, #2
 8001862:	f7fe ffa9 	bl	80007b8 <lcd_print>
 8001866:	e00d      	b.n	8001884 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <menu+0x4d0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d109      	bne.n	8001884 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001870:	4a91      	ldr	r2, [pc, #580]	; (8001ab8 <menu+0x4d4>)
 8001872:	2101      	movs	r1, #1
 8001874:	2001      	movs	r0, #1
 8001876:	f7fe ff9f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800187a:	4a90      	ldr	r2, [pc, #576]	; (8001abc <menu+0x4d8>)
 800187c:	2101      	movs	r1, #1
 800187e:	2002      	movs	r0, #2
 8001880:	f7fe ff9a 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001884:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <menu+0x4dc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 82b5 	bne.w	8001df8 <menu+0x814>
		if(dilSecim == 0) {
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <menu+0x4d0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001896:	4a8b      	ldr	r2, [pc, #556]	; (8001ac4 <menu+0x4e0>)
 8001898:	2101      	movs	r1, #1
 800189a:	2001      	movs	r0, #1
 800189c:	f7fe ff8c 	bl	80007b8 <lcd_print>
 80018a0:	e008      	b.n	80018b4 <menu+0x2d0>
		} else if(dilSecim == 1) {
 80018a2:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <menu+0x4d0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d104      	bne.n	80018b4 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80018aa:	4a87      	ldr	r2, [pc, #540]	; (8001ac8 <menu+0x4e4>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7fe ff82 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80018b4:	4b85      	ldr	r3, [pc, #532]	; (8001acc <menu+0x4e8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d123      	bne.n	8001904 <menu+0x320>
			if(dilSecim == 0) {
 80018bc:	4b7d      	ldr	r3, [pc, #500]	; (8001ab4 <menu+0x4d0>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80018c4:	4a82      	ldr	r2, [pc, #520]	; (8001ad0 <menu+0x4ec>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	2002      	movs	r0, #2
 80018ca:	f7fe ff75 	bl	80007b8 <lcd_print>
 80018ce:	e008      	b.n	80018e2 <menu+0x2fe>

			} else if(dilSecim == 1) {
 80018d0:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <menu+0x4d0>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d104      	bne.n	80018e2 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 80018d8:	4a7e      	ldr	r2, [pc, #504]	; (8001ad4 <menu+0x4f0>)
 80018da:	2101      	movs	r1, #1
 80018dc:	2002      	movs	r0, #2
 80018de:	f7fe ff6b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018e2:	4a7d      	ldr	r2, [pc, #500]	; (8001ad8 <menu+0x4f4>)
 80018e4:	210f      	movs	r1, #15
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7fe ff66 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018ec:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <menu+0x4f8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	220a      	movs	r2, #10
 80018f2:	497b      	ldr	r1, [pc, #492]	; (8001ae0 <menu+0x4fc>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00b f9f3 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 80018fa:	4a79      	ldr	r2, [pc, #484]	; (8001ae0 <menu+0x4fc>)
 80018fc:	210e      	movs	r1, #14
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe ff5a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001904:	4b71      	ldr	r3, [pc, #452]	; (8001acc <menu+0x4e8>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d123      	bne.n	8001954 <menu+0x370>
			if(dilSecim == 0) {
 800190c:	4b69      	ldr	r3, [pc, #420]	; (8001ab4 <menu+0x4d0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001914:	4a73      	ldr	r2, [pc, #460]	; (8001ae4 <menu+0x500>)
 8001916:	2101      	movs	r1, #1
 8001918:	2002      	movs	r0, #2
 800191a:	f7fe ff4d 	bl	80007b8 <lcd_print>
 800191e:	e008      	b.n	8001932 <menu+0x34e>
			} else if(dilSecim == 1) {
 8001920:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <menu+0x4d0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d104      	bne.n	8001932 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 8001928:	4a6f      	ldr	r2, [pc, #444]	; (8001ae8 <menu+0x504>)
 800192a:	2101      	movs	r1, #1
 800192c:	2002      	movs	r0, #2
 800192e:	f7fe ff43 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <menu+0x508>)
 8001934:	210f      	movs	r1, #15
 8001936:	2002      	movs	r0, #2
 8001938:	f7fe ff3e 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800193c:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <menu+0x50c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	220a      	movs	r2, #10
 8001942:	4967      	ldr	r1, [pc, #412]	; (8001ae0 <menu+0x4fc>)
 8001944:	4618      	mov	r0, r3
 8001946:	f00b f9cb 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 800194a:	4a65      	ldr	r2, [pc, #404]	; (8001ae0 <menu+0x4fc>)
 800194c:	210e      	movs	r1, #14
 800194e:	2002      	movs	r0, #2
 8001950:	f7fe ff32 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001954:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <menu+0x4e8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <menu+0x3c0>
			if(dilSecim == 0) {
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <menu+0x4d0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001964:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <menu+0x510>)
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f7fe ff25 	bl	80007b8 <lcd_print>
 800196e:	e008      	b.n	8001982 <menu+0x39e>
			} else if(dilSecim == 1) {
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <menu+0x4d0>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d104      	bne.n	8001982 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001978:	4a5f      	ldr	r2, [pc, #380]	; (8001af8 <menu+0x514>)
 800197a:	2101      	movs	r1, #1
 800197c:	2002      	movs	r0, #2
 800197e:	f7fe ff1b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <menu+0x508>)
 8001984:	210f      	movs	r1, #15
 8001986:	2002      	movs	r0, #2
 8001988:	f7fe ff16 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800198c:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <menu+0x518>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	220a      	movs	r2, #10
 8001992:	4953      	ldr	r1, [pc, #332]	; (8001ae0 <menu+0x4fc>)
 8001994:	4618      	mov	r0, r3
 8001996:	f00b f9a3 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 800199a:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <menu+0x4fc>)
 800199c:	210e      	movs	r1, #14
 800199e:	2002      	movs	r0, #2
 80019a0:	f7fe ff0a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <menu+0x4e8>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d123      	bne.n	80019f4 <menu+0x410>
			if(dilSecim == 0) {
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <menu+0x4d0>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <menu+0x51c>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7fe fefd 	bl	80007b8 <lcd_print>
 80019be:	e008      	b.n	80019d2 <menu+0x3ee>
			} else if(dilSecim == 1) {
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <menu+0x4d0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d104      	bne.n	80019d2 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 80019c8:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <menu+0x520>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f7fe fef3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019d2:	4a46      	ldr	r2, [pc, #280]	; (8001aec <menu+0x508>)
 80019d4:	210f      	movs	r1, #15
 80019d6:	2002      	movs	r0, #2
 80019d8:	f7fe feee 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <menu+0x524>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	220a      	movs	r2, #10
 80019e2:	493f      	ldr	r1, [pc, #252]	; (8001ae0 <menu+0x4fc>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00b f97b 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <menu+0x4fc>)
 80019ec:	210e      	movs	r1, #14
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7fe fee2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <menu+0x4e8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d123      	bne.n	8001a44 <menu+0x460>
			if(dilSecim == 0) {
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <menu+0x4d0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001a04:	4a41      	ldr	r2, [pc, #260]	; (8001b0c <menu+0x528>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f7fe fed5 	bl	80007b8 <lcd_print>
 8001a0e:	e008      	b.n	8001a22 <menu+0x43e>
			} else if(dilSecim == 1) {
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <menu+0x4d0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d104      	bne.n	8001a22 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 8001a18:	4a3d      	ldr	r2, [pc, #244]	; (8001b10 <menu+0x52c>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7fe fecb 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a22:	4a32      	ldr	r2, [pc, #200]	; (8001aec <menu+0x508>)
 8001a24:	210f      	movs	r1, #15
 8001a26:	2002      	movs	r0, #2
 8001a28:	f7fe fec6 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <menu+0x530>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	220a      	movs	r2, #10
 8001a32:	492b      	ldr	r1, [pc, #172]	; (8001ae0 <menu+0x4fc>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00b f953 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 8001a3a:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <menu+0x4fc>)
 8001a3c:	210e      	movs	r1, #14
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7fe feba 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <menu+0x4e8>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d123      	bne.n	8001a94 <menu+0x4b0>
			if(dilSecim == 0) {
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <menu+0x4d0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <menu+0x534>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7fe fead 	bl	80007b8 <lcd_print>
 8001a5e:	e008      	b.n	8001a72 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <menu+0x4d0>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d104      	bne.n	8001a72 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001a68:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <menu+0x538>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7fe fea3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <menu+0x508>)
 8001a74:	210f      	movs	r1, #15
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7fe fe9e 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <menu+0x53c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	220a      	movs	r2, #10
 8001a82:	4917      	ldr	r1, [pc, #92]	; (8001ae0 <menu+0x4fc>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00b f92b 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <menu+0x4fc>)
 8001a8c:	210e      	movs	r1, #14
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f7fe fe92 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <menu+0x4e8>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d15f      	bne.n	8001b5c <menu+0x578>
			if(dilSecim == 0) {
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <menu+0x4d0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d141      	bne.n	8001b28 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <menu+0x540>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7fe fe85 	bl	80007b8 <lcd_print>
 8001aae:	e044      	b.n	8001b3a <menu+0x556>
 8001ab0:	0800d92c 	.word	0x0800d92c
 8001ab4:	20000c5a 	.word	0x20000c5a
 8001ab8:	0800d940 	.word	0x0800d940
 8001abc:	0800d954 	.word	0x0800d954
 8001ac0:	20000c39 	.word	0x20000c39
 8001ac4:	0800d968 	.word	0x0800d968
 8001ac8:	0800d97c 	.word	0x0800d97c
 8001acc:	20000c3b 	.word	0x20000c3b
 8001ad0:	0800d990 	.word	0x0800d990
 8001ad4:	0800d9a0 	.word	0x0800d9a0
 8001ad8:	0800d9b0 	.word	0x0800d9b0
 8001adc:	20000c5b 	.word	0x20000c5b
 8001ae0:	20000bbc 	.word	0x20000bbc
 8001ae4:	0800d9b4 	.word	0x0800d9b4
 8001ae8:	0800d9c4 	.word	0x0800d9c4
 8001aec:	0800d9d4 	.word	0x0800d9d4
 8001af0:	20000c5c 	.word	0x20000c5c
 8001af4:	0800d9d8 	.word	0x0800d9d8
 8001af8:	0800d9e8 	.word	0x0800d9e8
 8001afc:	20000c5d 	.word	0x20000c5d
 8001b00:	0800d9f8 	.word	0x0800d9f8
 8001b04:	0800da08 	.word	0x0800da08
 8001b08:	20000c5e 	.word	0x20000c5e
 8001b0c:	0800da18 	.word	0x0800da18
 8001b10:	0800da28 	.word	0x0800da28
 8001b14:	20000c5f 	.word	0x20000c5f
 8001b18:	0800da38 	.word	0x0800da38
 8001b1c:	0800da48 	.word	0x0800da48
 8001b20:	20000c60 	.word	0x20000c60
 8001b24:	0800da58 	.word	0x0800da58
			} else if(dilSecim == 1) {
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <menu+0x684>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d104      	bne.n	8001b3a <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8001b30:	4a4e      	ldr	r2, [pc, #312]	; (8001c6c <menu+0x688>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7fe fe3f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b3a:	4a4d      	ldr	r2, [pc, #308]	; (8001c70 <menu+0x68c>)
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7fe fe3a 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b44:	4b4b      	ldr	r3, [pc, #300]	; (8001c74 <menu+0x690>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	220a      	movs	r2, #10
 8001b4a:	494b      	ldr	r1, [pc, #300]	; (8001c78 <menu+0x694>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f00b f8c7 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 8001b52:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <menu+0x694>)
 8001b54:	210e      	movs	r1, #14
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7fe fe2e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b5c:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <menu+0x698>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d123      	bne.n	8001bac <menu+0x5c8>
			if(dilSecim == 0) {
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <menu+0x684>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b6c:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <menu+0x69c>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	2002      	movs	r0, #2
 8001b72:	f7fe fe21 	bl	80007b8 <lcd_print>
 8001b76:	e008      	b.n	8001b8a <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <menu+0x684>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d104      	bne.n	8001b8a <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001b80:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <menu+0x6a0>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2002      	movs	r0, #2
 8001b86:	f7fe fe17 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b8a:	4a39      	ldr	r2, [pc, #228]	; (8001c70 <menu+0x68c>)
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f7fe fe12 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <menu+0x6a4>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	220a      	movs	r2, #10
 8001b9a:	4937      	ldr	r1, [pc, #220]	; (8001c78 <menu+0x694>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00b f89f 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 8001ba2:	4a35      	ldr	r2, [pc, #212]	; (8001c78 <menu+0x694>)
 8001ba4:	210e      	movs	r1, #14
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7fe fe06 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <menu+0x698>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d123      	bne.n	8001bfc <menu+0x618>
			if(dilSecim == 0) {
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <menu+0x684>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001bbc:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <menu+0x6a8>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f7fe fdf9 	bl	80007b8 <lcd_print>
 8001bc6:	e008      	b.n	8001bda <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <menu+0x684>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d104      	bne.n	8001bda <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001bd0:	4a2f      	ldr	r2, [pc, #188]	; (8001c90 <menu+0x6ac>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f7fe fdef 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <menu+0x68c>)
 8001bdc:	210f      	movs	r1, #15
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7fe fdea 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <menu+0x6b0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	220a      	movs	r2, #10
 8001bea:	4923      	ldr	r1, [pc, #140]	; (8001c78 <menu+0x694>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f00b f877 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 8001bf2:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <menu+0x694>)
 8001bf4:	210e      	movs	r1, #14
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f7fe fdde 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <menu+0x698>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d123      	bne.n	8001c4c <menu+0x668>
			if(dilSecim == 0) {
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <menu+0x684>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <menu+0x6b4>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	2002      	movs	r0, #2
 8001c12:	f7fe fdd1 	bl	80007b8 <lcd_print>
 8001c16:	e008      	b.n	8001c2a <menu+0x646>
			} else if(dilSecim == 1) {
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <menu+0x684>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d104      	bne.n	8001c2a <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <menu+0x6b8>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2002      	movs	r0, #2
 8001c26:	f7fe fdc7 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <menu+0x6bc>)
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7fe fdc2 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <menu+0x6c0>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	220a      	movs	r2, #10
 8001c3a:	490f      	ldr	r1, [pc, #60]	; (8001c78 <menu+0x694>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00b f84f 	bl	800cce0 <itoa>
			lcd_print(2, 15, snum);
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <menu+0x694>)
 8001c44:	210f      	movs	r1, #15
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7fe fdb6 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <menu+0x698>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	d134      	bne.n	8001cbe <menu+0x6da>
			if(dilSecim == 0) {
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <menu+0x684>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d127      	bne.n	8001cac <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <menu+0x6c4>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2002      	movs	r0, #2
 8001c62:	f7fe fda9 	bl	80007b8 <lcd_print>
 8001c66:	e02a      	b.n	8001cbe <menu+0x6da>
 8001c68:	20000c5a 	.word	0x20000c5a
 8001c6c:	0800da68 	.word	0x0800da68
 8001c70:	0800d9d4 	.word	0x0800d9d4
 8001c74:	20000c61 	.word	0x20000c61
 8001c78:	20000bbc 	.word	0x20000bbc
 8001c7c:	20000c3b 	.word	0x20000c3b
 8001c80:	0800da78 	.word	0x0800da78
 8001c84:	0800da88 	.word	0x0800da88
 8001c88:	20000c62 	.word	0x20000c62
 8001c8c:	0800da98 	.word	0x0800da98
 8001c90:	0800daa8 	.word	0x0800daa8
 8001c94:	20000c63 	.word	0x20000c63
 8001c98:	0800dab8 	.word	0x0800dab8
 8001c9c:	0800dac8 	.word	0x0800dac8
 8001ca0:	0800dad8 	.word	0x0800dad8
 8001ca4:	20000c64 	.word	0x20000c64
 8001ca8:	0800dadc 	.word	0x0800dadc
			} else if(dilSecim == 1) {
 8001cac:	4b82      	ldr	r3, [pc, #520]	; (8001eb8 <menu+0x8d4>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d104      	bne.n	8001cbe <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001cb4:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <menu+0x8d8>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f7fe fd7d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	487f      	ldr	r0, [pc, #508]	; (8001ec0 <menu+0x8dc>)
 8001cc2:	f007 ffe1 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d119      	bne.n	8001d00 <menu+0x71c>
 8001ccc:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <menu+0x8e0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d012      	beq.n	8001d00 <menu+0x71c>
 8001cda:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <menu+0x8e4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10e      	bne.n	8001d00 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001ce2:	4b7a      	ldr	r3, [pc, #488]	; (8001ecc <menu+0x8e8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <menu+0x8e8>)
 8001cec:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cee:	4b77      	ldr	r3, [pc, #476]	; (8001ecc <menu+0x8e8>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d902      	bls.n	8001cfc <menu+0x718>
				hataGostermeSirasi = 0;
 8001cf6:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <menu+0x8e8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cfc:	f004 f9e8 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d00:	2104      	movs	r1, #4
 8001d02:	486f      	ldr	r0, [pc, #444]	; (8001ec0 <menu+0x8dc>)
 8001d04:	f007 ffc0 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d119      	bne.n	8001d42 <menu+0x75e>
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <menu+0x8e0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	f083 0301 	eor.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <menu+0x75e>
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <menu+0x8e4>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10e      	bne.n	8001d42 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001d24:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <menu+0x8e8>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <menu+0x8e8>)
 8001d2e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001d30:	4b66      	ldr	r3, [pc, #408]	; (8001ecc <menu+0x8e8>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b0b      	cmp	r3, #11
 8001d36:	d902      	bls.n	8001d3e <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <menu+0x8e8>)
 8001d3a:	220a      	movs	r2, #10
 8001d3c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d3e:	f004 f9c7 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d42:	2108      	movs	r1, #8
 8001d44:	485e      	ldr	r0, [pc, #376]	; (8001ec0 <menu+0x8dc>)
 8001d46:	f007 ff9f 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d153      	bne.n	8001df8 <menu+0x814>
 8001d50:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <menu+0x8e0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f083 0301 	eor.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <menu+0x814>
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <menu+0x8e8>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d148      	bne.n	8001df8 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d66:	4b5a      	ldr	r3, [pc, #360]	; (8001ed0 <menu+0x8ec>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <menu+0x8f0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d74:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <menu+0x8f4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <menu+0x8f0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <menu+0x8f8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <menu+0x8f0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <menu+0x8fc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <menu+0x8f0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <menu+0x900>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <menu+0x8f0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001dac:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <menu+0x904>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <menu+0x8f0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <menu+0x908>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <menu+0x8f0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <menu+0x90c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <menu+0x8f0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <menu+0x910>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <menu+0x8f0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001de4:	4b44      	ldr	r3, [pc, #272]	; (8001ef8 <menu+0x914>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <menu+0x8f0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <menu+0x918>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <menu+0x91c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	f040 80fc 	bne.w	8001ffa <menu+0xa16>
		if(dilSecim == 0) {
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <menu+0x8d4>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001e0a:	4a3e      	ldr	r2, [pc, #248]	; (8001f04 <menu+0x920>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7fe fcd2 	bl	80007b8 <lcd_print>
 8001e14:	e008      	b.n	8001e28 <menu+0x844>
		} else if(dilSecim == 1) {
 8001e16:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <menu+0x8d4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d104      	bne.n	8001e28 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001e1e:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <menu+0x924>)
 8001e20:	2101      	movs	r1, #1
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7fe fcc8 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <menu+0x8e4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d003      	beq.n	8001e38 <menu+0x854>
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <menu+0x8e4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d112      	bne.n	8001e5e <menu+0x87a>
			if(dilSecim == 0) {
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <menu+0x8d4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e40:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <menu+0x928>)
 8001e42:	2101      	movs	r1, #1
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7fe fcb7 	bl	80007b8 <lcd_print>
 8001e4a:	e008      	b.n	8001e5e <menu+0x87a>
			} else if(dilSecim == 1) {
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <menu+0x8d4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d104      	bne.n	8001e5e <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <menu+0x92c>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7fe fcad 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <menu+0x930>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <menu+0x8b0>
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <menu+0x8e4>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d112      	bne.n	8001e94 <menu+0x8b0>
			if(dilSecim == 0) {
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <menu+0x8d4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <menu+0x934>)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7fe fc9c 	bl	80007b8 <lcd_print>
 8001e80:	e008      	b.n	8001e94 <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <menu+0x8d4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d104      	bne.n	8001e94 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001e8a:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <menu+0x938>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7fe fc92 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <menu+0x930>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d14c      	bne.n	8001f36 <menu+0x952>
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <menu+0x8e4>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d148      	bne.n	8001f36 <menu+0x952>
			if(dilSecim == 0) {
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <menu+0x8d4>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d13b      	bne.n	8001f24 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <menu+0x93c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7fe fc81 	bl	80007b8 <lcd_print>
 8001eb6:	e03e      	b.n	8001f36 <menu+0x952>
 8001eb8:	20000c5a 	.word	0x20000c5a
 8001ebc:	0800daf0 	.word	0x0800daf0
 8001ec0:	40010800 	.word	0x40010800
 8001ec4:	20000c68 	.word	0x20000c68
 8001ec8:	20000c48 	.word	0x20000c48
 8001ecc:	20000c3b 	.word	0x20000c3b
 8001ed0:	20000c5b 	.word	0x20000c5b
 8001ed4:	20000b28 	.word	0x20000b28
 8001ed8:	20000c5c 	.word	0x20000c5c
 8001edc:	20000c5d 	.word	0x20000c5d
 8001ee0:	20000c5e 	.word	0x20000c5e
 8001ee4:	20000c5f 	.word	0x20000c5f
 8001ee8:	20000c60 	.word	0x20000c60
 8001eec:	20000c61 	.word	0x20000c61
 8001ef0:	20000c62 	.word	0x20000c62
 8001ef4:	20000c63 	.word	0x20000c63
 8001ef8:	20000c64 	.word	0x20000c64
 8001efc:	20000c65 	.word	0x20000c65
 8001f00:	20000c39 	.word	0x20000c39
 8001f04:	0800db04 	.word	0x0800db04
 8001f08:	0800db18 	.word	0x0800db18
 8001f0c:	0800db2c 	.word	0x0800db2c
 8001f10:	0800db40 	.word	0x0800db40
 8001f14:	20000c3a 	.word	0x20000c3a
 8001f18:	0800db54 	.word	0x0800db54
 8001f1c:	0800db64 	.word	0x0800db64
 8001f20:	0800db74 	.word	0x0800db74
			} else if(dilSecim == 1) {
 8001f24:	4b98      	ldr	r3, [pc, #608]	; (8002188 <menu+0xba4>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d104      	bne.n	8001f36 <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001f2c:	4a97      	ldr	r2, [pc, #604]	; (800218c <menu+0xba8>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2002      	movs	r0, #2
 8001f32:	f7fe fc41 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f36:	2102      	movs	r1, #2
 8001f38:	4895      	ldr	r0, [pc, #596]	; (8002190 <menu+0xbac>)
 8001f3a:	f007 fea5 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d119      	bne.n	8001f78 <menu+0x994>
 8001f44:	4b93      	ldr	r3, [pc, #588]	; (8002194 <menu+0xbb0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d012      	beq.n	8001f78 <menu+0x994>
 8001f52:	4b91      	ldr	r3, [pc, #580]	; (8002198 <menu+0xbb4>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10e      	bne.n	8001f78 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001f5a:	4b90      	ldr	r3, [pc, #576]	; (800219c <menu+0xbb8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b8e      	ldr	r3, [pc, #568]	; (800219c <menu+0xbb8>)
 8001f64:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f66:	4b8d      	ldr	r3, [pc, #564]	; (800219c <menu+0xbb8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d902      	bls.n	8001f74 <menu+0x990>
				calismaSekli = 0;
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	; (800219c <menu+0xbb8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f74:	f004 f8ac 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4885      	ldr	r0, [pc, #532]	; (8002190 <menu+0xbac>)
 8001f7c:	f007 fe84 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d119      	bne.n	8001fba <menu+0x9d6>
 8001f86:	4b83      	ldr	r3, [pc, #524]	; (8002194 <menu+0xbb0>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d012      	beq.n	8001fba <menu+0x9d6>
 8001f94:	4b80      	ldr	r3, [pc, #512]	; (8002198 <menu+0xbb4>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10e      	bne.n	8001fba <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8001f9c:	4b7f      	ldr	r3, [pc, #508]	; (800219c <menu+0xbb8>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b7d      	ldr	r3, [pc, #500]	; (800219c <menu+0xbb8>)
 8001fa6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001fa8:	4b7c      	ldr	r3, [pc, #496]	; (800219c <menu+0xbb8>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <menu+0x9d2>
	    		calismaSekli = 1;
 8001fb0:	4b7a      	ldr	r3, [pc, #488]	; (800219c <menu+0xbb8>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001fb6:	f004 f88b 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fba:	2108      	movs	r1, #8
 8001fbc:	4874      	ldr	r0, [pc, #464]	; (8002190 <menu+0xbac>)
 8001fbe:	f007 fe63 	bl	8009c88 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d118      	bne.n	8001ffa <menu+0xa16>
 8001fc8:	4b72      	ldr	r3, [pc, #456]	; (8002194 <menu+0xbb0>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d011      	beq.n	8001ffa <menu+0xa16>
			eepromData[1] = calismaSekli;
 8001fd6:	4b71      	ldr	r3, [pc, #452]	; (800219c <menu+0xbb8>)
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	4b71      	ldr	r3, [pc, #452]	; (80021a0 <menu+0xbbc>)
 8001fdc:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <menu+0xbb8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d106      	bne.n	8001ff4 <menu+0xa10>
				altLimit = 1;
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <menu+0xbc0>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <menu+0xbc0>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b6b      	ldr	r3, [pc, #428]	; (80021a0 <menu+0xbbc>)
 8001ff2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ff4:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <menu+0xbc4>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ffa:	4b6c      	ldr	r3, [pc, #432]	; (80021ac <menu+0xbc8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	f040 8083 	bne.w	800210a <menu+0xb26>
		if(dilSecim == 0) {
 8002004:	4b60      	ldr	r3, [pc, #384]	; (8002188 <menu+0xba4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <menu+0xbcc>)
 800200e:	2101      	movs	r1, #1
 8002010:	2001      	movs	r0, #1
 8002012:	f7fe fbd1 	bl	80007b8 <lcd_print>
 8002016:	e008      	b.n	800202a <menu+0xa46>
		} else if(dilSecim == 1) {
 8002018:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <menu+0xba4>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d104      	bne.n	800202a <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002020:	4a64      	ldr	r2, [pc, #400]	; (80021b4 <menu+0xbd0>)
 8002022:	2101      	movs	r1, #1
 8002024:	2001      	movs	r0, #1
 8002026:	f7fe fbc7 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <menu+0xbd4>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <menu+0xa76>
			if(dilSecim == 0) {
 8002032:	4b55      	ldr	r3, [pc, #340]	; (8002188 <menu+0xba4>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 800203a:	4a60      	ldr	r2, [pc, #384]	; (80021bc <menu+0xbd8>)
 800203c:	2101      	movs	r1, #1
 800203e:	2002      	movs	r0, #2
 8002040:	f7fe fbba 	bl	80007b8 <lcd_print>
 8002044:	e012      	b.n	800206c <menu+0xa88>
			} else if(dilSecim == 1) {
 8002046:	4b50      	ldr	r3, [pc, #320]	; (8002188 <menu+0xba4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10e      	bne.n	800206c <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <menu+0xbdc>)
 8002050:	2101      	movs	r1, #1
 8002052:	2002      	movs	r0, #2
 8002054:	f7fe fbb0 	bl	80007b8 <lcd_print>
 8002058:	e008      	b.n	800206c <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <menu+0xbd4>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d104      	bne.n	800206c <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <menu+0xbe0>)
 8002064:	2101      	movs	r1, #1
 8002066:	2002      	movs	r0, #2
 8002068:	f7fe fba6 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800206c:	2102      	movs	r1, #2
 800206e:	4848      	ldr	r0, [pc, #288]	; (8002190 <menu+0xbac>)
 8002070:	f007 fe0a 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d115      	bne.n	80020a6 <menu+0xac2>
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <menu+0xbb0>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002088:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <menu+0xbd4>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <menu+0xbd4>)
 8002092:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002094:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <menu+0xbd4>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d902      	bls.n	80020a2 <menu+0xabe>
				emniyetCercevesi = 0;
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <menu+0xbd4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020a2:	f004 f815 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020a6:	2104      	movs	r1, #4
 80020a8:	4839      	ldr	r0, [pc, #228]	; (8002190 <menu+0xbac>)
 80020aa:	f007 fded 	bl	8009c88 <HAL_GPIO_ReadPin>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d115      	bne.n	80020e0 <menu+0xafc>
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <menu+0xbb0>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f083 0301 	eor.w	r3, r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00e      	beq.n	80020e0 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <menu+0xbd4>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <menu+0xbd4>)
 80020cc:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80020ce:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <menu+0xbd4>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <menu+0xaf8>
		   		emniyetCercevesi = 1;
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <menu+0xbd4>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020dc:	f003 fff8 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020e0:	2108      	movs	r1, #8
 80020e2:	482b      	ldr	r0, [pc, #172]	; (8002190 <menu+0xbac>)
 80020e4:	f007 fdd0 	bl	8009c88 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10d      	bne.n	800210a <menu+0xb26>
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <menu+0xbb0>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <menu+0xbd4>)
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <menu+0xbbc>)
 8002102:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002104:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <menu+0xbc4>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <menu+0xbc8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b04      	cmp	r3, #4
 8002110:	f040 80ba 	bne.w	8002288 <menu+0xca4>
		if(dilSecim == 0) {
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <menu+0xba4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <menu+0xbe4>)
 800211e:	2101      	movs	r1, #1
 8002120:	2001      	movs	r0, #1
 8002122:	f7fe fb49 	bl	80007b8 <lcd_print>
 8002126:	e008      	b.n	800213a <menu+0xb56>
		} else if(dilSecim == 1) {
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <menu+0xba4>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d104      	bne.n	800213a <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <menu+0xbe8>)
 8002132:	2101      	movs	r1, #1
 8002134:	2001      	movs	r0, #1
 8002136:	f7fe fb3f 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <menu+0xbec>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d113      	bne.n	800216a <menu+0xb86>
			if(dilSecim == 0) {
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <menu+0xba4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <menu+0xbd8>)
 800214c:	2101      	movs	r1, #1
 800214e:	2002      	movs	r0, #2
 8002150:	f7fe fb32 	bl	80007b8 <lcd_print>
 8002154:	e049      	b.n	80021ea <menu+0xc06>
			} else if(dilSecim == 1) {
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <menu+0xba4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d145      	bne.n	80021ea <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <menu+0xbdc>)
 8002160:	2101      	movs	r1, #1
 8002162:	2002      	movs	r0, #2
 8002164:	f7fe fb28 	bl	80007b8 <lcd_print>
 8002168:	e03f      	b.n	80021ea <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <menu+0xbec>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d13b      	bne.n	80021ea <menu+0xc06>
			if(dilSecim == 0) {
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <menu+0xba4>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12e      	bne.n	80021d8 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <menu+0xbf0>)
 800217c:	2101      	movs	r1, #1
 800217e:	2002      	movs	r0, #2
 8002180:	f7fe fb1a 	bl	80007b8 <lcd_print>
 8002184:	e031      	b.n	80021ea <menu+0xc06>
 8002186:	bf00      	nop
 8002188:	20000c5a 	.word	0x20000c5a
 800218c:	0800db84 	.word	0x0800db84
 8002190:	40010800 	.word	0x40010800
 8002194:	20000c68 	.word	0x20000c68
 8002198:	20000c48 	.word	0x20000c48
 800219c:	20000c3a 	.word	0x20000c3a
 80021a0:	20000b28 	.word	0x20000b28
 80021a4:	20000c3f 	.word	0x20000c3f
 80021a8:	20000c65 	.word	0x20000c65
 80021ac:	20000c39 	.word	0x20000c39
 80021b0:	0800db94 	.word	0x0800db94
 80021b4:	0800dba8 	.word	0x0800dba8
 80021b8:	20000c3d 	.word	0x20000c3d
 80021bc:	0800dbbc 	.word	0x0800dbbc
 80021c0:	0800dbd0 	.word	0x0800dbd0
 80021c4:	0800dbe4 	.word	0x0800dbe4
 80021c8:	0800dbf4 	.word	0x0800dbf4
 80021cc:	0800dc08 	.word	0x0800dc08
 80021d0:	20000c3e 	.word	0x20000c3e
 80021d4:	0800dc1c 	.word	0x0800dc1c
			} else if(dilSecim == 1) {
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <menu+0xe40>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d104      	bne.n	80021ea <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 80021e0:	4a91      	ldr	r2, [pc, #580]	; (8002428 <menu+0xe44>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	2002      	movs	r0, #2
 80021e6:	f7fe fae7 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ea:	2102      	movs	r1, #2
 80021ec:	488f      	ldr	r0, [pc, #572]	; (800242c <menu+0xe48>)
 80021ee:	f007 fd4b 	bl	8009c88 <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d115      	bne.n	8002224 <menu+0xc40>
 80021f8:	4b8d      	ldr	r3, [pc, #564]	; (8002430 <menu+0xe4c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002206:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <menu+0xe50>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b89      	ldr	r3, [pc, #548]	; (8002434 <menu+0xe50>)
 8002210:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <menu+0xe50>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d902      	bls.n	8002220 <menu+0xc3c>
				yavaslamaLimit = 0;
 800221a:	4b86      	ldr	r3, [pc, #536]	; (8002434 <menu+0xe50>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002220:	f003 ff56 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002224:	2104      	movs	r1, #4
 8002226:	4881      	ldr	r0, [pc, #516]	; (800242c <menu+0xe48>)
 8002228:	f007 fd2e 	bl	8009c88 <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d115      	bne.n	800225e <menu+0xc7a>
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <menu+0xe4c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002240:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <menu+0xe50>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b7a      	ldr	r3, [pc, #488]	; (8002434 <menu+0xe50>)
 800224a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800224c:	4b79      	ldr	r3, [pc, #484]	; (8002434 <menu+0xe50>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <menu+0xc76>
		   		yavaslamaLimit = 1;
 8002254:	4b77      	ldr	r3, [pc, #476]	; (8002434 <menu+0xe50>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800225a:	f003 ff39 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800225e:	2108      	movs	r1, #8
 8002260:	4872      	ldr	r0, [pc, #456]	; (800242c <menu+0xe48>)
 8002262:	f007 fd11 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10d      	bne.n	8002288 <menu+0xca4>
 800226c:	4b70      	ldr	r3, [pc, #448]	; (8002430 <menu+0xe4c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f083 0301 	eor.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <menu+0xe50>)
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	4b6e      	ldr	r3, [pc, #440]	; (8002438 <menu+0xe54>)
 8002280:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002282:	4b6e      	ldr	r3, [pc, #440]	; (800243c <menu+0xe58>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002288:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <menu+0xe5c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b05      	cmp	r3, #5
 800228e:	f040 80b9 	bne.w	8002404 <menu+0xe20>
		if(dilSecim == 0) {
 8002292:	4b64      	ldr	r3, [pc, #400]	; (8002424 <menu+0xe40>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 800229a:	4a6a      	ldr	r2, [pc, #424]	; (8002444 <menu+0xe60>)
 800229c:	2101      	movs	r1, #1
 800229e:	2001      	movs	r0, #1
 80022a0:	f7fe fa8a 	bl	80007b8 <lcd_print>
 80022a4:	e008      	b.n	80022b8 <menu+0xcd4>
		} else if(dilSecim == 1) {
 80022a6:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <menu+0xe40>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d104      	bne.n	80022b8 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80022ae:	4a66      	ldr	r2, [pc, #408]	; (8002448 <menu+0xe64>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7fe fa80 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 80022b8:	4b64      	ldr	r3, [pc, #400]	; (800244c <menu+0xe68>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d113      	bne.n	80022e8 <menu+0xd04>
			if(dilSecim == 0) {
 80022c0:	4b58      	ldr	r3, [pc, #352]	; (8002424 <menu+0xe40>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 80022c8:	4a61      	ldr	r2, [pc, #388]	; (8002450 <menu+0xe6c>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	2002      	movs	r0, #2
 80022ce:	f7fe fa73 	bl	80007b8 <lcd_print>
 80022d2:	e020      	b.n	8002316 <menu+0xd32>
			} else if(dilSecim == 1) {
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <menu+0xe40>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d11c      	bne.n	8002316 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 80022dc:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <menu+0xe70>)
 80022de:	2101      	movs	r1, #1
 80022e0:	2002      	movs	r0, #2
 80022e2:	f7fe fa69 	bl	80007b8 <lcd_print>
 80022e6:	e016      	b.n	8002316 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <menu+0xe68>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d112      	bne.n	8002316 <menu+0xd32>
			if(dilSecim == 0){
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <menu+0xe40>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 80022f8:	4a57      	ldr	r2, [pc, #348]	; (8002458 <menu+0xe74>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	2002      	movs	r0, #2
 80022fe:	f7fe fa5b 	bl	80007b8 <lcd_print>
 8002302:	e008      	b.n	8002316 <menu+0xd32>
			} else if(dilSecim == 1){
 8002304:	4b47      	ldr	r3, [pc, #284]	; (8002424 <menu+0xe40>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d104      	bne.n	8002316 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 800230c:	4a46      	ldr	r2, [pc, #280]	; (8002428 <menu+0xe44>)
 800230e:	2101      	movs	r1, #1
 8002310:	2002      	movs	r0, #2
 8002312:	f7fe fa51 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002316:	2102      	movs	r1, #2
 8002318:	4844      	ldr	r0, [pc, #272]	; (800242c <menu+0xe48>)
 800231a:	f007 fcb5 	bl	8009c88 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d119      	bne.n	8002358 <menu+0xd74>
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <menu+0xe4c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f083 0301 	eor.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <menu+0xd74>
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <menu+0xe78>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10e      	bne.n	8002358 <menu+0xd74>
			altLimit = altLimit + 1;
 800233a:	4b44      	ldr	r3, [pc, #272]	; (800244c <menu+0xe68>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <menu+0xe68>)
 8002344:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <menu+0xe68>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d902      	bls.n	8002354 <menu+0xd70>
				altLimit = 0;
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <menu+0xe68>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002354:	f003 febc 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002358:	2104      	movs	r1, #4
 800235a:	4834      	ldr	r0, [pc, #208]	; (800242c <menu+0xe48>)
 800235c:	f007 fc94 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d119      	bne.n	800239a <menu+0xdb6>
 8002366:	4b32      	ldr	r3, [pc, #200]	; (8002430 <menu+0xe4c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d012      	beq.n	800239a <menu+0xdb6>
 8002374:	4b39      	ldr	r3, [pc, #228]	; (800245c <menu+0xe78>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <menu+0xdb6>
			altLimit = altLimit - 1;
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <menu+0xe68>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <menu+0xe68>)
 8002386:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002388:	4b30      	ldr	r3, [pc, #192]	; (800244c <menu+0xe68>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <menu+0xdb2>
		   		altLimit = 1;
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <menu+0xe68>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002396:	f003 fe9b 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800239a:	2108      	movs	r1, #8
 800239c:	4823      	ldr	r0, [pc, #140]	; (800242c <menu+0xe48>)
 800239e:	f007 fc73 	bl	8009c88 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d12d      	bne.n	8002404 <menu+0xe20>
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <menu+0xe4c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d026      	beq.n	8002404 <menu+0xe20>
			eepromData[5] = altLimit;
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <menu+0xe68>)
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <menu+0xe54>)
 80023bc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <menu+0xe68>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d110      	bne.n	80023e8 <menu+0xe04>
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <menu+0xe7c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <menu+0xdf2>
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <menu+0xe7c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d108      	bne.n	80023e8 <menu+0xe04>
				kapiTablaAcKonum = 3;
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <menu+0xe7c>)
 80023d8:	2203      	movs	r2, #3
 80023da:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <menu+0xe7c>)
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <menu+0xe54>)
 80023e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023e6:	e00a      	b.n	80023fe <menu+0xe1a>
			} else if(altLimit == 0) {
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <menu+0xe68>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <menu+0xe1a>
				platformSilindirTipi = 0;
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <menu+0xe80>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <menu+0xe80>)
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <menu+0xe54>)
 80023fc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <menu+0xe58>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <menu+0xe5c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b06      	cmp	r3, #6
 800240a:	f040 80b6 	bne.w	800257a <menu+0xf96>
		if(dilSecim == 0) {
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <menu+0xe40>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12a      	bne.n	800246c <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002416:	4a14      	ldr	r2, [pc, #80]	; (8002468 <menu+0xe84>)
 8002418:	2101      	movs	r1, #1
 800241a:	2001      	movs	r0, #1
 800241c:	f7fe f9cc 	bl	80007b8 <lcd_print>
 8002420:	e02d      	b.n	800247e <menu+0xe9a>
 8002422:	bf00      	nop
 8002424:	20000c5a 	.word	0x20000c5a
 8002428:	0800dc30 	.word	0x0800dc30
 800242c:	40010800 	.word	0x40010800
 8002430:	20000c68 	.word	0x20000c68
 8002434:	20000c3e 	.word	0x20000c3e
 8002438:	20000b28 	.word	0x20000b28
 800243c:	20000c65 	.word	0x20000c65
 8002440:	20000c39 	.word	0x20000c39
 8002444:	0800dc44 	.word	0x0800dc44
 8002448:	0800dc58 	.word	0x0800dc58
 800244c:	20000c3f 	.word	0x20000c3f
 8002450:	0800dbbc 	.word	0x0800dbbc
 8002454:	0800dbd0 	.word	0x0800dbd0
 8002458:	0800dc1c 	.word	0x0800dc1c
 800245c:	20000c3a 	.word	0x20000c3a
 8002460:	20000c46 	.word	0x20000c46
 8002464:	20000c4c 	.word	0x20000c4c
 8002468:	0800dc6c 	.word	0x0800dc6c
		} else if(dilSecim == 1){
 800246c:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <menu+0x1074>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d104      	bne.n	800247e <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002474:	4a79      	ldr	r2, [pc, #484]	; (800265c <menu+0x1078>)
 8002476:	2101      	movs	r1, #1
 8002478:	2001      	movs	r0, #1
 800247a:	f7fe f99d 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <menu+0x107c>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <menu+0xeca>
			if(dilSecim == 0) {
 8002486:	4b74      	ldr	r3, [pc, #464]	; (8002658 <menu+0x1074>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 800248e:	4a75      	ldr	r2, [pc, #468]	; (8002664 <menu+0x1080>)
 8002490:	2101      	movs	r1, #1
 8002492:	2002      	movs	r0, #2
 8002494:	f7fe f990 	bl	80007b8 <lcd_print>
 8002498:	e020      	b.n	80024dc <menu+0xef8>
			} else if(dilSecim == 1){
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <menu+0x1074>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d11c      	bne.n	80024dc <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 80024a2:	4a71      	ldr	r2, [pc, #452]	; (8002668 <menu+0x1084>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7fe f986 	bl	80007b8 <lcd_print>
 80024ac:	e016      	b.n	80024dc <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 80024ae:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <menu+0x107c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d112      	bne.n	80024dc <menu+0xef8>
			if(dilSecim == 0) {
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <menu+0x1074>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 80024be:	4a6b      	ldr	r2, [pc, #428]	; (800266c <menu+0x1088>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe f978 	bl	80007b8 <lcd_print>
 80024c8:	e008      	b.n	80024dc <menu+0xef8>
			} else if(dilSecim == 1) {
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <menu+0x1074>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d104      	bne.n	80024dc <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 80024d2:	4a67      	ldr	r2, [pc, #412]	; (8002670 <menu+0x108c>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe f96e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024dc:	2102      	movs	r1, #2
 80024de:	4865      	ldr	r0, [pc, #404]	; (8002674 <menu+0x1090>)
 80024e0:	f007 fbd2 	bl	8009c88 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d115      	bne.n	8002516 <menu+0xf32>
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <menu+0x1094>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00e      	beq.n	8002516 <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <menu+0x107c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b57      	ldr	r3, [pc, #348]	; (8002660 <menu+0x107c>)
 8002502:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <menu+0x107c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d902      	bls.n	8002512 <menu+0xf2e>
				basincSalteri = 0;
 800250c:	4b54      	ldr	r3, [pc, #336]	; (8002660 <menu+0x107c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002512:	f003 fddd 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002516:	2104      	movs	r1, #4
 8002518:	4856      	ldr	r0, [pc, #344]	; (8002674 <menu+0x1090>)
 800251a:	f007 fbb5 	bl	8009c88 <HAL_GPIO_ReadPin>
 800251e:	4603      	mov	r3, r0
 8002520:	2b01      	cmp	r3, #1
 8002522:	d115      	bne.n	8002550 <menu+0xf6c>
 8002524:	4b54      	ldr	r3, [pc, #336]	; (8002678 <menu+0x1094>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 8002532:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <menu+0x107c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	3b01      	subs	r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <menu+0x107c>)
 800253c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <menu+0x107c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <menu+0xf68>
		   		basincSalteri = 1;
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <menu+0x107c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800254c:	f003 fdc0 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002550:	2108      	movs	r1, #8
 8002552:	4848      	ldr	r0, [pc, #288]	; (8002674 <menu+0x1090>)
 8002554:	f007 fb98 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10d      	bne.n	800257a <menu+0xf96>
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <menu+0x1094>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <menu+0xf96>
			eepromData[6] = basincSalteri;
 800256c:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <menu+0x107c>)
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <menu+0x1098>)
 8002572:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002574:	4b42      	ldr	r3, [pc, #264]	; (8002680 <menu+0x109c>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <menu+0x10a0>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b07      	cmp	r3, #7
 8002580:	f040 80f5 	bne.w	800276e <menu+0x118a>
		if(dilSecim == 0) {
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <menu+0x1074>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800258c:	4a3e      	ldr	r2, [pc, #248]	; (8002688 <menu+0x10a4>)
 800258e:	2101      	movs	r1, #1
 8002590:	2001      	movs	r0, #1
 8002592:	f7fe f911 	bl	80007b8 <lcd_print>
 8002596:	e008      	b.n	80025aa <menu+0xfc6>
		} else if(dilSecim == 1){
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <menu+0x1074>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d104      	bne.n	80025aa <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80025a0:	4a3a      	ldr	r2, [pc, #232]	; (800268c <menu+0x10a8>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7fe f907 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <menu+0x10ac>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d113      	bne.n	80025da <menu+0xff6>
			if(dilSecim == 0) {
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <menu+0x1074>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 80025ba:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <menu+0x1080>)
 80025bc:	2101      	movs	r1, #1
 80025be:	2002      	movs	r0, #2
 80025c0:	f7fe f8fa 	bl	80007b8 <lcd_print>
 80025c4:	e079      	b.n	80026ba <menu+0x10d6>
			} else if(dilSecim == 1){
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <menu+0x1074>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d175      	bne.n	80026ba <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 80025ce:	4a26      	ldr	r2, [pc, #152]	; (8002668 <menu+0x1084>)
 80025d0:	2101      	movs	r1, #1
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7fe f8f0 	bl	80007b8 <lcd_print>
 80025d8:	e06f      	b.n	80026ba <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <menu+0x10ac>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d113      	bne.n	800260a <menu+0x1026>
			if(dilSecim == 0) {
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <menu+0x1074>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025ea:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <menu+0x10b0>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	2002      	movs	r0, #2
 80025f0:	f7fe f8e2 	bl	80007b8 <lcd_print>
 80025f4:	e061      	b.n	80026ba <menu+0x10d6>
			} else if(dilSecim == 1) {
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <menu+0x1074>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d15d      	bne.n	80026ba <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 80025fe:	4a26      	ldr	r2, [pc, #152]	; (8002698 <menu+0x10b4>)
 8002600:	2101      	movs	r1, #1
 8002602:	2002      	movs	r0, #2
 8002604:	f7fe f8d8 	bl	80007b8 <lcd_print>
 8002608:	e057      	b.n	80026ba <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <menu+0x10ac>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d113      	bne.n	800263a <menu+0x1056>
			if(dilSecim == 0) {
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <menu+0x1074>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 800261a:	4a20      	ldr	r2, [pc, #128]	; (800269c <menu+0x10b8>)
 800261c:	2101      	movs	r1, #1
 800261e:	2002      	movs	r0, #2
 8002620:	f7fe f8ca 	bl	80007b8 <lcd_print>
 8002624:	e049      	b.n	80026ba <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <menu+0x1074>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d145      	bne.n	80026ba <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <menu+0x10bc>)
 8002630:	2101      	movs	r1, #1
 8002632:	2002      	movs	r0, #2
 8002634:	f7fe f8c0 	bl	80007b8 <lcd_print>
 8002638:	e03f      	b.n	80026ba <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <menu+0x10ac>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d13b      	bne.n	80026ba <menu+0x10d6>
			if(dilSecim == 0) {
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <menu+0x1074>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d12e      	bne.n	80026a8 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <menu+0x10c0>)
 800264c:	2101      	movs	r1, #1
 800264e:	2002      	movs	r0, #2
 8002650:	f7fe f8b2 	bl	80007b8 <lcd_print>
 8002654:	e031      	b.n	80026ba <menu+0x10d6>
 8002656:	bf00      	nop
 8002658:	20000c5a 	.word	0x20000c5a
 800265c:	0800dc7c 	.word	0x0800dc7c
 8002660:	20000c40 	.word	0x20000c40
 8002664:	0800dbbc 	.word	0x0800dbbc
 8002668:	0800dbd0 	.word	0x0800dbd0
 800266c:	0800dc1c 	.word	0x0800dc1c
 8002670:	0800dc30 	.word	0x0800dc30
 8002674:	40010800 	.word	0x40010800
 8002678:	20000c68 	.word	0x20000c68
 800267c:	20000b28 	.word	0x20000b28
 8002680:	20000c65 	.word	0x20000c65
 8002684:	20000c39 	.word	0x20000c39
 8002688:	0800dc8c 	.word	0x0800dc8c
 800268c:	0800dca0 	.word	0x0800dca0
 8002690:	20000c41 	.word	0x20000c41
 8002694:	0800dcb4 	.word	0x0800dcb4
 8002698:	0800dcc8 	.word	0x0800dcc8
 800269c:	0800dcdc 	.word	0x0800dcdc
 80026a0:	0800dcf0 	.word	0x0800dcf0
 80026a4:	0800dd04 	.word	0x0800dd04
			} else if(dilSecim == 1){
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <menu+0x132c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d104      	bne.n	80026ba <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80026b0:	4a98      	ldr	r2, [pc, #608]	; (8002914 <menu+0x1330>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	2002      	movs	r0, #2
 80026b6:	f7fe f87f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ba:	2102      	movs	r1, #2
 80026bc:	4896      	ldr	r0, [pc, #600]	; (8002918 <menu+0x1334>)
 80026be:	f007 fae3 	bl	8009c88 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d115      	bne.n	80026f4 <menu+0x1110>
 80026c8:	4b94      	ldr	r3, [pc, #592]	; (800291c <menu+0x1338>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 80026d6:	4b92      	ldr	r3, [pc, #584]	; (8002920 <menu+0x133c>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b90      	ldr	r3, [pc, #576]	; (8002920 <menu+0x133c>)
 80026e0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026e2:	4b8f      	ldr	r3, [pc, #572]	; (8002920 <menu+0x133c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d902      	bls.n	80026f0 <menu+0x110c>
				kapiSecimleri = 0;
 80026ea:	4b8d      	ldr	r3, [pc, #564]	; (8002920 <menu+0x133c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026f0:	f003 fcee 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f4:	2104      	movs	r1, #4
 80026f6:	4888      	ldr	r0, [pc, #544]	; (8002918 <menu+0x1334>)
 80026f8:	f007 fac6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d115      	bne.n	800272e <menu+0x114a>
 8002702:	4b86      	ldr	r3, [pc, #536]	; (800291c <menu+0x1338>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f083 0301 	eor.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002710:	4b83      	ldr	r3, [pc, #524]	; (8002920 <menu+0x133c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b81      	ldr	r3, [pc, #516]	; (8002920 <menu+0x133c>)
 800271a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <menu+0x133c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d902      	bls.n	800272a <menu+0x1146>
		   		kapiSecimleri = 3;
 8002724:	4b7e      	ldr	r3, [pc, #504]	; (8002920 <menu+0x133c>)
 8002726:	2203      	movs	r2, #3
 8002728:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800272a:	f003 fcd1 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800272e:	2108      	movs	r1, #8
 8002730:	4879      	ldr	r0, [pc, #484]	; (8002918 <menu+0x1334>)
 8002732:	f007 faa9 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d118      	bne.n	800276e <menu+0x118a>
 800273c:	4b77      	ldr	r3, [pc, #476]	; (800291c <menu+0x1338>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 800274a:	4b75      	ldr	r3, [pc, #468]	; (8002920 <menu+0x133c>)
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	4b75      	ldr	r3, [pc, #468]	; (8002924 <menu+0x1340>)
 8002750:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <menu+0x133c>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <menu+0x1184>
				altLimit = 1;
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <menu+0x1344>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002760:	4b71      	ldr	r3, [pc, #452]	; (8002928 <menu+0x1344>)
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <menu+0x1340>)
 8002766:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002768:	4b70      	ldr	r3, [pc, #448]	; (800292c <menu+0x1348>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800276e:	4b70      	ldr	r3, [pc, #448]	; (8002930 <menu+0x134c>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b08      	cmp	r3, #8
 8002774:	f040 8092 	bne.w	800289c <menu+0x12b8>
		if(dilSecim == 0) {
 8002778:	4b65      	ldr	r3, [pc, #404]	; (8002910 <menu+0x132c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002780:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <menu+0x1350>)
 8002782:	2101      	movs	r1, #1
 8002784:	2001      	movs	r0, #1
 8002786:	f7fe f817 	bl	80007b8 <lcd_print>
 800278a:	e008      	b.n	800279e <menu+0x11ba>
		} else if(dilSecim == 1) {
 800278c:	4b60      	ldr	r3, [pc, #384]	; (8002910 <menu+0x132c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d104      	bne.n	800279e <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002794:	4a68      	ldr	r2, [pc, #416]	; (8002938 <menu+0x1354>)
 8002796:	2101      	movs	r1, #1
 8002798:	2001      	movs	r0, #1
 800279a:	f7fe f80d 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <menu+0x1358>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d113      	bne.n	80027ce <menu+0x11ea>
			if(dilSecim == 0) {
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <menu+0x132c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 80027ae:	4a64      	ldr	r2, [pc, #400]	; (8002940 <menu+0x135c>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7fe f800 	bl	80007b8 <lcd_print>
 80027b8:	e020      	b.n	80027fc <menu+0x1218>
			} else if(dilSecim == 1) {
 80027ba:	4b55      	ldr	r3, [pc, #340]	; (8002910 <menu+0x132c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11c      	bne.n	80027fc <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 80027c2:	4a60      	ldr	r2, [pc, #384]	; (8002944 <menu+0x1360>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	2002      	movs	r0, #2
 80027c8:	f7fd fff6 	bl	80007b8 <lcd_print>
 80027cc:	e016      	b.n	80027fc <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <menu+0x1358>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d112      	bne.n	80027fc <menu+0x1218>
			if(dilSecim == 0){
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <menu+0x132c>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <menu+0x1364>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	2002      	movs	r0, #2
 80027e4:	f7fd ffe8 	bl	80007b8 <lcd_print>
 80027e8:	e008      	b.n	80027fc <menu+0x1218>
			} else if(dilSecim == 1){
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <menu+0x132c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d104      	bne.n	80027fc <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 80027f2:	4a56      	ldr	r2, [pc, #344]	; (800294c <menu+0x1368>)
 80027f4:	2101      	movs	r1, #1
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7fd ffde 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fc:	2102      	movs	r1, #2
 80027fe:	4846      	ldr	r0, [pc, #280]	; (8002918 <menu+0x1334>)
 8002800:	f007 fa42 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d115      	bne.n	8002836 <menu+0x1252>
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <menu+0x1338>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002818:	4b48      	ldr	r3, [pc, #288]	; (800293c <menu+0x1358>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <menu+0x1358>)
 8002822:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <menu+0x1358>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d902      	bls.n	8002832 <menu+0x124e>
				kapiAcTipi = 0;
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <menu+0x1358>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002832:	f003 fc4d 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002836:	2104      	movs	r1, #4
 8002838:	4837      	ldr	r0, [pc, #220]	; (8002918 <menu+0x1334>)
 800283a:	f007 fa25 	bl	8009c88 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b01      	cmp	r3, #1
 8002842:	d115      	bne.n	8002870 <menu+0x128c>
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <menu+0x1338>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 8002852:	4b3a      	ldr	r3, [pc, #232]	; (800293c <menu+0x1358>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	3b01      	subs	r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <menu+0x1358>)
 800285c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <menu+0x1358>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <menu+0x1288>
		   		kapiAcTipi = 1;
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <menu+0x1358>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800286c:	f003 fc30 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002870:	2108      	movs	r1, #8
 8002872:	4829      	ldr	r0, [pc, #164]	; (8002918 <menu+0x1334>)
 8002874:	f007 fa08 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10e      	bne.n	800289c <menu+0x12b8>
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <menu+0x1338>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	f083 0301 	eor.w	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <menu+0x1358>)
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <menu+0x1340>)
 8002892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <menu+0x1348>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <menu+0x134c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	f040 80b9 	bne.w	8002a18 <menu+0x1434>
		if(dilSecim == 0){
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <menu+0x132c>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <menu+0x136c>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7fd ff80 	bl	80007b8 <lcd_print>
 80028b8:	e008      	b.n	80028cc <menu+0x12e8>
		} else if(dilSecim == 1) {
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <menu+0x132c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d104      	bne.n	80028cc <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <menu+0x1370>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7fd ff76 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <menu+0x1374>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 80028d4:	4a21      	ldr	r2, [pc, #132]	; (800295c <menu+0x1378>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	2002      	movs	r0, #2
 80028da:	f7fd ff6d 	bl	80007b8 <lcd_print>
 80028de:	e04c      	b.n	800297a <menu+0x1396>
		} else if(kapi1Tip == 1) {
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <menu+0x1374>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d13f      	bne.n	8002968 <menu+0x1384>
			if(dilSecim == 0){
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <menu+0x132c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <menu+0x137c>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	2002      	movs	r0, #2
 80028f6:	f7fd ff5f 	bl	80007b8 <lcd_print>
 80028fa:	e03e      	b.n	800297a <menu+0x1396>
			} else if(dilSecim == 1) {
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <menu+0x132c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d13a      	bne.n	800297a <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 8002904:	4a17      	ldr	r2, [pc, #92]	; (8002964 <menu+0x1380>)
 8002906:	2101      	movs	r1, #1
 8002908:	2002      	movs	r0, #2
 800290a:	f7fd ff55 	bl	80007b8 <lcd_print>
 800290e:	e034      	b.n	800297a <menu+0x1396>
 8002910:	20000c5a 	.word	0x20000c5a
 8002914:	0800dd18 	.word	0x0800dd18
 8002918:	40010800 	.word	0x40010800
 800291c:	20000c68 	.word	0x20000c68
 8002920:	20000c41 	.word	0x20000c41
 8002924:	20000b28 	.word	0x20000b28
 8002928:	20000c3f 	.word	0x20000c3f
 800292c:	20000c65 	.word	0x20000c65
 8002930:	20000c39 	.word	0x20000c39
 8002934:	0800dd2c 	.word	0x0800dd2c
 8002938:	0800dd40 	.word	0x0800dd40
 800293c:	20000c45 	.word	0x20000c45
 8002940:	0800dd54 	.word	0x0800dd54
 8002944:	0800dd64 	.word	0x0800dd64
 8002948:	0800dd74 	.word	0x0800dd74
 800294c:	0800dd88 	.word	0x0800dd88
 8002950:	0800dd9c 	.word	0x0800dd9c
 8002954:	0800ddb0 	.word	0x0800ddb0
 8002958:	20000c42 	.word	0x20000c42
 800295c:	0800ddc4 	.word	0x0800ddc4
 8002960:	0800ddd8 	.word	0x0800ddd8
 8002964:	0800dde8 	.word	0x0800dde8
			}
		} else if(kapi1Tip == 2) {
 8002968:	4b8a      	ldr	r3, [pc, #552]	; (8002b94 <menu+0x15b0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d104      	bne.n	800297a <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002970:	4a89      	ldr	r2, [pc, #548]	; (8002b98 <menu+0x15b4>)
 8002972:	2101      	movs	r1, #1
 8002974:	2002      	movs	r0, #2
 8002976:	f7fd ff1f 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800297a:	2102      	movs	r1, #2
 800297c:	4887      	ldr	r0, [pc, #540]	; (8002b9c <menu+0x15b8>)
 800297e:	f007 f983 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002982:	4603      	mov	r3, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	d115      	bne.n	80029b4 <menu+0x13d0>
 8002988:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <menu+0x15bc>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00e      	beq.n	80029b4 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002996:	4b7f      	ldr	r3, [pc, #508]	; (8002b94 <menu+0x15b0>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b7d      	ldr	r3, [pc, #500]	; (8002b94 <menu+0x15b0>)
 80029a0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80029a2:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <menu+0x15b0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d902      	bls.n	80029b0 <menu+0x13cc>
				kapi1Tip = 0;
 80029aa:	4b7a      	ldr	r3, [pc, #488]	; (8002b94 <menu+0x15b0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029b0:	f003 fb8e 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b4:	2104      	movs	r1, #4
 80029b6:	4879      	ldr	r0, [pc, #484]	; (8002b9c <menu+0x15b8>)
 80029b8:	f007 f966 	bl	8009c88 <HAL_GPIO_ReadPin>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d115      	bne.n	80029ee <menu+0x140a>
 80029c2:	4b77      	ldr	r3, [pc, #476]	; (8002ba0 <menu+0x15bc>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	f083 0301 	eor.w	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 80029d0:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <menu+0x15b0>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <menu+0x15b0>)
 80029da:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80029dc:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <menu+0x15b0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d902      	bls.n	80029ea <menu+0x1406>
		   		kapi1Tip = 2;
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <menu+0x15b0>)
 80029e6:	2202      	movs	r2, #2
 80029e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029ea:	f003 fb71 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ee:	2108      	movs	r1, #8
 80029f0:	486a      	ldr	r0, [pc, #424]	; (8002b9c <menu+0x15b8>)
 80029f2:	f007 f949 	bl	8009c88 <HAL_GPIO_ReadPin>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10d      	bne.n	8002a18 <menu+0x1434>
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <menu+0x15bc>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	f083 0301 	eor.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <menu+0x15b0>)
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <menu+0x15c0>)
 8002a10:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <menu+0x15c4>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002a18:	4b64      	ldr	r3, [pc, #400]	; (8002bac <menu+0x15c8>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b0a      	cmp	r3, #10
 8002a1e:	d17f      	bne.n	8002b20 <menu+0x153c>
		if(dilSecim == 0) {
 8002a20:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <menu+0x15cc>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002a28:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <menu+0x15d0>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7fd fec3 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a32:	4a61      	ldr	r2, [pc, #388]	; (8002bb8 <menu+0x15d4>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	2002      	movs	r0, #2
 8002a38:	f7fd febe 	bl	80007b8 <lcd_print>
 8002a3c:	e00d      	b.n	8002a5a <menu+0x1476>
		} else if(dilSecim == 1) {
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <menu+0x15cc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d109      	bne.n	8002a5a <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a46:	4a5d      	ldr	r2, [pc, #372]	; (8002bbc <menu+0x15d8>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7fd feb4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a50:	4a5b      	ldr	r2, [pc, #364]	; (8002bc0 <menu+0x15dc>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7fd feaf 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <menu+0x15e0>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	220a      	movs	r2, #10
 8002a60:	4959      	ldr	r1, [pc, #356]	; (8002bc8 <menu+0x15e4>)
 8002a62:	4618      	mov	r0, r3
 8002a64:	f00a f93c 	bl	800cce0 <itoa>
		lcd_print(2,16,snum);
 8002a68:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <menu+0x15e4>)
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f7fd fea3 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a72:	2102      	movs	r1, #2
 8002a74:	4849      	ldr	r0, [pc, #292]	; (8002b9c <menu+0x15b8>)
 8002a76:	f007 f907 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d119      	bne.n	8002ab4 <menu+0x14d0>
 8002a80:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <menu+0x15bc>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <menu+0x14d0>
 8002a8e:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <menu+0x15b0>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10e      	bne.n	8002ab4 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002a96:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <menu+0x15e0>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <menu+0x15e0>)
 8002aa0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002aa2:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <menu+0x15e0>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d902      	bls.n	8002ab0 <menu+0x14cc>
				kapi1AcSure = 0;
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <menu+0x15e0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ab0:	f003 fb0e 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4839      	ldr	r0, [pc, #228]	; (8002b9c <menu+0x15b8>)
 8002ab8:	f007 f8e6 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d119      	bne.n	8002af6 <menu+0x1512>
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <menu+0x15bc>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f083 0301 	eor.w	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <menu+0x1512>
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <menu+0x15b0>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10e      	bne.n	8002af6 <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <menu+0x15e0>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <menu+0x15e0>)
 8002ae2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <menu+0x15e0>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d902      	bls.n	8002af2 <menu+0x150e>
		   		kapi1AcSure = 5;
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <menu+0x15e0>)
 8002aee:	2205      	movs	r2, #5
 8002af0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002af2:	f003 faed 	bl	80060d0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af6:	2108      	movs	r1, #8
 8002af8:	4828      	ldr	r0, [pc, #160]	; (8002b9c <menu+0x15b8>)
 8002afa:	f007 f8c5 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10d      	bne.n	8002b20 <menu+0x153c>
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <menu+0x15bc>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	f083 0301 	eor.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <menu+0x15e0>)
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <menu+0x15c0>)
 8002b18:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <menu+0x15c4>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002b20:	4b22      	ldr	r3, [pc, #136]	; (8002bac <menu+0x15c8>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b0b      	cmp	r3, #11
 8002b26:	f040 80b5 	bne.w	8002c94 <menu+0x16b0>
		if(dilSecim == 0) {
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <menu+0x15cc>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002b32:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <menu+0x15e8>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7fd fe3e 	bl	80007b8 <lcd_print>
 8002b3c:	e008      	b.n	8002b50 <menu+0x156c>
		} else if(dilSecim == 1) {
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <menu+0x15cc>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d104      	bne.n	8002b50 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b46:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <menu+0x15ec>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7fd fe34 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <menu+0x15f0>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <menu+0x15f4>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7fd fe2b 	bl	80007b8 <lcd_print>
 8002b62:	e048      	b.n	8002bf6 <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <menu+0x15f0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d13b      	bne.n	8002be4 <menu+0x1600>
			if(dilSecim == 0) {
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <menu+0x15cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <menu+0x15f8>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f7fd fe1d 	bl	80007b8 <lcd_print>
 8002b7e:	e03a      	b.n	8002bf6 <menu+0x1612>
			} else if(dilSecim == 1) {
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <menu+0x15cc>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d136      	bne.n	8002bf6 <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002b88:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <menu+0x15fc>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f7fd fe13 	bl	80007b8 <lcd_print>
 8002b92:	e030      	b.n	8002bf6 <menu+0x1612>
 8002b94:	20000c42 	.word	0x20000c42
 8002b98:	0800ddfc 	.word	0x0800ddfc
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	20000c68 	.word	0x20000c68
 8002ba4:	20000b28 	.word	0x20000b28
 8002ba8:	20000c65 	.word	0x20000c65
 8002bac:	20000c39 	.word	0x20000c39
 8002bb0:	20000c5a 	.word	0x20000c5a
 8002bb4:	0800de0c 	.word	0x0800de0c
 8002bb8:	0800de20 	.word	0x0800de20
 8002bbc:	0800de30 	.word	0x0800de30
 8002bc0:	0800de44 	.word	0x0800de44
 8002bc4:	20000c52 	.word	0x20000c52
 8002bc8:	20000bbc 	.word	0x20000bbc
 8002bcc:	0800de54 	.word	0x0800de54
 8002bd0:	0800de68 	.word	0x0800de68
 8002bd4:	20000c43 	.word	0x20000c43
 8002bd8:	0800ddc4 	.word	0x0800ddc4
 8002bdc:	0800ddd8 	.word	0x0800ddd8
 8002be0:	0800dde8 	.word	0x0800dde8
			}
		} else if(kapi2Tip == 2) {
 8002be4:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <menu+0x182c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d104      	bne.n	8002bf6 <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002bec:	4a89      	ldr	r2, [pc, #548]	; (8002e14 <menu+0x1830>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7fd fde1 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4887      	ldr	r0, [pc, #540]	; (8002e18 <menu+0x1834>)
 8002bfa:	f007 f845 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d115      	bne.n	8002c30 <menu+0x164c>
 8002c04:	4b85      	ldr	r3, [pc, #532]	; (8002e1c <menu+0x1838>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <menu+0x182c>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b7d      	ldr	r3, [pc, #500]	; (8002e10 <menu+0x182c>)
 8002c1c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <menu+0x182c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <menu+0x1648>
				kapi2Tip = 0;
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <menu+0x182c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c2c:	f003 fa50 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c30:	2104      	movs	r1, #4
 8002c32:	4879      	ldr	r0, [pc, #484]	; (8002e18 <menu+0x1834>)
 8002c34:	f007 f828 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d115      	bne.n	8002c6a <menu+0x1686>
 8002c3e:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <menu+0x1838>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	f083 0301 	eor.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002c4c:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <menu+0x182c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <menu+0x182c>)
 8002c56:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c58:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <menu+0x182c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d902      	bls.n	8002c66 <menu+0x1682>
		   		kapi2Tip = 2;
 8002c60:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <menu+0x182c>)
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c66:	f003 fa33 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6a:	2108      	movs	r1, #8
 8002c6c:	486a      	ldr	r0, [pc, #424]	; (8002e18 <menu+0x1834>)
 8002c6e:	f007 f80b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10d      	bne.n	8002c94 <menu+0x16b0>
 8002c78:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <menu+0x1838>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f083 0301 	eor.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002c86:	4b62      	ldr	r3, [pc, #392]	; (8002e10 <menu+0x182c>)
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <menu+0x183c>)
 8002c8c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c8e:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <menu+0x1840>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c94:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <menu+0x1844>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d17f      	bne.n	8002d9c <menu+0x17b8>
		if(dilSecim == 0) {
 8002c9c:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <menu+0x1848>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002ca4:	4a62      	ldr	r2, [pc, #392]	; (8002e30 <menu+0x184c>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7fd fd85 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cae:	4a61      	ldr	r2, [pc, #388]	; (8002e34 <menu+0x1850>)
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f7fd fd80 	bl	80007b8 <lcd_print>
 8002cb8:	e00d      	b.n	8002cd6 <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <menu+0x1848>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d109      	bne.n	8002cd6 <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002cc2:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <menu+0x1854>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7fd fd76 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ccc:	4a5b      	ldr	r2, [pc, #364]	; (8002e3c <menu+0x1858>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f7fd fd71 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002cd6:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <menu+0x185c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	220a      	movs	r2, #10
 8002cdc:	4959      	ldr	r1, [pc, #356]	; (8002e44 <menu+0x1860>)
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f009 fffe 	bl	800cce0 <itoa>
		lcd_print(2,16,snum);
 8002ce4:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <menu+0x1860>)
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f7fd fd65 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4849      	ldr	r0, [pc, #292]	; (8002e18 <menu+0x1834>)
 8002cf2:	f006 ffc9 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d119      	bne.n	8002d30 <menu+0x174c>
 8002cfc:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <menu+0x1838>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	f083 0301 	eor.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <menu+0x174c>
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <menu+0x182c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10e      	bne.n	8002d30 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002d12:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <menu+0x185c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <menu+0x185c>)
 8002d1c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <menu+0x185c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d902      	bls.n	8002d2c <menu+0x1748>
				kapi2AcSure = 0;
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <menu+0x185c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d2c:	f003 f9d0 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d30:	2104      	movs	r1, #4
 8002d32:	4839      	ldr	r0, [pc, #228]	; (8002e18 <menu+0x1834>)
 8002d34:	f006 ffa8 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d119      	bne.n	8002d72 <menu+0x178e>
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <menu+0x1838>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <menu+0x178e>
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <menu+0x182c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10e      	bne.n	8002d72 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002d54:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <menu+0x185c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <menu+0x185c>)
 8002d5e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <menu+0x185c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d902      	bls.n	8002d6e <menu+0x178a>
		   		kapi2AcSure = 5;
 8002d68:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <menu+0x185c>)
 8002d6a:	2205      	movs	r2, #5
 8002d6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d6e:	f003 f9af 	bl	80060d0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d72:	2108      	movs	r1, #8
 8002d74:	4828      	ldr	r0, [pc, #160]	; (8002e18 <menu+0x1834>)
 8002d76:	f006 ff87 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10d      	bne.n	8002d9c <menu+0x17b8>
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <menu+0x1838>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <menu+0x185c>)
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <menu+0x183c>)
 8002d94:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <menu+0x1840>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <menu+0x1844>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b0d      	cmp	r3, #13
 8002da2:	f040 80b5 	bne.w	8002f10 <menu+0x192c>
		if(dilSecim == 0) {
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <menu+0x1848>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <menu+0x1864>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7fd fd00 	bl	80007b8 <lcd_print>
 8002db8:	e008      	b.n	8002dcc <menu+0x17e8>
		} else if(dilSecim == 1){
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <menu+0x1848>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d104      	bne.n	8002dcc <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <menu+0x1868>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7fd fcf6 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <menu+0x186c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <menu+0x1870>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f7fd fced 	bl	80007b8 <lcd_print>
 8002dde:	e048      	b.n	8002e72 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002de0:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <menu+0x186c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d13b      	bne.n	8002e60 <menu+0x187c>
			if(dilSecim == 0) {
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <menu+0x1848>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <menu+0x1874>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	2002      	movs	r0, #2
 8002df6:	f7fd fcdf 	bl	80007b8 <lcd_print>
 8002dfa:	e03a      	b.n	8002e72 <menu+0x188e>
			} else if(dilSecim == 1) {
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <menu+0x1848>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d136      	bne.n	8002e72 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <menu+0x1878>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f7fd fcd5 	bl	80007b8 <lcd_print>
 8002e0e:	e030      	b.n	8002e72 <menu+0x188e>
 8002e10:	20000c43 	.word	0x20000c43
 8002e14:	0800ddfc 	.word	0x0800ddfc
 8002e18:	40010800 	.word	0x40010800
 8002e1c:	20000c68 	.word	0x20000c68
 8002e20:	20000b28 	.word	0x20000b28
 8002e24:	20000c65 	.word	0x20000c65
 8002e28:	20000c39 	.word	0x20000c39
 8002e2c:	20000c5a 	.word	0x20000c5a
 8002e30:	0800de7c 	.word	0x0800de7c
 8002e34:	0800de20 	.word	0x0800de20
 8002e38:	0800de90 	.word	0x0800de90
 8002e3c:	0800de44 	.word	0x0800de44
 8002e40:	20000c53 	.word	0x20000c53
 8002e44:	20000bbc 	.word	0x20000bbc
 8002e48:	0800dea4 	.word	0x0800dea4
 8002e4c:	0800deb8 	.word	0x0800deb8
 8002e50:	20000c44 	.word	0x20000c44
 8002e54:	0800ddc4 	.word	0x0800ddc4
 8002e58:	0800ddd8 	.word	0x0800ddd8
 8002e5c:	0800dde8 	.word	0x0800dde8
			}
		} else if(kapitablaTip == 2) {
 8002e60:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <menu+0x19ec>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d104      	bne.n	8002e72 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002e68:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <menu+0x19f0>)
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2002      	movs	r0, #2
 8002e6e:	f7fd fca3 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e72:	2102      	movs	r1, #2
 8002e74:	4858      	ldr	r0, [pc, #352]	; (8002fd8 <menu+0x19f4>)
 8002e76:	f006 ff07 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d115      	bne.n	8002eac <menu+0x18c8>
 8002e80:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <menu+0x19f8>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f083 0301 	eor.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002e8e:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <menu+0x19ec>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <menu+0x19ec>)
 8002e98:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <menu+0x19ec>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <menu+0x18c4>
				kapitablaTip = 0;
 8002ea2:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <menu+0x19ec>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ea8:	f003 f912 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eac:	2104      	movs	r1, #4
 8002eae:	484a      	ldr	r0, [pc, #296]	; (8002fd8 <menu+0x19f4>)
 8002eb0:	f006 feea 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d115      	bne.n	8002ee6 <menu+0x1902>
 8002eba:	4b48      	ldr	r3, [pc, #288]	; (8002fdc <menu+0x19f8>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	f083 0301 	eor.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <menu+0x19ec>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <menu+0x19ec>)
 8002ed2:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <menu+0x19ec>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d902      	bls.n	8002ee2 <menu+0x18fe>
		   		kapitablaTip = 2;
 8002edc:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <menu+0x19ec>)
 8002ede:	2202      	movs	r2, #2
 8002ee0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ee2:	f003 f8f5 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	483b      	ldr	r0, [pc, #236]	; (8002fd8 <menu+0x19f4>)
 8002eea:	f006 fecd 	bl	8009c88 <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10d      	bne.n	8002f10 <menu+0x192c>
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <menu+0x19f8>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002f02:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <menu+0x19ec>)
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <menu+0x19fc>)
 8002f08:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <menu+0x1a00>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <menu+0x1a04>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b0e      	cmp	r3, #14
 8002f16:	f040 80f2 	bne.w	80030fe <menu+0x1b1a>
		if(dilSecim == 0) {
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <menu+0x1a08>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002f22:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <menu+0x1a0c>)
 8002f24:	2101      	movs	r1, #1
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7fd fc46 	bl	80007b8 <lcd_print>
 8002f2c:	e008      	b.n	8002f40 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <menu+0x1a08>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d104      	bne.n	8002f40 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002f36:	4a2f      	ldr	r2, [pc, #188]	; (8002ff4 <menu+0x1a10>)
 8002f38:	2101      	movs	r1, #1
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f7fd fc3c 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <menu+0x1a14>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d113      	bne.n	8002f70 <menu+0x198c>
			if(dilSecim == 0){
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <menu+0x1a08>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f50:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <menu+0x1a18>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7fd fc2f 	bl	80007b8 <lcd_print>
 8002f5a:	e071      	b.n	8003040 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <menu+0x1a08>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d16d      	bne.n	8003040 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002f64:	4a26      	ldr	r2, [pc, #152]	; (8003000 <menu+0x1a1c>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f7fd fc25 	bl	80007b8 <lcd_print>
 8002f6e:	e067      	b.n	8003040 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <menu+0x1a14>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d112      	bne.n	8002f9e <menu+0x19ba>
			if(dilSecim == 0){
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <menu+0x1a08>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <menu+0x1a20>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2002      	movs	r0, #2
 8002f86:	f7fd fc17 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <menu+0x1a08>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d156      	bne.n	8003040 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8002f92:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <menu+0x1a24>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	2002      	movs	r0, #2
 8002f98:	f7fd fc0e 	bl	80007b8 <lcd_print>
 8002f9c:	e050      	b.n	8003040 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <menu+0x1a14>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d136      	bne.n	8003014 <menu+0x1a30>
			if(dilSecim == 0){
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <menu+0x1a08>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <menu+0x1a28>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f7fd fc00 	bl	80007b8 <lcd_print>
 8002fb8:	e042      	b.n	8003040 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <menu+0x1a08>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d13e      	bne.n	8003040 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <menu+0x1a2c>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7fd fbf6 	bl	80007b8 <lcd_print>
 8002fcc:	e038      	b.n	8003040 <menu+0x1a5c>
 8002fce:	bf00      	nop
 8002fd0:	20000c44 	.word	0x20000c44
 8002fd4:	0800ddfc 	.word	0x0800ddfc
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	20000c68 	.word	0x20000c68
 8002fe0:	20000b28 	.word	0x20000b28
 8002fe4:	20000c65 	.word	0x20000c65
 8002fe8:	20000c39 	.word	0x20000c39
 8002fec:	20000c5a 	.word	0x20000c5a
 8002ff0:	0800decc 	.word	0x0800decc
 8002ff4:	0800dee0 	.word	0x0800dee0
 8002ff8:	20000c46 	.word	0x20000c46
 8002ffc:	0800def4 	.word	0x0800def4
 8003000:	0800df04 	.word	0x0800df04
 8003004:	0800df14 	.word	0x0800df14
 8003008:	0800df24 	.word	0x0800df24
 800300c:	0800df34 	.word	0x0800df34
 8003010:	0800df48 	.word	0x0800df48
			}
		} else if(kapiTablaAcKonum == 3) {
 8003014:	4b9b      	ldr	r3, [pc, #620]	; (8003284 <menu+0x1ca0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d111      	bne.n	8003040 <menu+0x1a5c>
			if(dilSecim == 0) {
 800301c:	4b9a      	ldr	r3, [pc, #616]	; (8003288 <menu+0x1ca4>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8003024:	4a99      	ldr	r2, [pc, #612]	; (800328c <menu+0x1ca8>)
 8003026:	2101      	movs	r1, #1
 8003028:	2002      	movs	r0, #2
 800302a:	f7fd fbc5 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800302e:	4b96      	ldr	r3, [pc, #600]	; (8003288 <menu+0x1ca4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d104      	bne.n	8003040 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8003036:	4a96      	ldr	r2, [pc, #600]	; (8003290 <menu+0x1cac>)
 8003038:	2101      	movs	r1, #1
 800303a:	2002      	movs	r0, #2
 800303c:	f7fd fbbc 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003040:	2102      	movs	r1, #2
 8003042:	4894      	ldr	r0, [pc, #592]	; (8003294 <menu+0x1cb0>)
 8003044:	f006 fe20 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d115      	bne.n	800307a <menu+0x1a96>
 800304e:	4b92      	ldr	r3, [pc, #584]	; (8003298 <menu+0x1cb4>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	f083 0301 	eor.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800305c:	4b89      	ldr	r3, [pc, #548]	; (8003284 <menu+0x1ca0>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b2da      	uxtb	r2, r3
 8003064:	4b87      	ldr	r3, [pc, #540]	; (8003284 <menu+0x1ca0>)
 8003066:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003068:	4b86      	ldr	r3, [pc, #536]	; (8003284 <menu+0x1ca0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d902      	bls.n	8003076 <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8003070:	4b84      	ldr	r3, [pc, #528]	; (8003284 <menu+0x1ca0>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003076:	f003 f82b 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800307a:	2104      	movs	r1, #4
 800307c:	4885      	ldr	r0, [pc, #532]	; (8003294 <menu+0x1cb0>)
 800307e:	f006 fe03 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003082:	4603      	mov	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d115      	bne.n	80030b4 <menu+0x1ad0>
 8003088:	4b83      	ldr	r3, [pc, #524]	; (8003298 <menu+0x1cb4>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	f083 0301 	eor.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003096:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <menu+0x1ca0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	3b01      	subs	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b79      	ldr	r3, [pc, #484]	; (8003284 <menu+0x1ca0>)
 80030a0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80030a2:	4b78      	ldr	r3, [pc, #480]	; (8003284 <menu+0x1ca0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d902      	bls.n	80030b0 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 80030aa:	4b76      	ldr	r3, [pc, #472]	; (8003284 <menu+0x1ca0>)
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030b0:	f003 f80e 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b4:	2108      	movs	r1, #8
 80030b6:	4877      	ldr	r0, [pc, #476]	; (8003294 <menu+0x1cb0>)
 80030b8:	f006 fde6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d11d      	bne.n	80030fe <menu+0x1b1a>
 80030c2:	4b75      	ldr	r3, [pc, #468]	; (8003298 <menu+0x1cb4>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 80030d0:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <menu+0x1ca0>)
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <menu+0x1cb8>)
 80030d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <menu+0x1ca0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <menu+0x1b06>
 80030e2:	4b68      	ldr	r3, [pc, #416]	; (8003284 <menu+0x1ca0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d106      	bne.n	80030f8 <menu+0x1b14>
				altLimit = 1;
 80030ea:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <menu+0x1cbc>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <menu+0x1cbc>)
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	4b69      	ldr	r3, [pc, #420]	; (800329c <menu+0x1cb8>)
 80030f6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <menu+0x1cc0>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030fe:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <menu+0x1cc4>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	d17f      	bne.n	8003206 <menu+0x1c22>
		if(dilSecim == 0) {
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <menu+0x1ca4>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800310e:	4a67      	ldr	r2, [pc, #412]	; (80032ac <menu+0x1cc8>)
 8003110:	2101      	movs	r1, #1
 8003112:	2001      	movs	r0, #1
 8003114:	f7fd fb50 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003118:	4a65      	ldr	r2, [pc, #404]	; (80032b0 <menu+0x1ccc>)
 800311a:	2101      	movs	r1, #1
 800311c:	2002      	movs	r0, #2
 800311e:	f7fd fb4b 	bl	80007b8 <lcd_print>
 8003122:	e00d      	b.n	8003140 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <menu+0x1ca4>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d109      	bne.n	8003140 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800312c:	4a61      	ldr	r2, [pc, #388]	; (80032b4 <menu+0x1cd0>)
 800312e:	2101      	movs	r1, #1
 8003130:	2001      	movs	r0, #1
 8003132:	f7fd fb41 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003136:	4a60      	ldr	r2, [pc, #384]	; (80032b8 <menu+0x1cd4>)
 8003138:	2101      	movs	r1, #1
 800313a:	2002      	movs	r0, #2
 800313c:	f7fd fb3c 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <menu+0x1cd8>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	220a      	movs	r2, #10
 8003146:	495e      	ldr	r1, [pc, #376]	; (80032c0 <menu+0x1cdc>)
 8003148:	4618      	mov	r0, r3
 800314a:	f009 fdc9 	bl	800cce0 <itoa>
		lcd_print(2,16,snum);
 800314e:	4a5c      	ldr	r2, [pc, #368]	; (80032c0 <menu+0x1cdc>)
 8003150:	2110      	movs	r1, #16
 8003152:	2002      	movs	r0, #2
 8003154:	f7fd fb30 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003158:	2102      	movs	r1, #2
 800315a:	484e      	ldr	r0, [pc, #312]	; (8003294 <menu+0x1cb0>)
 800315c:	f006 fd94 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d119      	bne.n	800319a <menu+0x1bb6>
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <menu+0x1cb4>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	f083 0301 	eor.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d012      	beq.n	800319a <menu+0x1bb6>
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <menu+0x1ce0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10e      	bne.n	800319a <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <menu+0x1cd8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <menu+0x1cd8>)
 8003186:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003188:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <menu+0x1cd8>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b05      	cmp	r3, #5
 800318e:	d902      	bls.n	8003196 <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003190:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <menu+0x1cd8>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003196:	f002 ff9b 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800319a:	2104      	movs	r1, #4
 800319c:	483d      	ldr	r0, [pc, #244]	; (8003294 <menu+0x1cb0>)
 800319e:	f006 fd73 	bl	8009c88 <HAL_GPIO_ReadPin>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d119      	bne.n	80031dc <menu+0x1bf8>
 80031a8:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <menu+0x1cb4>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	f083 0301 	eor.w	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <menu+0x1bf8>
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <menu+0x1ce0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <menu+0x1cd8>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <menu+0x1cd8>)
 80031c8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80031ca:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <menu+0x1cd8>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 80031d2:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <menu+0x1cd8>)
 80031d4:	2205      	movs	r2, #5
 80031d6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80031d8:	f002 ff7a 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031dc:	2108      	movs	r1, #8
 80031de:	482d      	ldr	r0, [pc, #180]	; (8003294 <menu+0x1cb0>)
 80031e0:	f006 fd52 	bl	8009c88 <HAL_GPIO_ReadPin>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <menu+0x1c22>
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <menu+0x1cb4>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f083 0301 	eor.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <menu+0x1cd8>)
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <menu+0x1cb8>)
 80031fe:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <menu+0x1cc0>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <menu+0x1cc4>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b10      	cmp	r3, #16
 800320c:	f040 80bc 	bne.w	8003388 <menu+0x1da4>
		if(dilSecim == 0) {
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <menu+0x1ca4>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <menu+0x1ce4>)
 800321a:	2101      	movs	r1, #1
 800321c:	2001      	movs	r0, #1
 800321e:	f7fd facb 	bl	80007b8 <lcd_print>
 8003222:	e008      	b.n	8003236 <menu+0x1c52>
		} else if(dilSecim == 1) {
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <menu+0x1ca4>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d104      	bne.n	8003236 <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800322c:	4a27      	ldr	r2, [pc, #156]	; (80032cc <menu+0x1ce8>)
 800322e:	2101      	movs	r1, #1
 8003230:	2001      	movs	r0, #1
 8003232:	f7fd fac1 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <menu+0x1cec>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <menu+0x1c82>
			if(dilSecim == 0) {
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <menu+0x1ca4>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <menu+0x1ca8>)
 8003248:	2101      	movs	r1, #1
 800324a:	2002      	movs	r0, #2
 800324c:	f7fd fab4 	bl	80007b8 <lcd_print>
 8003250:	e04b      	b.n	80032ea <menu+0x1d06>
			} else if(dilSecim == 1) {
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <menu+0x1ca4>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d147      	bne.n	80032ea <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <menu+0x1cac>)
 800325c:	2101      	movs	r1, #1
 800325e:	2002      	movs	r0, #2
 8003260:	f7fd faaa 	bl	80007b8 <lcd_print>
 8003264:	e041      	b.n	80032ea <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <menu+0x1cec>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d13d      	bne.n	80032ea <menu+0x1d06>
			if(dilSecim == 0) {
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <menu+0x1ca4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d130      	bne.n	80032d8 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <menu+0x1cf0>)
 8003278:	2101      	movs	r1, #1
 800327a:	2002      	movs	r0, #2
 800327c:	f7fd fa9c 	bl	80007b8 <lcd_print>
 8003280:	e033      	b.n	80032ea <menu+0x1d06>
 8003282:	bf00      	nop
 8003284:	20000c46 	.word	0x20000c46
 8003288:	20000c5a 	.word	0x20000c5a
 800328c:	0800dbbc 	.word	0x0800dbbc
 8003290:	0800dbd0 	.word	0x0800dbd0
 8003294:	40010800 	.word	0x40010800
 8003298:	20000c68 	.word	0x20000c68
 800329c:	20000b28 	.word	0x20000b28
 80032a0:	20000c3f 	.word	0x20000c3f
 80032a4:	20000c65 	.word	0x20000c65
 80032a8:	20000c39 	.word	0x20000c39
 80032ac:	0800df5c 	.word	0x0800df5c
 80032b0:	0800de20 	.word	0x0800de20
 80032b4:	0800df70 	.word	0x0800df70
 80032b8:	0800de44 	.word	0x0800de44
 80032bc:	20000c54 	.word	0x20000c54
 80032c0:	20000bbc 	.word	0x20000bbc
 80032c4:	20000c44 	.word	0x20000c44
 80032c8:	0800df84 	.word	0x0800df84
 80032cc:	0800df98 	.word	0x0800df98
 80032d0:	20000c47 	.word	0x20000c47
 80032d4:	0800dc1c 	.word	0x0800dc1c
			} else if(dilSecim == 1) {
 80032d8:	4b99      	ldr	r3, [pc, #612]	; (8003540 <menu+0x1f5c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d104      	bne.n	80032ea <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 80032e0:	4a98      	ldr	r2, [pc, #608]	; (8003544 <menu+0x1f60>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7fd fa67 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ea:	2102      	movs	r1, #2
 80032ec:	4896      	ldr	r0, [pc, #600]	; (8003548 <menu+0x1f64>)
 80032ee:	f006 fccb 	bl	8009c88 <HAL_GPIO_ReadPin>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d115      	bne.n	8003324 <menu+0x1d40>
 80032f8:	4b94      	ldr	r3, [pc, #592]	; (800354c <menu+0x1f68>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003306:	4b92      	ldr	r3, [pc, #584]	; (8003550 <menu+0x1f6c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b90      	ldr	r3, [pc, #576]	; (8003550 <menu+0x1f6c>)
 8003310:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003312:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <menu+0x1f6c>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d902      	bls.n	8003320 <menu+0x1d3c>
				yukariYavasLimit = 0;
 800331a:	4b8d      	ldr	r3, [pc, #564]	; (8003550 <menu+0x1f6c>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003320:	f002 fed6 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003324:	2104      	movs	r1, #4
 8003326:	4888      	ldr	r0, [pc, #544]	; (8003548 <menu+0x1f64>)
 8003328:	f006 fcae 	bl	8009c88 <HAL_GPIO_ReadPin>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d115      	bne.n	800335e <menu+0x1d7a>
 8003332:	4b86      	ldr	r3, [pc, #536]	; (800354c <menu+0x1f68>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003340:	4b83      	ldr	r3, [pc, #524]	; (8003550 <menu+0x1f6c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	3b01      	subs	r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b81      	ldr	r3, [pc, #516]	; (8003550 <menu+0x1f6c>)
 800334a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <menu+0x1f6c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <menu+0x1d76>
		   		yukariYavasLimit = 1;
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <menu+0x1f6c>)
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800335a:	f002 feb9 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800335e:	2108      	movs	r1, #8
 8003360:	4879      	ldr	r0, [pc, #484]	; (8003548 <menu+0x1f64>)
 8003362:	f006 fc91 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003366:	4603      	mov	r3, r0
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10d      	bne.n	8003388 <menu+0x1da4>
 800336c:	4b77      	ldr	r3, [pc, #476]	; (800354c <menu+0x1f68>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	f083 0301 	eor.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 800337a:	4b75      	ldr	r3, [pc, #468]	; (8003550 <menu+0x1f6c>)
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	4b75      	ldr	r3, [pc, #468]	; (8003554 <menu+0x1f70>)
 8003380:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003382:	4b75      	ldr	r3, [pc, #468]	; (8003558 <menu+0x1f74>)
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003388:	4b74      	ldr	r3, [pc, #464]	; (800355c <menu+0x1f78>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b11      	cmp	r3, #17
 800338e:	f040 80c3 	bne.w	8003518 <menu+0x1f34>
		if(dilSecim == 0) {
 8003392:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <menu+0x1f5c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800339a:	4a71      	ldr	r2, [pc, #452]	; (8003560 <menu+0x1f7c>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f7fd fa0a 	bl	80007b8 <lcd_print>
 80033a4:	e008      	b.n	80033b8 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 80033a6:	4b66      	ldr	r3, [pc, #408]	; (8003540 <menu+0x1f5c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d104      	bne.n	80033b8 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80033ae:	4a6d      	ldr	r2, [pc, #436]	; (8003564 <menu+0x1f80>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7fd fa00 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80033b8:	4b6b      	ldr	r3, [pc, #428]	; (8003568 <menu+0x1f84>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d113      	bne.n	80033e8 <menu+0x1e04>
			if(dilSecim == 0){
 80033c0:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <menu+0x1f5c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 80033c8:	4a68      	ldr	r2, [pc, #416]	; (800356c <menu+0x1f88>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f7fd f9f3 	bl	80007b8 <lcd_print>
 80033d2:	e038      	b.n	8003446 <menu+0x1e62>
			} else if(dilSecim == 1){
 80033d4:	4b5a      	ldr	r3, [pc, #360]	; (8003540 <menu+0x1f5c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d134      	bne.n	8003446 <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 80033dc:	4a64      	ldr	r2, [pc, #400]	; (8003570 <menu+0x1f8c>)
 80033de:	2101      	movs	r1, #1
 80033e0:	2002      	movs	r0, #2
 80033e2:	f7fd f9e9 	bl	80007b8 <lcd_print>
 80033e6:	e02e      	b.n	8003446 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033e8:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <menu+0x1f84>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d113      	bne.n	8003418 <menu+0x1e34>
			if(dilSecim == 0){
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <menu+0x1f5c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033f8:	4a5e      	ldr	r2, [pc, #376]	; (8003574 <menu+0x1f90>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2002      	movs	r0, #2
 80033fe:	f7fd f9db 	bl	80007b8 <lcd_print>
 8003402:	e020      	b.n	8003446 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003404:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <menu+0x1f5c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d11c      	bne.n	8003446 <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 800340c:	4a5a      	ldr	r2, [pc, #360]	; (8003578 <menu+0x1f94>)
 800340e:	2101      	movs	r1, #1
 8003410:	2002      	movs	r0, #2
 8003412:	f7fd f9d1 	bl	80007b8 <lcd_print>
 8003416:	e016      	b.n	8003446 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <menu+0x1f84>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d112      	bne.n	8003446 <menu+0x1e62>
			if(dilSecim == 0) {
 8003420:	4b47      	ldr	r3, [pc, #284]	; (8003540 <menu+0x1f5c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 8003428:	4a54      	ldr	r2, [pc, #336]	; (800357c <menu+0x1f98>)
 800342a:	2101      	movs	r1, #1
 800342c:	2002      	movs	r0, #2
 800342e:	f7fd f9c3 	bl	80007b8 <lcd_print>
 8003432:	e008      	b.n	8003446 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003434:	4b42      	ldr	r3, [pc, #264]	; (8003540 <menu+0x1f5c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d104      	bne.n	8003446 <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 800343c:	4a50      	ldr	r2, [pc, #320]	; (8003580 <menu+0x1f9c>)
 800343e:	2101      	movs	r1, #1
 8003440:	2002      	movs	r0, #2
 8003442:	f7fd f9b9 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003446:	2102      	movs	r1, #2
 8003448:	483f      	ldr	r0, [pc, #252]	; (8003548 <menu+0x1f64>)
 800344a:	f006 fc1d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d115      	bne.n	8003480 <menu+0x1e9c>
 8003454:	4b3d      	ldr	r3, [pc, #244]	; (800354c <menu+0x1f68>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	f083 0301 	eor.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <menu+0x1f84>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <menu+0x1f84>)
 800346c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <menu+0x1f84>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d902      	bls.n	800347c <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 8003476:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <menu+0x1f84>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800347c:	f002 fe28 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003480:	2104      	movs	r1, #4
 8003482:	4831      	ldr	r0, [pc, #196]	; (8003548 <menu+0x1f64>)
 8003484:	f006 fc00 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d115      	bne.n	80034ba <menu+0x1ed6>
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <menu+0x1f68>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	f083 0301 	eor.w	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800349c:	4b32      	ldr	r3, [pc, #200]	; (8003568 <menu+0x1f84>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <menu+0x1f84>)
 80034a6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80034a8:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <menu+0x1f84>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d902      	bls.n	80034b6 <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <menu+0x1f84>)
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034b6:	f002 fe0b 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ba:	2108      	movs	r1, #8
 80034bc:	4822      	ldr	r0, [pc, #136]	; (8003548 <menu+0x1f64>)
 80034be:	f006 fbe3 	bl	8009c88 <HAL_GPIO_ReadPin>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d127      	bne.n	8003518 <menu+0x1f34>
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <menu+0x1f68>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <menu+0x1f84>)
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <menu+0x1f70>)
 80034dc:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <menu+0x1f84>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d003      	beq.n	80034ee <menu+0x1f0a>
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <menu+0x1f84>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d106      	bne.n	80034fc <menu+0x1f18>
				calismaSekli = 0;
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <menu+0x1fa0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <menu+0x1fa0>)
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <menu+0x1f70>)
 80034fa:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <menu+0x1f84>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d106      	bne.n	8003512 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <menu+0x1fa4>)
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800350a:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <menu+0x1fa4>)
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <menu+0x1f70>)
 8003510:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <menu+0x1f74>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <menu+0x1f78>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b12      	cmp	r3, #18
 800351e:	f040 80d5 	bne.w	80036cc <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <menu+0x1f84>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d13c      	bne.n	80035a4 <menu+0x1fc0>
			if(dilSecim == 0) {
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <menu+0x1f5c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12e      	bne.n	8003590 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <menu+0x1fa8>)
 8003534:	2101      	movs	r1, #1
 8003536:	2001      	movs	r0, #1
 8003538:	f7fd f93e 	bl	80007b8 <lcd_print>
 800353c:	e048      	b.n	80035d0 <menu+0x1fec>
 800353e:	bf00      	nop
 8003540:	20000c5a 	.word	0x20000c5a
 8003544:	0800dc30 	.word	0x0800dc30
 8003548:	40010800 	.word	0x40010800
 800354c:	20000c68 	.word	0x20000c68
 8003550:	20000c47 	.word	0x20000c47
 8003554:	20000b28 	.word	0x20000b28
 8003558:	20000c65 	.word	0x20000c65
 800355c:	20000c39 	.word	0x20000c39
 8003560:	0800dfac 	.word	0x0800dfac
 8003564:	0800dfc0 	.word	0x0800dfc0
 8003568:	20000c48 	.word	0x20000c48
 800356c:	0800dfd4 	.word	0x0800dfd4
 8003570:	0800dfe4 	.word	0x0800dfe4
 8003574:	0800dff4 	.word	0x0800dff4
 8003578:	0800e004 	.word	0x0800e004
 800357c:	0800dbbc 	.word	0x0800dbbc
 8003580:	0800dbd0 	.word	0x0800dbd0
 8003584:	20000c3a 	.word	0x20000c3a
 8003588:	20000c4b 	.word	0x20000c4b
 800358c:	0800e014 	.word	0x0800e014
			} else if(dilSecim == 1) {
 8003590:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <menu+0x219c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d11b      	bne.n	80035d0 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003598:	4a7a      	ldr	r2, [pc, #488]	; (8003784 <menu+0x21a0>)
 800359a:	2101      	movs	r1, #1
 800359c:	2001      	movs	r0, #1
 800359e:	f7fd f90b 	bl	80007b8 <lcd_print>
 80035a2:	e015      	b.n	80035d0 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035a4:	4b78      	ldr	r3, [pc, #480]	; (8003788 <menu+0x21a4>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d111      	bne.n	80035d0 <menu+0x1fec>
			if(dilSecim == 0){
 80035ac:	4b74      	ldr	r3, [pc, #464]	; (8003780 <menu+0x219c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80035b4:	4a75      	ldr	r2, [pc, #468]	; (800378c <menu+0x21a8>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	2001      	movs	r0, #1
 80035ba:	f7fd f8fd 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80035be:	4b70      	ldr	r3, [pc, #448]	; (8003780 <menu+0x219c>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d104      	bne.n	80035d0 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80035c6:	4a72      	ldr	r2, [pc, #456]	; (8003790 <menu+0x21ac>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fd f8f4 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80035d0:	4b70      	ldr	r3, [pc, #448]	; (8003794 <menu+0x21b0>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <menu+0x201c>
			if(dilSecim == 0) {
 80035d8:	4b69      	ldr	r3, [pc, #420]	; (8003780 <menu+0x219c>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 80035e0:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <menu+0x21b4>)
 80035e2:	2101      	movs	r1, #1
 80035e4:	2002      	movs	r0, #2
 80035e6:	f7fd f8e7 	bl	80007b8 <lcd_print>
 80035ea:	e020      	b.n	800362e <menu+0x204a>
			} else if(dilSecim == 1){
 80035ec:	4b64      	ldr	r3, [pc, #400]	; (8003780 <menu+0x219c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d11c      	bne.n	800362e <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 80035f4:	4a69      	ldr	r2, [pc, #420]	; (800379c <menu+0x21b8>)
 80035f6:	2101      	movs	r1, #1
 80035f8:	2002      	movs	r0, #2
 80035fa:	f7fd f8dd 	bl	80007b8 <lcd_print>
 80035fe:	e016      	b.n	800362e <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <menu+0x21b0>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d112      	bne.n	800362e <menu+0x204a>
			if(dilSecim == 0){
 8003608:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <menu+0x219c>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003610:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <menu+0x21bc>)
 8003612:	2101      	movs	r1, #1
 8003614:	2002      	movs	r0, #2
 8003616:	f7fd f8cf 	bl	80007b8 <lcd_print>
 800361a:	e008      	b.n	800362e <menu+0x204a>
			} else if(dilSecim == 1){
 800361c:	4b58      	ldr	r3, [pc, #352]	; (8003780 <menu+0x219c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d104      	bne.n	800362e <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 8003624:	4a5f      	ldr	r2, [pc, #380]	; (80037a4 <menu+0x21c0>)
 8003626:	2101      	movs	r1, #1
 8003628:	2002      	movs	r0, #2
 800362a:	f7fd f8c5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800362e:	2102      	movs	r1, #2
 8003630:	485d      	ldr	r0, [pc, #372]	; (80037a8 <menu+0x21c4>)
 8003632:	f006 fb29 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d115      	bne.n	8003668 <menu+0x2084>
 800363c:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <menu+0x21c8>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <menu+0x21b0>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <menu+0x21b0>)
 8003654:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003656:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <menu+0x21b0>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d902      	bls.n	8003664 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <menu+0x21b0>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003664:	f002 fd34 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003668:	2104      	movs	r1, #4
 800366a:	484f      	ldr	r0, [pc, #316]	; (80037a8 <menu+0x21c4>)
 800366c:	f006 fb0c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d115      	bne.n	80036a2 <menu+0x20be>
 8003676:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <menu+0x21c8>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	f083 0301 	eor.w	r3, r3, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <menu+0x21b0>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	b2da      	uxtb	r2, r3
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <menu+0x21b0>)
 800368e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <menu+0x21b0>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <menu+0x21b0>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800369e:	f002 fd17 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036a2:	2108      	movs	r1, #8
 80036a4:	4840      	ldr	r0, [pc, #256]	; (80037a8 <menu+0x21c4>)
 80036a6:	f006 faef 	bl	8009c88 <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10d      	bne.n	80036cc <menu+0x20e8>
 80036b0:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <menu+0x21c8>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f083 0301 	eor.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 80036be:	4b35      	ldr	r3, [pc, #212]	; (8003794 <menu+0x21b0>)
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <menu+0x21cc>)
 80036c4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <menu+0x21d0>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80036cc:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <menu+0x21d4>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b13      	cmp	r3, #19
 80036d2:	f040 80d5 	bne.w	8003880 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <menu+0x21a4>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d113      	bne.n	8003706 <menu+0x2122>
			if(dilSecim == 0) {
 80036de:	4b28      	ldr	r3, [pc, #160]	; (8003780 <menu+0x219c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036e6:	4a35      	ldr	r2, [pc, #212]	; (80037bc <menu+0x21d8>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2001      	movs	r0, #1
 80036ec:	f7fd f864 	bl	80007b8 <lcd_print>
 80036f0:	e01f      	b.n	8003732 <menu+0x214e>
			} else if(dilSecim == 1) {
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <menu+0x219c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d11b      	bne.n	8003732 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036fa:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <menu+0x21dc>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2001      	movs	r0, #1
 8003700:	f7fd f85a 	bl	80007b8 <lcd_print>
 8003704:	e015      	b.n	8003732 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <menu+0x21a4>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d111      	bne.n	8003732 <menu+0x214e>
			if(dilSecim == 0) {
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <menu+0x219c>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003716:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <menu+0x21e0>)
 8003718:	2101      	movs	r1, #1
 800371a:	2001      	movs	r0, #1
 800371c:	f7fd f84c 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <menu+0x219c>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d104      	bne.n	8003732 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <menu+0x21e4>)
 800372a:	2101      	movs	r1, #1
 800372c:	2001      	movs	r0, #1
 800372e:	f7fd f843 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <menu+0x21e8>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <menu+0x217e>
			if(dilSecim == 0) {
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <menu+0x219c>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d105      	bne.n	800374e <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <menu+0x21b4>)
 8003744:	2101      	movs	r1, #1
 8003746:	2002      	movs	r0, #2
 8003748:	f7fd f836 	bl	80007b8 <lcd_print>
 800374c:	e049      	b.n	80037e2 <menu+0x21fe>
			} else if(dilSecim == 1) {
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <menu+0x219c>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d145      	bne.n	80037e2 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <menu+0x21b8>)
 8003758:	2101      	movs	r1, #1
 800375a:	2002      	movs	r0, #2
 800375c:	f7fd f82c 	bl	80007b8 <lcd_print>
 8003760:	e03f      	b.n	80037e2 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <menu+0x21e8>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d13b      	bne.n	80037e2 <menu+0x21fe>
			if(dilSecim == 0) {
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <menu+0x219c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12e      	bne.n	80037d0 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <menu+0x21bc>)
 8003774:	2101      	movs	r1, #1
 8003776:	2002      	movs	r0, #2
 8003778:	f7fd f81e 	bl	80007b8 <lcd_print>
 800377c:	e031      	b.n	80037e2 <menu+0x21fe>
 800377e:	bf00      	nop
 8003780:	20000c5a 	.word	0x20000c5a
 8003784:	0800e028 	.word	0x0800e028
 8003788:	20000c48 	.word	0x20000c48
 800378c:	0800e038 	.word	0x0800e038
 8003790:	0800e04c 	.word	0x0800e04c
 8003794:	20000c49 	.word	0x20000c49
 8003798:	0800dbbc 	.word	0x0800dbbc
 800379c:	0800dbd0 	.word	0x0800dbd0
 80037a0:	0800dc1c 	.word	0x0800dc1c
 80037a4:	0800dc30 	.word	0x0800dc30
 80037a8:	40010800 	.word	0x40010800
 80037ac:	20000c68 	.word	0x20000c68
 80037b0:	20000b28 	.word	0x20000b28
 80037b4:	20000c65 	.word	0x20000c65
 80037b8:	20000c39 	.word	0x20000c39
 80037bc:	0800e060 	.word	0x0800e060
 80037c0:	0800e074 	.word	0x0800e074
 80037c4:	0800e088 	.word	0x0800e088
 80037c8:	0800e09c 	.word	0x0800e09c
 80037cc:	20000c4a 	.word	0x20000c4a
			} else if(dilSecim == 1) {
 80037d0:	4b90      	ldr	r3, [pc, #576]	; (8003a14 <menu+0x2430>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d104      	bne.n	80037e2 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 80037d8:	4a8f      	ldr	r2, [pc, #572]	; (8003a18 <menu+0x2434>)
 80037da:	2101      	movs	r1, #1
 80037dc:	2002      	movs	r0, #2
 80037de:	f7fc ffeb 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e2:	2102      	movs	r1, #2
 80037e4:	488d      	ldr	r0, [pc, #564]	; (8003a1c <menu+0x2438>)
 80037e6:	f006 fa4f 	bl	8009c88 <HAL_GPIO_ReadPin>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d115      	bne.n	800381c <menu+0x2238>
 80037f0:	4b8b      	ldr	r3, [pc, #556]	; (8003a20 <menu+0x243c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037fe:	4b89      	ldr	r3, [pc, #548]	; (8003a24 <menu+0x2440>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b87      	ldr	r3, [pc, #540]	; (8003a24 <menu+0x2440>)
 8003808:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800380a:	4b86      	ldr	r3, [pc, #536]	; (8003a24 <menu+0x2440>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d902      	bls.n	8003818 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003812:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <menu+0x2440>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003818:	f002 fc5a 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800381c:	2104      	movs	r1, #4
 800381e:	487f      	ldr	r0, [pc, #508]	; (8003a1c <menu+0x2438>)
 8003820:	f006 fa32 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d115      	bne.n	8003856 <menu+0x2272>
 800382a:	4b7d      	ldr	r3, [pc, #500]	; (8003a20 <menu+0x243c>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	f083 0301 	eor.w	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003838:	4b7a      	ldr	r3, [pc, #488]	; (8003a24 <menu+0x2440>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	3b01      	subs	r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <menu+0x2440>)
 8003842:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003844:	4b77      	ldr	r3, [pc, #476]	; (8003a24 <menu+0x2440>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 800384c:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <menu+0x2440>)
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003852:	f002 fc3d 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003856:	2108      	movs	r1, #8
 8003858:	4870      	ldr	r0, [pc, #448]	; (8003a1c <menu+0x2438>)
 800385a:	f006 fa15 	bl	8009c88 <HAL_GPIO_ReadPin>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10d      	bne.n	8003880 <menu+0x229c>
 8003864:	4b6e      	ldr	r3, [pc, #440]	; (8003a20 <menu+0x243c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f083 0301 	eor.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003872:	4b6c      	ldr	r3, [pc, #432]	; (8003a24 <menu+0x2440>)
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	4b6c      	ldr	r3, [pc, #432]	; (8003a28 <menu+0x2444>)
 8003878:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800387a:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <menu+0x2448>)
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003880:	4b6b      	ldr	r3, [pc, #428]	; (8003a30 <menu+0x244c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b14      	cmp	r3, #20
 8003886:	f040 80b5 	bne.w	80039f4 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <menu+0x2450>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d113      	bne.n	80038ba <menu+0x22d6>
			if(dilSecim == 0) {
 8003892:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <menu+0x2430>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800389a:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <menu+0x2454>)
 800389c:	2101      	movs	r1, #1
 800389e:	2001      	movs	r0, #1
 80038a0:	f7fc ff8a 	bl	80007b8 <lcd_print>
 80038a4:	e020      	b.n	80038e8 <menu+0x2304>
			} else if(dilSecim == 1) {
 80038a6:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <menu+0x2430>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d11c      	bne.n	80038e8 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80038ae:	4a63      	ldr	r2, [pc, #396]	; (8003a3c <menu+0x2458>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7fc ff80 	bl	80007b8 <lcd_print>
 80038b8:	e016      	b.n	80038e8 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80038ba:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <menu+0x2450>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d112      	bne.n	80038e8 <menu+0x2304>
			if(dilSecim == 0) {
 80038c2:	4b54      	ldr	r3, [pc, #336]	; (8003a14 <menu+0x2430>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80038ca:	4a5d      	ldr	r2, [pc, #372]	; (8003a40 <menu+0x245c>)
 80038cc:	2101      	movs	r1, #1
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7fc ff72 	bl	80007b8 <lcd_print>
 80038d4:	e008      	b.n	80038e8 <menu+0x2304>
			} else if(dilSecim == 1) {
 80038d6:	4b4f      	ldr	r3, [pc, #316]	; (8003a14 <menu+0x2430>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d104      	bne.n	80038e8 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80038de:	4a59      	ldr	r2, [pc, #356]	; (8003a44 <menu+0x2460>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7fc ff68 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <menu+0x2464>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d113      	bne.n	8003918 <menu+0x2334>
			if(dilSecim == 0) {
 80038f0:	4b48      	ldr	r3, [pc, #288]	; (8003a14 <menu+0x2430>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 80038f8:	4a54      	ldr	r2, [pc, #336]	; (8003a4c <menu+0x2468>)
 80038fa:	2101      	movs	r1, #1
 80038fc:	2002      	movs	r0, #2
 80038fe:	f7fc ff5b 	bl	80007b8 <lcd_print>
 8003902:	e020      	b.n	8003946 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003904:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <menu+0x2430>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d11c      	bne.n	8003946 <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 800390c:	4a50      	ldr	r2, [pc, #320]	; (8003a50 <menu+0x246c>)
 800390e:	2101      	movs	r1, #1
 8003910:	2002      	movs	r0, #2
 8003912:	f7fc ff51 	bl	80007b8 <lcd_print>
 8003916:	e016      	b.n	8003946 <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003918:	4b4b      	ldr	r3, [pc, #300]	; (8003a48 <menu+0x2464>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d112      	bne.n	8003946 <menu+0x2362>
			if(dilSecim == 0) {
 8003920:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <menu+0x2430>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 8003928:	4a4a      	ldr	r2, [pc, #296]	; (8003a54 <menu+0x2470>)
 800392a:	2101      	movs	r1, #1
 800392c:	2002      	movs	r0, #2
 800392e:	f7fc ff43 	bl	80007b8 <lcd_print>
 8003932:	e008      	b.n	8003946 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003934:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <menu+0x2430>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d104      	bne.n	8003946 <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 800393c:	4a46      	ldr	r2, [pc, #280]	; (8003a58 <menu+0x2474>)
 800393e:	2101      	movs	r1, #1
 8003940:	2002      	movs	r0, #2
 8003942:	f7fc ff39 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003946:	2102      	movs	r1, #2
 8003948:	4834      	ldr	r0, [pc, #208]	; (8003a1c <menu+0x2438>)
 800394a:	f006 f99d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d119      	bne.n	8003988 <menu+0x23a4>
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <menu+0x243c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	f083 0301 	eor.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <menu+0x23a4>
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <menu+0x2450>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d10e      	bne.n	8003988 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800396a:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <menu+0x2464>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <menu+0x2464>)
 8003974:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003976:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <menu+0x2464>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d902      	bls.n	8003984 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <menu+0x2464>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003984:	f002 fba4 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003988:	2104      	movs	r1, #4
 800398a:	4824      	ldr	r0, [pc, #144]	; (8003a1c <menu+0x2438>)
 800398c:	f006 f97c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d119      	bne.n	80039ca <menu+0x23e6>
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <menu+0x243c>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <menu+0x23e6>
 80039a4:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <menu+0x2450>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d10e      	bne.n	80039ca <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80039ac:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <menu+0x2464>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <menu+0x2464>)
 80039b6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <menu+0x2464>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 80039c0:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <menu+0x2464>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039c6:	f002 fb83 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ca:	2108      	movs	r1, #8
 80039cc:	4813      	ldr	r0, [pc, #76]	; (8003a1c <menu+0x2438>)
 80039ce:	f006 f95b 	bl	8009c88 <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10d      	bne.n	80039f4 <menu+0x2410>
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <menu+0x243c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f083 0301 	eor.w	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <menu+0x2464>)
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <menu+0x2444>)
 80039ec:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <menu+0x2448>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <menu+0x244c>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b15      	cmp	r3, #21
 80039fa:	f040 80c2 	bne.w	8003b82 <menu+0x259e>
		if(dilSecim == 0) {
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <menu+0x2430>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12c      	bne.n	8003a60 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <menu+0x2478>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f7fc fed4 	bl	80007b8 <lcd_print>
 8003a10:	e02f      	b.n	8003a72 <menu+0x248e>
 8003a12:	bf00      	nop
 8003a14:	20000c5a 	.word	0x20000c5a
 8003a18:	0800dc30 	.word	0x0800dc30
 8003a1c:	40010800 	.word	0x40010800
 8003a20:	20000c68 	.word	0x20000c68
 8003a24:	20000c4a 	.word	0x20000c4a
 8003a28:	20000b28 	.word	0x20000b28
 8003a2c:	20000c65 	.word	0x20000c65
 8003a30:	20000c39 	.word	0x20000c39
 8003a34:	20000c48 	.word	0x20000c48
 8003a38:	0800e0b0 	.word	0x0800e0b0
 8003a3c:	0800e0c4 	.word	0x0800e0c4
 8003a40:	0800e0d8 	.word	0x0800e0d8
 8003a44:	0800e0ec 	.word	0x0800e0ec
 8003a48:	20000c4b 	.word	0x20000c4b
 8003a4c:	0800e100 	.word	0x0800e100
 8003a50:	0800e114 	.word	0x0800e114
 8003a54:	0800e124 	.word	0x0800e124
 8003a58:	0800e138 	.word	0x0800e138
 8003a5c:	0800e148 	.word	0x0800e148
		} else if(dilSecim == 1) {
 8003a60:	4b9c      	ldr	r3, [pc, #624]	; (8003cd4 <menu+0x26f0>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a68:	4a9b      	ldr	r2, [pc, #620]	; (8003cd8 <menu+0x26f4>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fc fea3 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a72:	4b9a      	ldr	r3, [pc, #616]	; (8003cdc <menu+0x26f8>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d112      	bne.n	8003aa0 <menu+0x24bc>
			if(dilSecim == 0) {
 8003a7a:	4b96      	ldr	r3, [pc, #600]	; (8003cd4 <menu+0x26f0>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003a82:	4a97      	ldr	r2, [pc, #604]	; (8003ce0 <menu+0x26fc>)
 8003a84:	2101      	movs	r1, #1
 8003a86:	2002      	movs	r0, #2
 8003a88:	f7fc fe96 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a8c:	4b91      	ldr	r3, [pc, #580]	; (8003cd4 <menu+0x26f0>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d11c      	bne.n	8003ace <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003a94:	4a93      	ldr	r2, [pc, #588]	; (8003ce4 <menu+0x2700>)
 8003a96:	2101      	movs	r1, #1
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f7fc fe8d 	bl	80007b8 <lcd_print>
 8003a9e:	e016      	b.n	8003ace <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	; (8003cdc <menu+0x26f8>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d112      	bne.n	8003ace <menu+0x24ea>
			if(dilSecim == 0) {
 8003aa8:	4b8a      	ldr	r3, [pc, #552]	; (8003cd4 <menu+0x26f0>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003ab0:	4a8d      	ldr	r2, [pc, #564]	; (8003ce8 <menu+0x2704>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f7fc fe7f 	bl	80007b8 <lcd_print>
 8003aba:	e008      	b.n	8003ace <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003abc:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <menu+0x26f0>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d104      	bne.n	8003ace <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003ac4:	4a89      	ldr	r2, [pc, #548]	; (8003cec <menu+0x2708>)
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	2002      	movs	r0, #2
 8003aca:	f7fc fe75 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4887      	ldr	r0, [pc, #540]	; (8003cf0 <menu+0x270c>)
 8003ad2:	f006 f8d9 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d115      	bne.n	8003b08 <menu+0x2524>
 8003adc:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <menu+0x2710>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003aea:	4b7c      	ldr	r3, [pc, #496]	; (8003cdc <menu+0x26f8>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b7a      	ldr	r3, [pc, #488]	; (8003cdc <menu+0x26f8>)
 8003af4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003af6:	4b79      	ldr	r3, [pc, #484]	; (8003cdc <menu+0x26f8>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d902      	bls.n	8003b04 <menu+0x2520>
				platformSilindirTipi = 0;
 8003afe:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <menu+0x26f8>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b04:	f002 fae4 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b08:	2104      	movs	r1, #4
 8003b0a:	4879      	ldr	r0, [pc, #484]	; (8003cf0 <menu+0x270c>)
 8003b0c:	f006 f8bc 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d115      	bne.n	8003b42 <menu+0x255e>
 8003b16:	4b77      	ldr	r3, [pc, #476]	; (8003cf4 <menu+0x2710>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	f083 0301 	eor.w	r3, r3, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003b24:	4b6d      	ldr	r3, [pc, #436]	; (8003cdc <menu+0x26f8>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b6b      	ldr	r3, [pc, #428]	; (8003cdc <menu+0x26f8>)
 8003b2e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <menu+0x26f8>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <menu+0x255a>
		   		platformSilindirTipi = 1;
 8003b38:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <menu+0x26f8>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b3e:	f002 fac7 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b42:	2108      	movs	r1, #8
 8003b44:	486a      	ldr	r0, [pc, #424]	; (8003cf0 <menu+0x270c>)
 8003b46:	f006 f89f 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d118      	bne.n	8003b82 <menu+0x259e>
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <menu+0x2710>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	f083 0301 	eor.w	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003b5e:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <menu+0x26f8>)
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	4b65      	ldr	r3, [pc, #404]	; (8003cf8 <menu+0x2714>)
 8003b64:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b66:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <menu+0x26f8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d106      	bne.n	8003b7c <menu+0x2598>
				altLimit = 1;
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <menu+0x2718>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <menu+0x2718>)
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <menu+0x2714>)
 8003b7a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b7c:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <menu+0x271c>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b82:	4b60      	ldr	r3, [pc, #384]	; (8003d04 <menu+0x2720>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b16      	cmp	r3, #22
 8003b88:	f040 8081 	bne.w	8003c8e <menu+0x26aa>
		if(dilSecim == 0) {
 8003b8c:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <menu+0x26f0>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b94:	4a5c      	ldr	r2, [pc, #368]	; (8003d08 <menu+0x2724>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7fc fe0d 	bl	80007b8 <lcd_print>
 8003b9e:	e008      	b.n	8003bb2 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	; (8003cd4 <menu+0x26f0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d104      	bne.n	8003bb2 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <menu+0x2728>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fc fe03 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003bb2:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <menu+0x26f0>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bba:	4a55      	ldr	r2, [pc, #340]	; (8003d10 <menu+0x272c>)
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	2002      	movs	r0, #2
 8003bc0:	f7fc fdfa 	bl	80007b8 <lcd_print>
 8003bc4:	e008      	b.n	8003bd8 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003bc6:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <menu+0x26f0>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d104      	bne.n	8003bd8 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003bce:	4a51      	ldr	r2, [pc, #324]	; (8003d14 <menu+0x2730>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f7fc fdf0 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <menu+0x2734>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	220a      	movs	r2, #10
 8003bde:	494f      	ldr	r1, [pc, #316]	; (8003d1c <menu+0x2738>)
 8003be0:	4618      	mov	r0, r3
 8003be2:	f009 f87d 	bl	800cce0 <itoa>
		lcd_print(2,16,snum);
 8003be6:	4a4d      	ldr	r2, [pc, #308]	; (8003d1c <menu+0x2738>)
 8003be8:	2110      	movs	r1, #16
 8003bea:	2002      	movs	r0, #2
 8003bec:	f7fc fde4 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	483f      	ldr	r0, [pc, #252]	; (8003cf0 <menu+0x270c>)
 8003bf4:	f006 f848 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d115      	bne.n	8003c2a <menu+0x2646>
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <menu+0x2710>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003c0c:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <menu+0x2734>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <menu+0x2734>)
 8003c16:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <menu+0x2734>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d902      	bls.n	8003c26 <menu+0x2642>
				yukariValfTmr = 0;
 8003c20:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <menu+0x2734>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c26:	f002 fa53 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	4830      	ldr	r0, [pc, #192]	; (8003cf0 <menu+0x270c>)
 8003c2e:	f006 f82b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d115      	bne.n	8003c64 <menu+0x2680>
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <menu+0x2710>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003c46:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <menu+0x2734>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <menu+0x2734>)
 8003c50:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <menu+0x2734>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d902      	bls.n	8003c60 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <menu+0x2734>)
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c60:	f002 fa36 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c64:	2108      	movs	r1, #8
 8003c66:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <menu+0x270c>)
 8003c68:	f006 f80e 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10d      	bne.n	8003c8e <menu+0x26aa>
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <menu+0x2710>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	f083 0301 	eor.w	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d006      	beq.n	8003c8e <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <menu+0x2734>)
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <menu+0x2714>)
 8003c86:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <menu+0x271c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <menu+0x2720>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b17      	cmp	r3, #23
 8003c94:	f040 80ac 	bne.w	8003df0 <menu+0x280c>
		if(dilSecim == 0) {
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <menu+0x26f0>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <menu+0x273c>)
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f7fc fd87 	bl	80007b8 <lcd_print>
 8003caa:	e008      	b.n	8003cbe <menu+0x26da>
		} else if(dilSecim == 1) {
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <menu+0x26f0>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d104      	bne.n	8003cbe <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <menu+0x2740>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f7fc fd7d 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <menu+0x26f0>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d130      	bne.n	8003d28 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <menu+0x272c>)
 8003cc8:	2101      	movs	r1, #1
 8003cca:	2002      	movs	r0, #2
 8003ccc:	f7fc fd74 	bl	80007b8 <lcd_print>
 8003cd0:	e033      	b.n	8003d3a <menu+0x2756>
 8003cd2:	bf00      	nop
 8003cd4:	20000c5a 	.word	0x20000c5a
 8003cd8:	0800e15c 	.word	0x0800e15c
 8003cdc:	20000c4c 	.word	0x20000c4c
 8003ce0:	0800e100 	.word	0x0800e100
 8003ce4:	0800e114 	.word	0x0800e114
 8003ce8:	0800e124 	.word	0x0800e124
 8003cec:	0800e138 	.word	0x0800e138
 8003cf0:	40010800 	.word	0x40010800
 8003cf4:	20000c68 	.word	0x20000c68
 8003cf8:	20000b28 	.word	0x20000b28
 8003cfc:	20000c3f 	.word	0x20000c3f
 8003d00:	20000c65 	.word	0x20000c65
 8003d04:	20000c39 	.word	0x20000c39
 8003d08:	0800e16c 	.word	0x0800e16c
 8003d0c:	0800e180 	.word	0x0800e180
 8003d10:	0800de20 	.word	0x0800de20
 8003d14:	0800e194 	.word	0x0800e194
 8003d18:	20000c4d 	.word	0x20000c4d
 8003d1c:	20000bbc 	.word	0x20000bbc
 8003d20:	0800e1a4 	.word	0x0800e1a4
 8003d24:	0800e1b8 	.word	0x0800e1b8
			} else if(dilSecim == 1) {
 8003d28:	4b98      	ldr	r3, [pc, #608]	; (8003f8c <menu+0x29a8>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d104      	bne.n	8003d3a <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003d30:	4a97      	ldr	r2, [pc, #604]	; (8003f90 <menu+0x29ac>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	2002      	movs	r0, #2
 8003d36:	f7fc fd3f 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003d3a:	4b96      	ldr	r3, [pc, #600]	; (8003f94 <menu+0x29b0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	220a      	movs	r2, #10
 8003d40:	4995      	ldr	r1, [pc, #596]	; (8003f98 <menu+0x29b4>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f008 ffcc 	bl	800cce0 <itoa>
		lcd_print(2,16,snum);
 8003d48:	4a93      	ldr	r2, [pc, #588]	; (8003f98 <menu+0x29b4>)
 8003d4a:	2110      	movs	r1, #16
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f7fc fd33 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d52:	2102      	movs	r1, #2
 8003d54:	4891      	ldr	r0, [pc, #580]	; (8003f9c <menu+0x29b8>)
 8003d56:	f005 ff97 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d115      	bne.n	8003d8c <menu+0x27a8>
 8003d60:	4b8f      	ldr	r3, [pc, #572]	; (8003fa0 <menu+0x29bc>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f083 0301 	eor.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <menu+0x29b0>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4b87      	ldr	r3, [pc, #540]	; (8003f94 <menu+0x29b0>)
 8003d78:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d7a:	4b86      	ldr	r3, [pc, #536]	; (8003f94 <menu+0x29b0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d902      	bls.n	8003d88 <menu+0x27a4>
				asagiValfTmr = 0;
 8003d82:	4b84      	ldr	r3, [pc, #528]	; (8003f94 <menu+0x29b0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d88:	f002 f9a2 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	4883      	ldr	r0, [pc, #524]	; (8003f9c <menu+0x29b8>)
 8003d90:	f005 ff7a 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d115      	bne.n	8003dc6 <menu+0x27e2>
 8003d9a:	4b81      	ldr	r3, [pc, #516]	; (8003fa0 <menu+0x29bc>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003da8:	4b7a      	ldr	r3, [pc, #488]	; (8003f94 <menu+0x29b0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	4b78      	ldr	r3, [pc, #480]	; (8003f94 <menu+0x29b0>)
 8003db2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003db4:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <menu+0x29b0>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b06      	cmp	r3, #6
 8003dba:	d902      	bls.n	8003dc2 <menu+0x27de>
		   		asagiValfTmr = 5;
 8003dbc:	4b75      	ldr	r3, [pc, #468]	; (8003f94 <menu+0x29b0>)
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dc2:	f002 f985 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	4874      	ldr	r0, [pc, #464]	; (8003f9c <menu+0x29b8>)
 8003dca:	f005 ff5d 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10d      	bne.n	8003df0 <menu+0x280c>
 8003dd4:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <menu+0x29bc>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003de2:	4b6c      	ldr	r3, [pc, #432]	; (8003f94 <menu+0x29b0>)
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <menu+0x29c0>)
 8003de8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003dea:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <menu+0x29c4>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003df0:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <menu+0x29c8>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b18      	cmp	r3, #24
 8003df6:	f040 809d 	bne.w	8003f34 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <menu+0x29cc>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d113      	bne.n	8003e2a <menu+0x2846>
			if(dilSecim == 0) {
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <menu+0x29a8>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003e0a:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <menu+0x29d0>)
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	2001      	movs	r0, #1
 8003e10:	f7fc fcd2 	bl	80007b8 <lcd_print>
 8003e14:	e020      	b.n	8003e58 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003e16:	4b5d      	ldr	r3, [pc, #372]	; (8003f8c <menu+0x29a8>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d11c      	bne.n	8003e58 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003e1e:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <menu+0x29d4>)
 8003e20:	2101      	movs	r1, #1
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7fc fcc8 	bl	80007b8 <lcd_print>
 8003e28:	e016      	b.n	8003e58 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e2a:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <menu+0x29cc>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d112      	bne.n	8003e58 <menu+0x2874>
			if(dilSecim == 0) {
 8003e32:	4b56      	ldr	r3, [pc, #344]	; (8003f8c <menu+0x29a8>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d105      	bne.n	8003e46 <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003e3a:	4a60      	ldr	r2, [pc, #384]	; (8003fbc <menu+0x29d8>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7fc fcba 	bl	80007b8 <lcd_print>
 8003e44:	e008      	b.n	8003e58 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003e46:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <menu+0x29a8>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d104      	bne.n	8003e58 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e4e:	4a5c      	ldr	r2, [pc, #368]	; (8003fc0 <menu+0x29dc>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	2001      	movs	r0, #1
 8003e54:	f7fc fcb0 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e58:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <menu+0x29a8>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e60:	4a58      	ldr	r2, [pc, #352]	; (8003fc4 <menu+0x29e0>)
 8003e62:	2101      	movs	r1, #1
 8003e64:	2002      	movs	r0, #2
 8003e66:	f7fc fca7 	bl	80007b8 <lcd_print>
 8003e6a:	e008      	b.n	8003e7e <menu+0x289a>
			} else if(dilSecim == 1) {
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <menu+0x29a8>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d104      	bne.n	8003e7e <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003e74:	4a46      	ldr	r2, [pc, #280]	; (8003f90 <menu+0x29ac>)
 8003e76:	2101      	movs	r1, #1
 8003e78:	2002      	movs	r0, #2
 8003e7a:	f7fc fc9d 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e7e:	4b52      	ldr	r3, [pc, #328]	; (8003fc8 <menu+0x29e4>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	220a      	movs	r2, #10
 8003e84:	4944      	ldr	r1, [pc, #272]	; (8003f98 <menu+0x29b4>)
 8003e86:	4618      	mov	r0, r3
 8003e88:	f008 ff2a 	bl	800cce0 <itoa>
		lcd_print(2, 16, snum);
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <menu+0x29b4>)
 8003e8e:	2110      	movs	r1, #16
 8003e90:	2002      	movs	r0, #2
 8003e92:	f7fc fc91 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e96:	2102      	movs	r1, #2
 8003e98:	4840      	ldr	r0, [pc, #256]	; (8003f9c <menu+0x29b8>)
 8003e9a:	f005 fef5 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d115      	bne.n	8003ed0 <menu+0x28ec>
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <menu+0x29bc>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00e      	beq.n	8003ed0 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003eb2:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <menu+0x29e4>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b43      	ldr	r3, [pc, #268]	; (8003fc8 <menu+0x29e4>)
 8003ebc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003ebe:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <menu+0x29e4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d902      	bls.n	8003ecc <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003ec6:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <menu+0x29e4>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ecc:	f002 f900 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	4832      	ldr	r0, [pc, #200]	; (8003f9c <menu+0x29b8>)
 8003ed4:	f005 fed8 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d115      	bne.n	8003f0a <menu+0x2926>
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <menu+0x29bc>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	f083 0301 	eor.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <menu+0x29e4>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <menu+0x29e4>)
 8003ef6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ef8:	4b33      	ldr	r3, [pc, #204]	; (8003fc8 <menu+0x29e4>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d902      	bls.n	8003f06 <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003f00:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <menu+0x29e4>)
 8003f02:	2205      	movs	r2, #5
 8003f04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f06:	f002 f8e3 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	4823      	ldr	r0, [pc, #140]	; (8003f9c <menu+0x29b8>)
 8003f0e:	f005 febb 	bl	8009c88 <HAL_GPIO_ReadPin>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10d      	bne.n	8003f34 <menu+0x2950>
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <menu+0x29bc>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <menu+0x29e4>)
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <menu+0x29c0>)
 8003f2c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <menu+0x29c4>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <menu+0x29c8>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b19      	cmp	r3, #25
 8003f3a:	f040 80c4 	bne.w	80040c6 <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <menu+0x29cc>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d113      	bne.n	8003f6e <menu+0x298a>
			if(dilSecim == 0) {
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <menu+0x29a8>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <menu+0x29e8>)
 8003f50:	2101      	movs	r1, #1
 8003f52:	2001      	movs	r0, #1
 8003f54:	f7fc fc30 	bl	80007b8 <lcd_print>
 8003f58:	e047      	b.n	8003fea <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <menu+0x29a8>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d143      	bne.n	8003fea <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f62:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <menu+0x29ec>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7fc fc26 	bl	80007b8 <lcd_print>
 8003f6c:	e03d      	b.n	8003fea <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <menu+0x29cc>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d139      	bne.n	8003fea <menu+0x2a06>
			if(dilSecim == 0) {
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <menu+0x29a8>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d12c      	bne.n	8003fd8 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <menu+0x29f0>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7fc fc18 	bl	80007b8 <lcd_print>
 8003f88:	e02f      	b.n	8003fea <menu+0x2a06>
 8003f8a:	bf00      	nop
 8003f8c:	20000c5a 	.word	0x20000c5a
 8003f90:	0800e194 	.word	0x0800e194
 8003f94:	20000c4e 	.word	0x20000c4e
 8003f98:	20000bbc 	.word	0x20000bbc
 8003f9c:	40010800 	.word	0x40010800
 8003fa0:	20000c68 	.word	0x20000c68
 8003fa4:	20000b28 	.word	0x20000b28
 8003fa8:	20000c65 	.word	0x20000c65
 8003fac:	20000c39 	.word	0x20000c39
 8003fb0:	20000c48 	.word	0x20000c48
 8003fb4:	0800e1cc 	.word	0x0800e1cc
 8003fb8:	0800e1e0 	.word	0x0800e1e0
 8003fbc:	0800e1f4 	.word	0x0800e1f4
 8003fc0:	0800e208 	.word	0x0800e208
 8003fc4:	0800de20 	.word	0x0800de20
 8003fc8:	20000c4f 	.word	0x20000c4f
 8003fcc:	0800e21c 	.word	0x0800e21c
 8003fd0:	0800e230 	.word	0x0800e230
 8003fd4:	0800e244 	.word	0x0800e244
			} else if(dilSecim == 1) {
 8003fd8:	4b73      	ldr	r3, [pc, #460]	; (80041a8 <menu+0x2bc4>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d104      	bne.n	8003fea <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003fe0:	4a72      	ldr	r2, [pc, #456]	; (80041ac <menu+0x2bc8>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fc fbe7 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003fea:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <menu+0x2bc4>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ff2:	4a6f      	ldr	r2, [pc, #444]	; (80041b0 <menu+0x2bcc>)
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	2002      	movs	r0, #2
 8003ff8:	f7fc fbde 	bl	80007b8 <lcd_print>
 8003ffc:	e008      	b.n	8004010 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <menu+0x2bc4>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d104      	bne.n	8004010 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8004006:	4a6b      	ldr	r2, [pc, #428]	; (80041b4 <menu+0x2bd0>)
 8004008:	2101      	movs	r1, #1
 800400a:	2002      	movs	r0, #2
 800400c:	f7fc fbd4 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004010:	4b69      	ldr	r3, [pc, #420]	; (80041b8 <menu+0x2bd4>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	220a      	movs	r2, #10
 8004016:	4969      	ldr	r1, [pc, #420]	; (80041bc <menu+0x2bd8>)
 8004018:	4618      	mov	r0, r3
 800401a:	f008 fe61 	bl	800cce0 <itoa>
		lcd_print(2,16,snum);
 800401e:	4a67      	ldr	r2, [pc, #412]	; (80041bc <menu+0x2bd8>)
 8004020:	2110      	movs	r1, #16
 8004022:	2002      	movs	r0, #2
 8004024:	f7fc fbc8 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004028:	2102      	movs	r1, #2
 800402a:	4865      	ldr	r0, [pc, #404]	; (80041c0 <menu+0x2bdc>)
 800402c:	f005 fe2c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d115      	bne.n	8004062 <menu+0x2a7e>
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <menu+0x2be0>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	f083 0301 	eor.w	r3, r3, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00e      	beq.n	8004062 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004044:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <menu+0x2bd4>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	4b5a      	ldr	r3, [pc, #360]	; (80041b8 <menu+0x2bd4>)
 800404e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <menu+0x2bd4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d902      	bls.n	800405e <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8004058:	4b57      	ldr	r3, [pc, #348]	; (80041b8 <menu+0x2bd4>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800405e:	f002 f837 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004062:	2104      	movs	r1, #4
 8004064:	4856      	ldr	r0, [pc, #344]	; (80041c0 <menu+0x2bdc>)
 8004066:	f005 fe0f 	bl	8009c88 <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d115      	bne.n	800409c <menu+0x2ab8>
 8004070:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <menu+0x2be0>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	f083 0301 	eor.w	r3, r3, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00e      	beq.n	800409c <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800407e:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <menu+0x2bd4>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	3b01      	subs	r3, #1
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <menu+0x2bd4>)
 8004088:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <menu+0x2bd4>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b06      	cmp	r3, #6
 8004090:	d902      	bls.n	8004098 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <menu+0x2bd4>)
 8004094:	2205      	movs	r2, #5
 8004096:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004098:	f002 f81a 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800409c:	2108      	movs	r1, #8
 800409e:	4848      	ldr	r0, [pc, #288]	; (80041c0 <menu+0x2bdc>)
 80040a0:	f005 fdf2 	bl	8009c88 <HAL_GPIO_ReadPin>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10d      	bne.n	80040c6 <menu+0x2ae2>
 80040aa:	4b46      	ldr	r3, [pc, #280]	; (80041c4 <menu+0x2be0>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 80040b8:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <menu+0x2bd4>)
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <menu+0x2be4>)
 80040be:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80040c0:	4b42      	ldr	r3, [pc, #264]	; (80041cc <menu+0x2be8>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80040c6:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <menu+0x2bec>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b1a      	cmp	r3, #26
 80040cc:	f040 80ec 	bne.w	80042a8 <menu+0x2cc4>
		if(dilSecim == 0) {
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <menu+0x2bc4>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80040d8:	4a3e      	ldr	r2, [pc, #248]	; (80041d4 <menu+0x2bf0>)
 80040da:	2101      	movs	r1, #1
 80040dc:	2001      	movs	r0, #1
 80040de:	f7fc fb6b 	bl	80007b8 <lcd_print>
 80040e2:	e008      	b.n	80040f6 <menu+0x2b12>
		} else if(dilSecim == 1) {
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <menu+0x2bc4>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d104      	bne.n	80040f6 <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 80040ec:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <menu+0x2bf4>)
 80040ee:	2101      	movs	r1, #1
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7fc fb61 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <menu+0x2bf8>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b63      	cmp	r3, #99	; 0x63
 80040fc:	d91e      	bls.n	800413c <menu+0x2b58>
			if(dilSecim == 0) {
 80040fe:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <menu+0x2bc4>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004106:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <menu+0x2bcc>)
 8004108:	2101      	movs	r1, #1
 800410a:	2002      	movs	r0, #2
 800410c:	f7fc fb54 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <menu+0x2bc4>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d104      	bne.n	8004122 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <menu+0x2bd0>)
 800411a:	2101      	movs	r1, #1
 800411c:	2002      	movs	r0, #2
 800411e:	f7fc fb4b 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <menu+0x2bf8>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	220a      	movs	r2, #10
 8004128:	4924      	ldr	r1, [pc, #144]	; (80041bc <menu+0x2bd8>)
 800412a:	4618      	mov	r0, r3
 800412c:	f008 fdd8 	bl	800cce0 <itoa>
			lcd_print(2,14,snum);
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <menu+0x2bd8>)
 8004132:	210e      	movs	r1, #14
 8004134:	2002      	movs	r0, #2
 8004136:	f7fc fb3f 	bl	80007b8 <lcd_print>
 800413a:	e066      	b.n	800420a <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800413c:	4b27      	ldr	r3, [pc, #156]	; (80041dc <menu+0x2bf8>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b09      	cmp	r3, #9
 8004142:	d923      	bls.n	800418c <menu+0x2ba8>
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <menu+0x2bf8>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b63      	cmp	r3, #99	; 0x63
 800414a:	d81f      	bhi.n	800418c <menu+0x2ba8>
			if(dilSecim == 0) {
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <menu+0x2bc4>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <menu+0x2bcc>)
 8004156:	2101      	movs	r1, #1
 8004158:	2002      	movs	r0, #2
 800415a:	f7fc fb2d 	bl	80007b8 <lcd_print>
 800415e:	e008      	b.n	8004172 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <menu+0x2bc4>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d104      	bne.n	8004172 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 8004168:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <menu+0x2bd0>)
 800416a:	2101      	movs	r1, #1
 800416c:	2002      	movs	r0, #2
 800416e:	f7fc fb23 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <menu+0x2bf8>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	220a      	movs	r2, #10
 8004178:	4910      	ldr	r1, [pc, #64]	; (80041bc <menu+0x2bd8>)
 800417a:	4618      	mov	r0, r3
 800417c:	f008 fdb0 	bl	800cce0 <itoa>
			lcd_print(2, 15, snum);
 8004180:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <menu+0x2bd8>)
 8004182:	210f      	movs	r1, #15
 8004184:	2002      	movs	r0, #2
 8004186:	f7fc fb17 	bl	80007b8 <lcd_print>
 800418a:	e03e      	b.n	800420a <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <menu+0x2bf8>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b09      	cmp	r3, #9
 8004192:	d83a      	bhi.n	800420a <menu+0x2c26>
			if(dilSecim == 0) {
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <menu+0x2bc4>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d121      	bne.n	80041e0 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <menu+0x2bcc>)
 800419e:	2101      	movs	r1, #1
 80041a0:	2002      	movs	r0, #2
 80041a2:	f7fc fb09 	bl	80007b8 <lcd_print>
 80041a6:	e024      	b.n	80041f2 <menu+0x2c0e>
 80041a8:	20000c5a 	.word	0x20000c5a
 80041ac:	0800e258 	.word	0x0800e258
 80041b0:	0800de20 	.word	0x0800de20
 80041b4:	0800e194 	.word	0x0800e194
 80041b8:	20000c50 	.word	0x20000c50
 80041bc:	20000bbc 	.word	0x20000bbc
 80041c0:	40010800 	.word	0x40010800
 80041c4:	20000c68 	.word	0x20000c68
 80041c8:	20000b28 	.word	0x20000b28
 80041cc:	20000c65 	.word	0x20000c65
 80041d0:	20000c39 	.word	0x20000c39
 80041d4:	0800e26c 	.word	0x0800e26c
 80041d8:	0800e280 	.word	0x0800e280
 80041dc:	20000c51 	.word	0x20000c51
			} else if(dilSecim == 1) {
 80041e0:	4b8f      	ldr	r3, [pc, #572]	; (8004420 <menu+0x2e3c>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d104      	bne.n	80041f2 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 80041e8:	4a8e      	ldr	r2, [pc, #568]	; (8004424 <menu+0x2e40>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	2002      	movs	r0, #2
 80041ee:	f7fc fae3 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041f2:	4b8d      	ldr	r3, [pc, #564]	; (8004428 <menu+0x2e44>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	220a      	movs	r2, #10
 80041f8:	498c      	ldr	r1, [pc, #560]	; (800442c <menu+0x2e48>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f008 fd70 	bl	800cce0 <itoa>
			lcd_print(2, 16, snum);
 8004200:	4a8a      	ldr	r2, [pc, #552]	; (800442c <menu+0x2e48>)
 8004202:	2110      	movs	r1, #16
 8004204:	2002      	movs	r0, #2
 8004206:	f7fc fad7 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800420a:	2102      	movs	r1, #2
 800420c:	4888      	ldr	r0, [pc, #544]	; (8004430 <menu+0x2e4c>)
 800420e:	f005 fd3b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d115      	bne.n	8004244 <menu+0x2c60>
 8004218:	4b86      	ldr	r3, [pc, #536]	; (8004434 <menu+0x2e50>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00e      	beq.n	8004244 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004226:	4b80      	ldr	r3, [pc, #512]	; (8004428 <menu+0x2e44>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4b7e      	ldr	r3, [pc, #504]	; (8004428 <menu+0x2e44>)
 8004230:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004232:	4b7d      	ldr	r3, [pc, #500]	; (8004428 <menu+0x2e44>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2bb4      	cmp	r3, #180	; 0xb4
 8004238:	d902      	bls.n	8004240 <menu+0x2c5c>
				makineCalismaTmr = 0;
 800423a:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <menu+0x2e44>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004240:	f001 ff46 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004244:	2104      	movs	r1, #4
 8004246:	487a      	ldr	r0, [pc, #488]	; (8004430 <menu+0x2e4c>)
 8004248:	f005 fd1e 	bl	8009c88 <HAL_GPIO_ReadPin>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d115      	bne.n	800427e <menu+0x2c9a>
 8004252:	4b78      	ldr	r3, [pc, #480]	; (8004434 <menu+0x2e50>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004260:	4b71      	ldr	r3, [pc, #452]	; (8004428 <menu+0x2e44>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b6f      	ldr	r3, [pc, #444]	; (8004428 <menu+0x2e44>)
 800426a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800426c:	4b6e      	ldr	r3, [pc, #440]	; (8004428 <menu+0x2e44>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2bb5      	cmp	r3, #181	; 0xb5
 8004272:	d902      	bls.n	800427a <menu+0x2c96>
		   		makineCalismaTmr = 180;
 8004274:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <menu+0x2e44>)
 8004276:	22b4      	movs	r2, #180	; 0xb4
 8004278:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800427a:	f001 ff29 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800427e:	2108      	movs	r1, #8
 8004280:	486b      	ldr	r0, [pc, #428]	; (8004430 <menu+0x2e4c>)
 8004282:	f005 fd01 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10d      	bne.n	80042a8 <menu+0x2cc4>
 800428c:	4b69      	ldr	r3, [pc, #420]	; (8004434 <menu+0x2e50>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f083 0301 	eor.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 800429a:	4b63      	ldr	r3, [pc, #396]	; (8004428 <menu+0x2e44>)
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	4b66      	ldr	r3, [pc, #408]	; (8004438 <menu+0x2e54>)
 80042a0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80042a2:	4b66      	ldr	r3, [pc, #408]	; (800443c <menu+0x2e58>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80042a8:	4b65      	ldr	r3, [pc, #404]	; (8004440 <menu+0x2e5c>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b1b      	cmp	r3, #27
 80042ae:	f040 8083 	bne.w	80043b8 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 80042b2:	4a64      	ldr	r2, [pc, #400]	; (8004444 <menu+0x2e60>)
 80042b4:	2101      	movs	r1, #1
 80042b6:	2001      	movs	r0, #1
 80042b8:	f7fc fa7e 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 80042bc:	4b62      	ldr	r3, [pc, #392]	; (8004448 <menu+0x2e64>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d113      	bne.n	80042ec <menu+0x2d08>
			if(dilSecim == 0) {
 80042c4:	4b56      	ldr	r3, [pc, #344]	; (8004420 <menu+0x2e3c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 80042cc:	4a5f      	ldr	r2, [pc, #380]	; (800444c <menu+0x2e68>)
 80042ce:	2101      	movs	r1, #1
 80042d0:	2002      	movs	r0, #2
 80042d2:	f7fc fa71 	bl	80007b8 <lcd_print>
 80042d6:	e020      	b.n	800431a <menu+0x2d36>
			} else if(dilSecim == 1) {
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <menu+0x2e3c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d11c      	bne.n	800431a <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 80042e0:	4a5b      	ldr	r2, [pc, #364]	; (8004450 <menu+0x2e6c>)
 80042e2:	2101      	movs	r1, #1
 80042e4:	2002      	movs	r0, #2
 80042e6:	f7fc fa67 	bl	80007b8 <lcd_print>
 80042ea:	e016      	b.n	800431a <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 80042ec:	4b56      	ldr	r3, [pc, #344]	; (8004448 <menu+0x2e64>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d112      	bne.n	800431a <menu+0x2d36>
			if(dilSecim == 0) {
 80042f4:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <menu+0x2e3c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 80042fc:	4a55      	ldr	r2, [pc, #340]	; (8004454 <menu+0x2e70>)
 80042fe:	2101      	movs	r1, #1
 8004300:	2002      	movs	r0, #2
 8004302:	f7fc fa59 	bl	80007b8 <lcd_print>
 8004306:	e008      	b.n	800431a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <menu+0x2e3c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d104      	bne.n	800431a <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004310:	4a51      	ldr	r2, [pc, #324]	; (8004458 <menu+0x2e74>)
 8004312:	2101      	movs	r1, #1
 8004314:	2002      	movs	r0, #2
 8004316:	f7fc fa4f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800431a:	2102      	movs	r1, #2
 800431c:	4844      	ldr	r0, [pc, #272]	; (8004430 <menu+0x2e4c>)
 800431e:	f005 fcb3 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d115      	bne.n	8004354 <menu+0x2d70>
 8004328:	4b42      	ldr	r3, [pc, #264]	; (8004434 <menu+0x2e50>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <menu+0x2d70>
			buzzer = buzzer + 1;
 8004336:	4b44      	ldr	r3, [pc, #272]	; (8004448 <menu+0x2e64>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b42      	ldr	r3, [pc, #264]	; (8004448 <menu+0x2e64>)
 8004340:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004342:	4b41      	ldr	r3, [pc, #260]	; (8004448 <menu+0x2e64>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d902      	bls.n	8004350 <menu+0x2d6c>
				buzzer = 0;
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <menu+0x2e64>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004350:	f001 febe 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004354:	2104      	movs	r1, #4
 8004356:	4836      	ldr	r0, [pc, #216]	; (8004430 <menu+0x2e4c>)
 8004358:	f005 fc96 	bl	8009c88 <HAL_GPIO_ReadPin>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d115      	bne.n	800438e <menu+0x2daa>
 8004362:	4b34      	ldr	r3, [pc, #208]	; (8004434 <menu+0x2e50>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f083 0301 	eor.w	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <menu+0x2daa>
			buzzer = buzzer - 1;
 8004370:	4b35      	ldr	r3, [pc, #212]	; (8004448 <menu+0x2e64>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b33      	ldr	r3, [pc, #204]	; (8004448 <menu+0x2e64>)
 800437a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <menu+0x2e64>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <menu+0x2da6>
		   		buzzer = 1;
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <menu+0x2e64>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800438a:	f001 fea1 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800438e:	2108      	movs	r1, #8
 8004390:	4827      	ldr	r0, [pc, #156]	; (8004430 <menu+0x2e4c>)
 8004392:	f005 fc79 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10d      	bne.n	80043b8 <menu+0x2dd4>
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <menu+0x2e50>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d006      	beq.n	80043b8 <menu+0x2dd4>
			eepromData[25] = buzzer;
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <menu+0x2e64>)
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	4b22      	ldr	r3, [pc, #136]	; (8004438 <menu+0x2e54>)
 80043b0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <menu+0x2e58>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <menu+0x2e5c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b1c      	cmp	r3, #28
 80043be:	f040 80ab 	bne.w	8004518 <menu+0x2f34>
		calismaSayModu = 0;
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <menu+0x2e78>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80043c8:	4a25      	ldr	r2, [pc, #148]	; (8004460 <menu+0x2e7c>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	2001      	movs	r0, #1
 80043ce:	f7fc f9f3 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <menu+0x2e80>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d113      	bne.n	8004402 <menu+0x2e1e>
			if(dilSecim == 0) {
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <menu+0x2e3c>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <menu+0x2e68>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	2002      	movs	r0, #2
 80043e8:	f7fc f9e6 	bl	80007b8 <lcd_print>
 80043ec:	e045      	b.n	800447a <menu+0x2e96>
			} else if(dilSecim == 1) {
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <menu+0x2e3c>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d141      	bne.n	800447a <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <menu+0x2e6c>)
 80043f8:	2101      	movs	r1, #1
 80043fa:	2002      	movs	r0, #2
 80043fc:	f7fc f9dc 	bl	80007b8 <lcd_print>
 8004400:	e03b      	b.n	800447a <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <menu+0x2e80>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d137      	bne.n	800447a <menu+0x2e96>
			if(dilSecim == 0){
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <menu+0x2e3c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d12a      	bne.n	8004468 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <menu+0x2e70>)
 8004414:	2101      	movs	r1, #1
 8004416:	2002      	movs	r0, #2
 8004418:	f7fc f9ce 	bl	80007b8 <lcd_print>
 800441c:	e02d      	b.n	800447a <menu+0x2e96>
 800441e:	bf00      	nop
 8004420:	20000c5a 	.word	0x20000c5a
 8004424:	0800e194 	.word	0x0800e194
 8004428:	20000c51 	.word	0x20000c51
 800442c:	20000bbc 	.word	0x20000bbc
 8004430:	40010800 	.word	0x40010800
 8004434:	20000c68 	.word	0x20000c68
 8004438:	20000b28 	.word	0x20000b28
 800443c:	20000c65 	.word	0x20000c65
 8004440:	20000c39 	.word	0x20000c39
 8004444:	0800e294 	.word	0x0800e294
 8004448:	20000c55 	.word	0x20000c55
 800444c:	0800dbbc 	.word	0x0800dbbc
 8004450:	0800dbd0 	.word	0x0800dbd0
 8004454:	0800dc1c 	.word	0x0800dc1c
 8004458:	0800dc30 	.word	0x0800dc30
 800445c:	20000c59 	.word	0x20000c59
 8004460:	0800e2a8 	.word	0x0800e2a8
 8004464:	20000c57 	.word	0x20000c57
			} else if(dilSecim == 1) {
 8004468:	4b71      	ldr	r3, [pc, #452]	; (8004630 <menu+0x304c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d104      	bne.n	800447a <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004470:	4a70      	ldr	r2, [pc, #448]	; (8004634 <menu+0x3050>)
 8004472:	2101      	movs	r1, #1
 8004474:	2002      	movs	r0, #2
 8004476:	f7fc f99f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800447a:	2102      	movs	r1, #2
 800447c:	486e      	ldr	r0, [pc, #440]	; (8004638 <menu+0x3054>)
 800447e:	f005 fc03 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d115      	bne.n	80044b4 <menu+0x2ed0>
 8004488:	4b6c      	ldr	r3, [pc, #432]	; (800463c <menu+0x3058>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00e      	beq.n	80044b4 <menu+0x2ed0>
			demoMode = demoMode + 1;
 8004496:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <menu+0x305c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b68      	ldr	r3, [pc, #416]	; (8004640 <menu+0x305c>)
 80044a0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80044a2:	4b67      	ldr	r3, [pc, #412]	; (8004640 <menu+0x305c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d902      	bls.n	80044b0 <menu+0x2ecc>
				demoMode = 0;
 80044aa:	4b65      	ldr	r3, [pc, #404]	; (8004640 <menu+0x305c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044b0:	f001 fe0e 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b4:	2104      	movs	r1, #4
 80044b6:	4860      	ldr	r0, [pc, #384]	; (8004638 <menu+0x3054>)
 80044b8:	f005 fbe6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d115      	bne.n	80044ee <menu+0x2f0a>
 80044c2:	4b5e      	ldr	r3, [pc, #376]	; (800463c <menu+0x3058>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <menu+0x2f0a>
			demoMode = demoMode - 1;
 80044d0:	4b5b      	ldr	r3, [pc, #364]	; (8004640 <menu+0x305c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b59      	ldr	r3, [pc, #356]	; (8004640 <menu+0x305c>)
 80044da:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80044dc:	4b58      	ldr	r3, [pc, #352]	; (8004640 <menu+0x305c>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <menu+0x2f06>
		   		demoMode = 1;
 80044e4:	4b56      	ldr	r3, [pc, #344]	; (8004640 <menu+0x305c>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044ea:	f001 fdf1 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ee:	2108      	movs	r1, #8
 80044f0:	4851      	ldr	r0, [pc, #324]	; (8004638 <menu+0x3054>)
 80044f2:	f005 fbc9 	bl	8009c88 <HAL_GPIO_ReadPin>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10d      	bne.n	8004518 <menu+0x2f34>
 80044fc:	4b4f      	ldr	r3, [pc, #316]	; (800463c <menu+0x3058>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f083 0301 	eor.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <menu+0x2f34>
			eepromData[26] = demoMode;
 800450a:	4b4d      	ldr	r3, [pc, #308]	; (8004640 <menu+0x305c>)
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	4b4d      	ldr	r3, [pc, #308]	; (8004644 <menu+0x3060>)
 8004510:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <menu+0x3064>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <menu+0x3068>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b1d      	cmp	r3, #29
 800451e:	f040 8132 	bne.w	8004786 <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004522:	4b4b      	ldr	r3, [pc, #300]	; (8004650 <menu+0x306c>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d113      	bne.n	8004552 <menu+0x2f6e>
 800452a:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <menu+0x3070>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <menu+0x2f6e>
 8004532:	4b49      	ldr	r3, [pc, #292]	; (8004658 <menu+0x3074>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <menu+0x2f6e>
 800453a:	4b48      	ldr	r3, [pc, #288]	; (800465c <menu+0x3078>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d107      	bne.n	8004552 <menu+0x2f6e>
 8004542:	4b47      	ldr	r3, [pc, #284]	; (8004660 <menu+0x307c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <menu+0x2f6e>
			calismaSayisiYar = 0;
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <menu+0x3080>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e002      	b.n	8004558 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <menu+0x3080>)
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <menu+0x3084>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d154      	bne.n	800460a <menu+0x3026>
			if(dilSecim == 0) {
 8004560:	4b33      	ldr	r3, [pc, #204]	; (8004630 <menu+0x304c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004568:	4a40      	ldr	r2, [pc, #256]	; (800466c <menu+0x3088>)
 800456a:	2101      	movs	r1, #1
 800456c:	2001      	movs	r0, #1
 800456e:	f7fc f923 	bl	80007b8 <lcd_print>
 8004572:	e008      	b.n	8004586 <menu+0x2fa2>
			} else if(dilSecim == 1) {
 8004574:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <menu+0x304c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d104      	bne.n	8004586 <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 800457c:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <menu+0x308c>)
 800457e:	2101      	movs	r1, #1
 8004580:	2001      	movs	r0, #1
 8004582:	f7fc f919 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <menu+0x307c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	220a      	movs	r2, #10
 800458c:	4939      	ldr	r1, [pc, #228]	; (8004674 <menu+0x3090>)
 800458e:	4618      	mov	r0, r3
 8004590:	f008 fba6 	bl	800cce0 <itoa>
			lcd_print(2, 12, snum);
 8004594:	4a37      	ldr	r2, [pc, #220]	; (8004674 <menu+0x3090>)
 8004596:	210c      	movs	r1, #12
 8004598:	2002      	movs	r0, #2
 800459a:	f7fc f90d 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800459e:	4b2f      	ldr	r3, [pc, #188]	; (800465c <menu+0x3078>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	220a      	movs	r2, #10
 80045a4:	4933      	ldr	r1, [pc, #204]	; (8004674 <menu+0x3090>)
 80045a6:	4618      	mov	r0, r3
 80045a8:	f008 fb9a 	bl	800cce0 <itoa>
			lcd_print(2, 13, snum);
 80045ac:	4a31      	ldr	r2, [pc, #196]	; (8004674 <menu+0x3090>)
 80045ae:	210d      	movs	r1, #13
 80045b0:	2002      	movs	r0, #2
 80045b2:	f7fc f901 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80045b6:	4b28      	ldr	r3, [pc, #160]	; (8004658 <menu+0x3074>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	220a      	movs	r2, #10
 80045bc:	492d      	ldr	r1, [pc, #180]	; (8004674 <menu+0x3090>)
 80045be:	4618      	mov	r0, r3
 80045c0:	f008 fb8e 	bl	800cce0 <itoa>
			lcd_print(2, 14, snum);
 80045c4:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <menu+0x3090>)
 80045c6:	210e      	movs	r1, #14
 80045c8:	2002      	movs	r0, #2
 80045ca:	f7fc f8f5 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80045ce:	4b21      	ldr	r3, [pc, #132]	; (8004654 <menu+0x3070>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	220a      	movs	r2, #10
 80045d4:	4927      	ldr	r1, [pc, #156]	; (8004674 <menu+0x3090>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f008 fb82 	bl	800cce0 <itoa>
			lcd_print(2, 15, snum);
 80045dc:	4a25      	ldr	r2, [pc, #148]	; (8004674 <menu+0x3090>)
 80045de:	210f      	movs	r1, #15
 80045e0:	2002      	movs	r0, #2
 80045e2:	f7fc f8e9 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <menu+0x306c>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	220a      	movs	r2, #10
 80045ec:	4921      	ldr	r1, [pc, #132]	; (8004674 <menu+0x3090>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	f008 fb76 	bl	800cce0 <itoa>
			lcd_print(2, 16, snum);
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <menu+0x3090>)
 80045f6:	2110      	movs	r1, #16
 80045f8:	2002      	movs	r0, #2
 80045fa:	f7fc f8dd 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 80045fe:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <menu+0x3094>)
 8004600:	2101      	movs	r1, #1
 8004602:	2002      	movs	r0, #2
 8004604:	f7fc f8d8 	bl	80007b8 <lcd_print>
 8004608:	e048      	b.n	800469c <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 800460a:	4b17      	ldr	r3, [pc, #92]	; (8004668 <menu+0x3084>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d144      	bne.n	800469c <menu+0x30b8>
			if(dilSecim == 0) {
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <menu+0x304c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d132      	bne.n	8004680 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <menu+0x3088>)
 800461c:	2101      	movs	r1, #1
 800461e:	2001      	movs	r0, #1
 8004620:	f7fc f8ca 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <menu+0x3098>)
 8004626:	2101      	movs	r1, #1
 8004628:	2002      	movs	r0, #2
 800462a:	f7fc f8c5 	bl	80007b8 <lcd_print>
 800462e:	e035      	b.n	800469c <menu+0x30b8>
 8004630:	20000c5a 	.word	0x20000c5a
 8004634:	0800dc30 	.word	0x0800dc30
 8004638:	40010800 	.word	0x40010800
 800463c:	20000c68 	.word	0x20000c68
 8004640:	20000c57 	.word	0x20000c57
 8004644:	20000b28 	.word	0x20000b28
 8004648:	20000c65 	.word	0x20000c65
 800464c:	20000c39 	.word	0x20000c39
 8004650:	20000c36 	.word	0x20000c36
 8004654:	20000c37 	.word	0x20000c37
 8004658:	200009b1 	.word	0x200009b1
 800465c:	200009b2 	.word	0x200009b2
 8004660:	20000c38 	.word	0x20000c38
 8004664:	20000c7a 	.word	0x20000c7a
 8004668:	20000c59 	.word	0x20000c59
 800466c:	0800e2b8 	.word	0x0800e2b8
 8004670:	0800e2cc 	.word	0x0800e2cc
 8004674:	20000bbc 	.word	0x20000bbc
 8004678:	0800e2e0 	.word	0x0800e2e0
 800467c:	0800e2ec 	.word	0x0800e2ec
			} else if(dilSecim == 1) {
 8004680:	4b94      	ldr	r3, [pc, #592]	; (80048d4 <menu+0x32f0>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d109      	bne.n	800469c <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004688:	4a93      	ldr	r2, [pc, #588]	; (80048d8 <menu+0x32f4>)
 800468a:	2101      	movs	r1, #1
 800468c:	2001      	movs	r0, #1
 800468e:	f7fc f893 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004692:	4a92      	ldr	r2, [pc, #584]	; (80048dc <menu+0x32f8>)
 8004694:	2101      	movs	r1, #1
 8004696:	2002      	movs	r0, #2
 8004698:	f7fc f88e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800469c:	2102      	movs	r1, #2
 800469e:	4890      	ldr	r0, [pc, #576]	; (80048e0 <menu+0x32fc>)
 80046a0:	f005 faf2 	bl	8009c88 <HAL_GPIO_ReadPin>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d119      	bne.n	80046de <menu+0x30fa>
 80046aa:	4b8e      	ldr	r3, [pc, #568]	; (80048e4 <menu+0x3300>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	f083 0301 	eor.w	r3, r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d012      	beq.n	80046de <menu+0x30fa>
 80046b8:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <menu+0x3304>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 80046c0:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <menu+0x3308>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	4b88      	ldr	r3, [pc, #544]	; (80048ec <menu+0x3308>)
 80046ca:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80046cc:	4b87      	ldr	r3, [pc, #540]	; (80048ec <menu+0x3308>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d902      	bls.n	80046da <menu+0x30f6>
				calismaSayModu = 0;
 80046d4:	4b85      	ldr	r3, [pc, #532]	; (80048ec <menu+0x3308>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046da:	f001 fcf9 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046de:	2104      	movs	r1, #4
 80046e0:	487f      	ldr	r0, [pc, #508]	; (80048e0 <menu+0x32fc>)
 80046e2:	f005 fad1 	bl	8009c88 <HAL_GPIO_ReadPin>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d119      	bne.n	8004720 <menu+0x313c>
 80046ec:	4b7d      	ldr	r3, [pc, #500]	; (80048e4 <menu+0x3300>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f083 0301 	eor.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d012      	beq.n	8004720 <menu+0x313c>
 80046fa:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <menu+0x3304>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00e      	beq.n	8004720 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 8004702:	4b7a      	ldr	r3, [pc, #488]	; (80048ec <menu+0x3308>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	3b01      	subs	r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b78      	ldr	r3, [pc, #480]	; (80048ec <menu+0x3308>)
 800470c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800470e:	4b77      	ldr	r3, [pc, #476]	; (80048ec <menu+0x3308>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <menu+0x3138>
		   		calismaSayModu = 1;
 8004716:	4b75      	ldr	r3, [pc, #468]	; (80048ec <menu+0x3308>)
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800471c:	f001 fcd8 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004720:	2108      	movs	r1, #8
 8004722:	486f      	ldr	r0, [pc, #444]	; (80048e0 <menu+0x32fc>)
 8004724:	f005 fab0 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d12b      	bne.n	8004786 <menu+0x31a2>
 800472e:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <menu+0x3300>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f083 0301 	eor.w	r3, r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d024      	beq.n	8004786 <menu+0x31a2>
			eepromData[32] = 0;
 800473c:	4b6c      	ldr	r3, [pc, #432]	; (80048f0 <menu+0x330c>)
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004744:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <menu+0x330c>)
 8004746:	2200      	movs	r2, #0
 8004748:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800474a:	4b69      	ldr	r3, [pc, #420]	; (80048f0 <menu+0x330c>)
 800474c:	2200      	movs	r2, #0
 800474e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004750:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <menu+0x330c>)
 8004752:	2200      	movs	r2, #0
 8004754:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004756:	4b66      	ldr	r3, [pc, #408]	; (80048f0 <menu+0x330c>)
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800475c:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <menu+0x3310>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <menu+0x3314>)
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004768:	4b64      	ldr	r3, [pc, #400]	; (80048fc <menu+0x3318>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800476e:	4b64      	ldr	r3, [pc, #400]	; (8004900 <menu+0x331c>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004774:	4b63      	ldr	r3, [pc, #396]	; (8004904 <menu+0x3320>)
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800477a:	4b5c      	ldr	r3, [pc, #368]	; (80048ec <menu+0x3308>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004780:	4b61      	ldr	r3, [pc, #388]	; (8004908 <menu+0x3324>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004786:	4b61      	ldr	r3, [pc, #388]	; (800490c <menu+0x3328>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b1e      	cmp	r3, #30
 800478c:	d16f      	bne.n	800486e <menu+0x328a>
		calismaSayModu = 0;
 800478e:	4b57      	ldr	r3, [pc, #348]	; (80048ec <menu+0x3308>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004794:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <menu+0x32f0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 800479c:	4a5c      	ldr	r2, [pc, #368]	; (8004910 <menu+0x332c>)
 800479e:	2101      	movs	r1, #1
 80047a0:	2001      	movs	r0, #1
 80047a2:	f7fc f809 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80047a6:	4a5b      	ldr	r2, [pc, #364]	; (8004914 <menu+0x3330>)
 80047a8:	2101      	movs	r1, #1
 80047aa:	2002      	movs	r0, #2
 80047ac:	f7fc f804 	bl	80007b8 <lcd_print>
 80047b0:	e00d      	b.n	80047ce <menu+0x31ea>
		} else if(dilSecim == 1) {
 80047b2:	4b48      	ldr	r3, [pc, #288]	; (80048d4 <menu+0x32f0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d109      	bne.n	80047ce <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80047ba:	4a57      	ldr	r2, [pc, #348]	; (8004918 <menu+0x3334>)
 80047bc:	2101      	movs	r1, #1
 80047be:	2001      	movs	r0, #1
 80047c0:	f7fb fffa 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80047c4:	4a55      	ldr	r2, [pc, #340]	; (800491c <menu+0x3338>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2002      	movs	r0, #2
 80047ca:	f7fb fff5 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ce:	2102      	movs	r1, #2
 80047d0:	4843      	ldr	r0, [pc, #268]	; (80048e0 <menu+0x32fc>)
 80047d2:	f005 fa59 	bl	8009c88 <HAL_GPIO_ReadPin>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d115      	bne.n	8004808 <menu+0x3224>
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <menu+0x3300>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00e      	beq.n	8004808 <menu+0x3224>
			dilSecim = dilSecim + 1;
 80047ea:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <menu+0x32f0>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <menu+0x32f0>)
 80047f4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047f6:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <menu+0x32f0>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d902      	bls.n	8004804 <menu+0x3220>
				dilSecim = 0;
 80047fe:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <menu+0x32f0>)
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004804:	f001 fc64 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004808:	2104      	movs	r1, #4
 800480a:	4835      	ldr	r0, [pc, #212]	; (80048e0 <menu+0x32fc>)
 800480c:	f005 fa3c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d115      	bne.n	8004842 <menu+0x325e>
 8004816:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <menu+0x3300>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f083 0301 	eor.w	r3, r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <menu+0x325e>
			dilSecim = dilSecim - 1;
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <menu+0x32f0>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	3b01      	subs	r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <menu+0x32f0>)
 800482e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <menu+0x32f0>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <menu+0x325a>
		   		dilSecim = 1;
 8004838:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <menu+0x32f0>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800483e:	f001 fc47 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004842:	2108      	movs	r1, #8
 8004844:	4826      	ldr	r0, [pc, #152]	; (80048e0 <menu+0x32fc>)
 8004846:	f005 fa1f 	bl	8009c88 <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10e      	bne.n	800486e <menu+0x328a>
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <menu+0x3300>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f083 0301 	eor.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <menu+0x328a>
			eepromData[33] = dilSecim;
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <menu+0x32f0>)
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <menu+0x330c>)
 8004864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <menu+0x3324>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <menu+0x3328>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b1f      	cmp	r3, #31
 8004874:	f040 80b7 	bne.w	80049e6 <menu+0x3402>
		calismaSayModu = 0;
 8004878:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <menu+0x3308>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <menu+0x333c>)
 8004880:	2101      	movs	r1, #1
 8004882:	2001      	movs	r0, #1
 8004884:	f7fb ff98 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <menu+0x3340>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d113      	bne.n	80048b8 <menu+0x32d4>
			if(dilSecim == 0) {
 8004890:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <menu+0x32f0>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <menu+0x3344>)
 800489a:	2101      	movs	r1, #1
 800489c:	2002      	movs	r0, #2
 800489e:	f7fb ff8b 	bl	80007b8 <lcd_print>
 80048a2:	e050      	b.n	8004946 <menu+0x3362>
			} else if(dilSecim == 1) {
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <menu+0x32f0>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d14c      	bne.n	8004946 <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <menu+0x3348>)
 80048ae:	2101      	movs	r1, #1
 80048b0:	2002      	movs	r0, #2
 80048b2:	f7fb ff81 	bl	80007b8 <lcd_print>
 80048b6:	e046      	b.n	8004946 <menu+0x3362>
			}
		} else if(iotMode == 1) {
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <menu+0x3340>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d142      	bne.n	8004946 <menu+0x3362>
			if(dilSecim == 0){
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <menu+0x32f0>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d135      	bne.n	8004934 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <menu+0x334c>)
 80048ca:	2101      	movs	r1, #1
 80048cc:	2002      	movs	r0, #2
 80048ce:	f7fb ff73 	bl	80007b8 <lcd_print>
 80048d2:	e038      	b.n	8004946 <menu+0x3362>
 80048d4:	20000c5a 	.word	0x20000c5a
 80048d8:	0800e2cc 	.word	0x0800e2cc
 80048dc:	0800e300 	.word	0x0800e300
 80048e0:	40010800 	.word	0x40010800
 80048e4:	20000c68 	.word	0x20000c68
 80048e8:	20000c7a 	.word	0x20000c7a
 80048ec:	20000c59 	.word	0x20000c59
 80048f0:	20000b28 	.word	0x20000b28
 80048f4:	20000c38 	.word	0x20000c38
 80048f8:	200009b2 	.word	0x200009b2
 80048fc:	200009b1 	.word	0x200009b1
 8004900:	20000c37 	.word	0x20000c37
 8004904:	20000c36 	.word	0x20000c36
 8004908:	20000c65 	.word	0x20000c65
 800490c:	20000c39 	.word	0x20000c39
 8004910:	0800e314 	.word	0x0800e314
 8004914:	0800e328 	.word	0x0800e328
 8004918:	0800e33c 	.word	0x0800e33c
 800491c:	0800e350 	.word	0x0800e350
 8004920:	0800e364 	.word	0x0800e364
 8004924:	20000c58 	.word	0x20000c58
 8004928:	0800dbbc 	.word	0x0800dbbc
 800492c:	0800dbd0 	.word	0x0800dbd0
 8004930:	0800dc1c 	.word	0x0800dc1c
			} else if(dilSecim == 1) {
 8004934:	4bae      	ldr	r3, [pc, #696]	; (8004bf0 <menu+0x360c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d104      	bne.n	8004946 <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 800493c:	4aad      	ldr	r2, [pc, #692]	; (8004bf4 <menu+0x3610>)
 800493e:	2101      	movs	r1, #1
 8004940:	2002      	movs	r0, #2
 8004942:	f7fb ff39 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004946:	2102      	movs	r1, #2
 8004948:	48ab      	ldr	r0, [pc, #684]	; (8004bf8 <menu+0x3614>)
 800494a:	f005 f99d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d115      	bne.n	8004980 <menu+0x339c>
 8004954:	4ba9      	ldr	r3, [pc, #676]	; (8004bfc <menu+0x3618>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f083 0301 	eor.w	r3, r3, #1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00e      	beq.n	8004980 <menu+0x339c>
			iotMode = iotMode + 1;
 8004962:	4ba7      	ldr	r3, [pc, #668]	; (8004c00 <menu+0x361c>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4ba5      	ldr	r3, [pc, #660]	; (8004c00 <menu+0x361c>)
 800496c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800496e:	4ba4      	ldr	r3, [pc, #656]	; (8004c00 <menu+0x361c>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d902      	bls.n	800497c <menu+0x3398>
				iotMode = 0;
 8004976:	4ba2      	ldr	r3, [pc, #648]	; (8004c00 <menu+0x361c>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800497c:	f001 fba8 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004980:	2104      	movs	r1, #4
 8004982:	489d      	ldr	r0, [pc, #628]	; (8004bf8 <menu+0x3614>)
 8004984:	f005 f980 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d115      	bne.n	80049ba <menu+0x33d6>
 800498e:	4b9b      	ldr	r3, [pc, #620]	; (8004bfc <menu+0x3618>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f083 0301 	eor.w	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <menu+0x33d6>
			iotMode = iotMode - 1;
 800499c:	4b98      	ldr	r3, [pc, #608]	; (8004c00 <menu+0x361c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	4b96      	ldr	r3, [pc, #600]	; (8004c00 <menu+0x361c>)
 80049a6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80049a8:	4b95      	ldr	r3, [pc, #596]	; (8004c00 <menu+0x361c>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <menu+0x33d2>
		   		iotMode = 1;
 80049b0:	4b93      	ldr	r3, [pc, #588]	; (8004c00 <menu+0x361c>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80049b6:	f001 fb8b 	bl	80060d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ba:	2108      	movs	r1, #8
 80049bc:	488e      	ldr	r0, [pc, #568]	; (8004bf8 <menu+0x3614>)
 80049be:	f005 f963 	bl	8009c88 <HAL_GPIO_ReadPin>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10e      	bne.n	80049e6 <menu+0x3402>
 80049c8:	4b8c      	ldr	r3, [pc, #560]	; (8004bfc <menu+0x3618>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f083 0301 	eor.w	r3, r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <menu+0x3402>
			eepromData[37] = iotMode;
 80049d6:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <menu+0x361c>)
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	4b8a      	ldr	r3, [pc, #552]	; (8004c04 <menu+0x3620>)
 80049dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 80049e0:	4b89      	ldr	r3, [pc, #548]	; (8004c08 <menu+0x3624>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049e6:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <menu+0x3628>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d145      	bne.n	8004a7a <menu+0x3496>
		calismaSayModu = 0;
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <menu+0x362c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80049f4:	4a87      	ldr	r2, [pc, #540]	; (8004c14 <menu+0x3630>)
 80049f6:	2101      	movs	r1, #1
 80049f8:	2001      	movs	r0, #1
 80049fa:	f7fb fedd 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 80049fe:	4a86      	ldr	r2, [pc, #536]	; (8004c18 <menu+0x3634>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	2002      	movs	r0, #2
 8004a04:	f7fb fed8 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8004a08:	4883      	ldr	r0, [pc, #524]	; (8004c18 <menu+0x3634>)
 8004a0a:	f7fb fc0b 	bl	8000224 <strlen>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	4a81      	ldr	r2, [pc, #516]	; (8004c1c <menu+0x3638>)
 8004a18:	4619      	mov	r1, r3
 8004a1a:	2002      	movs	r0, #2
 8004a1c:	f7fb fecc 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a20:	2102      	movs	r1, #2
 8004a22:	4875      	ldr	r0, [pc, #468]	; (8004bf8 <menu+0x3614>)
 8004a24:	f005 f930 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d125      	bne.n	8004a7a <menu+0x3496>
 8004a2e:	2104      	movs	r1, #4
 8004a30:	4871      	ldr	r0, [pc, #452]	; (8004bf8 <menu+0x3614>)
 8004a32:	f005 f929 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d11e      	bne.n	8004a7a <menu+0x3496>
 8004a3c:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <menu+0x3618>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f083 0301 	eor.w	r3, r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d017      	beq.n	8004a7a <menu+0x3496>
			takeMachineID(0, &hi2c1);
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f7fc f986 	bl	8000d60 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004a54:	4a70      	ldr	r2, [pc, #448]	; (8004c18 <menu+0x3634>)
 8004a56:	2101      	movs	r1, #1
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f7fb fead 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004a5e:	486e      	ldr	r0, [pc, #440]	; (8004c18 <menu+0x3634>)
 8004a60:	f7fb fbe0 	bl	8000224 <strlen>
 8004a64:	4603      	mov	r3, r0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4a6b      	ldr	r2, [pc, #428]	; (8004c1c <menu+0x3638>)
 8004a6e:	4619      	mov	r1, r3
 8004a70:	2002      	movs	r0, #2
 8004a72:	f7fb fea1 	bl	80007b8 <lcd_print>

			bekle();
 8004a76:	f001 fb2b 	bl	80060d0 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004a7a:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <menu+0x3628>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b21      	cmp	r3, #33	; 0x21
 8004a80:	d14f      	bne.n	8004b22 <menu+0x353e>
		calismaSayModu = 0;
 8004a82:	4b63      	ldr	r3, [pc, #396]	; (8004c10 <menu+0x362c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004a88:	4a65      	ldr	r2, [pc, #404]	; (8004c20 <menu+0x363c>)
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f7fb fe93 	bl	80007b8 <lcd_print>

		if(strlen(wifiSSID) <=16) {
 8004a92:	4864      	ldr	r0, [pc, #400]	; (8004c24 <menu+0x3640>)
 8004a94:	f7fb fbc6 	bl	8000224 <strlen>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d811      	bhi.n	8004ac2 <menu+0x34de>
			lcd_print(2, 1, wifiSSID);
 8004a9e:	4a61      	ldr	r2, [pc, #388]	; (8004c24 <menu+0x3640>)
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	f7fb fe88 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004aa8:	485e      	ldr	r0, [pc, #376]	; (8004c24 <menu+0x3640>)
 8004aaa:	f7fb fbbb 	bl	8000224 <strlen>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	4a59      	ldr	r2, [pc, #356]	; (8004c1c <menu+0x3638>)
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2002      	movs	r0, #2
 8004abc:	f7fb fe7c 	bl	80007b8 <lcd_print>
 8004ac0:	e004      	b.n	8004acc <menu+0x34e8>
		} else {
			slideText(wifiSSID, 1, 2);
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4857      	ldr	r0, [pc, #348]	; (8004c24 <menu+0x3640>)
 8004ac8:	f7fc fd56 	bl	8001578 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004acc:	2102      	movs	r1, #2
 8004ace:	484a      	ldr	r0, [pc, #296]	; (8004bf8 <menu+0x3614>)
 8004ad0:	f005 f8da 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d123      	bne.n	8004b22 <menu+0x353e>
 8004ada:	2104      	movs	r1, #4
 8004adc:	4846      	ldr	r0, [pc, #280]	; (8004bf8 <menu+0x3614>)
 8004ade:	f005 f8d3 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d11c      	bne.n	8004b22 <menu+0x353e>
 8004ae8:	4b44      	ldr	r3, [pc, #272]	; (8004bfc <menu+0x3618>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f083 0301 	eor.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d015      	beq.n	8004b22 <menu+0x353e>
			takeWifiSSID(0);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fc fa46 	bl	8000f88 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8004afc:	4a49      	ldr	r2, [pc, #292]	; (8004c24 <menu+0x3640>)
 8004afe:	2101      	movs	r1, #1
 8004b00:	2002      	movs	r0, #2
 8004b02:	f7fb fe59 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b06:	4847      	ldr	r0, [pc, #284]	; (8004c24 <menu+0x3640>)
 8004b08:	f7fb fb8c 	bl	8000224 <strlen>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3301      	adds	r3, #1
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	4a41      	ldr	r2, [pc, #260]	; (8004c1c <menu+0x3638>)
 8004b16:	4619      	mov	r1, r3
 8004b18:	2002      	movs	r0, #2
 8004b1a:	f7fb fe4d 	bl	80007b8 <lcd_print>

			bekle();
 8004b1e:	f001 fad7 	bl	80060d0 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004b22:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <menu+0x3628>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b22      	cmp	r3, #34	; 0x22
 8004b28:	d14f      	bne.n	8004bca <menu+0x35e6>
		calismaSayModu = 0;
 8004b2a:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <menu+0x362c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004b30:	4a3d      	ldr	r2, [pc, #244]	; (8004c28 <menu+0x3644>)
 8004b32:	2101      	movs	r1, #1
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7fb fe3f 	bl	80007b8 <lcd_print>

		if(strlen(wifiPass) <= 16) {
 8004b3a:	483c      	ldr	r0, [pc, #240]	; (8004c2c <menu+0x3648>)
 8004b3c:	f7fb fb72 	bl	8000224 <strlen>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d811      	bhi.n	8004b6a <menu+0x3586>
			lcd_print(2, 1, wifiPass);
 8004b46:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <menu+0x3648>)
 8004b48:	2101      	movs	r1, #1
 8004b4a:	2002      	movs	r0, #2
 8004b4c:	f7fb fe34 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b50:	4836      	ldr	r0, [pc, #216]	; (8004c2c <menu+0x3648>)
 8004b52:	f7fb fb67 	bl	8000224 <strlen>
 8004b56:	4603      	mov	r3, r0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4a2f      	ldr	r2, [pc, #188]	; (8004c1c <menu+0x3638>)
 8004b60:	4619      	mov	r1, r3
 8004b62:	2002      	movs	r0, #2
 8004b64:	f7fb fe28 	bl	80007b8 <lcd_print>
 8004b68:	e004      	b.n	8004b74 <menu+0x3590>
		} else {
			slideText(wifiPass, 1, 2);
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	482f      	ldr	r0, [pc, #188]	; (8004c2c <menu+0x3648>)
 8004b70:	f7fc fd02 	bl	8001578 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b74:	2102      	movs	r1, #2
 8004b76:	4820      	ldr	r0, [pc, #128]	; (8004bf8 <menu+0x3614>)
 8004b78:	f005 f886 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d123      	bne.n	8004bca <menu+0x35e6>
 8004b82:	2104      	movs	r1, #4
 8004b84:	481c      	ldr	r0, [pc, #112]	; (8004bf8 <menu+0x3614>)
 8004b86:	f005 f87f 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d11c      	bne.n	8004bca <menu+0x35e6>
 8004b90:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <menu+0x3618>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f083 0301 	eor.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d015      	beq.n	8004bca <menu+0x35e6>
			takeWifiPass(0);
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f7fc fb6e 	bl	8001280 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <menu+0x3648>)
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	2002      	movs	r0, #2
 8004baa:	f7fb fe05 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004bae:	481f      	ldr	r0, [pc, #124]	; (8004c2c <menu+0x3648>)
 8004bb0:	f7fb fb38 	bl	8000224 <strlen>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <menu+0x3638>)
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	2002      	movs	r0, #2
 8004bc2:	f7fb fdf9 	bl	80007b8 <lcd_print>

			bekle();
 8004bc6:	f001 fa83 	bl	80060d0 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <menu+0x3628>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b23      	cmp	r3, #35	; 0x23
 8004bd0:	d152      	bne.n	8004c78 <menu+0x3694>
		if(dilSecim == 0) {
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <menu+0x360c>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d12e      	bne.n	8004c38 <menu+0x3654>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <menu+0x364c>)
 8004bdc:	2101      	movs	r1, #1
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7fb fdea 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <menu+0x3650>)
 8004be6:	2101      	movs	r1, #1
 8004be8:	2002      	movs	r0, #2
 8004bea:	f7fb fde5 	bl	80007b8 <lcd_print>
 8004bee:	e031      	b.n	8004c54 <menu+0x3670>
 8004bf0:	20000c5a 	.word	0x20000c5a
 8004bf4:	0800dc30 	.word	0x0800dc30
 8004bf8:	40010800 	.word	0x40010800
 8004bfc:	20000c68 	.word	0x20000c68
 8004c00:	20000c58 	.word	0x20000c58
 8004c04:	20000b28 	.word	0x20000b28
 8004c08:	20000c65 	.word	0x20000c65
 8004c0c:	20000c39 	.word	0x20000c39
 8004c10:	20000c59 	.word	0x20000c59
 8004c14:	0800e378 	.word	0x0800e378
 8004c18:	20000be4 	.word	0x20000be4
 8004c1c:	2000094c 	.word	0x2000094c
 8004c20:	0800e38c 	.word	0x0800e38c
 8004c24:	20000bf0 	.word	0x20000bf0
 8004c28:	0800e3a0 	.word	0x0800e3a0
 8004c2c:	20000c14 	.word	0x20000c14
 8004c30:	0800e3b4 	.word	0x0800e3b4
 8004c34:	0800e3c8 	.word	0x0800e3c8
		} else if(dilSecim == 1) {
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <menu+0x369c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d109      	bne.n	8004c54 <menu+0x3670>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <menu+0x36a0>)
 8004c42:	2101      	movs	r1, #1
 8004c44:	2001      	movs	r0, #1
 8004c46:	f7fb fdb7 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004c4a:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <menu+0x36a4>)
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	2002      	movs	r0, #2
 8004c50:	f7fb fdb2 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004c54:	2108      	movs	r1, #8
 8004c56:	480d      	ldr	r0, [pc, #52]	; (8004c8c <menu+0x36a8>)
 8004c58:	f005 f816 	bl	8009c88 <HAL_GPIO_ReadPin>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10a      	bne.n	8004c78 <menu+0x3694>
			menuGiris = 0;
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <menu+0x36ac>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004c68:	f7fb fdd2 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c70:	f004 fa3a 	bl	80090e8 <HAL_Delay>
			NVIC_SystemReset();
 8004c74:	f7fb fe38 	bl	80008e8 <__NVIC_SystemReset>
		}
	}
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000c5a 	.word	0x20000c5a
 8004c84:	0800e3dc 	.word	0x0800e3dc
 8004c88:	0800e3f0 	.word	0x0800e3f0
 8004c8c:	40010800 	.word	0x40010800
 8004c90:	20000c56 	.word	0x20000c56

08004c94 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004c9e:	48a9      	ldr	r0, [pc, #676]	; (8004f44 <loadMenuTexts+0x2b0>)
 8004ca0:	f7fb fe38 	bl	8000914 <copyText>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4aa8      	ldr	r2, [pc, #672]	; (8004f48 <loadMenuTexts+0x2b4>)
 8004ca8:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004caa:	48a8      	ldr	r0, [pc, #672]	; (8004f4c <loadMenuTexts+0x2b8>)
 8004cac:	f7fb fe32 	bl	8000914 <copyText>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4aa7      	ldr	r2, [pc, #668]	; (8004f50 <loadMenuTexts+0x2bc>)
 8004cb4:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004cb6:	48a7      	ldr	r0, [pc, #668]	; (8004f54 <loadMenuTexts+0x2c0>)
 8004cb8:	f7fb fe2c 	bl	8000914 <copyText>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4aa6      	ldr	r2, [pc, #664]	; (8004f58 <loadMenuTexts+0x2c4>)
 8004cc0:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004cc2:	48a6      	ldr	r0, [pc, #664]	; (8004f5c <loadMenuTexts+0x2c8>)
 8004cc4:	f7fb fe26 	bl	8000914 <copyText>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4aa5      	ldr	r2, [pc, #660]	; (8004f60 <loadMenuTexts+0x2cc>)
 8004ccc:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004cce:	48a5      	ldr	r0, [pc, #660]	; (8004f64 <loadMenuTexts+0x2d0>)
 8004cd0:	f7fb fe20 	bl	8000914 <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4aa4      	ldr	r2, [pc, #656]	; (8004f68 <loadMenuTexts+0x2d4>)
 8004cd8:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004cda:	48a4      	ldr	r0, [pc, #656]	; (8004f6c <loadMenuTexts+0x2d8>)
 8004cdc:	f7fb fe1a 	bl	8000914 <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4aa3      	ldr	r2, [pc, #652]	; (8004f70 <loadMenuTexts+0x2dc>)
 8004ce4:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004ce6:	48a3      	ldr	r0, [pc, #652]	; (8004f74 <loadMenuTexts+0x2e0>)
 8004ce8:	f7fb fe14 	bl	8000914 <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4aa2      	ldr	r2, [pc, #648]	; (8004f78 <loadMenuTexts+0x2e4>)
 8004cf0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 82d1 	bne.w	800529c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004cfa:	48a0      	ldr	r0, [pc, #640]	; (8004f7c <loadMenuTexts+0x2e8>)
 8004cfc:	f7fb fe0a 	bl	8000914 <copyText>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4a9f      	ldr	r2, [pc, #636]	; (8004f80 <loadMenuTexts+0x2ec>)
 8004d04:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004d06:	489f      	ldr	r0, [pc, #636]	; (8004f84 <loadMenuTexts+0x2f0>)
 8004d08:	f7fb fe04 	bl	8000914 <copyText>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a9e      	ldr	r2, [pc, #632]	; (8004f88 <loadMenuTexts+0x2f4>)
 8004d10:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004d12:	489e      	ldr	r0, [pc, #632]	; (8004f8c <loadMenuTexts+0x2f8>)
 8004d14:	f7fb fdfe 	bl	8000914 <copyText>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a9d      	ldr	r2, [pc, #628]	; (8004f90 <loadMenuTexts+0x2fc>)
 8004d1c:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004d1e:	489d      	ldr	r0, [pc, #628]	; (8004f94 <loadMenuTexts+0x300>)
 8004d20:	f7fb fdf8 	bl	8000914 <copyText>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4a9c      	ldr	r2, [pc, #624]	; (8004f98 <loadMenuTexts+0x304>)
 8004d28:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004d2a:	489c      	ldr	r0, [pc, #624]	; (8004f9c <loadMenuTexts+0x308>)
 8004d2c:	f7fb fdf2 	bl	8000914 <copyText>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a9b      	ldr	r2, [pc, #620]	; (8004fa0 <loadMenuTexts+0x30c>)
 8004d34:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004d36:	489b      	ldr	r0, [pc, #620]	; (8004fa4 <loadMenuTexts+0x310>)
 8004d38:	f7fb fdec 	bl	8000914 <copyText>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a9a      	ldr	r2, [pc, #616]	; (8004fa8 <loadMenuTexts+0x314>)
 8004d40:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004d42:	489a      	ldr	r0, [pc, #616]	; (8004fac <loadMenuTexts+0x318>)
 8004d44:	f7fb fde6 	bl	8000914 <copyText>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a99      	ldr	r2, [pc, #612]	; (8004fb0 <loadMenuTexts+0x31c>)
 8004d4c:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004d4e:	4899      	ldr	r0, [pc, #612]	; (8004fb4 <loadMenuTexts+0x320>)
 8004d50:	f7fb fde0 	bl	8000914 <copyText>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4a98      	ldr	r2, [pc, #608]	; (8004fb8 <loadMenuTexts+0x324>)
 8004d58:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004d5a:	4898      	ldr	r0, [pc, #608]	; (8004fbc <loadMenuTexts+0x328>)
 8004d5c:	f7fb fdda 	bl	8000914 <copyText>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a97      	ldr	r2, [pc, #604]	; (8004fc0 <loadMenuTexts+0x32c>)
 8004d64:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004d66:	4897      	ldr	r0, [pc, #604]	; (8004fc4 <loadMenuTexts+0x330>)
 8004d68:	f7fb fdd4 	bl	8000914 <copyText>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a96      	ldr	r2, [pc, #600]	; (8004fc8 <loadMenuTexts+0x334>)
 8004d70:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004d72:	4896      	ldr	r0, [pc, #600]	; (8004fcc <loadMenuTexts+0x338>)
 8004d74:	f7fb fdce 	bl	8000914 <copyText>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a95      	ldr	r2, [pc, #596]	; (8004fd0 <loadMenuTexts+0x33c>)
 8004d7c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004d7e:	4895      	ldr	r0, [pc, #596]	; (8004fd4 <loadMenuTexts+0x340>)
 8004d80:	f7fb fdc8 	bl	8000914 <copyText>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4a94      	ldr	r2, [pc, #592]	; (8004fd8 <loadMenuTexts+0x344>)
 8004d88:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004d8a:	4894      	ldr	r0, [pc, #592]	; (8004fdc <loadMenuTexts+0x348>)
 8004d8c:	f7fb fdc2 	bl	8000914 <copyText>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a93      	ldr	r2, [pc, #588]	; (8004fe0 <loadMenuTexts+0x34c>)
 8004d94:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004d96:	4893      	ldr	r0, [pc, #588]	; (8004fe4 <loadMenuTexts+0x350>)
 8004d98:	f7fb fdbc 	bl	8000914 <copyText>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a92      	ldr	r2, [pc, #584]	; (8004fe8 <loadMenuTexts+0x354>)
 8004da0:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004da2:	4892      	ldr	r0, [pc, #584]	; (8004fec <loadMenuTexts+0x358>)
 8004da4:	f7fb fdb6 	bl	8000914 <copyText>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a91      	ldr	r2, [pc, #580]	; (8004ff0 <loadMenuTexts+0x35c>)
 8004dac:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004dae:	4891      	ldr	r0, [pc, #580]	; (8004ff4 <loadMenuTexts+0x360>)
 8004db0:	f7fb fdb0 	bl	8000914 <copyText>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a90      	ldr	r2, [pc, #576]	; (8004ff8 <loadMenuTexts+0x364>)
 8004db8:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004dba:	4890      	ldr	r0, [pc, #576]	; (8004ffc <loadMenuTexts+0x368>)
 8004dbc:	f7fb fdaa 	bl	8000914 <copyText>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a8f      	ldr	r2, [pc, #572]	; (8005000 <loadMenuTexts+0x36c>)
 8004dc4:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004dc6:	488f      	ldr	r0, [pc, #572]	; (8005004 <loadMenuTexts+0x370>)
 8004dc8:	f7fb fda4 	bl	8000914 <copyText>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a8e      	ldr	r2, [pc, #568]	; (8005008 <loadMenuTexts+0x374>)
 8004dd0:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004dd2:	488e      	ldr	r0, [pc, #568]	; (800500c <loadMenuTexts+0x378>)
 8004dd4:	f7fb fd9e 	bl	8000914 <copyText>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a8d      	ldr	r2, [pc, #564]	; (8005010 <loadMenuTexts+0x37c>)
 8004ddc:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004dde:	488d      	ldr	r0, [pc, #564]	; (8005014 <loadMenuTexts+0x380>)
 8004de0:	f7fb fd98 	bl	8000914 <copyText>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a8c      	ldr	r2, [pc, #560]	; (8005018 <loadMenuTexts+0x384>)
 8004de8:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004dea:	488c      	ldr	r0, [pc, #560]	; (800501c <loadMenuTexts+0x388>)
 8004dec:	f7fb fd92 	bl	8000914 <copyText>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4a8b      	ldr	r2, [pc, #556]	; (8005020 <loadMenuTexts+0x38c>)
 8004df4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004df6:	488b      	ldr	r0, [pc, #556]	; (8005024 <loadMenuTexts+0x390>)
 8004df8:	f7fb fd8c 	bl	8000914 <copyText>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a8a      	ldr	r2, [pc, #552]	; (8005028 <loadMenuTexts+0x394>)
 8004e00:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004e02:	488a      	ldr	r0, [pc, #552]	; (800502c <loadMenuTexts+0x398>)
 8004e04:	f7fb fd86 	bl	8000914 <copyText>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a89      	ldr	r2, [pc, #548]	; (8005030 <loadMenuTexts+0x39c>)
 8004e0c:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004e0e:	4889      	ldr	r0, [pc, #548]	; (8005034 <loadMenuTexts+0x3a0>)
 8004e10:	f7fb fd80 	bl	8000914 <copyText>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a88      	ldr	r2, [pc, #544]	; (8005038 <loadMenuTexts+0x3a4>)
 8004e18:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004e1a:	4888      	ldr	r0, [pc, #544]	; (800503c <loadMenuTexts+0x3a8>)
 8004e1c:	f7fb fd7a 	bl	8000914 <copyText>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a87      	ldr	r2, [pc, #540]	; (8005040 <loadMenuTexts+0x3ac>)
 8004e24:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004e26:	4887      	ldr	r0, [pc, #540]	; (8005044 <loadMenuTexts+0x3b0>)
 8004e28:	f7fb fd74 	bl	8000914 <copyText>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a86      	ldr	r2, [pc, #536]	; (8005048 <loadMenuTexts+0x3b4>)
 8004e30:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004e32:	4886      	ldr	r0, [pc, #536]	; (800504c <loadMenuTexts+0x3b8>)
 8004e34:	f7fb fd6e 	bl	8000914 <copyText>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a85      	ldr	r2, [pc, #532]	; (8005050 <loadMenuTexts+0x3bc>)
 8004e3c:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004e3e:	4885      	ldr	r0, [pc, #532]	; (8005054 <loadMenuTexts+0x3c0>)
 8004e40:	f7fb fd68 	bl	8000914 <copyText>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a84      	ldr	r2, [pc, #528]	; (8005058 <loadMenuTexts+0x3c4>)
 8004e48:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004e4a:	4884      	ldr	r0, [pc, #528]	; (800505c <loadMenuTexts+0x3c8>)
 8004e4c:	f7fb fd62 	bl	8000914 <copyText>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a83      	ldr	r2, [pc, #524]	; (8005060 <loadMenuTexts+0x3cc>)
 8004e54:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004e56:	4883      	ldr	r0, [pc, #524]	; (8005064 <loadMenuTexts+0x3d0>)
 8004e58:	f7fb fd5c 	bl	8000914 <copyText>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a82      	ldr	r2, [pc, #520]	; (8005068 <loadMenuTexts+0x3d4>)
 8004e60:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004e62:	4882      	ldr	r0, [pc, #520]	; (800506c <loadMenuTexts+0x3d8>)
 8004e64:	f7fb fd56 	bl	8000914 <copyText>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a81      	ldr	r2, [pc, #516]	; (8005070 <loadMenuTexts+0x3dc>)
 8004e6c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004e6e:	4881      	ldr	r0, [pc, #516]	; (8005074 <loadMenuTexts+0x3e0>)
 8004e70:	f7fb fd50 	bl	8000914 <copyText>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a80      	ldr	r2, [pc, #512]	; (8005078 <loadMenuTexts+0x3e4>)
 8004e78:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004e7a:	4880      	ldr	r0, [pc, #512]	; (800507c <loadMenuTexts+0x3e8>)
 8004e7c:	f7fb fd4a 	bl	8000914 <copyText>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4a7f      	ldr	r2, [pc, #508]	; (8005080 <loadMenuTexts+0x3ec>)
 8004e84:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004e86:	487f      	ldr	r0, [pc, #508]	; (8005084 <loadMenuTexts+0x3f0>)
 8004e88:	f7fb fd44 	bl	8000914 <copyText>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a7e      	ldr	r2, [pc, #504]	; (8005088 <loadMenuTexts+0x3f4>)
 8004e90:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004e92:	487e      	ldr	r0, [pc, #504]	; (800508c <loadMenuTexts+0x3f8>)
 8004e94:	f7fb fd3e 	bl	8000914 <copyText>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4a7d      	ldr	r2, [pc, #500]	; (8005090 <loadMenuTexts+0x3fc>)
 8004e9c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004e9e:	487d      	ldr	r0, [pc, #500]	; (8005094 <loadMenuTexts+0x400>)
 8004ea0:	f7fb fd38 	bl	8000914 <copyText>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <loadMenuTexts+0x404>)
 8004ea8:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004eaa:	487c      	ldr	r0, [pc, #496]	; (800509c <loadMenuTexts+0x408>)
 8004eac:	f7fb fd32 	bl	8000914 <copyText>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a7b      	ldr	r2, [pc, #492]	; (80050a0 <loadMenuTexts+0x40c>)
 8004eb4:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004eb6:	487b      	ldr	r0, [pc, #492]	; (80050a4 <loadMenuTexts+0x410>)
 8004eb8:	f7fb fd2c 	bl	8000914 <copyText>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4a7a      	ldr	r2, [pc, #488]	; (80050a8 <loadMenuTexts+0x414>)
 8004ec0:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004ec2:	487a      	ldr	r0, [pc, #488]	; (80050ac <loadMenuTexts+0x418>)
 8004ec4:	f7fb fd26 	bl	8000914 <copyText>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4a79      	ldr	r2, [pc, #484]	; (80050b0 <loadMenuTexts+0x41c>)
 8004ecc:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004ece:	4879      	ldr	r0, [pc, #484]	; (80050b4 <loadMenuTexts+0x420>)
 8004ed0:	f7fb fd20 	bl	8000914 <copyText>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4a78      	ldr	r2, [pc, #480]	; (80050b8 <loadMenuTexts+0x424>)
 8004ed8:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004eda:	4878      	ldr	r0, [pc, #480]	; (80050bc <loadMenuTexts+0x428>)
 8004edc:	f7fb fd1a 	bl	8000914 <copyText>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4a77      	ldr	r2, [pc, #476]	; (80050c0 <loadMenuTexts+0x42c>)
 8004ee4:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004ee6:	4877      	ldr	r0, [pc, #476]	; (80050c4 <loadMenuTexts+0x430>)
 8004ee8:	f7fb fd14 	bl	8000914 <copyText>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a76      	ldr	r2, [pc, #472]	; (80050c8 <loadMenuTexts+0x434>)
 8004ef0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004ef2:	4876      	ldr	r0, [pc, #472]	; (80050cc <loadMenuTexts+0x438>)
 8004ef4:	f7fb fd0e 	bl	8000914 <copyText>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <loadMenuTexts+0x43c>)
 8004efc:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004efe:	4875      	ldr	r0, [pc, #468]	; (80050d4 <loadMenuTexts+0x440>)
 8004f00:	f7fb fd08 	bl	8000914 <copyText>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a74      	ldr	r2, [pc, #464]	; (80050d8 <loadMenuTexts+0x444>)
 8004f08:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004f0a:	4874      	ldr	r0, [pc, #464]	; (80050dc <loadMenuTexts+0x448>)
 8004f0c:	f7fb fd02 	bl	8000914 <copyText>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a73      	ldr	r2, [pc, #460]	; (80050e0 <loadMenuTexts+0x44c>)
 8004f14:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004f16:	4873      	ldr	r0, [pc, #460]	; (80050e4 <loadMenuTexts+0x450>)
 8004f18:	f7fb fcfc 	bl	8000914 <copyText>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4a72      	ldr	r2, [pc, #456]	; (80050e8 <loadMenuTexts+0x454>)
 8004f20:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004f22:	4872      	ldr	r0, [pc, #456]	; (80050ec <loadMenuTexts+0x458>)
 8004f24:	f7fb fcf6 	bl	8000914 <copyText>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4a71      	ldr	r2, [pc, #452]	; (80050f0 <loadMenuTexts+0x45c>)
 8004f2c:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004f2e:	4871      	ldr	r0, [pc, #452]	; (80050f4 <loadMenuTexts+0x460>)
 8004f30:	f7fb fcf0 	bl	8000914 <copyText>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a70      	ldr	r2, [pc, #448]	; (80050f8 <loadMenuTexts+0x464>)
 8004f38:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004f3a:	4870      	ldr	r0, [pc, #448]	; (80050fc <loadMenuTexts+0x468>)
 8004f3c:	f7fb fcea 	bl	8000914 <copyText>
 8004f40:	4603      	mov	r3, r0
 8004f42:	e0dd      	b.n	8005100 <loadMenuTexts+0x46c>
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000ca0 	.word	0x20000ca0
 8004f4c:	20000010 	.word	0x20000010
 8004f50:	20000ca4 	.word	0x20000ca4
 8004f54:	20000020 	.word	0x20000020
 8004f58:	20000cfc 	.word	0x20000cfc
 8004f5c:	20000030 	.word	0x20000030
 8004f60:	20000d2c 	.word	0x20000d2c
 8004f64:	20000040 	.word	0x20000040
 8004f68:	20000d34 	.word	0x20000d34
 8004f6c:	20000050 	.word	0x20000050
 8004f70:	20000dac 	.word	0x20000dac
 8004f74:	20000060 	.word	0x20000060
 8004f78:	20000db0 	.word	0x20000db0
 8004f7c:	20000070 	.word	0x20000070
 8004f80:	20000ca8 	.word	0x20000ca8
 8004f84:	20000080 	.word	0x20000080
 8004f88:	20000cac 	.word	0x20000cac
 8004f8c:	20000090 	.word	0x20000090
 8004f90:	20000cb0 	.word	0x20000cb0
 8004f94:	200000a0 	.word	0x200000a0
 8004f98:	20000cb4 	.word	0x20000cb4
 8004f9c:	200000b0 	.word	0x200000b0
 8004fa0:	20000cb8 	.word	0x20000cb8
 8004fa4:	200000c0 	.word	0x200000c0
 8004fa8:	20000cbc 	.word	0x20000cbc
 8004fac:	200000d0 	.word	0x200000d0
 8004fb0:	20000cc0 	.word	0x20000cc0
 8004fb4:	200000e0 	.word	0x200000e0
 8004fb8:	20000cc4 	.word	0x20000cc4
 8004fbc:	200000f0 	.word	0x200000f0
 8004fc0:	20000cc8 	.word	0x20000cc8
 8004fc4:	20000100 	.word	0x20000100
 8004fc8:	20000ccc 	.word	0x20000ccc
 8004fcc:	20000110 	.word	0x20000110
 8004fd0:	20000cd0 	.word	0x20000cd0
 8004fd4:	20000120 	.word	0x20000120
 8004fd8:	20000cd4 	.word	0x20000cd4
 8004fdc:	20000130 	.word	0x20000130
 8004fe0:	20000cd8 	.word	0x20000cd8
 8004fe4:	20000140 	.word	0x20000140
 8004fe8:	20000cdc 	.word	0x20000cdc
 8004fec:	20000150 	.word	0x20000150
 8004ff0:	20000ce0 	.word	0x20000ce0
 8004ff4:	20000160 	.word	0x20000160
 8004ff8:	20000ce4 	.word	0x20000ce4
 8004ffc:	20000170 	.word	0x20000170
 8005000:	20000ce8 	.word	0x20000ce8
 8005004:	20000180 	.word	0x20000180
 8005008:	20000cec 	.word	0x20000cec
 800500c:	20000190 	.word	0x20000190
 8005010:	20000cf0 	.word	0x20000cf0
 8005014:	200001a0 	.word	0x200001a0
 8005018:	20000cf4 	.word	0x20000cf4
 800501c:	200001b0 	.word	0x200001b0
 8005020:	20000cf8 	.word	0x20000cf8
 8005024:	200001c0 	.word	0x200001c0
 8005028:	20000d00 	.word	0x20000d00
 800502c:	200001d0 	.word	0x200001d0
 8005030:	20000d04 	.word	0x20000d04
 8005034:	200001e0 	.word	0x200001e0
 8005038:	20000d08 	.word	0x20000d08
 800503c:	200001f0 	.word	0x200001f0
 8005040:	20000d0c 	.word	0x20000d0c
 8005044:	20000200 	.word	0x20000200
 8005048:	20000d10 	.word	0x20000d10
 800504c:	20000210 	.word	0x20000210
 8005050:	20000d14 	.word	0x20000d14
 8005054:	20000220 	.word	0x20000220
 8005058:	20000d18 	.word	0x20000d18
 800505c:	20000230 	.word	0x20000230
 8005060:	20000d1c 	.word	0x20000d1c
 8005064:	20000240 	.word	0x20000240
 8005068:	20000d20 	.word	0x20000d20
 800506c:	20000250 	.word	0x20000250
 8005070:	20000d24 	.word	0x20000d24
 8005074:	20000260 	.word	0x20000260
 8005078:	20000d28 	.word	0x20000d28
 800507c:	20000270 	.word	0x20000270
 8005080:	20000d30 	.word	0x20000d30
 8005084:	20000280 	.word	0x20000280
 8005088:	20000d38 	.word	0x20000d38
 800508c:	20000290 	.word	0x20000290
 8005090:	20000d3c 	.word	0x20000d3c
 8005094:	200002a0 	.word	0x200002a0
 8005098:	20000d40 	.word	0x20000d40
 800509c:	200002b0 	.word	0x200002b0
 80050a0:	20000d44 	.word	0x20000d44
 80050a4:	200002c0 	.word	0x200002c0
 80050a8:	20000d48 	.word	0x20000d48
 80050ac:	200002d0 	.word	0x200002d0
 80050b0:	20000d4c 	.word	0x20000d4c
 80050b4:	200002e0 	.word	0x200002e0
 80050b8:	20000d50 	.word	0x20000d50
 80050bc:	200002f0 	.word	0x200002f0
 80050c0:	20000d54 	.word	0x20000d54
 80050c4:	20000300 	.word	0x20000300
 80050c8:	20000d58 	.word	0x20000d58
 80050cc:	20000310 	.word	0x20000310
 80050d0:	20000d5c 	.word	0x20000d5c
 80050d4:	20000320 	.word	0x20000320
 80050d8:	20000d60 	.word	0x20000d60
 80050dc:	20000330 	.word	0x20000330
 80050e0:	20000d64 	.word	0x20000d64
 80050e4:	20000340 	.word	0x20000340
 80050e8:	20000d68 	.word	0x20000d68
 80050ec:	20000350 	.word	0x20000350
 80050f0:	20000d6c 	.word	0x20000d6c
 80050f4:	20000360 	.word	0x20000360
 80050f8:	20000d70 	.word	0x20000d70
 80050fc:	20000370 	.word	0x20000370
 8005100:	4a3d      	ldr	r2, [pc, #244]	; (80051f8 <loadMenuTexts+0x564>)
 8005102:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005104:	483d      	ldr	r0, [pc, #244]	; (80051fc <loadMenuTexts+0x568>)
 8005106:	f7fb fc05 	bl	8000914 <copyText>
 800510a:	4603      	mov	r3, r0
 800510c:	4a3c      	ldr	r2, [pc, #240]	; (8005200 <loadMenuTexts+0x56c>)
 800510e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005110:	483c      	ldr	r0, [pc, #240]	; (8005204 <loadMenuTexts+0x570>)
 8005112:	f7fb fbff 	bl	8000914 <copyText>
 8005116:	4603      	mov	r3, r0
 8005118:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <loadMenuTexts+0x574>)
 800511a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 800511c:	483b      	ldr	r0, [pc, #236]	; (800520c <loadMenuTexts+0x578>)
 800511e:	f7fb fbf9 	bl	8000914 <copyText>
 8005122:	4603      	mov	r3, r0
 8005124:	4a3a      	ldr	r2, [pc, #232]	; (8005210 <loadMenuTexts+0x57c>)
 8005126:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005128:	483a      	ldr	r0, [pc, #232]	; (8005214 <loadMenuTexts+0x580>)
 800512a:	f7fb fbf3 	bl	8000914 <copyText>
 800512e:	4603      	mov	r3, r0
 8005130:	4a39      	ldr	r2, [pc, #228]	; (8005218 <loadMenuTexts+0x584>)
 8005132:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005134:	4839      	ldr	r0, [pc, #228]	; (800521c <loadMenuTexts+0x588>)
 8005136:	f7fb fbed 	bl	8000914 <copyText>
 800513a:	4603      	mov	r3, r0
 800513c:	4a38      	ldr	r2, [pc, #224]	; (8005220 <loadMenuTexts+0x58c>)
 800513e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005140:	4838      	ldr	r0, [pc, #224]	; (8005224 <loadMenuTexts+0x590>)
 8005142:	f7fb fbe7 	bl	8000914 <copyText>
 8005146:	4603      	mov	r3, r0
 8005148:	4a37      	ldr	r2, [pc, #220]	; (8005228 <loadMenuTexts+0x594>)
 800514a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 800514c:	4837      	ldr	r0, [pc, #220]	; (800522c <loadMenuTexts+0x598>)
 800514e:	f7fb fbe1 	bl	8000914 <copyText>
 8005152:	4603      	mov	r3, r0
 8005154:	4a36      	ldr	r2, [pc, #216]	; (8005230 <loadMenuTexts+0x59c>)
 8005156:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005158:	4836      	ldr	r0, [pc, #216]	; (8005234 <loadMenuTexts+0x5a0>)
 800515a:	f7fb fbdb 	bl	8000914 <copyText>
 800515e:	4603      	mov	r3, r0
 8005160:	4a35      	ldr	r2, [pc, #212]	; (8005238 <loadMenuTexts+0x5a4>)
 8005162:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005164:	4835      	ldr	r0, [pc, #212]	; (800523c <loadMenuTexts+0x5a8>)
 8005166:	f7fb fbd5 	bl	8000914 <copyText>
 800516a:	4603      	mov	r3, r0
 800516c:	4a34      	ldr	r2, [pc, #208]	; (8005240 <loadMenuTexts+0x5ac>)
 800516e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005170:	4834      	ldr	r0, [pc, #208]	; (8005244 <loadMenuTexts+0x5b0>)
 8005172:	f7fb fbcf 	bl	8000914 <copyText>
 8005176:	4603      	mov	r3, r0
 8005178:	4a33      	ldr	r2, [pc, #204]	; (8005248 <loadMenuTexts+0x5b4>)
 800517a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800517c:	4833      	ldr	r0, [pc, #204]	; (800524c <loadMenuTexts+0x5b8>)
 800517e:	f7fb fbc9 	bl	8000914 <copyText>
 8005182:	4603      	mov	r3, r0
 8005184:	4a32      	ldr	r2, [pc, #200]	; (8005250 <loadMenuTexts+0x5bc>)
 8005186:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005188:	4832      	ldr	r0, [pc, #200]	; (8005254 <loadMenuTexts+0x5c0>)
 800518a:	f7fb fbc3 	bl	8000914 <copyText>
 800518e:	4603      	mov	r3, r0
 8005190:	4a31      	ldr	r2, [pc, #196]	; (8005258 <loadMenuTexts+0x5c4>)
 8005192:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005194:	4831      	ldr	r0, [pc, #196]	; (800525c <loadMenuTexts+0x5c8>)
 8005196:	f7fb fbbd 	bl	8000914 <copyText>
 800519a:	4603      	mov	r3, r0
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <loadMenuTexts+0x5cc>)
 800519e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80051a0:	4830      	ldr	r0, [pc, #192]	; (8005264 <loadMenuTexts+0x5d0>)
 80051a2:	f7fb fbb7 	bl	8000914 <copyText>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <loadMenuTexts+0x5d4>)
 80051aa:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80051ac:	482f      	ldr	r0, [pc, #188]	; (800526c <loadMenuTexts+0x5d8>)
 80051ae:	f7fb fbb1 	bl	8000914 <copyText>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a2e      	ldr	r2, [pc, #184]	; (8005270 <loadMenuTexts+0x5dc>)
 80051b6:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80051b8:	482e      	ldr	r0, [pc, #184]	; (8005274 <loadMenuTexts+0x5e0>)
 80051ba:	f7fb fbab 	bl	8000914 <copyText>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <loadMenuTexts+0x5e4>)
 80051c2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80051c4:	482d      	ldr	r0, [pc, #180]	; (800527c <loadMenuTexts+0x5e8>)
 80051c6:	f7fb fba5 	bl	8000914 <copyText>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <loadMenuTexts+0x5ec>)
 80051ce:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80051d0:	482c      	ldr	r0, [pc, #176]	; (8005284 <loadMenuTexts+0x5f0>)
 80051d2:	f7fb fb9f 	bl	8000914 <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <loadMenuTexts+0x5f4>)
 80051da:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80051dc:	482b      	ldr	r0, [pc, #172]	; (800528c <loadMenuTexts+0x5f8>)
 80051de:	f7fb fb99 	bl	8000914 <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <loadMenuTexts+0x5fc>)
 80051e6:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80051e8:	482a      	ldr	r0, [pc, #168]	; (8005294 <loadMenuTexts+0x600>)
 80051ea:	f7fb fb93 	bl	8000914 <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a29      	ldr	r2, [pc, #164]	; (8005298 <loadMenuTexts+0x604>)
 80051f2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80051f4:	e2d3      	b.n	800579e <loadMenuTexts+0xb0a>
 80051f6:	bf00      	nop
 80051f8:	20000d74 	.word	0x20000d74
 80051fc:	20000380 	.word	0x20000380
 8005200:	20000d78 	.word	0x20000d78
 8005204:	20000390 	.word	0x20000390
 8005208:	20000d7c 	.word	0x20000d7c
 800520c:	200003a0 	.word	0x200003a0
 8005210:	20000d80 	.word	0x20000d80
 8005214:	200003b0 	.word	0x200003b0
 8005218:	20000d84 	.word	0x20000d84
 800521c:	200003c0 	.word	0x200003c0
 8005220:	20000d88 	.word	0x20000d88
 8005224:	200003d0 	.word	0x200003d0
 8005228:	20000d8c 	.word	0x20000d8c
 800522c:	200003e0 	.word	0x200003e0
 8005230:	20000d90 	.word	0x20000d90
 8005234:	200003f0 	.word	0x200003f0
 8005238:	20000d94 	.word	0x20000d94
 800523c:	20000400 	.word	0x20000400
 8005240:	20000d98 	.word	0x20000d98
 8005244:	20000410 	.word	0x20000410
 8005248:	20000d9c 	.word	0x20000d9c
 800524c:	20000420 	.word	0x20000420
 8005250:	20000da0 	.word	0x20000da0
 8005254:	20000430 	.word	0x20000430
 8005258:	20000da4 	.word	0x20000da4
 800525c:	20000440 	.word	0x20000440
 8005260:	20000da8 	.word	0x20000da8
 8005264:	20000450 	.word	0x20000450
 8005268:	20000db4 	.word	0x20000db4
 800526c:	20000460 	.word	0x20000460
 8005270:	20000db8 	.word	0x20000db8
 8005274:	20000470 	.word	0x20000470
 8005278:	20000dbc 	.word	0x20000dbc
 800527c:	20000480 	.word	0x20000480
 8005280:	20000dc0 	.word	0x20000dc0
 8005284:	20000490 	.word	0x20000490
 8005288:	20000dc4 	.word	0x20000dc4
 800528c:	200004a0 	.word	0x200004a0
 8005290:	20000dc8 	.word	0x20000dc8
 8005294:	200004b0 	.word	0x200004b0
 8005298:	20000dcc 	.word	0x20000dcc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800529c:	48a9      	ldr	r0, [pc, #676]	; (8005544 <loadMenuTexts+0x8b0>)
 800529e:	f7fb fb39 	bl	8000914 <copyText>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4aa8      	ldr	r2, [pc, #672]	; (8005548 <loadMenuTexts+0x8b4>)
 80052a6:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80052a8:	48a8      	ldr	r0, [pc, #672]	; (800554c <loadMenuTexts+0x8b8>)
 80052aa:	f7fb fb33 	bl	8000914 <copyText>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4aa7      	ldr	r2, [pc, #668]	; (8005550 <loadMenuTexts+0x8bc>)
 80052b2:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80052b4:	48a7      	ldr	r0, [pc, #668]	; (8005554 <loadMenuTexts+0x8c0>)
 80052b6:	f7fb fb2d 	bl	8000914 <copyText>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4aa6      	ldr	r2, [pc, #664]	; (8005558 <loadMenuTexts+0x8c4>)
 80052be:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80052c0:	48a6      	ldr	r0, [pc, #664]	; (800555c <loadMenuTexts+0x8c8>)
 80052c2:	f7fb fb27 	bl	8000914 <copyText>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4aa5      	ldr	r2, [pc, #660]	; (8005560 <loadMenuTexts+0x8cc>)
 80052ca:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80052cc:	48a5      	ldr	r0, [pc, #660]	; (8005564 <loadMenuTexts+0x8d0>)
 80052ce:	f7fb fb21 	bl	8000914 <copyText>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4aa4      	ldr	r2, [pc, #656]	; (8005568 <loadMenuTexts+0x8d4>)
 80052d6:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80052d8:	48a4      	ldr	r0, [pc, #656]	; (800556c <loadMenuTexts+0x8d8>)
 80052da:	f7fb fb1b 	bl	8000914 <copyText>
 80052de:	4603      	mov	r3, r0
 80052e0:	4aa3      	ldr	r2, [pc, #652]	; (8005570 <loadMenuTexts+0x8dc>)
 80052e2:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80052e4:	48a3      	ldr	r0, [pc, #652]	; (8005574 <loadMenuTexts+0x8e0>)
 80052e6:	f7fb fb15 	bl	8000914 <copyText>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4aa2      	ldr	r2, [pc, #648]	; (8005578 <loadMenuTexts+0x8e4>)
 80052ee:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80052f0:	48a2      	ldr	r0, [pc, #648]	; (800557c <loadMenuTexts+0x8e8>)
 80052f2:	f7fb fb0f 	bl	8000914 <copyText>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4aa1      	ldr	r2, [pc, #644]	; (8005580 <loadMenuTexts+0x8ec>)
 80052fa:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80052fc:	48a1      	ldr	r0, [pc, #644]	; (8005584 <loadMenuTexts+0x8f0>)
 80052fe:	f7fb fb09 	bl	8000914 <copyText>
 8005302:	4603      	mov	r3, r0
 8005304:	4aa0      	ldr	r2, [pc, #640]	; (8005588 <loadMenuTexts+0x8f4>)
 8005306:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005308:	48a0      	ldr	r0, [pc, #640]	; (800558c <loadMenuTexts+0x8f8>)
 800530a:	f7fb fb03 	bl	8000914 <copyText>
 800530e:	4603      	mov	r3, r0
 8005310:	4a9f      	ldr	r2, [pc, #636]	; (8005590 <loadMenuTexts+0x8fc>)
 8005312:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005314:	489f      	ldr	r0, [pc, #636]	; (8005594 <loadMenuTexts+0x900>)
 8005316:	f7fb fafd 	bl	8000914 <copyText>
 800531a:	4603      	mov	r3, r0
 800531c:	4a9e      	ldr	r2, [pc, #632]	; (8005598 <loadMenuTexts+0x904>)
 800531e:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005320:	489e      	ldr	r0, [pc, #632]	; (800559c <loadMenuTexts+0x908>)
 8005322:	f7fb faf7 	bl	8000914 <copyText>
 8005326:	4603      	mov	r3, r0
 8005328:	4a9d      	ldr	r2, [pc, #628]	; (80055a0 <loadMenuTexts+0x90c>)
 800532a:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 800532c:	489d      	ldr	r0, [pc, #628]	; (80055a4 <loadMenuTexts+0x910>)
 800532e:	f7fb faf1 	bl	8000914 <copyText>
 8005332:	4603      	mov	r3, r0
 8005334:	4a9c      	ldr	r2, [pc, #624]	; (80055a8 <loadMenuTexts+0x914>)
 8005336:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005338:	489c      	ldr	r0, [pc, #624]	; (80055ac <loadMenuTexts+0x918>)
 800533a:	f7fb faeb 	bl	8000914 <copyText>
 800533e:	4603      	mov	r3, r0
 8005340:	4a9b      	ldr	r2, [pc, #620]	; (80055b0 <loadMenuTexts+0x91c>)
 8005342:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005344:	489b      	ldr	r0, [pc, #620]	; (80055b4 <loadMenuTexts+0x920>)
 8005346:	f7fb fae5 	bl	8000914 <copyText>
 800534a:	4603      	mov	r3, r0
 800534c:	4a9a      	ldr	r2, [pc, #616]	; (80055b8 <loadMenuTexts+0x924>)
 800534e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005350:	489a      	ldr	r0, [pc, #616]	; (80055bc <loadMenuTexts+0x928>)
 8005352:	f7fb fadf 	bl	8000914 <copyText>
 8005356:	4603      	mov	r3, r0
 8005358:	4a99      	ldr	r2, [pc, #612]	; (80055c0 <loadMenuTexts+0x92c>)
 800535a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 800535c:	4899      	ldr	r0, [pc, #612]	; (80055c4 <loadMenuTexts+0x930>)
 800535e:	f7fb fad9 	bl	8000914 <copyText>
 8005362:	4603      	mov	r3, r0
 8005364:	4a98      	ldr	r2, [pc, #608]	; (80055c8 <loadMenuTexts+0x934>)
 8005366:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005368:	4898      	ldr	r0, [pc, #608]	; (80055cc <loadMenuTexts+0x938>)
 800536a:	f7fb fad3 	bl	8000914 <copyText>
 800536e:	4603      	mov	r3, r0
 8005370:	4a97      	ldr	r2, [pc, #604]	; (80055d0 <loadMenuTexts+0x93c>)
 8005372:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005374:	4897      	ldr	r0, [pc, #604]	; (80055d4 <loadMenuTexts+0x940>)
 8005376:	f7fb facd 	bl	8000914 <copyText>
 800537a:	4603      	mov	r3, r0
 800537c:	4a96      	ldr	r2, [pc, #600]	; (80055d8 <loadMenuTexts+0x944>)
 800537e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005380:	4896      	ldr	r0, [pc, #600]	; (80055dc <loadMenuTexts+0x948>)
 8005382:	f7fb fac7 	bl	8000914 <copyText>
 8005386:	4603      	mov	r3, r0
 8005388:	4a95      	ldr	r2, [pc, #596]	; (80055e0 <loadMenuTexts+0x94c>)
 800538a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 800538c:	4895      	ldr	r0, [pc, #596]	; (80055e4 <loadMenuTexts+0x950>)
 800538e:	f7fb fac1 	bl	8000914 <copyText>
 8005392:	4603      	mov	r3, r0
 8005394:	4a94      	ldr	r2, [pc, #592]	; (80055e8 <loadMenuTexts+0x954>)
 8005396:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005398:	4894      	ldr	r0, [pc, #592]	; (80055ec <loadMenuTexts+0x958>)
 800539a:	f7fb fabb 	bl	8000914 <copyText>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a93      	ldr	r2, [pc, #588]	; (80055f0 <loadMenuTexts+0x95c>)
 80053a2:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80053a4:	4893      	ldr	r0, [pc, #588]	; (80055f4 <loadMenuTexts+0x960>)
 80053a6:	f7fb fab5 	bl	8000914 <copyText>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a92      	ldr	r2, [pc, #584]	; (80055f8 <loadMenuTexts+0x964>)
 80053ae:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80053b0:	4892      	ldr	r0, [pc, #584]	; (80055fc <loadMenuTexts+0x968>)
 80053b2:	f7fb faaf 	bl	8000914 <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a91      	ldr	r2, [pc, #580]	; (8005600 <loadMenuTexts+0x96c>)
 80053ba:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80053bc:	4891      	ldr	r0, [pc, #580]	; (8005604 <loadMenuTexts+0x970>)
 80053be:	f7fb faa9 	bl	8000914 <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a90      	ldr	r2, [pc, #576]	; (8005608 <loadMenuTexts+0x974>)
 80053c6:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80053c8:	4890      	ldr	r0, [pc, #576]	; (800560c <loadMenuTexts+0x978>)
 80053ca:	f7fb faa3 	bl	8000914 <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4a8f      	ldr	r2, [pc, #572]	; (8005610 <loadMenuTexts+0x97c>)
 80053d2:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80053d4:	488f      	ldr	r0, [pc, #572]	; (8005614 <loadMenuTexts+0x980>)
 80053d6:	f7fb fa9d 	bl	8000914 <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a8e      	ldr	r2, [pc, #568]	; (8005618 <loadMenuTexts+0x984>)
 80053de:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80053e0:	488e      	ldr	r0, [pc, #568]	; (800561c <loadMenuTexts+0x988>)
 80053e2:	f7fb fa97 	bl	8000914 <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a8d      	ldr	r2, [pc, #564]	; (8005620 <loadMenuTexts+0x98c>)
 80053ea:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80053ec:	488d      	ldr	r0, [pc, #564]	; (8005624 <loadMenuTexts+0x990>)
 80053ee:	f7fb fa91 	bl	8000914 <copyText>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4a8c      	ldr	r2, [pc, #560]	; (8005628 <loadMenuTexts+0x994>)
 80053f6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80053f8:	488c      	ldr	r0, [pc, #560]	; (800562c <loadMenuTexts+0x998>)
 80053fa:	f7fb fa8b 	bl	8000914 <copyText>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a8b      	ldr	r2, [pc, #556]	; (8005630 <loadMenuTexts+0x99c>)
 8005402:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005404:	488b      	ldr	r0, [pc, #556]	; (8005634 <loadMenuTexts+0x9a0>)
 8005406:	f7fb fa85 	bl	8000914 <copyText>
 800540a:	4603      	mov	r3, r0
 800540c:	4a8a      	ldr	r2, [pc, #552]	; (8005638 <loadMenuTexts+0x9a4>)
 800540e:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005410:	488a      	ldr	r0, [pc, #552]	; (800563c <loadMenuTexts+0x9a8>)
 8005412:	f7fb fa7f 	bl	8000914 <copyText>
 8005416:	4603      	mov	r3, r0
 8005418:	4a89      	ldr	r2, [pc, #548]	; (8005640 <loadMenuTexts+0x9ac>)
 800541a:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 800541c:	4889      	ldr	r0, [pc, #548]	; (8005644 <loadMenuTexts+0x9b0>)
 800541e:	f7fb fa79 	bl	8000914 <copyText>
 8005422:	4603      	mov	r3, r0
 8005424:	4a88      	ldr	r2, [pc, #544]	; (8005648 <loadMenuTexts+0x9b4>)
 8005426:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005428:	4888      	ldr	r0, [pc, #544]	; (800564c <loadMenuTexts+0x9b8>)
 800542a:	f7fb fa73 	bl	8000914 <copyText>
 800542e:	4603      	mov	r3, r0
 8005430:	4a87      	ldr	r2, [pc, #540]	; (8005650 <loadMenuTexts+0x9bc>)
 8005432:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005434:	4887      	ldr	r0, [pc, #540]	; (8005654 <loadMenuTexts+0x9c0>)
 8005436:	f7fb fa6d 	bl	8000914 <copyText>
 800543a:	4603      	mov	r3, r0
 800543c:	4a86      	ldr	r2, [pc, #536]	; (8005658 <loadMenuTexts+0x9c4>)
 800543e:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005440:	4886      	ldr	r0, [pc, #536]	; (800565c <loadMenuTexts+0x9c8>)
 8005442:	f7fb fa67 	bl	8000914 <copyText>
 8005446:	4603      	mov	r3, r0
 8005448:	4a85      	ldr	r2, [pc, #532]	; (8005660 <loadMenuTexts+0x9cc>)
 800544a:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 800544c:	4885      	ldr	r0, [pc, #532]	; (8005664 <loadMenuTexts+0x9d0>)
 800544e:	f7fb fa61 	bl	8000914 <copyText>
 8005452:	4603      	mov	r3, r0
 8005454:	4a84      	ldr	r2, [pc, #528]	; (8005668 <loadMenuTexts+0x9d4>)
 8005456:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005458:	4884      	ldr	r0, [pc, #528]	; (800566c <loadMenuTexts+0x9d8>)
 800545a:	f7fb fa5b 	bl	8000914 <copyText>
 800545e:	4603      	mov	r3, r0
 8005460:	4a83      	ldr	r2, [pc, #524]	; (8005670 <loadMenuTexts+0x9dc>)
 8005462:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005464:	4883      	ldr	r0, [pc, #524]	; (8005674 <loadMenuTexts+0x9e0>)
 8005466:	f7fb fa55 	bl	8000914 <copyText>
 800546a:	4603      	mov	r3, r0
 800546c:	4a82      	ldr	r2, [pc, #520]	; (8005678 <loadMenuTexts+0x9e4>)
 800546e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005470:	4882      	ldr	r0, [pc, #520]	; (800567c <loadMenuTexts+0x9e8>)
 8005472:	f7fb fa4f 	bl	8000914 <copyText>
 8005476:	4603      	mov	r3, r0
 8005478:	4a81      	ldr	r2, [pc, #516]	; (8005680 <loadMenuTexts+0x9ec>)
 800547a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 800547c:	4881      	ldr	r0, [pc, #516]	; (8005684 <loadMenuTexts+0x9f0>)
 800547e:	f7fb fa49 	bl	8000914 <copyText>
 8005482:	4603      	mov	r3, r0
 8005484:	4a80      	ldr	r2, [pc, #512]	; (8005688 <loadMenuTexts+0x9f4>)
 8005486:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005488:	4880      	ldr	r0, [pc, #512]	; (800568c <loadMenuTexts+0x9f8>)
 800548a:	f7fb fa43 	bl	8000914 <copyText>
 800548e:	4603      	mov	r3, r0
 8005490:	4a7f      	ldr	r2, [pc, #508]	; (8005690 <loadMenuTexts+0x9fc>)
 8005492:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005494:	487f      	ldr	r0, [pc, #508]	; (8005694 <loadMenuTexts+0xa00>)
 8005496:	f7fb fa3d 	bl	8000914 <copyText>
 800549a:	4603      	mov	r3, r0
 800549c:	4a7e      	ldr	r2, [pc, #504]	; (8005698 <loadMenuTexts+0xa04>)
 800549e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80054a0:	487e      	ldr	r0, [pc, #504]	; (800569c <loadMenuTexts+0xa08>)
 80054a2:	f7fb fa37 	bl	8000914 <copyText>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a7d      	ldr	r2, [pc, #500]	; (80056a0 <loadMenuTexts+0xa0c>)
 80054aa:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80054ac:	487d      	ldr	r0, [pc, #500]	; (80056a4 <loadMenuTexts+0xa10>)
 80054ae:	f7fb fa31 	bl	8000914 <copyText>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a7c      	ldr	r2, [pc, #496]	; (80056a8 <loadMenuTexts+0xa14>)
 80054b6:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80054b8:	487c      	ldr	r0, [pc, #496]	; (80056ac <loadMenuTexts+0xa18>)
 80054ba:	f7fb fa2b 	bl	8000914 <copyText>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a7b      	ldr	r2, [pc, #492]	; (80056b0 <loadMenuTexts+0xa1c>)
 80054c2:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80054c4:	487b      	ldr	r0, [pc, #492]	; (80056b4 <loadMenuTexts+0xa20>)
 80054c6:	f7fb fa25 	bl	8000914 <copyText>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a7a      	ldr	r2, [pc, #488]	; (80056b8 <loadMenuTexts+0xa24>)
 80054ce:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80054d0:	487a      	ldr	r0, [pc, #488]	; (80056bc <loadMenuTexts+0xa28>)
 80054d2:	f7fb fa1f 	bl	8000914 <copyText>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a79      	ldr	r2, [pc, #484]	; (80056c0 <loadMenuTexts+0xa2c>)
 80054da:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80054dc:	4879      	ldr	r0, [pc, #484]	; (80056c4 <loadMenuTexts+0xa30>)
 80054de:	f7fb fa19 	bl	8000914 <copyText>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a78      	ldr	r2, [pc, #480]	; (80056c8 <loadMenuTexts+0xa34>)
 80054e6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80054e8:	4878      	ldr	r0, [pc, #480]	; (80056cc <loadMenuTexts+0xa38>)
 80054ea:	f7fb fa13 	bl	8000914 <copyText>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4a77      	ldr	r2, [pc, #476]	; (80056d0 <loadMenuTexts+0xa3c>)
 80054f2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80054f4:	4877      	ldr	r0, [pc, #476]	; (80056d4 <loadMenuTexts+0xa40>)
 80054f6:	f7fb fa0d 	bl	8000914 <copyText>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4a76      	ldr	r2, [pc, #472]	; (80056d8 <loadMenuTexts+0xa44>)
 80054fe:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005500:	4876      	ldr	r0, [pc, #472]	; (80056dc <loadMenuTexts+0xa48>)
 8005502:	f7fb fa07 	bl	8000914 <copyText>
 8005506:	4603      	mov	r3, r0
 8005508:	4a75      	ldr	r2, [pc, #468]	; (80056e0 <loadMenuTexts+0xa4c>)
 800550a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 800550c:	4875      	ldr	r0, [pc, #468]	; (80056e4 <loadMenuTexts+0xa50>)
 800550e:	f7fb fa01 	bl	8000914 <copyText>
 8005512:	4603      	mov	r3, r0
 8005514:	4a74      	ldr	r2, [pc, #464]	; (80056e8 <loadMenuTexts+0xa54>)
 8005516:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005518:	4874      	ldr	r0, [pc, #464]	; (80056ec <loadMenuTexts+0xa58>)
 800551a:	f7fb f9fb 	bl	8000914 <copyText>
 800551e:	4603      	mov	r3, r0
 8005520:	4a73      	ldr	r2, [pc, #460]	; (80056f0 <loadMenuTexts+0xa5c>)
 8005522:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005524:	4873      	ldr	r0, [pc, #460]	; (80056f4 <loadMenuTexts+0xa60>)
 8005526:	f7fb f9f5 	bl	8000914 <copyText>
 800552a:	4603      	mov	r3, r0
 800552c:	4a72      	ldr	r2, [pc, #456]	; (80056f8 <loadMenuTexts+0xa64>)
 800552e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005530:	4872      	ldr	r0, [pc, #456]	; (80056fc <loadMenuTexts+0xa68>)
 8005532:	f7fb f9ef 	bl	8000914 <copyText>
 8005536:	4603      	mov	r3, r0
 8005538:	4a71      	ldr	r2, [pc, #452]	; (8005700 <loadMenuTexts+0xa6c>)
 800553a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 800553c:	4871      	ldr	r0, [pc, #452]	; (8005704 <loadMenuTexts+0xa70>)
 800553e:	f7fb f9e9 	bl	8000914 <copyText>
 8005542:	e0e1      	b.n	8005708 <loadMenuTexts+0xa74>
 8005544:	200004c0 	.word	0x200004c0
 8005548:	20000ca8 	.word	0x20000ca8
 800554c:	200004d0 	.word	0x200004d0
 8005550:	20000cac 	.word	0x20000cac
 8005554:	200004e0 	.word	0x200004e0
 8005558:	20000cb0 	.word	0x20000cb0
 800555c:	200004f0 	.word	0x200004f0
 8005560:	20000cb4 	.word	0x20000cb4
 8005564:	20000500 	.word	0x20000500
 8005568:	20000cb8 	.word	0x20000cb8
 800556c:	20000510 	.word	0x20000510
 8005570:	20000cbc 	.word	0x20000cbc
 8005574:	20000520 	.word	0x20000520
 8005578:	20000cc0 	.word	0x20000cc0
 800557c:	20000530 	.word	0x20000530
 8005580:	20000cc4 	.word	0x20000cc4
 8005584:	20000540 	.word	0x20000540
 8005588:	20000cc8 	.word	0x20000cc8
 800558c:	20000550 	.word	0x20000550
 8005590:	20000ccc 	.word	0x20000ccc
 8005594:	20000560 	.word	0x20000560
 8005598:	20000cd0 	.word	0x20000cd0
 800559c:	20000570 	.word	0x20000570
 80055a0:	20000cd4 	.word	0x20000cd4
 80055a4:	20000580 	.word	0x20000580
 80055a8:	20000cd8 	.word	0x20000cd8
 80055ac:	20000590 	.word	0x20000590
 80055b0:	20000cdc 	.word	0x20000cdc
 80055b4:	200005a0 	.word	0x200005a0
 80055b8:	20000ce0 	.word	0x20000ce0
 80055bc:	200005b0 	.word	0x200005b0
 80055c0:	20000ce4 	.word	0x20000ce4
 80055c4:	200005c0 	.word	0x200005c0
 80055c8:	20000ce8 	.word	0x20000ce8
 80055cc:	200005d0 	.word	0x200005d0
 80055d0:	20000cec 	.word	0x20000cec
 80055d4:	200005e0 	.word	0x200005e0
 80055d8:	20000cf0 	.word	0x20000cf0
 80055dc:	200005f0 	.word	0x200005f0
 80055e0:	20000cf4 	.word	0x20000cf4
 80055e4:	20000600 	.word	0x20000600
 80055e8:	20000cf8 	.word	0x20000cf8
 80055ec:	20000610 	.word	0x20000610
 80055f0:	20000d00 	.word	0x20000d00
 80055f4:	20000620 	.word	0x20000620
 80055f8:	20000d04 	.word	0x20000d04
 80055fc:	20000630 	.word	0x20000630
 8005600:	20000d08 	.word	0x20000d08
 8005604:	20000640 	.word	0x20000640
 8005608:	20000d0c 	.word	0x20000d0c
 800560c:	20000650 	.word	0x20000650
 8005610:	20000d10 	.word	0x20000d10
 8005614:	20000660 	.word	0x20000660
 8005618:	20000d14 	.word	0x20000d14
 800561c:	20000670 	.word	0x20000670
 8005620:	20000d18 	.word	0x20000d18
 8005624:	20000680 	.word	0x20000680
 8005628:	20000d1c 	.word	0x20000d1c
 800562c:	20000690 	.word	0x20000690
 8005630:	20000d20 	.word	0x20000d20
 8005634:	200006a0 	.word	0x200006a0
 8005638:	20000d24 	.word	0x20000d24
 800563c:	200006b0 	.word	0x200006b0
 8005640:	20000d28 	.word	0x20000d28
 8005644:	200006c0 	.word	0x200006c0
 8005648:	20000d30 	.word	0x20000d30
 800564c:	200006d0 	.word	0x200006d0
 8005650:	20000d38 	.word	0x20000d38
 8005654:	200006e0 	.word	0x200006e0
 8005658:	20000d3c 	.word	0x20000d3c
 800565c:	200006f0 	.word	0x200006f0
 8005660:	20000d40 	.word	0x20000d40
 8005664:	20000700 	.word	0x20000700
 8005668:	20000d44 	.word	0x20000d44
 800566c:	20000710 	.word	0x20000710
 8005670:	20000d48 	.word	0x20000d48
 8005674:	20000720 	.word	0x20000720
 8005678:	20000d4c 	.word	0x20000d4c
 800567c:	20000730 	.word	0x20000730
 8005680:	20000d50 	.word	0x20000d50
 8005684:	20000740 	.word	0x20000740
 8005688:	20000d54 	.word	0x20000d54
 800568c:	20000750 	.word	0x20000750
 8005690:	20000d58 	.word	0x20000d58
 8005694:	20000760 	.word	0x20000760
 8005698:	20000d5c 	.word	0x20000d5c
 800569c:	20000770 	.word	0x20000770
 80056a0:	20000d60 	.word	0x20000d60
 80056a4:	20000780 	.word	0x20000780
 80056a8:	20000d64 	.word	0x20000d64
 80056ac:	20000790 	.word	0x20000790
 80056b0:	20000d68 	.word	0x20000d68
 80056b4:	200007a0 	.word	0x200007a0
 80056b8:	20000d6c 	.word	0x20000d6c
 80056bc:	200007b0 	.word	0x200007b0
 80056c0:	20000d70 	.word	0x20000d70
 80056c4:	200007c0 	.word	0x200007c0
 80056c8:	20000d74 	.word	0x20000d74
 80056cc:	200007d0 	.word	0x200007d0
 80056d0:	20000d78 	.word	0x20000d78
 80056d4:	200007e0 	.word	0x200007e0
 80056d8:	20000d7c 	.word	0x20000d7c
 80056dc:	200007f0 	.word	0x200007f0
 80056e0:	20000d80 	.word	0x20000d80
 80056e4:	20000800 	.word	0x20000800
 80056e8:	20000d84 	.word	0x20000d84
 80056ec:	20000810 	.word	0x20000810
 80056f0:	20000d88 	.word	0x20000d88
 80056f4:	20000820 	.word	0x20000820
 80056f8:	20000d8c 	.word	0x20000d8c
 80056fc:	20000830 	.word	0x20000830
 8005700:	20000d90 	.word	0x20000d90
 8005704:	20000840 	.word	0x20000840
 8005708:	4603      	mov	r3, r0
 800570a:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <loadMenuTexts+0xb14>)
 800570c:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800570e:	4827      	ldr	r0, [pc, #156]	; (80057ac <loadMenuTexts+0xb18>)
 8005710:	f7fb f900 	bl	8000914 <copyText>
 8005714:	4603      	mov	r3, r0
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <loadMenuTexts+0xb1c>)
 8005718:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800571a:	4826      	ldr	r0, [pc, #152]	; (80057b4 <loadMenuTexts+0xb20>)
 800571c:	f7fb f8fa 	bl	8000914 <copyText>
 8005720:	4603      	mov	r3, r0
 8005722:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <loadMenuTexts+0xb24>)
 8005724:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005726:	4825      	ldr	r0, [pc, #148]	; (80057bc <loadMenuTexts+0xb28>)
 8005728:	f7fb f8f4 	bl	8000914 <copyText>
 800572c:	4603      	mov	r3, r0
 800572e:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <loadMenuTexts+0xb2c>)
 8005730:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005732:	4824      	ldr	r0, [pc, #144]	; (80057c4 <loadMenuTexts+0xb30>)
 8005734:	f7fb f8ee 	bl	8000914 <copyText>
 8005738:	4603      	mov	r3, r0
 800573a:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <loadMenuTexts+0xb34>)
 800573c:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800573e:	4823      	ldr	r0, [pc, #140]	; (80057cc <loadMenuTexts+0xb38>)
 8005740:	f7fb f8e8 	bl	8000914 <copyText>
 8005744:	4603      	mov	r3, r0
 8005746:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <loadMenuTexts+0xb3c>)
 8005748:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800574a:	4822      	ldr	r0, [pc, #136]	; (80057d4 <loadMenuTexts+0xb40>)
 800574c:	f7fb f8e2 	bl	8000914 <copyText>
 8005750:	4603      	mov	r3, r0
 8005752:	4a21      	ldr	r2, [pc, #132]	; (80057d8 <loadMenuTexts+0xb44>)
 8005754:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005756:	4821      	ldr	r0, [pc, #132]	; (80057dc <loadMenuTexts+0xb48>)
 8005758:	f7fb f8dc 	bl	8000914 <copyText>
 800575c:	4603      	mov	r3, r0
 800575e:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <loadMenuTexts+0xb4c>)
 8005760:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005762:	4820      	ldr	r0, [pc, #128]	; (80057e4 <loadMenuTexts+0xb50>)
 8005764:	f7fb f8d6 	bl	8000914 <copyText>
 8005768:	4603      	mov	r3, r0
 800576a:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <loadMenuTexts+0xb54>)
 800576c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800576e:	481f      	ldr	r0, [pc, #124]	; (80057ec <loadMenuTexts+0xb58>)
 8005770:	f7fb f8d0 	bl	8000914 <copyText>
 8005774:	4603      	mov	r3, r0
 8005776:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <loadMenuTexts+0xb5c>)
 8005778:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800577a:	481e      	ldr	r0, [pc, #120]	; (80057f4 <loadMenuTexts+0xb60>)
 800577c:	f7fb f8ca 	bl	8000914 <copyText>
 8005780:	4603      	mov	r3, r0
 8005782:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <loadMenuTexts+0xb64>)
 8005784:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005786:	481d      	ldr	r0, [pc, #116]	; (80057fc <loadMenuTexts+0xb68>)
 8005788:	f7fb f8c4 	bl	8000914 <copyText>
 800578c:	4603      	mov	r3, r0
 800578e:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <loadMenuTexts+0xb6c>)
 8005790:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005792:	481c      	ldr	r0, [pc, #112]	; (8005804 <loadMenuTexts+0xb70>)
 8005794:	f7fb f8be 	bl	8000914 <copyText>
 8005798:	4603      	mov	r3, r0
 800579a:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <loadMenuTexts+0xb74>)
 800579c:	6013      	str	r3, [r2, #0]
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000d94 	.word	0x20000d94
 80057ac:	20000850 	.word	0x20000850
 80057b0:	20000d98 	.word	0x20000d98
 80057b4:	20000860 	.word	0x20000860
 80057b8:	20000d9c 	.word	0x20000d9c
 80057bc:	20000870 	.word	0x20000870
 80057c0:	20000da0 	.word	0x20000da0
 80057c4:	20000880 	.word	0x20000880
 80057c8:	20000da4 	.word	0x20000da4
 80057cc:	20000890 	.word	0x20000890
 80057d0:	20000da8 	.word	0x20000da8
 80057d4:	200008a0 	.word	0x200008a0
 80057d8:	20000db4 	.word	0x20000db4
 80057dc:	200008b0 	.word	0x200008b0
 80057e0:	20000db8 	.word	0x20000db8
 80057e4:	200008c0 	.word	0x200008c0
 80057e8:	20000dbc 	.word	0x20000dbc
 80057ec:	200008d0 	.word	0x200008d0
 80057f0:	20000dc0 	.word	0x20000dc0
 80057f4:	200008e0 	.word	0x200008e0
 80057f8:	20000dc4 	.word	0x20000dc4
 80057fc:	200008f0 	.word	0x200008f0
 8005800:	20000dc8 	.word	0x20000dc8
 8005804:	20000900 	.word	0x20000900
 8005808:	20000dcc 	.word	0x20000dcc

0800580c <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d105      	bne.n	8005828 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800581c:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <lcdUpdate+0x9c>)
 800581e:	2101      	movs	r1, #1
 8005820:	2002      	movs	r0, #2
 8005822:	f7fa ffc9 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005826:	e03b      	b.n	80058a0 <lcdUpdate+0x94>
	} else if(y==2) {
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d105      	bne.n	800583a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <lcdUpdate+0x9c>)
 8005830:	2102      	movs	r1, #2
 8005832:	2002      	movs	r0, #2
 8005834:	f7fa ffc0 	bl	80007b8 <lcd_print>
}
 8005838:	e032      	b.n	80058a0 <lcdUpdate+0x94>
	} else if(y==3) {
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d105      	bne.n	800584c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <lcdUpdate+0x9c>)
 8005842:	2103      	movs	r1, #3
 8005844:	2002      	movs	r0, #2
 8005846:	f7fa ffb7 	bl	80007b8 <lcd_print>
}
 800584a:	e029      	b.n	80058a0 <lcdUpdate+0x94>
	} else if(y==4) {
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b04      	cmp	r3, #4
 8005850:	d105      	bne.n	800585e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <lcdUpdate+0x9c>)
 8005854:	2104      	movs	r1, #4
 8005856:	2002      	movs	r0, #2
 8005858:	f7fa ffae 	bl	80007b8 <lcd_print>
}
 800585c:	e020      	b.n	80058a0 <lcdUpdate+0x94>
	} else if(y==5) {
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	2b05      	cmp	r3, #5
 8005862:	d105      	bne.n	8005870 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005864:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <lcdUpdate+0x9c>)
 8005866:	2105      	movs	r1, #5
 8005868:	2002      	movs	r0, #2
 800586a:	f7fa ffa5 	bl	80007b8 <lcd_print>
}
 800586e:	e017      	b.n	80058a0 <lcdUpdate+0x94>
	} else if(y==6) {
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	2b06      	cmp	r3, #6
 8005874:	d105      	bne.n	8005882 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005876:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <lcdUpdate+0x9c>)
 8005878:	2106      	movs	r1, #6
 800587a:	2002      	movs	r0, #2
 800587c:	f7fa ff9c 	bl	80007b8 <lcd_print>
}
 8005880:	e00e      	b.n	80058a0 <lcdUpdate+0x94>
	} else if (y==7) {
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	2b07      	cmp	r3, #7
 8005886:	d10b      	bne.n	80058a0 <lcdUpdate+0x94>
		lcd_clear();
 8005888:	f7fa ffc2 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 800588c:	4a07      	ldr	r2, [pc, #28]	; (80058ac <lcdUpdate+0xa0>)
 800588e:	2101      	movs	r1, #1
 8005890:	2001      	movs	r0, #1
 8005892:	f7fa ff91 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005896:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <lcdUpdate+0xa4>)
 8005898:	2101      	movs	r1, #1
 800589a:	2002      	movs	r0, #2
 800589c:	f7fa ff8c 	bl	80007b8 <lcd_print>
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	0800dad8 	.word	0x0800dad8
 80058ac:	0800e404 	.word	0x0800e404
 80058b0:	0800e418 	.word	0x0800e418

080058b4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d11d      	bne.n	8005900 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80058c4:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80058cc:	4a61      	ldr	r2, [pc, #388]	; (8005a54 <hataKoduLcdGoster+0x1a0>)
 80058ce:	2101      	movs	r1, #1
 80058d0:	2001      	movs	r0, #1
 80058d2:	f7fa ff71 	bl	80007b8 <lcd_print>
 80058d6:	e008      	b.n	80058ea <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80058d8:	4b5d      	ldr	r3, [pc, #372]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d104      	bne.n	80058ea <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058e0:	4a5d      	ldr	r2, [pc, #372]	; (8005a58 <hataKoduLcdGoster+0x1a4>)
 80058e2:	2101      	movs	r1, #1
 80058e4:	2001      	movs	r0, #1
 80058e6:	f7fa ff67 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80058ea:	4a5c      	ldr	r2, [pc, #368]	; (8005a5c <hataKoduLcdGoster+0x1a8>)
 80058ec:	2101      	movs	r1, #1
 80058ee:	2002      	movs	r0, #2
 80058f0:	f7fa ff62 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80058f4:	4a5a      	ldr	r2, [pc, #360]	; (8005a60 <hataKoduLcdGoster+0x1ac>)
 80058f6:	2107      	movs	r1, #7
 80058f8:	2002      	movs	r0, #2
 80058fa:	f7fa ff5d 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80058fe:	e0a3      	b.n	8005a48 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d11d      	bne.n	8005942 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005906:	4b52      	ldr	r3, [pc, #328]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d105      	bne.n	800591a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800590e:	4a51      	ldr	r2, [pc, #324]	; (8005a54 <hataKoduLcdGoster+0x1a0>)
 8005910:	2101      	movs	r1, #1
 8005912:	2001      	movs	r0, #1
 8005914:	f7fa ff50 	bl	80007b8 <lcd_print>
 8005918:	e008      	b.n	800592c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800591a:	4b4d      	ldr	r3, [pc, #308]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d104      	bne.n	800592c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005922:	4a4d      	ldr	r2, [pc, #308]	; (8005a58 <hataKoduLcdGoster+0x1a4>)
 8005924:	2101      	movs	r1, #1
 8005926:	2001      	movs	r0, #1
 8005928:	f7fa ff46 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 800592c:	4a4d      	ldr	r2, [pc, #308]	; (8005a64 <hataKoduLcdGoster+0x1b0>)
 800592e:	2102      	movs	r1, #2
 8005930:	2002      	movs	r0, #2
 8005932:	f7fa ff41 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005936:	4a4a      	ldr	r2, [pc, #296]	; (8005a60 <hataKoduLcdGoster+0x1ac>)
 8005938:	2107      	movs	r1, #7
 800593a:	2002      	movs	r0, #2
 800593c:	f7fa ff3c 	bl	80007b8 <lcd_print>
}
 8005940:	e082      	b.n	8005a48 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d11d      	bne.n	8005984 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005948:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005950:	4a40      	ldr	r2, [pc, #256]	; (8005a54 <hataKoduLcdGoster+0x1a0>)
 8005952:	2101      	movs	r1, #1
 8005954:	2001      	movs	r0, #1
 8005956:	f7fa ff2f 	bl	80007b8 <lcd_print>
 800595a:	e008      	b.n	800596e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800595c:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d104      	bne.n	800596e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005964:	4a3c      	ldr	r2, [pc, #240]	; (8005a58 <hataKoduLcdGoster+0x1a4>)
 8005966:	2101      	movs	r1, #1
 8005968:	2001      	movs	r0, #1
 800596a:	f7fa ff25 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 800596e:	4a3e      	ldr	r2, [pc, #248]	; (8005a68 <hataKoduLcdGoster+0x1b4>)
 8005970:	2103      	movs	r1, #3
 8005972:	2002      	movs	r0, #2
 8005974:	f7fa ff20 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005978:	4a39      	ldr	r2, [pc, #228]	; (8005a60 <hataKoduLcdGoster+0x1ac>)
 800597a:	2107      	movs	r1, #7
 800597c:	2002      	movs	r0, #2
 800597e:	f7fa ff1b 	bl	80007b8 <lcd_print>
}
 8005982:	e061      	b.n	8005a48 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d11d      	bne.n	80059c6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800598a:	4b31      	ldr	r3, [pc, #196]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d105      	bne.n	800599e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005992:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <hataKoduLcdGoster+0x1a0>)
 8005994:	2101      	movs	r1, #1
 8005996:	2001      	movs	r0, #1
 8005998:	f7fa ff0e 	bl	80007b8 <lcd_print>
 800599c:	e008      	b.n	80059b0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800599e:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d104      	bne.n	80059b0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059a6:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <hataKoduLcdGoster+0x1a4>)
 80059a8:	2101      	movs	r1, #1
 80059aa:	2001      	movs	r0, #1
 80059ac:	f7fa ff04 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 80059b0:	4a2e      	ldr	r2, [pc, #184]	; (8005a6c <hataKoduLcdGoster+0x1b8>)
 80059b2:	2104      	movs	r1, #4
 80059b4:	2002      	movs	r0, #2
 80059b6:	f7fa feff 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80059ba:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <hataKoduLcdGoster+0x1ac>)
 80059bc:	2107      	movs	r1, #7
 80059be:	2002      	movs	r0, #2
 80059c0:	f7fa fefa 	bl	80007b8 <lcd_print>
}
 80059c4:	e040      	b.n	8005a48 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d11d      	bne.n	8005a08 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80059d4:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <hataKoduLcdGoster+0x1a0>)
 80059d6:	2101      	movs	r1, #1
 80059d8:	2001      	movs	r0, #1
 80059da:	f7fa feed 	bl	80007b8 <lcd_print>
 80059de:	e008      	b.n	80059f2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d104      	bne.n	80059f2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <hataKoduLcdGoster+0x1a4>)
 80059ea:	2101      	movs	r1, #1
 80059ec:	2001      	movs	r0, #1
 80059ee:	f7fa fee3 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 80059f2:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <hataKoduLcdGoster+0x1bc>)
 80059f4:	2105      	movs	r1, #5
 80059f6:	2002      	movs	r0, #2
 80059f8:	f7fa fede 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <hataKoduLcdGoster+0x1ac>)
 80059fe:	2107      	movs	r1, #7
 8005a00:	2002      	movs	r0, #2
 8005a02:	f7fa fed9 	bl	80007b8 <lcd_print>
}
 8005a06:	e01f      	b.n	8005a48 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d11c      	bne.n	8005a48 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a16:	4a0f      	ldr	r2, [pc, #60]	; (8005a54 <hataKoduLcdGoster+0x1a0>)
 8005a18:	2101      	movs	r1, #1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f7fa fecc 	bl	80007b8 <lcd_print>
 8005a20:	e008      	b.n	8005a34 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <hataKoduLcdGoster+0x19c>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d104      	bne.n	8005a34 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <hataKoduLcdGoster+0x1a4>)
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f7fa fec2 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005a34:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <hataKoduLcdGoster+0x1c0>)
 8005a36:	2106      	movs	r1, #6
 8005a38:	2002      	movs	r0, #2
 8005a3a:	f7fa febd 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <hataKoduLcdGoster+0x1ac>)
 8005a40:	2107      	movs	r1, #7
 8005a42:	2002      	movs	r0, #2
 8005a44:	f7fa feb8 	bl	80007b8 <lcd_print>
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000c5a 	.word	0x20000c5a
 8005a54:	0800e42c 	.word	0x0800e42c
 8005a58:	0800e440 	.word	0x0800e440
 8005a5c:	0800d880 	.word	0x0800d880
 8005a60:	0800e454 	.word	0x0800e454
 8005a64:	0800d884 	.word	0x0800d884
 8005a68:	0800d888 	.word	0x0800d888
 8005a6c:	0800d88c 	.word	0x0800d88c
 8005a70:	0800d890 	.word	0x0800d890
 8005a74:	0800d894 	.word	0x0800d894

08005a78 <convertAndSendData>:

void convertAndSendData() {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005a7e:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <convertAndSendData+0x58>)
 8005a80:	2101      	movs	r1, #1
 8005a82:	2001      	movs	r0, #1
 8005a84:	f7fa fe98 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005a88:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <convertAndSendData+0x5c>)
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	2002      	movs	r0, #2
 8005a8e:	f7fa fe93 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e00a      	b.n	8005aae <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005a98:	f002 fb3a 	bl	8008110 <mergeData>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	490d      	ldr	r1, [pc, #52]	; (8005ad8 <convertAndSendData+0x60>)
 8005aa2:	480e      	ldr	r0, [pc, #56]	; (8005adc <convertAndSendData+0x64>)
 8005aa4:	f7fa fc6e 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	ddf1      	ble.n	8005a98 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ab8:	f003 fb16 	bl	80090e8 <HAL_Delay>
	lcd_clear();
 8005abc:	f7fa fea8 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ac4:	f003 fb10 	bl	80090e8 <HAL_Delay>
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	0800e460 	.word	0x0800e460
 8005ad4:	0800e46c 	.word	0x0800e46c
 8005ad8:	20000be4 	.word	0x20000be4
 8005adc:	20000e94 	.word	0x20000e94

08005ae0 <eepromKontrol>:

void eepromKontrol(int type) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af04      	add	r7, sp, #16
 8005ae6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005ae8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	233f      	movs	r3, #63	; 0x3f
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	4b9c      	ldr	r3, [pc, #624]	; (8005d64 <eepromKontrol+0x284>)
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	233f      	movs	r3, #63	; 0x3f
 8005af8:	2200      	movs	r2, #0
 8005afa:	21a0      	movs	r1, #160	; 0xa0
 8005afc:	489a      	ldr	r0, [pc, #616]	; (8005d68 <eepromKontrol+0x288>)
 8005afe:	f004 fc77 	bl	800a3f0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b06:	f003 faef 	bl	80090e8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005b0a:	4b96      	ldr	r3, [pc, #600]	; (8005d64 <eepromKontrol+0x284>)
 8005b0c:	78da      	ldrb	r2, [r3, #3]
 8005b0e:	4b97      	ldr	r3, [pc, #604]	; (8005d6c <eepromKontrol+0x28c>)
 8005b10:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005b12:	4b94      	ldr	r3, [pc, #592]	; (8005d64 <eepromKontrol+0x284>)
 8005b14:	785a      	ldrb	r2, [r3, #1]
 8005b16:	4b96      	ldr	r3, [pc, #600]	; (8005d70 <eepromKontrol+0x290>)
 8005b18:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005b1a:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <eepromKontrol+0x284>)
 8005b1c:	789a      	ldrb	r2, [r3, #2]
 8005b1e:	4b95      	ldr	r3, [pc, #596]	; (8005d74 <eepromKontrol+0x294>)
 8005b20:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005b22:	4b90      	ldr	r3, [pc, #576]	; (8005d64 <eepromKontrol+0x284>)
 8005b24:	791a      	ldrb	r2, [r3, #4]
 8005b26:	4b94      	ldr	r3, [pc, #592]	; (8005d78 <eepromKontrol+0x298>)
 8005b28:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005b2a:	4b8e      	ldr	r3, [pc, #568]	; (8005d64 <eepromKontrol+0x284>)
 8005b2c:	795a      	ldrb	r2, [r3, #5]
 8005b2e:	4b93      	ldr	r3, [pc, #588]	; (8005d7c <eepromKontrol+0x29c>)
 8005b30:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005b32:	4b8c      	ldr	r3, [pc, #560]	; (8005d64 <eepromKontrol+0x284>)
 8005b34:	799a      	ldrb	r2, [r3, #6]
 8005b36:	4b92      	ldr	r3, [pc, #584]	; (8005d80 <eepromKontrol+0x2a0>)
 8005b38:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005b3a:	4b8a      	ldr	r3, [pc, #552]	; (8005d64 <eepromKontrol+0x284>)
 8005b3c:	79da      	ldrb	r2, [r3, #7]
 8005b3e:	4b91      	ldr	r3, [pc, #580]	; (8005d84 <eepromKontrol+0x2a4>)
 8005b40:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005b42:	4b88      	ldr	r3, [pc, #544]	; (8005d64 <eepromKontrol+0x284>)
 8005b44:	7a1a      	ldrb	r2, [r3, #8]
 8005b46:	4b90      	ldr	r3, [pc, #576]	; (8005d88 <eepromKontrol+0x2a8>)
 8005b48:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005b4a:	4b86      	ldr	r3, [pc, #536]	; (8005d64 <eepromKontrol+0x284>)
 8005b4c:	7a5a      	ldrb	r2, [r3, #9]
 8005b4e:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <eepromKontrol+0x2ac>)
 8005b50:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005b52:	4b84      	ldr	r3, [pc, #528]	; (8005d64 <eepromKontrol+0x284>)
 8005b54:	7a9a      	ldrb	r2, [r3, #10]
 8005b56:	4b8e      	ldr	r3, [pc, #568]	; (8005d90 <eepromKontrol+0x2b0>)
 8005b58:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005b5a:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <eepromKontrol+0x284>)
 8005b5c:	7ada      	ldrb	r2, [r3, #11]
 8005b5e:	4b8d      	ldr	r3, [pc, #564]	; (8005d94 <eepromKontrol+0x2b4>)
 8005b60:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005b62:	4b80      	ldr	r3, [pc, #512]	; (8005d64 <eepromKontrol+0x284>)
 8005b64:	7b1a      	ldrb	r2, [r3, #12]
 8005b66:	4b8c      	ldr	r3, [pc, #560]	; (8005d98 <eepromKontrol+0x2b8>)
 8005b68:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005b6a:	4b7e      	ldr	r3, [pc, #504]	; (8005d64 <eepromKontrol+0x284>)
 8005b6c:	7b5a      	ldrb	r2, [r3, #13]
 8005b6e:	4b8b      	ldr	r3, [pc, #556]	; (8005d9c <eepromKontrol+0x2bc>)
 8005b70:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005b72:	4b7c      	ldr	r3, [pc, #496]	; (8005d64 <eepromKontrol+0x284>)
 8005b74:	7b9a      	ldrb	r2, [r3, #14]
 8005b76:	4b8a      	ldr	r3, [pc, #552]	; (8005da0 <eepromKontrol+0x2c0>)
 8005b78:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	; (8005d64 <eepromKontrol+0x284>)
 8005b7c:	7bda      	ldrb	r2, [r3, #15]
 8005b7e:	4b89      	ldr	r3, [pc, #548]	; (8005da4 <eepromKontrol+0x2c4>)
 8005b80:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005b82:	4b78      	ldr	r3, [pc, #480]	; (8005d64 <eepromKontrol+0x284>)
 8005b84:	7c1a      	ldrb	r2, [r3, #16]
 8005b86:	4b88      	ldr	r3, [pc, #544]	; (8005da8 <eepromKontrol+0x2c8>)
 8005b88:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005b8a:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <eepromKontrol+0x284>)
 8005b8c:	7c5a      	ldrb	r2, [r3, #17]
 8005b8e:	4b87      	ldr	r3, [pc, #540]	; (8005dac <eepromKontrol+0x2cc>)
 8005b90:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005b92:	4b74      	ldr	r3, [pc, #464]	; (8005d64 <eepromKontrol+0x284>)
 8005b94:	7c9a      	ldrb	r2, [r3, #18]
 8005b96:	4b86      	ldr	r3, [pc, #536]	; (8005db0 <eepromKontrol+0x2d0>)
 8005b98:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005b9a:	4b72      	ldr	r3, [pc, #456]	; (8005d64 <eepromKontrol+0x284>)
 8005b9c:	7cda      	ldrb	r2, [r3, #19]
 8005b9e:	4b85      	ldr	r3, [pc, #532]	; (8005db4 <eepromKontrol+0x2d4>)
 8005ba0:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005ba2:	4b70      	ldr	r3, [pc, #448]	; (8005d64 <eepromKontrol+0x284>)
 8005ba4:	7d1a      	ldrb	r2, [r3, #20]
 8005ba6:	4b84      	ldr	r3, [pc, #528]	; (8005db8 <eepromKontrol+0x2d8>)
 8005ba8:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005baa:	4b6e      	ldr	r3, [pc, #440]	; (8005d64 <eepromKontrol+0x284>)
 8005bac:	7d5a      	ldrb	r2, [r3, #21]
 8005bae:	4b83      	ldr	r3, [pc, #524]	; (8005dbc <eepromKontrol+0x2dc>)
 8005bb0:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005bb2:	4b6c      	ldr	r3, [pc, #432]	; (8005d64 <eepromKontrol+0x284>)
 8005bb4:	7d9a      	ldrb	r2, [r3, #22]
 8005bb6:	4b82      	ldr	r3, [pc, #520]	; (8005dc0 <eepromKontrol+0x2e0>)
 8005bb8:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005bba:	4b6a      	ldr	r3, [pc, #424]	; (8005d64 <eepromKontrol+0x284>)
 8005bbc:	7dda      	ldrb	r2, [r3, #23]
 8005bbe:	4b81      	ldr	r3, [pc, #516]	; (8005dc4 <eepromKontrol+0x2e4>)
 8005bc0:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005bc2:	4b68      	ldr	r3, [pc, #416]	; (8005d64 <eepromKontrol+0x284>)
 8005bc4:	7e1a      	ldrb	r2, [r3, #24]
 8005bc6:	4b80      	ldr	r3, [pc, #512]	; (8005dc8 <eepromKontrol+0x2e8>)
 8005bc8:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005bca:	4b66      	ldr	r3, [pc, #408]	; (8005d64 <eepromKontrol+0x284>)
 8005bcc:	7e5a      	ldrb	r2, [r3, #25]
 8005bce:	4b7f      	ldr	r3, [pc, #508]	; (8005dcc <eepromKontrol+0x2ec>)
 8005bd0:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005bd2:	4b64      	ldr	r3, [pc, #400]	; (8005d64 <eepromKontrol+0x284>)
 8005bd4:	7e9a      	ldrb	r2, [r3, #26]
 8005bd6:	4b7e      	ldr	r3, [pc, #504]	; (8005dd0 <eepromKontrol+0x2f0>)
 8005bd8:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005bda:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <eepromKontrol+0x284>)
 8005bdc:	7eda      	ldrb	r2, [r3, #27]
 8005bde:	4b7d      	ldr	r3, [pc, #500]	; (8005dd4 <eepromKontrol+0x2f4>)
 8005be0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005be2:	4b60      	ldr	r3, [pc, #384]	; (8005d64 <eepromKontrol+0x284>)
 8005be4:	7f1a      	ldrb	r2, [r3, #28]
 8005be6:	4b7c      	ldr	r3, [pc, #496]	; (8005dd8 <eepromKontrol+0x2f8>)
 8005be8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <eepromKontrol+0x284>)
 8005bec:	7f5a      	ldrb	r2, [r3, #29]
 8005bee:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <eepromKontrol+0x2fc>)
 8005bf0:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005bf2:	4b5c      	ldr	r3, [pc, #368]	; (8005d64 <eepromKontrol+0x284>)
 8005bf4:	7f9a      	ldrb	r2, [r3, #30]
 8005bf6:	4b7a      	ldr	r3, [pc, #488]	; (8005de0 <eepromKontrol+0x300>)
 8005bf8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005bfa:	4b5a      	ldr	r3, [pc, #360]	; (8005d64 <eepromKontrol+0x284>)
 8005bfc:	7fda      	ldrb	r2, [r3, #31]
 8005bfe:	4b79      	ldr	r3, [pc, #484]	; (8005de4 <eepromKontrol+0x304>)
 8005c00:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005c02:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <eepromKontrol+0x284>)
 8005c04:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005c08:	4b77      	ldr	r3, [pc, #476]	; (8005de8 <eepromKontrol+0x308>)
 8005c0a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005c0c:	4b55      	ldr	r3, [pc, #340]	; (8005d64 <eepromKontrol+0x284>)
 8005c0e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005c12:	4b76      	ldr	r3, [pc, #472]	; (8005dec <eepromKontrol+0x30c>)
 8005c14:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005c16:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <eepromKontrol+0x284>)
 8005c18:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005c1c:	4b74      	ldr	r3, [pc, #464]	; (8005df0 <eepromKontrol+0x310>)
 8005c1e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005c20:	4b50      	ldr	r3, [pc, #320]	; (8005d64 <eepromKontrol+0x284>)
 8005c22:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005c26:	4b73      	ldr	r3, [pc, #460]	; (8005df4 <eepromKontrol+0x314>)
 8005c28:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005c2a:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <eepromKontrol+0x284>)
 8005c2c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005c30:	4b71      	ldr	r3, [pc, #452]	; (8005df8 <eepromKontrol+0x318>)
 8005c32:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <eepromKontrol+0x284>)
 8005c36:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c3a:	4b70      	ldr	r3, [pc, #448]	; (8005dfc <eepromKontrol+0x31c>)
 8005c3c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005c3e:	4b49      	ldr	r3, [pc, #292]	; (8005d64 <eepromKontrol+0x284>)
 8005c40:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005c44:	4b6e      	ldr	r3, [pc, #440]	; (8005e00 <eepromKontrol+0x320>)
 8005c46:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005c48:	4b46      	ldr	r3, [pc, #280]	; (8005d64 <eepromKontrol+0x284>)
 8005c4a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005c4e:	4b6d      	ldr	r3, [pc, #436]	; (8005e04 <eepromKontrol+0x324>)
 8005c50:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005c52:	4b44      	ldr	r3, [pc, #272]	; (8005d64 <eepromKontrol+0x284>)
 8005c54:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005c58:	4b6b      	ldr	r3, [pc, #428]	; (8005e08 <eepromKontrol+0x328>)
 8005c5a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005c5c:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <eepromKontrol+0x284>)
 8005c5e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005c62:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <eepromKontrol+0x32c>)
 8005c64:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005c66:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <eepromKontrol+0x284>)
 8005c68:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005c6c:	4b68      	ldr	r3, [pc, #416]	; (8005e10 <eepromKontrol+0x330>)
 8005c6e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005c70:	4b3c      	ldr	r3, [pc, #240]	; (8005d64 <eepromKontrol+0x284>)
 8005c72:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005c76:	4b67      	ldr	r3, [pc, #412]	; (8005e14 <eepromKontrol+0x334>)
 8005c78:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005c7a:	4b3a      	ldr	r3, [pc, #232]	; (8005d64 <eepromKontrol+0x284>)
 8005c7c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c80:	4b65      	ldr	r3, [pc, #404]	; (8005e18 <eepromKontrol+0x338>)
 8005c82:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005c84:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <eepromKontrol+0x284>)
 8005c86:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005c8a:	4b64      	ldr	r3, [pc, #400]	; (8005e1c <eepromKontrol+0x33c>)
 8005c8c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005c8e:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <eepromKontrol+0x284>)
 8005c90:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005c94:	4b62      	ldr	r3, [pc, #392]	; (8005e20 <eepromKontrol+0x340>)
 8005c96:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005c98:	4b32      	ldr	r3, [pc, #200]	; (8005d64 <eepromKontrol+0x284>)
 8005c9a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005c9e:	4b61      	ldr	r3, [pc, #388]	; (8005e24 <eepromKontrol+0x344>)
 8005ca0:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005ca2:	4b52      	ldr	r3, [pc, #328]	; (8005dec <eepromKontrol+0x30c>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fff4 	bl	8004c94 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005cac:	4b4e      	ldr	r3, [pc, #312]	; (8005de8 <eepromKontrol+0x308>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d902      	bls.n	8005cba <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005cb4:	4b4c      	ldr	r3, [pc, #304]	; (8005de8 <eepromKontrol+0x308>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005cba:	4b4a      	ldr	r3, [pc, #296]	; (8005de4 <eepromKontrol+0x304>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b09      	cmp	r3, #9
 8005cc0:	d902      	bls.n	8005cc8 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005cc2:	4b48      	ldr	r3, [pc, #288]	; (8005de4 <eepromKontrol+0x304>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005cc8:	4b45      	ldr	r3, [pc, #276]	; (8005de0 <eepromKontrol+0x300>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b09      	cmp	r3, #9
 8005cce:	d902      	bls.n	8005cd6 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005cd0:	4b43      	ldr	r3, [pc, #268]	; (8005de0 <eepromKontrol+0x300>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005cd6:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <eepromKontrol+0x2fc>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d902      	bls.n	8005ce4 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005cde:	4b3f      	ldr	r3, [pc, #252]	; (8005ddc <eepromKontrol+0x2fc>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005ce4:	4b3c      	ldr	r3, [pc, #240]	; (8005dd8 <eepromKontrol+0x2f8>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d902      	bls.n	8005cf2 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005cec:	4b3a      	ldr	r3, [pc, #232]	; (8005dd8 <eepromKontrol+0x2f8>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005cf2:	4b1f      	ldr	r3, [pc, #124]	; (8005d70 <eepromKontrol+0x290>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d902      	bls.n	8005d00 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <eepromKontrol+0x290>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <eepromKontrol+0x294>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d902      	bls.n	8005d0e <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <eepromKontrol+0x294>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005d0e:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <eepromKontrol+0x298>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d902      	bls.n	8005d1c <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <eepromKontrol+0x298>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <eepromKontrol+0x29c>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d902      	bls.n	8005d2a <eepromKontrol+0x24a>
	    altLimit=1;
 8005d24:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <eepromKontrol+0x29c>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <eepromKontrol+0x2a0>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d902      	bls.n	8005d38 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <eepromKontrol+0x2a0>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <eepromKontrol+0x2a4>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d902      	bls.n	8005d46 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <eepromKontrol+0x2a4>)
 8005d42:	2203      	movs	r2, #3
 8005d44:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005d46:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <eepromKontrol+0x31c>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d902      	bls.n	8005d54 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005d4e:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <eepromKontrol+0x31c>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <eepromKontrol+0x2a8>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d965      	bls.n	8005e28 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <eepromKontrol+0x2a8>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e061      	b.n	8005e28 <eepromKontrol+0x348>
 8005d64:	20000b28 	.word	0x20000b28
 8005d68:	20000df8 	.word	0x20000df8
 8005d6c:	20000bb9 	.word	0x20000bb9
 8005d70:	20000c3a 	.word	0x20000c3a
 8005d74:	20000c3d 	.word	0x20000c3d
 8005d78:	20000c3e 	.word	0x20000c3e
 8005d7c:	20000c3f 	.word	0x20000c3f
 8005d80:	20000c40 	.word	0x20000c40
 8005d84:	20000c41 	.word	0x20000c41
 8005d88:	20000c42 	.word	0x20000c42
 8005d8c:	20000c52 	.word	0x20000c52
 8005d90:	20000c43 	.word	0x20000c43
 8005d94:	20000c53 	.word	0x20000c53
 8005d98:	20000c44 	.word	0x20000c44
 8005d9c:	20000c54 	.word	0x20000c54
 8005da0:	20000c47 	.word	0x20000c47
 8005da4:	20000c48 	.word	0x20000c48
 8005da8:	20000c49 	.word	0x20000c49
 8005dac:	20000c4a 	.word	0x20000c4a
 8005db0:	20000c4b 	.word	0x20000c4b
 8005db4:	20000c4c 	.word	0x20000c4c
 8005db8:	20000c4d 	.word	0x20000c4d
 8005dbc:	20000c4e 	.word	0x20000c4e
 8005dc0:	20000c4f 	.word	0x20000c4f
 8005dc4:	20000c50 	.word	0x20000c50
 8005dc8:	20000c51 	.word	0x20000c51
 8005dcc:	20000c55 	.word	0x20000c55
 8005dd0:	20000c57 	.word	0x20000c57
 8005dd4:	20000c35 	.word	0x20000c35
 8005dd8:	20000c36 	.word	0x20000c36
 8005ddc:	20000c37 	.word	0x20000c37
 8005de0:	200009b1 	.word	0x200009b1
 8005de4:	200009b2 	.word	0x200009b2
 8005de8:	20000c38 	.word	0x20000c38
 8005dec:	20000c5a 	.word	0x20000c5a
 8005df0:	20000c58 	.word	0x20000c58
 8005df4:	20000c46 	.word	0x20000c46
 8005df8:	20000c59 	.word	0x20000c59
 8005dfc:	20000c45 	.word	0x20000c45
 8005e00:	20000c5b 	.word	0x20000c5b
 8005e04:	20000c5c 	.word	0x20000c5c
 8005e08:	20000c5d 	.word	0x20000c5d
 8005e0c:	20000c5e 	.word	0x20000c5e
 8005e10:	20000c5f 	.word	0x20000c5f
 8005e14:	20000c60 	.word	0x20000c60
 8005e18:	20000c61 	.word	0x20000c61
 8005e1c:	20000c62 	.word	0x20000c62
 8005e20:	20000c63 	.word	0x20000c63
 8005e24:	20000c64 	.word	0x20000c64
	}

	if(kapi1AcSure>5) {
 8005e28:	4b55      	ldr	r3, [pc, #340]	; (8005f80 <eepromKontrol+0x4a0>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d902      	bls.n	8005e36 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005e30:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <eepromKontrol+0x4a0>)
 8005e32:	2205      	movs	r2, #5
 8005e34:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005e36:	4b53      	ldr	r3, [pc, #332]	; (8005f84 <eepromKontrol+0x4a4>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d902      	bls.n	8005e44 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005e3e:	4b51      	ldr	r3, [pc, #324]	; (8005f84 <eepromKontrol+0x4a4>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005e44:	4b50      	ldr	r3, [pc, #320]	; (8005f88 <eepromKontrol+0x4a8>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d902      	bls.n	8005e52 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005e4c:	4b4e      	ldr	r3, [pc, #312]	; (8005f88 <eepromKontrol+0x4a8>)
 8005e4e:	2205      	movs	r2, #5
 8005e50:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005e52:	4b4e      	ldr	r3, [pc, #312]	; (8005f8c <eepromKontrol+0x4ac>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005e5a:	4b4c      	ldr	r3, [pc, #304]	; (8005f8c <eepromKontrol+0x4ac>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005e60:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <eepromKontrol+0x4b0>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d902      	bls.n	8005e6e <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005e68:	4b49      	ldr	r3, [pc, #292]	; (8005f90 <eepromKontrol+0x4b0>)
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005e6e:	4b49      	ldr	r3, [pc, #292]	; (8005f94 <eepromKontrol+0x4b4>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d902      	bls.n	8005e7c <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005e76:	4b47      	ldr	r3, [pc, #284]	; (8005f94 <eepromKontrol+0x4b4>)
 8005e78:	2205      	movs	r2, #5
 8005e7a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005e7c:	4b46      	ldr	r3, [pc, #280]	; (8005f98 <eepromKontrol+0x4b8>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d902      	bls.n	8005e8a <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005e84:	4b44      	ldr	r3, [pc, #272]	; (8005f98 <eepromKontrol+0x4b8>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005e8a:	4b44      	ldr	r3, [pc, #272]	; (8005f9c <eepromKontrol+0x4bc>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d902      	bls.n	8005e98 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005e92:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <eepromKontrol+0x4bc>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005e98:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <eepromKontrol+0x4c0>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d902      	bls.n	8005ea6 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005ea0:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <eepromKontrol+0x4c0>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <eepromKontrol+0x4c4>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d902      	bls.n	8005eb4 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005eae:	4b3d      	ldr	r3, [pc, #244]	; (8005fa4 <eepromKontrol+0x4c4>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005eb4:	4b3c      	ldr	r3, [pc, #240]	; (8005fa8 <eepromKontrol+0x4c8>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d902      	bls.n	8005ec2 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <eepromKontrol+0x4c8>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <eepromKontrol+0x4cc>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d902      	bls.n	8005ed0 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005eca:	4b38      	ldr	r3, [pc, #224]	; (8005fac <eepromKontrol+0x4cc>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <eepromKontrol+0x4d0>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b05      	cmp	r3, #5
 8005ed6:	d902      	bls.n	8005ede <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <eepromKontrol+0x4d0>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005ede:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <eepromKontrol+0x4d4>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d902      	bls.n	8005eec <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005ee6:	4b33      	ldr	r3, [pc, #204]	; (8005fb4 <eepromKontrol+0x4d4>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <eepromKontrol+0x4d8>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d902      	bls.n	8005efa <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005ef4:	4b30      	ldr	r3, [pc, #192]	; (8005fb8 <eepromKontrol+0x4d8>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005efa:	4b30      	ldr	r3, [pc, #192]	; (8005fbc <eepromKontrol+0x4dc>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d902      	bls.n	8005f08 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005f02:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <eepromKontrol+0x4dc>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005f08:	4b2d      	ldr	r3, [pc, #180]	; (8005fc0 <eepromKontrol+0x4e0>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2bb4      	cmp	r3, #180	; 0xb4
 8005f0e:	d902      	bls.n	8005f16 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005f10:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <eepromKontrol+0x4e0>)
 8005f12:	223c      	movs	r2, #60	; 0x3c
 8005f14:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005f16:	4b2b      	ldr	r3, [pc, #172]	; (8005fc4 <eepromKontrol+0x4e4>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d902      	bls.n	8005f24 <eepromKontrol+0x444>
	    buzzer=0;
 8005f1e:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <eepromKontrol+0x4e4>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005f24:	4b28      	ldr	r3, [pc, #160]	; (8005fc8 <eepromKontrol+0x4e8>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d902      	bls.n	8005f32 <eepromKontrol+0x452>
	    demoMode=0;
 8005f2c:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <eepromKontrol+0x4e8>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <eepromKontrol+0x4ec>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d902      	bls.n	8005f40 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005f3a:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <eepromKontrol+0x4ec>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005f40:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <eepromKontrol+0x4f0>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d902      	bls.n	8005f4e <eepromKontrol+0x46e>
	    dilSecim=0;
 8005f48:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <eepromKontrol+0x4f0>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <eepromKontrol+0x4f4>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d902      	bls.n	8005f5c <eepromKontrol+0x47c>
		iotMode=0;
 8005f56:	4b1f      	ldr	r3, [pc, #124]	; (8005fd4 <eepromKontrol+0x4f4>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f60:	f003 f8c2 	bl	80090e8 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005f64:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <eepromKontrol+0x4f4>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d104      	bne.n	8005f76 <eepromKontrol+0x496>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <eepromKontrol+0x496>
		convertAndSendData();
 8005f72:	f7ff fd81 	bl	8005a78 <convertAndSendData>
	}
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000c52 	.word	0x20000c52
 8005f84:	20000c43 	.word	0x20000c43
 8005f88:	20000c53 	.word	0x20000c53
 8005f8c:	20000c44 	.word	0x20000c44
 8005f90:	20000c46 	.word	0x20000c46
 8005f94:	20000c54 	.word	0x20000c54
 8005f98:	20000c47 	.word	0x20000c47
 8005f9c:	20000c48 	.word	0x20000c48
 8005fa0:	20000c49 	.word	0x20000c49
 8005fa4:	20000c4a 	.word	0x20000c4a
 8005fa8:	20000c4b 	.word	0x20000c4b
 8005fac:	20000c4c 	.word	0x20000c4c
 8005fb0:	20000c4d 	.word	0x20000c4d
 8005fb4:	20000c4e 	.word	0x20000c4e
 8005fb8:	20000c4f 	.word	0x20000c4f
 8005fbc:	20000c50 	.word	0x20000c50
 8005fc0:	20000c51 	.word	0x20000c51
 8005fc4:	20000c55 	.word	0x20000c55
 8005fc8:	20000c57 	.word	0x20000c57
 8005fcc:	20000c59 	.word	0x20000c59
 8005fd0:	20000c5a 	.word	0x20000c5a
 8005fd4:	20000c58 	.word	0x20000c58

08005fd8 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af04      	add	r7, sp, #16
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005fe2:	4b26      	ldr	r3, [pc, #152]	; (800607c <hata2EEPROM+0xa4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <hata2EEPROM+0xa8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4413      	add	r3, r2
 8005fee:	4a25      	ldr	r2, [pc, #148]	; (8006084 <hata2EEPROM+0xac>)
 8005ff0:	5cd3      	ldrb	r3, [r2, r3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005ff6:	f000 f849 	bl	800608c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005ffa:	e000      	b.n	8005ffe <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005ffc:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e012      	b.n	800602a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8006004:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <hata2EEPROM+0xa8>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <hata2EEPROM+0xac>)
 800600e:	5cd3      	ldrb	r3, [r2, r3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <hata2EEPROM+0xa8>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	4919      	ldr	r1, [pc, #100]	; (8006084 <hata2EEPROM+0xac>)
 800601e:	79fa      	ldrb	r2, [r7, #7]
 8006020:	54ca      	strb	r2, [r1, r3]
					break;
 8006022:	e007      	b.n	8006034 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	4b14      	ldr	r3, [pc, #80]	; (800607c <hata2EEPROM+0xa4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	429a      	cmp	r2, r3
 8006032:	dbe7      	blt.n	8006004 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <hata2EEPROM+0xa8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	b299      	uxth	r1, r3
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <hata2EEPROM+0xa4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	b298      	uxth	r0, r3
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <hata2EEPROM+0xa8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <hata2EEPROM+0xac>)
 8006046:	4413      	add	r3, r2
 8006048:	4a0c      	ldr	r2, [pc, #48]	; (800607c <hata2EEPROM+0xa4>)
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	b292      	uxth	r2, r2
 800604e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8006052:	9402      	str	r4, [sp, #8]
 8006054:	9201      	str	r2, [sp, #4]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4603      	mov	r3, r0
 800605a:	460a      	mov	r2, r1
 800605c:	21a0      	movs	r1, #160	; 0xa0
 800605e:	480a      	ldr	r0, [pc, #40]	; (8006088 <hata2EEPROM+0xb0>)
 8006060:	f004 f8cc 	bl	800a1fc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8006064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006068:	f003 f83e 	bl	80090e8 <HAL_Delay>
	eepromKontrol(1);
 800606c:	2001      	movs	r0, #1
 800606e:	f7ff fd37 	bl	8005ae0 <eepromKontrol>
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bd90      	pop	{r4, r7, pc}
 800607a:	bf00      	nop
 800607c:	20000938 	.word	0x20000938
 8006080:	2000093c 	.word	0x2000093c
 8006084:	20000b28 	.word	0x20000b28
 8006088:	20000df8 	.word	0x20000df8

0800608c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	e009      	b.n	80060ac <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006098:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <eepromDataFillWithEmpty+0x38>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a0:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <eepromDataFillWithEmpty+0x3c>)
 80060a2:	2100      	movs	r1, #0
 80060a4:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3301      	adds	r3, #1
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <eepromDataFillWithEmpty+0x40>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	dbf0      	blt.n	8006098 <eepromDataFillWithEmpty+0xc>
	}
}
 80060b6:	bf00      	nop
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000910 	.word	0x20000910
 80060c8:	20000b28 	.word	0x20000b28
 80060cc:	20000938 	.word	0x20000938

080060d0 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
	timer1=millis;
 80060d4:	4b47      	ldr	r3, [pc, #284]	; (80061f4 <bekle+0x124>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a47      	ldr	r2, [pc, #284]	; (80061f8 <bekle+0x128>)
 80060da:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060dc:	e002      	b.n	80060e4 <bekle+0x14>
    	butonKontrol = 1;
 80060de:	4b47      	ldr	r3, [pc, #284]	; (80061fc <bekle+0x12c>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060e4:	2101      	movs	r1, #1
 80060e6:	4846      	ldr	r0, [pc, #280]	; (8006200 <bekle+0x130>)
 80060e8:	f003 fdce 	bl	8009c88 <HAL_GPIO_ReadPin>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d109      	bne.n	8006106 <bekle+0x36>
 80060f2:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <bekle+0x124>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <bekle+0x128>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d0ef      	beq.n	80060de <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060fe:	e002      	b.n	8006106 <bekle+0x36>
    	butonKontrol = 1;
 8006100:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <bekle+0x12c>)
 8006102:	2201      	movs	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006106:	2108      	movs	r1, #8
 8006108:	483e      	ldr	r0, [pc, #248]	; (8006204 <bekle+0x134>)
 800610a:	f003 fdbd 	bl	8009c88 <HAL_GPIO_ReadPin>
 800610e:	4603      	mov	r3, r0
 8006110:	2b01      	cmp	r3, #1
 8006112:	d109      	bne.n	8006128 <bekle+0x58>
 8006114:	4b37      	ldr	r3, [pc, #220]	; (80061f4 <bekle+0x124>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <bekle+0x128>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d0ef      	beq.n	8006100 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006120:	e002      	b.n	8006128 <bekle+0x58>
    	butonKontrol = 1;
 8006122:	4b36      	ldr	r3, [pc, #216]	; (80061fc <bekle+0x12c>)
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006128:	2102      	movs	r1, #2
 800612a:	4835      	ldr	r0, [pc, #212]	; (8006200 <bekle+0x130>)
 800612c:	f003 fdac 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006130:	4603      	mov	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	d109      	bne.n	800614a <bekle+0x7a>
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <bekle+0x124>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b2f      	ldr	r3, [pc, #188]	; (80061f8 <bekle+0x128>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d0ef      	beq.n	8006122 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006142:	e002      	b.n	800614a <bekle+0x7a>
    	butonKontrol = 1;
 8006144:	4b2d      	ldr	r3, [pc, #180]	; (80061fc <bekle+0x12c>)
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800614a:	2104      	movs	r1, #4
 800614c:	482c      	ldr	r0, [pc, #176]	; (8006200 <bekle+0x130>)
 800614e:	f003 fd9b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d109      	bne.n	800616c <bekle+0x9c>
 8006158:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <bekle+0x124>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <bekle+0x128>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d0ef      	beq.n	8006144 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006164:	e002      	b.n	800616c <bekle+0x9c>
    	butonKontrol = 1;
 8006166:	4b25      	ldr	r3, [pc, #148]	; (80061fc <bekle+0x12c>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800616c:	2108      	movs	r1, #8
 800616e:	4824      	ldr	r0, [pc, #144]	; (8006200 <bekle+0x130>)
 8006170:	f003 fd8a 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006174:	4603      	mov	r3, r0
 8006176:	2b01      	cmp	r3, #1
 8006178:	d109      	bne.n	800618e <bekle+0xbe>
 800617a:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <bekle+0x124>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <bekle+0x128>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d0ef      	beq.n	8006166 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006186:	e002      	b.n	800618e <bekle+0xbe>
    	butonKontrol = 1;
 8006188:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <bekle+0x12c>)
 800618a:	2201      	movs	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800618e:	2180      	movs	r1, #128	; 0x80
 8006190:	481c      	ldr	r0, [pc, #112]	; (8006204 <bekle+0x134>)
 8006192:	f003 fd79 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <bekle+0xe0>
 800619c:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <bekle+0x124>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <bekle+0x128>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d0ef      	beq.n	8006188 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061a8:	e002      	b.n	80061b0 <bekle+0xe0>
    	butonKontrol = 1;
 80061aa:	4b14      	ldr	r3, [pc, #80]	; (80061fc <bekle+0x12c>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061b4:	4813      	ldr	r0, [pc, #76]	; (8006204 <bekle+0x134>)
 80061b6:	f003 fd67 	bl	8009c88 <HAL_GPIO_ReadPin>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <bekle+0x104>
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <bekle+0x124>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <bekle+0x128>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d0ee      	beq.n	80061aa <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061cc:	e002      	b.n	80061d4 <bekle+0x104>
    	butonKontrol = 1;
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <bekle+0x12c>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061d8:	480a      	ldr	r0, [pc, #40]	; (8006204 <bekle+0x134>)
 80061da:	f003 fd55 	bl	8009c88 <HAL_GPIO_ReadPin>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <bekle+0x120>
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <bekle+0x124>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <bekle+0x128>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d0ee      	beq.n	80061ce <bekle+0xfe>
    }

}
 80061f0:	bf00      	nop
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000bc4 	.word	0x20000bc4
 80061f8:	20000bcc 	.word	0x20000bcc
 80061fc:	20000c68 	.word	0x20000c68
 8006200:	40010800 	.word	0x40010800
 8006204:	40011000 	.word	0x40011000

08006208 <i2cTest>:

void i2cTest() {
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800620e:	463b      	mov	r3, r7
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	609a      	str	r2, [r3, #8]
 8006218:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800621a:	4b50      	ldr	r3, [pc, #320]	; (800635c <i2cTest+0x154>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b4e      	ldr	r3, [pc, #312]	; (800635c <i2cTest+0x154>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800622a:	484c      	ldr	r0, [pc, #304]	; (800635c <i2cTest+0x154>)
 800622c:	f003 feb8 	bl	8009fa0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006230:	23c0      	movs	r3, #192	; 0xc0
 8006232:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006234:	2311      	movs	r3, #17
 8006236:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006238:	2301      	movs	r3, #1
 800623a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800623c:	2303      	movs	r3, #3
 800623e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006240:	463b      	mov	r3, r7
 8006242:	4619      	mov	r1, r3
 8006244:	4846      	ldr	r0, [pc, #280]	; (8006360 <i2cTest+0x158>)
 8006246:	f003 fabf 	bl	80097c8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800624a:	2201      	movs	r2, #1
 800624c:	2140      	movs	r1, #64	; 0x40
 800624e:	4844      	ldr	r0, [pc, #272]	; (8006360 <i2cTest+0x158>)
 8006250:	f003 fd31 	bl	8009cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006254:	2201      	movs	r2, #1
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	4841      	ldr	r0, [pc, #260]	; (8006360 <i2cTest+0x158>)
 800625a:	f003 fd2c 	bl	8009cb6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800625e:	200a      	movs	r0, #10
 8006260:	f002 ff42 	bl	80090e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006264:	bf00      	nop
 8006266:	2140      	movs	r1, #64	; 0x40
 8006268:	483d      	ldr	r0, [pc, #244]	; (8006360 <i2cTest+0x158>)
 800626a:	f003 fd0d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800626e:	4603      	mov	r3, r0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d006      	beq.n	8006282 <i2cTest+0x7a>
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	483a      	ldr	r0, [pc, #232]	; (8006360 <i2cTest+0x158>)
 8006278:	f003 fd06 	bl	8009c88 <HAL_GPIO_ReadPin>
 800627c:	4603      	mov	r3, r0
 800627e:	2b01      	cmp	r3, #1
 8006280:	d1f1      	bne.n	8006266 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006282:	2200      	movs	r2, #0
 8006284:	2180      	movs	r1, #128	; 0x80
 8006286:	4836      	ldr	r0, [pc, #216]	; (8006360 <i2cTest+0x158>)
 8006288:	f003 fd15 	bl	8009cb6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800628c:	200a      	movs	r0, #10
 800628e:	f002 ff2b 	bl	80090e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8006292:	bf00      	nop
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	4832      	ldr	r0, [pc, #200]	; (8006360 <i2cTest+0x158>)
 8006298:	f003 fcf6 	bl	8009c88 <HAL_GPIO_ReadPin>
 800629c:	4603      	mov	r3, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d0f8      	beq.n	8006294 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	482e      	ldr	r0, [pc, #184]	; (8006360 <i2cTest+0x158>)
 80062a8:	f003 fd05 	bl	8009cb6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062ac:	200a      	movs	r0, #10
 80062ae:	f002 ff1b 	bl	80090e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80062b2:	bf00      	nop
 80062b4:	2140      	movs	r1, #64	; 0x40
 80062b6:	482a      	ldr	r0, [pc, #168]	; (8006360 <i2cTest+0x158>)
 80062b8:	f003 fce6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d0f8      	beq.n	80062b4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80062c2:	2201      	movs	r2, #1
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	4826      	ldr	r0, [pc, #152]	; (8006360 <i2cTest+0x158>)
 80062c8:	f003 fcf5 	bl	8009cb6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062cc:	200a      	movs	r0, #10
 80062ce:	f002 ff0b 	bl	80090e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80062d2:	bf00      	nop
 80062d4:	2140      	movs	r1, #64	; 0x40
 80062d6:	4822      	ldr	r0, [pc, #136]	; (8006360 <i2cTest+0x158>)
 80062d8:	f003 fcd6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d1f8      	bne.n	80062d4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80062e2:	2201      	movs	r2, #1
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	481e      	ldr	r0, [pc, #120]	; (8006360 <i2cTest+0x158>)
 80062e8:	f003 fce5 	bl	8009cb6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062ec:	200a      	movs	r0, #10
 80062ee:	f002 fefb 	bl	80090e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80062f2:	bf00      	nop
 80062f4:	2180      	movs	r1, #128	; 0x80
 80062f6:	481a      	ldr	r0, [pc, #104]	; (8006360 <i2cTest+0x158>)
 80062f8:	f003 fcc6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d1f8      	bne.n	80062f4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006302:	23c0      	movs	r3, #192	; 0xc0
 8006304:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8006306:	2312      	movs	r3, #18
 8006308:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800630a:	2301      	movs	r3, #1
 800630c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800630e:	2303      	movs	r3, #3
 8006310:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006312:	463b      	mov	r3, r7
 8006314:	4619      	mov	r1, r3
 8006316:	4812      	ldr	r0, [pc, #72]	; (8006360 <i2cTest+0x158>)
 8006318:	f003 fa56 	bl	80097c8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <i2cTest+0x154>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <i2cTest+0x154>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <i2cTest+0x154>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <i2cTest+0x154>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800633a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <i2cTest+0x154>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <i2cTest+0x154>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800634c:	4803      	ldr	r0, [pc, #12]	; (800635c <i2cTest+0x154>)
 800634e:	f003 fce3 	bl	8009d18 <HAL_I2C_Init>
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000df8 	.word	0x20000df8
 8006360:	40010c00 	.word	0x40010c00

08006364 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006368:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <checkLCDBacklight+0x34>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <checkLCDBacklight+0x38>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	1ad2      	subs	r2, r2, r3
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <checkLCDBacklight+0x3c>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	460b      	mov	r3, r1
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	429a      	cmp	r2, r3
 8006382:	d303      	bcc.n	800638c <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006384:	2000      	movs	r0, #0
 8006386:	f7fa fa87 	bl	8000898 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800638a:	e002      	b.n	8006392 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 800638c:	2001      	movs	r0, #1
 800638e:	f7fa fa83 	bl	8000898 <lcd_backlight>
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000bc4 	.word	0x20000bc4
 800639c:	20000be0 	.word	0x20000be0
 80063a0:	20000940 	.word	0x20000940

080063a4 <checkBasincSalteri>:

void checkBasincSalteri() {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80063a8:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <checkBasincSalteri+0x54>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <checkBasincSalteri+0x12>
		basincVar=1;
 80063b0:	4b12      	ldr	r3, [pc, #72]	; (80063fc <checkBasincSalteri+0x58>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <checkBasincSalteri+0x54>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d119      	bne.n	80063f2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80063be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c2:	480f      	ldr	r0, [pc, #60]	; (8006400 <checkBasincSalteri+0x5c>)
 80063c4:	f003 fc60 	bl	8009c88 <HAL_GPIO_ReadPin>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <checkBasincSalteri+0x60>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <checkBasincSalteri+0x64>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d90a      	bls.n	80063f2 <checkBasincSalteri+0x4e>
				basincVar=1;
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <checkBasincSalteri+0x58>)
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80063e2:	e006      	b.n	80063f2 <checkBasincSalteri+0x4e>
			timer5=millis;
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <checkBasincSalteri+0x60>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a07      	ldr	r2, [pc, #28]	; (8006408 <checkBasincSalteri+0x64>)
 80063ea:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <checkBasincSalteri+0x58>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000c40 	.word	0x20000c40
 80063fc:	20000c3c 	.word	0x20000c3c
 8006400:	40011000 	.word	0x40011000
 8006404:	20000bc4 	.word	0x20000bc4
 8006408:	20000bdc 	.word	0x20000bdc

0800640c <checkBasGonder>:

void checkBasGonder() {
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <checkBasGonder+0x74>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d10b      	bne.n	8006430 <checkBasGonder+0x24>
 8006418:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <checkBasGonder+0x78>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <checkBasGonder+0x24>
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <checkBasGonder+0x7c>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006428:	4b18      	ldr	r3, [pc, #96]	; (800648c <checkBasGonder+0x80>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e009      	b.n	8006444 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006430:	4b14      	ldr	r3, [pc, #80]	; (8006484 <checkBasGonder+0x78>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <checkBasGonder+0x80>)
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <checkBasGonder+0x74>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10b      	bne.n	8006464 <checkBasGonder+0x58>
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <checkBasGonder+0x84>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <checkBasGonder+0x58>
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <checkBasGonder+0x7c>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <checkBasGonder+0x88>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006462:	e009      	b.n	8006478 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006464:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <checkBasGonder+0x84>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f083 0301 	eor.w	r3, r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <checkBasGonder+0x88>)
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	20000c3a 	.word	0x20000c3a
 8006484:	20000c6e 	.word	0x20000c6e
 8006488:	20000c48 	.word	0x20000c48
 800648c:	20000c75 	.word	0x20000c75
 8006490:	20000c71 	.word	0x20000c71
 8006494:	20000c76 	.word	0x20000c76

08006498 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800649c:	4b24      	ldr	r3, [pc, #144]	; (8006530 <checkKapiSecimleri+0x98>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80064a4:	4b23      	ldr	r3, [pc, #140]	; (8006534 <checkKapiSecimleri+0x9c>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80064aa:	4b21      	ldr	r3, [pc, #132]	; (8006530 <checkKapiSecimleri+0x98>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10e      	bne.n	80064d0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80064b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064b6:	4820      	ldr	r0, [pc, #128]	; (8006538 <checkKapiSecimleri+0xa0>)
 80064b8:	f003 fbe6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80064c2:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <checkKapiSecimleri+0x9c>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e002      	b.n	80064d0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <checkKapiSecimleri+0x9c>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80064d0:	4b17      	ldr	r3, [pc, #92]	; (8006530 <checkKapiSecimleri+0x98>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d10e      	bne.n	80064f6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80064d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064dc:	4816      	ldr	r0, [pc, #88]	; (8006538 <checkKapiSecimleri+0xa0>)
 80064de:	f003 fbd3 	bl	8009c88 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d103      	bne.n	80064f0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80064e8:	4b12      	ldr	r3, [pc, #72]	; (8006534 <checkKapiSecimleri+0x9c>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e002      	b.n	80064f6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <checkKapiSecimleri+0x9c>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80064f6:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <checkKapiSecimleri+0x98>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d116      	bne.n	800652c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80064fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006502:	480d      	ldr	r0, [pc, #52]	; (8006538 <checkKapiSecimleri+0xa0>)
 8006504:	f003 fbc0 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <checkKapiSecimleri+0x8e>
 800650e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006512:	4809      	ldr	r0, [pc, #36]	; (8006538 <checkKapiSecimleri+0xa0>)
 8006514:	f003 fbb8 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <checkKapiSecimleri+0x9c>)
 8006520:	2201      	movs	r2, #1
 8006522:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006524:	e002      	b.n	800652c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8006526:	4b03      	ldr	r3, [pc, #12]	; (8006534 <checkKapiSecimleri+0x9c>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
}
 800652c:	bf00      	nop
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000c41 	.word	0x20000c41
 8006534:	20000c8c 	.word	0x20000c8c
 8006538:	40010800 	.word	0x40010800

0800653c <checkAktifCalisma>:

void checkAktifCalisma() {
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006540:	4b62      	ldr	r3, [pc, #392]	; (80066cc <checkAktifCalisma+0x190>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f041 8332 	bne.w	8007bae <checkAktifCalisma+0x1672>
 800654a:	4b61      	ldr	r3, [pc, #388]	; (80066d0 <checkAktifCalisma+0x194>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f041 832d 	bne.w	8007bae <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006554:	4b5f      	ldr	r3, [pc, #380]	; (80066d4 <checkAktifCalisma+0x198>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11a      	bne.n	8006592 <checkAktifCalisma+0x56>
 800655c:	4b5e      	ldr	r3, [pc, #376]	; (80066d8 <checkAktifCalisma+0x19c>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <checkAktifCalisma+0x56>
 8006564:	4b5d      	ldr	r3, [pc, #372]	; (80066dc <checkAktifCalisma+0x1a0>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <checkAktifCalisma+0x46>
 800656c:	4b5c      	ldr	r3, [pc, #368]	; (80066e0 <checkAktifCalisma+0x1a4>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f083 0301 	eor.w	r3, r3, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <checkAktifCalisma+0x46>
 800657a:	4b5a      	ldr	r3, [pc, #360]	; (80066e4 <checkAktifCalisma+0x1a8>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d007      	beq.n	8006592 <checkAktifCalisma+0x56>
 8006582:	4b59      	ldr	r3, [pc, #356]	; (80066e8 <checkAktifCalisma+0x1ac>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d018      	beq.n	80065bc <checkAktifCalisma+0x80>
 800658a:	4b58      	ldr	r3, [pc, #352]	; (80066ec <checkAktifCalisma+0x1b0>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d114      	bne.n	80065bc <checkAktifCalisma+0x80>
 8006592:	4b57      	ldr	r3, [pc, #348]	; (80066f0 <checkAktifCalisma+0x1b4>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d010      	beq.n	80065bc <checkAktifCalisma+0x80>
 800659a:	4b56      	ldr	r3, [pc, #344]	; (80066f4 <checkAktifCalisma+0x1b8>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00c      	beq.n	80065bc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80065a2:	2201      	movs	r2, #1
 80065a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065a8:	4853      	ldr	r0, [pc, #332]	; (80066f8 <checkAktifCalisma+0x1bc>)
 80065aa:	f003 fb84 	bl	8009cb6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80065ae:	4b53      	ldr	r3, [pc, #332]	; (80066fc <checkAktifCalisma+0x1c0>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80065b4:	4b52      	ldr	r3, [pc, #328]	; (8006700 <checkAktifCalisma+0x1c4>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e008      	b.n	80065ce <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065bc:	2200      	movs	r2, #0
 80065be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065c2:	484d      	ldr	r0, [pc, #308]	; (80066f8 <checkAktifCalisma+0x1bc>)
 80065c4:	f003 fb77 	bl	8009cb6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80065c8:	4b4c      	ldr	r3, [pc, #304]	; (80066fc <checkAktifCalisma+0x1c0>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80065ce:	4b40      	ldr	r3, [pc, #256]	; (80066d0 <checkAktifCalisma+0x194>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d160      	bne.n	8006698 <checkAktifCalisma+0x15c>
 80065d6:	4b46      	ldr	r3, [pc, #280]	; (80066f0 <checkAktifCalisma+0x1b4>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d05c      	beq.n	8006698 <checkAktifCalisma+0x15c>
 80065de:	4b45      	ldr	r3, [pc, #276]	; (80066f4 <checkAktifCalisma+0x1b8>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d058      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80065e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065ea:	4843      	ldr	r0, [pc, #268]	; (80066f8 <checkAktifCalisma+0x1bc>)
 80065ec:	f003 fb4c 	bl	8009c88 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <checkAktifCalisma+0xc2>
 80065f6:	4b43      	ldr	r3, [pc, #268]	; (8006704 <checkAktifCalisma+0x1c8>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04c      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80065fe:	2102      	movs	r1, #2
 8006600:	4841      	ldr	r0, [pc, #260]	; (8006708 <checkAktifCalisma+0x1cc>)
 8006602:	f003 fb41 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d145      	bne.n	8006698 <checkAktifCalisma+0x15c>
				&& (basincVar)
 800660c:	4b3f      	ldr	r3, [pc, #252]	; (800670c <checkAktifCalisma+0x1d0>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d041      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006618:	4837      	ldr	r0, [pc, #220]	; (80066f8 <checkAktifCalisma+0x1bc>)
 800661a:	f003 fb35 	bl	8009c88 <HAL_GPIO_ReadPin>
 800661e:	4603      	mov	r3, r0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10e      	bne.n	8006642 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006628:	4833      	ldr	r0, [pc, #204]	; (80066f8 <checkAktifCalisma+0x1bc>)
 800662a:	f003 fb2d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800662e:	4603      	mov	r3, r0
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	4834      	ldr	r0, [pc, #208]	; (8006708 <checkAktifCalisma+0x1cc>)
 8006638:	f003 fb26 	bl	8009c88 <HAL_GPIO_ReadPin>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d003      	beq.n	800664a <checkAktifCalisma+0x10e>
 8006642:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <checkAktifCalisma+0x198>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d026      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <checkAktifCalisma+0x1a0>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f083 0301 	eor.w	r3, r3, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01f      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006658:	4b1f      	ldr	r3, [pc, #124]	; (80066d8 <checkAktifCalisma+0x19c>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f083 0301 	eor.w	r3, r3, #1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d018      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <checkAktifCalisma+0x1ac>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	f083 0301 	eor.w	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d011      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006674:	4b26      	ldr	r3, [pc, #152]	; (8006710 <checkAktifCalisma+0x1d4>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f083 0301 	eor.w	r3, r3, #1
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <checkAktifCalisma+0x1d8>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f083 0301 	eor.w	r3, r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <checkAktifCalisma+0x198>)
 8006692:	2201      	movs	r2, #1
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e002      	b.n	800669e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006698:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <checkAktifCalisma+0x198>)
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <checkAktifCalisma+0x198>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d03a      	beq.n	800671c <checkAktifCalisma+0x1e0>
 80066a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066aa:	4817      	ldr	r0, [pc, #92]	; (8006708 <checkAktifCalisma+0x1cc>)
 80066ac:	f003 faec 	bl	8009c88 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d132      	bne.n	800671c <checkAktifCalisma+0x1e0>
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <checkAktifCalisma+0x1dc>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d02e      	beq.n	800671c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80066be:	2201      	movs	r2, #1
 80066c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066c4:	480c      	ldr	r0, [pc, #48]	; (80066f8 <checkAktifCalisma+0x1bc>)
 80066c6:	f003 faf6 	bl	8009cb6 <HAL_GPIO_WritePin>
 80066ca:	e02d      	b.n	8006728 <checkAktifCalisma+0x1ec>
 80066cc:	20000c57 	.word	0x20000c57
 80066d0:	20000c56 	.word	0x20000c56
 80066d4:	20000c6e 	.word	0x20000c6e
 80066d8:	20000c6f 	.word	0x20000c6f
 80066dc:	20000c71 	.word	0x20000c71
 80066e0:	20000c69 	.word	0x20000c69
 80066e4:	20000c4c 	.word	0x20000c4c
 80066e8:	20000c70 	.word	0x20000c70
 80066ec:	20000c4b 	.word	0x20000c4b
 80066f0:	20000c8b 	.word	0x20000c8b
 80066f4:	20000c8c 	.word	0x20000c8c
 80066f8:	40010c00 	.word	0x40010c00
 80066fc:	20000c8d 	.word	0x20000c8d
 8006700:	20000c78 	.word	0x20000c78
 8006704:	20000c75 	.word	0x20000c75
 8006708:	40011000 	.word	0x40011000
 800670c:	20000c3c 	.word	0x20000c3c
 8006710:	20000c73 	.word	0x20000c73
 8006714:	20000c74 	.word	0x20000c74
 8006718:	20000c47 	.word	0x20000c47
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800671c:	2200      	movs	r2, #0
 800671e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006722:	4860      	ldr	r0, [pc, #384]	; (80068a4 <checkAktifCalisma+0x368>)
 8006724:	f003 fac7 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006728:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <checkAktifCalisma+0x36c>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d013      	beq.n	8006758 <checkAktifCalisma+0x21c>
 8006730:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <checkAktifCalisma+0x370>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d007      	beq.n	8006748 <checkAktifCalisma+0x20c>
 8006738:	4b5c      	ldr	r3, [pc, #368]	; (80068ac <checkAktifCalisma+0x370>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d003      	beq.n	8006748 <checkAktifCalisma+0x20c>
 8006740:	4b5b      	ldr	r3, [pc, #364]	; (80068b0 <checkAktifCalisma+0x374>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d107      	bne.n	8006758 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006748:	2201      	movs	r2, #1
 800674a:	2104      	movs	r1, #4
 800674c:	4855      	ldr	r0, [pc, #340]	; (80068a4 <checkAktifCalisma+0x368>)
 800674e:	f003 fab2 	bl	8009cb6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006752:	4b58      	ldr	r3, [pc, #352]	; (80068b4 <checkAktifCalisma+0x378>)
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006758:	4b56      	ldr	r3, [pc, #344]	; (80068b4 <checkAktifCalisma+0x378>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02f      	beq.n	80067c0 <checkAktifCalisma+0x284>
 8006760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006764:	484f      	ldr	r0, [pc, #316]	; (80068a4 <checkAktifCalisma+0x368>)
 8006766:	f003 fa8f 	bl	8009c88 <HAL_GPIO_ReadPin>
 800676a:	4603      	mov	r3, r0
 800676c:	2b01      	cmp	r3, #1
 800676e:	d106      	bne.n	800677e <checkAktifCalisma+0x242>
 8006770:	4b51      	ldr	r3, [pc, #324]	; (80068b8 <checkAktifCalisma+0x37c>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f083 0301 	eor.w	r3, r3, #1
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <checkAktifCalisma+0x250>
 800677e:	2102      	movs	r1, #2
 8006780:	484e      	ldr	r0, [pc, #312]	; (80068bc <checkAktifCalisma+0x380>)
 8006782:	f003 fa81 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006786:	4603      	mov	r3, r0
 8006788:	2b01      	cmp	r3, #1
 800678a:	d119      	bne.n	80067c0 <checkAktifCalisma+0x284>
 800678c:	4b4c      	ldr	r3, [pc, #304]	; (80068c0 <checkAktifCalisma+0x384>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <checkAktifCalisma+0x284>
 8006794:	4b4b      	ldr	r3, [pc, #300]	; (80068c4 <checkAktifCalisma+0x388>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d011      	beq.n	80067c0 <checkAktifCalisma+0x284>
 800679c:	4b4a      	ldr	r3, [pc, #296]	; (80068c8 <checkAktifCalisma+0x38c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <checkAktifCalisma+0x284>
 80067a4:	4b49      	ldr	r3, [pc, #292]	; (80068cc <checkAktifCalisma+0x390>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f083 0301 	eor.w	r3, r3, #1
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <checkAktifCalisma+0x284>
			timer2=millis;
 80067b2:	4b47      	ldr	r3, [pc, #284]	; (80068d0 <checkAktifCalisma+0x394>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a47      	ldr	r2, [pc, #284]	; (80068d4 <checkAktifCalisma+0x398>)
 80067b8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80067ba:	4b44      	ldr	r3, [pc, #272]	; (80068cc <checkAktifCalisma+0x390>)
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80067c0:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <checkAktifCalisma+0x394>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b43      	ldr	r3, [pc, #268]	; (80068d4 <checkAktifCalisma+0x398>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	4a43      	ldr	r2, [pc, #268]	; (80068d8 <checkAktifCalisma+0x39c>)
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d303      	bcc.n	80067da <checkAktifCalisma+0x29e>
 80067d2:	4b3e      	ldr	r3, [pc, #248]	; (80068cc <checkAktifCalisma+0x390>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d111      	bne.n	80067fe <checkAktifCalisma+0x2c2>
 80067da:	4b39      	ldr	r3, [pc, #228]	; (80068c0 <checkAktifCalisma+0x384>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	f083 0301 	eor.w	r3, r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <checkAktifCalisma+0x2c2>
 80067e8:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <checkAktifCalisma+0x388>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f083 0301 	eor.w	r3, r3, #1
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <checkAktifCalisma+0x2c2>
 80067f6:	4b34      	ldr	r3, [pc, #208]	; (80068c8 <checkAktifCalisma+0x38c>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80067fe:	2200      	movs	r2, #0
 8006800:	2104      	movs	r1, #4
 8006802:	4828      	ldr	r0, [pc, #160]	; (80068a4 <checkAktifCalisma+0x368>)
 8006804:	f003 fa57 	bl	8009cb6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006808:	4b2a      	ldr	r3, [pc, #168]	; (80068b4 <checkAktifCalisma+0x378>)
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800680e:	4b2f      	ldr	r3, [pc, #188]	; (80068cc <checkAktifCalisma+0x390>)
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006814:	4b31      	ldr	r3, [pc, #196]	; (80068dc <checkAktifCalisma+0x3a0>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800681c:	4b30      	ldr	r3, [pc, #192]	; (80068e0 <checkAktifCalisma+0x3a4>)
 800681e:	2201      	movs	r2, #1
 8006820:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006822:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <checkAktifCalisma+0x3a0>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d116      	bne.n	8006858 <checkAktifCalisma+0x31c>
 800682a:	4b2e      	ldr	r3, [pc, #184]	; (80068e4 <checkAktifCalisma+0x3a8>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d112      	bne.n	8006858 <checkAktifCalisma+0x31c>
 8006832:	2101      	movs	r1, #1
 8006834:	4821      	ldr	r0, [pc, #132]	; (80068bc <checkAktifCalisma+0x380>)
 8006836:	f003 fa27 	bl	8009c88 <HAL_GPIO_ReadPin>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <checkAktifCalisma+0x31c>
 8006840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006844:	4817      	ldr	r0, [pc, #92]	; (80068a4 <checkAktifCalisma+0x368>)
 8006846:	f003 fa1f 	bl	8009c88 <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006850:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <checkAktifCalisma+0x3a4>)
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e011      	b.n	800687c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006858:	4b20      	ldr	r3, [pc, #128]	; (80068dc <checkAktifCalisma+0x3a0>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d10d      	bne.n	800687c <checkAktifCalisma+0x340>
 8006860:	2101      	movs	r1, #1
 8006862:	4816      	ldr	r0, [pc, #88]	; (80068bc <checkAktifCalisma+0x380>)
 8006864:	f003 fa10 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d106      	bne.n	800687c <checkAktifCalisma+0x340>
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <checkAktifCalisma+0x3a8>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <checkAktifCalisma+0x3a4>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800687c:	4b17      	ldr	r3, [pc, #92]	; (80068dc <checkAktifCalisma+0x3a0>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d134      	bne.n	80068ee <checkAktifCalisma+0x3b2>
 8006884:	4b17      	ldr	r3, [pc, #92]	; (80068e4 <checkAktifCalisma+0x3a8>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d130      	bne.n	80068ee <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800688c:	2101      	movs	r1, #1
 800688e:	480b      	ldr	r0, [pc, #44]	; (80068bc <checkAktifCalisma+0x380>)
 8006890:	f003 f9fa 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d126      	bne.n	80068e8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800689a:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <checkAktifCalisma+0x3a4>)
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e025      	b.n	80068ee <checkAktifCalisma+0x3b2>
 80068a2:	bf00      	nop
 80068a4:	40010c00 	.word	0x40010c00
 80068a8:	20000c6e 	.word	0x20000c6e
 80068ac:	20000c48 	.word	0x20000c48
 80068b0:	20000c4c 	.word	0x20000c4c
 80068b4:	20000c72 	.word	0x20000c72
 80068b8:	20000c75 	.word	0x20000c75
 80068bc:	40011000 	.word	0x40011000
 80068c0:	20000c8b 	.word	0x20000c8b
 80068c4:	20000c8c 	.word	0x20000c8c
 80068c8:	20000c3c 	.word	0x20000c3c
 80068cc:	20000c6a 	.word	0x20000c6a
 80068d0:	20000bc4 	.word	0x20000bc4
 80068d4:	20000bd0 	.word	0x20000bd0
 80068d8:	20000c4d 	.word	0x20000c4d
 80068dc:	20000c3d 	.word	0x20000c3d
 80068e0:	20000c90 	.word	0x20000c90
 80068e4:	20000c3a 	.word	0x20000c3a
			} else {
				cerceveVar=0;
 80068e8:	4b7f      	ldr	r3, [pc, #508]	; (8006ae8 <checkAktifCalisma+0x5ac>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80068ee:	4b7f      	ldr	r3, [pc, #508]	; (8006aec <checkAktifCalisma+0x5b0>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d17c      	bne.n	80069f0 <checkAktifCalisma+0x4b4>
 80068f6:	4b7e      	ldr	r3, [pc, #504]	; (8006af0 <checkAktifCalisma+0x5b4>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d078      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
 80068fe:	4b7d      	ldr	r3, [pc, #500]	; (8006af4 <checkAktifCalisma+0x5b8>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d074      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800690a:	487b      	ldr	r0, [pc, #492]	; (8006af8 <checkAktifCalisma+0x5bc>)
 800690c:	f003 f9bc 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <checkAktifCalisma+0x3e2>
 8006916:	4b79      	ldr	r3, [pc, #484]	; (8006afc <checkAktifCalisma+0x5c0>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d068      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800691e:	4b72      	ldr	r3, [pc, #456]	; (8006ae8 <checkAktifCalisma+0x5ac>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d064      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
 8006926:	4b76      	ldr	r3, [pc, #472]	; (8006b00 <checkAktifCalisma+0x5c4>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	f083 0301 	eor.w	r3, r3, #1
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d05d      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006934:	2104      	movs	r1, #4
 8006936:	4873      	ldr	r0, [pc, #460]	; (8006b04 <checkAktifCalisma+0x5c8>)
 8006938:	f003 f9a6 	bl	8009c88 <HAL_GPIO_ReadPin>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <checkAktifCalisma+0x40e>
 8006942:	4b71      	ldr	r3, [pc, #452]	; (8006b08 <checkAktifCalisma+0x5cc>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d152      	bne.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800694a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800694e:	486a      	ldr	r0, [pc, #424]	; (8006af8 <checkAktifCalisma+0x5bc>)
 8006950:	f003 f99a 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10e      	bne.n	8006978 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800695a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800695e:	4866      	ldr	r0, [pc, #408]	; (8006af8 <checkAktifCalisma+0x5bc>)
 8006960:	f003 f992 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d106      	bne.n	8006978 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800696a:	2140      	movs	r1, #64	; 0x40
 800696c:	4865      	ldr	r0, [pc, #404]	; (8006b04 <checkAktifCalisma+0x5c8>)
 800696e:	f003 f98b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d003      	beq.n	8006980 <checkAktifCalisma+0x444>
 8006978:	4b64      	ldr	r3, [pc, #400]	; (8006b0c <checkAktifCalisma+0x5d0>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d037      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006980:	4b63      	ldr	r3, [pc, #396]	; (8006b10 <checkAktifCalisma+0x5d4>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f083 0301 	eor.w	r3, r3, #1
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d030      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800698e:	4b61      	ldr	r3, [pc, #388]	; (8006b14 <checkAktifCalisma+0x5d8>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f083 0301 	eor.w	r3, r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d029      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800699c:	4b5e      	ldr	r3, [pc, #376]	; (8006b18 <checkAktifCalisma+0x5dc>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f083 0301 	eor.w	r3, r3, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d022      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80069aa:	4b5c      	ldr	r3, [pc, #368]	; (8006b1c <checkAktifCalisma+0x5e0>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f083 0301 	eor.w	r3, r3, #1
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80069b8:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <checkAktifCalisma+0x5e4>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f083 0301 	eor.w	r3, r3, #1
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d014      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80069c6:	4b57      	ldr	r3, [pc, #348]	; (8006b24 <checkAktifCalisma+0x5e8>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f083 0301 	eor.w	r3, r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80069d4:	2201      	movs	r2, #1
 80069d6:	2102      	movs	r1, #2
 80069d8:	4847      	ldr	r0, [pc, #284]	; (8006af8 <checkAktifCalisma+0x5bc>)
 80069da:	f003 f96c 	bl	8009cb6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80069de:	4b4b      	ldr	r3, [pc, #300]	; (8006b0c <checkAktifCalisma+0x5d0>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80069e4:	4b50      	ldr	r3, [pc, #320]	; (8006b28 <checkAktifCalisma+0x5ec>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80069ea:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <checkAktifCalisma+0x5f0>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80069f0:	4b46      	ldr	r3, [pc, #280]	; (8006b0c <checkAktifCalisma+0x5d0>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d033      	beq.n	8006a60 <checkAktifCalisma+0x524>
 80069f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069fc:	483e      	ldr	r0, [pc, #248]	; (8006af8 <checkAktifCalisma+0x5bc>)
 80069fe:	f003 f943 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <checkAktifCalisma+0x4da>
 8006a08:	4b3c      	ldr	r3, [pc, #240]	; (8006afc <checkAktifCalisma+0x5c0>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f083 0301 	eor.w	r3, r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <checkAktifCalisma+0x4f0>
 8006a16:	2104      	movs	r1, #4
 8006a18:	483a      	ldr	r0, [pc, #232]	; (8006b04 <checkAktifCalisma+0x5c8>)
 8006a1a:	f003 f935 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d11d      	bne.n	8006a60 <checkAktifCalisma+0x524>
 8006a24:	4b38      	ldr	r3, [pc, #224]	; (8006b08 <checkAktifCalisma+0x5cc>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d019      	beq.n	8006a60 <checkAktifCalisma+0x524>
 8006a2c:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <checkAktifCalisma+0x5b4>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <checkAktifCalisma+0x524>
 8006a34:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <checkAktifCalisma+0x5b8>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d011      	beq.n	8006a60 <checkAktifCalisma+0x524>
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	; (8006ae8 <checkAktifCalisma+0x5ac>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <checkAktifCalisma+0x524>
 8006a44:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <checkAktifCalisma+0x5f4>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f083 0301 	eor.w	r3, r3, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d006      	beq.n	8006a60 <checkAktifCalisma+0x524>
			timer2=millis;
 8006a52:	4b38      	ldr	r3, [pc, #224]	; (8006b34 <checkAktifCalisma+0x5f8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <checkAktifCalisma+0x5fc>)
 8006a58:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006a5a:	4b35      	ldr	r3, [pc, #212]	; (8006b30 <checkAktifCalisma+0x5f4>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006a60:	4b34      	ldr	r3, [pc, #208]	; (8006b34 <checkAktifCalisma+0x5f8>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <checkAktifCalisma+0x5fc>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	4a34      	ldr	r2, [pc, #208]	; (8006b3c <checkAktifCalisma+0x600>)
 8006a6c:	7812      	ldrb	r2, [r2, #0]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d303      	bcc.n	8006a7a <checkAktifCalisma+0x53e>
 8006a72:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <checkAktifCalisma+0x5f4>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d114      	bne.n	8006aa4 <checkAktifCalisma+0x568>
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <checkAktifCalisma+0x5b4>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f083 0301 	eor.w	r3, r3, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <checkAktifCalisma+0x568>
 8006a88:	4b1a      	ldr	r3, [pc, #104]	; (8006af4 <checkAktifCalisma+0x5b8>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f083 0301 	eor.w	r3, r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <checkAktifCalisma+0x568>
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <checkAktifCalisma+0x5ac>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f083 0301 	eor.w	r3, r3, #1
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4813      	ldr	r0, [pc, #76]	; (8006af8 <checkAktifCalisma+0x5bc>)
 8006aaa:	f003 f904 	bl	8009cb6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <checkAktifCalisma+0x5d0>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006ab4:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <checkAktifCalisma+0x5f4>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <checkAktifCalisma+0x5d0>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d040      	beq.n	8006b44 <checkAktifCalisma+0x608>
 8006ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ac6:	480f      	ldr	r0, [pc, #60]	; (8006b04 <checkAktifCalisma+0x5c8>)
 8006ac8:	f003 f8de 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d138      	bne.n	8006b44 <checkAktifCalisma+0x608>
 8006ad2:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <checkAktifCalisma+0x604>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d034      	beq.n	8006b44 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006ada:	2201      	movs	r2, #1
 8006adc:	2101      	movs	r1, #1
 8006ade:	4806      	ldr	r0, [pc, #24]	; (8006af8 <checkAktifCalisma+0x5bc>)
 8006ae0:	f003 f8e9 	bl	8009cb6 <HAL_GPIO_WritePin>
 8006ae4:	e033      	b.n	8006b4e <checkAktifCalisma+0x612>
 8006ae6:	bf00      	nop
 8006ae8:	20000c90 	.word	0x20000c90
 8006aec:	20000c56 	.word	0x20000c56
 8006af0:	20000c8b 	.word	0x20000c8b
 8006af4:	20000c8c 	.word	0x20000c8c
 8006af8:	40010c00 	.word	0x40010c00
 8006afc:	20000c76 	.word	0x20000c76
 8006b00:	20000c8a 	.word	0x20000c8a
 8006b04:	40011000 	.word	0x40011000
 8006b08:	20000c3f 	.word	0x20000c3f
 8006b0c:	20000c71 	.word	0x20000c71
 8006b10:	20000c6e 	.word	0x20000c6e
 8006b14:	20000c72 	.word	0x20000c72
 8006b18:	20000c6f 	.word	0x20000c6f
 8006b1c:	20000c70 	.word	0x20000c70
 8006b20:	20000c73 	.word	0x20000c73
 8006b24:	20000c74 	.word	0x20000c74
 8006b28:	20000c79 	.word	0x20000c79
 8006b2c:	20000c9a 	.word	0x20000c9a
 8006b30:	20000c69 	.word	0x20000c69
 8006b34:	20000bc4 	.word	0x20000bc4
 8006b38:	20000bd0 	.word	0x20000bd0
 8006b3c:	20000c4e 	.word	0x20000c4e
 8006b40:	20000c3e 	.word	0x20000c3e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006b44:	2200      	movs	r2, #0
 8006b46:	2101      	movs	r1, #1
 8006b48:	4836      	ldr	r0, [pc, #216]	; (8006c24 <checkAktifCalisma+0x6e8>)
 8006b4a:	f003 f8b4 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006b4e:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <checkAktifCalisma+0x6ec>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 8080 	bne.w	8006c58 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006b58:	4b34      	ldr	r3, [pc, #208]	; (8006c2c <checkAktifCalisma+0x6f0>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d003      	beq.n	8006b68 <checkAktifCalisma+0x62c>
 8006b60:	4b32      	ldr	r3, [pc, #200]	; (8006c2c <checkAktifCalisma+0x6f0>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d177      	bne.n	8006c58 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006b68:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <checkAktifCalisma+0x6f4>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d073      	beq.n	8006c58 <checkAktifCalisma+0x71c>
 8006b70:	4b30      	ldr	r3, [pc, #192]	; (8006c34 <checkAktifCalisma+0x6f8>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d06f      	beq.n	8006c58 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b7c:	4829      	ldr	r0, [pc, #164]	; (8006c24 <checkAktifCalisma+0x6e8>)
 8006b7e:	f003 f883 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d167      	bne.n	8006c58 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b8c:	482a      	ldr	r0, [pc, #168]	; (8006c38 <checkAktifCalisma+0x6fc>)
 8006b8e:	f003 f87b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <checkAktifCalisma+0x664>
 8006b98:	4b28      	ldr	r3, [pc, #160]	; (8006c3c <checkAktifCalisma+0x700>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d15b      	bne.n	8006c58 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006ba0:	2140      	movs	r1, #64	; 0x40
 8006ba2:	4825      	ldr	r0, [pc, #148]	; (8006c38 <checkAktifCalisma+0x6fc>)
 8006ba4:	f003 f870 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d10f      	bne.n	8006bce <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bb2:	481c      	ldr	r0, [pc, #112]	; (8006c24 <checkAktifCalisma+0x6e8>)
 8006bb4:	f003 f868 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d107      	bne.n	8006bce <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bc2:	4818      	ldr	r0, [pc, #96]	; (8006c24 <checkAktifCalisma+0x6e8>)
 8006bc4:	f003 f860 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d003      	beq.n	8006bd6 <checkAktifCalisma+0x69a>
 8006bce:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <checkAktifCalisma+0x704>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d040      	beq.n	8006c58 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006bd6:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <checkAktifCalisma+0x708>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f083 0301 	eor.w	r3, r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d039      	beq.n	8006c58 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006be4:	4b18      	ldr	r3, [pc, #96]	; (8006c48 <checkAktifCalisma+0x70c>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f083 0301 	eor.w	r3, r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d032      	beq.n	8006c58 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006bf2:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <checkAktifCalisma+0x710>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f083 0301 	eor.w	r3, r3, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02b      	beq.n	8006c58 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006c00:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <checkAktifCalisma+0x714>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f083 0301 	eor.w	r3, r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d024      	beq.n	8006c58 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006c0e:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <checkAktifCalisma+0x718>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f083 0301 	eor.w	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01d      	beq.n	8006c58 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <checkAktifCalisma+0x704>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e01c      	b.n	8006c5e <checkAktifCalisma+0x722>
 8006c24:	40010c00 	.word	0x40010c00
 8006c28:	20000c56 	.word	0x20000c56
 8006c2c:	20000c48 	.word	0x20000c48
 8006c30:	20000c8b 	.word	0x20000c8b
 8006c34:	20000c8c 	.word	0x20000c8c
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	20000c49 	.word	0x20000c49
 8006c40:	20000c6f 	.word	0x20000c6f
 8006c44:	20000c6e 	.word	0x20000c6e
 8006c48:	20000c72 	.word	0x20000c72
 8006c4c:	20000c71 	.word	0x20000c71
 8006c50:	20000c70 	.word	0x20000c70
 8006c54:	20000c74 	.word	0x20000c74
		} else {
			devmotoryukaricalisiyor=0;
 8006c58:	4b64      	ldr	r3, [pc, #400]	; (8006dec <checkAktifCalisma+0x8b0>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006c5e:	4b63      	ldr	r3, [pc, #396]	; (8006dec <checkAktifCalisma+0x8b0>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006c66:	2201      	movs	r2, #1
 8006c68:	2120      	movs	r1, #32
 8006c6a:	4861      	ldr	r0, [pc, #388]	; (8006df0 <checkAktifCalisma+0x8b4>)
 8006c6c:	f003 f823 	bl	8009cb6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006c70:	4b60      	ldr	r3, [pc, #384]	; (8006df4 <checkAktifCalisma+0x8b8>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006c76:	4b5f      	ldr	r3, [pc, #380]	; (8006df4 <checkAktifCalisma+0x8b8>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d025      	beq.n	8006cca <checkAktifCalisma+0x78e>
 8006c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c82:	485d      	ldr	r0, [pc, #372]	; (8006df8 <checkAktifCalisma+0x8bc>)
 8006c84:	f003 f800 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d007      	beq.n	8006c9e <checkAktifCalisma+0x762>
 8006c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c92:	4857      	ldr	r0, [pc, #348]	; (8006df0 <checkAktifCalisma+0x8b4>)
 8006c94:	f002 fff8 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d115      	bne.n	8006cca <checkAktifCalisma+0x78e>
 8006c9e:	4b57      	ldr	r3, [pc, #348]	; (8006dfc <checkAktifCalisma+0x8c0>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <checkAktifCalisma+0x78e>
 8006ca6:	4b56      	ldr	r3, [pc, #344]	; (8006e00 <checkAktifCalisma+0x8c4>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <checkAktifCalisma+0x78e>
 8006cae:	4b55      	ldr	r3, [pc, #340]	; (8006e04 <checkAktifCalisma+0x8c8>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f083 0301 	eor.w	r3, r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <checkAktifCalisma+0x78e>
			timer2=millis;
 8006cbc:	4b52      	ldr	r3, [pc, #328]	; (8006e08 <checkAktifCalisma+0x8cc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a52      	ldr	r2, [pc, #328]	; (8006e0c <checkAktifCalisma+0x8d0>)
 8006cc2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006cc4:	4b4f      	ldr	r3, [pc, #316]	; (8006e04 <checkAktifCalisma+0x8c8>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006cca:	4b4f      	ldr	r3, [pc, #316]	; (8006e08 <checkAktifCalisma+0x8cc>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b4f      	ldr	r3, [pc, #316]	; (8006e0c <checkAktifCalisma+0x8d0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	4a4e      	ldr	r2, [pc, #312]	; (8006e10 <checkAktifCalisma+0x8d4>)
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d303      	bcc.n	8006ce4 <checkAktifCalisma+0x7a8>
 8006cdc:	4b49      	ldr	r3, [pc, #292]	; (8006e04 <checkAktifCalisma+0x8c8>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10d      	bne.n	8006d00 <checkAktifCalisma+0x7c4>
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <checkAktifCalisma+0x8c0>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f083 0301 	eor.w	r3, r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <checkAktifCalisma+0x7c4>
 8006cf2:	4b43      	ldr	r3, [pc, #268]	; (8006e00 <checkAktifCalisma+0x8c4>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f083 0301 	eor.w	r3, r3, #1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006d00:	2200      	movs	r2, #0
 8006d02:	2120      	movs	r1, #32
 8006d04:	483a      	ldr	r0, [pc, #232]	; (8006df0 <checkAktifCalisma+0x8b4>)
 8006d06:	f002 ffd6 	bl	8009cb6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006d0a:	4b3a      	ldr	r3, [pc, #232]	; (8006df4 <checkAktifCalisma+0x8b8>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006d10:	4b3c      	ldr	r3, [pc, #240]	; (8006e04 <checkAktifCalisma+0x8c8>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006d16:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <checkAktifCalisma+0x8d8>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 8088 	bne.w	8006e30 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006d20:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <checkAktifCalisma+0x8dc>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d003      	beq.n	8006d30 <checkAktifCalisma+0x7f4>
 8006d28:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <checkAktifCalisma+0x8dc>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d17f      	bne.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006d30:	4b32      	ldr	r3, [pc, #200]	; (8006dfc <checkAktifCalisma+0x8c0>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07b      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
 8006d38:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <checkAktifCalisma+0x8c4>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d077      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006d40:	2140      	movs	r1, #64	; 0x40
 8006d42:	482b      	ldr	r0, [pc, #172]	; (8006df0 <checkAktifCalisma+0x8b4>)
 8006d44:	f002 ffa0 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d170      	bne.n	8006e30 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d52:	4827      	ldr	r0, [pc, #156]	; (8006df0 <checkAktifCalisma+0x8b4>)
 8006d54:	f002 ff98 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <checkAktifCalisma+0x82a>
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	; (8006e1c <checkAktifCalisma+0x8e0>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d164      	bne.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d6a:	4823      	ldr	r0, [pc, #140]	; (8006df8 <checkAktifCalisma+0x8bc>)
 8006d6c:	f002 ff8c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d10f      	bne.n	8006d96 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d7a:	481f      	ldr	r0, [pc, #124]	; (8006df8 <checkAktifCalisma+0x8bc>)
 8006d7c:	f002 ff84 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d107      	bne.n	8006d96 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d8a:	481b      	ldr	r0, [pc, #108]	; (8006df8 <checkAktifCalisma+0x8bc>)
 8006d8c:	f002 ff7c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d003      	beq.n	8006d9e <checkAktifCalisma+0x862>
 8006d96:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <checkAktifCalisma+0x8e4>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d048      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006d9e:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <checkAktifCalisma+0x8e8>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	f083 0301 	eor.w	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d041      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006dac:	4b1e      	ldr	r3, [pc, #120]	; (8006e28 <checkAktifCalisma+0x8ec>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f083 0301 	eor.w	r3, r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d03a      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006dba:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <checkAktifCalisma+0x8f0>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f083 0301 	eor.w	r3, r3, #1
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d033      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <checkAktifCalisma+0x8b8>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f083 0301 	eor.w	r3, r3, #1
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02c      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <checkAktifCalisma+0x8b0>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f083 0301 	eor.w	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d025      	beq.n	8006e30 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <checkAktifCalisma+0x8e4>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e024      	b.n	8006e36 <checkAktifCalisma+0x8fa>
 8006dec:	20000c6f 	.word	0x20000c6f
 8006df0:	40011000 	.word	0x40011000
 8006df4:	20000c73 	.word	0x20000c73
 8006df8:	40010c00 	.word	0x40010c00
 8006dfc:	20000c8b 	.word	0x20000c8b
 8006e00:	20000c8c 	.word	0x20000c8c
 8006e04:	20000c6b 	.word	0x20000c6b
 8006e08:	20000bc4 	.word	0x20000bc4
 8006e0c:	20000bd0 	.word	0x20000bd0
 8006e10:	20000c4f 	.word	0x20000c4f
 8006e14:	20000c56 	.word	0x20000c56
 8006e18:	20000c48 	.word	0x20000c48
 8006e1c:	20000c4a 	.word	0x20000c4a
 8006e20:	20000c70 	.word	0x20000c70
 8006e24:	20000c6e 	.word	0x20000c6e
 8006e28:	20000c72 	.word	0x20000c72
 8006e2c:	20000c71 	.word	0x20000c71
		} else {
			devmotorasagicalisiyor=0;
 8006e30:	4b96      	ldr	r3, [pc, #600]	; (800708c <checkAktifCalisma+0xb50>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006e36:	4b95      	ldr	r3, [pc, #596]	; (800708c <checkAktifCalisma+0xb50>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e3e:	2201      	movs	r2, #1
 8006e40:	2110      	movs	r1, #16
 8006e42:	4893      	ldr	r0, [pc, #588]	; (8007090 <checkAktifCalisma+0xb54>)
 8006e44:	f002 ff37 	bl	8009cb6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006e48:	4b92      	ldr	r3, [pc, #584]	; (8007094 <checkAktifCalisma+0xb58>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006e4e:	4b91      	ldr	r3, [pc, #580]	; (8007094 <checkAktifCalisma+0xb58>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d024      	beq.n	8006ea0 <checkAktifCalisma+0x964>
 8006e56:	2140      	movs	r1, #64	; 0x40
 8006e58:	488d      	ldr	r0, [pc, #564]	; (8007090 <checkAktifCalisma+0xb54>)
 8006e5a:	f002 ff15 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d007      	beq.n	8006e74 <checkAktifCalisma+0x938>
 8006e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e68:	4889      	ldr	r0, [pc, #548]	; (8007090 <checkAktifCalisma+0xb54>)
 8006e6a:	f002 ff0d 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d115      	bne.n	8006ea0 <checkAktifCalisma+0x964>
 8006e74:	4b88      	ldr	r3, [pc, #544]	; (8007098 <checkAktifCalisma+0xb5c>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <checkAktifCalisma+0x964>
 8006e7c:	4b87      	ldr	r3, [pc, #540]	; (800709c <checkAktifCalisma+0xb60>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <checkAktifCalisma+0x964>
 8006e84:	4b86      	ldr	r3, [pc, #536]	; (80070a0 <checkAktifCalisma+0xb64>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f083 0301 	eor.w	r3, r3, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <checkAktifCalisma+0x964>
			timer2=millis;
 8006e92:	4b84      	ldr	r3, [pc, #528]	; (80070a4 <checkAktifCalisma+0xb68>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a84      	ldr	r2, [pc, #528]	; (80070a8 <checkAktifCalisma+0xb6c>)
 8006e98:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006e9a:	4b81      	ldr	r3, [pc, #516]	; (80070a0 <checkAktifCalisma+0xb64>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006ea0:	4b80      	ldr	r3, [pc, #512]	; (80070a4 <checkAktifCalisma+0xb68>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4b80      	ldr	r3, [pc, #512]	; (80070a8 <checkAktifCalisma+0xb6c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	4a80      	ldr	r2, [pc, #512]	; (80070ac <checkAktifCalisma+0xb70>)
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d303      	bcc.n	8006eba <checkAktifCalisma+0x97e>
 8006eb2:	4b7b      	ldr	r3, [pc, #492]	; (80070a0 <checkAktifCalisma+0xb64>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10d      	bne.n	8006ed6 <checkAktifCalisma+0x99a>
 8006eba:	4b77      	ldr	r3, [pc, #476]	; (8007098 <checkAktifCalisma+0xb5c>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f083 0301 	eor.w	r3, r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <checkAktifCalisma+0x99a>
 8006ec8:	4b74      	ldr	r3, [pc, #464]	; (800709c <checkAktifCalisma+0xb60>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f083 0301 	eor.w	r3, r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2110      	movs	r1, #16
 8006eda:	486d      	ldr	r0, [pc, #436]	; (8007090 <checkAktifCalisma+0xb54>)
 8006edc:	f002 feeb 	bl	8009cb6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006ee0:	4b6c      	ldr	r3, [pc, #432]	; (8007094 <checkAktifCalisma+0xb58>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006ee6:	4b6e      	ldr	r3, [pc, #440]	; (80070a0 <checkAktifCalisma+0xb64>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ef0:	486f      	ldr	r0, [pc, #444]	; (80070b0 <checkAktifCalisma+0xb74>)
 8006ef2:	f002 fec9 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d120      	bne.n	8006f3e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f00:	486b      	ldr	r0, [pc, #428]	; (80070b0 <checkAktifCalisma+0xb74>)
 8006f02:	f002 fec1 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d118      	bne.n	8006f3e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006f0c:	2104      	movs	r1, #4
 8006f0e:	4868      	ldr	r0, [pc, #416]	; (80070b0 <checkAktifCalisma+0xb74>)
 8006f10:	f002 feba 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d111      	bne.n	8006f3e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4864      	ldr	r0, [pc, #400]	; (80070b0 <checkAktifCalisma+0xb74>)
 8006f1e:	f002 feb3 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006f28:	2101      	movs	r1, #1
 8006f2a:	4861      	ldr	r0, [pc, #388]	; (80070b0 <checkAktifCalisma+0xb74>)
 8006f2c:	f002 feac 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <checkAktifCalisma+0xa02>
			makineStop=1;
 8006f36:	4b5f      	ldr	r3, [pc, #380]	; (80070b4 <checkAktifCalisma+0xb78>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	e002      	b.n	8006f44 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006f3e:	4b5d      	ldr	r3, [pc, #372]	; (80070b4 <checkAktifCalisma+0xb78>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f44:	4b5c      	ldr	r3, [pc, #368]	; (80070b8 <checkAktifCalisma+0xb7c>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d144      	bne.n	8006fd6 <checkAktifCalisma+0xa9a>
 8006f4c:	4b5b      	ldr	r3, [pc, #364]	; (80070bc <checkAktifCalisma+0xb80>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d003      	beq.n	8006f5c <checkAktifCalisma+0xa20>
 8006f54:	4b59      	ldr	r3, [pc, #356]	; (80070bc <checkAktifCalisma+0xb80>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d13c      	bne.n	8006fd6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	484c      	ldr	r0, [pc, #304]	; (8007090 <checkAktifCalisma+0xb54>)
 8006f60:	f002 fe92 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <checkAktifCalisma+0xa36>
 8006f6a:	4b55      	ldr	r3, [pc, #340]	; (80070c0 <checkAktifCalisma+0xb84>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <checkAktifCalisma+0xa4e>
 8006f72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f76:	484e      	ldr	r0, [pc, #312]	; (80070b0 <checkAktifCalisma+0xb74>)
 8006f78:	f002 fe86 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d129      	bne.n	8006fd6 <checkAktifCalisma+0xa9a>
 8006f82:	4b4f      	ldr	r3, [pc, #316]	; (80070c0 <checkAktifCalisma+0xb84>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d125      	bne.n	8006fd6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	4840      	ldr	r0, [pc, #256]	; (8007090 <checkAktifCalisma+0xb54>)
 8006f8e:	f002 fe7b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <checkAktifCalisma+0xa64>
 8006f98:	4b4a      	ldr	r3, [pc, #296]	; (80070c4 <checkAktifCalisma+0xb88>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11a      	bne.n	8006fd6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	483b      	ldr	r0, [pc, #236]	; (8007090 <checkAktifCalisma+0xb54>)
 8006fa4:	f002 fe70 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d113      	bne.n	8006fd6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006fae:	4b46      	ldr	r3, [pc, #280]	; (80070c8 <checkAktifCalisma+0xb8c>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f083 0301 	eor.w	r3, r3, #1
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00c      	beq.n	8006fd6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006fbc:	4b3d      	ldr	r3, [pc, #244]	; (80070b4 <checkAktifCalisma+0xb78>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006fc4:	4b41      	ldr	r3, [pc, #260]	; (80070cc <checkAktifCalisma+0xb90>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006fca:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <checkAktifCalisma+0xb68>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a40      	ldr	r2, [pc, #256]	; (80070d0 <checkAktifCalisma+0xb94>)
 8006fd0:	6013      	str	r3, [r2, #0]
			bekle();
 8006fd2:	f7ff f87d 	bl	80060d0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006fd6:	4b33      	ldr	r3, [pc, #204]	; (80070a4 <checkAktifCalisma+0xb68>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b3d      	ldr	r3, [pc, #244]	; (80070d0 <checkAktifCalisma+0xb94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	4a3c      	ldr	r2, [pc, #240]	; (80070d4 <checkAktifCalisma+0xb98>)
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d211      	bcs.n	800700c <checkAktifCalisma+0xad0>
 8006fe8:	2104      	movs	r1, #4
 8006fea:	4829      	ldr	r0, [pc, #164]	; (8007090 <checkAktifCalisma+0xb54>)
 8006fec:	f002 fe4c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <checkAktifCalisma+0xad0>
 8006ff6:	4b33      	ldr	r3, [pc, #204]	; (80070c4 <checkAktifCalisma+0xb88>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d006      	beq.n	800700c <checkAktifCalisma+0xad0>
 8006ffe:	4b2d      	ldr	r3, [pc, #180]	; (80070b4 <checkAktifCalisma+0xb78>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	f083 0301 	eor.w	r3, r3, #1
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800700c:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <checkAktifCalisma+0xb90>)
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007012:	4b29      	ldr	r3, [pc, #164]	; (80070b8 <checkAktifCalisma+0xb7c>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d160      	bne.n	80070dc <checkAktifCalisma+0xba0>
 800701a:	4b28      	ldr	r3, [pc, #160]	; (80070bc <checkAktifCalisma+0xb80>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d003      	beq.n	800702a <checkAktifCalisma+0xaee>
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <checkAktifCalisma+0xb80>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d158      	bne.n	80070dc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800702a:	2104      	movs	r1, #4
 800702c:	4818      	ldr	r0, [pc, #96]	; (8007090 <checkAktifCalisma+0xb54>)
 800702e:	f002 fe2b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007032:	4603      	mov	r3, r0
 8007034:	2b01      	cmp	r3, #1
 8007036:	d003      	beq.n	8007040 <checkAktifCalisma+0xb04>
 8007038:	4b22      	ldr	r3, [pc, #136]	; (80070c4 <checkAktifCalisma+0xb88>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d14d      	bne.n	80070dc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007040:	2102      	movs	r1, #2
 8007042:	4813      	ldr	r0, [pc, #76]	; (8007090 <checkAktifCalisma+0xb54>)
 8007044:	f002 fe20 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d146      	bne.n	80070dc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800704e:	2180      	movs	r1, #128	; 0x80
 8007050:	480f      	ldr	r0, [pc, #60]	; (8007090 <checkAktifCalisma+0xb54>)
 8007052:	f002 fe19 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <checkAktifCalisma+0xb28>
 800705c:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <checkAktifCalisma+0xb84>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <checkAktifCalisma+0xb40>
 8007064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007068:	4811      	ldr	r0, [pc, #68]	; (80070b0 <checkAktifCalisma+0xb74>)
 800706a:	f002 fe0d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d133      	bne.n	80070dc <checkAktifCalisma+0xba0>
 8007074:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <checkAktifCalisma+0xb84>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d12f      	bne.n	80070dc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <checkAktifCalisma+0xb78>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d02b      	beq.n	80070dc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8007084:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <checkAktifCalisma+0xb9c>)
 8007086:	2201      	movs	r2, #1
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	e02a      	b.n	80070e2 <checkAktifCalisma+0xba6>
 800708c:	20000c70 	.word	0x20000c70
 8007090:	40011000 	.word	0x40011000
 8007094:	20000c74 	.word	0x20000c74
 8007098:	20000c8b 	.word	0x20000c8b
 800709c:	20000c8c 	.word	0x20000c8c
 80070a0:	20000c6c 	.word	0x20000c6c
 80070a4:	20000bc4 	.word	0x20000bc4
 80070a8:	20000bd0 	.word	0x20000bd0
 80070ac:	20000c4f 	.word	0x20000c4f
 80070b0:	40010c00 	.word	0x40010c00
 80070b4:	20000c7b 	.word	0x20000c7b
 80070b8:	20000c42 	.word	0x20000c42
 80070bc:	20000c41 	.word	0x20000c41
 80070c0:	20000c45 	.word	0x20000c45
 80070c4:	20000c3f 	.word	0x20000c3f
 80070c8:	20000c68 	.word	0x20000c68
 80070cc:	20000c7c 	.word	0x20000c7c
 80070d0:	20000bc8 	.word	0x20000bc8
 80070d4:	20000c52 	.word	0x20000c52
 80070d8:	20000c7d 	.word	0x20000c7d
		} else {
			kapi1butonkontrol=0;
 80070dc:	4b8b      	ldr	r3, [pc, #556]	; (800730c <checkAktifCalisma+0xdd0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070e2:	4b8b      	ldr	r3, [pc, #556]	; (8007310 <checkAktifCalisma+0xdd4>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d121      	bne.n	800712e <checkAktifCalisma+0xbf2>
 80070ea:	4b8a      	ldr	r3, [pc, #552]	; (8007314 <checkAktifCalisma+0xdd8>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d003      	beq.n	80070fa <checkAktifCalisma+0xbbe>
 80070f2:	4b88      	ldr	r3, [pc, #544]	; (8007314 <checkAktifCalisma+0xdd8>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d119      	bne.n	800712e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80070fa:	2104      	movs	r1, #4
 80070fc:	4886      	ldr	r0, [pc, #536]	; (8007318 <checkAktifCalisma+0xddc>)
 80070fe:	f002 fdc3 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007102:	4603      	mov	r3, r0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d003      	beq.n	8007110 <checkAktifCalisma+0xbd4>
 8007108:	4b84      	ldr	r3, [pc, #528]	; (800731c <checkAktifCalisma+0xde0>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10e      	bne.n	800712e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007110:	2102      	movs	r1, #2
 8007112:	4881      	ldr	r0, [pc, #516]	; (8007318 <checkAktifCalisma+0xddc>)
 8007114:	f002 fdb8 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800711e:	4b80      	ldr	r3, [pc, #512]	; (8007320 <checkAktifCalisma+0xde4>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8007126:	4b7f      	ldr	r3, [pc, #508]	; (8007324 <checkAktifCalisma+0xde8>)
 8007128:	2201      	movs	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e002      	b.n	8007134 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800712e:	4b7d      	ldr	r3, [pc, #500]	; (8007324 <checkAktifCalisma+0xde8>)
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007134:	4b75      	ldr	r3, [pc, #468]	; (800730c <checkAktifCalisma+0xdd0>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d107      	bne.n	800714c <checkAktifCalisma+0xc10>
 800713c:	4b79      	ldr	r3, [pc, #484]	; (8007324 <checkAktifCalisma+0xde8>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <checkAktifCalisma+0xc10>
 8007144:	4b78      	ldr	r3, [pc, #480]	; (8007328 <checkAktifCalisma+0xdec>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800714c:	2201      	movs	r2, #1
 800714e:	2180      	movs	r1, #128	; 0x80
 8007150:	4876      	ldr	r0, [pc, #472]	; (800732c <checkAktifCalisma+0xdf0>)
 8007152:	f002 fdb0 	bl	8009cb6 <HAL_GPIO_WritePin>
 8007156:	e004      	b.n	8007162 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007158:	2200      	movs	r2, #0
 800715a:	2180      	movs	r1, #128	; 0x80
 800715c:	4873      	ldr	r0, [pc, #460]	; (800732c <checkAktifCalisma+0xdf0>)
 800715e:	f002 fdaa 	bl	8009cb6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007162:	4b73      	ldr	r3, [pc, #460]	; (8007330 <checkAktifCalisma+0xdf4>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d141      	bne.n	80071ee <checkAktifCalisma+0xcb2>
 800716a:	4b6a      	ldr	r3, [pc, #424]	; (8007314 <checkAktifCalisma+0xdd8>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d003      	beq.n	800717a <checkAktifCalisma+0xc3e>
 8007172:	4b68      	ldr	r3, [pc, #416]	; (8007314 <checkAktifCalisma+0xdd8>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d139      	bne.n	80071ee <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800717a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800717e:	4866      	ldr	r0, [pc, #408]	; (8007318 <checkAktifCalisma+0xddc>)
 8007180:	f002 fd82 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <checkAktifCalisma+0xc56>
 800718a:	4b6a      	ldr	r3, [pc, #424]	; (8007334 <checkAktifCalisma+0xdf8>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <checkAktifCalisma+0xc6e>
 8007192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007196:	4868      	ldr	r0, [pc, #416]	; (8007338 <checkAktifCalisma+0xdfc>)
 8007198:	f002 fd76 	bl	8009c88 <HAL_GPIO_ReadPin>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d125      	bne.n	80071ee <checkAktifCalisma+0xcb2>
 80071a2:	4b64      	ldr	r3, [pc, #400]	; (8007334 <checkAktifCalisma+0xdf8>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d121      	bne.n	80071ee <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071aa:	2102      	movs	r1, #2
 80071ac:	485a      	ldr	r0, [pc, #360]	; (8007318 <checkAktifCalisma+0xddc>)
 80071ae:	f002 fd6b 	bl	8009c88 <HAL_GPIO_ReadPin>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d11a      	bne.n	80071ee <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071b8:	2104      	movs	r1, #4
 80071ba:	4857      	ldr	r0, [pc, #348]	; (8007318 <checkAktifCalisma+0xddc>)
 80071bc:	f002 fd64 	bl	8009c88 <HAL_GPIO_ReadPin>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d113      	bne.n	80071ee <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80071c6:	4b56      	ldr	r3, [pc, #344]	; (8007320 <checkAktifCalisma+0xde4>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80071ce:	4b5b      	ldr	r3, [pc, #364]	; (800733c <checkAktifCalisma+0xe00>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f083 0301 	eor.w	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80071dc:	4b58      	ldr	r3, [pc, #352]	; (8007340 <checkAktifCalisma+0xe04>)
 80071de:	2201      	movs	r2, #1
 80071e0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80071e2:	4b58      	ldr	r3, [pc, #352]	; (8007344 <checkAktifCalisma+0xe08>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a58      	ldr	r2, [pc, #352]	; (8007348 <checkAktifCalisma+0xe0c>)
 80071e8:	6013      	str	r3, [r2, #0]
			bekle();
 80071ea:	f7fe ff71 	bl	80060d0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80071ee:	4b55      	ldr	r3, [pc, #340]	; (8007344 <checkAktifCalisma+0xe08>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b55      	ldr	r3, [pc, #340]	; (8007348 <checkAktifCalisma+0xe0c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	4a54      	ldr	r2, [pc, #336]	; (800734c <checkAktifCalisma+0xe10>)
 80071fa:	7812      	ldrb	r2, [r2, #0]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d20d      	bcs.n	800721c <checkAktifCalisma+0xce0>
 8007200:	2102      	movs	r1, #2
 8007202:	4845      	ldr	r0, [pc, #276]	; (8007318 <checkAktifCalisma+0xddc>)
 8007204:	f002 fd40 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <checkAktifCalisma+0xce0>
 800720e:	4b44      	ldr	r3, [pc, #272]	; (8007320 <checkAktifCalisma+0xde4>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	f083 0301 	eor.w	r3, r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 800721c:	4b48      	ldr	r3, [pc, #288]	; (8007340 <checkAktifCalisma+0xe04>)
 800721e:	2200      	movs	r2, #0
 8007220:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007222:	4b43      	ldr	r3, [pc, #268]	; (8007330 <checkAktifCalisma+0xdf4>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d135      	bne.n	8007296 <checkAktifCalisma+0xd5a>
 800722a:	4b3a      	ldr	r3, [pc, #232]	; (8007314 <checkAktifCalisma+0xdd8>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d003      	beq.n	800723a <checkAktifCalisma+0xcfe>
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <checkAktifCalisma+0xdd8>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b03      	cmp	r3, #3
 8007238:	d12d      	bne.n	8007296 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800723a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800723e:	4836      	ldr	r0, [pc, #216]	; (8007318 <checkAktifCalisma+0xddc>)
 8007240:	f002 fd22 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <checkAktifCalisma+0xd16>
 800724a:	4b3a      	ldr	r3, [pc, #232]	; (8007334 <checkAktifCalisma+0xdf8>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <checkAktifCalisma+0xd2e>
 8007252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007256:	4838      	ldr	r0, [pc, #224]	; (8007338 <checkAktifCalisma+0xdfc>)
 8007258:	f002 fd16 	bl	8009c88 <HAL_GPIO_ReadPin>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d119      	bne.n	8007296 <checkAktifCalisma+0xd5a>
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <checkAktifCalisma+0xdf8>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d115      	bne.n	8007296 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800726a:	2102      	movs	r1, #2
 800726c:	482a      	ldr	r0, [pc, #168]	; (8007318 <checkAktifCalisma+0xddc>)
 800726e:	f002 fd0b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007272:	4603      	mov	r3, r0
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10e      	bne.n	8007296 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007278:	2104      	movs	r1, #4
 800727a:	4827      	ldr	r0, [pc, #156]	; (8007318 <checkAktifCalisma+0xddc>)
 800727c:	f002 fd04 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d107      	bne.n	8007296 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8007286:	4b26      	ldr	r3, [pc, #152]	; (8007320 <checkAktifCalisma+0xde4>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800728e:	4b30      	ldr	r3, [pc, #192]	; (8007350 <checkAktifCalisma+0xe14>)
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e002      	b.n	800729c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007296:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <checkAktifCalisma+0xe14>)
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800729c:	4b24      	ldr	r3, [pc, #144]	; (8007330 <checkAktifCalisma+0xdf4>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d11d      	bne.n	80072e0 <checkAktifCalisma+0xda4>
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <checkAktifCalisma+0xdd8>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d003      	beq.n	80072b4 <checkAktifCalisma+0xd78>
 80072ac:	4b19      	ldr	r3, [pc, #100]	; (8007314 <checkAktifCalisma+0xdd8>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d115      	bne.n	80072e0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80072b4:	2102      	movs	r1, #2
 80072b6:	4818      	ldr	r0, [pc, #96]	; (8007318 <checkAktifCalisma+0xddc>)
 80072b8:	f002 fce6 	bl	8009c88 <HAL_GPIO_ReadPin>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10e      	bne.n	80072e0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80072c2:	2104      	movs	r1, #4
 80072c4:	4814      	ldr	r0, [pc, #80]	; (8007318 <checkAktifCalisma+0xddc>)
 80072c6:	f002 fcdf 	bl	8009c88 <HAL_GPIO_ReadPin>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d107      	bne.n	80072e0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <checkAktifCalisma+0xde4>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <checkAktifCalisma+0xe18>)
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	e002      	b.n	80072e6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80072e0:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <checkAktifCalisma+0xe18>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80072e6:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <checkAktifCalisma+0xe14>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <checkAktifCalisma+0xdc2>
 80072ee:	4b19      	ldr	r3, [pc, #100]	; (8007354 <checkAktifCalisma+0xe18>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <checkAktifCalisma+0xdc2>
 80072f6:	4b12      	ldr	r3, [pc, #72]	; (8007340 <checkAktifCalisma+0xe04>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02c      	beq.n	8007358 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80072fe:	2201      	movs	r2, #1
 8007300:	2140      	movs	r1, #64	; 0x40
 8007302:	480a      	ldr	r0, [pc, #40]	; (800732c <checkAktifCalisma+0xdf0>)
 8007304:	f002 fcd7 	bl	8009cb6 <HAL_GPIO_WritePin>
 8007308:	e02b      	b.n	8007362 <checkAktifCalisma+0xe26>
 800730a:	bf00      	nop
 800730c:	20000c7d 	.word	0x20000c7d
 8007310:	20000c42 	.word	0x20000c42
 8007314:	20000c41 	.word	0x20000c41
 8007318:	40011000 	.word	0x40011000
 800731c:	20000c3f 	.word	0x20000c3f
 8007320:	20000c7b 	.word	0x20000c7b
 8007324:	20000c7e 	.word	0x20000c7e
 8007328:	20000c7c 	.word	0x20000c7c
 800732c:	40010800 	.word	0x40010800
 8007330:	20000c43 	.word	0x20000c43
 8007334:	20000c45 	.word	0x20000c45
 8007338:	40010c00 	.word	0x40010c00
 800733c:	20000c68 	.word	0x20000c68
 8007340:	20000c7f 	.word	0x20000c7f
 8007344:	20000bc4 	.word	0x20000bc4
 8007348:	20000bc8 	.word	0x20000bc8
 800734c:	20000c53 	.word	0x20000c53
 8007350:	20000c80 	.word	0x20000c80
 8007354:	20000c81 	.word	0x20000c81
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007358:	2200      	movs	r2, #0
 800735a:	2140      	movs	r1, #64	; 0x40
 800735c:	488d      	ldr	r0, [pc, #564]	; (8007594 <checkAktifCalisma+0x1058>)
 800735e:	f002 fcaa 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007362:	4b8d      	ldr	r3, [pc, #564]	; (8007598 <checkAktifCalisma+0x105c>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <checkAktifCalisma+0xe36>
 800736a:	4b8b      	ldr	r3, [pc, #556]	; (8007598 <checkAktifCalisma+0x105c>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d115      	bne.n	800739e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007372:	2104      	movs	r1, #4
 8007374:	4889      	ldr	r0, [pc, #548]	; (800759c <checkAktifCalisma+0x1060>)
 8007376:	f002 fc87 	bl	8009c88 <HAL_GPIO_ReadPin>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d003      	beq.n	8007388 <checkAktifCalisma+0xe4c>
 8007380:	4b87      	ldr	r3, [pc, #540]	; (80075a0 <checkAktifCalisma+0x1064>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007388:	2102      	movs	r1, #2
 800738a:	4884      	ldr	r0, [pc, #528]	; (800759c <checkAktifCalisma+0x1060>)
 800738c:	f002 fc7c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007396:	4b83      	ldr	r3, [pc, #524]	; (80075a4 <checkAktifCalisma+0x1068>)
 8007398:	2201      	movs	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e002      	b.n	80073a4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800739e:	4b81      	ldr	r3, [pc, #516]	; (80075a4 <checkAktifCalisma+0x1068>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80073a4:	4b7c      	ldr	r3, [pc, #496]	; (8007598 <checkAktifCalisma+0x105c>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d003      	beq.n	80073b4 <checkAktifCalisma+0xe78>
 80073ac:	4b7a      	ldr	r3, [pc, #488]	; (8007598 <checkAktifCalisma+0x105c>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d111      	bne.n	80073d8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073b4:	2102      	movs	r1, #2
 80073b6:	4879      	ldr	r0, [pc, #484]	; (800759c <checkAktifCalisma+0x1060>)
 80073b8:	f002 fc66 	bl	8009c88 <HAL_GPIO_ReadPin>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d10a      	bne.n	80073d8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80073c2:	2104      	movs	r1, #4
 80073c4:	4875      	ldr	r0, [pc, #468]	; (800759c <checkAktifCalisma+0x1060>)
 80073c6:	f002 fc5f 	bl	8009c88 <HAL_GPIO_ReadPin>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d103      	bne.n	80073d8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80073d0:	4b75      	ldr	r3, [pc, #468]	; (80075a8 <checkAktifCalisma+0x106c>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e002      	b.n	80073de <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80073d8:	4b73      	ldr	r3, [pc, #460]	; (80075a8 <checkAktifCalisma+0x106c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80073de:	4b71      	ldr	r3, [pc, #452]	; (80075a4 <checkAktifCalisma+0x1068>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00f      	beq.n	8007406 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80073e6:	4b71      	ldr	r3, [pc, #452]	; (80075ac <checkAktifCalisma+0x1070>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10b      	bne.n	8007406 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80073ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073f2:	486f      	ldr	r0, [pc, #444]	; (80075b0 <checkAktifCalisma+0x1074>)
 80073f4:	f002 fc48 	bl	8009c88 <HAL_GPIO_ReadPin>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80073fe:	4b6d      	ldr	r3, [pc, #436]	; (80075b4 <checkAktifCalisma+0x1078>)
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e002      	b.n	800740c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8007406:	4b6b      	ldr	r3, [pc, #428]	; (80075b4 <checkAktifCalisma+0x1078>)
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 800740c:	4b66      	ldr	r3, [pc, #408]	; (80075a8 <checkAktifCalisma+0x106c>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00f      	beq.n	8007434 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007414:	4b65      	ldr	r3, [pc, #404]	; (80075ac <checkAktifCalisma+0x1070>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d10b      	bne.n	8007434 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800741c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007420:	4863      	ldr	r0, [pc, #396]	; (80075b0 <checkAktifCalisma+0x1074>)
 8007422:	f002 fc31 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 800742c:	4b62      	ldr	r3, [pc, #392]	; (80075b8 <checkAktifCalisma+0x107c>)
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
 8007432:	e002      	b.n	800743a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007434:	4b60      	ldr	r3, [pc, #384]	; (80075b8 <checkAktifCalisma+0x107c>)
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800743a:	4b60      	ldr	r3, [pc, #384]	; (80075bc <checkAktifCalisma+0x1080>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d137      	bne.n	80074b2 <checkAktifCalisma+0xf76>
 8007442:	4b5f      	ldr	r3, [pc, #380]	; (80075c0 <checkAktifCalisma+0x1084>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d003      	beq.n	8007452 <checkAktifCalisma+0xf16>
 800744a:	4b5d      	ldr	r3, [pc, #372]	; (80075c0 <checkAktifCalisma+0x1084>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d12f      	bne.n	80074b2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007452:	4b54      	ldr	r3, [pc, #336]	; (80075a4 <checkAktifCalisma+0x1068>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <checkAktifCalisma+0xf26>
 800745a:	4b53      	ldr	r3, [pc, #332]	; (80075a8 <checkAktifCalisma+0x106c>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d027      	beq.n	80074b2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007466:	484d      	ldr	r0, [pc, #308]	; (800759c <checkAktifCalisma+0x1060>)
 8007468:	f002 fc0e 	bl	8009c88 <HAL_GPIO_ReadPin>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d103      	bne.n	800747a <checkAktifCalisma+0xf3e>
 8007472:	4b4e      	ldr	r3, [pc, #312]	; (80075ac <checkAktifCalisma+0x1070>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800747a:	4b4e      	ldr	r3, [pc, #312]	; (80075b4 <checkAktifCalisma+0x1078>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <checkAktifCalisma+0xf4e>
 8007482:	4b4d      	ldr	r3, [pc, #308]	; (80075b8 <checkAktifCalisma+0x107c>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d013      	beq.n	80074b2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800748a:	4b4e      	ldr	r3, [pc, #312]	; (80075c4 <checkAktifCalisma+0x1088>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00f      	beq.n	80074b2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007492:	4b4d      	ldr	r3, [pc, #308]	; (80075c8 <checkAktifCalisma+0x108c>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f083 0301 	eor.w	r3, r3, #1
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80074a0:	4b4a      	ldr	r3, [pc, #296]	; (80075cc <checkAktifCalisma+0x1090>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80074a6:	4b4a      	ldr	r3, [pc, #296]	; (80075d0 <checkAktifCalisma+0x1094>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a4a      	ldr	r2, [pc, #296]	; (80075d4 <checkAktifCalisma+0x1098>)
 80074ac:	6013      	str	r3, [r2, #0]
			bekle();
 80074ae:	f7fe fe0f 	bl	80060d0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80074b2:	4b47      	ldr	r3, [pc, #284]	; (80075d0 <checkAktifCalisma+0x1094>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4b47      	ldr	r3, [pc, #284]	; (80075d4 <checkAktifCalisma+0x1098>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	4a46      	ldr	r2, [pc, #280]	; (80075d8 <checkAktifCalisma+0x109c>)
 80074be:	7812      	ldrb	r2, [r2, #0]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d214      	bcs.n	80074ee <checkAktifCalisma+0xfb2>
 80074c4:	4b37      	ldr	r3, [pc, #220]	; (80075a4 <checkAktifCalisma+0x1068>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f083 0301 	eor.w	r3, r3, #1
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d006      	beq.n	80074e0 <checkAktifCalisma+0xfa4>
 80074d2:	4b35      	ldr	r3, [pc, #212]	; (80075a8 <checkAktifCalisma+0x106c>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f083 0301 	eor.w	r3, r3, #1
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d106      	bne.n	80074ee <checkAktifCalisma+0xfb2>
 80074e0:	4b38      	ldr	r3, [pc, #224]	; (80075c4 <checkAktifCalisma+0x1088>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f083 0301 	eor.w	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80074ee:	4b37      	ldr	r3, [pc, #220]	; (80075cc <checkAktifCalisma+0x1090>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80074f4:	4b31      	ldr	r3, [pc, #196]	; (80075bc <checkAktifCalisma+0x1080>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d12b      	bne.n	8007554 <checkAktifCalisma+0x1018>
 80074fc:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <checkAktifCalisma+0x1084>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d003      	beq.n	800750c <checkAktifCalisma+0xfd0>
 8007504:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <checkAktifCalisma+0x1084>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d123      	bne.n	8007554 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800750c:	4b25      	ldr	r3, [pc, #148]	; (80075a4 <checkAktifCalisma+0x1068>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <checkAktifCalisma+0xfe0>
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <checkAktifCalisma+0x106c>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800751c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007520:	481e      	ldr	r0, [pc, #120]	; (800759c <checkAktifCalisma+0x1060>)
 8007522:	f002 fbb1 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <checkAktifCalisma+0xff8>
 800752c:	4b1f      	ldr	r3, [pc, #124]	; (80075ac <checkAktifCalisma+0x1070>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007534:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <checkAktifCalisma+0x1078>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <checkAktifCalisma+0x1008>
 800753c:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <checkAktifCalisma+0x107c>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007544:	4b1f      	ldr	r3, [pc, #124]	; (80075c4 <checkAktifCalisma+0x1088>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 800754c:	4b23      	ldr	r3, [pc, #140]	; (80075dc <checkAktifCalisma+0x10a0>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e002      	b.n	800755a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007554:	4b21      	ldr	r3, [pc, #132]	; (80075dc <checkAktifCalisma+0x10a0>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <checkAktifCalisma+0x1080>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d140      	bne.n	80075e4 <checkAktifCalisma+0x10a8>
 8007562:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <checkAktifCalisma+0x1084>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d003      	beq.n	8007572 <checkAktifCalisma+0x1036>
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <checkAktifCalisma+0x1084>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d138      	bne.n	80075e4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007572:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <checkAktifCalisma+0x1068>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <checkAktifCalisma+0x1046>
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <checkAktifCalisma+0x106c>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d030      	beq.n	80075e4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <checkAktifCalisma+0x1088>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d02c      	beq.n	80075e4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <checkAktifCalisma+0x10a4>)
 800758c:	2201      	movs	r2, #1
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e02b      	b.n	80075ea <checkAktifCalisma+0x10ae>
 8007592:	bf00      	nop
 8007594:	40010800 	.word	0x40010800
 8007598:	20000c46 	.word	0x20000c46
 800759c:	40011000 	.word	0x40011000
 80075a0:	20000c3f 	.word	0x20000c3f
 80075a4:	20000c85 	.word	0x20000c85
 80075a8:	20000c86 	.word	0x20000c86
 80075ac:	20000c45 	.word	0x20000c45
 80075b0:	40010c00 	.word	0x40010c00
 80075b4:	20000c95 	.word	0x20000c95
 80075b8:	20000c96 	.word	0x20000c96
 80075bc:	20000c44 	.word	0x20000c44
 80075c0:	20000c41 	.word	0x20000c41
 80075c4:	20000c7b 	.word	0x20000c7b
 80075c8:	20000c68 	.word	0x20000c68
 80075cc:	20000c82 	.word	0x20000c82
 80075d0:	20000bc4 	.word	0x20000bc4
 80075d4:	20000bc8 	.word	0x20000bc8
 80075d8:	20000c54 	.word	0x20000c54
 80075dc:	20000c83 	.word	0x20000c83
 80075e0:	20000c84 	.word	0x20000c84
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80075e4:	4b89      	ldr	r3, [pc, #548]	; (800780c <checkAktifCalisma+0x12d0>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80075ea:	4b89      	ldr	r3, [pc, #548]	; (8007810 <checkAktifCalisma+0x12d4>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d107      	bne.n	8007602 <checkAktifCalisma+0x10c6>
 80075f2:	4b88      	ldr	r3, [pc, #544]	; (8007814 <checkAktifCalisma+0x12d8>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <checkAktifCalisma+0x10c6>
 80075fa:	4b84      	ldr	r3, [pc, #528]	; (800780c <checkAktifCalisma+0x12d0>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007602:	2201      	movs	r2, #1
 8007604:	2120      	movs	r1, #32
 8007606:	4884      	ldr	r0, [pc, #528]	; (8007818 <checkAktifCalisma+0x12dc>)
 8007608:	f002 fb55 	bl	8009cb6 <HAL_GPIO_WritePin>
 800760c:	e004      	b.n	8007618 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800760e:	2200      	movs	r2, #0
 8007610:	2120      	movs	r1, #32
 8007612:	4881      	ldr	r0, [pc, #516]	; (8007818 <checkAktifCalisma+0x12dc>)
 8007614:	f002 fb4f 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007618:	4b80      	ldr	r3, [pc, #512]	; (800781c <checkAktifCalisma+0x12e0>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00e      	beq.n	800763e <checkAktifCalisma+0x1102>
 8007620:	2102      	movs	r1, #2
 8007622:	487f      	ldr	r0, [pc, #508]	; (8007820 <checkAktifCalisma+0x12e4>)
 8007624:	f002 fb30 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007628:	4603      	mov	r3, r0
 800762a:	2b01      	cmp	r3, #1
 800762c:	d107      	bne.n	800763e <checkAktifCalisma+0x1102>
 800762e:	4b7d      	ldr	r3, [pc, #500]	; (8007824 <checkAktifCalisma+0x12e8>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <checkAktifCalisma+0x1102>
 8007636:	4b7c      	ldr	r3, [pc, #496]	; (8007828 <checkAktifCalisma+0x12ec>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d112      	bne.n	8007664 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800763e:	4b7b      	ldr	r3, [pc, #492]	; (800782c <checkAktifCalisma+0x12f0>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d066      	beq.n	8007714 <checkAktifCalisma+0x11d8>
 8007646:	2104      	movs	r1, #4
 8007648:	4875      	ldr	r0, [pc, #468]	; (8007820 <checkAktifCalisma+0x12e4>)
 800764a:	f002 fb1d 	bl	8009c88 <HAL_GPIO_ReadPin>
 800764e:	4603      	mov	r3, r0
 8007650:	2b01      	cmp	r3, #1
 8007652:	d15f      	bne.n	8007714 <checkAktifCalisma+0x11d8>
 8007654:	4b73      	ldr	r3, [pc, #460]	; (8007824 <checkAktifCalisma+0x12e8>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d05b      	beq.n	8007714 <checkAktifCalisma+0x11d8>
 800765c:	4b72      	ldr	r3, [pc, #456]	; (8007828 <checkAktifCalisma+0x12ec>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d057      	beq.n	8007714 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007664:	4b72      	ldr	r3, [pc, #456]	; (8007830 <checkAktifCalisma+0x12f4>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	4b70      	ldr	r3, [pc, #448]	; (8007830 <checkAktifCalisma+0x12f4>)
 800766e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007670:	4b6f      	ldr	r3, [pc, #444]	; (8007830 <checkAktifCalisma+0x12f4>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b09      	cmp	r3, #9
 8007676:	d908      	bls.n	800768a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007678:	4b6d      	ldr	r3, [pc, #436]	; (8007830 <checkAktifCalisma+0x12f4>)
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800767e:	4b6d      	ldr	r3, [pc, #436]	; (8007834 <checkAktifCalisma+0x12f8>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	4b6b      	ldr	r3, [pc, #428]	; (8007834 <checkAktifCalisma+0x12f8>)
 8007688:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800768a:	4b6a      	ldr	r3, [pc, #424]	; (8007834 <checkAktifCalisma+0x12f8>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d908      	bls.n	80076a4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007692:	4b68      	ldr	r3, [pc, #416]	; (8007834 <checkAktifCalisma+0x12f8>)
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007698:	4b67      	ldr	r3, [pc, #412]	; (8007838 <checkAktifCalisma+0x12fc>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	3301      	adds	r3, #1
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b65      	ldr	r3, [pc, #404]	; (8007838 <checkAktifCalisma+0x12fc>)
 80076a2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80076a4:	4b64      	ldr	r3, [pc, #400]	; (8007838 <checkAktifCalisma+0x12fc>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b09      	cmp	r3, #9
 80076aa:	d908      	bls.n	80076be <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80076ac:	4b62      	ldr	r3, [pc, #392]	; (8007838 <checkAktifCalisma+0x12fc>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80076b2:	4b62      	ldr	r3, [pc, #392]	; (800783c <checkAktifCalisma+0x1300>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	4b60      	ldr	r3, [pc, #384]	; (800783c <checkAktifCalisma+0x1300>)
 80076bc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80076be:	4b5f      	ldr	r3, [pc, #380]	; (800783c <checkAktifCalisma+0x1300>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	d908      	bls.n	80076d8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80076c6:	4b5d      	ldr	r3, [pc, #372]	; (800783c <checkAktifCalisma+0x1300>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80076cc:	4b5c      	ldr	r3, [pc, #368]	; (8007840 <checkAktifCalisma+0x1304>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	4b5a      	ldr	r3, [pc, #360]	; (8007840 <checkAktifCalisma+0x1304>)
 80076d6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80076d8:	4b59      	ldr	r3, [pc, #356]	; (8007840 <checkAktifCalisma+0x1304>)
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	4b59      	ldr	r3, [pc, #356]	; (8007844 <checkAktifCalisma+0x1308>)
 80076de:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80076e2:	4b56      	ldr	r3, [pc, #344]	; (800783c <checkAktifCalisma+0x1300>)
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	4b57      	ldr	r3, [pc, #348]	; (8007844 <checkAktifCalisma+0x1308>)
 80076e8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80076ea:	4b53      	ldr	r3, [pc, #332]	; (8007838 <checkAktifCalisma+0x12fc>)
 80076ec:	781a      	ldrb	r2, [r3, #0]
 80076ee:	4b55      	ldr	r3, [pc, #340]	; (8007844 <checkAktifCalisma+0x1308>)
 80076f0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80076f2:	4b50      	ldr	r3, [pc, #320]	; (8007834 <checkAktifCalisma+0x12f8>)
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	4b53      	ldr	r3, [pc, #332]	; (8007844 <checkAktifCalisma+0x1308>)
 80076f8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80076fa:	4b4d      	ldr	r3, [pc, #308]	; (8007830 <checkAktifCalisma+0x12f4>)
 80076fc:	781a      	ldrb	r2, [r3, #0]
 80076fe:	4b51      	ldr	r3, [pc, #324]	; (8007844 <checkAktifCalisma+0x1308>)
 8007700:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007702:	4b51      	ldr	r3, [pc, #324]	; (8007848 <checkAktifCalisma+0x130c>)
 8007704:	2201      	movs	r2, #1
 8007706:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007708:	4b44      	ldr	r3, [pc, #272]	; (800781c <checkAktifCalisma+0x12e0>)
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800770e:	4b47      	ldr	r3, [pc, #284]	; (800782c <checkAktifCalisma+0x12f0>)
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007718:	484c      	ldr	r0, [pc, #304]	; (800784c <checkAktifCalisma+0x1310>)
 800771a:	f002 fab5 	bl	8009c88 <HAL_GPIO_ReadPin>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d016      	beq.n	8007752 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007728:	4848      	ldr	r0, [pc, #288]	; (800784c <checkAktifCalisma+0x1310>)
 800772a:	f002 faad 	bl	8009c88 <HAL_GPIO_ReadPin>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00e      	beq.n	8007752 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007738:	4844      	ldr	r0, [pc, #272]	; (800784c <checkAktifCalisma+0x1310>)
 800773a:	f002 faa5 	bl	8009c88 <HAL_GPIO_ReadPin>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	4836      	ldr	r0, [pc, #216]	; (8007820 <checkAktifCalisma+0x12e4>)
 8007748:	f002 fa9e 	bl	8009c88 <HAL_GPIO_ReadPin>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <checkAktifCalisma+0x121e>
			startBasili=1;
 8007752:	4b3f      	ldr	r3, [pc, #252]	; (8007850 <checkAktifCalisma+0x1314>)
 8007754:	2201      	movs	r2, #1
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e002      	b.n	8007760 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800775a:	4b3d      	ldr	r3, [pc, #244]	; (8007850 <checkAktifCalisma+0x1314>)
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007760:	4b3b      	ldr	r3, [pc, #236]	; (8007850 <checkAktifCalisma+0x1314>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d014      	beq.n	8007792 <checkAktifCalisma+0x1256>
 8007768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800776c:	4837      	ldr	r0, [pc, #220]	; (800784c <checkAktifCalisma+0x1310>)
 800776e:	f002 fa8b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d10c      	bne.n	8007792 <checkAktifCalisma+0x1256>
			hataVar=1;
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <checkAktifCalisma+0x1318>)
 800777a:	2201      	movs	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800777e:	2001      	movs	r0, #1
 8007780:	f7fe f898 	bl	80058b4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007784:	2001      	movs	r0, #1
 8007786:	f7fe fc27 	bl	8005fd8 <hata2EEPROM>
			acilstophatasi=1;
 800778a:	4b33      	ldr	r3, [pc, #204]	; (8007858 <checkAktifCalisma+0x131c>)
 800778c:	2201      	movs	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e018      	b.n	80077c4 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007792:	4b31      	ldr	r3, [pc, #196]	; (8007858 <checkAktifCalisma+0x131c>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <checkAktifCalisma+0x1288>
 800779a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800779e:	482b      	ldr	r0, [pc, #172]	; (800784c <checkAktifCalisma+0x1310>)
 80077a0:	f002 fa72 	bl	8009c88 <HAL_GPIO_ReadPin>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10c      	bne.n	80077c4 <checkAktifCalisma+0x1288>
 80077aa:	4b29      	ldr	r3, [pc, #164]	; (8007850 <checkAktifCalisma+0x1314>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f083 0301 	eor.w	r3, r3, #1
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80077b8:	4b27      	ldr	r3, [pc, #156]	; (8007858 <checkAktifCalisma+0x131c>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80077be:	2001      	movs	r0, #1
 80077c0:	f7fe f824 	bl	800580c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80077c4:	4b25      	ldr	r3, [pc, #148]	; (800785c <checkAktifCalisma+0x1320>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f083 0301 	eor.w	r3, r3, #1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d04c      	beq.n	800786c <checkAktifCalisma+0x1330>
 80077d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80077d6:	481d      	ldr	r0, [pc, #116]	; (800784c <checkAktifCalisma+0x1310>)
 80077d8:	f002 fa56 	bl	8009c88 <HAL_GPIO_ReadPin>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <checkAktifCalisma+0x12ae>
 80077e2:	4b1f      	ldr	r3, [pc, #124]	; (8007860 <checkAktifCalisma+0x1324>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d040      	beq.n	800786c <checkAktifCalisma+0x1330>
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <checkAktifCalisma+0x1328>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d13c      	bne.n	800786c <checkAktifCalisma+0x1330>
			hataVar=1;
 80077f2:	4b18      	ldr	r3, [pc, #96]	; (8007854 <checkAktifCalisma+0x1318>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80077f8:	2002      	movs	r0, #2
 80077fa:	f7fe f85b 	bl	80058b4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80077fe:	2002      	movs	r0, #2
 8007800:	f7fe fbea 	bl	8005fd8 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007804:	4b18      	ldr	r3, [pc, #96]	; (8007868 <checkAktifCalisma+0x132c>)
 8007806:	2201      	movs	r2, #1
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e047      	b.n	800789c <checkAktifCalisma+0x1360>
 800780c:	20000c84 	.word	0x20000c84
 8007810:	20000c83 	.word	0x20000c83
 8007814:	20000c82 	.word	0x20000c82
 8007818:	40010800 	.word	0x40010800
 800781c:	20000c78 	.word	0x20000c78
 8007820:	40011000 	.word	0x40011000
 8007824:	20000c3f 	.word	0x20000c3f
 8007828:	20000c7b 	.word	0x20000c7b
 800782c:	20000c79 	.word	0x20000c79
 8007830:	20000c36 	.word	0x20000c36
 8007834:	20000c37 	.word	0x20000c37
 8007838:	200009b1 	.word	0x200009b1
 800783c:	200009b2 	.word	0x200009b2
 8007840:	20000c38 	.word	0x20000c38
 8007844:	20000b28 	.word	0x20000b28
 8007848:	20000c65 	.word	0x20000c65
 800784c:	40010c00 	.word	0x40010c00
 8007850:	20000c87 	.word	0x20000c87
 8007854:	20000c8e 	.word	0x20000c8e
 8007858:	20000c89 	.word	0x20000c89
 800785c:	20000c90 	.word	0x20000c90
 8007860:	20000c9a 	.word	0x20000c9a
 8007864:	20000c3d 	.word	0x20000c3d
 8007868:	20000c8a 	.word	0x20000c8a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800786c:	4b97      	ldr	r3, [pc, #604]	; (8007acc <checkAktifCalisma+0x1590>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d013      	beq.n	800789c <checkAktifCalisma+0x1360>
 8007874:	4b96      	ldr	r3, [pc, #600]	; (8007ad0 <checkAktifCalisma+0x1594>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00f      	beq.n	800789c <checkAktifCalisma+0x1360>
 800787c:	4b95      	ldr	r3, [pc, #596]	; (8007ad4 <checkAktifCalisma+0x1598>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	f083 0301 	eor.w	r3, r3, #1
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d008      	beq.n	800789c <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 800788a:	4b90      	ldr	r3, [pc, #576]	; (8007acc <checkAktifCalisma+0x1590>)
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007890:	4b91      	ldr	r3, [pc, #580]	; (8007ad8 <checkAktifCalisma+0x159c>)
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007896:	2002      	movs	r0, #2
 8007898:	f7fd ffb8 	bl	800580c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800789c:	4b8f      	ldr	r3, [pc, #572]	; (8007adc <checkAktifCalisma+0x15a0>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11c      	bne.n	80078de <checkAktifCalisma+0x13a2>
 80078a4:	4b8e      	ldr	r3, [pc, #568]	; (8007ae0 <checkAktifCalisma+0x15a4>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d118      	bne.n	80078de <checkAktifCalisma+0x13a2>
 80078ac:	4b8d      	ldr	r3, [pc, #564]	; (8007ae4 <checkAktifCalisma+0x15a8>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d014      	beq.n	80078de <checkAktifCalisma+0x13a2>
 80078b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078b8:	488b      	ldr	r0, [pc, #556]	; (8007ae8 <checkAktifCalisma+0x15ac>)
 80078ba:	f002 f9e5 	bl	8009c88 <HAL_GPIO_ReadPin>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d10c      	bne.n	80078de <checkAktifCalisma+0x13a2>
			hataVar=1;
 80078c4:	4b89      	ldr	r3, [pc, #548]	; (8007aec <checkAktifCalisma+0x15b0>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80078ca:	2003      	movs	r0, #3
 80078cc:	f7fd fff2 	bl	80058b4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80078d0:	2003      	movs	r0, #3
 80078d2:	f7fe fb81 	bl	8005fd8 <hata2EEPROM>
			basinchatasi=1;
 80078d6:	4b86      	ldr	r3, [pc, #536]	; (8007af0 <checkAktifCalisma+0x15b4>)
 80078d8:	2201      	movs	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e015      	b.n	800790a <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80078de:	4b84      	ldr	r3, [pc, #528]	; (8007af0 <checkAktifCalisma+0x15b4>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d011      	beq.n	800790a <checkAktifCalisma+0x13ce>
 80078e6:	4b7d      	ldr	r3, [pc, #500]	; (8007adc <checkAktifCalisma+0x15a0>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10d      	bne.n	800790a <checkAktifCalisma+0x13ce>
 80078ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078f2:	4880      	ldr	r0, [pc, #512]	; (8007af4 <checkAktifCalisma+0x15b8>)
 80078f4:	f002 f9c8 	bl	8009c88 <HAL_GPIO_ReadPin>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d105      	bne.n	800790a <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80078fe:	4b7c      	ldr	r3, [pc, #496]	; (8007af0 <checkAktifCalisma+0x15b4>)
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007904:	2003      	movs	r0, #3
 8007906:	f7fd ff81 	bl	800580c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800790a:	4b7b      	ldr	r3, [pc, #492]	; (8007af8 <checkAktifCalisma+0x15bc>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <checkAktifCalisma+0x13de>
 8007912:	4b7a      	ldr	r3, [pc, #488]	; (8007afc <checkAktifCalisma+0x15c0>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01c      	beq.n	8007954 <checkAktifCalisma+0x1418>
 800791a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800791e:	4878      	ldr	r0, [pc, #480]	; (8007b00 <checkAktifCalisma+0x15c4>)
 8007920:	f002 f9b2 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007924:	4603      	mov	r3, r0
 8007926:	2b01      	cmp	r3, #1
 8007928:	d114      	bne.n	8007954 <checkAktifCalisma+0x1418>
 800792a:	4b76      	ldr	r3, [pc, #472]	; (8007b04 <checkAktifCalisma+0x15c8>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d003      	beq.n	800793a <checkAktifCalisma+0x13fe>
 8007932:	4b74      	ldr	r3, [pc, #464]	; (8007b04 <checkAktifCalisma+0x15c8>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d10c      	bne.n	8007954 <checkAktifCalisma+0x1418>
			hataVar=1;
 800793a:	4b6c      	ldr	r3, [pc, #432]	; (8007aec <checkAktifCalisma+0x15b0>)
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007940:	2004      	movs	r0, #4
 8007942:	f7fd ffb7 	bl	80058b4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007946:	2004      	movs	r0, #4
 8007948:	f7fe fb46 	bl	8005fd8 <hata2EEPROM>
			katkapisivicihatasi=1;
 800794c:	4b6e      	ldr	r3, [pc, #440]	; (8007b08 <checkAktifCalisma+0x15cc>)
 800794e:	2201      	movs	r2, #1
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e01f      	b.n	8007994 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007954:	4b6c      	ldr	r3, [pc, #432]	; (8007b08 <checkAktifCalisma+0x15cc>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01b      	beq.n	8007994 <checkAktifCalisma+0x1458>
 800795c:	4b6b      	ldr	r3, [pc, #428]	; (8007b0c <checkAktifCalisma+0x15d0>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d017      	beq.n	8007994 <checkAktifCalisma+0x1458>
 8007964:	4b64      	ldr	r3, [pc, #400]	; (8007af8 <checkAktifCalisma+0x15bc>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f083 0301 	eor.w	r3, r3, #1
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d010      	beq.n	8007994 <checkAktifCalisma+0x1458>
 8007972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007976:	4862      	ldr	r0, [pc, #392]	; (8007b00 <checkAktifCalisma+0x15c4>)
 8007978:	f002 f986 	bl	8009c88 <HAL_GPIO_ReadPin>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d108      	bne.n	8007994 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007982:	4b61      	ldr	r3, [pc, #388]	; (8007b08 <checkAktifCalisma+0x15cc>)
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007988:	4b5c      	ldr	r3, [pc, #368]	; (8007afc <checkAktifCalisma+0x15c0>)
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800798e:	2004      	movs	r0, #4
 8007990:	f7fd ff3c 	bl	800580c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007994:	4b58      	ldr	r3, [pc, #352]	; (8007af8 <checkAktifCalisma+0x15bc>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d103      	bne.n	80079a4 <checkAktifCalisma+0x1468>
 800799c:	4b5c      	ldr	r3, [pc, #368]	; (8007b10 <checkAktifCalisma+0x15d4>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01c      	beq.n	80079de <checkAktifCalisma+0x14a2>
 80079a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079a8:	4855      	ldr	r0, [pc, #340]	; (8007b00 <checkAktifCalisma+0x15c4>)
 80079aa:	f002 f96d 	bl	8009c88 <HAL_GPIO_ReadPin>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d114      	bne.n	80079de <checkAktifCalisma+0x14a2>
 80079b4:	4b53      	ldr	r3, [pc, #332]	; (8007b04 <checkAktifCalisma+0x15c8>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d003      	beq.n	80079c4 <checkAktifCalisma+0x1488>
 80079bc:	4b51      	ldr	r3, [pc, #324]	; (8007b04 <checkAktifCalisma+0x15c8>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d10c      	bne.n	80079de <checkAktifCalisma+0x14a2>
			hataVar=1;
 80079c4:	4b49      	ldr	r3, [pc, #292]	; (8007aec <checkAktifCalisma+0x15b0>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80079ca:	2005      	movs	r0, #5
 80079cc:	f7fd ff72 	bl	80058b4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80079d0:	2005      	movs	r0, #5
 80079d2:	f7fe fb01 	bl	8005fd8 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80079d6:	4b4f      	ldr	r3, [pc, #316]	; (8007b14 <checkAktifCalisma+0x15d8>)
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e023      	b.n	8007a26 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80079de:	4b4d      	ldr	r3, [pc, #308]	; (8007b14 <checkAktifCalisma+0x15d8>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01f      	beq.n	8007a26 <checkAktifCalisma+0x14ea>
 80079e6:	4b49      	ldr	r3, [pc, #292]	; (8007b0c <checkAktifCalisma+0x15d0>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01b      	beq.n	8007a26 <checkAktifCalisma+0x14ea>
 80079ee:	4b42      	ldr	r3, [pc, #264]	; (8007af8 <checkAktifCalisma+0x15bc>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f083 0301 	eor.w	r3, r3, #1
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d014      	beq.n	8007a26 <checkAktifCalisma+0x14ea>
 80079fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a00:	483f      	ldr	r0, [pc, #252]	; (8007b00 <checkAktifCalisma+0x15c4>)
 8007a02:	f002 f941 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10c      	bne.n	8007a26 <checkAktifCalisma+0x14ea>
 8007a0c:	4b3f      	ldr	r3, [pc, #252]	; (8007b0c <checkAktifCalisma+0x15d0>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007a14:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <checkAktifCalisma+0x15d8>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007a1a:	4b3d      	ldr	r3, [pc, #244]	; (8007b10 <checkAktifCalisma+0x15d4>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007a20:	2005      	movs	r0, #5
 8007a22:	f7fd fef3 	bl	800580c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007a26:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <checkAktifCalisma+0x15a8>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d107      	bne.n	8007a3e <checkAktifCalisma+0x1502>
 8007a2e:	4b29      	ldr	r3, [pc, #164]	; (8007ad4 <checkAktifCalisma+0x1598>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d103      	bne.n	8007a3e <checkAktifCalisma+0x1502>
 8007a36:	4b38      	ldr	r3, [pc, #224]	; (8007b18 <checkAktifCalisma+0x15dc>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d014      	beq.n	8007a68 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007a3e:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <checkAktifCalisma+0x15e0>)
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b37      	ldr	r3, [pc, #220]	; (8007b20 <checkAktifCalisma+0x15e4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	4a36      	ldr	r2, [pc, #216]	; (8007b24 <checkAktifCalisma+0x15e8>)
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d30b      	bcc.n	8007a68 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007a50:	4b26      	ldr	r3, [pc, #152]	; (8007aec <checkAktifCalisma+0x15b0>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007a56:	2006      	movs	r0, #6
 8007a58:	f7fd ff2c 	bl	80058b4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007a5c:	2006      	movs	r0, #6
 8007a5e:	f7fe fabb 	bl	8005fd8 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007a62:	4b31      	ldr	r3, [pc, #196]	; (8007b28 <checkAktifCalisma+0x15ec>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007a68:	4b2f      	ldr	r3, [pc, #188]	; (8007b28 <checkAktifCalisma+0x15ec>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d013      	beq.n	8007a98 <checkAktifCalisma+0x155c>
 8007a70:	2108      	movs	r1, #8
 8007a72:	4823      	ldr	r0, [pc, #140]	; (8007b00 <checkAktifCalisma+0x15c4>)
 8007a74:	f002 f908 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <checkAktifCalisma+0x155c>
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	; (8007af8 <checkAktifCalisma+0x15bc>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f083 0301 	eor.w	r3, r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007a8c:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <checkAktifCalisma+0x15ec>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007a92:	2006      	movs	r0, #6
 8007a94:	f7fd feba 	bl	800580c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007a98:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <checkAktifCalisma+0x15f0>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <checkAktifCalisma+0x157c>
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <checkAktifCalisma+0x1598>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <checkAktifCalisma+0x157c>
 8007aa8:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <checkAktifCalisma+0x15f4>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <checkAktifCalisma+0x157c>
 8007ab0:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <checkAktifCalisma+0x15dc>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d03f      	beq.n	8007b38 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <checkAktifCalisma+0x15f8>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <checkAktifCalisma+0x15c0>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007ac4:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <checkAktifCalisma+0x15d4>)
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e03c      	b.n	8007b46 <checkAktifCalisma+0x160a>
 8007acc:	20000c8a 	.word	0x20000c8a
 8007ad0:	20000c90 	.word	0x20000c90
 8007ad4:	20000c71 	.word	0x20000c71
 8007ad8:	20000c9a 	.word	0x20000c9a
 8007adc:	20000c3c 	.word	0x20000c3c
 8007ae0:	20000c40 	.word	0x20000c40
 8007ae4:	20000c8d 	.word	0x20000c8d
 8007ae8:	40011000 	.word	0x40011000
 8007aec:	20000c8e 	.word	0x20000c8e
 8007af0:	20000c97 	.word	0x20000c97
 8007af4:	40010c00 	.word	0x40010c00
 8007af8:	20000c87 	.word	0x20000c87
 8007afc:	20000c9b 	.word	0x20000c9b
 8007b00:	40010800 	.word	0x40010800
 8007b04:	20000c41 	.word	0x20000c41
 8007b08:	20000c98 	.word	0x20000c98
 8007b0c:	20000c7b 	.word	0x20000c7b
 8007b10:	20000c9c 	.word	0x20000c9c
 8007b14:	20000c99 	.word	0x20000c99
 8007b18:	20000c70 	.word	0x20000c70
 8007b1c:	20000bc4 	.word	0x20000bc4
 8007b20:	20000bd8 	.word	0x20000bd8
 8007b24:	20000c51 	.word	0x20000c51
 8007b28:	20000c88 	.word	0x20000c88
 8007b2c:	20000c6e 	.word	0x20000c6e
 8007b30:	20000c6f 	.word	0x20000c6f
 8007b34:	20000c8f 	.word	0x20000c8f
		} else {
			makineCalisiyor=1;
 8007b38:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <checkAktifCalisma+0x1678>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	; (8007bb8 <checkAktifCalisma+0x167c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <checkAktifCalisma+0x1680>)
 8007b44:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007b46:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <checkAktifCalisma+0x1684>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d02f      	beq.n	8007bae <checkAktifCalisma+0x1672>
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	; (8007bc4 <checkAktifCalisma+0x1688>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f083 0301 	eor.w	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d028      	beq.n	8007bae <checkAktifCalisma+0x1672>
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <checkAktifCalisma+0x168c>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f083 0301 	eor.w	r3, r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d021      	beq.n	8007bae <checkAktifCalisma+0x1672>
 8007b6a:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <checkAktifCalisma+0x1690>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	f083 0301 	eor.w	r3, r3, #1
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007b78:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <checkAktifCalisma+0x1694>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f083 0301 	eor.w	r3, r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d013      	beq.n	8007bae <checkAktifCalisma+0x1672>
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <checkAktifCalisma+0x1698>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f083 0301 	eor.w	r3, r3, #1
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00c      	beq.n	8007bae <checkAktifCalisma+0x1672>
 8007b94:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <checkAktifCalisma+0x169c>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f083 0301 	eor.w	r3, r3, #1
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <checkAktifCalisma+0x1672>
			hataVar=0;
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <checkAktifCalisma+0x1684>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007ba8:	2007      	movs	r0, #7
 8007baa:	f7fd fe2f 	bl	800580c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007bae:	bf00      	nop
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000c8f 	.word	0x20000c8f
 8007bb8:	20000bc4 	.word	0x20000bc4
 8007bbc:	20000bd8 	.word	0x20000bd8
 8007bc0:	20000c8e 	.word	0x20000c8e
 8007bc4:	20000c89 	.word	0x20000c89
 8007bc8:	20000c8a 	.word	0x20000c8a
 8007bcc:	20000c97 	.word	0x20000c97
 8007bd0:	20000c98 	.word	0x20000c98
 8007bd4:	20000c99 	.word	0x20000c99
 8007bd8:	20000c88 	.word	0x20000c88

08007bdc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007be0:	4b8b      	ldr	r3, [pc, #556]	; (8007e10 <checkDemoModCalisma+0x234>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	f040 8229 	bne.w	800803c <checkDemoModCalisma+0x460>
 8007bea:	4b8a      	ldr	r3, [pc, #552]	; (8007e14 <checkDemoModCalisma+0x238>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 8224 	beq.w	800803c <checkDemoModCalisma+0x460>
 8007bf4:	4b88      	ldr	r3, [pc, #544]	; (8007e18 <checkDemoModCalisma+0x23c>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f040 821f 	bne.w	800803c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007bfe:	2102      	movs	r1, #2
 8007c00:	4886      	ldr	r0, [pc, #536]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007c02:	f002 f841 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11d      	bne.n	8007c48 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007c0c:	4b84      	ldr	r3, [pc, #528]	; (8007e20 <checkDemoModCalisma+0x244>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f083 0301 	eor.w	r3, r3, #1
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d016      	beq.n	8007c48 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007c1a:	4b82      	ldr	r3, [pc, #520]	; (8007e24 <checkDemoModCalisma+0x248>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f083 0301 	eor.w	r3, r3, #1
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00f      	beq.n	8007c48 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007c28:	4b7f      	ldr	r3, [pc, #508]	; (8007e28 <checkDemoModCalisma+0x24c>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f083 0301 	eor.w	r3, r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007c36:	2201      	movs	r2, #1
 8007c38:	2104      	movs	r1, #4
 8007c3a:	487c      	ldr	r0, [pc, #496]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007c3c:	f002 f83b 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007c40:	4b7b      	ldr	r3, [pc, #492]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e00e      	b.n	8007c66 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007c48:	2102      	movs	r1, #2
 8007c4a:	4874      	ldr	r0, [pc, #464]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007c4c:	f002 f81c 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d107      	bne.n	8007c66 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2104      	movs	r1, #4
 8007c5a:	4874      	ldr	r0, [pc, #464]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007c5c:	f002 f82b 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007c60:	4b73      	ldr	r3, [pc, #460]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007c66:	4b72      	ldr	r3, [pc, #456]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <checkDemoModCalisma+0xaa>
 8007c6e:	4b6d      	ldr	r3, [pc, #436]	; (8007e24 <checkDemoModCalisma+0x248>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d107      	bne.n	8007c86 <checkDemoModCalisma+0xaa>
 8007c76:	4b6c      	ldr	r3, [pc, #432]	; (8007e28 <checkDemoModCalisma+0x24c>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d103      	bne.n	8007c86 <checkDemoModCalisma+0xaa>
 8007c7e:	4b68      	ldr	r3, [pc, #416]	; (8007e20 <checkDemoModCalisma+0x244>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007c86:	2201      	movs	r2, #1
 8007c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c8c:	4867      	ldr	r0, [pc, #412]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007c8e:	f002 f812 	bl	8009cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007c92:	2201      	movs	r2, #1
 8007c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c98:	4864      	ldr	r0, [pc, #400]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007c9a:	f002 f80c 	bl	8009cb6 <HAL_GPIO_WritePin>
 8007c9e:	e00b      	b.n	8007cb8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ca6:	4861      	ldr	r0, [pc, #388]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007ca8:	f002 f805 	bl	8009cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007cac:	2200      	movs	r2, #0
 8007cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cb2:	485e      	ldr	r0, [pc, #376]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007cb4:	f001 ffff 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007cb8:	2102      	movs	r1, #2
 8007cba:	4858      	ldr	r0, [pc, #352]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007cbc:	f001 ffe4 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d10d      	bne.n	8007ce2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cca:	4854      	ldr	r0, [pc, #336]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007ccc:	f001 ffdc 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007cd6:	4b56      	ldr	r3, [pc, #344]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f083 0301 	eor.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	484d      	ldr	r0, [pc, #308]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007ce6:	f001 ffcf 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d125      	bne.n	8007d3c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cf4:	4849      	ldr	r0, [pc, #292]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007cf6:	f001 ffc7 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d11d      	bne.n	8007d3c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007d00:	4b4b      	ldr	r3, [pc, #300]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f083 0301 	eor.w	r3, r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d016      	beq.n	8007d3c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007d0e:	4b44      	ldr	r3, [pc, #272]	; (8007e20 <checkDemoModCalisma+0x244>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f083 0301 	eor.w	r3, r3, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00f      	beq.n	8007d3c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007d1c:	4b42      	ldr	r3, [pc, #264]	; (8007e28 <checkDemoModCalisma+0x24c>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f083 0301 	eor.w	r3, r3, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	2120      	movs	r1, #32
 8007d2e:	483b      	ldr	r0, [pc, #236]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007d30:	f001 ffc1 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007d34:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <checkDemoModCalisma+0x248>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e007      	b.n	8007d4c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2120      	movs	r1, #32
 8007d40:	4836      	ldr	r0, [pc, #216]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007d42:	f001 ffb8 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007d46:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <checkDemoModCalisma+0x248>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4833      	ldr	r0, [pc, #204]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007d50:	f001 ff9a 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d125      	bne.n	8007da6 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d5e:	482f      	ldr	r0, [pc, #188]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007d60:	f001 ff92 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11d      	bne.n	8007da6 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007d6a:	4b31      	ldr	r3, [pc, #196]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	f083 0301 	eor.w	r3, r3, #1
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d016      	beq.n	8007da6 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007d78:	4b2a      	ldr	r3, [pc, #168]	; (8007e24 <checkDemoModCalisma+0x248>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f083 0301 	eor.w	r3, r3, #1
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00f      	beq.n	8007da6 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007d86:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <checkDemoModCalisma+0x244>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f083 0301 	eor.w	r3, r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007d94:	2201      	movs	r2, #1
 8007d96:	2110      	movs	r1, #16
 8007d98:	4820      	ldr	r0, [pc, #128]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007d9a:	f001 ff8c 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007d9e:	4b22      	ldr	r3, [pc, #136]	; (8007e28 <checkDemoModCalisma+0x24c>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	e007      	b.n	8007db6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2110      	movs	r1, #16
 8007daa:	481c      	ldr	r0, [pc, #112]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007dac:	f001 ff83 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007db0:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <checkDemoModCalisma+0x24c>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007db6:	2104      	movs	r1, #4
 8007db8:	4818      	ldr	r0, [pc, #96]	; (8007e1c <checkDemoModCalisma+0x240>)
 8007dba:	f001 ff65 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d139      	bne.n	8007e38 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007dc4:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <checkDemoModCalisma+0x254>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f083 0301 	eor.w	r3, r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d032      	beq.n	8007e38 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <checkDemoModCalisma+0x24c>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f083 0301 	eor.w	r3, r3, #1
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d02b      	beq.n	8007e38 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007de0:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <checkDemoModCalisma+0x248>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f083 0301 	eor.w	r3, r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d024      	beq.n	8007e38 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007dee:	2201      	movs	r2, #1
 8007df0:	2102      	movs	r1, #2
 8007df2:	480e      	ldr	r0, [pc, #56]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007df4:	f001 ff5f 	bl	8009cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007df8:	2201      	movs	r2, #1
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	480b      	ldr	r0, [pc, #44]	; (8007e2c <checkDemoModCalisma+0x250>)
 8007dfe:	f001 ff5a 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <checkDemoModCalisma+0x244>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <checkDemoModCalisma+0x258>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e027      	b.n	8007e60 <checkDemoModCalisma+0x284>
 8007e10:	20000c57 	.word	0x20000c57
 8007e14:	20000c8b 	.word	0x20000c8b
 8007e18:	20000c56 	.word	0x20000c56
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	20000c92 	.word	0x20000c92
 8007e24:	20000c93 	.word	0x20000c93
 8007e28:	20000c94 	.word	0x20000c94
 8007e2c:	40010c00 	.word	0x40010c00
 8007e30:	20000c91 	.word	0x20000c91
 8007e34:	20000c77 	.word	0x20000c77
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007e38:	2104      	movs	r1, #4
 8007e3a:	48a0      	ldr	r0, [pc, #640]	; (80080bc <checkDemoModCalisma+0x4e0>)
 8007e3c:	f001 ff24 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d10c      	bne.n	8007e60 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2102      	movs	r1, #2
 8007e4a:	489d      	ldr	r0, [pc, #628]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 8007e4c:	f001 ff33 	bl	8009cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e50:	2200      	movs	r2, #0
 8007e52:	2101      	movs	r1, #1
 8007e54:	489a      	ldr	r0, [pc, #616]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 8007e56:	f001 ff2e 	bl	8009cb6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007e5a:	4b9a      	ldr	r3, [pc, #616]	; (80080c4 <checkDemoModCalisma+0x4e8>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007e60:	2104      	movs	r1, #4
 8007e62:	4896      	ldr	r0, [pc, #600]	; (80080bc <checkDemoModCalisma+0x4e0>)
 8007e64:	f001 ff10 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d10d      	bne.n	8007e8a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2180      	movs	r1, #128	; 0x80
 8007e72:	4895      	ldr	r0, [pc, #596]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 8007e74:	f001 ff1f 	bl	8009cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007e78:	2201      	movs	r2, #1
 8007e7a:	2120      	movs	r1, #32
 8007e7c:	4892      	ldr	r0, [pc, #584]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 8007e7e:	f001 ff1a 	bl	8009cb6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007e82:	4b92      	ldr	r3, [pc, #584]	; (80080cc <checkDemoModCalisma+0x4f0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a92      	ldr	r2, [pc, #584]	; (80080d0 <checkDemoModCalisma+0x4f4>)
 8007e88:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e8a:	4b90      	ldr	r3, [pc, #576]	; (80080cc <checkDemoModCalisma+0x4f0>)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	4b90      	ldr	r3, [pc, #576]	; (80080d0 <checkDemoModCalisma+0x4f4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d909      	bls.n	8007eac <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2180      	movs	r1, #128	; 0x80
 8007e9c:	488a      	ldr	r0, [pc, #552]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 8007e9e:	f001 ff0a 	bl	8009cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2120      	movs	r1, #32
 8007ea6:	4888      	ldr	r0, [pc, #544]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 8007ea8:	f001 ff05 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007eac:	2102      	movs	r1, #2
 8007eae:	4883      	ldr	r0, [pc, #524]	; (80080bc <checkDemoModCalisma+0x4e0>)
 8007eb0:	f001 feea 	bl	8009c88 <HAL_GPIO_ReadPin>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d108      	bne.n	8007ecc <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007eba:	2201      	movs	r2, #1
 8007ebc:	2140      	movs	r1, #64	; 0x40
 8007ebe:	4882      	ldr	r0, [pc, #520]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 8007ec0:	f001 fef9 	bl	8009cb6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007ec4:	4b81      	ldr	r3, [pc, #516]	; (80080cc <checkDemoModCalisma+0x4f0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a81      	ldr	r2, [pc, #516]	; (80080d0 <checkDemoModCalisma+0x4f4>)
 8007eca:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007ecc:	4b7f      	ldr	r3, [pc, #508]	; (80080cc <checkDemoModCalisma+0x4f0>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b7f      	ldr	r3, [pc, #508]	; (80080d0 <checkDemoModCalisma+0x4f4>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d904      	bls.n	8007ee4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007eda:	2200      	movs	r2, #0
 8007edc:	2140      	movs	r1, #64	; 0x40
 8007ede:	487a      	ldr	r0, [pc, #488]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 8007ee0:	f001 fee9 	bl	8009cb6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007ee4:	4b7b      	ldr	r3, [pc, #492]	; (80080d4 <checkDemoModCalisma+0x4f8>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d058      	beq.n	8007f9e <checkDemoModCalisma+0x3c2>
 8007eec:	4b7a      	ldr	r3, [pc, #488]	; (80080d8 <checkDemoModCalisma+0x4fc>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d054      	beq.n	8007f9e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007ef4:	4b79      	ldr	r3, [pc, #484]	; (80080dc <checkDemoModCalisma+0x500>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	4b77      	ldr	r3, [pc, #476]	; (80080dc <checkDemoModCalisma+0x500>)
 8007efe:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007f00:	4b76      	ldr	r3, [pc, #472]	; (80080dc <checkDemoModCalisma+0x500>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d908      	bls.n	8007f1a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007f08:	4b74      	ldr	r3, [pc, #464]	; (80080dc <checkDemoModCalisma+0x500>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007f0e:	4b74      	ldr	r3, [pc, #464]	; (80080e0 <checkDemoModCalisma+0x504>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	4b72      	ldr	r3, [pc, #456]	; (80080e0 <checkDemoModCalisma+0x504>)
 8007f18:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007f1a:	4b71      	ldr	r3, [pc, #452]	; (80080e0 <checkDemoModCalisma+0x504>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b09      	cmp	r3, #9
 8007f20:	d908      	bls.n	8007f34 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007f22:	4b6f      	ldr	r3, [pc, #444]	; (80080e0 <checkDemoModCalisma+0x504>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007f28:	4b6e      	ldr	r3, [pc, #440]	; (80080e4 <checkDemoModCalisma+0x508>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	4b6c      	ldr	r3, [pc, #432]	; (80080e4 <checkDemoModCalisma+0x508>)
 8007f32:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007f34:	4b6b      	ldr	r3, [pc, #428]	; (80080e4 <checkDemoModCalisma+0x508>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b09      	cmp	r3, #9
 8007f3a:	d908      	bls.n	8007f4e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007f3c:	4b69      	ldr	r3, [pc, #420]	; (80080e4 <checkDemoModCalisma+0x508>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007f42:	4b69      	ldr	r3, [pc, #420]	; (80080e8 <checkDemoModCalisma+0x50c>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	4b67      	ldr	r3, [pc, #412]	; (80080e8 <checkDemoModCalisma+0x50c>)
 8007f4c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007f4e:	4b66      	ldr	r3, [pc, #408]	; (80080e8 <checkDemoModCalisma+0x50c>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d908      	bls.n	8007f68 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007f56:	4b64      	ldr	r3, [pc, #400]	; (80080e8 <checkDemoModCalisma+0x50c>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007f5c:	4b63      	ldr	r3, [pc, #396]	; (80080ec <checkDemoModCalisma+0x510>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	4b61      	ldr	r3, [pc, #388]	; (80080ec <checkDemoModCalisma+0x510>)
 8007f66:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007f68:	4b60      	ldr	r3, [pc, #384]	; (80080ec <checkDemoModCalisma+0x510>)
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	4b60      	ldr	r3, [pc, #384]	; (80080f0 <checkDemoModCalisma+0x514>)
 8007f6e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007f72:	4b5d      	ldr	r3, [pc, #372]	; (80080e8 <checkDemoModCalisma+0x50c>)
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	4b5e      	ldr	r3, [pc, #376]	; (80080f0 <checkDemoModCalisma+0x514>)
 8007f78:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007f7a:	4b5a      	ldr	r3, [pc, #360]	; (80080e4 <checkDemoModCalisma+0x508>)
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	4b5c      	ldr	r3, [pc, #368]	; (80080f0 <checkDemoModCalisma+0x514>)
 8007f80:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007f82:	4b57      	ldr	r3, [pc, #348]	; (80080e0 <checkDemoModCalisma+0x504>)
 8007f84:	781a      	ldrb	r2, [r3, #0]
 8007f86:	4b5a      	ldr	r3, [pc, #360]	; (80080f0 <checkDemoModCalisma+0x514>)
 8007f88:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007f8a:	4b54      	ldr	r3, [pc, #336]	; (80080dc <checkDemoModCalisma+0x500>)
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	4b58      	ldr	r3, [pc, #352]	; (80080f0 <checkDemoModCalisma+0x514>)
 8007f90:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007f92:	4b58      	ldr	r3, [pc, #352]	; (80080f4 <checkDemoModCalisma+0x518>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007f98:	4b4f      	ldr	r3, [pc, #316]	; (80080d8 <checkDemoModCalisma+0x4fc>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007f9e:	4b56      	ldr	r3, [pc, #344]	; (80080f8 <checkDemoModCalisma+0x51c>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 8087 	bne.w	80080b6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007fa8:	4a54      	ldr	r2, [pc, #336]	; (80080fc <checkDemoModCalisma+0x520>)
 8007faa:	2101      	movs	r1, #1
 8007fac:	2002      	movs	r0, #2
 8007fae:	f7f8 fc03 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007fb2:	4a53      	ldr	r2, [pc, #332]	; (8008100 <checkDemoModCalisma+0x524>)
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	f7f8 fbfe 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007fbc:	4b4b      	ldr	r3, [pc, #300]	; (80080ec <checkDemoModCalisma+0x510>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	4950      	ldr	r1, [pc, #320]	; (8008104 <checkDemoModCalisma+0x528>)
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f004 fe8b 	bl	800cce0 <itoa>
			lcd_print(2,12,snum);
 8007fca:	4a4e      	ldr	r2, [pc, #312]	; (8008104 <checkDemoModCalisma+0x528>)
 8007fcc:	210c      	movs	r1, #12
 8007fce:	2002      	movs	r0, #2
 8007fd0:	f7f8 fbf2 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007fd4:	4b44      	ldr	r3, [pc, #272]	; (80080e8 <checkDemoModCalisma+0x50c>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	220a      	movs	r2, #10
 8007fda:	494a      	ldr	r1, [pc, #296]	; (8008104 <checkDemoModCalisma+0x528>)
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f004 fe7f 	bl	800cce0 <itoa>
			lcd_print(2,13,snum);
 8007fe2:	4a48      	ldr	r2, [pc, #288]	; (8008104 <checkDemoModCalisma+0x528>)
 8007fe4:	210d      	movs	r1, #13
 8007fe6:	2002      	movs	r0, #2
 8007fe8:	f7f8 fbe6 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007fec:	4b3d      	ldr	r3, [pc, #244]	; (80080e4 <checkDemoModCalisma+0x508>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	4944      	ldr	r1, [pc, #272]	; (8008104 <checkDemoModCalisma+0x528>)
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f004 fe73 	bl	800cce0 <itoa>
			lcd_print(2,14,snum);
 8007ffa:	4a42      	ldr	r2, [pc, #264]	; (8008104 <checkDemoModCalisma+0x528>)
 8007ffc:	210e      	movs	r1, #14
 8007ffe:	2002      	movs	r0, #2
 8008000:	f7f8 fbda 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8008004:	4b36      	ldr	r3, [pc, #216]	; (80080e0 <checkDemoModCalisma+0x504>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	220a      	movs	r2, #10
 800800a:	493e      	ldr	r1, [pc, #248]	; (8008104 <checkDemoModCalisma+0x528>)
 800800c:	4618      	mov	r0, r3
 800800e:	f004 fe67 	bl	800cce0 <itoa>
			lcd_print(2,15,snum);
 8008012:	4a3c      	ldr	r2, [pc, #240]	; (8008104 <checkDemoModCalisma+0x528>)
 8008014:	210f      	movs	r1, #15
 8008016:	2002      	movs	r0, #2
 8008018:	f7f8 fbce 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800801c:	4b2f      	ldr	r3, [pc, #188]	; (80080dc <checkDemoModCalisma+0x500>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	220a      	movs	r2, #10
 8008022:	4938      	ldr	r1, [pc, #224]	; (8008104 <checkDemoModCalisma+0x528>)
 8008024:	4618      	mov	r0, r3
 8008026:	f004 fe5b 	bl	800cce0 <itoa>
			lcd_print(2,16,snum);
 800802a:	4a36      	ldr	r2, [pc, #216]	; (8008104 <checkDemoModCalisma+0x528>)
 800802c:	2110      	movs	r1, #16
 800802e:	2002      	movs	r0, #2
 8008030:	f7f8 fbc2 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8008034:	4b34      	ldr	r3, [pc, #208]	; (8008108 <checkDemoModCalisma+0x52c>)
 8008036:	2201      	movs	r2, #1
 8008038:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800803a:	e03c      	b.n	80080b6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800803c:	4b33      	ldr	r3, [pc, #204]	; (800810c <checkDemoModCalisma+0x530>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d003      	beq.n	800804c <checkDemoModCalisma+0x470>
 8008044:	4b2c      	ldr	r3, [pc, #176]	; (80080f8 <checkDemoModCalisma+0x51c>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d134      	bne.n	80080b6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800804c:	2200      	movs	r2, #0
 800804e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008052:	481b      	ldr	r0, [pc, #108]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 8008054:	f001 fe2f 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008058:	2200      	movs	r2, #0
 800805a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800805e:	4818      	ldr	r0, [pc, #96]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 8008060:	f001 fe29 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008064:	2200      	movs	r2, #0
 8008066:	2104      	movs	r1, #4
 8008068:	4815      	ldr	r0, [pc, #84]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 800806a:	f001 fe24 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800806e:	2200      	movs	r2, #0
 8008070:	2102      	movs	r1, #2
 8008072:	4813      	ldr	r0, [pc, #76]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 8008074:	f001 fe1f 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008078:	2200      	movs	r2, #0
 800807a:	2101      	movs	r1, #1
 800807c:	4810      	ldr	r0, [pc, #64]	; (80080c0 <checkDemoModCalisma+0x4e4>)
 800807e:	f001 fe1a 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008082:	2200      	movs	r2, #0
 8008084:	2120      	movs	r1, #32
 8008086:	480d      	ldr	r0, [pc, #52]	; (80080bc <checkDemoModCalisma+0x4e0>)
 8008088:	f001 fe15 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800808c:	2200      	movs	r2, #0
 800808e:	2110      	movs	r1, #16
 8008090:	480a      	ldr	r0, [pc, #40]	; (80080bc <checkDemoModCalisma+0x4e0>)
 8008092:	f001 fe10 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008096:	2200      	movs	r2, #0
 8008098:	2180      	movs	r1, #128	; 0x80
 800809a:	480b      	ldr	r0, [pc, #44]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 800809c:	f001 fe0b 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2140      	movs	r1, #64	; 0x40
 80080a4:	4808      	ldr	r0, [pc, #32]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 80080a6:	f001 fe06 	bl	8009cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80080aa:	2200      	movs	r2, #0
 80080ac:	2120      	movs	r1, #32
 80080ae:	4806      	ldr	r0, [pc, #24]	; (80080c8 <checkDemoModCalisma+0x4ec>)
 80080b0:	f001 fe01 	bl	8009cb6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80080b4:	e7ff      	b.n	80080b6 <checkDemoModCalisma+0x4da>
 80080b6:	bf00      	nop
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	40011000 	.word	0x40011000
 80080c0:	40010c00 	.word	0x40010c00
 80080c4:	20000c92 	.word	0x20000c92
 80080c8:	40010800 	.word	0x40010800
 80080cc:	20000bc4 	.word	0x20000bc4
 80080d0:	20000bd4 	.word	0x20000bd4
 80080d4:	20000c91 	.word	0x20000c91
 80080d8:	20000c77 	.word	0x20000c77
 80080dc:	20000c36 	.word	0x20000c36
 80080e0:	20000c37 	.word	0x20000c37
 80080e4:	200009b1 	.word	0x200009b1
 80080e8:	200009b2 	.word	0x200009b2
 80080ec:	20000c38 	.word	0x20000c38
 80080f0:	20000b28 	.word	0x20000b28
 80080f4:	20000c65 	.word	0x20000c65
 80080f8:	20000c56 	.word	0x20000c56
 80080fc:	0800e47c 	.word	0x0800e47c
 8008100:	0800e488 	.word	0x0800e488
 8008104:	20000bbc 	.word	0x20000bbc
 8008108:	20000c6d 	.word	0x20000c6d
 800810c:	20000c57 	.word	0x20000c57

08008110 <mergeData>:

char* mergeData() {
 8008110:	b580      	push	{r7, lr}
 8008112:	b09e      	sub	sp, #120	; 0x78
 8008114:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008116:	2300      	movs	r3, #0
 8008118:	643b      	str	r3, [r7, #64]	; 0x40
 800811a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800811e:	2229      	movs	r2, #41	; 0x29
 8008120:	2100      	movs	r1, #0
 8008122:	4618      	mov	r0, r3
 8008124:	f004 fef4 	bl	800cf10 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008128:	4b6a      	ldr	r3, [pc, #424]	; (80082d4 <mergeData+0x1c4>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	713b      	strb	r3, [r7, #4]
 800812e:	4b6a      	ldr	r3, [pc, #424]	; (80082d8 <mergeData+0x1c8>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	717b      	strb	r3, [r7, #5]
 8008134:	4b69      	ldr	r3, [pc, #420]	; (80082dc <mergeData+0x1cc>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	71bb      	strb	r3, [r7, #6]
 800813a:	4b69      	ldr	r3, [pc, #420]	; (80082e0 <mergeData+0x1d0>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
 8008140:	4b68      	ldr	r3, [pc, #416]	; (80082e4 <mergeData+0x1d4>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	723b      	strb	r3, [r7, #8]
 8008146:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <mergeData+0x1d8>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	727b      	strb	r3, [r7, #9]
 800814c:	4b67      	ldr	r3, [pc, #412]	; (80082ec <mergeData+0x1dc>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	72bb      	strb	r3, [r7, #10]
 8008152:	4b67      	ldr	r3, [pc, #412]	; (80082f0 <mergeData+0x1e0>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	72fb      	strb	r3, [r7, #11]
 8008158:	4b66      	ldr	r3, [pc, #408]	; (80082f4 <mergeData+0x1e4>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	733b      	strb	r3, [r7, #12]
 800815e:	4b66      	ldr	r3, [pc, #408]	; (80082f8 <mergeData+0x1e8>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	737b      	strb	r3, [r7, #13]
 8008164:	4b65      	ldr	r3, [pc, #404]	; (80082fc <mergeData+0x1ec>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	73bb      	strb	r3, [r7, #14]
 800816a:	4b65      	ldr	r3, [pc, #404]	; (8008300 <mergeData+0x1f0>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	73fb      	strb	r3, [r7, #15]
 8008170:	4b64      	ldr	r3, [pc, #400]	; (8008304 <mergeData+0x1f4>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	743b      	strb	r3, [r7, #16]
 8008176:	4b64      	ldr	r3, [pc, #400]	; (8008308 <mergeData+0x1f8>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	747b      	strb	r3, [r7, #17]
 800817c:	4b63      	ldr	r3, [pc, #396]	; (800830c <mergeData+0x1fc>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	74bb      	strb	r3, [r7, #18]
 8008182:	4b63      	ldr	r3, [pc, #396]	; (8008310 <mergeData+0x200>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	74fb      	strb	r3, [r7, #19]
 8008188:	4b62      	ldr	r3, [pc, #392]	; (8008314 <mergeData+0x204>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	753b      	strb	r3, [r7, #20]
 800818e:	4b62      	ldr	r3, [pc, #392]	; (8008318 <mergeData+0x208>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	757b      	strb	r3, [r7, #21]
 8008194:	4b61      	ldr	r3, [pc, #388]	; (800831c <mergeData+0x20c>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	75bb      	strb	r3, [r7, #22]
 800819a:	4b61      	ldr	r3, [pc, #388]	; (8008320 <mergeData+0x210>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	75fb      	strb	r3, [r7, #23]
 80081a0:	4b60      	ldr	r3, [pc, #384]	; (8008324 <mergeData+0x214>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	763b      	strb	r3, [r7, #24]
 80081a6:	4b60      	ldr	r3, [pc, #384]	; (8008328 <mergeData+0x218>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	767b      	strb	r3, [r7, #25]
 80081ac:	4b5f      	ldr	r3, [pc, #380]	; (800832c <mergeData+0x21c>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	76bb      	strb	r3, [r7, #26]
 80081b2:	4b5f      	ldr	r3, [pc, #380]	; (8008330 <mergeData+0x220>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	76fb      	strb	r3, [r7, #27]
 80081b8:	4b5e      	ldr	r3, [pc, #376]	; (8008334 <mergeData+0x224>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	773b      	strb	r3, [r7, #28]
 80081be:	4b5e      	ldr	r3, [pc, #376]	; (8008338 <mergeData+0x228>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	777b      	strb	r3, [r7, #29]
 80081c4:	4b5d      	ldr	r3, [pc, #372]	; (800833c <mergeData+0x22c>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	77bb      	strb	r3, [r7, #30]
 80081ca:	4b5d      	ldr	r3, [pc, #372]	; (8008340 <mergeData+0x230>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	77fb      	strb	r3, [r7, #31]
 80081d0:	4b5c      	ldr	r3, [pc, #368]	; (8008344 <mergeData+0x234>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	f887 3020 	strb.w	r3, [r7, #32]
 80081d8:	4b5b      	ldr	r3, [pc, #364]	; (8008348 <mergeData+0x238>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80081e0:	4b5a      	ldr	r3, [pc, #360]	; (800834c <mergeData+0x23c>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081e8:	4b59      	ldr	r3, [pc, #356]	; (8008350 <mergeData+0x240>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f0:	4b58      	ldr	r3, [pc, #352]	; (8008354 <mergeData+0x244>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80081f8:	4b57      	ldr	r3, [pc, #348]	; (8008358 <mergeData+0x248>)
 80081fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80081fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8008202:	4b55      	ldr	r3, [pc, #340]	; (8008358 <mergeData+0x248>)
 8008204:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 800820c:	4b52      	ldr	r3, [pc, #328]	; (8008358 <mergeData+0x248>)
 800820e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8008212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 8008216:	4b50      	ldr	r3, [pc, #320]	; (8008358 <mergeData+0x248>)
 8008218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800821c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8008220:	4b4d      	ldr	r3, [pc, #308]	; (8008358 <mergeData+0x248>)
 8008222:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8008226:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 800822a:	4b4b      	ldr	r3, [pc, #300]	; (8008358 <mergeData+0x248>)
 800822c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8008230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8008234:	4b48      	ldr	r3, [pc, #288]	; (8008358 <mergeData+0x248>)
 8008236:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 800823e:	4b46      	ldr	r3, [pc, #280]	; (8008358 <mergeData+0x248>)
 8008240:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008244:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008248:	4b43      	ldr	r3, [pc, #268]	; (8008358 <mergeData+0x248>)
 800824a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800824e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8008252:	4b41      	ldr	r3, [pc, #260]	; (8008358 <mergeData+0x248>)
 8008254:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008258:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 800825c:	4b3e      	ldr	r3, [pc, #248]	; (8008358 <mergeData+0x248>)
 800825e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8008262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008266:	4b3d      	ldr	r3, [pc, #244]	; (800835c <mergeData+0x24c>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800826e:	2300      	movs	r3, #0
 8008270:	677b      	str	r3, [r7, #116]	; 0x74
 8008272:	e015      	b.n	80082a0 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008274:	1d3a      	adds	r2, r7, #4
 8008276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008278:	4413      	add	r3, r2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008282:	4937      	ldr	r1, [pc, #220]	; (8008360 <mergeData+0x250>)
 8008284:	4618      	mov	r0, r3
 8008286:	f004 fe23 	bl	800ced0 <siprintf>
	    strcat(combinedString, temp);
 800828a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800828e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f004 fe43 	bl	800cf20 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800829a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800829c:	3301      	adds	r3, #1
 800829e:	677b      	str	r3, [r7, #116]	; 0x74
 80082a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082a2:	2b2c      	cmp	r3, #44	; 0x2c
 80082a4:	d9e6      	bls.n	8008274 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80082a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f7 ffba 	bl	8000224 <strlen>
 80082b0:	4603      	mov	r3, r0
 80082b2:	3301      	adds	r3, #1
 80082b4:	4618      	mov	r0, r3
 80082b6:	f004 fd15 	bl	800cce4 <malloc>
 80082ba:	4603      	mov	r3, r0
 80082bc:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80082be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082c2:	4619      	mov	r1, r3
 80082c4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80082c6:	f004 fe77 	bl	800cfb8 <strcpy>
	return result;
 80082ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3778      	adds	r7, #120	; 0x78
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000c48 	.word	0x20000c48
 80082d8:	20000c3a 	.word	0x20000c3a
 80082dc:	20000c3d 	.word	0x20000c3d
 80082e0:	20000c3e 	.word	0x20000c3e
 80082e4:	20000c3f 	.word	0x20000c3f
 80082e8:	20000c46 	.word	0x20000c46
 80082ec:	20000c40 	.word	0x20000c40
 80082f0:	20000c41 	.word	0x20000c41
 80082f4:	20000c45 	.word	0x20000c45
 80082f8:	20000c42 	.word	0x20000c42
 80082fc:	20000c52 	.word	0x20000c52
 8008300:	20000c43 	.word	0x20000c43
 8008304:	20000c53 	.word	0x20000c53
 8008308:	20000c44 	.word	0x20000c44
 800830c:	20000c54 	.word	0x20000c54
 8008310:	20000c47 	.word	0x20000c47
 8008314:	20000c49 	.word	0x20000c49
 8008318:	20000c4a 	.word	0x20000c4a
 800831c:	20000c4b 	.word	0x20000c4b
 8008320:	20000c4c 	.word	0x20000c4c
 8008324:	20000c4d 	.word	0x20000c4d
 8008328:	20000c4e 	.word	0x20000c4e
 800832c:	20000c4f 	.word	0x20000c4f
 8008330:	20000c50 	.word	0x20000c50
 8008334:	20000c51 	.word	0x20000c51
 8008338:	20000c55 	.word	0x20000c55
 800833c:	20000c57 	.word	0x20000c57
 8008340:	20000c36 	.word	0x20000c36
 8008344:	20000c37 	.word	0x20000c37
 8008348:	200009b1 	.word	0x200009b1
 800834c:	200009b2 	.word	0x200009b2
 8008350:	20000c38 	.word	0x20000c38
 8008354:	20000c5a 	.word	0x20000c5a
 8008358:	20000b28 	.word	0x20000b28
 800835c:	20000940 	.word	0x20000940
 8008360:	0800e49c 	.word	0x0800e49c

08008364 <mainLoop>:

void mainLoop() {
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800836a:	f7fd fffb 	bl	8006364 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800836e:	2101      	movs	r1, #1
 8008370:	48ac      	ldr	r0, [pc, #688]	; (8008624 <mainLoop+0x2c0>)
 8008372:	f001 fc89 	bl	8009c88 <HAL_GPIO_ReadPin>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d136      	bne.n	80083ea <mainLoop+0x86>
 800837c:	2108      	movs	r1, #8
 800837e:	48aa      	ldr	r0, [pc, #680]	; (8008628 <mainLoop+0x2c4>)
 8008380:	f001 fc82 	bl	8009c88 <HAL_GPIO_ReadPin>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d12f      	bne.n	80083ea <mainLoop+0x86>
 800838a:	2102      	movs	r1, #2
 800838c:	48a5      	ldr	r0, [pc, #660]	; (8008624 <mainLoop+0x2c0>)
 800838e:	f001 fc7b 	bl	8009c88 <HAL_GPIO_ReadPin>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d128      	bne.n	80083ea <mainLoop+0x86>
 8008398:	2104      	movs	r1, #4
 800839a:	48a2      	ldr	r0, [pc, #648]	; (8008624 <mainLoop+0x2c0>)
 800839c:	f001 fc74 	bl	8009c88 <HAL_GPIO_ReadPin>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d121      	bne.n	80083ea <mainLoop+0x86>
 80083a6:	2108      	movs	r1, #8
 80083a8:	489e      	ldr	r0, [pc, #632]	; (8008624 <mainLoop+0x2c0>)
 80083aa:	f001 fc6d 	bl	8009c88 <HAL_GPIO_ReadPin>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11a      	bne.n	80083ea <mainLoop+0x86>
 80083b4:	2180      	movs	r1, #128	; 0x80
 80083b6:	489c      	ldr	r0, [pc, #624]	; (8008628 <mainLoop+0x2c4>)
 80083b8:	f001 fc66 	bl	8009c88 <HAL_GPIO_ReadPin>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d113      	bne.n	80083ea <mainLoop+0x86>
 80083c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083c6:	4898      	ldr	r0, [pc, #608]	; (8008628 <mainLoop+0x2c4>)
 80083c8:	f001 fc5e 	bl	8009c88 <HAL_GPIO_ReadPin>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10b      	bne.n	80083ea <mainLoop+0x86>
 80083d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083d6:	4894      	ldr	r0, [pc, #592]	; (8008628 <mainLoop+0x2c4>)
 80083d8:	f001 fc56 	bl	8009c88 <HAL_GPIO_ReadPin>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d103      	bne.n	80083ea <mainLoop+0x86>
			butonKontrol=0;
 80083e2:	4b92      	ldr	r3, [pc, #584]	; (800862c <mainLoop+0x2c8>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	701a      	strb	r2, [r3, #0]
 80083e8:	e003      	b.n	80083f2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80083ea:	4b91      	ldr	r3, [pc, #580]	; (8008630 <mainLoop+0x2cc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a91      	ldr	r2, [pc, #580]	; (8008634 <mainLoop+0x2d0>)
 80083f0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80083f2:	4b91      	ldr	r3, [pc, #580]	; (8008638 <mainLoop+0x2d4>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d039      	beq.n	800846e <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80083fa:	bf00      	nop
 80083fc:	488f      	ldr	r0, [pc, #572]	; (800863c <mainLoop+0x2d8>)
 80083fe:	f002 fa6c 	bl	800a8da <HAL_I2C_GetError>
 8008402:	4603      	mov	r3, r0
 8008404:	2b04      	cmp	r3, #4
 8008406:	d0f9      	beq.n	80083fc <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008408:	bf00      	nop
 800840a:	488c      	ldr	r0, [pc, #560]	; (800863c <mainLoop+0x2d8>)
 800840c:	f002 fa58 	bl	800a8c0 <HAL_I2C_GetState>
 8008410:	4603      	mov	r3, r0
 8008412:	2b20      	cmp	r3, #32
 8008414:	d1f9      	bne.n	800840a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8008416:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800841a:	9302      	str	r3, [sp, #8]
 800841c:	233f      	movs	r3, #63	; 0x3f
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	4b87      	ldr	r3, [pc, #540]	; (8008640 <mainLoop+0x2dc>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	233f      	movs	r3, #63	; 0x3f
 8008426:	2200      	movs	r2, #0
 8008428:	21a0      	movs	r1, #160	; 0xa0
 800842a:	4884      	ldr	r0, [pc, #528]	; (800863c <mainLoop+0x2d8>)
 800842c:	f001 fee6 	bl	800a1fc <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008430:	2005      	movs	r0, #5
 8008432:	f000 fe59 	bl	80090e8 <HAL_Delay>

		  hafizaYaz=0;
 8008436:	4b80      	ldr	r3, [pc, #512]	; (8008638 <mainLoop+0x2d4>)
 8008438:	2200      	movs	r2, #0
 800843a:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800843c:	4b81      	ldr	r3, [pc, #516]	; (8008644 <mainLoop+0x2e0>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008444:	4a80      	ldr	r2, [pc, #512]	; (8008648 <mainLoop+0x2e4>)
 8008446:	2101      	movs	r1, #1
 8008448:	2002      	movs	r0, #2
 800844a:	f7f8 f9b5 	bl	80007b8 <lcd_print>
 800844e:	e008      	b.n	8008462 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008450:	4b7c      	ldr	r3, [pc, #496]	; (8008644 <mainLoop+0x2e0>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d104      	bne.n	8008462 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008458:	4a7c      	ldr	r2, [pc, #496]	; (800864c <mainLoop+0x2e8>)
 800845a:	2101      	movs	r1, #1
 800845c:	2002      	movs	r0, #2
 800845e:	f7f8 f9ab 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008466:	f000 fe3f 	bl	80090e8 <HAL_Delay>
		  lcd_clear();
 800846a:	f7f8 f9d1 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800846e:	4b78      	ldr	r3, [pc, #480]	; (8008650 <mainLoop+0x2ec>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f083 0301 	eor.w	r3, r3, #1
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d06e      	beq.n	800855a <mainLoop+0x1f6>
 800847c:	486f      	ldr	r0, [pc, #444]	; (800863c <mainLoop+0x2d8>)
 800847e:	f002 fa1f 	bl	800a8c0 <HAL_I2C_GetState>
 8008482:	4603      	mov	r3, r0
 8008484:	2b20      	cmp	r3, #32
 8008486:	d168      	bne.n	800855a <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008488:	4b72      	ldr	r3, [pc, #456]	; (8008654 <mainLoop+0x2f0>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f083 0301 	eor.w	r3, r3, #1
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d044      	beq.n	8008520 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008496:	4a70      	ldr	r2, [pc, #448]	; (8008658 <mainLoop+0x2f4>)
 8008498:	2101      	movs	r1, #1
 800849a:	2001      	movs	r0, #1
 800849c:	f7f8 f98c 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 80084a0:	4b68      	ldr	r3, [pc, #416]	; (8008644 <mainLoop+0x2e0>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 80084a8:	4a6c      	ldr	r2, [pc, #432]	; (800865c <mainLoop+0x2f8>)
 80084aa:	2101      	movs	r1, #1
 80084ac:	2002      	movs	r0, #2
 80084ae:	f7f8 f983 	bl	80007b8 <lcd_print>
 80084b2:	e008      	b.n	80084c6 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 80084b4:	4b63      	ldr	r3, [pc, #396]	; (8008644 <mainLoop+0x2e0>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d104      	bne.n	80084c6 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 80084bc:	4a68      	ldr	r2, [pc, #416]	; (8008660 <mainLoop+0x2fc>)
 80084be:	2101      	movs	r1, #1
 80084c0:	2002      	movs	r0, #2
 80084c2:	f7f8 f979 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 80084c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084ca:	f000 fe0d 	bl	80090e8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80084ce:	bf00      	nop
 80084d0:	485a      	ldr	r0, [pc, #360]	; (800863c <mainLoop+0x2d8>)
 80084d2:	f002 fa02 	bl	800a8da <HAL_I2C_GetError>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d0f9      	beq.n	80084d0 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80084dc:	e003      	b.n	80084e6 <mainLoop+0x182>
				  HAL_Delay(1000);
 80084de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084e2:	f000 fe01 	bl	80090e8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80084e6:	4855      	ldr	r0, [pc, #340]	; (800863c <mainLoop+0x2d8>)
 80084e8:	f002 f9ea 	bl	800a8c0 <HAL_I2C_GetState>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d1f5      	bne.n	80084de <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80084f2:	4b54      	ldr	r3, [pc, #336]	; (8008644 <mainLoop+0x2e0>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80084fa:	4a5a      	ldr	r2, [pc, #360]	; (8008664 <mainLoop+0x300>)
 80084fc:	2101      	movs	r1, #1
 80084fe:	2002      	movs	r0, #2
 8008500:	f7f8 f95a 	bl	80007b8 <lcd_print>
 8008504:	e008      	b.n	8008518 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8008506:	4b4f      	ldr	r3, [pc, #316]	; (8008644 <mainLoop+0x2e0>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d104      	bne.n	8008518 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 800850e:	4a56      	ldr	r2, [pc, #344]	; (8008668 <mainLoop+0x304>)
 8008510:	2101      	movs	r1, #1
 8008512:	2002      	movs	r0, #2
 8008514:	f7f8 f950 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8008518:	4b4e      	ldr	r3, [pc, #312]	; (8008654 <mainLoop+0x2f0>)
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e014      	b.n	800854a <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8008520:	4b48      	ldr	r3, [pc, #288]	; (8008644 <mainLoop+0x2e0>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d105      	bne.n	8008534 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008528:	4a50      	ldr	r2, [pc, #320]	; (800866c <mainLoop+0x308>)
 800852a:	2101      	movs	r1, #1
 800852c:	2002      	movs	r0, #2
 800852e:	f7f8 f943 	bl	80007b8 <lcd_print>
 8008532:	e008      	b.n	8008546 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008534:	4b43      	ldr	r3, [pc, #268]	; (8008644 <mainLoop+0x2e0>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d104      	bne.n	8008546 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 800853c:	4a4c      	ldr	r2, [pc, #304]	; (8008670 <mainLoop+0x30c>)
 800853e:	2101      	movs	r1, #1
 8008540:	2002      	movs	r0, #2
 8008542:	f7f8 f939 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 8008546:	f7f8 f963 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 800854a:	f7f8 f961 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 800854e:	2001      	movs	r0, #1
 8008550:	f7fd fac6 	bl	8005ae0 <eepromKontrol>
		  hafizaOku=1;
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <mainLoop+0x2ec>)
 8008556:	2201      	movs	r2, #1
 8008558:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800855a:	4b46      	ldr	r3, [pc, #280]	; (8008674 <mainLoop+0x310>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d11c      	bne.n	800859c <mainLoop+0x238>
 8008562:	4b45      	ldr	r3, [pc, #276]	; (8008678 <mainLoop+0x314>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f083 0301 	eor.w	r3, r3, #1
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d015      	beq.n	800859c <mainLoop+0x238>
 8008570:	4b42      	ldr	r3, [pc, #264]	; (800867c <mainLoop+0x318>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d111      	bne.n	800859c <mainLoop+0x238>
			lcd_clear();
 8008578:	f7f8 f94a 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 800857c:	200a      	movs	r0, #10
 800857e:	f000 fdb3 	bl	80090e8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008582:	4a3f      	ldr	r2, [pc, #252]	; (8008680 <mainLoop+0x31c>)
 8008584:	2101      	movs	r1, #1
 8008586:	2001      	movs	r0, #1
 8008588:	f7f8 f916 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800858c:	4a3d      	ldr	r2, [pc, #244]	; (8008684 <mainLoop+0x320>)
 800858e:	2101      	movs	r1, #1
 8008590:	2002      	movs	r0, #2
 8008592:	f7f8 f911 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8008596:	4b38      	ldr	r3, [pc, #224]	; (8008678 <mainLoop+0x314>)
 8008598:	2201      	movs	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800859c:	4b35      	ldr	r3, [pc, #212]	; (8008674 <mainLoop+0x310>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d112      	bne.n	80085ca <mainLoop+0x266>
 80085a4:	2102      	movs	r1, #2
 80085a6:	481f      	ldr	r0, [pc, #124]	; (8008624 <mainLoop+0x2c0>)
 80085a8:	f001 fb6e 	bl	8009c88 <HAL_GPIO_ReadPin>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d10b      	bne.n	80085ca <mainLoop+0x266>
 80085b2:	2104      	movs	r1, #4
 80085b4:	481b      	ldr	r0, [pc, #108]	; (8008624 <mainLoop+0x2c0>)
 80085b6:	f001 fb67 	bl	8009c88 <HAL_GPIO_ReadPin>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d104      	bne.n	80085ca <mainLoop+0x266>
			menuGiris=1;
 80085c0:	4b2c      	ldr	r3, [pc, #176]	; (8008674 <mainLoop+0x310>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80085c6:	f7f8 f923 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 80085ca:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <mainLoop+0x310>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d102      	bne.n	80085d8 <mainLoop+0x274>
			menu(&hi2c1);
 80085d2:	481a      	ldr	r0, [pc, #104]	; (800863c <mainLoop+0x2d8>)
 80085d4:	f7f9 f806 	bl	80015e4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80085d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085dc:	4812      	ldr	r0, [pc, #72]	; (8008628 <mainLoop+0x2c4>)
 80085de:	f001 fb82 	bl	8009ce6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80085e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085e6:	4828      	ldr	r0, [pc, #160]	; (8008688 <mainLoop+0x324>)
 80085e8:	f001 fb4e 	bl	8009c88 <HAL_GPIO_ReadPin>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <mainLoop+0x2a4>
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <mainLoop+0x328>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f083 0301 	eor.w	r3, r3, #1
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <mainLoop+0x2a4>
			stopVar=1;
 8008600:	4b23      	ldr	r3, [pc, #140]	; (8008690 <mainLoop+0x32c>)
 8008602:	2201      	movs	r2, #1
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e002      	b.n	800860e <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8008608:	4b21      	ldr	r3, [pc, #132]	; (8008690 <mainLoop+0x32c>)
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 800860e:	f7fd fec9 	bl	80063a4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008612:	f7fd fefb 	bl	800640c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008616:	f7fd ff3f 	bl	8006498 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800861a:	f7fd ff8f 	bl	800653c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 800861e:	f7ff fadd 	bl	8007bdc <checkDemoModCalisma>
		checkLCDBacklight();
 8008622:	e6a2      	b.n	800836a <mainLoop+0x6>
 8008624:	40010800 	.word	0x40010800
 8008628:	40011000 	.word	0x40011000
 800862c:	20000c68 	.word	0x20000c68
 8008630:	20000bc4 	.word	0x20000bc4
 8008634:	20000be0 	.word	0x20000be0
 8008638:	20000c65 	.word	0x20000c65
 800863c:	20000df8 	.word	0x20000df8
 8008640:	20000b28 	.word	0x20000b28
 8008644:	20000c5a 	.word	0x20000c5a
 8008648:	0800e4a0 	.word	0x0800e4a0
 800864c:	0800e4b4 	.word	0x0800e4b4
 8008650:	20000c66 	.word	0x20000c66
 8008654:	20000c67 	.word	0x20000c67
 8008658:	0800e4c8 	.word	0x0800e4c8
 800865c:	0800e4dc 	.word	0x0800e4dc
 8008660:	0800e4f0 	.word	0x0800e4f0
 8008664:	0800e504 	.word	0x0800e504
 8008668:	0800e518 	.word	0x0800e518
 800866c:	0800e52c 	.word	0x0800e52c
 8008670:	0800e540 	.word	0x0800e540
 8008674:	20000c56 	.word	0x20000c56
 8008678:	20000c6d 	.word	0x20000c6d
 800867c:	20000c57 	.word	0x20000c57
 8008680:	0800e404 	.word	0x0800e404
 8008684:	0800e418 	.word	0x0800e418
 8008688:	40010c00 	.word	0x40010c00
 800868c:	20000c8e 	.word	0x20000c8e
 8008690:	20000c8b 	.word	0x20000c8b

08008694 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800869c:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	4a03      	ldr	r2, [pc, #12]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086a4:	6013      	str	r3, [r2, #0]
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr
 80086b0:	20000bc4 	.word	0x20000bc4

080086b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80086b8:	f000 fcb4 	bl	8009024 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80086bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086c0:	f000 fd12 	bl	80090e8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80086c4:	f000 f8e4 	bl	8008890 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80086c8:	f000 fa06 	bl	8008ad8 <MX_GPIO_Init>
  MX_CAN_Init();
 80086cc:	f000 f926 	bl	800891c <MX_CAN_Init>
  MX_I2C1_Init();
 80086d0:	f000 f958 	bl	8008984 <MX_I2C1_Init>
  MX_TIM1_Init();
 80086d4:	f000 f984 	bl	80089e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80086d8:	f000 f9d4 	bl	8008a84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80086dc:	2201      	movs	r2, #1
 80086de:	2140      	movs	r1, #64	; 0x40
 80086e0:	485b      	ldr	r0, [pc, #364]	; (8008850 <main+0x19c>)
 80086e2:	f001 fae8 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80086e6:	2201      	movs	r2, #1
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	4859      	ldr	r0, [pc, #356]	; (8008850 <main+0x19c>)
 80086ec:	f001 fae3 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086f0:	200a      	movs	r0, #10
 80086f2:	f000 fcf9 	bl	80090e8 <HAL_Delay>
  lcd_init();
 80086f6:	f7f8 f82d 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 80086fa:	200a      	movs	r0, #10
 80086fc:	f000 fcf4 	bl	80090e8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008700:	4854      	ldr	r0, [pc, #336]	; (8008854 <main+0x1a0>)
 8008702:	f003 f98b 	bl	800ba1c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008706:	bf00      	nop
 8008708:	4853      	ldr	r0, [pc, #332]	; (8008858 <main+0x1a4>)
 800870a:	f002 f8e6 	bl	800a8da <HAL_I2C_GetError>
 800870e:	4603      	mov	r3, r0
 8008710:	2b04      	cmp	r3, #4
 8008712:	d0f9      	beq.n	8008708 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008714:	bf00      	nop
 8008716:	4850      	ldr	r0, [pc, #320]	; (8008858 <main+0x1a4>)
 8008718:	f002 f8d2 	bl	800a8c0 <HAL_I2C_GetState>
 800871c:	4603      	mov	r3, r0
 800871e:	2b20      	cmp	r3, #32
 8008720:	d1f9      	bne.n	8008716 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008722:	2200      	movs	r2, #0
 8008724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008728:	4849      	ldr	r0, [pc, #292]	; (8008850 <main+0x19c>)
 800872a:	f001 fac4 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800872e:	2200      	movs	r2, #0
 8008730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008734:	4846      	ldr	r0, [pc, #280]	; (8008850 <main+0x19c>)
 8008736:	f001 fabe 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800873a:	2200      	movs	r2, #0
 800873c:	2104      	movs	r1, #4
 800873e:	4844      	ldr	r0, [pc, #272]	; (8008850 <main+0x19c>)
 8008740:	f001 fab9 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008744:	2200      	movs	r2, #0
 8008746:	2102      	movs	r1, #2
 8008748:	4841      	ldr	r0, [pc, #260]	; (8008850 <main+0x19c>)
 800874a:	f001 fab4 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800874e:	2200      	movs	r2, #0
 8008750:	2101      	movs	r1, #1
 8008752:	483f      	ldr	r0, [pc, #252]	; (8008850 <main+0x19c>)
 8008754:	f001 faaf 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008758:	2200      	movs	r2, #0
 800875a:	2120      	movs	r1, #32
 800875c:	483f      	ldr	r0, [pc, #252]	; (800885c <main+0x1a8>)
 800875e:	f001 faaa 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008762:	2200      	movs	r2, #0
 8008764:	2110      	movs	r1, #16
 8008766:	483d      	ldr	r0, [pc, #244]	; (800885c <main+0x1a8>)
 8008768:	f001 faa5 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800876c:	2200      	movs	r2, #0
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	483b      	ldr	r0, [pc, #236]	; (8008860 <main+0x1ac>)
 8008772:	f001 faa0 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008776:	2200      	movs	r2, #0
 8008778:	2140      	movs	r1, #64	; 0x40
 800877a:	4839      	ldr	r0, [pc, #228]	; (8008860 <main+0x1ac>)
 800877c:	f001 fa9b 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008780:	2200      	movs	r2, #0
 8008782:	2120      	movs	r1, #32
 8008784:	4836      	ldr	r0, [pc, #216]	; (8008860 <main+0x1ac>)
 8008786:	f001 fa96 	bl	8009cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800878a:	2200      	movs	r2, #0
 800878c:	2110      	movs	r1, #16
 800878e:	4834      	ldr	r0, [pc, #208]	; (8008860 <main+0x1ac>)
 8008790:	f001 fa91 	bl	8009cb6 <HAL_GPIO_WritePin>

  i2cTest();
 8008794:	f7fd fd38 	bl	8006208 <i2cTest>
  HAL_Delay(100);
 8008798:	2064      	movs	r0, #100	; 0x64
 800879a:	f000 fca5 	bl	80090e8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800879e:	4a31      	ldr	r2, [pc, #196]	; (8008864 <main+0x1b0>)
 80087a0:	2101      	movs	r1, #1
 80087a2:	2001      	movs	r0, #1
 80087a4:	f7f8 f808 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80087a8:	4a2f      	ldr	r2, [pc, #188]	; (8008868 <main+0x1b4>)
 80087aa:	2101      	movs	r1, #1
 80087ac:	2002      	movs	r0, #2
 80087ae:	f7f8 f803 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 80087b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087b6:	f000 fc97 	bl	80090e8 <HAL_Delay>
  lcd_clear();
 80087ba:	f7f8 f829 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 80087be:	2000      	movs	r0, #0
 80087c0:	f7fd f98e 	bl	8005ae0 <eepromKontrol>

  if(strlen(machineID) == 0) {
 80087c4:	4b29      	ldr	r3, [pc, #164]	; (800886c <main+0x1b8>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <main+0x120>
	  takeMachineID(1, &hi2c1);
 80087cc:	4922      	ldr	r1, [pc, #136]	; (8008858 <main+0x1a4>)
 80087ce:	2001      	movs	r0, #1
 80087d0:	f7f8 fac6 	bl	8000d60 <takeMachineID>
  }

  lcd_clear();
 80087d4:	f7f8 f81c 	bl	8000810 <lcd_clear>
  HAL_Delay(500);
 80087d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087dc:	f000 fc84 	bl	80090e8 <HAL_Delay>

  if(iotMode == 1) {
 80087e0:	4b23      	ldr	r3, [pc, #140]	; (8008870 <main+0x1bc>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d126      	bne.n	8008836 <main+0x182>
	  if(strlen(wifiSSID) == 0) {
 80087e8:	4b22      	ldr	r3, [pc, #136]	; (8008874 <main+0x1c0>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <main+0x142>
		  takeWifiSSID(1);
 80087f0:	2001      	movs	r0, #1
 80087f2:	f7f8 fbc9 	bl	8000f88 <takeWifiSSID>
	  }

	  lcd_clear();
 80087f6:	f7f8 f80b 	bl	8000810 <lcd_clear>
	  HAL_Delay(500);
 80087fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087fe:	f000 fc73 	bl	80090e8 <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 8008802:	4b1d      	ldr	r3, [pc, #116]	; (8008878 <main+0x1c4>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <main+0x15c>
		  takeWifiPass(1);
 800880a:	2001      	movs	r0, #1
 800880c:	f7f8 fd38 	bl	8001280 <takeWifiPass>
	  }

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 8008810:	4a1a      	ldr	r2, [pc, #104]	; (800887c <main+0x1c8>)
 8008812:	2101      	movs	r1, #1
 8008814:	2001      	movs	r0, #1
 8008816:	f7f7 ffcf 	bl	80007b8 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin ");
 800881a:	4a19      	ldr	r2, [pc, #100]	; (8008880 <main+0x1cc>)
 800881c:	2101      	movs	r1, #1
 800881e:	2002      	movs	r0, #2
 8008820:	f7f7 ffca 	bl	80007b8 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8008824:	4a14      	ldr	r2, [pc, #80]	; (8008878 <main+0x1c4>)
 8008826:	4913      	ldr	r1, [pc, #76]	; (8008874 <main+0x1c0>)
 8008828:	4816      	ldr	r0, [pc, #88]	; (8008884 <main+0x1d0>)
 800882a:	f7f7 fd03 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 800882e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008832:	f000 fc59 	bl	80090e8 <HAL_Delay>
	  takeMachineID(0);
	  HAL_Delay(300);
	  idKontrol = checkMachineID(&huart1, machineID);
  }*/

  lcd_clear();
 8008836:	f7f7 ffeb 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 800883a:	20c8      	movs	r0, #200	; 0xc8
 800883c:	f000 fc54 	bl	80090e8 <HAL_Delay>

  backLightTimer = millis;
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <main+0x1d4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a11      	ldr	r2, [pc, #68]	; (800888c <main+0x1d8>)
 8008846:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008848:	f7ff fd8c 	bl	8008364 <mainLoop>
 800884c:	e7fc      	b.n	8008848 <main+0x194>
 800884e:	bf00      	nop
 8008850:	40010c00 	.word	0x40010c00
 8008854:	20000e4c 	.word	0x20000e4c
 8008858:	20000df8 	.word	0x20000df8
 800885c:	40011000 	.word	0x40011000
 8008860:	40010800 	.word	0x40010800
 8008864:	0800e554 	.word	0x0800e554
 8008868:	0800e568 	.word	0x0800e568
 800886c:	20000be4 	.word	0x20000be4
 8008870:	20000c58 	.word	0x20000c58
 8008874:	20000bf0 	.word	0x20000bf0
 8008878:	20000c14 	.word	0x20000c14
 800887c:	0800e57c 	.word	0x0800e57c
 8008880:	0800e590 	.word	0x0800e590
 8008884:	20000e94 	.word	0x20000e94
 8008888:	20000bc4 	.word	0x20000bc4
 800888c:	20000be0 	.word	0x20000be0

08008890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b090      	sub	sp, #64	; 0x40
 8008894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008896:	f107 0318 	add.w	r3, r7, #24
 800889a:	2228      	movs	r2, #40	; 0x28
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f004 fb36 	bl	800cf10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	605a      	str	r2, [r3, #4]
 80088ac:	609a      	str	r2, [r3, #8]
 80088ae:	60da      	str	r2, [r3, #12]
 80088b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80088b2:	2301      	movs	r3, #1
 80088b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80088bc:	2300      	movs	r3, #0
 80088be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80088c0:	2301      	movs	r3, #1
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088c4:	2302      	movs	r3, #2
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80088ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088d4:	f107 0318 	add.w	r3, r7, #24
 80088d8:	4618      	mov	r0, r3
 80088da:	f002 fc3f 	bl	800b15c <HAL_RCC_OscConfig>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80088e4:	f000 f9a2 	bl	8008c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088e8:	230f      	movs	r3, #15
 80088ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088ec:	2302      	movs	r3, #2
 80088ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	2102      	movs	r1, #2
 8008902:	4618      	mov	r0, r3
 8008904:	f002 feac 	bl	800b660 <HAL_RCC_ClockConfig>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800890e:	f000 f98d 	bl	8008c2c <Error_Handler>
  }
}
 8008912:	bf00      	nop
 8008914:	3740      	adds	r7, #64	; 0x40
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008920:	4b16      	ldr	r3, [pc, #88]	; (800897c <MX_CAN_Init+0x60>)
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <MX_CAN_Init+0x64>)
 8008924:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008926:	4b15      	ldr	r3, [pc, #84]	; (800897c <MX_CAN_Init+0x60>)
 8008928:	2210      	movs	r2, #16
 800892a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800892c:	4b13      	ldr	r3, [pc, #76]	; (800897c <MX_CAN_Init+0x60>)
 800892e:	2200      	movs	r2, #0
 8008930:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008932:	4b12      	ldr	r3, [pc, #72]	; (800897c <MX_CAN_Init+0x60>)
 8008934:	2200      	movs	r2, #0
 8008936:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <MX_CAN_Init+0x60>)
 800893a:	2200      	movs	r2, #0
 800893c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800893e:	4b0f      	ldr	r3, [pc, #60]	; (800897c <MX_CAN_Init+0x60>)
 8008940:	2200      	movs	r2, #0
 8008942:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008944:	4b0d      	ldr	r3, [pc, #52]	; (800897c <MX_CAN_Init+0x60>)
 8008946:	2200      	movs	r2, #0
 8008948:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800894a:	4b0c      	ldr	r3, [pc, #48]	; (800897c <MX_CAN_Init+0x60>)
 800894c:	2200      	movs	r2, #0
 800894e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <MX_CAN_Init+0x60>)
 8008952:	2200      	movs	r2, #0
 8008954:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <MX_CAN_Init+0x60>)
 8008958:	2200      	movs	r2, #0
 800895a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800895c:	4b07      	ldr	r3, [pc, #28]	; (800897c <MX_CAN_Init+0x60>)
 800895e:	2200      	movs	r2, #0
 8008960:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <MX_CAN_Init+0x60>)
 8008964:	2200      	movs	r2, #0
 8008966:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008968:	4804      	ldr	r0, [pc, #16]	; (800897c <MX_CAN_Init+0x60>)
 800896a:	f000 fbe1 	bl	8009130 <HAL_CAN_Init>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008974:	f000 f95a 	bl	8008c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008978:	bf00      	nop
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000dd0 	.word	0x20000dd0
 8008980:	40006400 	.word	0x40006400

08008984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008988:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <MX_I2C1_Init+0x50>)
 800898a:	4a13      	ldr	r2, [pc, #76]	; (80089d8 <MX_I2C1_Init+0x54>)
 800898c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800898e:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <MX_I2C1_Init+0x50>)
 8008990:	4a12      	ldr	r2, [pc, #72]	; (80089dc <MX_I2C1_Init+0x58>)
 8008992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <MX_I2C1_Init+0x50>)
 8008996:	2200      	movs	r2, #0
 8008998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <MX_I2C1_Init+0x50>)
 800899c:	2200      	movs	r2, #0
 800899e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80089a0:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <MX_I2C1_Init+0x50>)
 80089a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80089a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <MX_I2C1_Init+0x50>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <MX_I2C1_Init+0x50>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80089b4:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <MX_I2C1_Init+0x50>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80089ba:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <MX_I2C1_Init+0x50>)
 80089bc:	2200      	movs	r2, #0
 80089be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80089c0:	4804      	ldr	r0, [pc, #16]	; (80089d4 <MX_I2C1_Init+0x50>)
 80089c2:	f001 f9a9 	bl	8009d18 <HAL_I2C_Init>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80089cc:	f000 f92e 	bl	8008c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80089d0:	bf00      	nop
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000df8 	.word	0x20000df8
 80089d8:	40005400 	.word	0x40005400
 80089dc:	00061a80 	.word	0x00061a80

080089e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089e6:	f107 0308 	add.w	r3, r7, #8
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	605a      	str	r2, [r3, #4]
 80089f0:	609a      	str	r2, [r3, #8]
 80089f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089f4:	463b      	mov	r3, r7
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80089fc:	4b1f      	ldr	r3, [pc, #124]	; (8008a7c <MX_TIM1_Init+0x9c>)
 80089fe:	4a20      	ldr	r2, [pc, #128]	; (8008a80 <MX_TIM1_Init+0xa0>)
 8008a00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008a02:	4b1e      	ldr	r3, [pc, #120]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a04:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008a08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a0a:	4b1c      	ldr	r3, [pc, #112]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a12:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008a16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a18:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008a1e:	4b17      	ldr	r3, [pc, #92]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a24:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008a2a:	4814      	ldr	r0, [pc, #80]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a2c:	f002 ffa6 	bl	800b97c <HAL_TIM_Base_Init>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008a36:	f000 f8f9 	bl	8008c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a40:	f107 0308 	add.w	r3, r7, #8
 8008a44:	4619      	mov	r1, r3
 8008a46:	480d      	ldr	r0, [pc, #52]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a48:	f003 f950 	bl	800bcec <HAL_TIM_ConfigClockSource>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008a52:	f000 f8eb 	bl	8008c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a56:	2300      	movs	r3, #0
 8008a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a5e:	463b      	mov	r3, r7
 8008a60:	4619      	mov	r1, r3
 8008a62:	4806      	ldr	r0, [pc, #24]	; (8008a7c <MX_TIM1_Init+0x9c>)
 8008a64:	f003 fb3e 	bl	800c0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a6e:	f000 f8dd 	bl	8008c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a72:	bf00      	nop
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000e4c 	.word	0x20000e4c
 8008a80:	40012c00 	.word	0x40012c00

08008a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a88:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008a8a:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <MX_USART1_UART_Init+0x50>)
 8008a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a8e:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a96:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008aa8:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008aaa:	220c      	movs	r2, #12
 8008aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008aae:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008aba:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <MX_USART1_UART_Init+0x4c>)
 8008abc:	f003 fb90 	bl	800c1e0 <HAL_UART_Init>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008ac6:	f000 f8b1 	bl	8008c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008aca:	bf00      	nop
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000e94 	.word	0x20000e94
 8008ad4:	40013800 	.word	0x40013800

08008ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ade:	f107 0310 	add.w	r3, r7, #16
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	605a      	str	r2, [r3, #4]
 8008ae8:	609a      	str	r2, [r3, #8]
 8008aea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aec:	4b4b      	ldr	r3, [pc, #300]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	4a4a      	ldr	r2, [pc, #296]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008af2:	f043 0310 	orr.w	r3, r3, #16
 8008af6:	6193      	str	r3, [r2, #24]
 8008af8:	4b48      	ldr	r3, [pc, #288]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b04:	4b45      	ldr	r3, [pc, #276]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4a44      	ldr	r2, [pc, #272]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b0a:	f043 0320 	orr.w	r3, r3, #32
 8008b0e:	6193      	str	r3, [r2, #24]
 8008b10:	4b42      	ldr	r3, [pc, #264]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b1c:	4b3f      	ldr	r3, [pc, #252]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	4a3e      	ldr	r2, [pc, #248]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b22:	f043 0304 	orr.w	r3, r3, #4
 8008b26:	6193      	str	r3, [r2, #24]
 8008b28:	4b3c      	ldr	r3, [pc, #240]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b34:	4b39      	ldr	r3, [pc, #228]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	4a38      	ldr	r2, [pc, #224]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b3a:	f043 0308 	orr.w	r3, r3, #8
 8008b3e:	6193      	str	r3, [r2, #24]
 8008b40:	4b36      	ldr	r3, [pc, #216]	; (8008c1c <MX_GPIO_Init+0x144>)
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	21f0      	movs	r1, #240	; 0xf0
 8008b50:	4833      	ldr	r0, [pc, #204]	; (8008c20 <MX_GPIO_Init+0x148>)
 8008b52:	f001 f8b0 	bl	8009cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008b56:	2200      	movs	r2, #0
 8008b58:	f241 0130 	movw	r1, #4144	; 0x1030
 8008b5c:	4831      	ldr	r0, [pc, #196]	; (8008c24 <MX_GPIO_Init+0x14c>)
 8008b5e:	f001 f8aa 	bl	8009cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b62:	2200      	movs	r2, #0
 8008b64:	f640 4107 	movw	r1, #3079	; 0xc07
 8008b68:	482f      	ldr	r0, [pc, #188]	; (8008c28 <MX_GPIO_Init+0x150>)
 8008b6a:	f001 f8a4 	bl	8009cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b6e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b72:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b7c:	f107 0310 	add.w	r3, r7, #16
 8008b80:	4619      	mov	r1, r3
 8008b82:	4828      	ldr	r0, [pc, #160]	; (8008c24 <MX_GPIO_Init+0x14c>)
 8008b84:	f000 fe20 	bl	80097c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b88:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b8c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b96:	f107 0310 	add.w	r3, r7, #16
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4820      	ldr	r0, [pc, #128]	; (8008c20 <MX_GPIO_Init+0x148>)
 8008b9e:	f000 fe13 	bl	80097c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008ba2:	23f0      	movs	r3, #240	; 0xf0
 8008ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb2:	f107 0310 	add.w	r3, r7, #16
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4819      	ldr	r0, [pc, #100]	; (8008c20 <MX_GPIO_Init+0x148>)
 8008bba:	f000 fe05 	bl	80097c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008bbe:	f241 0330 	movw	r3, #4144	; 0x1030
 8008bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4813      	ldr	r0, [pc, #76]	; (8008c24 <MX_GPIO_Init+0x14c>)
 8008bd8:	f000 fdf6 	bl	80097c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008bdc:	f640 4307 	movw	r3, #3079	; 0xc07
 8008be0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bea:	2302      	movs	r3, #2
 8008bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bee:	f107 0310 	add.w	r3, r7, #16
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	480c      	ldr	r0, [pc, #48]	; (8008c28 <MX_GPIO_Init+0x150>)
 8008bf6:	f000 fde7 	bl	80097c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008bfa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c08:	f107 0310 	add.w	r3, r7, #16
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4806      	ldr	r0, [pc, #24]	; (8008c28 <MX_GPIO_Init+0x150>)
 8008c10:	f000 fdda 	bl	80097c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008c14:	bf00      	nop
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	40010800 	.word	0x40010800
 8008c24:	40011000 	.word	0x40011000
 8008c28:	40010c00 	.word	0x40010c00

08008c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008c30:	bf00      	nop
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c3e:	4b15      	ldr	r3, [pc, #84]	; (8008c94 <HAL_MspInit+0x5c>)
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	4a14      	ldr	r2, [pc, #80]	; (8008c94 <HAL_MspInit+0x5c>)
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	6193      	str	r3, [r2, #24]
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <HAL_MspInit+0x5c>)
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	60bb      	str	r3, [r7, #8]
 8008c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c56:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <HAL_MspInit+0x5c>)
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	4a0e      	ldr	r2, [pc, #56]	; (8008c94 <HAL_MspInit+0x5c>)
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	61d3      	str	r3, [r2, #28]
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <HAL_MspInit+0x5c>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	607b      	str	r3, [r7, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <HAL_MspInit+0x60>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	4a04      	ldr	r2, [pc, #16]	; (8008c98 <HAL_MspInit+0x60>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bc80      	pop	{r7}
 8008c92:	4770      	bx	lr
 8008c94:	40021000 	.word	0x40021000
 8008c98:	40010000 	.word	0x40010000

08008c9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca4:	f107 0310 	add.w	r3, r7, #16
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	605a      	str	r2, [r3, #4]
 8008cae:	609a      	str	r2, [r3, #8]
 8008cb0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_CAN_MspInit+0x8c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d131      	bne.n	8008d20 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008cbc:	4b1b      	ldr	r3, [pc, #108]	; (8008d2c <HAL_CAN_MspInit+0x90>)
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4a1a      	ldr	r2, [pc, #104]	; (8008d2c <HAL_CAN_MspInit+0x90>)
 8008cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cc6:	61d3      	str	r3, [r2, #28]
 8008cc8:	4b18      	ldr	r3, [pc, #96]	; (8008d2c <HAL_CAN_MspInit+0x90>)
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd4:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <HAL_CAN_MspInit+0x90>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	4a14      	ldr	r2, [pc, #80]	; (8008d2c <HAL_CAN_MspInit+0x90>)
 8008cda:	f043 0304 	orr.w	r3, r3, #4
 8008cde:	6193      	str	r3, [r2, #24]
 8008ce0:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <HAL_CAN_MspInit+0x90>)
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	60bb      	str	r3, [r7, #8]
 8008cea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cfa:	f107 0310 	add.w	r3, r7, #16
 8008cfe:	4619      	mov	r1, r3
 8008d00:	480b      	ldr	r0, [pc, #44]	; (8008d30 <HAL_CAN_MspInit+0x94>)
 8008d02:	f000 fd61 	bl	80097c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d10:	2303      	movs	r3, #3
 8008d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d14:	f107 0310 	add.w	r3, r7, #16
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4805      	ldr	r0, [pc, #20]	; (8008d30 <HAL_CAN_MspInit+0x94>)
 8008d1c:	f000 fd54 	bl	80097c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008d20:	bf00      	nop
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40006400 	.word	0x40006400
 8008d2c:	40021000 	.word	0x40021000
 8008d30:	40010800 	.word	0x40010800

08008d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d3c:	f107 0310 	add.w	r3, r7, #16
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	609a      	str	r2, [r3, #8]
 8008d48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a15      	ldr	r2, [pc, #84]	; (8008da4 <HAL_I2C_MspInit+0x70>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d123      	bne.n	8008d9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d54:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <HAL_I2C_MspInit+0x74>)
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	4a13      	ldr	r2, [pc, #76]	; (8008da8 <HAL_I2C_MspInit+0x74>)
 8008d5a:	f043 0308 	orr.w	r3, r3, #8
 8008d5e:	6193      	str	r3, [r2, #24]
 8008d60:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <HAL_I2C_MspInit+0x74>)
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d6c:	23c0      	movs	r3, #192	; 0xc0
 8008d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d70:	2312      	movs	r3, #18
 8008d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d74:	2303      	movs	r3, #3
 8008d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d78:	f107 0310 	add.w	r3, r7, #16
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	480b      	ldr	r0, [pc, #44]	; (8008dac <HAL_I2C_MspInit+0x78>)
 8008d80:	f000 fd22 	bl	80097c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <HAL_I2C_MspInit+0x74>)
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	4a07      	ldr	r2, [pc, #28]	; (8008da8 <HAL_I2C_MspInit+0x74>)
 8008d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d8e:	61d3      	str	r3, [r2, #28]
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <HAL_I2C_MspInit+0x74>)
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d98:	60bb      	str	r3, [r7, #8]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d9c:	bf00      	nop
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	40005400 	.word	0x40005400
 8008da8:	40021000 	.word	0x40021000
 8008dac:	40010c00 	.word	0x40010c00

08008db0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a0a      	ldr	r2, [pc, #40]	; (8008de8 <HAL_I2C_MspDeInit+0x38>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d10d      	bne.n	8008dde <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <HAL_I2C_MspDeInit+0x3c>)
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <HAL_I2C_MspDeInit+0x3c>)
 8008dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dcc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008dce:	2140      	movs	r1, #64	; 0x40
 8008dd0:	4807      	ldr	r0, [pc, #28]	; (8008df0 <HAL_I2C_MspDeInit+0x40>)
 8008dd2:	f000 fe8d 	bl	8009af0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008dd6:	2180      	movs	r1, #128	; 0x80
 8008dd8:	4805      	ldr	r0, [pc, #20]	; (8008df0 <HAL_I2C_MspDeInit+0x40>)
 8008dda:	f000 fe89 	bl	8009af0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	40005400 	.word	0x40005400
 8008dec:	40021000 	.word	0x40021000
 8008df0:	40010c00 	.word	0x40010c00

08008df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0d      	ldr	r2, [pc, #52]	; (8008e38 <HAL_TIM_Base_MspInit+0x44>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d113      	bne.n	8008e2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e06:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <HAL_TIM_Base_MspInit+0x48>)
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	4a0c      	ldr	r2, [pc, #48]	; (8008e3c <HAL_TIM_Base_MspInit+0x48>)
 8008e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e10:	6193      	str	r3, [r2, #24]
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <HAL_TIM_Base_MspInit+0x48>)
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	2019      	movs	r0, #25
 8008e24:	f000 fb57 	bl	80094d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008e28:	2019      	movs	r0, #25
 8008e2a:	f000 fb70 	bl	800950e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40012c00 	.word	0x40012c00
 8008e3c:	40021000 	.word	0x40021000

08008e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e48:	f107 0310 	add.w	r3, r7, #16
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	605a      	str	r2, [r3, #4]
 8008e52:	609a      	str	r2, [r3, #8]
 8008e54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a20      	ldr	r2, [pc, #128]	; (8008edc <HAL_UART_MspInit+0x9c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d139      	bne.n	8008ed4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e60:	4b1f      	ldr	r3, [pc, #124]	; (8008ee0 <HAL_UART_MspInit+0xa0>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <HAL_UART_MspInit+0xa0>)
 8008e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e6a:	6193      	str	r3, [r2, #24]
 8008e6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <HAL_UART_MspInit+0xa0>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <HAL_UART_MspInit+0xa0>)
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	4a18      	ldr	r2, [pc, #96]	; (8008ee0 <HAL_UART_MspInit+0xa0>)
 8008e7e:	f043 0304 	orr.w	r3, r3, #4
 8008e82:	6193      	str	r3, [r2, #24]
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <HAL_UART_MspInit+0xa0>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	60bb      	str	r3, [r7, #8]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e96:	2302      	movs	r3, #2
 8008e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e9e:	f107 0310 	add.w	r3, r7, #16
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	480f      	ldr	r0, [pc, #60]	; (8008ee4 <HAL_UART_MspInit+0xa4>)
 8008ea6:	f000 fc8f 	bl	80097c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4809      	ldr	r0, [pc, #36]	; (8008ee4 <HAL_UART_MspInit+0xa4>)
 8008ec0:	f000 fc82 	bl	80097c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	2025      	movs	r0, #37	; 0x25
 8008eca:	f000 fb04 	bl	80094d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008ece:	2025      	movs	r0, #37	; 0x25
 8008ed0:	f000 fb1d 	bl	800950e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008ed4:	bf00      	nop
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40013800 	.word	0x40013800
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	40010800 	.word	0x40010800

08008ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008eec:	e7fe      	b.n	8008eec <NMI_Handler+0x4>

08008eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ef2:	e7fe      	b.n	8008ef2 <HardFault_Handler+0x4>

08008ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ef8:	e7fe      	b.n	8008ef8 <MemManage_Handler+0x4>

08008efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008efa:	b480      	push	{r7}
 8008efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008efe:	e7fe      	b.n	8008efe <BusFault_Handler+0x4>

08008f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f04:	e7fe      	b.n	8008f04 <UsageFault_Handler+0x4>

08008f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f06:	b480      	push	{r7}
 8008f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f0a:	bf00      	nop
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bc80      	pop	{r7}
 8008f10:	4770      	bx	lr

08008f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f12:	b480      	push	{r7}
 8008f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f16:	bf00      	nop
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bc80      	pop	{r7}
 8008f1c:	4770      	bx	lr

08008f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f22:	bf00      	nop
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bc80      	pop	{r7}
 8008f28:	4770      	bx	lr

08008f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f2e:	f000 f8bf 	bl	80090b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f3c:	4802      	ldr	r0, [pc, #8]	; (8008f48 <TIM1_UP_IRQHandler+0x10>)
 8008f3e:	f002 fdcd 	bl	800badc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008f42:	bf00      	nop
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000e4c 	.word	0x20000e4c

08008f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f50:	4802      	ldr	r0, [pc, #8]	; (8008f5c <USART1_IRQHandler+0x10>)
 8008f52:	f003 f9cb 	bl	800c2ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008f56:	bf00      	nop
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000e94 	.word	0x20000e94

08008f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f68:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <_sbrk+0x5c>)
 8008f6a:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <_sbrk+0x60>)
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f74:	4b13      	ldr	r3, [pc, #76]	; (8008fc4 <_sbrk+0x64>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f7c:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <_sbrk+0x64>)
 8008f7e:	4a12      	ldr	r2, [pc, #72]	; (8008fc8 <_sbrk+0x68>)
 8008f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <_sbrk+0x64>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d207      	bcs.n	8008fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f90:	f003 ffe6 	bl	800cf60 <__errno>
 8008f94:	4603      	mov	r3, r0
 8008f96:	220c      	movs	r2, #12
 8008f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9e:	e009      	b.n	8008fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <_sbrk+0x64>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <_sbrk+0x64>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4413      	add	r3, r2
 8008fae:	4a05      	ldr	r2, [pc, #20]	; (8008fc4 <_sbrk+0x64>)
 8008fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	2000c000 	.word	0x2000c000
 8008fc0:	00000400 	.word	0x00000400
 8008fc4:	20000edc 	.word	0x20000edc
 8008fc8:	20001030 	.word	0x20001030

08008fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fd0:	bf00      	nop
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fd8:	480c      	ldr	r0, [pc, #48]	; (800900c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fda:	490d      	ldr	r1, [pc, #52]	; (8009010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fdc:	4a0d      	ldr	r2, [pc, #52]	; (8009014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fe0:	e002      	b.n	8008fe8 <LoopCopyDataInit>

08008fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fe6:	3304      	adds	r3, #4

08008fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fec:	d3f9      	bcc.n	8008fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fee:	4a0a      	ldr	r2, [pc, #40]	; (8009018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008ff0:	4c0a      	ldr	r4, [pc, #40]	; (800901c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ff4:	e001      	b.n	8008ffa <LoopFillZerobss>

08008ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ff8:	3204      	adds	r2, #4

08008ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ffc:	d3fb      	bcc.n	8008ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008ffe:	f7ff ffe5 	bl	8008fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009002:	f003 ffb3 	bl	800cf6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009006:	f7ff fb55 	bl	80086b4 <main>
  bx lr
 800900a:	4770      	bx	lr
  ldr r0, =_sdata
 800900c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009010:	20000a10 	.word	0x20000a10
  ldr r2, =_sidata
 8009014:	0800e630 	.word	0x0800e630
  ldr r2, =_sbss
 8009018:	20000a10 	.word	0x20000a10
  ldr r4, =_ebss
 800901c:	2000102c 	.word	0x2000102c

08009020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009020:	e7fe      	b.n	8009020 <ADC1_2_IRQHandler>
	...

08009024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009028:	4b08      	ldr	r3, [pc, #32]	; (800904c <HAL_Init+0x28>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a07      	ldr	r2, [pc, #28]	; (800904c <HAL_Init+0x28>)
 800902e:	f043 0310 	orr.w	r3, r3, #16
 8009032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009034:	2003      	movs	r0, #3
 8009036:	f000 fa43 	bl	80094c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800903a:	200f      	movs	r0, #15
 800903c:	f000 f808 	bl	8009050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009040:	f7ff fdfa 	bl	8008c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40022000 	.word	0x40022000

08009050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009058:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <HAL_InitTick+0x54>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <HAL_InitTick+0x58>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	4619      	mov	r1, r3
 8009062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009066:	fbb3 f3f1 	udiv	r3, r3, r1
 800906a:	fbb2 f3f3 	udiv	r3, r2, r3
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fa5b 	bl	800952a <HAL_SYSTICK_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e00e      	b.n	800909c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b0f      	cmp	r3, #15
 8009082:	d80a      	bhi.n	800909a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009084:	2200      	movs	r2, #0
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	f000 fa23 	bl	80094d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009090:	4a06      	ldr	r2, [pc, #24]	; (80090ac <HAL_InitTick+0x5c>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	e000      	b.n	800909c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
}
 800909c:	4618      	mov	r0, r3
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	200009b4 	.word	0x200009b4
 80090a8:	200009bc 	.word	0x200009bc
 80090ac:	200009b8 	.word	0x200009b8

080090b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_IncTick+0x1c>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <HAL_IncTick+0x20>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4413      	add	r3, r2
 80090c0:	4a03      	ldr	r2, [pc, #12]	; (80090d0 <HAL_IncTick+0x20>)
 80090c2:	6013      	str	r3, [r2, #0]
}
 80090c4:	bf00      	nop
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr
 80090cc:	200009bc 	.word	0x200009bc
 80090d0:	20000ee0 	.word	0x20000ee0

080090d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  return uwTick;
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <HAL_GetTick+0x10>)
 80090da:	681b      	ldr	r3, [r3, #0]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr
 80090e4:	20000ee0 	.word	0x20000ee0

080090e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090f0:	f7ff fff0 	bl	80090d4 <HAL_GetTick>
 80090f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d005      	beq.n	800910e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009102:	4b0a      	ldr	r3, [pc, #40]	; (800912c <HAL_Delay+0x44>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800910e:	bf00      	nop
 8009110:	f7ff ffe0 	bl	80090d4 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	429a      	cmp	r2, r3
 800911e:	d8f7      	bhi.n	8009110 <HAL_Delay+0x28>
  {
  }
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200009bc 	.word	0x200009bc

08009130 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e0ed      	b.n	800931e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff fda4 	bl	8008c9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009164:	f7ff ffb6 	bl	80090d4 <HAL_GetTick>
 8009168:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800916a:	e012      	b.n	8009192 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800916c:	f7ff ffb2 	bl	80090d4 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	2b0a      	cmp	r3, #10
 8009178:	d90b      	bls.n	8009192 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2205      	movs	r2, #5
 800918a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e0c5      	b.n	800931e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0e5      	beq.n	800916c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0202 	bic.w	r2, r2, #2
 80091ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091b0:	f7ff ff90 	bl	80090d4 <HAL_GetTick>
 80091b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091b6:	e012      	b.n	80091de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091b8:	f7ff ff8c 	bl	80090d4 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b0a      	cmp	r3, #10
 80091c4:	d90b      	bls.n	80091de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2205      	movs	r2, #5
 80091d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e09f      	b.n	800931e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e5      	bne.n	80091b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7e1b      	ldrb	r3, [r3, #24]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d108      	bne.n	8009206 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e007      	b.n	8009216 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7e5b      	ldrb	r3, [r3, #25]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d108      	bne.n	8009230 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e007      	b.n	8009240 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	7e9b      	ldrb	r3, [r3, #26]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d108      	bne.n	800925a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0220 	orr.w	r2, r2, #32
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e007      	b.n	800926a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0220 	bic.w	r2, r2, #32
 8009268:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7edb      	ldrb	r3, [r3, #27]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d108      	bne.n	8009284 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0210 	bic.w	r2, r2, #16
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	e007      	b.n	8009294 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0210 	orr.w	r2, r2, #16
 8009292:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7f1b      	ldrb	r3, [r3, #28]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d108      	bne.n	80092ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0208 	orr.w	r2, r2, #8
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e007      	b.n	80092be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0208 	bic.w	r2, r2, #8
 80092bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	7f5b      	ldrb	r3, [r3, #29]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d108      	bne.n	80092d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0204 	orr.w	r2, r2, #4
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	e007      	b.n	80092e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0204 	bic.w	r2, r2, #4
 80092e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	431a      	orrs	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	ea42 0103 	orr.w	r1, r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	1e5a      	subs	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <__NVIC_SetPriorityGrouping>:
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <__NVIC_SetPriorityGrouping+0x44>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009344:	4013      	ands	r3, r2
 8009346:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800935a:	4a04      	ldr	r2, [pc, #16]	; (800936c <__NVIC_SetPriorityGrouping+0x44>)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	60d3      	str	r3, [r2, #12]
}
 8009360:	bf00      	nop
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	e000ed00 	.word	0xe000ed00

08009370 <__NVIC_GetPriorityGrouping>:
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009374:	4b04      	ldr	r3, [pc, #16]	; (8009388 <__NVIC_GetPriorityGrouping+0x18>)
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	0a1b      	lsrs	r3, r3, #8
 800937a:	f003 0307 	and.w	r3, r3, #7
}
 800937e:	4618      	mov	r0, r3
 8009380:	46bd      	mov	sp, r7
 8009382:	bc80      	pop	{r7}
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	e000ed00 	.word	0xe000ed00

0800938c <__NVIC_EnableIRQ>:
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800939a:	2b00      	cmp	r3, #0
 800939c:	db0b      	blt.n	80093b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	f003 021f 	and.w	r2, r3, #31
 80093a4:	4906      	ldr	r1, [pc, #24]	; (80093c0 <__NVIC_EnableIRQ+0x34>)
 80093a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093aa:	095b      	lsrs	r3, r3, #5
 80093ac:	2001      	movs	r0, #1
 80093ae:	fa00 f202 	lsl.w	r2, r0, r2
 80093b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bc80      	pop	{r7}
 80093be:	4770      	bx	lr
 80093c0:	e000e100 	.word	0xe000e100

080093c4 <__NVIC_SetPriority>:
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	6039      	str	r1, [r7, #0]
 80093ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	db0a      	blt.n	80093ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	490c      	ldr	r1, [pc, #48]	; (8009410 <__NVIC_SetPriority+0x4c>)
 80093de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e2:	0112      	lsls	r2, r2, #4
 80093e4:	b2d2      	uxtb	r2, r2
 80093e6:	440b      	add	r3, r1
 80093e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093ec:	e00a      	b.n	8009404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	4908      	ldr	r1, [pc, #32]	; (8009414 <__NVIC_SetPriority+0x50>)
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	3b04      	subs	r3, #4
 80093fc:	0112      	lsls	r2, r2, #4
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	440b      	add	r3, r1
 8009402:	761a      	strb	r2, [r3, #24]
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	e000e100 	.word	0xe000e100
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <NVIC_EncodePriority>:
{
 8009418:	b480      	push	{r7}
 800941a:	b089      	sub	sp, #36	; 0x24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f1c3 0307 	rsb	r3, r3, #7
 8009432:	2b04      	cmp	r3, #4
 8009434:	bf28      	it	cs
 8009436:	2304      	movcs	r3, #4
 8009438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	3304      	adds	r3, #4
 800943e:	2b06      	cmp	r3, #6
 8009440:	d902      	bls.n	8009448 <NVIC_EncodePriority+0x30>
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	3b03      	subs	r3, #3
 8009446:	e000      	b.n	800944a <NVIC_EncodePriority+0x32>
 8009448:	2300      	movs	r3, #0
 800944a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800944c:	f04f 32ff 	mov.w	r2, #4294967295
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	fa02 f303 	lsl.w	r3, r2, r3
 8009456:	43da      	mvns	r2, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	401a      	ands	r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009460:	f04f 31ff 	mov.w	r1, #4294967295
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	fa01 f303 	lsl.w	r3, r1, r3
 800946a:	43d9      	mvns	r1, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009470:	4313      	orrs	r3, r2
}
 8009472:	4618      	mov	r0, r3
 8009474:	3724      	adds	r7, #36	; 0x24
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr

0800947c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3b01      	subs	r3, #1
 8009488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800948c:	d301      	bcc.n	8009492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800948e:	2301      	movs	r3, #1
 8009490:	e00f      	b.n	80094b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009492:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <SysTick_Config+0x40>)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3b01      	subs	r3, #1
 8009498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800949a:	210f      	movs	r1, #15
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	f7ff ff90 	bl	80093c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80094a4:	4b05      	ldr	r3, [pc, #20]	; (80094bc <SysTick_Config+0x40>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094aa:	4b04      	ldr	r3, [pc, #16]	; (80094bc <SysTick_Config+0x40>)
 80094ac:	2207      	movs	r2, #7
 80094ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	e000e010 	.word	0xe000e010

080094c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff ff2d 	bl	8009328 <__NVIC_SetPriorityGrouping>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b086      	sub	sp, #24
 80094da:	af00      	add	r7, sp, #0
 80094dc:	4603      	mov	r3, r0
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094e8:	f7ff ff42 	bl	8009370 <__NVIC_GetPriorityGrouping>
 80094ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	6978      	ldr	r0, [r7, #20]
 80094f4:	f7ff ff90 	bl	8009418 <NVIC_EncodePriority>
 80094f8:	4602      	mov	r2, r0
 80094fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ff5f 	bl	80093c4 <__NVIC_SetPriority>
}
 8009506:	bf00      	nop
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	4603      	mov	r3, r0
 8009516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff ff35 	bl	800938c <__NVIC_EnableIRQ>
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff ffa2 	bl	800947c <SysTick_Config>
 8009538:	4603      	mov	r3, r0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d008      	beq.n	800956c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2204      	movs	r2, #4
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e020      	b.n	80095ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 020e 	bic.w	r2, r2, #14
 800957a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0201 	bic.w	r2, r2, #1
 800958a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009594:	2101      	movs	r1, #1
 8009596:	fa01 f202 	lsl.w	r2, r1, r2
 800959a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bc80      	pop	{r7}
 80095b6:	4770      	bx	lr

080095b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d005      	beq.n	80095dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2204      	movs	r2, #4
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	73fb      	strb	r3, [r7, #15]
 80095da:	e0d6      	b.n	800978a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 020e 	bic.w	r2, r2, #14
 80095ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0201 	bic.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	4b64      	ldr	r3, [pc, #400]	; (8009794 <HAL_DMA_Abort_IT+0x1dc>)
 8009604:	429a      	cmp	r2, r3
 8009606:	d958      	bls.n	80096ba <HAL_DMA_Abort_IT+0x102>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a62      	ldr	r2, [pc, #392]	; (8009798 <HAL_DMA_Abort_IT+0x1e0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d04f      	beq.n	80096b2 <HAL_DMA_Abort_IT+0xfa>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a61      	ldr	r2, [pc, #388]	; (800979c <HAL_DMA_Abort_IT+0x1e4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d048      	beq.n	80096ae <HAL_DMA_Abort_IT+0xf6>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a5f      	ldr	r2, [pc, #380]	; (80097a0 <HAL_DMA_Abort_IT+0x1e8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d040      	beq.n	80096a8 <HAL_DMA_Abort_IT+0xf0>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a5e      	ldr	r2, [pc, #376]	; (80097a4 <HAL_DMA_Abort_IT+0x1ec>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d038      	beq.n	80096a2 <HAL_DMA_Abort_IT+0xea>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a5c      	ldr	r2, [pc, #368]	; (80097a8 <HAL_DMA_Abort_IT+0x1f0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d030      	beq.n	800969c <HAL_DMA_Abort_IT+0xe4>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a5b      	ldr	r2, [pc, #364]	; (80097ac <HAL_DMA_Abort_IT+0x1f4>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d028      	beq.n	8009696 <HAL_DMA_Abort_IT+0xde>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a52      	ldr	r2, [pc, #328]	; (8009794 <HAL_DMA_Abort_IT+0x1dc>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d020      	beq.n	8009690 <HAL_DMA_Abort_IT+0xd8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a57      	ldr	r2, [pc, #348]	; (80097b0 <HAL_DMA_Abort_IT+0x1f8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d019      	beq.n	800968c <HAL_DMA_Abort_IT+0xd4>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a55      	ldr	r2, [pc, #340]	; (80097b4 <HAL_DMA_Abort_IT+0x1fc>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d012      	beq.n	8009688 <HAL_DMA_Abort_IT+0xd0>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a54      	ldr	r2, [pc, #336]	; (80097b8 <HAL_DMA_Abort_IT+0x200>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00a      	beq.n	8009682 <HAL_DMA_Abort_IT+0xca>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a52      	ldr	r2, [pc, #328]	; (80097bc <HAL_DMA_Abort_IT+0x204>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d102      	bne.n	800967c <HAL_DMA_Abort_IT+0xc4>
 8009676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800967a:	e01b      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 800967c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009680:	e018      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 8009682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009686:	e015      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 8009688:	2310      	movs	r3, #16
 800968a:	e013      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 800968c:	2301      	movs	r3, #1
 800968e:	e011      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 8009690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009694:	e00e      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 8009696:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800969a:	e00b      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 800969c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a0:	e008      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 80096a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096a6:	e005      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 80096a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ac:	e002      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 80096ae:	2310      	movs	r3, #16
 80096b0:	e000      	b.n	80096b4 <HAL_DMA_Abort_IT+0xfc>
 80096b2:	2301      	movs	r3, #1
 80096b4:	4a42      	ldr	r2, [pc, #264]	; (80097c0 <HAL_DMA_Abort_IT+0x208>)
 80096b6:	6053      	str	r3, [r2, #4]
 80096b8:	e057      	b.n	800976a <HAL_DMA_Abort_IT+0x1b2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a36      	ldr	r2, [pc, #216]	; (8009798 <HAL_DMA_Abort_IT+0x1e0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d04f      	beq.n	8009764 <HAL_DMA_Abort_IT+0x1ac>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a34      	ldr	r2, [pc, #208]	; (800979c <HAL_DMA_Abort_IT+0x1e4>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d048      	beq.n	8009760 <HAL_DMA_Abort_IT+0x1a8>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a33      	ldr	r2, [pc, #204]	; (80097a0 <HAL_DMA_Abort_IT+0x1e8>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d040      	beq.n	800975a <HAL_DMA_Abort_IT+0x1a2>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a31      	ldr	r2, [pc, #196]	; (80097a4 <HAL_DMA_Abort_IT+0x1ec>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d038      	beq.n	8009754 <HAL_DMA_Abort_IT+0x19c>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a30      	ldr	r2, [pc, #192]	; (80097a8 <HAL_DMA_Abort_IT+0x1f0>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d030      	beq.n	800974e <HAL_DMA_Abort_IT+0x196>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a2e      	ldr	r2, [pc, #184]	; (80097ac <HAL_DMA_Abort_IT+0x1f4>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d028      	beq.n	8009748 <HAL_DMA_Abort_IT+0x190>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a26      	ldr	r2, [pc, #152]	; (8009794 <HAL_DMA_Abort_IT+0x1dc>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d020      	beq.n	8009742 <HAL_DMA_Abort_IT+0x18a>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a2a      	ldr	r2, [pc, #168]	; (80097b0 <HAL_DMA_Abort_IT+0x1f8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d019      	beq.n	800973e <HAL_DMA_Abort_IT+0x186>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a29      	ldr	r2, [pc, #164]	; (80097b4 <HAL_DMA_Abort_IT+0x1fc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d012      	beq.n	800973a <HAL_DMA_Abort_IT+0x182>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a27      	ldr	r2, [pc, #156]	; (80097b8 <HAL_DMA_Abort_IT+0x200>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00a      	beq.n	8009734 <HAL_DMA_Abort_IT+0x17c>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a26      	ldr	r2, [pc, #152]	; (80097bc <HAL_DMA_Abort_IT+0x204>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d102      	bne.n	800972e <HAL_DMA_Abort_IT+0x176>
 8009728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800972c:	e01b      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 800972e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009732:	e018      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 8009734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009738:	e015      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 800973a:	2310      	movs	r3, #16
 800973c:	e013      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 800973e:	2301      	movs	r3, #1
 8009740:	e011      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 8009742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009746:	e00e      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 8009748:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800974c:	e00b      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 800974e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009752:	e008      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 8009754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009758:	e005      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 800975a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975e:	e002      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 8009760:	2310      	movs	r3, #16
 8009762:	e000      	b.n	8009766 <HAL_DMA_Abort_IT+0x1ae>
 8009764:	2301      	movs	r3, #1
 8009766:	4a17      	ldr	r2, [pc, #92]	; (80097c4 <HAL_DMA_Abort_IT+0x20c>)
 8009768:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
    } 
  }
  return status;
 800978a:	7bfb      	ldrb	r3, [r7, #15]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	40020080 	.word	0x40020080
 8009798:	40020008 	.word	0x40020008
 800979c:	4002001c 	.word	0x4002001c
 80097a0:	40020030 	.word	0x40020030
 80097a4:	40020044 	.word	0x40020044
 80097a8:	40020058 	.word	0x40020058
 80097ac:	4002006c 	.word	0x4002006c
 80097b0:	40020408 	.word	0x40020408
 80097b4:	4002041c 	.word	0x4002041c
 80097b8:	40020430 	.word	0x40020430
 80097bc:	40020444 	.word	0x40020444
 80097c0:	40020400 	.word	0x40020400
 80097c4:	40020000 	.word	0x40020000

080097c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b08b      	sub	sp, #44	; 0x2c
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80097d2:	2300      	movs	r3, #0
 80097d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80097d6:	2300      	movs	r3, #0
 80097d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097da:	e179      	b.n	8009ad0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80097dc:	2201      	movs	r2, #1
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	4013      	ands	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	f040 8168 	bne.w	8009aca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	4a96      	ldr	r2, [pc, #600]	; (8009a58 <HAL_GPIO_Init+0x290>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d05e      	beq.n	80098c2 <HAL_GPIO_Init+0xfa>
 8009804:	4a94      	ldr	r2, [pc, #592]	; (8009a58 <HAL_GPIO_Init+0x290>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d875      	bhi.n	80098f6 <HAL_GPIO_Init+0x12e>
 800980a:	4a94      	ldr	r2, [pc, #592]	; (8009a5c <HAL_GPIO_Init+0x294>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d058      	beq.n	80098c2 <HAL_GPIO_Init+0xfa>
 8009810:	4a92      	ldr	r2, [pc, #584]	; (8009a5c <HAL_GPIO_Init+0x294>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d86f      	bhi.n	80098f6 <HAL_GPIO_Init+0x12e>
 8009816:	4a92      	ldr	r2, [pc, #584]	; (8009a60 <HAL_GPIO_Init+0x298>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d052      	beq.n	80098c2 <HAL_GPIO_Init+0xfa>
 800981c:	4a90      	ldr	r2, [pc, #576]	; (8009a60 <HAL_GPIO_Init+0x298>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d869      	bhi.n	80098f6 <HAL_GPIO_Init+0x12e>
 8009822:	4a90      	ldr	r2, [pc, #576]	; (8009a64 <HAL_GPIO_Init+0x29c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d04c      	beq.n	80098c2 <HAL_GPIO_Init+0xfa>
 8009828:	4a8e      	ldr	r2, [pc, #568]	; (8009a64 <HAL_GPIO_Init+0x29c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d863      	bhi.n	80098f6 <HAL_GPIO_Init+0x12e>
 800982e:	4a8e      	ldr	r2, [pc, #568]	; (8009a68 <HAL_GPIO_Init+0x2a0>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d046      	beq.n	80098c2 <HAL_GPIO_Init+0xfa>
 8009834:	4a8c      	ldr	r2, [pc, #560]	; (8009a68 <HAL_GPIO_Init+0x2a0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d85d      	bhi.n	80098f6 <HAL_GPIO_Init+0x12e>
 800983a:	2b12      	cmp	r3, #18
 800983c:	d82a      	bhi.n	8009894 <HAL_GPIO_Init+0xcc>
 800983e:	2b12      	cmp	r3, #18
 8009840:	d859      	bhi.n	80098f6 <HAL_GPIO_Init+0x12e>
 8009842:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <HAL_GPIO_Init+0x80>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	080098c3 	.word	0x080098c3
 800984c:	0800989d 	.word	0x0800989d
 8009850:	080098af 	.word	0x080098af
 8009854:	080098f1 	.word	0x080098f1
 8009858:	080098f7 	.word	0x080098f7
 800985c:	080098f7 	.word	0x080098f7
 8009860:	080098f7 	.word	0x080098f7
 8009864:	080098f7 	.word	0x080098f7
 8009868:	080098f7 	.word	0x080098f7
 800986c:	080098f7 	.word	0x080098f7
 8009870:	080098f7 	.word	0x080098f7
 8009874:	080098f7 	.word	0x080098f7
 8009878:	080098f7 	.word	0x080098f7
 800987c:	080098f7 	.word	0x080098f7
 8009880:	080098f7 	.word	0x080098f7
 8009884:	080098f7 	.word	0x080098f7
 8009888:	080098f7 	.word	0x080098f7
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098b9 	.word	0x080098b9
 8009894:	4a75      	ldr	r2, [pc, #468]	; (8009a6c <HAL_GPIO_Init+0x2a4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d013      	beq.n	80098c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800989a:	e02c      	b.n	80098f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	623b      	str	r3, [r7, #32]
          break;
 80098a2:	e029      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	3304      	adds	r3, #4
 80098aa:	623b      	str	r3, [r7, #32]
          break;
 80098ac:	e024      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	3308      	adds	r3, #8
 80098b4:	623b      	str	r3, [r7, #32]
          break;
 80098b6:	e01f      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	330c      	adds	r3, #12
 80098be:	623b      	str	r3, [r7, #32]
          break;
 80098c0:	e01a      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80098ca:	2304      	movs	r3, #4
 80098cc:	623b      	str	r3, [r7, #32]
          break;
 80098ce:	e013      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d105      	bne.n	80098e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098d8:	2308      	movs	r3, #8
 80098da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	69fa      	ldr	r2, [r7, #28]
 80098e0:	611a      	str	r2, [r3, #16]
          break;
 80098e2:	e009      	b.n	80098f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098e4:	2308      	movs	r3, #8
 80098e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	615a      	str	r2, [r3, #20]
          break;
 80098ee:	e003      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80098f0:	2300      	movs	r3, #0
 80098f2:	623b      	str	r3, [r7, #32]
          break;
 80098f4:	e000      	b.n	80098f8 <HAL_GPIO_Init+0x130>
          break;
 80098f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2bff      	cmp	r3, #255	; 0xff
 80098fc:	d801      	bhi.n	8009902 <HAL_GPIO_Init+0x13a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	e001      	b.n	8009906 <HAL_GPIO_Init+0x13e>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3304      	adds	r3, #4
 8009906:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2bff      	cmp	r3, #255	; 0xff
 800990c:	d802      	bhi.n	8009914 <HAL_GPIO_Init+0x14c>
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	e002      	b.n	800991a <HAL_GPIO_Init+0x152>
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	3b08      	subs	r3, #8
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	210f      	movs	r1, #15
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	fa01 f303 	lsl.w	r3, r1, r3
 8009928:	43db      	mvns	r3, r3
 800992a:	401a      	ands	r2, r3
 800992c:	6a39      	ldr	r1, [r7, #32]
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	fa01 f303 	lsl.w	r3, r1, r3
 8009934:	431a      	orrs	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80c1 	beq.w	8009aca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009948:	4b49      	ldr	r3, [pc, #292]	; (8009a70 <HAL_GPIO_Init+0x2a8>)
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	4a48      	ldr	r2, [pc, #288]	; (8009a70 <HAL_GPIO_Init+0x2a8>)
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	6193      	str	r3, [r2, #24]
 8009954:	4b46      	ldr	r3, [pc, #280]	; (8009a70 <HAL_GPIO_Init+0x2a8>)
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	60bb      	str	r3, [r7, #8]
 800995e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009960:	4a44      	ldr	r2, [pc, #272]	; (8009a74 <HAL_GPIO_Init+0x2ac>)
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	089b      	lsrs	r3, r3, #2
 8009966:	3302      	adds	r3, #2
 8009968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800996c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	f003 0303 	and.w	r3, r3, #3
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	220f      	movs	r2, #15
 8009978:	fa02 f303 	lsl.w	r3, r2, r3
 800997c:	43db      	mvns	r3, r3
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	4013      	ands	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a3c      	ldr	r2, [pc, #240]	; (8009a78 <HAL_GPIO_Init+0x2b0>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d01f      	beq.n	80099cc <HAL_GPIO_Init+0x204>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a3b      	ldr	r2, [pc, #236]	; (8009a7c <HAL_GPIO_Init+0x2b4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d019      	beq.n	80099c8 <HAL_GPIO_Init+0x200>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a3a      	ldr	r2, [pc, #232]	; (8009a80 <HAL_GPIO_Init+0x2b8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <HAL_GPIO_Init+0x1fc>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a39      	ldr	r2, [pc, #228]	; (8009a84 <HAL_GPIO_Init+0x2bc>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00d      	beq.n	80099c0 <HAL_GPIO_Init+0x1f8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a38      	ldr	r2, [pc, #224]	; (8009a88 <HAL_GPIO_Init+0x2c0>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d007      	beq.n	80099bc <HAL_GPIO_Init+0x1f4>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a37      	ldr	r2, [pc, #220]	; (8009a8c <HAL_GPIO_Init+0x2c4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d101      	bne.n	80099b8 <HAL_GPIO_Init+0x1f0>
 80099b4:	2305      	movs	r3, #5
 80099b6:	e00a      	b.n	80099ce <HAL_GPIO_Init+0x206>
 80099b8:	2306      	movs	r3, #6
 80099ba:	e008      	b.n	80099ce <HAL_GPIO_Init+0x206>
 80099bc:	2304      	movs	r3, #4
 80099be:	e006      	b.n	80099ce <HAL_GPIO_Init+0x206>
 80099c0:	2303      	movs	r3, #3
 80099c2:	e004      	b.n	80099ce <HAL_GPIO_Init+0x206>
 80099c4:	2302      	movs	r3, #2
 80099c6:	e002      	b.n	80099ce <HAL_GPIO_Init+0x206>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e000      	b.n	80099ce <HAL_GPIO_Init+0x206>
 80099cc:	2300      	movs	r3, #0
 80099ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d0:	f002 0203 	and.w	r2, r2, #3
 80099d4:	0092      	lsls	r2, r2, #2
 80099d6:	4093      	lsls	r3, r2
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80099de:	4925      	ldr	r1, [pc, #148]	; (8009a74 <HAL_GPIO_Init+0x2ac>)
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	089b      	lsrs	r3, r3, #2
 80099e4:	3302      	adds	r3, #2
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d006      	beq.n	8009a06 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80099f8:	4b25      	ldr	r3, [pc, #148]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	4924      	ldr	r1, [pc, #144]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	608b      	str	r3, [r1, #8]
 8009a04:	e006      	b.n	8009a14 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009a06:	4b22      	ldr	r3, [pc, #136]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	4920      	ldr	r1, [pc, #128]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d006      	beq.n	8009a2e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009a20:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	491a      	ldr	r1, [pc, #104]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60cb      	str	r3, [r1, #12]
 8009a2c:	e006      	b.n	8009a3c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009a2e:	4b18      	ldr	r3, [pc, #96]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	43db      	mvns	r3, r3
 8009a36:	4916      	ldr	r1, [pc, #88]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d025      	beq.n	8009a94 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009a48:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	4910      	ldr	r1, [pc, #64]	; (8009a90 <HAL_GPIO_Init+0x2c8>)
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	604b      	str	r3, [r1, #4]
 8009a54:	e025      	b.n	8009aa2 <HAL_GPIO_Init+0x2da>
 8009a56:	bf00      	nop
 8009a58:	10320000 	.word	0x10320000
 8009a5c:	10310000 	.word	0x10310000
 8009a60:	10220000 	.word	0x10220000
 8009a64:	10210000 	.word	0x10210000
 8009a68:	10120000 	.word	0x10120000
 8009a6c:	10110000 	.word	0x10110000
 8009a70:	40021000 	.word	0x40021000
 8009a74:	40010000 	.word	0x40010000
 8009a78:	40010800 	.word	0x40010800
 8009a7c:	40010c00 	.word	0x40010c00
 8009a80:	40011000 	.word	0x40011000
 8009a84:	40011400 	.word	0x40011400
 8009a88:	40011800 	.word	0x40011800
 8009a8c:	40011c00 	.word	0x40011c00
 8009a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a94:	4b15      	ldr	r3, [pc, #84]	; (8009aec <HAL_GPIO_Init+0x324>)
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	43db      	mvns	r3, r3
 8009a9c:	4913      	ldr	r1, [pc, #76]	; (8009aec <HAL_GPIO_Init+0x324>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d006      	beq.n	8009abc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009aae:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <HAL_GPIO_Init+0x324>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	490e      	ldr	r1, [pc, #56]	; (8009aec <HAL_GPIO_Init+0x324>)
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	600b      	str	r3, [r1, #0]
 8009aba:	e006      	b.n	8009aca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009abc:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <HAL_GPIO_Init+0x324>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	43db      	mvns	r3, r3
 8009ac4:	4909      	ldr	r1, [pc, #36]	; (8009aec <HAL_GPIO_Init+0x324>)
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	3301      	adds	r3, #1
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f47f ae7e 	bne.w	80097dc <HAL_GPIO_Init+0x14>
  }
}
 8009ae0:	bf00      	nop
 8009ae2:	bf00      	nop
 8009ae4:	372c      	adds	r7, #44	; 0x2c
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bc80      	pop	{r7}
 8009aea:	4770      	bx	lr
 8009aec:	40010400 	.word	0x40010400

08009af0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b089      	sub	sp, #36	; 0x24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009afa:	2300      	movs	r3, #0
 8009afc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009afe:	e0a6      	b.n	8009c4e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009b00:	2201      	movs	r2, #1
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	fa02 f303 	lsl.w	r3, r2, r3
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 8099 	beq.w	8009c48 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009b16:	4a54      	ldr	r2, [pc, #336]	; (8009c68 <HAL_GPIO_DeInit+0x178>)
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	089b      	lsrs	r3, r3, #2
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b22:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	220f      	movs	r2, #15
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	4013      	ands	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a4c      	ldr	r2, [pc, #304]	; (8009c6c <HAL_GPIO_DeInit+0x17c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d01f      	beq.n	8009b80 <HAL_GPIO_DeInit+0x90>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a4b      	ldr	r2, [pc, #300]	; (8009c70 <HAL_GPIO_DeInit+0x180>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d019      	beq.n	8009b7c <HAL_GPIO_DeInit+0x8c>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a4a      	ldr	r2, [pc, #296]	; (8009c74 <HAL_GPIO_DeInit+0x184>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d013      	beq.n	8009b78 <HAL_GPIO_DeInit+0x88>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a49      	ldr	r2, [pc, #292]	; (8009c78 <HAL_GPIO_DeInit+0x188>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00d      	beq.n	8009b74 <HAL_GPIO_DeInit+0x84>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a48      	ldr	r2, [pc, #288]	; (8009c7c <HAL_GPIO_DeInit+0x18c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d007      	beq.n	8009b70 <HAL_GPIO_DeInit+0x80>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a47      	ldr	r2, [pc, #284]	; (8009c80 <HAL_GPIO_DeInit+0x190>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d101      	bne.n	8009b6c <HAL_GPIO_DeInit+0x7c>
 8009b68:	2305      	movs	r3, #5
 8009b6a:	e00a      	b.n	8009b82 <HAL_GPIO_DeInit+0x92>
 8009b6c:	2306      	movs	r3, #6
 8009b6e:	e008      	b.n	8009b82 <HAL_GPIO_DeInit+0x92>
 8009b70:	2304      	movs	r3, #4
 8009b72:	e006      	b.n	8009b82 <HAL_GPIO_DeInit+0x92>
 8009b74:	2303      	movs	r3, #3
 8009b76:	e004      	b.n	8009b82 <HAL_GPIO_DeInit+0x92>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e002      	b.n	8009b82 <HAL_GPIO_DeInit+0x92>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e000      	b.n	8009b82 <HAL_GPIO_DeInit+0x92>
 8009b80:	2300      	movs	r3, #0
 8009b82:	69fa      	ldr	r2, [r7, #28]
 8009b84:	f002 0203 	and.w	r2, r2, #3
 8009b88:	0092      	lsls	r2, r2, #2
 8009b8a:	4093      	lsls	r3, r2
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d132      	bne.n	8009bf8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b92:	4b3c      	ldr	r3, [pc, #240]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	493a      	ldr	r1, [pc, #232]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009ba0:	4b38      	ldr	r3, [pc, #224]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	43db      	mvns	r3, r3
 8009ba8:	4936      	ldr	r1, [pc, #216]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009baa:	4013      	ands	r3, r2
 8009bac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009bae:	4b35      	ldr	r3, [pc, #212]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	43db      	mvns	r3, r3
 8009bb6:	4933      	ldr	r1, [pc, #204]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009bbc:	4b31      	ldr	r3, [pc, #196]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	43db      	mvns	r3, r3
 8009bc4:	492f      	ldr	r1, [pc, #188]	; (8009c84 <HAL_GPIO_DeInit+0x194>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	220f      	movs	r2, #15
 8009bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009bda:	4a23      	ldr	r2, [pc, #140]	; (8009c68 <HAL_GPIO_DeInit+0x178>)
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	089b      	lsrs	r3, r3, #2
 8009be0:	3302      	adds	r3, #2
 8009be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	43da      	mvns	r2, r3
 8009bea:	481f      	ldr	r0, [pc, #124]	; (8009c68 <HAL_GPIO_DeInit+0x178>)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	089b      	lsrs	r3, r3, #2
 8009bf0:	400a      	ands	r2, r1
 8009bf2:	3302      	adds	r3, #2
 8009bf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	2bff      	cmp	r3, #255	; 0xff
 8009bfc:	d801      	bhi.n	8009c02 <HAL_GPIO_DeInit+0x112>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	e001      	b.n	8009c06 <HAL_GPIO_DeInit+0x116>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3304      	adds	r3, #4
 8009c06:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2bff      	cmp	r3, #255	; 0xff
 8009c0c:	d802      	bhi.n	8009c14 <HAL_GPIO_DeInit+0x124>
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	e002      	b.n	8009c1a <HAL_GPIO_DeInit+0x12a>
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	3b08      	subs	r3, #8
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	210f      	movs	r1, #15
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	fa01 f303 	lsl.w	r3, r1, r3
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	401a      	ands	r2, r3
 8009c2c:	2104      	movs	r1, #4
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	fa01 f303 	lsl.w	r3, r1, r3
 8009c34:	431a      	orrs	r2, r3
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	43db      	mvns	r3, r3
 8009c42:	401a      	ands	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	fa22 f303 	lsr.w	r3, r2, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f af52 	bne.w	8009b00 <HAL_GPIO_DeInit+0x10>
  }
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	3724      	adds	r7, #36	; 0x24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bc80      	pop	{r7}
 8009c66:	4770      	bx	lr
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40010800 	.word	0x40010800
 8009c70:	40010c00 	.word	0x40010c00
 8009c74:	40011000 	.word	0x40011000
 8009c78:	40011400 	.word	0x40011400
 8009c7c:	40011800 	.word	0x40011800
 8009c80:	40011c00 	.word	0x40011c00
 8009c84:	40010400 	.word	0x40010400

08009c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	887b      	ldrh	r3, [r7, #2]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
 8009ca4:	e001      	b.n	8009caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bc80      	pop	{r7}
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	807b      	strh	r3, [r7, #2]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cc6:	787b      	ldrb	r3, [r7, #1]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ccc:	887a      	ldrh	r2, [r7, #2]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009cd2:	e003      	b.n	8009cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009cd4:	887b      	ldrh	r3, [r7, #2]
 8009cd6:	041a      	lsls	r2, r3, #16
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	611a      	str	r2, [r3, #16]
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bc80      	pop	{r7}
 8009ce4:	4770      	bx	lr

08009ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009cf8:	887a      	ldrh	r2, [r7, #2]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	041a      	lsls	r2, r3, #16
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	43d9      	mvns	r1, r3
 8009d04:	887b      	ldrh	r3, [r7, #2]
 8009d06:	400b      	ands	r3, r1
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	611a      	str	r2, [r3, #16]
}
 8009d0e:	bf00      	nop
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bc80      	pop	{r7}
 8009d16:	4770      	bx	lr

08009d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e12b      	b.n	8009f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d106      	bne.n	8009d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fe fff8 	bl	8008d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2224      	movs	r2, #36	; 0x24
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0201 	bic.w	r2, r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d7c:	f001 fdb8 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 8009d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	4a81      	ldr	r2, [pc, #516]	; (8009f8c <HAL_I2C_Init+0x274>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d807      	bhi.n	8009d9c <HAL_I2C_Init+0x84>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a80      	ldr	r2, [pc, #512]	; (8009f90 <HAL_I2C_Init+0x278>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	bf94      	ite	ls
 8009d94:	2301      	movls	r3, #1
 8009d96:	2300      	movhi	r3, #0
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	e006      	b.n	8009daa <HAL_I2C_Init+0x92>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4a7d      	ldr	r2, [pc, #500]	; (8009f94 <HAL_I2C_Init+0x27c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	bf94      	ite	ls
 8009da4:	2301      	movls	r3, #1
 8009da6:	2300      	movhi	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e0e7      	b.n	8009f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4a78      	ldr	r2, [pc, #480]	; (8009f98 <HAL_I2C_Init+0x280>)
 8009db6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dba:	0c9b      	lsrs	r3, r3, #18
 8009dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4a6a      	ldr	r2, [pc, #424]	; (8009f8c <HAL_I2C_Init+0x274>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d802      	bhi.n	8009dec <HAL_I2C_Init+0xd4>
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	3301      	adds	r3, #1
 8009dea:	e009      	b.n	8009e00 <HAL_I2C_Init+0xe8>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009df2:	fb02 f303 	mul.w	r3, r2, r3
 8009df6:	4a69      	ldr	r2, [pc, #420]	; (8009f9c <HAL_I2C_Init+0x284>)
 8009df8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfc:	099b      	lsrs	r3, r3, #6
 8009dfe:	3301      	adds	r3, #1
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6812      	ldr	r2, [r2, #0]
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	495c      	ldr	r1, [pc, #368]	; (8009f8c <HAL_I2C_Init+0x274>)
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	d819      	bhi.n	8009e54 <HAL_I2C_Init+0x13c>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	1e59      	subs	r1, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e2e:	1c59      	adds	r1, r3, #1
 8009e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e34:	400b      	ands	r3, r1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <HAL_I2C_Init+0x138>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1e59      	subs	r1, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e48:	3301      	adds	r3, #1
 8009e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e4e:	e051      	b.n	8009ef4 <HAL_I2C_Init+0x1dc>
 8009e50:	2304      	movs	r3, #4
 8009e52:	e04f      	b.n	8009ef4 <HAL_I2C_Init+0x1dc>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d111      	bne.n	8009e80 <HAL_I2C_Init+0x168>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	1e58      	subs	r0, r3, #1
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6859      	ldr	r1, [r3, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	440b      	add	r3, r1
 8009e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e6e:	3301      	adds	r3, #1
 8009e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf0c      	ite	eq
 8009e78:	2301      	moveq	r3, #1
 8009e7a:	2300      	movne	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	e012      	b.n	8009ea6 <HAL_I2C_Init+0x18e>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	1e58      	subs	r0, r3, #1
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6859      	ldr	r1, [r3, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	0099      	lsls	r1, r3, #2
 8009e90:	440b      	add	r3, r1
 8009e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e96:	3301      	adds	r3, #1
 8009e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bf0c      	ite	eq
 8009ea0:	2301      	moveq	r3, #1
 8009ea2:	2300      	movne	r3, #0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <HAL_I2C_Init+0x196>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e022      	b.n	8009ef4 <HAL_I2C_Init+0x1dc>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10e      	bne.n	8009ed4 <HAL_I2C_Init+0x1bc>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	1e58      	subs	r0, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6859      	ldr	r1, [r3, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	440b      	add	r3, r1
 8009ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed2:	e00f      	b.n	8009ef4 <HAL_I2C_Init+0x1dc>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	1e58      	subs	r0, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6859      	ldr	r1, [r3, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	0099      	lsls	r1, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eea:	3301      	adds	r3, #1
 8009eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	6809      	ldr	r1, [r1, #0]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69da      	ldr	r2, [r3, #28]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6911      	ldr	r1, [r2, #16]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68d2      	ldr	r2, [r2, #12]
 8009f2e:	4311      	orrs	r1, r2
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6812      	ldr	r2, [r2, #0]
 8009f34:	430b      	orrs	r3, r1
 8009f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	695a      	ldr	r2, [r3, #20]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	000186a0 	.word	0x000186a0
 8009f90:	001e847f 	.word	0x001e847f
 8009f94:	003d08ff 	.word	0x003d08ff
 8009f98:	431bde83 	.word	0x431bde83
 8009f9c:	10624dd3 	.word	0x10624dd3

08009fa0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e021      	b.n	8009ff6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	; 0x24
 8009fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7fe fef0 	bl	8008db0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	461a      	mov	r2, r3
 800a00c:	460b      	mov	r3, r1
 800a00e:	817b      	strh	r3, [r7, #10]
 800a010:	4613      	mov	r3, r2
 800a012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a014:	f7ff f85e 	bl	80090d4 <HAL_GetTick>
 800a018:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b20      	cmp	r3, #32
 800a024:	f040 80e0 	bne.w	800a1e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	2319      	movs	r3, #25
 800a02e:	2201      	movs	r2, #1
 800a030:	4970      	ldr	r1, [pc, #448]	; (800a1f4 <HAL_I2C_Master_Transmit+0x1f4>)
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fe5c 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a03e:	2302      	movs	r3, #2
 800a040:	e0d3      	b.n	800a1ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d101      	bne.n	800a050 <HAL_I2C_Master_Transmit+0x50>
 800a04c:	2302      	movs	r3, #2
 800a04e:	e0cc      	b.n	800a1ea <HAL_I2C_Master_Transmit+0x1ea>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b01      	cmp	r3, #1
 800a064:	d007      	beq.n	800a076 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0201 	orr.w	r2, r2, #1
 800a074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2221      	movs	r2, #33	; 0x21
 800a08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2210      	movs	r2, #16
 800a092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	893a      	ldrh	r2, [r7, #8]
 800a0a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4a50      	ldr	r2, [pc, #320]	; (800a1f8 <HAL_I2C_Master_Transmit+0x1f8>)
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a0b8:	8979      	ldrh	r1, [r7, #10]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	6a3a      	ldr	r2, [r7, #32]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 fc16 	bl	800a8f0 <I2C_MasterRequestWrite>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e08d      	b.n	800a1ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	613b      	str	r3, [r7, #16]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0e4:	e066      	b.n	800a1b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	6a39      	ldr	r1, [r7, #32]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 ff1a 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00d      	beq.n	800a112 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d107      	bne.n	800a10e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a10c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e06b      	b.n	800a1ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	781a      	ldrb	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a13a:	3b01      	subs	r3, #1
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d11b      	bne.n	800a188 <HAL_I2C_Master_Transmit+0x188>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a154:	2b00      	cmp	r3, #0
 800a156:	d017      	beq.n	800a188 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b01      	subs	r3, #1
 800a176:	b29a      	uxth	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	6a39      	ldr	r1, [r7, #32]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 ff11 	bl	800afb4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00d      	beq.n	800a1b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	d107      	bne.n	800a1b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e01a      	b.n	800a1ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d194      	bne.n	800a0e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e000      	b.n	800a1ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1e8:	2302      	movs	r3, #2
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	00100002 	.word	0x00100002
 800a1f8:	ffff0000 	.word	0xffff0000

0800a1fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b088      	sub	sp, #32
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	4603      	mov	r3, r0
 800a20c:	817b      	strh	r3, [r7, #10]
 800a20e:	460b      	mov	r3, r1
 800a210:	813b      	strh	r3, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a216:	f7fe ff5d 	bl	80090d4 <HAL_GetTick>
 800a21a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b20      	cmp	r3, #32
 800a226:	f040 80d9 	bne.w	800a3dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	2319      	movs	r3, #25
 800a230:	2201      	movs	r2, #1
 800a232:	496d      	ldr	r1, [pc, #436]	; (800a3e8 <HAL_I2C_Mem_Write+0x1ec>)
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fd5b 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
 800a242:	e0cc      	b.n	800a3de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_I2C_Mem_Write+0x56>
 800a24e:	2302      	movs	r3, #2
 800a250:	e0c5      	b.n	800a3de <HAL_I2C_Mem_Write+0x1e2>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b01      	cmp	r3, #1
 800a266:	d007      	beq.n	800a278 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f042 0201 	orr.w	r2, r2, #1
 800a276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2221      	movs	r2, #33	; 0x21
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2240      	movs	r2, #64	; 0x40
 800a294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a3a      	ldr	r2, [r7, #32]
 800a2a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4a4d      	ldr	r2, [pc, #308]	; (800a3ec <HAL_I2C_Mem_Write+0x1f0>)
 800a2b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a2ba:	88f8      	ldrh	r0, [r7, #6]
 800a2bc:	893a      	ldrh	r2, [r7, #8]
 800a2be:	8979      	ldrh	r1, [r7, #10]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fb92 	bl	800a9f4 <I2C_RequestMemoryWrite>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d052      	beq.n	800a37c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e081      	b.n	800a3de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 fe20 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00d      	beq.n	800a306 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d107      	bne.n	800a302 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e06b      	b.n	800a3de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a320:	3b01      	subs	r3, #1
 800a322:	b29a      	uxth	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d11b      	bne.n	800a37c <HAL_I2C_Mem_Write+0x180>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a366:	3b01      	subs	r3, #1
 800a368:	b29a      	uxth	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a372:	b29b      	uxth	r3, r3
 800a374:	3b01      	subs	r3, #1
 800a376:	b29a      	uxth	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1aa      	bne.n	800a2da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fe13 	bl	800afb4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00d      	beq.n	800a3b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d107      	bne.n	800a3ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e016      	b.n	800a3de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e000      	b.n	800a3de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3dc:	2302      	movs	r3, #2
  }
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	00100002 	.word	0x00100002
 800a3ec:	ffff0000 	.word	0xffff0000

0800a3f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08c      	sub	sp, #48	; 0x30
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4603      	mov	r3, r0
 800a400:	817b      	strh	r3, [r7, #10]
 800a402:	460b      	mov	r3, r1
 800a404:	813b      	strh	r3, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a40e:	f7fe fe61 	bl	80090d4 <HAL_GetTick>
 800a412:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	f040 8244 	bne.w	800a8aa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	2319      	movs	r3, #25
 800a428:	2201      	movs	r2, #1
 800a42a:	4982      	ldr	r1, [pc, #520]	; (800a634 <HAL_I2C_Mem_Read+0x244>)
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 fc5f 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a438:	2302      	movs	r3, #2
 800a43a:	e237      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a442:	2b01      	cmp	r3, #1
 800a444:	d101      	bne.n	800a44a <HAL_I2C_Mem_Read+0x5a>
 800a446:	2302      	movs	r3, #2
 800a448:	e230      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d007      	beq.n	800a470 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0201 	orr.w	r2, r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a47e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2222      	movs	r2, #34	; 0x22
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2240      	movs	r2, #64	; 0x40
 800a48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a49a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a4a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4a62      	ldr	r2, [pc, #392]	; (800a638 <HAL_I2C_Mem_Read+0x248>)
 800a4b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4b2:	88f8      	ldrh	r0, [r7, #6]
 800a4b4:	893a      	ldrh	r2, [r7, #8]
 800a4b6:	8979      	ldrh	r1, [r7, #10]
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 fb2c 	bl	800ab20 <I2C_RequestMemoryRead>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e1ec      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d113      	bne.n	800a502 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61fb      	str	r3, [r7, #28]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	61fb      	str	r3, [r7, #28]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e1c0      	b.n	800a884 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a506:	2b01      	cmp	r3, #1
 800a508:	d11e      	bne.n	800a548 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a51a:	b672      	cpsid	i
}
 800a51c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a51e:	2300      	movs	r3, #0
 800a520:	61bb      	str	r3, [r7, #24]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a542:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a544:	b662      	cpsie	i
}
 800a546:	e035      	b.n	800a5b4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d11e      	bne.n	800a58e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a55e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a560:	b672      	cpsid	i
}
 800a562:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a564:	2300      	movs	r3, #0
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a58a:	b662      	cpsie	i
}
 800a58c:	e012      	b.n	800a5b4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a59c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a59e:	2300      	movs	r3, #0
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	613b      	str	r3, [r7, #16]
 800a5b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a5b4:	e166      	b.n	800a884 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	f200 811f 	bhi.w	800a7fe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d123      	bne.n	800a610 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fd39 	bl	800b044 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e167      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	691a      	ldr	r2, [r3, #16]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a604:	b29b      	uxth	r3, r3
 800a606:	3b01      	subs	r3, #1
 800a608:	b29a      	uxth	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a60e:	e139      	b.n	800a884 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a614:	2b02      	cmp	r3, #2
 800a616:	d152      	bne.n	800a6be <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	2200      	movs	r2, #0
 800a620:	4906      	ldr	r1, [pc, #24]	; (800a63c <HAL_I2C_Mem_Read+0x24c>)
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 fb64 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d008      	beq.n	800a640 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e13c      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
 800a632:	bf00      	nop
 800a634:	00100002 	.word	0x00100002
 800a638:	ffff0000 	.word	0xffff0000
 800a63c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a640:	b672      	cpsid	i
}
 800a642:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691a      	ldr	r2, [r3, #16]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a670:	3b01      	subs	r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a686:	b662      	cpsie	i
}
 800a688:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	b2d2      	uxtb	r2, r2
 800a696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6bc:	e0e2      	b.n	800a884 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	497b      	ldr	r1, [pc, #492]	; (800a8b4 <HAL_I2C_Mem_Read+0x4c4>)
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 fb11 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e0e9      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6e8:	b672      	cpsid	i
}
 800a6ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691a      	ldr	r2, [r3, #16]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a708:	3b01      	subs	r3, #1
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a71e:	4b66      	ldr	r3, [pc, #408]	; (800a8b8 <HAL_I2C_Mem_Read+0x4c8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	08db      	lsrs	r3, r3, #3
 800a724:	4a65      	ldr	r2, [pc, #404]	; (800a8bc <HAL_I2C_Mem_Read+0x4cc>)
 800a726:	fba2 2303 	umull	r2, r3, r2, r3
 800a72a:	0a1a      	lsrs	r2, r3, #8
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	00da      	lsls	r2, r3, #3
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d118      	bne.n	800a776 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75e:	f043 0220 	orr.w	r2, r3, #32
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a766:	b662      	cpsie	i
}
 800a768:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e09a      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b04      	cmp	r3, #4
 800a782:	d1d9      	bne.n	800a738 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691a      	ldr	r2, [r3, #16]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7c6:	b662      	cpsie	i
}
 800a7c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	691a      	ldr	r2, [r3, #16]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7fc:	e042      	b.n	800a884 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fc1e 	bl	800b044 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e04c      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	691a      	ldr	r2, [r3, #16]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	b2d2      	uxtb	r2, r2
 800a81e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d118      	bne.n	800a884 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	691a      	ldr	r2, [r3, #16]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	b2d2      	uxtb	r2, r2
 800a85e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a86e:	3b01      	subs	r3, #1
 800a870:	b29a      	uxth	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	3b01      	subs	r3, #1
 800a87e:	b29a      	uxth	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f47f ae94 	bne.w	800a5b6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2220      	movs	r2, #32
 800a892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e000      	b.n	800a8ac <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a8aa:	2302      	movs	r3, #2
  }
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3728      	adds	r7, #40	; 0x28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	00010004 	.word	0x00010004
 800a8b8:	200009b4 	.word	0x200009b4
 800a8bc:	14f8b589 	.word	0x14f8b589

0800a8c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ce:	b2db      	uxtb	r3, r3
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr

0800a8da <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr

0800a8f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	607a      	str	r2, [r7, #4]
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d006      	beq.n	800a91a <I2C_MasterRequestWrite+0x2a>
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d003      	beq.n	800a91a <I2C_MasterRequestWrite+0x2a>
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a918:	d108      	bne.n	800a92c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	e00b      	b.n	800a944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	2b12      	cmp	r3, #18
 800a932:	d107      	bne.n	800a944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 f9cd 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00d      	beq.n	800a978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96a:	d103      	bne.n	800a974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e035      	b.n	800a9e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a980:	d108      	bne.n	800a994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a982:	897b      	ldrh	r3, [r7, #10]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	461a      	mov	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a990:	611a      	str	r2, [r3, #16]
 800a992:	e01b      	b.n	800a9cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a994:	897b      	ldrh	r3, [r7, #10]
 800a996:	11db      	asrs	r3, r3, #7
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0306 	and.w	r3, r3, #6
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f063 030f 	orn	r3, r3, #15
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	490e      	ldr	r1, [pc, #56]	; (800a9ec <I2C_MasterRequestWrite+0xfc>)
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 fa16 	bl	800ade4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e010      	b.n	800a9e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9c2:	897b      	ldrh	r3, [r7, #10]
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	4907      	ldr	r1, [pc, #28]	; (800a9f0 <I2C_MasterRequestWrite+0x100>)
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fa06 	bl	800ade4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	00010008 	.word	0x00010008
 800a9f0:	00010002 	.word	0x00010002

0800a9f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af02      	add	r7, sp, #8
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	461a      	mov	r2, r3
 800aa02:	4603      	mov	r3, r0
 800aa04:	817b      	strh	r3, [r7, #10]
 800aa06:	460b      	mov	r3, r1
 800aa08:	813b      	strh	r3, [r7, #8]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f960 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00d      	beq.n	800aa52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa44:	d103      	bne.n	800aa4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e05f      	b.n	800ab12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa52:	897b      	ldrh	r3, [r7, #10]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	6a3a      	ldr	r2, [r7, #32]
 800aa66:	492d      	ldr	r1, [pc, #180]	; (800ab1c <I2C_RequestMemoryWrite+0x128>)
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f9bb 	bl	800ade4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e04c      	b.n	800ab12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	617b      	str	r3, [r7, #20]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa90:	6a39      	ldr	r1, [r7, #32]
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 fa46 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00d      	beq.n	800aaba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d107      	bne.n	800aab6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e02b      	b.n	800ab12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aaba:	88fb      	ldrh	r3, [r7, #6]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d105      	bne.n	800aacc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aac0:	893b      	ldrh	r3, [r7, #8]
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	611a      	str	r2, [r3, #16]
 800aaca:	e021      	b.n	800ab10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aacc:	893b      	ldrh	r3, [r7, #8]
 800aace:	0a1b      	lsrs	r3, r3, #8
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aadc:	6a39      	ldr	r1, [r7, #32]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 fa20 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00d      	beq.n	800ab06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	d107      	bne.n	800ab02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e005      	b.n	800ab12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab06:	893b      	ldrh	r3, [r7, #8]
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	00010002 	.word	0x00010002

0800ab20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	4608      	mov	r0, r1
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	817b      	strh	r3, [r7, #10]
 800ab32:	460b      	mov	r3, r1
 800ab34:	813b      	strh	r3, [r7, #8]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f8c2 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00d      	beq.n	800ab8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab80:	d103      	bne.n	800ab8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e0aa      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab8e:	897b      	ldrh	r3, [r7, #10]
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	461a      	mov	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	6a3a      	ldr	r2, [r7, #32]
 800aba2:	4952      	ldr	r1, [pc, #328]	; (800acec <I2C_RequestMemoryRead+0x1cc>)
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 f91d 	bl	800ade4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e097      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abcc:	6a39      	ldr	r1, [r7, #32]
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 f9a8 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00d      	beq.n	800abf6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d107      	bne.n	800abf2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e076      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abf6:	88fb      	ldrh	r3, [r7, #6]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d105      	bne.n	800ac08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abfc:	893b      	ldrh	r3, [r7, #8]
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	611a      	str	r2, [r3, #16]
 800ac06:	e021      	b.n	800ac4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ac08:	893b      	ldrh	r3, [r7, #8]
 800ac0a:	0a1b      	lsrs	r3, r3, #8
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac18:	6a39      	ldr	r1, [r7, #32]
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 f982 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00d      	beq.n	800ac42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d107      	bne.n	800ac3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e050      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac42:	893b      	ldrh	r3, [r7, #8]
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4e:	6a39      	ldr	r1, [r7, #32]
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f967 	bl	800af24 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00d      	beq.n	800ac78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d107      	bne.n	800ac74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e035      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 f82b 	bl	800acf0 <I2C_WaitOnFlagUntilTimeout>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00d      	beq.n	800acbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acae:	d103      	bne.n	800acb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acb8:	2303      	movs	r3, #3
 800acba:	e013      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800acbc:	897b      	ldrh	r3, [r7, #10]
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f043 0301 	orr.w	r3, r3, #1
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	6a3a      	ldr	r2, [r7, #32]
 800acd0:	4906      	ldr	r1, [pc, #24]	; (800acec <I2C_RequestMemoryRead+0x1cc>)
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f000 f886 	bl	800ade4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e000      	b.n	800ace4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	00010002 	.word	0x00010002

0800acf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad00:	e048      	b.n	800ad94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d044      	beq.n	800ad94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0a:	f7fe f9e3 	bl	80090d4 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d302      	bcc.n	800ad20 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d139      	bne.n	800ad94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d10d      	bne.n	800ad46 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	43da      	mvns	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	4013      	ands	r3, r2
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2301      	moveq	r3, #1
 800ad3e:	2300      	movne	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	461a      	mov	r2, r3
 800ad44:	e00c      	b.n	800ad60 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	43da      	mvns	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4013      	ands	r3, r2
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bf0c      	ite	eq
 800ad58:	2301      	moveq	r3, #1
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	461a      	mov	r2, r3
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d116      	bne.n	800ad94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad80:	f043 0220 	orr.w	r2, r3, #32
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e023      	b.n	800addc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d10d      	bne.n	800adba <I2C_WaitOnFlagUntilTimeout+0xca>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	43da      	mvns	r2, r3
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	4013      	ands	r3, r2
 800adaa:	b29b      	uxth	r3, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	bf0c      	ite	eq
 800adb0:	2301      	moveq	r3, #1
 800adb2:	2300      	movne	r3, #0
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	461a      	mov	r2, r3
 800adb8:	e00c      	b.n	800add4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	43da      	mvns	r2, r3
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4013      	ands	r3, r2
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bf0c      	ite	eq
 800adcc:	2301      	moveq	r3, #1
 800adce:	2300      	movne	r3, #0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	461a      	mov	r2, r3
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	429a      	cmp	r2, r3
 800add8:	d093      	beq.n	800ad02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800adf2:	e071      	b.n	800aed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae02:	d123      	bne.n	800ae4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	f043 0204 	orr.w	r2, r3, #4
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e067      	b.n	800af1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d041      	beq.n	800aed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae54:	f7fe f93e 	bl	80090d4 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d302      	bcc.n	800ae6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d136      	bne.n	800aed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d10c      	bne.n	800ae8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	43da      	mvns	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4013      	ands	r3, r2
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bf14      	ite	ne
 800ae86:	2301      	movne	r3, #1
 800ae88:	2300      	moveq	r3, #0
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	e00b      	b.n	800aea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	43da      	mvns	r2, r3
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	4013      	ands	r3, r2
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bf14      	ite	ne
 800aea0:	2301      	movne	r3, #1
 800aea2:	2300      	moveq	r3, #0
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d016      	beq.n	800aed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec4:	f043 0220 	orr.w	r2, r3, #32
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e021      	b.n	800af1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	0c1b      	lsrs	r3, r3, #16
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d10c      	bne.n	800aefc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	43da      	mvns	r2, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	4013      	ands	r3, r2
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	bf14      	ite	ne
 800aef4:	2301      	movne	r3, #1
 800aef6:	2300      	moveq	r3, #0
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	e00b      	b.n	800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	43da      	mvns	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	4013      	ands	r3, r2
 800af08:	b29b      	uxth	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bf14      	ite	ne
 800af0e:	2301      	movne	r3, #1
 800af10:	2300      	moveq	r3, #0
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f af6d 	bne.w	800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af30:	e034      	b.n	800af9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 f8e3 	bl	800b0fe <I2C_IsAcknowledgeFailed>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e034      	b.n	800afac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d028      	beq.n	800af9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af4a:	f7fe f8c3 	bl	80090d4 <HAL_GetTick>
 800af4e:	4602      	mov	r2, r0
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	429a      	cmp	r2, r3
 800af58:	d302      	bcc.n	800af60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d11d      	bne.n	800af9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6a:	2b80      	cmp	r3, #128	; 0x80
 800af6c:	d016      	beq.n	800af9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2220      	movs	r2, #32
 800af78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	f043 0220 	orr.w	r2, r3, #32
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e007      	b.n	800afac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa6:	2b80      	cmp	r3, #128	; 0x80
 800afa8:	d1c3      	bne.n	800af32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afc0:	e034      	b.n	800b02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f89b 	bl	800b0fe <I2C_IsAcknowledgeFailed>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e034      	b.n	800b03c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd8:	d028      	beq.n	800b02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afda:	f7fe f87b 	bl	80090d4 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d302      	bcc.n	800aff0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d11d      	bne.n	800b02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	f003 0304 	and.w	r3, r3, #4
 800affa:	2b04      	cmp	r3, #4
 800affc:	d016      	beq.n	800b02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2220      	movs	r2, #32
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	f043 0220 	orr.w	r2, r3, #32
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e007      	b.n	800b03c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b04      	cmp	r3, #4
 800b038:	d1c3      	bne.n	800afc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b050:	e049      	b.n	800b0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	f003 0310 	and.w	r3, r3, #16
 800b05c:	2b10      	cmp	r3, #16
 800b05e:	d119      	bne.n	800b094 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f06f 0210 	mvn.w	r2, #16
 800b068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2220      	movs	r2, #32
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e030      	b.n	800b0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b094:	f7fe f81e 	bl	80090d4 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d11d      	bne.n	800b0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d016      	beq.n	800b0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d2:	f043 0220 	orr.w	r2, r3, #32
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e007      	b.n	800b0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f0:	2b40      	cmp	r3, #64	; 0x40
 800b0f2:	d1ae      	bne.n	800b052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b114:	d11b      	bne.n	800b14e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b11e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2220      	movs	r2, #32
 800b12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f043 0204 	orr.w	r2, r3, #4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e000      	b.n	800b150 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr
	...

0800b15c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e272      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 8087 	beq.w	800b28a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b17c:	4b92      	ldr	r3, [pc, #584]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f003 030c 	and.w	r3, r3, #12
 800b184:	2b04      	cmp	r3, #4
 800b186:	d00c      	beq.n	800b1a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b188:	4b8f      	ldr	r3, [pc, #572]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f003 030c 	and.w	r3, r3, #12
 800b190:	2b08      	cmp	r3, #8
 800b192:	d112      	bne.n	800b1ba <HAL_RCC_OscConfig+0x5e>
 800b194:	4b8c      	ldr	r3, [pc, #560]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a0:	d10b      	bne.n	800b1ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1a2:	4b89      	ldr	r3, [pc, #548]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d06c      	beq.n	800b288 <HAL_RCC_OscConfig+0x12c>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d168      	bne.n	800b288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e24c      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1c2:	d106      	bne.n	800b1d2 <HAL_RCC_OscConfig+0x76>
 800b1c4:	4b80      	ldr	r3, [pc, #512]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a7f      	ldr	r2, [pc, #508]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	e02e      	b.n	800b230 <HAL_RCC_OscConfig+0xd4>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10c      	bne.n	800b1f4 <HAL_RCC_OscConfig+0x98>
 800b1da:	4b7b      	ldr	r3, [pc, #492]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a7a      	ldr	r2, [pc, #488]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	4b78      	ldr	r3, [pc, #480]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a77      	ldr	r2, [pc, #476]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b1ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	e01d      	b.n	800b230 <HAL_RCC_OscConfig+0xd4>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1fc:	d10c      	bne.n	800b218 <HAL_RCC_OscConfig+0xbc>
 800b1fe:	4b72      	ldr	r3, [pc, #456]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a71      	ldr	r2, [pc, #452]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	4b6f      	ldr	r3, [pc, #444]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a6e      	ldr	r2, [pc, #440]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	e00b      	b.n	800b230 <HAL_RCC_OscConfig+0xd4>
 800b218:	4b6b      	ldr	r3, [pc, #428]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a6a      	ldr	r2, [pc, #424]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b21e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	4b68      	ldr	r3, [pc, #416]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a67      	ldr	r2, [pc, #412]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b22a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b22e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d013      	beq.n	800b260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b238:	f7fd ff4c 	bl	80090d4 <HAL_GetTick>
 800b23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b23e:	e008      	b.n	800b252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b240:	f7fd ff48 	bl	80090d4 <HAL_GetTick>
 800b244:	4602      	mov	r2, r0
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	2b64      	cmp	r3, #100	; 0x64
 800b24c:	d901      	bls.n	800b252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b24e:	2303      	movs	r3, #3
 800b250:	e200      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b252:	4b5d      	ldr	r3, [pc, #372]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0f0      	beq.n	800b240 <HAL_RCC_OscConfig+0xe4>
 800b25e:	e014      	b.n	800b28a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b260:	f7fd ff38 	bl	80090d4 <HAL_GetTick>
 800b264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b266:	e008      	b.n	800b27a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b268:	f7fd ff34 	bl	80090d4 <HAL_GetTick>
 800b26c:	4602      	mov	r2, r0
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	2b64      	cmp	r3, #100	; 0x64
 800b274:	d901      	bls.n	800b27a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e1ec      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b27a:	4b53      	ldr	r3, [pc, #332]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1f0      	bne.n	800b268 <HAL_RCC_OscConfig+0x10c>
 800b286:	e000      	b.n	800b28a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	2b00      	cmp	r3, #0
 800b294:	d063      	beq.n	800b35e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b296:	4b4c      	ldr	r3, [pc, #304]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f003 030c 	and.w	r3, r3, #12
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b2a2:	4b49      	ldr	r3, [pc, #292]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f003 030c 	and.w	r3, r3, #12
 800b2aa:	2b08      	cmp	r3, #8
 800b2ac:	d11c      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x18c>
 800b2ae:	4b46      	ldr	r3, [pc, #280]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d116      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2ba:	4b43      	ldr	r3, [pc, #268]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <HAL_RCC_OscConfig+0x176>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d001      	beq.n	800b2d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e1c0      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2d2:	4b3d      	ldr	r3, [pc, #244]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	4939      	ldr	r1, [pc, #228]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2e6:	e03a      	b.n	800b35e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d020      	beq.n	800b332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b2f0:	4b36      	ldr	r3, [pc, #216]	; (800b3cc <HAL_RCC_OscConfig+0x270>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2f6:	f7fd feed 	bl	80090d4 <HAL_GetTick>
 800b2fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2fc:	e008      	b.n	800b310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2fe:	f7fd fee9 	bl	80090d4 <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d901      	bls.n	800b310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e1a1      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b310:	4b2d      	ldr	r3, [pc, #180]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0f0      	beq.n	800b2fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b31c:	4b2a      	ldr	r3, [pc, #168]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	00db      	lsls	r3, r3, #3
 800b32a:	4927      	ldr	r1, [pc, #156]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	600b      	str	r3, [r1, #0]
 800b330:	e015      	b.n	800b35e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b332:	4b26      	ldr	r3, [pc, #152]	; (800b3cc <HAL_RCC_OscConfig+0x270>)
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b338:	f7fd fecc 	bl	80090d4 <HAL_GetTick>
 800b33c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b33e:	e008      	b.n	800b352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b340:	f7fd fec8 	bl	80090d4 <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d901      	bls.n	800b352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e180      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b352:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1f0      	bne.n	800b340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 0308 	and.w	r3, r3, #8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d03a      	beq.n	800b3e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d019      	beq.n	800b3a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b372:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <HAL_RCC_OscConfig+0x274>)
 800b374:	2201      	movs	r2, #1
 800b376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b378:	f7fd feac 	bl	80090d4 <HAL_GetTick>
 800b37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b37e:	e008      	b.n	800b392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b380:	f7fd fea8 	bl	80090d4 <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d901      	bls.n	800b392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e160      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <HAL_RCC_OscConfig+0x26c>)
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	f003 0302 	and.w	r3, r3, #2
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d0f0      	beq.n	800b380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f000 face 	bl	800b940 <RCC_Delay>
 800b3a4:	e01c      	b.n	800b3e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3a6:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <HAL_RCC_OscConfig+0x274>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3ac:	f7fd fe92 	bl	80090d4 <HAL_GetTick>
 800b3b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3b2:	e00f      	b.n	800b3d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3b4:	f7fd fe8e 	bl	80090d4 <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d908      	bls.n	800b3d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e146      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
 800b3c6:	bf00      	nop
 800b3c8:	40021000 	.word	0x40021000
 800b3cc:	42420000 	.word	0x42420000
 800b3d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3d4:	4b92      	ldr	r3, [pc, #584]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	f003 0302 	and.w	r3, r3, #2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e9      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0304 	and.w	r3, r3, #4
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 80a6 	beq.w	800b53a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3f2:	4b8b      	ldr	r3, [pc, #556]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10d      	bne.n	800b41a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3fe:	4b88      	ldr	r3, [pc, #544]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	4a87      	ldr	r2, [pc, #540]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b408:	61d3      	str	r3, [r2, #28]
 800b40a:	4b85      	ldr	r3, [pc, #532]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b412:	60bb      	str	r3, [r7, #8]
 800b414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b416:	2301      	movs	r3, #1
 800b418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b41a:	4b82      	ldr	r3, [pc, #520]	; (800b624 <HAL_RCC_OscConfig+0x4c8>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b422:	2b00      	cmp	r3, #0
 800b424:	d118      	bne.n	800b458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b426:	4b7f      	ldr	r3, [pc, #508]	; (800b624 <HAL_RCC_OscConfig+0x4c8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a7e      	ldr	r2, [pc, #504]	; (800b624 <HAL_RCC_OscConfig+0x4c8>)
 800b42c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b432:	f7fd fe4f 	bl	80090d4 <HAL_GetTick>
 800b436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b438:	e008      	b.n	800b44c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b43a:	f7fd fe4b 	bl	80090d4 <HAL_GetTick>
 800b43e:	4602      	mov	r2, r0
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	2b64      	cmp	r3, #100	; 0x64
 800b446:	d901      	bls.n	800b44c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e103      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b44c:	4b75      	ldr	r3, [pc, #468]	; (800b624 <HAL_RCC_OscConfig+0x4c8>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0f0      	beq.n	800b43a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d106      	bne.n	800b46e <HAL_RCC_OscConfig+0x312>
 800b460:	4b6f      	ldr	r3, [pc, #444]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	4a6e      	ldr	r2, [pc, #440]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	6213      	str	r3, [r2, #32]
 800b46c:	e02d      	b.n	800b4ca <HAL_RCC_OscConfig+0x36e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10c      	bne.n	800b490 <HAL_RCC_OscConfig+0x334>
 800b476:	4b6a      	ldr	r3, [pc, #424]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	4a69      	ldr	r2, [pc, #420]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b47c:	f023 0301 	bic.w	r3, r3, #1
 800b480:	6213      	str	r3, [r2, #32]
 800b482:	4b67      	ldr	r3, [pc, #412]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	4a66      	ldr	r2, [pc, #408]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b488:	f023 0304 	bic.w	r3, r3, #4
 800b48c:	6213      	str	r3, [r2, #32]
 800b48e:	e01c      	b.n	800b4ca <HAL_RCC_OscConfig+0x36e>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	2b05      	cmp	r3, #5
 800b496:	d10c      	bne.n	800b4b2 <HAL_RCC_OscConfig+0x356>
 800b498:	4b61      	ldr	r3, [pc, #388]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	4a60      	ldr	r2, [pc, #384]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b49e:	f043 0304 	orr.w	r3, r3, #4
 800b4a2:	6213      	str	r3, [r2, #32]
 800b4a4:	4b5e      	ldr	r3, [pc, #376]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	4a5d      	ldr	r2, [pc, #372]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4aa:	f043 0301 	orr.w	r3, r3, #1
 800b4ae:	6213      	str	r3, [r2, #32]
 800b4b0:	e00b      	b.n	800b4ca <HAL_RCC_OscConfig+0x36e>
 800b4b2:	4b5b      	ldr	r3, [pc, #364]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	4a5a      	ldr	r2, [pc, #360]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4b8:	f023 0301 	bic.w	r3, r3, #1
 800b4bc:	6213      	str	r3, [r2, #32]
 800b4be:	4b58      	ldr	r3, [pc, #352]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	4a57      	ldr	r2, [pc, #348]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4c4:	f023 0304 	bic.w	r3, r3, #4
 800b4c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d015      	beq.n	800b4fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4d2:	f7fd fdff 	bl	80090d4 <HAL_GetTick>
 800b4d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4d8:	e00a      	b.n	800b4f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4da:	f7fd fdfb 	bl	80090d4 <HAL_GetTick>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d901      	bls.n	800b4f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e0b1      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4f0:	4b4b      	ldr	r3, [pc, #300]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0ee      	beq.n	800b4da <HAL_RCC_OscConfig+0x37e>
 800b4fc:	e014      	b.n	800b528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4fe:	f7fd fde9 	bl	80090d4 <HAL_GetTick>
 800b502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b504:	e00a      	b.n	800b51c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b506:	f7fd fde5 	bl	80090d4 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	f241 3288 	movw	r2, #5000	; 0x1388
 800b514:	4293      	cmp	r3, r2
 800b516:	d901      	bls.n	800b51c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b518:	2303      	movs	r3, #3
 800b51a:	e09b      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b51c:	4b40      	ldr	r3, [pc, #256]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	f003 0302 	and.w	r3, r3, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1ee      	bne.n	800b506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b528:	7dfb      	ldrb	r3, [r7, #23]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d105      	bne.n	800b53a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b52e:	4b3c      	ldr	r3, [pc, #240]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	4a3b      	ldr	r2, [pc, #236]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 8087 	beq.w	800b652 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b544:	4b36      	ldr	r3, [pc, #216]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f003 030c 	and.w	r3, r3, #12
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d061      	beq.n	800b614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	69db      	ldr	r3, [r3, #28]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d146      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b558:	4b33      	ldr	r3, [pc, #204]	; (800b628 <HAL_RCC_OscConfig+0x4cc>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b55e:	f7fd fdb9 	bl	80090d4 <HAL_GetTick>
 800b562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b564:	e008      	b.n	800b578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b566:	f7fd fdb5 	bl	80090d4 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	2b02      	cmp	r3, #2
 800b572:	d901      	bls.n	800b578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e06d      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b578:	4b29      	ldr	r3, [pc, #164]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1f0      	bne.n	800b566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a1b      	ldr	r3, [r3, #32]
 800b588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b58c:	d108      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b58e:	4b24      	ldr	r3, [pc, #144]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	4921      	ldr	r1, [pc, #132]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b5a0:	4b1f      	ldr	r3, [pc, #124]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a19      	ldr	r1, [r3, #32]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	491b      	ldr	r1, [pc, #108]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5b8:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <HAL_RCC_OscConfig+0x4cc>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5be:	f7fd fd89 	bl	80090d4 <HAL_GetTick>
 800b5c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5c4:	e008      	b.n	800b5d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5c6:	f7fd fd85 	bl	80090d4 <HAL_GetTick>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d901      	bls.n	800b5d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e03d      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5d8:	4b11      	ldr	r3, [pc, #68]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0f0      	beq.n	800b5c6 <HAL_RCC_OscConfig+0x46a>
 800b5e4:	e035      	b.n	800b652 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5e6:	4b10      	ldr	r3, [pc, #64]	; (800b628 <HAL_RCC_OscConfig+0x4cc>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5ec:	f7fd fd72 	bl	80090d4 <HAL_GetTick>
 800b5f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5f2:	e008      	b.n	800b606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5f4:	f7fd fd6e 	bl	80090d4 <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d901      	bls.n	800b606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e026      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b606:	4b06      	ldr	r3, [pc, #24]	; (800b620 <HAL_RCC_OscConfig+0x4c4>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1f0      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x498>
 800b612:	e01e      	b.n	800b652 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	69db      	ldr	r3, [r3, #28]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d107      	bne.n	800b62c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e019      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
 800b620:	40021000 	.word	0x40021000
 800b624:	40007000 	.word	0x40007000
 800b628:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b62c:	4b0b      	ldr	r3, [pc, #44]	; (800b65c <HAL_RCC_OscConfig+0x500>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d106      	bne.n	800b64e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d001      	beq.n	800b652 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	40021000 	.word	0x40021000

0800b660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e0d0      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b674:	4b6a      	ldr	r3, [pc, #424]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0307 	and.w	r3, r3, #7
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d910      	bls.n	800b6a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b682:	4b67      	ldr	r3, [pc, #412]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f023 0207 	bic.w	r2, r3, #7
 800b68a:	4965      	ldr	r1, [pc, #404]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	4313      	orrs	r3, r2
 800b690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b692:	4b63      	ldr	r3, [pc, #396]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d001      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e0b8      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0302 	and.w	r3, r3, #2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d020      	beq.n	800b6f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d005      	beq.n	800b6c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6bc:	4b59      	ldr	r3, [pc, #356]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	4a58      	ldr	r2, [pc, #352]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b6c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b6c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 0308 	and.w	r3, r3, #8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6d4:	4b53      	ldr	r3, [pc, #332]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	4a52      	ldr	r2, [pc, #328]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b6da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b6de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6e0:	4b50      	ldr	r3, [pc, #320]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	494d      	ldr	r1, [pc, #308]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d040      	beq.n	800b780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d107      	bne.n	800b716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b706:	4b47      	ldr	r3, [pc, #284]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d115      	bne.n	800b73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e07f      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	d107      	bne.n	800b72e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b71e:	4b41      	ldr	r3, [pc, #260]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d109      	bne.n	800b73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e073      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b72e:	4b3d      	ldr	r3, [pc, #244]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e06b      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b73e:	4b39      	ldr	r3, [pc, #228]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f023 0203 	bic.w	r2, r3, #3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	4936      	ldr	r1, [pc, #216]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b74c:	4313      	orrs	r3, r2
 800b74e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b750:	f7fd fcc0 	bl	80090d4 <HAL_GetTick>
 800b754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b756:	e00a      	b.n	800b76e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b758:	f7fd fcbc 	bl	80090d4 <HAL_GetTick>
 800b75c:	4602      	mov	r2, r0
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	f241 3288 	movw	r2, #5000	; 0x1388
 800b766:	4293      	cmp	r3, r2
 800b768:	d901      	bls.n	800b76e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e053      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b76e:	4b2d      	ldr	r3, [pc, #180]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f003 020c 	and.w	r2, r3, #12
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d1eb      	bne.n	800b758 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b780:	4b27      	ldr	r3, [pc, #156]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0307 	and.w	r3, r3, #7
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d210      	bcs.n	800b7b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b78e:	4b24      	ldr	r3, [pc, #144]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f023 0207 	bic.w	r2, r3, #7
 800b796:	4922      	ldr	r1, [pc, #136]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b79e:	4b20      	ldr	r3, [pc, #128]	; (800b820 <HAL_RCC_ClockConfig+0x1c0>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d001      	beq.n	800b7b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e032      	b.n	800b816 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0304 	and.w	r3, r3, #4
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7bc:	4b19      	ldr	r3, [pc, #100]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	4916      	ldr	r1, [pc, #88]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0308 	and.w	r3, r3, #8
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7da:	4b12      	ldr	r3, [pc, #72]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	00db      	lsls	r3, r3, #3
 800b7e8:	490e      	ldr	r1, [pc, #56]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7ee:	f000 f821 	bl	800b834 <HAL_RCC_GetSysClockFreq>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <HAL_RCC_ClockConfig+0x1c4>)
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	091b      	lsrs	r3, r3, #4
 800b7fa:	f003 030f 	and.w	r3, r3, #15
 800b7fe:	490a      	ldr	r1, [pc, #40]	; (800b828 <HAL_RCC_ClockConfig+0x1c8>)
 800b800:	5ccb      	ldrb	r3, [r1, r3]
 800b802:	fa22 f303 	lsr.w	r3, r2, r3
 800b806:	4a09      	ldr	r2, [pc, #36]	; (800b82c <HAL_RCC_ClockConfig+0x1cc>)
 800b808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b80a:	4b09      	ldr	r3, [pc, #36]	; (800b830 <HAL_RCC_ClockConfig+0x1d0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd fc1e 	bl	8009050 <HAL_InitTick>

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	40022000 	.word	0x40022000
 800b824:	40021000 	.word	0x40021000
 800b828:	0800e5a4 	.word	0x0800e5a4
 800b82c:	200009b4 	.word	0x200009b4
 800b830:	200009b8 	.word	0x200009b8

0800b834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
 800b846:	2300      	movs	r3, #0
 800b848:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b84e:	4b1e      	ldr	r3, [pc, #120]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f003 030c 	and.w	r3, r3, #12
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	d002      	beq.n	800b864 <HAL_RCC_GetSysClockFreq+0x30>
 800b85e:	2b08      	cmp	r3, #8
 800b860:	d003      	beq.n	800b86a <HAL_RCC_GetSysClockFreq+0x36>
 800b862:	e027      	b.n	800b8b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b864:	4b19      	ldr	r3, [pc, #100]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x98>)
 800b866:	613b      	str	r3, [r7, #16]
      break;
 800b868:	e027      	b.n	800b8ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	0c9b      	lsrs	r3, r3, #18
 800b86e:	f003 030f 	and.w	r3, r3, #15
 800b872:	4a17      	ldr	r2, [pc, #92]	; (800b8d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b874:	5cd3      	ldrb	r3, [r2, r3]
 800b876:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d010      	beq.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b882:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	0c5b      	lsrs	r3, r3, #17
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	4a11      	ldr	r2, [pc, #68]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b88e:	5cd3      	ldrb	r3, [r2, r3]
 800b890:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a0d      	ldr	r2, [pc, #52]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x98>)
 800b896:	fb03 f202 	mul.w	r2, r3, r2
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	e004      	b.n	800b8ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a0c      	ldr	r2, [pc, #48]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b8a8:	fb02 f303 	mul.w	r3, r2, r3
 800b8ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	613b      	str	r3, [r7, #16]
      break;
 800b8b2:	e002      	b.n	800b8ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b8b4:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x98>)
 800b8b6:	613b      	str	r3, [r7, #16]
      break;
 800b8b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b8ba:	693b      	ldr	r3, [r7, #16]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bc80      	pop	{r7}
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40021000 	.word	0x40021000
 800b8cc:	007a1200 	.word	0x007a1200
 800b8d0:	0800e5bc 	.word	0x0800e5bc
 800b8d4:	0800e5cc 	.word	0x0800e5cc
 800b8d8:	003d0900 	.word	0x003d0900

0800b8dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <HAL_RCC_GetHCLKFreq+0x10>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bc80      	pop	{r7}
 800b8ea:	4770      	bx	lr
 800b8ec:	200009b4 	.word	0x200009b4

0800b8f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8f4:	f7ff fff2 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	4b05      	ldr	r3, [pc, #20]	; (800b910 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	0a1b      	lsrs	r3, r3, #8
 800b900:	f003 0307 	and.w	r3, r3, #7
 800b904:	4903      	ldr	r1, [pc, #12]	; (800b914 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b906:	5ccb      	ldrb	r3, [r1, r3]
 800b908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	40021000 	.word	0x40021000
 800b914:	0800e5b4 	.word	0x0800e5b4

0800b918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b91c:	f7ff ffde 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800b920:	4602      	mov	r2, r0
 800b922:	4b05      	ldr	r3, [pc, #20]	; (800b938 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	0adb      	lsrs	r3, r3, #11
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	4903      	ldr	r1, [pc, #12]	; (800b93c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b92e:	5ccb      	ldrb	r3, [r1, r3]
 800b930:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b934:	4618      	mov	r0, r3
 800b936:	bd80      	pop	{r7, pc}
 800b938:	40021000 	.word	0x40021000
 800b93c:	0800e5b4 	.word	0x0800e5b4

0800b940 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b948:	4b0a      	ldr	r3, [pc, #40]	; (800b974 <RCC_Delay+0x34>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a0a      	ldr	r2, [pc, #40]	; (800b978 <RCC_Delay+0x38>)
 800b94e:	fba2 2303 	umull	r2, r3, r2, r3
 800b952:	0a5b      	lsrs	r3, r3, #9
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	fb02 f303 	mul.w	r3, r2, r3
 800b95a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b95c:	bf00      	nop
  }
  while (Delay --);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	1e5a      	subs	r2, r3, #1
 800b962:	60fa      	str	r2, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f9      	bne.n	800b95c <RCC_Delay+0x1c>
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	bc80      	pop	{r7}
 800b972:	4770      	bx	lr
 800b974:	200009b4 	.word	0x200009b4
 800b978:	10624dd3 	.word	0x10624dd3

0800b97c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e041      	b.n	800ba12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7fd fa26 	bl	8008df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	f000 fa82 	bl	800bec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
	...

0800ba1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d001      	beq.n	800ba34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e044      	b.n	800babe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2202      	movs	r2, #2
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f042 0201 	orr.w	r2, r2, #1
 800ba4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1d      	ldr	r2, [pc, #116]	; (800bac8 <HAL_TIM_Base_Start_IT+0xac>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d018      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x6c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1c      	ldr	r2, [pc, #112]	; (800bacc <HAL_TIM_Base_Start_IT+0xb0>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d013      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x6c>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba68:	d00e      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x6c>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d009      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x6c>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a16      	ldr	r2, [pc, #88]	; (800bad4 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d004      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x6c>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a15      	ldr	r2, [pc, #84]	; (800bad8 <HAL_TIM_Base_Start_IT+0xbc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d111      	bne.n	800baac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f003 0307 	and.w	r3, r3, #7
 800ba92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b06      	cmp	r3, #6
 800ba98:	d010      	beq.n	800babc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f042 0201 	orr.w	r2, r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baaa:	e007      	b.n	800babc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f042 0201 	orr.w	r2, r2, #1
 800baba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bc80      	pop	{r7}
 800bac6:	4770      	bx	lr
 800bac8:	40012c00 	.word	0x40012c00
 800bacc:	40013400 	.word	0x40013400
 800bad0:	40000400 	.word	0x40000400
 800bad4:	40000800 	.word	0x40000800
 800bad8:	40000c00 	.word	0x40000c00

0800badc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d122      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	f003 0302 	and.w	r3, r3, #2
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d11b      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f06f 0202 	mvn.w	r2, #2
 800bb08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d003      	beq.n	800bb26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f9b4 	bl	800be8c <HAL_TIM_IC_CaptureCallback>
 800bb24:	e005      	b.n	800bb32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f9a7 	bl	800be7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f9b6 	bl	800be9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	f003 0304 	and.w	r3, r3, #4
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d122      	bne.n	800bb8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d11b      	bne.n	800bb8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f06f 0204 	mvn.w	r2, #4
 800bb5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2202      	movs	r2, #2
 800bb62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f98a 	bl	800be8c <HAL_TIM_IC_CaptureCallback>
 800bb78:	e005      	b.n	800bb86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f97d 	bl	800be7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f98c 	bl	800be9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	f003 0308 	and.w	r3, r3, #8
 800bb96:	2b08      	cmp	r3, #8
 800bb98:	d122      	bne.n	800bbe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	f003 0308 	and.w	r3, r3, #8
 800bba4:	2b08      	cmp	r3, #8
 800bba6:	d11b      	bne.n	800bbe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f06f 0208 	mvn.w	r2, #8
 800bbb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f960 	bl	800be8c <HAL_TIM_IC_CaptureCallback>
 800bbcc:	e005      	b.n	800bbda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f953 	bl	800be7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f962 	bl	800be9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	f003 0310 	and.w	r3, r3, #16
 800bbea:	2b10      	cmp	r3, #16
 800bbec:	d122      	bne.n	800bc34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	f003 0310 	and.w	r3, r3, #16
 800bbf8:	2b10      	cmp	r3, #16
 800bbfa:	d11b      	bne.n	800bc34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f06f 0210 	mvn.w	r2, #16
 800bc04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2208      	movs	r2, #8
 800bc0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f936 	bl	800be8c <HAL_TIM_IC_CaptureCallback>
 800bc20:	e005      	b.n	800bc2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f929 	bl	800be7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f938 	bl	800be9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d10e      	bne.n	800bc60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d107      	bne.n	800bc60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f06f 0201 	mvn.w	r2, #1
 800bc58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7fc fd1a 	bl	8008694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6a:	2b80      	cmp	r3, #128	; 0x80
 800bc6c:	d10e      	bne.n	800bc8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc78:	2b80      	cmp	r3, #128	; 0x80
 800bc7a:	d107      	bne.n	800bc8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 faa1 	bl	800c1ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc96:	2b40      	cmp	r3, #64	; 0x40
 800bc98:	d10e      	bne.n	800bcb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	2b40      	cmp	r3, #64	; 0x40
 800bca6:	d107      	bne.n	800bcb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f8fc 	bl	800beb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	f003 0320 	and.w	r3, r3, #32
 800bcc2:	2b20      	cmp	r3, #32
 800bcc4:	d10e      	bne.n	800bce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	f003 0320 	and.w	r3, r3, #32
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	d107      	bne.n	800bce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f06f 0220 	mvn.w	r2, #32
 800bcdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fa6c 	bl	800c1bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d101      	bne.n	800bd08 <HAL_TIM_ConfigClockSource+0x1c>
 800bd04:	2302      	movs	r3, #2
 800bd06:	e0b4      	b.n	800be72 <HAL_TIM_ConfigClockSource+0x186>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd40:	d03e      	beq.n	800bdc0 <HAL_TIM_ConfigClockSource+0xd4>
 800bd42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd46:	f200 8087 	bhi.w	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4e:	f000 8086 	beq.w	800be5e <HAL_TIM_ConfigClockSource+0x172>
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d87f      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd58:	2b70      	cmp	r3, #112	; 0x70
 800bd5a:	d01a      	beq.n	800bd92 <HAL_TIM_ConfigClockSource+0xa6>
 800bd5c:	2b70      	cmp	r3, #112	; 0x70
 800bd5e:	d87b      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd60:	2b60      	cmp	r3, #96	; 0x60
 800bd62:	d050      	beq.n	800be06 <HAL_TIM_ConfigClockSource+0x11a>
 800bd64:	2b60      	cmp	r3, #96	; 0x60
 800bd66:	d877      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd68:	2b50      	cmp	r3, #80	; 0x50
 800bd6a:	d03c      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0xfa>
 800bd6c:	2b50      	cmp	r3, #80	; 0x50
 800bd6e:	d873      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd70:	2b40      	cmp	r3, #64	; 0x40
 800bd72:	d058      	beq.n	800be26 <HAL_TIM_ConfigClockSource+0x13a>
 800bd74:	2b40      	cmp	r3, #64	; 0x40
 800bd76:	d86f      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd78:	2b30      	cmp	r3, #48	; 0x30
 800bd7a:	d064      	beq.n	800be46 <HAL_TIM_ConfigClockSource+0x15a>
 800bd7c:	2b30      	cmp	r3, #48	; 0x30
 800bd7e:	d86b      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd80:	2b20      	cmp	r3, #32
 800bd82:	d060      	beq.n	800be46 <HAL_TIM_ConfigClockSource+0x15a>
 800bd84:	2b20      	cmp	r3, #32
 800bd86:	d867      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d05c      	beq.n	800be46 <HAL_TIM_ConfigClockSource+0x15a>
 800bd8c:	2b10      	cmp	r3, #16
 800bd8e:	d05a      	beq.n	800be46 <HAL_TIM_ConfigClockSource+0x15a>
 800bd90:	e062      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bda2:	f000 f980 	bl	800c0a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bdb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	609a      	str	r2, [r3, #8]
      break;
 800bdbe:	e04f      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdd0:	f000 f969 	bl	800c0a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bde2:	609a      	str	r2, [r3, #8]
      break;
 800bde4:	e03c      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f000 f8e0 	bl	800bfb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2150      	movs	r1, #80	; 0x50
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f937 	bl	800c072 <TIM_ITRx_SetConfig>
      break;
 800be04:	e02c      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be12:	461a      	mov	r2, r3
 800be14:	f000 f8fe 	bl	800c014 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2160      	movs	r1, #96	; 0x60
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 f927 	bl	800c072 <TIM_ITRx_SetConfig>
      break;
 800be24:	e01c      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be32:	461a      	mov	r2, r3
 800be34:	f000 f8c0 	bl	800bfb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2140      	movs	r1, #64	; 0x40
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 f917 	bl	800c072 <TIM_ITRx_SetConfig>
      break;
 800be44:	e00c      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4619      	mov	r1, r3
 800be50:	4610      	mov	r0, r2
 800be52:	f000 f90e 	bl	800c072 <TIM_ITRx_SetConfig>
      break;
 800be56:	e003      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	73fb      	strb	r3, [r7, #15]
      break;
 800be5c:	e000      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be70:	7bfb      	ldrb	r3, [r7, #15]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	bc80      	pop	{r7}
 800be8a:	4770      	bx	lr

0800be8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	bc80      	pop	{r7}
 800be9c:	4770      	bx	lr

0800be9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	bc80      	pop	{r7}
 800beae:	4770      	bx	lr

0800beb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bc80      	pop	{r7}
 800bec0:	4770      	bx	lr
	...

0800bec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a33      	ldr	r2, [pc, #204]	; (800bfa4 <TIM_Base_SetConfig+0xe0>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d013      	beq.n	800bf04 <TIM_Base_SetConfig+0x40>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a32      	ldr	r2, [pc, #200]	; (800bfa8 <TIM_Base_SetConfig+0xe4>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d00f      	beq.n	800bf04 <TIM_Base_SetConfig+0x40>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beea:	d00b      	beq.n	800bf04 <TIM_Base_SetConfig+0x40>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a2f      	ldr	r2, [pc, #188]	; (800bfac <TIM_Base_SetConfig+0xe8>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d007      	beq.n	800bf04 <TIM_Base_SetConfig+0x40>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a2e      	ldr	r2, [pc, #184]	; (800bfb0 <TIM_Base_SetConfig+0xec>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d003      	beq.n	800bf04 <TIM_Base_SetConfig+0x40>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a2d      	ldr	r2, [pc, #180]	; (800bfb4 <TIM_Base_SetConfig+0xf0>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d108      	bne.n	800bf16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a22      	ldr	r2, [pc, #136]	; (800bfa4 <TIM_Base_SetConfig+0xe0>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d013      	beq.n	800bf46 <TIM_Base_SetConfig+0x82>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a21      	ldr	r2, [pc, #132]	; (800bfa8 <TIM_Base_SetConfig+0xe4>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d00f      	beq.n	800bf46 <TIM_Base_SetConfig+0x82>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf2c:	d00b      	beq.n	800bf46 <TIM_Base_SetConfig+0x82>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a1e      	ldr	r2, [pc, #120]	; (800bfac <TIM_Base_SetConfig+0xe8>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d007      	beq.n	800bf46 <TIM_Base_SetConfig+0x82>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a1d      	ldr	r2, [pc, #116]	; (800bfb0 <TIM_Base_SetConfig+0xec>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d003      	beq.n	800bf46 <TIM_Base_SetConfig+0x82>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a1c      	ldr	r2, [pc, #112]	; (800bfb4 <TIM_Base_SetConfig+0xf0>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d108      	bne.n	800bf58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	689a      	ldr	r2, [r3, #8]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a09      	ldr	r2, [pc, #36]	; (800bfa4 <TIM_Base_SetConfig+0xe0>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d003      	beq.n	800bf8c <TIM_Base_SetConfig+0xc8>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a08      	ldr	r2, [pc, #32]	; (800bfa8 <TIM_Base_SetConfig+0xe4>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d103      	bne.n	800bf94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	691a      	ldr	r2, [r3, #16]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	615a      	str	r2, [r3, #20]
}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bc80      	pop	{r7}
 800bfa2:	4770      	bx	lr
 800bfa4:	40012c00 	.word	0x40012c00
 800bfa8:	40013400 	.word	0x40013400
 800bfac:	40000400 	.word	0x40000400
 800bfb0:	40000800 	.word	0x40000800
 800bfb4:	40000c00 	.word	0x40000c00

0800bfb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b087      	sub	sp, #28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6a1b      	ldr	r3, [r3, #32]
 800bfc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	f023 0201 	bic.w	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	f023 030a 	bic.w	r3, r3, #10
 800bff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	621a      	str	r2, [r3, #32]
}
 800c00a:	bf00      	nop
 800c00c:	371c      	adds	r7, #28
 800c00e:	46bd      	mov	sp, r7
 800c010:	bc80      	pop	{r7}
 800c012:	4770      	bx	lr

0800c014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	f023 0210 	bic.w	r2, r3, #16
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c03e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	031b      	lsls	r3, r3, #12
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	4313      	orrs	r3, r2
 800c048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c050:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	011b      	lsls	r3, r3, #4
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	4313      	orrs	r3, r2
 800c05a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	621a      	str	r2, [r3, #32]
}
 800c068:	bf00      	nop
 800c06a:	371c      	adds	r7, #28
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr

0800c072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c072:	b480      	push	{r7}
 800c074:	b085      	sub	sp, #20
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4313      	orrs	r3, r2
 800c090:	f043 0307 	orr.w	r3, r3, #7
 800c094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	609a      	str	r2, [r3, #8]
}
 800c09c:	bf00      	nop
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bc80      	pop	{r7}
 800c0a4:	4770      	bx	lr

0800c0a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b087      	sub	sp, #28
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
 800c0b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	021a      	lsls	r2, r3, #8
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	431a      	orrs	r2, r3
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	609a      	str	r2, [r3, #8]
}
 800c0da:	bf00      	nop
 800c0dc:	371c      	adds	r7, #28
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bc80      	pop	{r7}
 800c0e2:	4770      	bx	lr

0800c0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d101      	bne.n	800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	e050      	b.n	800c19e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a1b      	ldr	r2, [pc, #108]	; (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d018      	beq.n	800c172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a19      	ldr	r2, [pc, #100]	; (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d013      	beq.n	800c172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c152:	d00e      	beq.n	800c172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d009      	beq.n	800c172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a14      	ldr	r2, [pc, #80]	; (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d004      	beq.n	800c172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a12      	ldr	r2, [pc, #72]	; (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d10c      	bne.n	800c18c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	4313      	orrs	r3, r2
 800c182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bc80      	pop	{r7}
 800c1a6:	4770      	bx	lr
 800c1a8:	40012c00 	.word	0x40012c00
 800c1ac:	40013400 	.word	0x40013400
 800c1b0:	40000400 	.word	0x40000400
 800c1b4:	40000800 	.word	0x40000800
 800c1b8:	40000c00 	.word	0x40000c00

0800c1bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bc80      	pop	{r7}
 800c1cc:	4770      	bx	lr

0800c1ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bc80      	pop	{r7}
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e042      	b.n	800c278 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7fc fe1a 	bl	8008e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2224      	movs	r2, #36	; 0x24
 800c210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68da      	ldr	r2, [r3, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fcb5 	bl	800cb94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	695a      	ldr	r2, [r3, #20]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68da      	ldr	r2, [r3, #12]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2220      	movs	r2, #32
 800c26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	4613      	mov	r3, r2
 800c28c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b20      	cmp	r3, #32
 800c298:	d121      	bne.n	800c2de <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <HAL_UART_Transmit_IT+0x26>
 800c2a0:	88fb      	ldrh	r3, [r7, #6]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e01a      	b.n	800c2e0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	88fa      	ldrh	r2, [r7, #6]
 800c2b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	88fa      	ldrh	r2, [r7, #6]
 800c2ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2221      	movs	r2, #33	; 0x21
 800c2c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68da      	ldr	r2, [r3, #12]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e000      	b.n	800c2e0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c2de:	2302      	movs	r3, #2
  }
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bc80      	pop	{r7}
 800c2e8:	4770      	bx	lr
	...

0800c2ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b0ba      	sub	sp, #232	; 0xe8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c312:	2300      	movs	r3, #0
 800c314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c318:	2300      	movs	r3, #0
 800c31a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c322:	f003 030f 	and.w	r3, r3, #15
 800c326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c32a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10f      	bne.n	800c352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c336:	f003 0320 	and.w	r3, r3, #32
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d009      	beq.n	800c352 <HAL_UART_IRQHandler+0x66>
 800c33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c342:	f003 0320 	and.w	r3, r3, #32
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fb63 	bl	800ca16 <UART_Receive_IT>
      return;
 800c350:	e25b      	b.n	800c80a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c356:	2b00      	cmp	r3, #0
 800c358:	f000 80de 	beq.w	800c518 <HAL_UART_IRQHandler+0x22c>
 800c35c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d106      	bne.n	800c376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c36c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 80d1 	beq.w	800c518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00b      	beq.n	800c39a <HAL_UART_IRQHandler+0xae>
 800c382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c392:	f043 0201 	orr.w	r2, r3, #1
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c39e:	f003 0304 	and.w	r3, r3, #4
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00b      	beq.n	800c3be <HAL_UART_IRQHandler+0xd2>
 800c3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d005      	beq.n	800c3be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b6:	f043 0202 	orr.w	r2, r3, #2
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c2:	f003 0302 	and.w	r3, r3, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00b      	beq.n	800c3e2 <HAL_UART_IRQHandler+0xf6>
 800c3ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d005      	beq.n	800c3e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3da:	f043 0204 	orr.w	r2, r3, #4
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3e6:	f003 0308 	and.w	r3, r3, #8
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d011      	beq.n	800c412 <HAL_UART_IRQHandler+0x126>
 800c3ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d105      	bne.n	800c406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	2b00      	cmp	r3, #0
 800c404:	d005      	beq.n	800c412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40a:	f043 0208 	orr.w	r2, r3, #8
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 81f2 	beq.w	800c800 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c420:	f003 0320 	and.w	r3, r3, #32
 800c424:	2b00      	cmp	r3, #0
 800c426:	d008      	beq.n	800c43a <HAL_UART_IRQHandler+0x14e>
 800c428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c42c:	f003 0320 	and.w	r3, r3, #32
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 faee 	bl	800ca16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c444:	2b00      	cmp	r3, #0
 800c446:	bf14      	ite	ne
 800c448:	2301      	movne	r3, #1
 800c44a:	2300      	moveq	r3, #0
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	f003 0308 	and.w	r3, r3, #8
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d103      	bne.n	800c466 <HAL_UART_IRQHandler+0x17a>
 800c45e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d04f      	beq.n	800c506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f9f8 	bl	800c85c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c476:	2b00      	cmp	r3, #0
 800c478:	d041      	beq.n	800c4fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3314      	adds	r3, #20
 800c480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c488:	e853 3f00 	ldrex	r3, [r3]
 800c48c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3314      	adds	r3, #20
 800c4a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c4a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c4aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c4b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c4b6:	e841 2300 	strex	r3, r2, [r1]
 800c4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1d9      	bne.n	800c47a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d013      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d2:	4a7e      	ldr	r2, [pc, #504]	; (800c6cc <HAL_UART_IRQHandler+0x3e0>)
 800c4d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fd f86c 	bl	80095b8 <HAL_DMA_Abort_IT>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d016      	beq.n	800c514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f4:	e00e      	b.n	800c514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f99c 	bl	800c834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4fc:	e00a      	b.n	800c514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f998 	bl	800c834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c504:	e006      	b.n	800c514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f994 	bl	800c834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c512:	e175      	b.n	800c800 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c514:	bf00      	nop
    return;
 800c516:	e173      	b.n	800c800 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	f040 814f 	bne.w	800c7c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c526:	f003 0310 	and.w	r3, r3, #16
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 8148 	beq.w	800c7c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c534:	f003 0310 	and.w	r3, r3, #16
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f000 8141 	beq.w	800c7c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c53e:	2300      	movs	r3, #0
 800c540:	60bb      	str	r3, [r7, #8]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	60bb      	str	r3, [r7, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	60bb      	str	r3, [r7, #8]
 800c552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 80b6 	beq.w	800c6d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 8145 	beq.w	800c804 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c57e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c582:	429a      	cmp	r2, r3
 800c584:	f080 813e 	bcs.w	800c804 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c58e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	2b20      	cmp	r3, #32
 800c598:	f000 8088 	beq.w	800c6ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	330c      	adds	r3, #12
 800c5a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c5aa:	e853 3f00 	ldrex	r3, [r3]
 800c5ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c5b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	330c      	adds	r3, #12
 800c5c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c5c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5d8:	e841 2300 	strex	r3, r2, [r1]
 800c5dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1d9      	bne.n	800c59c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3314      	adds	r3, #20
 800c5ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5fa:	f023 0301 	bic.w	r3, r3, #1
 800c5fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3314      	adds	r3, #20
 800c608:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c60c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c610:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c614:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c618:	e841 2300 	strex	r3, r2, [r1]
 800c61c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c61e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1e1      	bne.n	800c5e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3314      	adds	r3, #20
 800c62a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c62e:	e853 3f00 	ldrex	r3, [r3]
 800c632:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c63a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3314      	adds	r3, #20
 800c644:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c648:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c64a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c64e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c650:	e841 2300 	strex	r3, r2, [r1]
 800c654:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1e3      	bne.n	800c624 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2220      	movs	r2, #32
 800c660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	330c      	adds	r3, #12
 800c670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c67c:	f023 0310 	bic.w	r3, r3, #16
 800c680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	330c      	adds	r3, #12
 800c68a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c68e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c690:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c696:	e841 2300 	strex	r3, r2, [r1]
 800c69a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1e3      	bne.n	800c66a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fc ff4b 	bl	8009542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f8bf 	bl	800c846 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6c8:	e09c      	b.n	800c804 <HAL_UART_IRQHandler+0x518>
 800c6ca:	bf00      	nop
 800c6cc:	0800c921 	.word	0x0800c921
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 808e 	beq.w	800c808 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 8089 	beq.w	800c808 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	330c      	adds	r3, #12
 800c6fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c700:	e853 3f00 	ldrex	r3, [r3]
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c70c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	330c      	adds	r3, #12
 800c716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c71a:	647a      	str	r2, [r7, #68]	; 0x44
 800c71c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e3      	bne.n	800c6f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3314      	adds	r3, #20
 800c734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	623b      	str	r3, [r7, #32]
   return(result);
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	f023 0301 	bic.w	r3, r3, #1
 800c744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3314      	adds	r3, #20
 800c74e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c752:	633a      	str	r2, [r7, #48]	; 0x30
 800c754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e3      	bne.n	800c72e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2220      	movs	r2, #32
 800c76a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	330c      	adds	r3, #12
 800c77a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	e853 3f00 	ldrex	r3, [r3]
 800c782:	60fb      	str	r3, [r7, #12]
   return(result);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f023 0310 	bic.w	r3, r3, #16
 800c78a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	330c      	adds	r3, #12
 800c794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c798:	61fa      	str	r2, [r7, #28]
 800c79a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79c:	69b9      	ldr	r1, [r7, #24]
 800c79e:	69fa      	ldr	r2, [r7, #28]
 800c7a0:	e841 2300 	strex	r3, r2, [r1]
 800c7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1e3      	bne.n	800c774 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f844 	bl	800c846 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7be:	e023      	b.n	800c808 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d009      	beq.n	800c7e0 <HAL_UART_IRQHandler+0x4f4>
 800c7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8b5 	bl	800c948 <UART_Transmit_IT>
    return;
 800c7de:	e014      	b.n	800c80a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00e      	beq.n	800c80a <HAL_UART_IRQHandler+0x51e>
 800c7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d008      	beq.n	800c80a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8f4 	bl	800c9e6 <UART_EndTransmit_IT>
    return;
 800c7fe:	e004      	b.n	800c80a <HAL_UART_IRQHandler+0x51e>
    return;
 800c800:	bf00      	nop
 800c802:	e002      	b.n	800c80a <HAL_UART_IRQHandler+0x51e>
      return;
 800c804:	bf00      	nop
 800c806:	e000      	b.n	800c80a <HAL_UART_IRQHandler+0x51e>
      return;
 800c808:	bf00      	nop
  }
}
 800c80a:	37e8      	adds	r7, #232	; 0xe8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bc80      	pop	{r7}
 800c820:	4770      	bx	lr

0800c822 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c822:	b480      	push	{r7}
 800c824:	b083      	sub	sp, #12
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c82a:	bf00      	nop
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	bc80      	pop	{r7}
 800c832:	4770      	bx	lr

0800c834 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	bc80      	pop	{r7}
 800c844:	4770      	bx	lr

0800c846 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	460b      	mov	r3, r1
 800c850:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c852:	bf00      	nop
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr

0800c85c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b095      	sub	sp, #84	; 0x54
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	330c      	adds	r3, #12
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86e:	e853 3f00 	ldrex	r3, [r3]
 800c872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c87a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c884:	643a      	str	r2, [r7, #64]	; 0x40
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c88a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e5      	bne.n	800c864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3314      	adds	r3, #20
 800c89e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	e853 3f00 	ldrex	r3, [r3]
 800c8a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	f023 0301 	bic.w	r3, r3, #1
 800c8ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3314      	adds	r3, #20
 800c8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8c0:	e841 2300 	strex	r3, r2, [r1]
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1e5      	bne.n	800c898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d119      	bne.n	800c908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	330c      	adds	r3, #12
 800c8da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	e853 3f00 	ldrex	r3, [r3]
 800c8e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	f023 0310 	bic.w	r3, r3, #16
 800c8ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	330c      	adds	r3, #12
 800c8f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f4:	61ba      	str	r2, [r7, #24]
 800c8f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f8:	6979      	ldr	r1, [r7, #20]
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	e841 2300 	strex	r3, r2, [r1]
 800c900:	613b      	str	r3, [r7, #16]
   return(result);
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e5      	bne.n	800c8d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2220      	movs	r2, #32
 800c90c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c916:	bf00      	nop
 800c918:	3754      	adds	r7, #84	; 0x54
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bc80      	pop	{r7}
 800c91e:	4770      	bx	lr

0800c920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f7ff ff7a 	bl	800c834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b21      	cmp	r3, #33	; 0x21
 800c95a:	d13e      	bne.n	800c9da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c964:	d114      	bne.n	800c990 <UART_Transmit_IT+0x48>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d110      	bne.n	800c990 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c982:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	1c9a      	adds	r2, r3, #2
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	621a      	str	r2, [r3, #32]
 800c98e:	e008      	b.n	800c9a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a1b      	ldr	r3, [r3, #32]
 800c994:	1c59      	adds	r1, r3, #1
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	6211      	str	r1, [r2, #32]
 800c99a:	781a      	ldrb	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10f      	bne.n	800c9d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	e000      	b.n	800c9dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9da:	2302      	movs	r3, #2
  }
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bc80      	pop	{r7}
 800c9e4:	4770      	bx	lr

0800c9e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68da      	ldr	r2, [r3, #12]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff ff02 	bl	800c810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b08c      	sub	sp, #48	; 0x30
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b22      	cmp	r3, #34	; 0x22
 800ca28:	f040 80ae 	bne.w	800cb88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca34:	d117      	bne.n	800ca66 <UART_Receive_IT+0x50>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d113      	bne.n	800ca66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5e:	1c9a      	adds	r2, r3, #2
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	629a      	str	r2, [r3, #40]	; 0x28
 800ca64:	e026      	b.n	800cab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca78:	d007      	beq.n	800ca8a <UART_Receive_IT+0x74>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10a      	bne.n	800ca98 <UART_Receive_IT+0x82>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	e008      	b.n	800caaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4619      	mov	r1, r3
 800cac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d15d      	bne.n	800cb84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 0220 	bic.w	r2, r2, #32
 800cad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68da      	ldr	r2, [r3, #12]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	695a      	ldr	r2, [r3, #20]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0201 	bic.w	r2, r2, #1
 800caf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2220      	movs	r2, #32
 800cafc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d135      	bne.n	800cb7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	330c      	adds	r3, #12
 800cb1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	e853 3f00 	ldrex	r3, [r3]
 800cb22:	613b      	str	r3, [r7, #16]
   return(result);
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	f023 0310 	bic.w	r3, r3, #16
 800cb2a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	330c      	adds	r3, #12
 800cb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb34:	623a      	str	r2, [r7, #32]
 800cb36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb38:	69f9      	ldr	r1, [r7, #28]
 800cb3a:	6a3a      	ldr	r2, [r7, #32]
 800cb3c:	e841 2300 	strex	r3, r2, [r1]
 800cb40:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e5      	bne.n	800cb14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b10      	cmp	r3, #16
 800cb54:	d10a      	bne.n	800cb6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb56:	2300      	movs	r3, #0
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	60fb      	str	r3, [r7, #12]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff fe67 	bl	800c846 <HAL_UARTEx_RxEventCallback>
 800cb78:	e002      	b.n	800cb80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fe51 	bl	800c822 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e002      	b.n	800cb8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb88:	2302      	movs	r3, #2
  }
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3730      	adds	r7, #48	; 0x30
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
	...

0800cb94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	68da      	ldr	r2, [r3, #12]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689a      	ldr	r2, [r3, #8]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	431a      	orrs	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cbce:	f023 030c 	bic.w	r3, r3, #12
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	6812      	ldr	r2, [r2, #0]
 800cbd6:	68b9      	ldr	r1, [r7, #8]
 800cbd8:	430b      	orrs	r3, r1
 800cbda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	430a      	orrs	r2, r1
 800cbf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a2c      	ldr	r2, [pc, #176]	; (800cca8 <UART_SetConfig+0x114>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d103      	bne.n	800cc04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cbfc:	f7fe fe8c 	bl	800b918 <HAL_RCC_GetPCLK2Freq>
 800cc00:	60f8      	str	r0, [r7, #12]
 800cc02:	e002      	b.n	800cc0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cc04:	f7fe fe74 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800cc08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	009a      	lsls	r2, r3, #2
 800cc14:	441a      	add	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc20:	4a22      	ldr	r2, [pc, #136]	; (800ccac <UART_SetConfig+0x118>)
 800cc22:	fba2 2303 	umull	r2, r3, r2, r3
 800cc26:	095b      	lsrs	r3, r3, #5
 800cc28:	0119      	lsls	r1, r3, #4
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009a      	lsls	r2, r3, #2
 800cc34:	441a      	add	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <UART_SetConfig+0x118>)
 800cc42:	fba3 0302 	umull	r0, r3, r3, r2
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	2064      	movs	r0, #100	; 0x64
 800cc4a:	fb00 f303 	mul.w	r3, r0, r3
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	3332      	adds	r3, #50	; 0x32
 800cc54:	4a15      	ldr	r2, [pc, #84]	; (800ccac <UART_SetConfig+0x118>)
 800cc56:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5a:	095b      	lsrs	r3, r3, #5
 800cc5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc60:	4419      	add	r1, r3
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	009a      	lsls	r2, r3, #2
 800cc6c:	441a      	add	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc78:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <UART_SetConfig+0x118>)
 800cc7a:	fba3 0302 	umull	r0, r3, r3, r2
 800cc7e:	095b      	lsrs	r3, r3, #5
 800cc80:	2064      	movs	r0, #100	; 0x64
 800cc82:	fb00 f303 	mul.w	r3, r0, r3
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	011b      	lsls	r3, r3, #4
 800cc8a:	3332      	adds	r3, #50	; 0x32
 800cc8c:	4a07      	ldr	r2, [pc, #28]	; (800ccac <UART_SetConfig+0x118>)
 800cc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc92:	095b      	lsrs	r3, r3, #5
 800cc94:	f003 020f 	and.w	r2, r3, #15
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	440a      	add	r2, r1
 800cc9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cca0:	bf00      	nop
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	40013800 	.word	0x40013800
 800ccac:	51eb851f 	.word	0x51eb851f

0800ccb0 <__itoa>:
 800ccb0:	1e93      	subs	r3, r2, #2
 800ccb2:	2b22      	cmp	r3, #34	; 0x22
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	d904      	bls.n	800ccc4 <__itoa+0x14>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	461c      	mov	r4, r3
 800ccbe:	700b      	strb	r3, [r1, #0]
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bd10      	pop	{r4, pc}
 800ccc4:	2a0a      	cmp	r2, #10
 800ccc6:	d109      	bne.n	800ccdc <__itoa+0x2c>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	da07      	bge.n	800ccdc <__itoa+0x2c>
 800cccc:	232d      	movs	r3, #45	; 0x2d
 800ccce:	700b      	strb	r3, [r1, #0]
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	4240      	negs	r0, r0
 800ccd4:	4421      	add	r1, r4
 800ccd6:	f000 f8b9 	bl	800ce4c <__utoa>
 800ccda:	e7f1      	b.n	800ccc0 <__itoa+0x10>
 800ccdc:	2100      	movs	r1, #0
 800ccde:	e7f9      	b.n	800ccd4 <__itoa+0x24>

0800cce0 <itoa>:
 800cce0:	f7ff bfe6 	b.w	800ccb0 <__itoa>

0800cce4 <malloc>:
 800cce4:	4b02      	ldr	r3, [pc, #8]	; (800ccf0 <malloc+0xc>)
 800cce6:	4601      	mov	r1, r0
 800cce8:	6818      	ldr	r0, [r3, #0]
 800ccea:	f000 b823 	b.w	800cd34 <_malloc_r>
 800ccee:	bf00      	nop
 800ccf0:	20000a0c 	.word	0x20000a0c

0800ccf4 <sbrk_aligned>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4e0e      	ldr	r6, [pc, #56]	; (800cd30 <sbrk_aligned+0x3c>)
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	6831      	ldr	r1, [r6, #0]
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	b911      	cbnz	r1, 800cd06 <sbrk_aligned+0x12>
 800cd00:	f000 f91e 	bl	800cf40 <_sbrk_r>
 800cd04:	6030      	str	r0, [r6, #0]
 800cd06:	4621      	mov	r1, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f000 f919 	bl	800cf40 <_sbrk_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d00a      	beq.n	800cd28 <sbrk_aligned+0x34>
 800cd12:	1cc4      	adds	r4, r0, #3
 800cd14:	f024 0403 	bic.w	r4, r4, #3
 800cd18:	42a0      	cmp	r0, r4
 800cd1a:	d007      	beq.n	800cd2c <sbrk_aligned+0x38>
 800cd1c:	1a21      	subs	r1, r4, r0
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 f90e 	bl	800cf40 <_sbrk_r>
 800cd24:	3001      	adds	r0, #1
 800cd26:	d101      	bne.n	800cd2c <sbrk_aligned+0x38>
 800cd28:	f04f 34ff 	mov.w	r4, #4294967295
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	bd70      	pop	{r4, r5, r6, pc}
 800cd30:	20000ee8 	.word	0x20000ee8

0800cd34 <_malloc_r>:
 800cd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd38:	1ccd      	adds	r5, r1, #3
 800cd3a:	f025 0503 	bic.w	r5, r5, #3
 800cd3e:	3508      	adds	r5, #8
 800cd40:	2d0c      	cmp	r5, #12
 800cd42:	bf38      	it	cc
 800cd44:	250c      	movcc	r5, #12
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	4607      	mov	r7, r0
 800cd4a:	db01      	blt.n	800cd50 <_malloc_r+0x1c>
 800cd4c:	42a9      	cmp	r1, r5
 800cd4e:	d905      	bls.n	800cd5c <_malloc_r+0x28>
 800cd50:	230c      	movs	r3, #12
 800cd52:	2600      	movs	r6, #0
 800cd54:	603b      	str	r3, [r7, #0]
 800cd56:	4630      	mov	r0, r6
 800cd58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce30 <_malloc_r+0xfc>
 800cd60:	f000 f868 	bl	800ce34 <__malloc_lock>
 800cd64:	f8d8 3000 	ldr.w	r3, [r8]
 800cd68:	461c      	mov	r4, r3
 800cd6a:	bb5c      	cbnz	r4, 800cdc4 <_malloc_r+0x90>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4638      	mov	r0, r7
 800cd70:	f7ff ffc0 	bl	800ccf4 <sbrk_aligned>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	4604      	mov	r4, r0
 800cd78:	d155      	bne.n	800ce26 <_malloc_r+0xf2>
 800cd7a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd7e:	4626      	mov	r6, r4
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	d145      	bne.n	800ce10 <_malloc_r+0xdc>
 800cd84:	2c00      	cmp	r4, #0
 800cd86:	d048      	beq.n	800ce1a <_malloc_r+0xe6>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	eb04 0903 	add.w	r9, r4, r3
 800cd92:	f000 f8d5 	bl	800cf40 <_sbrk_r>
 800cd96:	4581      	cmp	r9, r0
 800cd98:	d13f      	bne.n	800ce1a <_malloc_r+0xe6>
 800cd9a:	6821      	ldr	r1, [r4, #0]
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	1a6d      	subs	r5, r5, r1
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7ff ffa7 	bl	800ccf4 <sbrk_aligned>
 800cda6:	3001      	adds	r0, #1
 800cda8:	d037      	beq.n	800ce1a <_malloc_r+0xe6>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	442b      	add	r3, r5
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d038      	beq.n	800ce2a <_malloc_r+0xf6>
 800cdb8:	685a      	ldr	r2, [r3, #4]
 800cdba:	42a2      	cmp	r2, r4
 800cdbc:	d12b      	bne.n	800ce16 <_malloc_r+0xe2>
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	605a      	str	r2, [r3, #4]
 800cdc2:	e00f      	b.n	800cde4 <_malloc_r+0xb0>
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	1b52      	subs	r2, r2, r5
 800cdc8:	d41f      	bmi.n	800ce0a <_malloc_r+0xd6>
 800cdca:	2a0b      	cmp	r2, #11
 800cdcc:	d917      	bls.n	800cdfe <_malloc_r+0xca>
 800cdce:	1961      	adds	r1, r4, r5
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	6025      	str	r5, [r4, #0]
 800cdd4:	bf18      	it	ne
 800cdd6:	6059      	strne	r1, [r3, #4]
 800cdd8:	6863      	ldr	r3, [r4, #4]
 800cdda:	bf08      	it	eq
 800cddc:	f8c8 1000 	streq.w	r1, [r8]
 800cde0:	5162      	str	r2, [r4, r5]
 800cde2:	604b      	str	r3, [r1, #4]
 800cde4:	4638      	mov	r0, r7
 800cde6:	f104 060b 	add.w	r6, r4, #11
 800cdea:	f000 f829 	bl	800ce40 <__malloc_unlock>
 800cdee:	f026 0607 	bic.w	r6, r6, #7
 800cdf2:	1d23      	adds	r3, r4, #4
 800cdf4:	1af2      	subs	r2, r6, r3
 800cdf6:	d0ae      	beq.n	800cd56 <_malloc_r+0x22>
 800cdf8:	1b9b      	subs	r3, r3, r6
 800cdfa:	50a3      	str	r3, [r4, r2]
 800cdfc:	e7ab      	b.n	800cd56 <_malloc_r+0x22>
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	6862      	ldr	r2, [r4, #4]
 800ce02:	d1dd      	bne.n	800cdc0 <_malloc_r+0x8c>
 800ce04:	f8c8 2000 	str.w	r2, [r8]
 800ce08:	e7ec      	b.n	800cde4 <_malloc_r+0xb0>
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	6864      	ldr	r4, [r4, #4]
 800ce0e:	e7ac      	b.n	800cd6a <_malloc_r+0x36>
 800ce10:	4634      	mov	r4, r6
 800ce12:	6876      	ldr	r6, [r6, #4]
 800ce14:	e7b4      	b.n	800cd80 <_malloc_r+0x4c>
 800ce16:	4613      	mov	r3, r2
 800ce18:	e7cc      	b.n	800cdb4 <_malloc_r+0x80>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	f000 f80e 	bl	800ce40 <__malloc_unlock>
 800ce24:	e797      	b.n	800cd56 <_malloc_r+0x22>
 800ce26:	6025      	str	r5, [r4, #0]
 800ce28:	e7dc      	b.n	800cde4 <_malloc_r+0xb0>
 800ce2a:	605b      	str	r3, [r3, #4]
 800ce2c:	deff      	udf	#255	; 0xff
 800ce2e:	bf00      	nop
 800ce30:	20000ee4 	.word	0x20000ee4

0800ce34 <__malloc_lock>:
 800ce34:	4801      	ldr	r0, [pc, #4]	; (800ce3c <__malloc_lock+0x8>)
 800ce36:	f000 b8bd 	b.w	800cfb4 <__retarget_lock_acquire_recursive>
 800ce3a:	bf00      	nop
 800ce3c:	20001028 	.word	0x20001028

0800ce40 <__malloc_unlock>:
 800ce40:	4801      	ldr	r0, [pc, #4]	; (800ce48 <__malloc_unlock+0x8>)
 800ce42:	f000 b8b8 	b.w	800cfb6 <__retarget_lock_release_recursive>
 800ce46:	bf00      	nop
 800ce48:	20001028 	.word	0x20001028

0800ce4c <__utoa>:
 800ce4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce4e:	b08b      	sub	sp, #44	; 0x2c
 800ce50:	4605      	mov	r5, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	466e      	mov	r6, sp
 800ce56:	4c1d      	ldr	r4, [pc, #116]	; (800cecc <__utoa+0x80>)
 800ce58:	f104 0c20 	add.w	ip, r4, #32
 800ce5c:	4637      	mov	r7, r6
 800ce5e:	6820      	ldr	r0, [r4, #0]
 800ce60:	6861      	ldr	r1, [r4, #4]
 800ce62:	3408      	adds	r4, #8
 800ce64:	c703      	stmia	r7!, {r0, r1}
 800ce66:	4564      	cmp	r4, ip
 800ce68:	463e      	mov	r6, r7
 800ce6a:	d1f7      	bne.n	800ce5c <__utoa+0x10>
 800ce6c:	7921      	ldrb	r1, [r4, #4]
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	7139      	strb	r1, [r7, #4]
 800ce72:	1e91      	subs	r1, r2, #2
 800ce74:	2922      	cmp	r1, #34	; 0x22
 800ce76:	6038      	str	r0, [r7, #0]
 800ce78:	f04f 0100 	mov.w	r1, #0
 800ce7c:	d904      	bls.n	800ce88 <__utoa+0x3c>
 800ce7e:	7019      	strb	r1, [r3, #0]
 800ce80:	460b      	mov	r3, r1
 800ce82:	4618      	mov	r0, r3
 800ce84:	b00b      	add	sp, #44	; 0x2c
 800ce86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce88:	1e58      	subs	r0, r3, #1
 800ce8a:	4684      	mov	ip, r0
 800ce8c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce90:	fb02 5617 	mls	r6, r2, r7, r5
 800ce94:	3628      	adds	r6, #40	; 0x28
 800ce96:	446e      	add	r6, sp
 800ce98:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cea2:	462e      	mov	r6, r5
 800cea4:	42b2      	cmp	r2, r6
 800cea6:	463d      	mov	r5, r7
 800cea8:	f101 0101 	add.w	r1, r1, #1
 800ceac:	d9ee      	bls.n	800ce8c <__utoa+0x40>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	545a      	strb	r2, [r3, r1]
 800ceb2:	1919      	adds	r1, r3, r4
 800ceb4:	1aa5      	subs	r5, r4, r2
 800ceb6:	42aa      	cmp	r2, r5
 800ceb8:	dae3      	bge.n	800ce82 <__utoa+0x36>
 800ceba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cebe:	780e      	ldrb	r6, [r1, #0]
 800cec0:	3201      	adds	r2, #1
 800cec2:	7006      	strb	r6, [r0, #0]
 800cec4:	f801 5901 	strb.w	r5, [r1], #-1
 800cec8:	e7f4      	b.n	800ceb4 <__utoa+0x68>
 800ceca:	bf00      	nop
 800cecc:	0800e5ce 	.word	0x0800e5ce

0800ced0 <siprintf>:
 800ced0:	b40e      	push	{r1, r2, r3}
 800ced2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ced6:	b500      	push	{lr}
 800ced8:	b09c      	sub	sp, #112	; 0x70
 800ceda:	ab1d      	add	r3, sp, #116	; 0x74
 800cedc:	9002      	str	r0, [sp, #8]
 800cede:	9006      	str	r0, [sp, #24]
 800cee0:	9107      	str	r1, [sp, #28]
 800cee2:	9104      	str	r1, [sp, #16]
 800cee4:	4808      	ldr	r0, [pc, #32]	; (800cf08 <siprintf+0x38>)
 800cee6:	4909      	ldr	r1, [pc, #36]	; (800cf0c <siprintf+0x3c>)
 800cee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceec:	9105      	str	r1, [sp, #20]
 800ceee:	6800      	ldr	r0, [r0, #0]
 800cef0:	a902      	add	r1, sp, #8
 800cef2:	9301      	str	r3, [sp, #4]
 800cef4:	f000 f90a 	bl	800d10c <_svfiprintf_r>
 800cef8:	2200      	movs	r2, #0
 800cefa:	9b02      	ldr	r3, [sp, #8]
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	b01c      	add	sp, #112	; 0x70
 800cf00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf04:	b003      	add	sp, #12
 800cf06:	4770      	bx	lr
 800cf08:	20000a0c 	.word	0x20000a0c
 800cf0c:	ffff0208 	.word	0xffff0208

0800cf10 <memset>:
 800cf10:	4603      	mov	r3, r0
 800cf12:	4402      	add	r2, r0
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d100      	bne.n	800cf1a <memset+0xa>
 800cf18:	4770      	bx	lr
 800cf1a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf1e:	e7f9      	b.n	800cf14 <memset+0x4>

0800cf20 <strcat>:
 800cf20:	4602      	mov	r2, r0
 800cf22:	b510      	push	{r4, lr}
 800cf24:	7814      	ldrb	r4, [r2, #0]
 800cf26:	4613      	mov	r3, r2
 800cf28:	3201      	adds	r2, #1
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d1fa      	bne.n	800cf24 <strcat+0x4>
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf38:	2a00      	cmp	r2, #0
 800cf3a:	d1f9      	bne.n	800cf30 <strcat+0x10>
 800cf3c:	bd10      	pop	{r4, pc}
	...

0800cf40 <_sbrk_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	2300      	movs	r3, #0
 800cf44:	4d05      	ldr	r5, [pc, #20]	; (800cf5c <_sbrk_r+0x1c>)
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	602b      	str	r3, [r5, #0]
 800cf4c:	f7fc f808 	bl	8008f60 <_sbrk>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_sbrk_r+0x1a>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_sbrk_r+0x1a>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	20001024 	.word	0x20001024

0800cf60 <__errno>:
 800cf60:	4b01      	ldr	r3, [pc, #4]	; (800cf68 <__errno+0x8>)
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	20000a0c 	.word	0x20000a0c

0800cf6c <__libc_init_array>:
 800cf6c:	b570      	push	{r4, r5, r6, lr}
 800cf6e:	2600      	movs	r6, #0
 800cf70:	4d0c      	ldr	r5, [pc, #48]	; (800cfa4 <__libc_init_array+0x38>)
 800cf72:	4c0d      	ldr	r4, [pc, #52]	; (800cfa8 <__libc_init_array+0x3c>)
 800cf74:	1b64      	subs	r4, r4, r5
 800cf76:	10a4      	asrs	r4, r4, #2
 800cf78:	42a6      	cmp	r6, r4
 800cf7a:	d109      	bne.n	800cf90 <__libc_init_array+0x24>
 800cf7c:	f000 fbc6 	bl	800d70c <_init>
 800cf80:	2600      	movs	r6, #0
 800cf82:	4d0a      	ldr	r5, [pc, #40]	; (800cfac <__libc_init_array+0x40>)
 800cf84:	4c0a      	ldr	r4, [pc, #40]	; (800cfb0 <__libc_init_array+0x44>)
 800cf86:	1b64      	subs	r4, r4, r5
 800cf88:	10a4      	asrs	r4, r4, #2
 800cf8a:	42a6      	cmp	r6, r4
 800cf8c:	d105      	bne.n	800cf9a <__libc_init_array+0x2e>
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf94:	4798      	blx	r3
 800cf96:	3601      	adds	r6, #1
 800cf98:	e7ee      	b.n	800cf78 <__libc_init_array+0xc>
 800cf9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf9e:	4798      	blx	r3
 800cfa0:	3601      	adds	r6, #1
 800cfa2:	e7f2      	b.n	800cf8a <__libc_init_array+0x1e>
 800cfa4:	0800e628 	.word	0x0800e628
 800cfa8:	0800e628 	.word	0x0800e628
 800cfac:	0800e628 	.word	0x0800e628
 800cfb0:	0800e62c 	.word	0x0800e62c

0800cfb4 <__retarget_lock_acquire_recursive>:
 800cfb4:	4770      	bx	lr

0800cfb6 <__retarget_lock_release_recursive>:
 800cfb6:	4770      	bx	lr

0800cfb8 <strcpy>:
 800cfb8:	4603      	mov	r3, r0
 800cfba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfbe:	f803 2b01 	strb.w	r2, [r3], #1
 800cfc2:	2a00      	cmp	r2, #0
 800cfc4:	d1f9      	bne.n	800cfba <strcpy+0x2>
 800cfc6:	4770      	bx	lr

0800cfc8 <_free_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4605      	mov	r5, r0
 800cfcc:	2900      	cmp	r1, #0
 800cfce:	d040      	beq.n	800d052 <_free_r+0x8a>
 800cfd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd4:	1f0c      	subs	r4, r1, #4
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	bfb8      	it	lt
 800cfda:	18e4      	addlt	r4, r4, r3
 800cfdc:	f7ff ff2a 	bl	800ce34 <__malloc_lock>
 800cfe0:	4a1c      	ldr	r2, [pc, #112]	; (800d054 <_free_r+0x8c>)
 800cfe2:	6813      	ldr	r3, [r2, #0]
 800cfe4:	b933      	cbnz	r3, 800cff4 <_free_r+0x2c>
 800cfe6:	6063      	str	r3, [r4, #4]
 800cfe8:	6014      	str	r4, [r2, #0]
 800cfea:	4628      	mov	r0, r5
 800cfec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff0:	f7ff bf26 	b.w	800ce40 <__malloc_unlock>
 800cff4:	42a3      	cmp	r3, r4
 800cff6:	d908      	bls.n	800d00a <_free_r+0x42>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	1821      	adds	r1, r4, r0
 800cffc:	428b      	cmp	r3, r1
 800cffe:	bf01      	itttt	eq
 800d000:	6819      	ldreq	r1, [r3, #0]
 800d002:	685b      	ldreq	r3, [r3, #4]
 800d004:	1809      	addeq	r1, r1, r0
 800d006:	6021      	streq	r1, [r4, #0]
 800d008:	e7ed      	b.n	800cfe6 <_free_r+0x1e>
 800d00a:	461a      	mov	r2, r3
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	b10b      	cbz	r3, 800d014 <_free_r+0x4c>
 800d010:	42a3      	cmp	r3, r4
 800d012:	d9fa      	bls.n	800d00a <_free_r+0x42>
 800d014:	6811      	ldr	r1, [r2, #0]
 800d016:	1850      	adds	r0, r2, r1
 800d018:	42a0      	cmp	r0, r4
 800d01a:	d10b      	bne.n	800d034 <_free_r+0x6c>
 800d01c:	6820      	ldr	r0, [r4, #0]
 800d01e:	4401      	add	r1, r0
 800d020:	1850      	adds	r0, r2, r1
 800d022:	4283      	cmp	r3, r0
 800d024:	6011      	str	r1, [r2, #0]
 800d026:	d1e0      	bne.n	800cfea <_free_r+0x22>
 800d028:	6818      	ldr	r0, [r3, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	4408      	add	r0, r1
 800d02e:	6010      	str	r0, [r2, #0]
 800d030:	6053      	str	r3, [r2, #4]
 800d032:	e7da      	b.n	800cfea <_free_r+0x22>
 800d034:	d902      	bls.n	800d03c <_free_r+0x74>
 800d036:	230c      	movs	r3, #12
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	e7d6      	b.n	800cfea <_free_r+0x22>
 800d03c:	6820      	ldr	r0, [r4, #0]
 800d03e:	1821      	adds	r1, r4, r0
 800d040:	428b      	cmp	r3, r1
 800d042:	bf01      	itttt	eq
 800d044:	6819      	ldreq	r1, [r3, #0]
 800d046:	685b      	ldreq	r3, [r3, #4]
 800d048:	1809      	addeq	r1, r1, r0
 800d04a:	6021      	streq	r1, [r4, #0]
 800d04c:	6063      	str	r3, [r4, #4]
 800d04e:	6054      	str	r4, [r2, #4]
 800d050:	e7cb      	b.n	800cfea <_free_r+0x22>
 800d052:	bd38      	pop	{r3, r4, r5, pc}
 800d054:	20000ee4 	.word	0x20000ee4

0800d058 <__ssputs_r>:
 800d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d05c:	461f      	mov	r7, r3
 800d05e:	688e      	ldr	r6, [r1, #8]
 800d060:	4682      	mov	sl, r0
 800d062:	42be      	cmp	r6, r7
 800d064:	460c      	mov	r4, r1
 800d066:	4690      	mov	r8, r2
 800d068:	680b      	ldr	r3, [r1, #0]
 800d06a:	d82c      	bhi.n	800d0c6 <__ssputs_r+0x6e>
 800d06c:	898a      	ldrh	r2, [r1, #12]
 800d06e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d072:	d026      	beq.n	800d0c2 <__ssputs_r+0x6a>
 800d074:	6965      	ldr	r5, [r4, #20]
 800d076:	6909      	ldr	r1, [r1, #16]
 800d078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d07c:	eba3 0901 	sub.w	r9, r3, r1
 800d080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d084:	1c7b      	adds	r3, r7, #1
 800d086:	444b      	add	r3, r9
 800d088:	106d      	asrs	r5, r5, #1
 800d08a:	429d      	cmp	r5, r3
 800d08c:	bf38      	it	cc
 800d08e:	461d      	movcc	r5, r3
 800d090:	0553      	lsls	r3, r2, #21
 800d092:	d527      	bpl.n	800d0e4 <__ssputs_r+0x8c>
 800d094:	4629      	mov	r1, r5
 800d096:	f7ff fe4d 	bl	800cd34 <_malloc_r>
 800d09a:	4606      	mov	r6, r0
 800d09c:	b360      	cbz	r0, 800d0f8 <__ssputs_r+0xa0>
 800d09e:	464a      	mov	r2, r9
 800d0a0:	6921      	ldr	r1, [r4, #16]
 800d0a2:	f000 faed 	bl	800d680 <memcpy>
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	6126      	str	r6, [r4, #16]
 800d0b4:	444e      	add	r6, r9
 800d0b6:	6026      	str	r6, [r4, #0]
 800d0b8:	463e      	mov	r6, r7
 800d0ba:	6165      	str	r5, [r4, #20]
 800d0bc:	eba5 0509 	sub.w	r5, r5, r9
 800d0c0:	60a5      	str	r5, [r4, #8]
 800d0c2:	42be      	cmp	r6, r7
 800d0c4:	d900      	bls.n	800d0c8 <__ssputs_r+0x70>
 800d0c6:	463e      	mov	r6, r7
 800d0c8:	4632      	mov	r2, r6
 800d0ca:	4641      	mov	r1, r8
 800d0cc:	6820      	ldr	r0, [r4, #0]
 800d0ce:	f000 faaf 	bl	800d630 <memmove>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	68a3      	ldr	r3, [r4, #8]
 800d0d6:	1b9b      	subs	r3, r3, r6
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	4433      	add	r3, r6
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	f000 fad9 	bl	800d69c <_realloc_r>
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d1e0      	bne.n	800d0b2 <__ssputs_r+0x5a>
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	6921      	ldr	r1, [r4, #16]
 800d0f4:	f7ff ff68 	bl	800cfc8 <_free_r>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	f8ca 3000 	str.w	r3, [sl]
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	e7e9      	b.n	800d0e0 <__ssputs_r+0x88>

0800d10c <_svfiprintf_r>:
 800d10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d110:	4698      	mov	r8, r3
 800d112:	898b      	ldrh	r3, [r1, #12]
 800d114:	4607      	mov	r7, r0
 800d116:	061b      	lsls	r3, r3, #24
 800d118:	460d      	mov	r5, r1
 800d11a:	4614      	mov	r4, r2
 800d11c:	b09d      	sub	sp, #116	; 0x74
 800d11e:	d50e      	bpl.n	800d13e <_svfiprintf_r+0x32>
 800d120:	690b      	ldr	r3, [r1, #16]
 800d122:	b963      	cbnz	r3, 800d13e <_svfiprintf_r+0x32>
 800d124:	2140      	movs	r1, #64	; 0x40
 800d126:	f7ff fe05 	bl	800cd34 <_malloc_r>
 800d12a:	6028      	str	r0, [r5, #0]
 800d12c:	6128      	str	r0, [r5, #16]
 800d12e:	b920      	cbnz	r0, 800d13a <_svfiprintf_r+0x2e>
 800d130:	230c      	movs	r3, #12
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	e0d0      	b.n	800d2dc <_svfiprintf_r+0x1d0>
 800d13a:	2340      	movs	r3, #64	; 0x40
 800d13c:	616b      	str	r3, [r5, #20]
 800d13e:	2300      	movs	r3, #0
 800d140:	9309      	str	r3, [sp, #36]	; 0x24
 800d142:	2320      	movs	r3, #32
 800d144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d148:	2330      	movs	r3, #48	; 0x30
 800d14a:	f04f 0901 	mov.w	r9, #1
 800d14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d152:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d2f4 <_svfiprintf_r+0x1e8>
 800d156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d15a:	4623      	mov	r3, r4
 800d15c:	469a      	mov	sl, r3
 800d15e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d162:	b10a      	cbz	r2, 800d168 <_svfiprintf_r+0x5c>
 800d164:	2a25      	cmp	r2, #37	; 0x25
 800d166:	d1f9      	bne.n	800d15c <_svfiprintf_r+0x50>
 800d168:	ebba 0b04 	subs.w	fp, sl, r4
 800d16c:	d00b      	beq.n	800d186 <_svfiprintf_r+0x7a>
 800d16e:	465b      	mov	r3, fp
 800d170:	4622      	mov	r2, r4
 800d172:	4629      	mov	r1, r5
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ff6f 	bl	800d058 <__ssputs_r>
 800d17a:	3001      	adds	r0, #1
 800d17c:	f000 80a9 	beq.w	800d2d2 <_svfiprintf_r+0x1c6>
 800d180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d182:	445a      	add	r2, fp
 800d184:	9209      	str	r2, [sp, #36]	; 0x24
 800d186:	f89a 3000 	ldrb.w	r3, [sl]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 80a1 	beq.w	800d2d2 <_svfiprintf_r+0x1c6>
 800d190:	2300      	movs	r3, #0
 800d192:	f04f 32ff 	mov.w	r2, #4294967295
 800d196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d19a:	f10a 0a01 	add.w	sl, sl, #1
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	9307      	str	r3, [sp, #28]
 800d1a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1a6:	931a      	str	r3, [sp, #104]	; 0x68
 800d1a8:	4654      	mov	r4, sl
 800d1aa:	2205      	movs	r2, #5
 800d1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b0:	4850      	ldr	r0, [pc, #320]	; (800d2f4 <_svfiprintf_r+0x1e8>)
 800d1b2:	f000 fa57 	bl	800d664 <memchr>
 800d1b6:	9a04      	ldr	r2, [sp, #16]
 800d1b8:	b9d8      	cbnz	r0, 800d1f2 <_svfiprintf_r+0xe6>
 800d1ba:	06d0      	lsls	r0, r2, #27
 800d1bc:	bf44      	itt	mi
 800d1be:	2320      	movmi	r3, #32
 800d1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c4:	0711      	lsls	r1, r2, #28
 800d1c6:	bf44      	itt	mi
 800d1c8:	232b      	movmi	r3, #43	; 0x2b
 800d1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1d4:	d015      	beq.n	800d202 <_svfiprintf_r+0xf6>
 800d1d6:	4654      	mov	r4, sl
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f04f 0c0a 	mov.w	ip, #10
 800d1de:	9a07      	ldr	r2, [sp, #28]
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e6:	3b30      	subs	r3, #48	; 0x30
 800d1e8:	2b09      	cmp	r3, #9
 800d1ea:	d94d      	bls.n	800d288 <_svfiprintf_r+0x17c>
 800d1ec:	b1b0      	cbz	r0, 800d21c <_svfiprintf_r+0x110>
 800d1ee:	9207      	str	r2, [sp, #28]
 800d1f0:	e014      	b.n	800d21c <_svfiprintf_r+0x110>
 800d1f2:	eba0 0308 	sub.w	r3, r0, r8
 800d1f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	46a2      	mov	sl, r4
 800d1fe:	9304      	str	r3, [sp, #16]
 800d200:	e7d2      	b.n	800d1a8 <_svfiprintf_r+0x9c>
 800d202:	9b03      	ldr	r3, [sp, #12]
 800d204:	1d19      	adds	r1, r3, #4
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	9103      	str	r1, [sp, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	bfbb      	ittet	lt
 800d20e:	425b      	neglt	r3, r3
 800d210:	f042 0202 	orrlt.w	r2, r2, #2
 800d214:	9307      	strge	r3, [sp, #28]
 800d216:	9307      	strlt	r3, [sp, #28]
 800d218:	bfb8      	it	lt
 800d21a:	9204      	strlt	r2, [sp, #16]
 800d21c:	7823      	ldrb	r3, [r4, #0]
 800d21e:	2b2e      	cmp	r3, #46	; 0x2e
 800d220:	d10c      	bne.n	800d23c <_svfiprintf_r+0x130>
 800d222:	7863      	ldrb	r3, [r4, #1]
 800d224:	2b2a      	cmp	r3, #42	; 0x2a
 800d226:	d134      	bne.n	800d292 <_svfiprintf_r+0x186>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	3402      	adds	r4, #2
 800d22c:	1d1a      	adds	r2, r3, #4
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	9203      	str	r2, [sp, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	bfb8      	it	lt
 800d236:	f04f 33ff 	movlt.w	r3, #4294967295
 800d23a:	9305      	str	r3, [sp, #20]
 800d23c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d2f8 <_svfiprintf_r+0x1ec>
 800d240:	2203      	movs	r2, #3
 800d242:	4650      	mov	r0, sl
 800d244:	7821      	ldrb	r1, [r4, #0]
 800d246:	f000 fa0d 	bl	800d664 <memchr>
 800d24a:	b138      	cbz	r0, 800d25c <_svfiprintf_r+0x150>
 800d24c:	2240      	movs	r2, #64	; 0x40
 800d24e:	9b04      	ldr	r3, [sp, #16]
 800d250:	eba0 000a 	sub.w	r0, r0, sl
 800d254:	4082      	lsls	r2, r0
 800d256:	4313      	orrs	r3, r2
 800d258:	3401      	adds	r4, #1
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d260:	2206      	movs	r2, #6
 800d262:	4826      	ldr	r0, [pc, #152]	; (800d2fc <_svfiprintf_r+0x1f0>)
 800d264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d268:	f000 f9fc 	bl	800d664 <memchr>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d038      	beq.n	800d2e2 <_svfiprintf_r+0x1d6>
 800d270:	4b23      	ldr	r3, [pc, #140]	; (800d300 <_svfiprintf_r+0x1f4>)
 800d272:	bb1b      	cbnz	r3, 800d2bc <_svfiprintf_r+0x1b0>
 800d274:	9b03      	ldr	r3, [sp, #12]
 800d276:	3307      	adds	r3, #7
 800d278:	f023 0307 	bic.w	r3, r3, #7
 800d27c:	3308      	adds	r3, #8
 800d27e:	9303      	str	r3, [sp, #12]
 800d280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d282:	4433      	add	r3, r6
 800d284:	9309      	str	r3, [sp, #36]	; 0x24
 800d286:	e768      	b.n	800d15a <_svfiprintf_r+0x4e>
 800d288:	460c      	mov	r4, r1
 800d28a:	2001      	movs	r0, #1
 800d28c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d290:	e7a6      	b.n	800d1e0 <_svfiprintf_r+0xd4>
 800d292:	2300      	movs	r3, #0
 800d294:	f04f 0c0a 	mov.w	ip, #10
 800d298:	4619      	mov	r1, r3
 800d29a:	3401      	adds	r4, #1
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a4:	3a30      	subs	r2, #48	; 0x30
 800d2a6:	2a09      	cmp	r2, #9
 800d2a8:	d903      	bls.n	800d2b2 <_svfiprintf_r+0x1a6>
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0c6      	beq.n	800d23c <_svfiprintf_r+0x130>
 800d2ae:	9105      	str	r1, [sp, #20]
 800d2b0:	e7c4      	b.n	800d23c <_svfiprintf_r+0x130>
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ba:	e7f0      	b.n	800d29e <_svfiprintf_r+0x192>
 800d2bc:	ab03      	add	r3, sp, #12
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	462a      	mov	r2, r5
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <_svfiprintf_r+0x1f8>)
 800d2c6:	a904      	add	r1, sp, #16
 800d2c8:	f3af 8000 	nop.w
 800d2cc:	1c42      	adds	r2, r0, #1
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	d1d6      	bne.n	800d280 <_svfiprintf_r+0x174>
 800d2d2:	89ab      	ldrh	r3, [r5, #12]
 800d2d4:	065b      	lsls	r3, r3, #25
 800d2d6:	f53f af2d 	bmi.w	800d134 <_svfiprintf_r+0x28>
 800d2da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2dc:	b01d      	add	sp, #116	; 0x74
 800d2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e2:	ab03      	add	r3, sp, #12
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	4b06      	ldr	r3, [pc, #24]	; (800d304 <_svfiprintf_r+0x1f8>)
 800d2ec:	a904      	add	r1, sp, #16
 800d2ee:	f000 f87d 	bl	800d3ec <_printf_i>
 800d2f2:	e7eb      	b.n	800d2cc <_svfiprintf_r+0x1c0>
 800d2f4:	0800e5f3 	.word	0x0800e5f3
 800d2f8:	0800e5f9 	.word	0x0800e5f9
 800d2fc:	0800e5fd 	.word	0x0800e5fd
 800d300:	00000000 	.word	0x00000000
 800d304:	0800d059 	.word	0x0800d059

0800d308 <_printf_common>:
 800d308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d30c:	4616      	mov	r6, r2
 800d30e:	4699      	mov	r9, r3
 800d310:	688a      	ldr	r2, [r1, #8]
 800d312:	690b      	ldr	r3, [r1, #16]
 800d314:	4607      	mov	r7, r0
 800d316:	4293      	cmp	r3, r2
 800d318:	bfb8      	it	lt
 800d31a:	4613      	movlt	r3, r2
 800d31c:	6033      	str	r3, [r6, #0]
 800d31e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d322:	460c      	mov	r4, r1
 800d324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d328:	b10a      	cbz	r2, 800d32e <_printf_common+0x26>
 800d32a:	3301      	adds	r3, #1
 800d32c:	6033      	str	r3, [r6, #0]
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	0699      	lsls	r1, r3, #26
 800d332:	bf42      	ittt	mi
 800d334:	6833      	ldrmi	r3, [r6, #0]
 800d336:	3302      	addmi	r3, #2
 800d338:	6033      	strmi	r3, [r6, #0]
 800d33a:	6825      	ldr	r5, [r4, #0]
 800d33c:	f015 0506 	ands.w	r5, r5, #6
 800d340:	d106      	bne.n	800d350 <_printf_common+0x48>
 800d342:	f104 0a19 	add.w	sl, r4, #25
 800d346:	68e3      	ldr	r3, [r4, #12]
 800d348:	6832      	ldr	r2, [r6, #0]
 800d34a:	1a9b      	subs	r3, r3, r2
 800d34c:	42ab      	cmp	r3, r5
 800d34e:	dc2b      	bgt.n	800d3a8 <_printf_common+0xa0>
 800d350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d354:	1e13      	subs	r3, r2, #0
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	bf18      	it	ne
 800d35a:	2301      	movne	r3, #1
 800d35c:	0692      	lsls	r2, r2, #26
 800d35e:	d430      	bmi.n	800d3c2 <_printf_common+0xba>
 800d360:	4649      	mov	r1, r9
 800d362:	4638      	mov	r0, r7
 800d364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d368:	47c0      	blx	r8
 800d36a:	3001      	adds	r0, #1
 800d36c:	d023      	beq.n	800d3b6 <_printf_common+0xae>
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	6922      	ldr	r2, [r4, #16]
 800d372:	f003 0306 	and.w	r3, r3, #6
 800d376:	2b04      	cmp	r3, #4
 800d378:	bf14      	ite	ne
 800d37a:	2500      	movne	r5, #0
 800d37c:	6833      	ldreq	r3, [r6, #0]
 800d37e:	f04f 0600 	mov.w	r6, #0
 800d382:	bf08      	it	eq
 800d384:	68e5      	ldreq	r5, [r4, #12]
 800d386:	f104 041a 	add.w	r4, r4, #26
 800d38a:	bf08      	it	eq
 800d38c:	1aed      	subeq	r5, r5, r3
 800d38e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d392:	bf08      	it	eq
 800d394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d398:	4293      	cmp	r3, r2
 800d39a:	bfc4      	itt	gt
 800d39c:	1a9b      	subgt	r3, r3, r2
 800d39e:	18ed      	addgt	r5, r5, r3
 800d3a0:	42b5      	cmp	r5, r6
 800d3a2:	d11a      	bne.n	800d3da <_printf_common+0xd2>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	e008      	b.n	800d3ba <_printf_common+0xb2>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4652      	mov	r2, sl
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	47c0      	blx	r8
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	d103      	bne.n	800d3be <_printf_common+0xb6>
 800d3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3be:	3501      	adds	r5, #1
 800d3c0:	e7c1      	b.n	800d346 <_printf_common+0x3e>
 800d3c2:	2030      	movs	r0, #48	; 0x30
 800d3c4:	18e1      	adds	r1, r4, r3
 800d3c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3ca:	1c5a      	adds	r2, r3, #1
 800d3cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3d0:	4422      	add	r2, r4
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3d8:	e7c2      	b.n	800d360 <_printf_common+0x58>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	4622      	mov	r2, r4
 800d3de:	4649      	mov	r1, r9
 800d3e0:	4638      	mov	r0, r7
 800d3e2:	47c0      	blx	r8
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	d0e6      	beq.n	800d3b6 <_printf_common+0xae>
 800d3e8:	3601      	adds	r6, #1
 800d3ea:	e7d9      	b.n	800d3a0 <_printf_common+0x98>

0800d3ec <_printf_i>:
 800d3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f0:	7e0f      	ldrb	r7, [r1, #24]
 800d3f2:	4691      	mov	r9, r2
 800d3f4:	2f78      	cmp	r7, #120	; 0x78
 800d3f6:	4680      	mov	r8, r0
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	469a      	mov	sl, r3
 800d3fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d402:	d807      	bhi.n	800d414 <_printf_i+0x28>
 800d404:	2f62      	cmp	r7, #98	; 0x62
 800d406:	d80a      	bhi.n	800d41e <_printf_i+0x32>
 800d408:	2f00      	cmp	r7, #0
 800d40a:	f000 80d5 	beq.w	800d5b8 <_printf_i+0x1cc>
 800d40e:	2f58      	cmp	r7, #88	; 0x58
 800d410:	f000 80c1 	beq.w	800d596 <_printf_i+0x1aa>
 800d414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d41c:	e03a      	b.n	800d494 <_printf_i+0xa8>
 800d41e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d422:	2b15      	cmp	r3, #21
 800d424:	d8f6      	bhi.n	800d414 <_printf_i+0x28>
 800d426:	a101      	add	r1, pc, #4	; (adr r1, 800d42c <_printf_i+0x40>)
 800d428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d42c:	0800d485 	.word	0x0800d485
 800d430:	0800d499 	.word	0x0800d499
 800d434:	0800d415 	.word	0x0800d415
 800d438:	0800d415 	.word	0x0800d415
 800d43c:	0800d415 	.word	0x0800d415
 800d440:	0800d415 	.word	0x0800d415
 800d444:	0800d499 	.word	0x0800d499
 800d448:	0800d415 	.word	0x0800d415
 800d44c:	0800d415 	.word	0x0800d415
 800d450:	0800d415 	.word	0x0800d415
 800d454:	0800d415 	.word	0x0800d415
 800d458:	0800d59f 	.word	0x0800d59f
 800d45c:	0800d4c5 	.word	0x0800d4c5
 800d460:	0800d559 	.word	0x0800d559
 800d464:	0800d415 	.word	0x0800d415
 800d468:	0800d415 	.word	0x0800d415
 800d46c:	0800d5c1 	.word	0x0800d5c1
 800d470:	0800d415 	.word	0x0800d415
 800d474:	0800d4c5 	.word	0x0800d4c5
 800d478:	0800d415 	.word	0x0800d415
 800d47c:	0800d415 	.word	0x0800d415
 800d480:	0800d561 	.word	0x0800d561
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	1d1a      	adds	r2, r3, #4
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	602a      	str	r2, [r5, #0]
 800d48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d494:	2301      	movs	r3, #1
 800d496:	e0a0      	b.n	800d5da <_printf_i+0x1ee>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	0607      	lsls	r7, r0, #24
 800d49e:	f103 0104 	add.w	r1, r3, #4
 800d4a2:	6029      	str	r1, [r5, #0]
 800d4a4:	d501      	bpl.n	800d4aa <_printf_i+0xbe>
 800d4a6:	681e      	ldr	r6, [r3, #0]
 800d4a8:	e003      	b.n	800d4b2 <_printf_i+0xc6>
 800d4aa:	0646      	lsls	r6, r0, #25
 800d4ac:	d5fb      	bpl.n	800d4a6 <_printf_i+0xba>
 800d4ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d4b2:	2e00      	cmp	r6, #0
 800d4b4:	da03      	bge.n	800d4be <_printf_i+0xd2>
 800d4b6:	232d      	movs	r3, #45	; 0x2d
 800d4b8:	4276      	negs	r6, r6
 800d4ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4be:	230a      	movs	r3, #10
 800d4c0:	4859      	ldr	r0, [pc, #356]	; (800d628 <_printf_i+0x23c>)
 800d4c2:	e012      	b.n	800d4ea <_printf_i+0xfe>
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	6820      	ldr	r0, [r4, #0]
 800d4c8:	1d19      	adds	r1, r3, #4
 800d4ca:	6029      	str	r1, [r5, #0]
 800d4cc:	0605      	lsls	r5, r0, #24
 800d4ce:	d501      	bpl.n	800d4d4 <_printf_i+0xe8>
 800d4d0:	681e      	ldr	r6, [r3, #0]
 800d4d2:	e002      	b.n	800d4da <_printf_i+0xee>
 800d4d4:	0641      	lsls	r1, r0, #25
 800d4d6:	d5fb      	bpl.n	800d4d0 <_printf_i+0xe4>
 800d4d8:	881e      	ldrh	r6, [r3, #0]
 800d4da:	2f6f      	cmp	r7, #111	; 0x6f
 800d4dc:	bf0c      	ite	eq
 800d4de:	2308      	moveq	r3, #8
 800d4e0:	230a      	movne	r3, #10
 800d4e2:	4851      	ldr	r0, [pc, #324]	; (800d628 <_printf_i+0x23c>)
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4ea:	6865      	ldr	r5, [r4, #4]
 800d4ec:	2d00      	cmp	r5, #0
 800d4ee:	bfa8      	it	ge
 800d4f0:	6821      	ldrge	r1, [r4, #0]
 800d4f2:	60a5      	str	r5, [r4, #8]
 800d4f4:	bfa4      	itt	ge
 800d4f6:	f021 0104 	bicge.w	r1, r1, #4
 800d4fa:	6021      	strge	r1, [r4, #0]
 800d4fc:	b90e      	cbnz	r6, 800d502 <_printf_i+0x116>
 800d4fe:	2d00      	cmp	r5, #0
 800d500:	d04b      	beq.n	800d59a <_printf_i+0x1ae>
 800d502:	4615      	mov	r5, r2
 800d504:	fbb6 f1f3 	udiv	r1, r6, r3
 800d508:	fb03 6711 	mls	r7, r3, r1, r6
 800d50c:	5dc7      	ldrb	r7, [r0, r7]
 800d50e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d512:	4637      	mov	r7, r6
 800d514:	42bb      	cmp	r3, r7
 800d516:	460e      	mov	r6, r1
 800d518:	d9f4      	bls.n	800d504 <_printf_i+0x118>
 800d51a:	2b08      	cmp	r3, #8
 800d51c:	d10b      	bne.n	800d536 <_printf_i+0x14a>
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	07de      	lsls	r6, r3, #31
 800d522:	d508      	bpl.n	800d536 <_printf_i+0x14a>
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	6861      	ldr	r1, [r4, #4]
 800d528:	4299      	cmp	r1, r3
 800d52a:	bfde      	ittt	le
 800d52c:	2330      	movle	r3, #48	; 0x30
 800d52e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d532:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d536:	1b52      	subs	r2, r2, r5
 800d538:	6122      	str	r2, [r4, #16]
 800d53a:	464b      	mov	r3, r9
 800d53c:	4621      	mov	r1, r4
 800d53e:	4640      	mov	r0, r8
 800d540:	f8cd a000 	str.w	sl, [sp]
 800d544:	aa03      	add	r2, sp, #12
 800d546:	f7ff fedf 	bl	800d308 <_printf_common>
 800d54a:	3001      	adds	r0, #1
 800d54c:	d14a      	bne.n	800d5e4 <_printf_i+0x1f8>
 800d54e:	f04f 30ff 	mov.w	r0, #4294967295
 800d552:	b004      	add	sp, #16
 800d554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	f043 0320 	orr.w	r3, r3, #32
 800d55e:	6023      	str	r3, [r4, #0]
 800d560:	2778      	movs	r7, #120	; 0x78
 800d562:	4832      	ldr	r0, [pc, #200]	; (800d62c <_printf_i+0x240>)
 800d564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d568:	6823      	ldr	r3, [r4, #0]
 800d56a:	6829      	ldr	r1, [r5, #0]
 800d56c:	061f      	lsls	r7, r3, #24
 800d56e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d572:	d402      	bmi.n	800d57a <_printf_i+0x18e>
 800d574:	065f      	lsls	r7, r3, #25
 800d576:	bf48      	it	mi
 800d578:	b2b6      	uxthmi	r6, r6
 800d57a:	07df      	lsls	r7, r3, #31
 800d57c:	bf48      	it	mi
 800d57e:	f043 0320 	orrmi.w	r3, r3, #32
 800d582:	6029      	str	r1, [r5, #0]
 800d584:	bf48      	it	mi
 800d586:	6023      	strmi	r3, [r4, #0]
 800d588:	b91e      	cbnz	r6, 800d592 <_printf_i+0x1a6>
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	f023 0320 	bic.w	r3, r3, #32
 800d590:	6023      	str	r3, [r4, #0]
 800d592:	2310      	movs	r3, #16
 800d594:	e7a6      	b.n	800d4e4 <_printf_i+0xf8>
 800d596:	4824      	ldr	r0, [pc, #144]	; (800d628 <_printf_i+0x23c>)
 800d598:	e7e4      	b.n	800d564 <_printf_i+0x178>
 800d59a:	4615      	mov	r5, r2
 800d59c:	e7bd      	b.n	800d51a <_printf_i+0x12e>
 800d59e:	682b      	ldr	r3, [r5, #0]
 800d5a0:	6826      	ldr	r6, [r4, #0]
 800d5a2:	1d18      	adds	r0, r3, #4
 800d5a4:	6961      	ldr	r1, [r4, #20]
 800d5a6:	6028      	str	r0, [r5, #0]
 800d5a8:	0635      	lsls	r5, r6, #24
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	d501      	bpl.n	800d5b2 <_printf_i+0x1c6>
 800d5ae:	6019      	str	r1, [r3, #0]
 800d5b0:	e002      	b.n	800d5b8 <_printf_i+0x1cc>
 800d5b2:	0670      	lsls	r0, r6, #25
 800d5b4:	d5fb      	bpl.n	800d5ae <_printf_i+0x1c2>
 800d5b6:	8019      	strh	r1, [r3, #0]
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4615      	mov	r5, r2
 800d5bc:	6123      	str	r3, [r4, #16]
 800d5be:	e7bc      	b.n	800d53a <_printf_i+0x14e>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	2100      	movs	r1, #0
 800d5c4:	1d1a      	adds	r2, r3, #4
 800d5c6:	602a      	str	r2, [r5, #0]
 800d5c8:	681d      	ldr	r5, [r3, #0]
 800d5ca:	6862      	ldr	r2, [r4, #4]
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f000 f849 	bl	800d664 <memchr>
 800d5d2:	b108      	cbz	r0, 800d5d8 <_printf_i+0x1ec>
 800d5d4:	1b40      	subs	r0, r0, r5
 800d5d6:	6060      	str	r0, [r4, #4]
 800d5d8:	6863      	ldr	r3, [r4, #4]
 800d5da:	6123      	str	r3, [r4, #16]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5e2:	e7aa      	b.n	800d53a <_printf_i+0x14e>
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	6923      	ldr	r3, [r4, #16]
 800d5ec:	47d0      	blx	sl
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	d0ad      	beq.n	800d54e <_printf_i+0x162>
 800d5f2:	6823      	ldr	r3, [r4, #0]
 800d5f4:	079b      	lsls	r3, r3, #30
 800d5f6:	d413      	bmi.n	800d620 <_printf_i+0x234>
 800d5f8:	68e0      	ldr	r0, [r4, #12]
 800d5fa:	9b03      	ldr	r3, [sp, #12]
 800d5fc:	4298      	cmp	r0, r3
 800d5fe:	bfb8      	it	lt
 800d600:	4618      	movlt	r0, r3
 800d602:	e7a6      	b.n	800d552 <_printf_i+0x166>
 800d604:	2301      	movs	r3, #1
 800d606:	4632      	mov	r2, r6
 800d608:	4649      	mov	r1, r9
 800d60a:	4640      	mov	r0, r8
 800d60c:	47d0      	blx	sl
 800d60e:	3001      	adds	r0, #1
 800d610:	d09d      	beq.n	800d54e <_printf_i+0x162>
 800d612:	3501      	adds	r5, #1
 800d614:	68e3      	ldr	r3, [r4, #12]
 800d616:	9903      	ldr	r1, [sp, #12]
 800d618:	1a5b      	subs	r3, r3, r1
 800d61a:	42ab      	cmp	r3, r5
 800d61c:	dcf2      	bgt.n	800d604 <_printf_i+0x218>
 800d61e:	e7eb      	b.n	800d5f8 <_printf_i+0x20c>
 800d620:	2500      	movs	r5, #0
 800d622:	f104 0619 	add.w	r6, r4, #25
 800d626:	e7f5      	b.n	800d614 <_printf_i+0x228>
 800d628:	0800e604 	.word	0x0800e604
 800d62c:	0800e615 	.word	0x0800e615

0800d630 <memmove>:
 800d630:	4288      	cmp	r0, r1
 800d632:	b510      	push	{r4, lr}
 800d634:	eb01 0402 	add.w	r4, r1, r2
 800d638:	d902      	bls.n	800d640 <memmove+0x10>
 800d63a:	4284      	cmp	r4, r0
 800d63c:	4623      	mov	r3, r4
 800d63e:	d807      	bhi.n	800d650 <memmove+0x20>
 800d640:	1e43      	subs	r3, r0, #1
 800d642:	42a1      	cmp	r1, r4
 800d644:	d008      	beq.n	800d658 <memmove+0x28>
 800d646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d64e:	e7f8      	b.n	800d642 <memmove+0x12>
 800d650:	4601      	mov	r1, r0
 800d652:	4402      	add	r2, r0
 800d654:	428a      	cmp	r2, r1
 800d656:	d100      	bne.n	800d65a <memmove+0x2a>
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d662:	e7f7      	b.n	800d654 <memmove+0x24>

0800d664 <memchr>:
 800d664:	4603      	mov	r3, r0
 800d666:	b510      	push	{r4, lr}
 800d668:	b2c9      	uxtb	r1, r1
 800d66a:	4402      	add	r2, r0
 800d66c:	4293      	cmp	r3, r2
 800d66e:	4618      	mov	r0, r3
 800d670:	d101      	bne.n	800d676 <memchr+0x12>
 800d672:	2000      	movs	r0, #0
 800d674:	e003      	b.n	800d67e <memchr+0x1a>
 800d676:	7804      	ldrb	r4, [r0, #0]
 800d678:	3301      	adds	r3, #1
 800d67a:	428c      	cmp	r4, r1
 800d67c:	d1f6      	bne.n	800d66c <memchr+0x8>
 800d67e:	bd10      	pop	{r4, pc}

0800d680 <memcpy>:
 800d680:	440a      	add	r2, r1
 800d682:	4291      	cmp	r1, r2
 800d684:	f100 33ff 	add.w	r3, r0, #4294967295
 800d688:	d100      	bne.n	800d68c <memcpy+0xc>
 800d68a:	4770      	bx	lr
 800d68c:	b510      	push	{r4, lr}
 800d68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d692:	4291      	cmp	r1, r2
 800d694:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d698:	d1f9      	bne.n	800d68e <memcpy+0xe>
 800d69a:	bd10      	pop	{r4, pc}

0800d69c <_realloc_r>:
 800d69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4614      	mov	r4, r2
 800d6a4:	460e      	mov	r6, r1
 800d6a6:	b921      	cbnz	r1, 800d6b2 <_realloc_r+0x16>
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ae:	f7ff bb41 	b.w	800cd34 <_malloc_r>
 800d6b2:	b92a      	cbnz	r2, 800d6c0 <_realloc_r+0x24>
 800d6b4:	f7ff fc88 	bl	800cfc8 <_free_r>
 800d6b8:	4625      	mov	r5, r4
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	f000 f81b 	bl	800d6fa <_malloc_usable_size_r>
 800d6c4:	4284      	cmp	r4, r0
 800d6c6:	4607      	mov	r7, r0
 800d6c8:	d802      	bhi.n	800d6d0 <_realloc_r+0x34>
 800d6ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6ce:	d812      	bhi.n	800d6f6 <_realloc_r+0x5a>
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	f7ff fb2e 	bl	800cd34 <_malloc_r>
 800d6d8:	4605      	mov	r5, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0ed      	beq.n	800d6ba <_realloc_r+0x1e>
 800d6de:	42bc      	cmp	r4, r7
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4631      	mov	r1, r6
 800d6e4:	bf28      	it	cs
 800d6e6:	463a      	movcs	r2, r7
 800d6e8:	f7ff ffca 	bl	800d680 <memcpy>
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	f7ff fc6a 	bl	800cfc8 <_free_r>
 800d6f4:	e7e1      	b.n	800d6ba <_realloc_r+0x1e>
 800d6f6:	4635      	mov	r5, r6
 800d6f8:	e7df      	b.n	800d6ba <_realloc_r+0x1e>

0800d6fa <_malloc_usable_size_r>:
 800d6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6fe:	1f18      	subs	r0, r3, #4
 800d700:	2b00      	cmp	r3, #0
 800d702:	bfbc      	itt	lt
 800d704:	580b      	ldrlt	r3, [r1, r0]
 800d706:	18c0      	addlt	r0, r0, r3
 800d708:	4770      	bx	lr
	...

0800d70c <_init>:
 800d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70e:	bf00      	nop
 800d710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d712:	bc08      	pop	{r3}
 800d714:	469e      	mov	lr, r3
 800d716:	4770      	bx	lr

0800d718 <_fini>:
 800d718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71a:	bf00      	nop
 800d71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71e:	bc08      	pop	{r3}
 800d720:	469e      	mov	lr, r3
 800d722:	4770      	bx	lr
