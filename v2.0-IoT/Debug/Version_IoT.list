
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c93c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800cb20  0800cb20  0001cb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db14  0800db14  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800db14  0800db14  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db14  0800db14  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db14  0800db14  0001db14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db18  0800db18  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800db1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200000fc  0800dc18  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800dc18  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001663d  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c4  00000000  00000000  000367a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00039c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e56  00000000  00000000  0003aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6ba  00000000  00000000  0003bd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb53  00000000  00000000  00058400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee43  00000000  00000000  00074f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051f4  00000000  00000000  00113d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00118f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cb08 	.word	0x0800cb08

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800cb08 	.word	0x0800cb08

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 facc 	bl	80097ec <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f944 	bl	80084e4 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	20000374 	.word	0x20000374
 80004c0:	200001c5 	.word	0x200001c5
 80004c4:	200001ed 	.word	0x200001ed
 80004c8:	200001f0 	.word	0x200001f0
 80004cc:	200001f1 	.word	0x200001f1
 80004d0:	200001f2 	.word	0x200001f2
 80004d4:	200001f3 	.word	0x200001f3
 80004d8:	200001f4 	.word	0x200001f4
 80004dc:	200001f5 	.word	0x200001f5
 80004e0:	20000205 	.word	0x20000205
 80004e4:	200001f6 	.word	0x200001f6
 80004e8:	20000206 	.word	0x20000206
 80004ec:	200001f7 	.word	0x200001f7
 80004f0:	20000207 	.word	0x20000207
 80004f4:	200001fa 	.word	0x200001fa
 80004f8:	200001fb 	.word	0x200001fb
 80004fc:	200001fc 	.word	0x200001fc
 8000500:	200001fd 	.word	0x200001fd
 8000504:	200001fe 	.word	0x200001fe
 8000508:	200001ff 	.word	0x200001ff
 800050c:	20000200 	.word	0x20000200
 8000510:	20000201 	.word	0x20000201
 8000514:	20000202 	.word	0x20000202
 8000518:	20000203 	.word	0x20000203
 800051c:	20000204 	.word	0x20000204
 8000520:	20000208 	.word	0x20000208
 8000524:	2000020a 	.word	0x2000020a
 8000528:	200001e8 	.word	0x200001e8
 800052c:	200001e9 	.word	0x200001e9
 8000530:	200001ea 	.word	0x200001ea
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001eb 	.word	0x200001eb
 8000540:	2000020d 	.word	0x2000020d
 8000544:	2000020b 	.word	0x2000020b
 8000548:	200001f9 	.word	0x200001f9
 800054c:	2000020c 	.word	0x2000020c
 8000550:	200001f8 	.word	0x200001f8
 8000554:	2000020e 	.word	0x2000020e
 8000558:	2000020f 	.word	0x2000020f
 800055c:	20000210 	.word	0x20000210
 8000560:	20000211 	.word	0x20000211
 8000564:	20000212 	.word	0x20000212
 8000568:	20000213 	.word	0x20000213
 800056c:	20000214 	.word	0x20000214
 8000570:	20000215 	.word	0x20000215
 8000574:	20000216 	.word	0x20000216
 8000578:	20000217 	.word	0x20000217
 800057c:	200001c4 	.word	0x200001c4
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f007 ff12 	bl	80084e4 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f007 ff0c 	bl	80084e4 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f007 ff06 	bl	80084e4 <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000205 	.word	0x20000205
 80006e4:	200001f6 	.word	0x200001f6
 80006e8:	20000206 	.word	0x20000206
 80006ec:	200001f7 	.word	0x200001f7
 80006f0:	200001f9 	.word	0x200001f9
 80006f4:	20000207 	.word	0x20000207
 80006f8:	200001fa 	.word	0x200001fa
 80006fc:	200001fb 	.word	0x200001fb
 8000700:	200001fc 	.word	0x200001fc
 8000704:	200001fd 	.word	0x200001fd
 8000708:	200001fe 	.word	0x200001fe
 800070c:	200001ff 	.word	0x200001ff
 8000710:	20000200 	.word	0x20000200
 8000714:	20000201 	.word	0x20000201
 8000718:	20000202 	.word	0x20000202
 800071c:	20000203 	.word	0x20000203
 8000720:	20000204 	.word	0x20000204
 8000724:	20000208 	.word	0x20000208
 8000728:	2000020a 	.word	0x2000020a
 800072c:	2000020c 	.word	0x2000020c
 8000730:	2000020d 	.word	0x2000020d
 8000734:	2000020b 	.word	0x2000020b

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d120      	bne.n	8000788 <convertArrays+0x50>
		int eepromVal = idStartPos;
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <convertArrays+0xfc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	e016      	b.n	8000780 <convertArrays+0x48>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <convertArrays+0x100>)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <convertArrays+0x104>)
 800075e:	5c99      	ldrb	r1, [r3, r2]
 8000760:	4a37      	ldr	r2, [pc, #220]	; (8000840 <convertArrays+0x108>)
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	701a      	strb	r2, [r3, #0]
			machineID[i + 1] = '\0';
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	3301      	adds	r3, #1
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <convertArrays+0x108>)
 8000770:	2100      	movs	r1, #0
 8000772:	54d1      	strb	r1, [r2, r3]

			eepromVal++;
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3301      	adds	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	3301      	adds	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	2b0b      	cmp	r3, #11
 8000784:	dde5      	ble.n	8000752 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000786:	e04f      	b.n	8000828 <convertArrays+0xf0>
	} else if(state == 2) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d126      	bne.n	80007dc <convertArrays+0xa4>
		int eepromVal = ssidStartPos;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <convertArrays+0x10c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	e01c      	b.n	80007d4 <convertArrays+0x9c>
			if(eepromData[eepromVal] != 0) {
 800079a:	4a27      	ldr	r2, [pc, #156]	; (8000838 <convertArrays+0x100>)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d013      	beq.n	80007ce <convertArrays+0x96>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <convertArrays+0x100>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <convertArrays+0x110>)
 80007b2:	5c99      	ldrb	r1, [r3, r2]
 80007b4:	4a25      	ldr	r2, [pc, #148]	; (800084c <convertArrays+0x114>)
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	4413      	add	r3, r2
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
				wifiSSID[i + 1] = '\0';
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <convertArrays+0x114>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	54d1      	strb	r1, [r2, r3]
				eepromVal++;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3301      	adds	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	2b13      	cmp	r3, #19
 80007d8:	dddf      	ble.n	800079a <convertArrays+0x62>
}
 80007da:	e025      	b.n	8000828 <convertArrays+0xf0>
		int eepromVal = passStartPos;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <convertArrays+0x118>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	e01c      	b.n	8000822 <convertArrays+0xea>
			if(eepromData[eepromVal] != 0) {
 80007e8:	4a13      	ldr	r2, [pc, #76]	; (8000838 <convertArrays+0x100>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d013      	beq.n	800081c <convertArrays+0xe4>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007f4:	4a10      	ldr	r2, [pc, #64]	; (8000838 <convertArrays+0x100>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <convertArrays+0x110>)
 8000800:	5c99      	ldrb	r1, [r3, r2]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <convertArrays+0x11c>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4413      	add	r3, r2
 8000808:	460a      	mov	r2, r1
 800080a:	701a      	strb	r2, [r3, #0]
				wifiPass[i + 1] = '\0';
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <convertArrays+0x11c>)
 8000812:	2100      	movs	r1, #0
 8000814:	54d1      	strb	r1, [r2, r3]
				eepromVal++;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3301      	adds	r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	2b13      	cmp	r3, #19
 8000826:	dddf      	ble.n	80007e8 <convertArrays+0xb0>
}
 8000828:	bf00      	nop
 800082a:	3724      	adds	r7, #36	; 0x24
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000004 	.word	0x20000004
 8000838:	20000118 	.word	0x20000118
 800083c:	20000010 	.word	0x20000010
 8000840:	20000190 	.word	0x20000190
 8000844:	20000008 	.word	0x20000008
 8000848:	2000001c 	.word	0x2000001c
 800084c:	2000019c 	.word	0x2000019c
 8000850:	2000000c 	.word	0x2000000c
 8000854:	200001b0 	.word	0x200001b0

08000858 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0c9      	sub	sp, #292	; 0x124
 800085c:	af04      	add	r7, sp, #16
 800085e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000862:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8000866:	6020      	str	r0, [r4, #0]
 8000868:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800086c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8000870:	6001      	str	r1, [r0, #0]
 8000872:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000876:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800087a:	600a      	str	r2, [r1, #0]
 800087c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000880:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000884:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000886:	4a36      	ldr	r2, [pc, #216]	; (8000960 <sendMachineData+0x108>)
 8000888:	4936      	ldr	r1, [pc, #216]	; (8000964 <sendMachineData+0x10c>)
 800088a:	4837      	ldr	r0, [pc, #220]	; (8000968 <sendMachineData+0x110>)
 800088c:	f00b fd1e 	bl	800c2cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000890:	4835      	ldr	r0, [pc, #212]	; (8000968 <sendMachineData+0x110>)
 8000892:	f7ff fcc7 	bl	8000224 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800089e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008a2:	4931      	ldr	r1, [pc, #196]	; (8000968 <sendMachineData+0x110>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f00a fee9 	bl	800b67c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008aa:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008ae:	f007 fe19 	bl	80084e4 <HAL_Delay>

	sprintf(local_txA,
 80008b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008be:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80008c2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008c6:	4929      	ldr	r1, [pc, #164]	; (800096c <sendMachineData+0x114>)
 80008c8:	9102      	str	r1, [sp, #8]
 80008ca:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80008ce:	9101      	str	r1, [sp, #4]
 80008d0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80008d4:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80008d8:	6809      	ldr	r1, [r1, #0]
 80008da:	9100      	str	r1, [sp, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	4923      	ldr	r1, [pc, #140]	; (8000970 <sendMachineData+0x118>)
 80008e2:	f00b fcf3 	bl	800c2cc <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc9a 	bl	8000224 <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008fe:	491d      	ldr	r1, [pc, #116]	; (8000974 <sendMachineData+0x11c>)
 8000900:	4618      	mov	r0, r3
 8000902:	f00b fce3 	bl	800c2cc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fc8a 	bl	8000224 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	f107 0110 	add.w	r1, r7, #16
 8000918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800091c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f00a feab 	bl	800b67c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000926:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800092a:	f007 fddb 	bl	80084e4 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800092e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc76 	bl	8000224 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	b29a      	uxth	r2, r3
 800093c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	f00a fe97 	bl	800b67c <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 800094e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000952:	f007 fdc7 	bl	80084e4 <HAL_Delay>
}
 8000956:	bf00      	nop
 8000958:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800095c:	46bd      	mov	sp, r7
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	0800cb70 	.word	0x0800cb70
 8000964:	0800cb80 	.word	0x0800cb80
 8000968:	20000250 	.word	0x20000250
 800096c:	0800cc14 	.word	0x0800cc14
 8000970:	0800cba0 	.word	0x0800cba0
 8000974:	0800cc28 	.word	0x0800cc28

08000978 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af04      	add	r7, sp, #16
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <hata2EEPROM+0xa4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <hata2EEPROM+0xa8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4413      	add	r3, r2
 800098e:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <hata2EEPROM+0xac>)
 8000990:	5cd3      	ldrb	r3, [r2, r3]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000996:	f000 f92b 	bl	8000bf0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800099a:	e000      	b.n	800099e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 800099c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	e012      	b.n	80009ca <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <hata2EEPROM+0xa8>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <hata2EEPROM+0xac>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d107      	bne.n	80009c4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <hata2EEPROM+0xa8>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	4919      	ldr	r1, [pc, #100]	; (8000a24 <hata2EEPROM+0xac>)
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	54ca      	strb	r2, [r1, r3]
					break;
 80009c2:	e007      	b.n	80009d4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <hata2EEPROM+0xa4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbe7      	blt.n	80009a4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <hata2EEPROM+0xa8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	b299      	uxth	r1, r3
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <hata2EEPROM+0xa4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	b298      	uxth	r0, r3
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <hata2EEPROM+0xa8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <hata2EEPROM+0xac>)
 80009e6:	4413      	add	r3, r2
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <hata2EEPROM+0xa4>)
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	b292      	uxth	r2, r2
 80009ee:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80009f2:	9402      	str	r4, [sp, #8]
 80009f4:	9201      	str	r2, [sp, #4]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4603      	mov	r3, r0
 80009fa:	460a      	mov	r2, r1
 80009fc:	21a0      	movs	r1, #160	; 0xa0
 80009fe:	480a      	ldr	r0, [pc, #40]	; (8000a28 <hata2EEPROM+0xb0>)
 8000a00:	f008 fdfa 	bl	80095f8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a08:	f007 fd6c 	bl	80084e4 <HAL_Delay>
	eepromKontrol(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fc11 	bl	8000234 <eepromKontrol>
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	2000009c 	.word	0x2000009c
 8000a24:	20000118 	.word	0x20000118
 8000a28:	20000374 	.word	0x20000374

08000a2c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d11d      	bne.n	8000a78 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a3c:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d105      	bne.n	8000a50 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a44:	4a61      	ldr	r2, [pc, #388]	; (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f006 fff5 	bl	8007a38 <lcd_print>
 8000a4e:	e008      	b.n	8000a62 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a50:	4b5d      	ldr	r3, [pc, #372]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d104      	bne.n	8000a62 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a58:	4a5d      	ldr	r2, [pc, #372]	; (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f006 ffeb 	bl	8007a38 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a62:	4a5c      	ldr	r2, [pc, #368]	; (8000bd4 <hataKoduLcdGoster+0x1a8>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2002      	movs	r0, #2
 8000a68:	f006 ffe6 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a6c:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000a6e:	2107      	movs	r1, #7
 8000a70:	2002      	movs	r0, #2
 8000a72:	f006 ffe1 	bl	8007a38 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a76:	e0a3      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d11d      	bne.n	8000aba <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a7e:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d105      	bne.n	8000a92 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a86:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f006 ffd4 	bl	8007a38 <lcd_print>
 8000a90:	e008      	b.n	8000aa4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a92:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d104      	bne.n	8000aa4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a9a:	4a4d      	ldr	r2, [pc, #308]	; (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f006 ffca 	bl	8007a38 <lcd_print>
		lcd_print(2, 2, "2");
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <hataKoduLcdGoster+0x1b0>)
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f006 ffc5 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aae:	4a4a      	ldr	r2, [pc, #296]	; (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f006 ffc0 	bl	8007a38 <lcd_print>
}
 8000ab8:	e082      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d11d      	bne.n	8000afc <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000ac0:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d105      	bne.n	8000ad4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000ac8:	4a40      	ldr	r2, [pc, #256]	; (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2001      	movs	r0, #1
 8000ace:	f006 ffb3 	bl	8007a38 <lcd_print>
 8000ad2:	e008      	b.n	8000ae6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d104      	bne.n	8000ae6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000adc:	4a3c      	ldr	r2, [pc, #240]	; (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f006 ffa9 	bl	8007a38 <lcd_print>
		lcd_print(2, 3, "3");
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <hataKoduLcdGoster+0x1b4>)
 8000ae8:	2103      	movs	r1, #3
 8000aea:	2002      	movs	r0, #2
 8000aec:	f006 ffa4 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a39      	ldr	r2, [pc, #228]	; (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f006 ff9f 	bl	8007a38 <lcd_print>
}
 8000afa:	e061      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d11d      	bne.n	8000b3e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b0a:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f006 ff92 	bl	8007a38 <lcd_print>
 8000b14:	e008      	b.n	8000b28 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d104      	bne.n	8000b28 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	2001      	movs	r0, #1
 8000b24:	f006 ff88 	bl	8007a38 <lcd_print>
		lcd_print(2, 4, "4");
 8000b28:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <hataKoduLcdGoster+0x1b8>)
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f006 ff83 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b32:	4a29      	ldr	r2, [pc, #164]	; (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000b34:	2107      	movs	r1, #7
 8000b36:	2002      	movs	r0, #2
 8000b38:	f006 ff7e 	bl	8007a38 <lcd_print>
}
 8000b3c:	e040      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d11d      	bne.n	8000b80 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2001      	movs	r0, #1
 8000b52:	f006 ff71 	bl	8007a38 <lcd_print>
 8000b56:	e008      	b.n	8000b6a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d104      	bne.n	8000b6a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	2001      	movs	r0, #1
 8000b66:	f006 ff67 	bl	8007a38 <lcd_print>
		lcd_print(2, 5, "5");
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <hataKoduLcdGoster+0x1bc>)
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f006 ff62 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000b76:	2107      	movs	r1, #7
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f006 ff5d 	bl	8007a38 <lcd_print>
}
 8000b7e:	e01f      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d11c      	bne.n	8000bc0 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d105      	bne.n	8000b9a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	2001      	movs	r0, #1
 8000b94:	f006 ff50 	bl	8007a38 <lcd_print>
 8000b98:	e008      	b.n	8000bac <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d104      	bne.n	8000bac <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f006 ff46 	bl	8007a38 <lcd_print>
		lcd_print(2, 6, "6");
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <hataKoduLcdGoster+0x1c0>)
 8000bae:	2106      	movs	r1, #6
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f006 ff41 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000bb8:	2107      	movs	r1, #7
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f006 ff3c 	bl	8007a38 <lcd_print>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000020d 	.word	0x2000020d
 8000bcc:	0800ccb4 	.word	0x0800ccb4
 8000bd0:	0800ccc4 	.word	0x0800ccc4
 8000bd4:	0800ccd4 	.word	0x0800ccd4
 8000bd8:	0800ccd8 	.word	0x0800ccd8
 8000bdc:	0800cce4 	.word	0x0800cce4
 8000be0:	0800cce8 	.word	0x0800cce8
 8000be4:	0800ccec 	.word	0x0800ccec
 8000be8:	0800ccf0 	.word	0x0800ccf0
 8000bec:	0800ccf4 	.word	0x0800ccf4

08000bf0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e009      	b.n	8000c10 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <eepromDataFillWithEmpty+0x38>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <eepromDataFillWithEmpty+0x3c>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <eepromDataFillWithEmpty+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbf0      	blt.n	8000bfc <eepromDataFillWithEmpty+0xc>
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000070 	.word	0x20000070
 8000c2c:	20000118 	.word	0x20000118
 8000c30:	20000098 	.word	0x20000098

08000c34 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <i2cTest+0x154>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <i2cTest+0x154>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c56:	484c      	ldr	r0, [pc, #304]	; (8000d88 <i2cTest+0x154>)
 8000c58:	f008 fba0 	bl	800939c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5c:	23c0      	movs	r3, #192	; 0xc0
 8000c5e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c60:	2311      	movs	r3, #17
 8000c62:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4846      	ldr	r0, [pc, #280]	; (8000d8c <i2cTest+0x158>)
 8000c72:	f007 ffa7 	bl	8008bc4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	4844      	ldr	r0, [pc, #272]	; (8000d8c <i2cTest+0x158>)
 8000c7c:	f008 fa19 	bl	80090b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	4841      	ldr	r0, [pc, #260]	; (8000d8c <i2cTest+0x158>)
 8000c86:	f008 fa14 	bl	80090b2 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f007 fc2a 	bl	80084e4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c90:	bf00      	nop
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	483d      	ldr	r0, [pc, #244]	; (8000d8c <i2cTest+0x158>)
 8000c96:	f008 f9f5 	bl	8009084 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d006      	beq.n	8000cae <i2cTest+0x7a>
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	483a      	ldr	r0, [pc, #232]	; (8000d8c <i2cTest+0x158>)
 8000ca4:	f008 f9ee 	bl	8009084 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1f1      	bne.n	8000c92 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4836      	ldr	r0, [pc, #216]	; (8000d8c <i2cTest+0x158>)
 8000cb4:	f008 f9fd 	bl	80090b2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f007 fc13 	bl	80084e4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cbe:	bf00      	nop
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	4832      	ldr	r0, [pc, #200]	; (8000d8c <i2cTest+0x158>)
 8000cc4:	f008 f9de 	bl	8009084 <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d0f8      	beq.n	8000cc0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	482e      	ldr	r0, [pc, #184]	; (8000d8c <i2cTest+0x158>)
 8000cd4:	f008 f9ed 	bl	80090b2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f007 fc03 	bl	80084e4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000cde:	bf00      	nop
 8000ce0:	2140      	movs	r1, #64	; 0x40
 8000ce2:	482a      	ldr	r0, [pc, #168]	; (8000d8c <i2cTest+0x158>)
 8000ce4:	f008 f9ce 	bl	8009084 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d0f8      	beq.n	8000ce0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2140      	movs	r1, #64	; 0x40
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <i2cTest+0x158>)
 8000cf4:	f008 f9dd 	bl	80090b2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f007 fbf3 	bl	80084e4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000cfe:	bf00      	nop
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <i2cTest+0x158>)
 8000d04:	f008 f9be 	bl	8009084 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d1f8      	bne.n	8000d00 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	481e      	ldr	r0, [pc, #120]	; (8000d8c <i2cTest+0x158>)
 8000d14:	f008 f9cd 	bl	80090b2 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f007 fbe3 	bl	80084e4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d1e:	bf00      	nop
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	481a      	ldr	r0, [pc, #104]	; (8000d8c <i2cTest+0x158>)
 8000d24:	f008 f9ae 	bl	8009084 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d1f8      	bne.n	8000d20 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	; 0xc0
 8000d30:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <i2cTest+0x158>)
 8000d44:	f007 ff3e 	bl	8008bc4 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <i2cTest+0x154>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <i2cTest+0x154>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d56:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <i2cTest+0x154>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <i2cTest+0x154>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d66:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <i2cTest+0x154>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <i2cTest+0x154>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <i2cTest+0x154>)
 8000d7a:	f008 f9cb 	bl	8009114 <HAL_I2C_Init>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000374 	.word	0x20000374
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d9a:	20c8      	movs	r0, #200	; 0xc8
 8000d9c:	f007 fba2 	bl	80084e4 <HAL_Delay>
	lcd_clear();
 8000da0:	f006 fe76 	bl	8007a90 <lcd_clear>
	if(type == 1 && page == 0) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d13e      	bne.n	8000e28 <printTemplate+0x98>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d13b      	bne.n	8000e28 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000db0:	4a81      	ldr	r2, [pc, #516]	; (8000fb8 <printTemplate+0x228>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2001      	movs	r0, #1
 8000db6:	f006 fe3f 	bl	8007a38 <lcd_print>
		lcd_print(2, 3, "0");
 8000dba:	4a80      	ldr	r2, [pc, #512]	; (8000fbc <printTemplate+0x22c>)
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f006 fe3a 	bl	8007a38 <lcd_print>
		lcd_print(2, 4, "1");
 8000dc4:	4a7e      	ldr	r2, [pc, #504]	; (8000fc0 <printTemplate+0x230>)
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f006 fe35 	bl	8007a38 <lcd_print>
		lcd_print(2, 5, "2");
 8000dce:	4a7d      	ldr	r2, [pc, #500]	; (8000fc4 <printTemplate+0x234>)
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f006 fe30 	bl	8007a38 <lcd_print>
		lcd_print(2, 6, "3");
 8000dd8:	4a7b      	ldr	r2, [pc, #492]	; (8000fc8 <printTemplate+0x238>)
 8000dda:	2106      	movs	r1, #6
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f006 fe2b 	bl	8007a38 <lcd_print>
		lcd_print(2, 7, "4");
 8000de2:	4a7a      	ldr	r2, [pc, #488]	; (8000fcc <printTemplate+0x23c>)
 8000de4:	2107      	movs	r1, #7
 8000de6:	2002      	movs	r0, #2
 8000de8:	f006 fe26 	bl	8007a38 <lcd_print>
		lcd_print(2, 10, "5");
 8000dec:	4a78      	ldr	r2, [pc, #480]	; (8000fd0 <printTemplate+0x240>)
 8000dee:	210a      	movs	r1, #10
 8000df0:	2002      	movs	r0, #2
 8000df2:	f006 fe21 	bl	8007a38 <lcd_print>
		lcd_print(2, 11, "6");
 8000df6:	4a77      	ldr	r2, [pc, #476]	; (8000fd4 <printTemplate+0x244>)
 8000df8:	210b      	movs	r1, #11
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f006 fe1c 	bl	8007a38 <lcd_print>
		lcd_print(2, 12, "7");
 8000e00:	4a75      	ldr	r2, [pc, #468]	; (8000fd8 <printTemplate+0x248>)
 8000e02:	210c      	movs	r1, #12
 8000e04:	2002      	movs	r0, #2
 8000e06:	f006 fe17 	bl	8007a38 <lcd_print>
		lcd_print(2, 13, "8");
 8000e0a:	4a74      	ldr	r2, [pc, #464]	; (8000fdc <printTemplate+0x24c>)
 8000e0c:	210d      	movs	r1, #13
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f006 fe12 	bl	8007a38 <lcd_print>
		lcd_print(2, 14, "9");
 8000e14:	4a72      	ldr	r2, [pc, #456]	; (8000fe0 <printTemplate+0x250>)
 8000e16:	210e      	movs	r1, #14
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f006 fe0d 	bl	8007a38 <lcd_print>
		//lcd_print(1, 5, machineID);
		lcd_gotoxy(2, 3);
 8000e1e:	2103      	movs	r1, #3
 8000e20:	2002      	movs	r0, #2
 8000e22:	f006 fdea 	bl	80079fa <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			//lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e26:	e0c2      	b.n	8000fae <printTemplate+0x21e>
	} else if(type == 2) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d15e      	bne.n	8000eec <printTemplate+0x15c>
		if(page == 1) {
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d10f      	bne.n	8000e54 <printTemplate+0xc4>
			lcd_clear();
 8000e34:	f006 fe2c 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000e38:	2064      	movs	r0, #100	; 0x64
 8000e3a:	f007 fb53 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e3e:	4a69      	ldr	r2, [pc, #420]	; (8000fe4 <printTemplate+0x254>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f006 fdf8 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e48:	4a67      	ldr	r2, [pc, #412]	; (8000fe8 <printTemplate+0x258>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f006 fdf3 	bl	8007a38 <lcd_print>
}
 8000e52:	e0ac      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 2) {
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d10f      	bne.n	8000e7a <printTemplate+0xea>
			lcd_clear();
 8000e5a:	f006 fe19 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f007 fb40 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e64:	4a5f      	ldr	r2, [pc, #380]	; (8000fe4 <printTemplate+0x254>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f006 fde5 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e6e:	4a5f      	ldr	r2, [pc, #380]	; (8000fec <printTemplate+0x25c>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	2002      	movs	r0, #2
 8000e74:	f006 fde0 	bl	8007a38 <lcd_print>
}
 8000e78:	e099      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 3) {
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10f      	bne.n	8000ea0 <printTemplate+0x110>
			lcd_clear();
 8000e80:	f006 fe06 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f007 fb2d 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e8a:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <printTemplate+0x254>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f006 fdd2 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000e94:	4a56      	ldr	r2, [pc, #344]	; (8000ff0 <printTemplate+0x260>)
 8000e96:	2101      	movs	r1, #1
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f006 fdcd 	bl	8007a38 <lcd_print>
}
 8000e9e:	e086      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 4) {
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d10f      	bne.n	8000ec6 <printTemplate+0x136>
			lcd_clear();
 8000ea6:	f006 fdf3 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f007 fb1a 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <printTemplate+0x254>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f006 fdbf 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000eba:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <printTemplate+0x264>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f006 fdba 	bl	8007a38 <lcd_print>
}
 8000ec4:	e073      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 5) {
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d170      	bne.n	8000fae <printTemplate+0x21e>
			lcd_clear();
 8000ecc:	f006 fde0 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f007 fb07 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ed6:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <printTemplate+0x254>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2001      	movs	r0, #1
 8000edc:	f006 fdac 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <printTemplate+0x268>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f006 fda7 	bl	8007a38 <lcd_print>
}
 8000eea:	e060      	b.n	8000fae <printTemplate+0x21e>
	} else if(type == 3) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d15d      	bne.n	8000fae <printTemplate+0x21e>
		if(page == 1) {
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10f      	bne.n	8000f18 <printTemplate+0x188>
			lcd_clear();
 8000ef8:	f006 fdca 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f007 faf1 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f02:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <printTemplate+0x26c>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f006 fd96 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f0c:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <printTemplate+0x258>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2002      	movs	r0, #2
 8000f12:	f006 fd91 	bl	8007a38 <lcd_print>
}
 8000f16:	e04a      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 2) {
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d10f      	bne.n	8000f3e <printTemplate+0x1ae>
			lcd_clear();
 8000f1e:	f006 fdb7 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000f22:	2064      	movs	r0, #100	; 0x64
 8000f24:	f007 fade 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f28:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <printTemplate+0x26c>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f006 fd83 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f32:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <printTemplate+0x25c>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	2002      	movs	r0, #2
 8000f38:	f006 fd7e 	bl	8007a38 <lcd_print>
}
 8000f3c:	e037      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 3) {
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d10f      	bne.n	8000f64 <printTemplate+0x1d4>
			lcd_clear();
 8000f44:	f006 fda4 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f007 facb 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f4e:	4a2b      	ldr	r2, [pc, #172]	; (8000ffc <printTemplate+0x26c>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fd70 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f58:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <printTemplate+0x260>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fd6b 	bl	8007a38 <lcd_print>
}
 8000f62:	e024      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 4) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d10f      	bne.n	8000f8a <printTemplate+0x1fa>
			lcd_clear();
 8000f6a:	f006 fd91 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f007 fab8 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <printTemplate+0x26c>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f006 fd5d 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <printTemplate+0x264>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	2002      	movs	r0, #2
 8000f84:	f006 fd58 	bl	8007a38 <lcd_print>
}
 8000f88:	e011      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 5) {
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d10e      	bne.n	8000fae <printTemplate+0x21e>
			lcd_clear();
 8000f90:	f006 fd7e 	bl	8007a90 <lcd_clear>
			HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f007 faa5 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <printTemplate+0x26c>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f006 fd4a 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <printTemplate+0x268>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f006 fd45 	bl	8007a38 <lcd_print>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800ccf8 	.word	0x0800ccf8
 8000fbc:	0800cd00 	.word	0x0800cd00
 8000fc0:	0800cd04 	.word	0x0800cd04
 8000fc4:	0800cd08 	.word	0x0800cd08
 8000fc8:	0800cd0c 	.word	0x0800cd0c
 8000fcc:	0800cd10 	.word	0x0800cd10
 8000fd0:	0800cd14 	.word	0x0800cd14
 8000fd4:	0800cd18 	.word	0x0800cd18
 8000fd8:	0800cd1c 	.word	0x0800cd1c
 8000fdc:	0800cd20 	.word	0x0800cd20
 8000fe0:	0800cd24 	.word	0x0800cd24
 8000fe4:	0800cd28 	.word	0x0800cd28
 8000fe8:	0800cd30 	.word	0x0800cd30
 8000fec:	0800cd44 	.word	0x0800cd44
 8000ff0:	0800cd58 	.word	0x0800cd58
 8000ff4:	0800cd6c 	.word	0x0800cd6c
 8000ff8:	0800cd80 	.word	0x0800cd80
 8000ffc:	0800cd94 	.word	0x0800cd94

08001000 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d118      	bne.n	8001040 <printCredentials+0x40>
		//machine id yazdır
		if(dilSecim == 0) {
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <printCredentials+0x48>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d105      	bne.n	8001022 <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <printCredentials+0x4c>)
 8001018:	2101      	movs	r1, #1
 800101a:	2001      	movs	r0, #1
 800101c:	f006 fd0c 	bl	8007a38 <lcd_print>
 8001020:	e004      	b.n	800102c <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <printCredentials+0x50>)
 8001024:	2101      	movs	r1, #1
 8001026:	2001      	movs	r0, #1
 8001028:	f006 fd06 	bl	8007a38 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <printCredentials+0x54>)
 800102e:	2101      	movs	r1, #1
 8001030:	2002      	movs	r0, #2
 8001032:	f006 fd01 	bl	8007a38 <lcd_print>
		lcd_print(2, 13, "    ");
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <printCredentials+0x58>)
 8001038:	210d      	movs	r1, #13
 800103a:	2002      	movs	r0, #2
 800103c:	f006 fcfc 	bl	8007a38 <lcd_print>
	} else if(type == 2) {
		//wifi ssid yazdır
	} else {
		//wifi pass yazdır
	}
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000020d 	.word	0x2000020d
 800104c:	0800cd9c 	.word	0x0800cd9c
 8001050:	0800cdb0 	.word	0x0800cdb0
 8001054:	20000190 	.word	0x20000190
 8001058:	0800cdc4 	.word	0x0800cdc4

0800105c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001060:	f3bf 8f4f 	dsb	sy
}
 8001064:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <__NVIC_SystemReset+0x24>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800106e:	4904      	ldr	r1, [pc, #16]	; (8001080 <__NVIC_SystemReset+0x24>)
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_SystemReset+0x28>)
 8001072:	4313      	orrs	r3, r2
 8001074:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001076:	f3bf 8f4f 	dsb	sy
}
 800107a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <__NVIC_SystemReset+0x20>
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	05fa0004 	.word	0x05fa0004

08001088 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800108e:	2101      	movs	r1, #1
 8001090:	488e      	ldr	r0, [pc, #568]	; (80012cc <menu+0x244>)
 8001092:	f007 fff7 	bl	8009084 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 808e 	bne.w	80011ba <menu+0x132>
 800109e:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <menu+0x248>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	f083 0301 	eor.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 8086 	beq.w	80011ba <menu+0x132>
		menuSayac = menuSayac+1;
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <menu+0x24c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b87      	ldr	r3, [pc, #540]	; (80012d4 <menu+0x24c>)
 80010b8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80010ba:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <menu+0x24c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b24      	cmp	r3, #36	; 0x24
 80010c0:	d102      	bne.n	80010c8 <menu+0x40>
			menuSayac = 1;
 80010c2:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <menu+0x24c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80010c8:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <menu+0x24c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d106      	bne.n	80010de <menu+0x56>
 80010d0:	4b81      	ldr	r3, [pc, #516]	; (80012d8 <menu+0x250>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <menu+0x56>
			menuSayac = 21;
 80010d8:	4b7e      	ldr	r3, [pc, #504]	; (80012d4 <menu+0x24c>)
 80010da:	2215      	movs	r2, #21
 80010dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80010de:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <menu+0x24c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d106      	bne.n	80010f4 <menu+0x6c>
 80010e6:	4b7d      	ldr	r3, [pc, #500]	; (80012dc <menu+0x254>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <menu+0x6c>
			menuSayac = 16;
 80010ee:	4b79      	ldr	r3, [pc, #484]	; (80012d4 <menu+0x24c>)
 80010f0:	2210      	movs	r2, #16
 80010f2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80010f4:	4b77      	ldr	r3, [pc, #476]	; (80012d4 <menu+0x24c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b0d      	cmp	r3, #13
 80010fa:	d106      	bne.n	800110a <menu+0x82>
 80010fc:	4b77      	ldr	r3, [pc, #476]	; (80012dc <menu+0x254>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <menu+0x82>
			menuSayac = 16;
 8001104:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <menu+0x24c>)
 8001106:	2210      	movs	r2, #16
 8001108:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <menu+0x24c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b09      	cmp	r3, #9
 8001110:	d106      	bne.n	8001120 <menu+0x98>
 8001112:	4b72      	ldr	r3, [pc, #456]	; (80012dc <menu+0x254>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d102      	bne.n	8001120 <menu+0x98>
			menuSayac = 13;
 800111a:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <menu+0x24c>)
 800111c:	220d      	movs	r2, #13
 800111e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001120:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <menu+0x24c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0a      	cmp	r3, #10
 8001126:	d10a      	bne.n	800113e <menu+0xb6>
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <menu+0x258>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d003      	beq.n	8001138 <menu+0xb0>
 8001130:	4b6b      	ldr	r3, [pc, #428]	; (80012e0 <menu+0x258>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d102      	bne.n	800113e <menu+0xb6>
			menuSayac = 11;
 8001138:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <menu+0x24c>)
 800113a:	220b      	movs	r2, #11
 800113c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800113e:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <menu+0x24c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	d10e      	bne.n	8001164 <menu+0xdc>
 8001146:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <menu+0x25c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d003      	beq.n	8001156 <menu+0xce>
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <menu+0x25c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d106      	bne.n	8001164 <menu+0xdc>
 8001156:	4b61      	ldr	r3, [pc, #388]	; (80012dc <menu+0x254>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d102      	bne.n	8001164 <menu+0xdc>
			menuSayac = 16;
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <menu+0x24c>)
 8001160:	2210      	movs	r2, #16
 8001162:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001164:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <menu+0x24c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d10e      	bne.n	800118a <menu+0x102>
 800116c:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <menu+0x25c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d003      	beq.n	800117c <menu+0xf4>
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <menu+0x25c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d106      	bne.n	800118a <menu+0x102>
 800117c:	4b57      	ldr	r3, [pc, #348]	; (80012dc <menu+0x254>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d102      	bne.n	800118a <menu+0x102>
			menuSayac = 13;
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <menu+0x24c>)
 8001186:	220d      	movs	r2, #13
 8001188:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800118a:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <menu+0x24c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	d106      	bne.n	80011a0 <menu+0x118>
 8001192:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <menu+0x260>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d102      	bne.n	80011a0 <menu+0x118>
			menuSayac = 16;
 800119a:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <menu+0x24c>)
 800119c:	2210      	movs	r2, #16
 800119e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80011a0:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <menu+0x24c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b18      	cmp	r3, #24
 80011a6:	d106      	bne.n	80011b6 <menu+0x12e>
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <menu+0x250>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <menu+0x12e>
			menuSayac = 26;
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <menu+0x24c>)
 80011b2:	221a      	movs	r2, #26
 80011b4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80011b6:	f003 fb7b 	bl	80048b0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011ba:	2108      	movs	r1, #8
 80011bc:	484b      	ldr	r0, [pc, #300]	; (80012ec <menu+0x264>)
 80011be:	f007 ff61 	bl	8009084 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d175      	bne.n	80012b4 <menu+0x22c>
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <menu+0x248>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d06e      	beq.n	80012b4 <menu+0x22c>
		if (menuSayac <= 1) {
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <menu+0x24c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d802      	bhi.n	80011e4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <menu+0x24c>)
 80011e0:	2224      	movs	r2, #36	; 0x24
 80011e2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <menu+0x24c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <menu+0x24c>)
 80011ee:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <menu+0x24c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b14      	cmp	r3, #20
 80011f6:	d106      	bne.n	8001206 <menu+0x17e>
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <menu+0x250>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <menu+0x17e>
			menuSayac = 17;
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <menu+0x24c>)
 8001202:	2211      	movs	r2, #17
 8001204:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001206:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <menu+0x24c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d106      	bne.n	800121c <menu+0x194>
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <menu+0x254>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <menu+0x194>
			menuSayac = 7;
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <menu+0x24c>)
 8001218:	2207      	movs	r2, #7
 800121a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <menu+0x24c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d106      	bne.n	8001232 <menu+0x1aa>
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <menu+0x254>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <menu+0x1aa>
			menuSayac = 12;
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <menu+0x24c>)
 800122e:	220c      	movs	r2, #12
 8001230:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <menu+0x24c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	d106      	bne.n	8001248 <menu+0x1c0>
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <menu+0x254>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d102      	bne.n	8001248 <menu+0x1c0>
			menuSayac = 8;
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <menu+0x24c>)
 8001244:	2208      	movs	r2, #8
 8001246:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <menu+0x24c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b0a      	cmp	r3, #10
 800124e:	d10a      	bne.n	8001266 <menu+0x1de>
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <menu+0x258>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d003      	beq.n	8001260 <menu+0x1d8>
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <menu+0x258>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d102      	bne.n	8001266 <menu+0x1de>
			menuSayac = 9;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <menu+0x24c>)
 8001262:	2209      	movs	r2, #9
 8001264:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <menu+0x24c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d10a      	bne.n	8001284 <menu+0x1fc>
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <menu+0x25c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d003      	beq.n	800127e <menu+0x1f6>
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <menu+0x25c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d102      	bne.n	8001284 <menu+0x1fc>
			menuSayac = 11;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <menu+0x24c>)
 8001280:	220b      	movs	r2, #11
 8001282:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <menu+0x24c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d106      	bne.n	800129a <menu+0x212>
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <menu+0x260>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d102      	bne.n	800129a <menu+0x212>
			menuSayac = 14;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <menu+0x24c>)
 8001296:	220e      	movs	r2, #14
 8001298:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <menu+0x24c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b19      	cmp	r3, #25
 80012a0:	d106      	bne.n	80012b0 <menu+0x228>
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <menu+0x250>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <menu+0x228>
			menuSayac = 23;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <menu+0x24c>)
 80012ac:	2217      	movs	r2, #23
 80012ae:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012b0:	f003 fafe 	bl	80048b0 <bekle>
	}

	if (menuSayac == 0) {
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <menu+0x24c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d133      	bne.n	8001324 <menu+0x29c>
		if(dilSecim == 0) {
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <menu+0x268>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d121      	bne.n	8001308 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <menu+0x26c>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	e015      	b.n	80012f8 <menu+0x270>
 80012cc:	40010800 	.word	0x40010800
 80012d0:	2000021b 	.word	0x2000021b
 80012d4:	200001ec 	.word	0x200001ec
 80012d8:	200001fb 	.word	0x200001fb
 80012dc:	200001f4 	.word	0x200001f4
 80012e0:	200001f5 	.word	0x200001f5
 80012e4:	200001f6 	.word	0x200001f6
 80012e8:	200001f7 	.word	0x200001f7
 80012ec:	40011000 	.word	0x40011000
 80012f0:	2000020d 	.word	0x2000020d
 80012f4:	0800cdcc 	.word	0x0800cdcc
 80012f8:	f006 fb9e 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80012fc:	4a94      	ldr	r2, [pc, #592]	; (8001550 <menu+0x4c8>)
 80012fe:	2101      	movs	r1, #1
 8001300:	2002      	movs	r0, #2
 8001302:	f006 fb99 	bl	8007a38 <lcd_print>
 8001306:	e00d      	b.n	8001324 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001308:	4b92      	ldr	r3, [pc, #584]	; (8001554 <menu+0x4cc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d109      	bne.n	8001324 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001310:	4a91      	ldr	r2, [pc, #580]	; (8001558 <menu+0x4d0>)
 8001312:	2101      	movs	r1, #1
 8001314:	2001      	movs	r0, #1
 8001316:	f006 fb8f 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800131a:	4a90      	ldr	r2, [pc, #576]	; (800155c <menu+0x4d4>)
 800131c:	2101      	movs	r1, #1
 800131e:	2002      	movs	r0, #2
 8001320:	f006 fb8a 	bl	8007a38 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001324:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <menu+0x4d8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	f040 82b5 	bne.w	8001898 <menu+0x810>
		if(dilSecim == 0) {
 800132e:	4b89      	ldr	r3, [pc, #548]	; (8001554 <menu+0x4cc>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001336:	4a8b      	ldr	r2, [pc, #556]	; (8001564 <menu+0x4dc>)
 8001338:	2101      	movs	r1, #1
 800133a:	2001      	movs	r0, #1
 800133c:	f006 fb7c 	bl	8007a38 <lcd_print>
 8001340:	e008      	b.n	8001354 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001342:	4b84      	ldr	r3, [pc, #528]	; (8001554 <menu+0x4cc>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d104      	bne.n	8001354 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800134a:	4a87      	ldr	r2, [pc, #540]	; (8001568 <menu+0x4e0>)
 800134c:	2101      	movs	r1, #1
 800134e:	2001      	movs	r0, #1
 8001350:	f006 fb72 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001354:	4b85      	ldr	r3, [pc, #532]	; (800156c <menu+0x4e4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d123      	bne.n	80013a4 <menu+0x31c>
			if(dilSecim == 0) {
 800135c:	4b7d      	ldr	r3, [pc, #500]	; (8001554 <menu+0x4cc>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001364:	4a82      	ldr	r2, [pc, #520]	; (8001570 <menu+0x4e8>)
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f006 fb65 	bl	8007a38 <lcd_print>
 800136e:	e008      	b.n	8001382 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001370:	4b78      	ldr	r3, [pc, #480]	; (8001554 <menu+0x4cc>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d104      	bne.n	8001382 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001378:	4a7e      	ldr	r2, [pc, #504]	; (8001574 <menu+0x4ec>)
 800137a:	2101      	movs	r1, #1
 800137c:	2002      	movs	r0, #2
 800137e:	f006 fb5b 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001382:	4a7d      	ldr	r2, [pc, #500]	; (8001578 <menu+0x4f0>)
 8001384:	210f      	movs	r1, #15
 8001386:	2002      	movs	r0, #2
 8001388:	f006 fb56 	bl	8007a38 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800138c:	4b7b      	ldr	r3, [pc, #492]	; (800157c <menu+0x4f4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	220a      	movs	r2, #10
 8001392:	497b      	ldr	r1, [pc, #492]	; (8001580 <menu+0x4f8>)
 8001394:	4618      	mov	r0, r3
 8001396:	f00a fea1 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 800139a:	4a79      	ldr	r2, [pc, #484]	; (8001580 <menu+0x4f8>)
 800139c:	210e      	movs	r1, #14
 800139e:	2002      	movs	r0, #2
 80013a0:	f006 fb4a 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <menu+0x4e4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d123      	bne.n	80013f4 <menu+0x36c>
			if(dilSecim == 0) {
 80013ac:	4b69      	ldr	r3, [pc, #420]	; (8001554 <menu+0x4cc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80013b4:	4a73      	ldr	r2, [pc, #460]	; (8001584 <menu+0x4fc>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	2002      	movs	r0, #2
 80013ba:	f006 fb3d 	bl	8007a38 <lcd_print>
 80013be:	e008      	b.n	80013d2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <menu+0x4cc>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d104      	bne.n	80013d2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80013c8:	4a6f      	ldr	r2, [pc, #444]	; (8001588 <menu+0x500>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	2002      	movs	r0, #2
 80013ce:	f006 fb33 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80013d2:	4a6e      	ldr	r2, [pc, #440]	; (800158c <menu+0x504>)
 80013d4:	210f      	movs	r1, #15
 80013d6:	2002      	movs	r0, #2
 80013d8:	f006 fb2e 	bl	8007a38 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80013dc:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <menu+0x508>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	220a      	movs	r2, #10
 80013e2:	4967      	ldr	r1, [pc, #412]	; (8001580 <menu+0x4f8>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00a fe79 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 80013ea:	4a65      	ldr	r2, [pc, #404]	; (8001580 <menu+0x4f8>)
 80013ec:	210e      	movs	r1, #14
 80013ee:	2002      	movs	r0, #2
 80013f0:	f006 fb22 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <menu+0x4e4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d123      	bne.n	8001444 <menu+0x3bc>
			if(dilSecim == 0) {
 80013fc:	4b55      	ldr	r3, [pc, #340]	; (8001554 <menu+0x4cc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <menu+0x50c>)
 8001406:	2101      	movs	r1, #1
 8001408:	2002      	movs	r0, #2
 800140a:	f006 fb15 	bl	8007a38 <lcd_print>
 800140e:	e008      	b.n	8001422 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <menu+0x4cc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d104      	bne.n	8001422 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001418:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <menu+0x510>)
 800141a:	2101      	movs	r1, #1
 800141c:	2002      	movs	r0, #2
 800141e:	f006 fb0b 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001422:	4a5a      	ldr	r2, [pc, #360]	; (800158c <menu+0x504>)
 8001424:	210f      	movs	r1, #15
 8001426:	2002      	movs	r0, #2
 8001428:	f006 fb06 	bl	8007a38 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <menu+0x514>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	220a      	movs	r2, #10
 8001432:	4953      	ldr	r1, [pc, #332]	; (8001580 <menu+0x4f8>)
 8001434:	4618      	mov	r0, r3
 8001436:	f00a fe51 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 800143a:	4a51      	ldr	r2, [pc, #324]	; (8001580 <menu+0x4f8>)
 800143c:	210e      	movs	r1, #14
 800143e:	2002      	movs	r0, #2
 8001440:	f006 fafa 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <menu+0x4e4>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d123      	bne.n	8001494 <menu+0x40c>
			if(dilSecim == 0) {
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <menu+0x4cc>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <menu+0x518>)
 8001456:	2101      	movs	r1, #1
 8001458:	2002      	movs	r0, #2
 800145a:	f006 faed 	bl	8007a38 <lcd_print>
 800145e:	e008      	b.n	8001472 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001460:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <menu+0x4cc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d104      	bne.n	8001472 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001468:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <menu+0x51c>)
 800146a:	2101      	movs	r1, #1
 800146c:	2002      	movs	r0, #2
 800146e:	f006 fae3 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001472:	4a46      	ldr	r2, [pc, #280]	; (800158c <menu+0x504>)
 8001474:	210f      	movs	r1, #15
 8001476:	2002      	movs	r0, #2
 8001478:	f006 fade 	bl	8007a38 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <menu+0x520>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	220a      	movs	r2, #10
 8001482:	493f      	ldr	r1, [pc, #252]	; (8001580 <menu+0x4f8>)
 8001484:	4618      	mov	r0, r3
 8001486:	f00a fe29 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 800148a:	4a3d      	ldr	r2, [pc, #244]	; (8001580 <menu+0x4f8>)
 800148c:	210e      	movs	r1, #14
 800148e:	2002      	movs	r0, #2
 8001490:	f006 fad2 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <menu+0x4e4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d123      	bne.n	80014e4 <menu+0x45c>
			if(dilSecim == 0) {
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <menu+0x4cc>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80014a4:	4a41      	ldr	r2, [pc, #260]	; (80015ac <menu+0x524>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	2002      	movs	r0, #2
 80014aa:	f006 fac5 	bl	8007a38 <lcd_print>
 80014ae:	e008      	b.n	80014c2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <menu+0x4cc>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d104      	bne.n	80014c2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80014b8:	4a3d      	ldr	r2, [pc, #244]	; (80015b0 <menu+0x528>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	2002      	movs	r0, #2
 80014be:	f006 fabb 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <menu+0x504>)
 80014c4:	210f      	movs	r1, #15
 80014c6:	2002      	movs	r0, #2
 80014c8:	f006 fab6 	bl	8007a38 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <menu+0x52c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	220a      	movs	r2, #10
 80014d2:	492b      	ldr	r1, [pc, #172]	; (8001580 <menu+0x4f8>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00a fe01 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 80014da:	4a29      	ldr	r2, [pc, #164]	; (8001580 <menu+0x4f8>)
 80014dc:	210e      	movs	r1, #14
 80014de:	2002      	movs	r0, #2
 80014e0:	f006 faaa 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <menu+0x4e4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d123      	bne.n	8001534 <menu+0x4ac>
			if(dilSecim == 0) {
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <menu+0x4cc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80014f4:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <menu+0x530>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f006 fa9d 	bl	8007a38 <lcd_print>
 80014fe:	e008      	b.n	8001512 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <menu+0x4cc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d104      	bne.n	8001512 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001508:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <menu+0x534>)
 800150a:	2101      	movs	r1, #1
 800150c:	2002      	movs	r0, #2
 800150e:	f006 fa93 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <menu+0x504>)
 8001514:	210f      	movs	r1, #15
 8001516:	2002      	movs	r0, #2
 8001518:	f006 fa8e 	bl	8007a38 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <menu+0x538>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	220a      	movs	r2, #10
 8001522:	4917      	ldr	r1, [pc, #92]	; (8001580 <menu+0x4f8>)
 8001524:	4618      	mov	r0, r3
 8001526:	f00a fdd9 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <menu+0x4f8>)
 800152c:	210e      	movs	r1, #14
 800152e:	2002      	movs	r0, #2
 8001530:	f006 fa82 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <menu+0x4e4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b06      	cmp	r3, #6
 800153a:	d15f      	bne.n	80015fc <menu+0x574>
			if(dilSecim == 0) {
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <menu+0x4cc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d141      	bne.n	80015c8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <menu+0x53c>)
 8001546:	2101      	movs	r1, #1
 8001548:	2002      	movs	r0, #2
 800154a:	f006 fa75 	bl	8007a38 <lcd_print>
 800154e:	e044      	b.n	80015da <menu+0x552>
 8001550:	0800cde0 	.word	0x0800cde0
 8001554:	2000020d 	.word	0x2000020d
 8001558:	0800cdf4 	.word	0x0800cdf4
 800155c:	0800ce08 	.word	0x0800ce08
 8001560:	200001ec 	.word	0x200001ec
 8001564:	0800ce1c 	.word	0x0800ce1c
 8001568:	0800ce30 	.word	0x0800ce30
 800156c:	200001ee 	.word	0x200001ee
 8001570:	0800ce44 	.word	0x0800ce44
 8001574:	0800ce54 	.word	0x0800ce54
 8001578:	0800ce64 	.word	0x0800ce64
 800157c:	2000020e 	.word	0x2000020e
 8001580:	20000188 	.word	0x20000188
 8001584:	0800ce68 	.word	0x0800ce68
 8001588:	0800ce78 	.word	0x0800ce78
 800158c:	0800ce88 	.word	0x0800ce88
 8001590:	2000020f 	.word	0x2000020f
 8001594:	0800ce8c 	.word	0x0800ce8c
 8001598:	0800ce9c 	.word	0x0800ce9c
 800159c:	20000210 	.word	0x20000210
 80015a0:	0800ceac 	.word	0x0800ceac
 80015a4:	0800cebc 	.word	0x0800cebc
 80015a8:	20000211 	.word	0x20000211
 80015ac:	0800cecc 	.word	0x0800cecc
 80015b0:	0800cedc 	.word	0x0800cedc
 80015b4:	20000212 	.word	0x20000212
 80015b8:	0800ceec 	.word	0x0800ceec
 80015bc:	0800cefc 	.word	0x0800cefc
 80015c0:	20000213 	.word	0x20000213
 80015c4:	0800cf0c 	.word	0x0800cf0c
			} else if(dilSecim == 1) {
 80015c8:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <menu+0x680>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80015d0:	4a4e      	ldr	r2, [pc, #312]	; (800170c <menu+0x684>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fa2f 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015da:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <menu+0x688>)
 80015dc:	210f      	movs	r1, #15
 80015de:	2002      	movs	r0, #2
 80015e0:	f006 fa2a 	bl	8007a38 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80015e4:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <menu+0x68c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	220a      	movs	r2, #10
 80015ea:	494b      	ldr	r1, [pc, #300]	; (8001718 <menu+0x690>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a fd75 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 80015f2:	4a49      	ldr	r2, [pc, #292]	; (8001718 <menu+0x690>)
 80015f4:	210e      	movs	r1, #14
 80015f6:	2002      	movs	r0, #2
 80015f8:	f006 fa1e 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <menu+0x694>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b07      	cmp	r3, #7
 8001602:	d123      	bne.n	800164c <menu+0x5c4>
			if(dilSecim == 0) {
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <menu+0x680>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800160c:	4a44      	ldr	r2, [pc, #272]	; (8001720 <menu+0x698>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f006 fa11 	bl	8007a38 <lcd_print>
 8001616:	e008      	b.n	800162a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <menu+0x680>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d104      	bne.n	800162a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001620:	4a40      	ldr	r2, [pc, #256]	; (8001724 <menu+0x69c>)
 8001622:	2101      	movs	r1, #1
 8001624:	2002      	movs	r0, #2
 8001626:	f006 fa07 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800162a:	4a39      	ldr	r2, [pc, #228]	; (8001710 <menu+0x688>)
 800162c:	210f      	movs	r1, #15
 800162e:	2002      	movs	r0, #2
 8001630:	f006 fa02 	bl	8007a38 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <menu+0x6a0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	220a      	movs	r2, #10
 800163a:	4937      	ldr	r1, [pc, #220]	; (8001718 <menu+0x690>)
 800163c:	4618      	mov	r0, r3
 800163e:	f00a fd4d 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 8001642:	4a35      	ldr	r2, [pc, #212]	; (8001718 <menu+0x690>)
 8001644:	210e      	movs	r1, #14
 8001646:	2002      	movs	r0, #2
 8001648:	f006 f9f6 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <menu+0x694>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d123      	bne.n	800169c <menu+0x614>
			if(dilSecim == 0) {
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <menu+0x680>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800165c:	4a33      	ldr	r2, [pc, #204]	; (800172c <menu+0x6a4>)
 800165e:	2101      	movs	r1, #1
 8001660:	2002      	movs	r0, #2
 8001662:	f006 f9e9 	bl	8007a38 <lcd_print>
 8001666:	e008      	b.n	800167a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <menu+0x680>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d104      	bne.n	800167a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001670:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <menu+0x6a8>)
 8001672:	2101      	movs	r1, #1
 8001674:	2002      	movs	r0, #2
 8001676:	f006 f9df 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <menu+0x688>)
 800167c:	210f      	movs	r1, #15
 800167e:	2002      	movs	r0, #2
 8001680:	f006 f9da 	bl	8007a38 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <menu+0x6ac>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	220a      	movs	r2, #10
 800168a:	4923      	ldr	r1, [pc, #140]	; (8001718 <menu+0x690>)
 800168c:	4618      	mov	r0, r3
 800168e:	f00a fd25 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <menu+0x690>)
 8001694:	210e      	movs	r1, #14
 8001696:	2002      	movs	r0, #2
 8001698:	f006 f9ce 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <menu+0x694>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d123      	bne.n	80016ec <menu+0x664>
			if(dilSecim == 0) {
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <menu+0x680>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <menu+0x6b0>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	2002      	movs	r0, #2
 80016b2:	f006 f9c1 	bl	8007a38 <lcd_print>
 80016b6:	e008      	b.n	80016ca <menu+0x642>
			} else if(dilSecim == 1) {
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <menu+0x680>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d104      	bne.n	80016ca <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <menu+0x6b4>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	2002      	movs	r0, #2
 80016c6:	f006 f9b7 	bl	8007a38 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <menu+0x6b8>)
 80016cc:	2110      	movs	r1, #16
 80016ce:	2002      	movs	r0, #2
 80016d0:	f006 f9b2 	bl	8007a38 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <menu+0x6bc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	220a      	movs	r2, #10
 80016da:	490f      	ldr	r1, [pc, #60]	; (8001718 <menu+0x690>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f00a fcfd 	bl	800c0dc <itoa>
			lcd_print(2, 15, snum);
 80016e2:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <menu+0x690>)
 80016e4:	210f      	movs	r1, #15
 80016e6:	2002      	movs	r0, #2
 80016e8:	f006 f9a6 	bl	8007a38 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <menu+0x694>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b0a      	cmp	r3, #10
 80016f2:	d134      	bne.n	800175e <menu+0x6d6>
			if(dilSecim == 0) {
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <menu+0x680>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d127      	bne.n	800174c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <menu+0x6c0>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2002      	movs	r0, #2
 8001702:	f006 f999 	bl	8007a38 <lcd_print>
 8001706:	e02a      	b.n	800175e <menu+0x6d6>
 8001708:	2000020d 	.word	0x2000020d
 800170c:	0800cf1c 	.word	0x0800cf1c
 8001710:	0800ce88 	.word	0x0800ce88
 8001714:	20000214 	.word	0x20000214
 8001718:	20000188 	.word	0x20000188
 800171c:	200001ee 	.word	0x200001ee
 8001720:	0800cf2c 	.word	0x0800cf2c
 8001724:	0800cf3c 	.word	0x0800cf3c
 8001728:	20000215 	.word	0x20000215
 800172c:	0800cf4c 	.word	0x0800cf4c
 8001730:	0800cf5c 	.word	0x0800cf5c
 8001734:	20000216 	.word	0x20000216
 8001738:	0800cf6c 	.word	0x0800cf6c
 800173c:	0800cf7c 	.word	0x0800cf7c
 8001740:	0800cf8c 	.word	0x0800cf8c
 8001744:	20000217 	.word	0x20000217
 8001748:	0800cf90 	.word	0x0800cf90
			} else if(dilSecim == 1) {
 800174c:	4b82      	ldr	r3, [pc, #520]	; (8001958 <menu+0x8d0>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d104      	bne.n	800175e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001754:	4a81      	ldr	r2, [pc, #516]	; (800195c <menu+0x8d4>)
 8001756:	2101      	movs	r1, #1
 8001758:	2002      	movs	r0, #2
 800175a:	f006 f96d 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800175e:	2102      	movs	r1, #2
 8001760:	487f      	ldr	r0, [pc, #508]	; (8001960 <menu+0x8d8>)
 8001762:	f007 fc8f 	bl	8009084 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d119      	bne.n	80017a0 <menu+0x718>
 800176c:	4b7d      	ldr	r3, [pc, #500]	; (8001964 <menu+0x8dc>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <menu+0x718>
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <menu+0x8e0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001782:	4b7a      	ldr	r3, [pc, #488]	; (800196c <menu+0x8e4>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b78      	ldr	r3, [pc, #480]	; (800196c <menu+0x8e4>)
 800178c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <menu+0x8e4>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0a      	cmp	r3, #10
 8001794:	d902      	bls.n	800179c <menu+0x714>
				hataGostermeSirasi = 0;
 8001796:	4b75      	ldr	r3, [pc, #468]	; (800196c <menu+0x8e4>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800179c:	f003 f888 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017a0:	2104      	movs	r1, #4
 80017a2:	486f      	ldr	r0, [pc, #444]	; (8001960 <menu+0x8d8>)
 80017a4:	f007 fc6e 	bl	8009084 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d119      	bne.n	80017e2 <menu+0x75a>
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <menu+0x8dc>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d012      	beq.n	80017e2 <menu+0x75a>
 80017bc:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <menu+0x8e0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10e      	bne.n	80017e2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <menu+0x8e4>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b67      	ldr	r3, [pc, #412]	; (800196c <menu+0x8e4>)
 80017ce:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80017d0:	4b66      	ldr	r3, [pc, #408]	; (800196c <menu+0x8e4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b0b      	cmp	r3, #11
 80017d6:	d902      	bls.n	80017de <menu+0x756>
	    		hataGostermeSirasi = 10;
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <menu+0x8e4>)
 80017da:	220a      	movs	r2, #10
 80017dc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80017de:	f003 f867 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80017e2:	2108      	movs	r1, #8
 80017e4:	485e      	ldr	r0, [pc, #376]	; (8001960 <menu+0x8d8>)
 80017e6:	f007 fc4d 	bl	8009084 <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d153      	bne.n	8001898 <menu+0x810>
 80017f0:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <menu+0x8dc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f083 0301 	eor.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d04c      	beq.n	8001898 <menu+0x810>
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <menu+0x8e4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b0a      	cmp	r3, #10
 8001804:	d148      	bne.n	8001898 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001806:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <menu+0x8e8>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <menu+0x8ec>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <menu+0x8f0>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	4b56      	ldr	r3, [pc, #344]	; (8001974 <menu+0x8ec>)
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <menu+0x8f4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b52      	ldr	r3, [pc, #328]	; (8001974 <menu+0x8ec>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <menu+0x8f8>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <menu+0x8ec>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <menu+0x8fc>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <menu+0x8ec>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800184c:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <menu+0x900>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <menu+0x8ec>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <menu+0x904>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <menu+0x8ec>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <menu+0x908>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <menu+0x8ec>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <menu+0x90c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <menu+0x8ec>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <menu+0x910>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <menu+0x8ec>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001892:	4b42      	ldr	r3, [pc, #264]	; (800199c <menu+0x914>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001898:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <menu+0x918>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b02      	cmp	r3, #2
 800189e:	f040 80fc 	bne.w	8001a9a <menu+0xa12>
		if(dilSecim == 0) {
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <menu+0x8d0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80018aa:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <menu+0x91c>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f006 f8c2 	bl	8007a38 <lcd_print>
 80018b4:	e008      	b.n	80018c8 <menu+0x840>
		} else if(dilSecim == 1) {
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <menu+0x8d0>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <menu+0x920>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	2001      	movs	r0, #1
 80018c4:	f006 f8b8 	bl	8007a38 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <menu+0x8e0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d003      	beq.n	80018d8 <menu+0x850>
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <menu+0x8e0>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d112      	bne.n	80018fe <menu+0x876>
			if(dilSecim == 0) {
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <menu+0x8d0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80018e0:	4a32      	ldr	r2, [pc, #200]	; (80019ac <menu+0x924>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	2002      	movs	r0, #2
 80018e6:	f006 f8a7 	bl	8007a38 <lcd_print>
 80018ea:	e008      	b.n	80018fe <menu+0x876>
			} else if(dilSecim == 1) {
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <menu+0x8d0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d104      	bne.n	80018fe <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80018f4:	4a2e      	ldr	r2, [pc, #184]	; (80019b0 <menu+0x928>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f006 f89d 	bl	8007a38 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <menu+0x92c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <menu+0x8ac>
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <menu+0x8e0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d112      	bne.n	8001934 <menu+0x8ac>
			if(dilSecim == 0) {
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <menu+0x8d0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001916:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <menu+0x930>)
 8001918:	2101      	movs	r1, #1
 800191a:	2002      	movs	r0, #2
 800191c:	f006 f88c 	bl	8007a38 <lcd_print>
 8001920:	e008      	b.n	8001934 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <menu+0x8d0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d104      	bne.n	8001934 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 800192a:	4a24      	ldr	r2, [pc, #144]	; (80019bc <menu+0x934>)
 800192c:	2101      	movs	r1, #1
 800192e:	2002      	movs	r0, #2
 8001930:	f006 f882 	bl	8007a38 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <menu+0x92c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d14c      	bne.n	80019d6 <menu+0x94e>
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <menu+0x8e0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d148      	bne.n	80019d6 <menu+0x94e>
			if(dilSecim == 0) {
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <menu+0x8d0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d13b      	bne.n	80019c4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <menu+0x938>)
 800194e:	2101      	movs	r1, #1
 8001950:	2002      	movs	r0, #2
 8001952:	f006 f871 	bl	8007a38 <lcd_print>
 8001956:	e03e      	b.n	80019d6 <menu+0x94e>
 8001958:	2000020d 	.word	0x2000020d
 800195c:	0800cfa4 	.word	0x0800cfa4
 8001960:	40010800 	.word	0x40010800
 8001964:	2000021b 	.word	0x2000021b
 8001968:	200001fb 	.word	0x200001fb
 800196c:	200001ee 	.word	0x200001ee
 8001970:	2000020e 	.word	0x2000020e
 8001974:	20000118 	.word	0x20000118
 8001978:	2000020f 	.word	0x2000020f
 800197c:	20000210 	.word	0x20000210
 8001980:	20000211 	.word	0x20000211
 8001984:	20000212 	.word	0x20000212
 8001988:	20000213 	.word	0x20000213
 800198c:	20000214 	.word	0x20000214
 8001990:	20000215 	.word	0x20000215
 8001994:	20000216 	.word	0x20000216
 8001998:	20000217 	.word	0x20000217
 800199c:	20000218 	.word	0x20000218
 80019a0:	200001ec 	.word	0x200001ec
 80019a4:	0800cfb8 	.word	0x0800cfb8
 80019a8:	0800cfcc 	.word	0x0800cfcc
 80019ac:	0800cfe0 	.word	0x0800cfe0
 80019b0:	0800cff4 	.word	0x0800cff4
 80019b4:	200001ed 	.word	0x200001ed
 80019b8:	0800d008 	.word	0x0800d008
 80019bc:	0800d018 	.word	0x0800d018
 80019c0:	0800d028 	.word	0x0800d028
			} else if(dilSecim == 1) {
 80019c4:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <menu+0xba0>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d104      	bne.n	80019d6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 80019cc:	4a97      	ldr	r2, [pc, #604]	; (8001c2c <menu+0xba4>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	2002      	movs	r0, #2
 80019d2:	f006 f831 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019d6:	2102      	movs	r1, #2
 80019d8:	4895      	ldr	r0, [pc, #596]	; (8001c30 <menu+0xba8>)
 80019da:	f007 fb53 	bl	8009084 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d119      	bne.n	8001a18 <menu+0x990>
 80019e4:	4b93      	ldr	r3, [pc, #588]	; (8001c34 <menu+0xbac>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <menu+0x990>
 80019f2:	4b91      	ldr	r3, [pc, #580]	; (8001c38 <menu+0xbb0>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10e      	bne.n	8001a18 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 80019fa:	4b90      	ldr	r3, [pc, #576]	; (8001c3c <menu+0xbb4>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b8e      	ldr	r3, [pc, #568]	; (8001c3c <menu+0xbb4>)
 8001a04:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a06:	4b8d      	ldr	r3, [pc, #564]	; (8001c3c <menu+0xbb4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d902      	bls.n	8001a14 <menu+0x98c>
				calismaSekli = 0;
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <menu+0xbb4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a14:	f002 ff4c 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4885      	ldr	r0, [pc, #532]	; (8001c30 <menu+0xba8>)
 8001a1c:	f007 fb32 	bl	8009084 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d119      	bne.n	8001a5a <menu+0x9d2>
 8001a26:	4b83      	ldr	r3, [pc, #524]	; (8001c34 <menu+0xbac>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <menu+0x9d2>
 8001a34:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <menu+0xbb0>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10e      	bne.n	8001a5a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001a3c:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <menu+0xbb4>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b7d      	ldr	r3, [pc, #500]	; (8001c3c <menu+0xbb4>)
 8001a46:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a48:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <menu+0xbb4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <menu+0x9ce>
	    		calismaSekli = 1;
 8001a50:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <menu+0xbb4>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a56:	f002 ff2b 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	4874      	ldr	r0, [pc, #464]	; (8001c30 <menu+0xba8>)
 8001a5e:	f007 fb11 	bl	8009084 <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d118      	bne.n	8001a9a <menu+0xa12>
 8001a68:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <menu+0xbac>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d011      	beq.n	8001a9a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001a76:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <menu+0xbb4>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <menu+0xbb8>)
 8001a7c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <menu+0xbb4>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d106      	bne.n	8001a94 <menu+0xa0c>
				altLimit = 1;
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <menu+0xbbc>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <menu+0xbbc>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <menu+0xbb8>)
 8001a92:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a94:	4b6c      	ldr	r3, [pc, #432]	; (8001c48 <menu+0xbc0>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001a9a:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <menu+0xbc4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	f040 8083 	bne.w	8001baa <menu+0xb22>
		if(dilSecim == 0) {
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <menu+0xba0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <menu+0xbc8>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f005 ffc1 	bl	8007a38 <lcd_print>
 8001ab6:	e008      	b.n	8001aca <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ab8:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <menu+0xba0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d104      	bne.n	8001aca <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ac0:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <menu+0xbcc>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f005 ffb7 	bl	8007a38 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <menu+0xbd0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d113      	bne.n	8001afa <menu+0xa72>
			if(dilSecim == 0) {
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <menu+0xba0>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001ada:	4a60      	ldr	r2, [pc, #384]	; (8001c5c <menu+0xbd4>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f005 ffaa 	bl	8007a38 <lcd_print>
 8001ae4:	e012      	b.n	8001b0c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001ae6:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <menu+0xba0>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10e      	bne.n	8001b0c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001aee:	4a5c      	ldr	r2, [pc, #368]	; (8001c60 <menu+0xbd8>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	2002      	movs	r0, #2
 8001af4:	f005 ffa0 	bl	8007a38 <lcd_print>
 8001af8:	e008      	b.n	8001b0c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <menu+0xbd0>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d104      	bne.n	8001b0c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001b02:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <menu+0xbdc>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	2002      	movs	r0, #2
 8001b08:	f005 ff96 	bl	8007a38 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4848      	ldr	r0, [pc, #288]	; (8001c30 <menu+0xba8>)
 8001b10:	f007 fab8 	bl	8009084 <HAL_GPIO_ReadPin>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d115      	bne.n	8001b46 <menu+0xabe>
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <menu+0xbac>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f083 0301 	eor.w	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <menu+0xbd0>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <menu+0xbd0>)
 8001b32:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <menu+0xbd0>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d902      	bls.n	8001b42 <menu+0xaba>
				emniyetCercevesi = 0;
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <menu+0xbd0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b42:	f002 feb5 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b46:	2104      	movs	r1, #4
 8001b48:	4839      	ldr	r0, [pc, #228]	; (8001c30 <menu+0xba8>)
 8001b4a:	f007 fa9b 	bl	8009084 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d115      	bne.n	8001b80 <menu+0xaf8>
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <menu+0xbac>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00e      	beq.n	8001b80 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <menu+0xbd0>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <menu+0xbd0>)
 8001b6c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <menu+0xbd0>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <menu+0xbd0>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b7c:	f002 fe98 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001b80:	2108      	movs	r1, #8
 8001b82:	482b      	ldr	r0, [pc, #172]	; (8001c30 <menu+0xba8>)
 8001b84:	f007 fa7e 	bl	8009084 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10d      	bne.n	8001baa <menu+0xb22>
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <menu+0xbac>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <menu+0xbd0>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <menu+0xbb8>)
 8001ba2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <menu+0xbc0>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <menu+0xbc4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	f040 80ba 	bne.w	8001d28 <menu+0xca0>
		if(dilSecim == 0) {
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <menu+0xba0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <menu+0xbe0>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f005 ff39 	bl	8007a38 <lcd_print>
 8001bc6:	e008      	b.n	8001bda <menu+0xb52>
		} else if(dilSecim == 1) {
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <menu+0xba0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d104      	bne.n	8001bda <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <menu+0xbe4>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f005 ff2f 	bl	8007a38 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <menu+0xbe8>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <menu+0xb82>
			if(dilSecim == 0) {
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <menu+0xba0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <menu+0xbd4>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f005 ff22 	bl	8007a38 <lcd_print>
 8001bf4:	e049      	b.n	8001c8a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <menu+0xba0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d145      	bne.n	8001c8a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <menu+0xbd8>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	2002      	movs	r0, #2
 8001c04:	f005 ff18 	bl	8007a38 <lcd_print>
 8001c08:	e03f      	b.n	8001c8a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <menu+0xbe8>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d13b      	bne.n	8001c8a <menu+0xc02>
			if(dilSecim == 0) {
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <menu+0xba0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d12e      	bne.n	8001c78 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001c1a:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <menu+0xbec>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f005 ff0a 	bl	8007a38 <lcd_print>
 8001c24:	e031      	b.n	8001c8a <menu+0xc02>
 8001c26:	bf00      	nop
 8001c28:	2000020d 	.word	0x2000020d
 8001c2c:	0800d038 	.word	0x0800d038
 8001c30:	40010800 	.word	0x40010800
 8001c34:	2000021b 	.word	0x2000021b
 8001c38:	200001fb 	.word	0x200001fb
 8001c3c:	200001ed 	.word	0x200001ed
 8001c40:	20000118 	.word	0x20000118
 8001c44:	200001f2 	.word	0x200001f2
 8001c48:	20000218 	.word	0x20000218
 8001c4c:	200001ec 	.word	0x200001ec
 8001c50:	0800d048 	.word	0x0800d048
 8001c54:	0800d05c 	.word	0x0800d05c
 8001c58:	200001f0 	.word	0x200001f0
 8001c5c:	0800d070 	.word	0x0800d070
 8001c60:	0800d084 	.word	0x0800d084
 8001c64:	0800d098 	.word	0x0800d098
 8001c68:	0800d0a8 	.word	0x0800d0a8
 8001c6c:	0800d0bc 	.word	0x0800d0bc
 8001c70:	200001f1 	.word	0x200001f1
 8001c74:	0800d0d0 	.word	0x0800d0d0
			} else if(dilSecim == 1) {
 8001c78:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <menu+0xe3c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d104      	bne.n	8001c8a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001c80:	4a91      	ldr	r2, [pc, #580]	; (8001ec8 <menu+0xe40>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	2002      	movs	r0, #2
 8001c86:	f005 fed7 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	488f      	ldr	r0, [pc, #572]	; (8001ecc <menu+0xe44>)
 8001c8e:	f007 f9f9 	bl	8009084 <HAL_GPIO_ReadPin>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d115      	bne.n	8001cc4 <menu+0xc3c>
 8001c98:	4b8d      	ldr	r3, [pc, #564]	; (8001ed0 <menu+0xe48>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00e      	beq.n	8001cc4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <menu+0xe4c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <menu+0xe4c>)
 8001cb0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <menu+0xe4c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d902      	bls.n	8001cc0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001cba:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <menu+0xe4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc0:	f002 fdf6 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4881      	ldr	r0, [pc, #516]	; (8001ecc <menu+0xe44>)
 8001cc8:	f007 f9dc 	bl	8009084 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d115      	bne.n	8001cfe <menu+0xc76>
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <menu+0xe48>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <menu+0xe4c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <menu+0xe4c>)
 8001cea:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <menu+0xe4c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001cf4:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <menu+0xe4c>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cfa:	f002 fdd9 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cfe:	2108      	movs	r1, #8
 8001d00:	4872      	ldr	r0, [pc, #456]	; (8001ecc <menu+0xe44>)
 8001d02:	f007 f9bf 	bl	8009084 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10d      	bne.n	8001d28 <menu+0xca0>
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <menu+0xe48>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	; (8001ed4 <menu+0xe4c>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <menu+0xe50>)
 8001d20:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d22:	4b6e      	ldr	r3, [pc, #440]	; (8001edc <menu+0xe54>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d28:	4b6d      	ldr	r3, [pc, #436]	; (8001ee0 <menu+0xe58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	f040 80b9 	bne.w	8001ea4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001d32:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <menu+0xe3c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001d3a:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <menu+0xe5c>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f005 fe7a 	bl	8007a38 <lcd_print>
 8001d44:	e008      	b.n	8001d58 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <menu+0xe3c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d104      	bne.n	8001d58 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001d4e:	4a66      	ldr	r2, [pc, #408]	; (8001ee8 <menu+0xe60>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	2001      	movs	r0, #1
 8001d54:	f005 fe70 	bl	8007a38 <lcd_print>
		}

		if(altLimit == 0) {
 8001d58:	4b64      	ldr	r3, [pc, #400]	; (8001eec <menu+0xe64>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d113      	bne.n	8001d88 <menu+0xd00>
			if(dilSecim == 0) {
 8001d60:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <menu+0xe3c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001d68:	4a61      	ldr	r2, [pc, #388]	; (8001ef0 <menu+0xe68>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f005 fe63 	bl	8007a38 <lcd_print>
 8001d72:	e020      	b.n	8001db6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <menu+0xe3c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d11c      	bne.n	8001db6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001d7c:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <menu+0xe6c>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2002      	movs	r0, #2
 8001d82:	f005 fe59 	bl	8007a38 <lcd_print>
 8001d86:	e016      	b.n	8001db6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001d88:	4b58      	ldr	r3, [pc, #352]	; (8001eec <menu+0xe64>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d112      	bne.n	8001db6 <menu+0xd2e>
			if(dilSecim == 0){
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <menu+0xe3c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001d98:	4a57      	ldr	r2, [pc, #348]	; (8001ef8 <menu+0xe70>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f005 fe4b 	bl	8007a38 <lcd_print>
 8001da2:	e008      	b.n	8001db6 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <menu+0xe3c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d104      	bne.n	8001db6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001dac:	4a46      	ldr	r2, [pc, #280]	; (8001ec8 <menu+0xe40>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	2002      	movs	r0, #2
 8001db2:	f005 fe41 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001db6:	2102      	movs	r1, #2
 8001db8:	4844      	ldr	r0, [pc, #272]	; (8001ecc <menu+0xe44>)
 8001dba:	f007 f963 	bl	8009084 <HAL_GPIO_ReadPin>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d119      	bne.n	8001df8 <menu+0xd70>
 8001dc4:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <menu+0xe48>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <menu+0xd70>
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <menu+0xe74>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10e      	bne.n	8001df8 <menu+0xd70>
			altLimit = altLimit + 1;
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <menu+0xe64>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <menu+0xe64>)
 8001de4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <menu+0xe64>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d902      	bls.n	8001df4 <menu+0xd6c>
				altLimit = 0;
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <menu+0xe64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001df4:	f002 fd5c 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001df8:	2104      	movs	r1, #4
 8001dfa:	4834      	ldr	r0, [pc, #208]	; (8001ecc <menu+0xe44>)
 8001dfc:	f007 f942 	bl	8009084 <HAL_GPIO_ReadPin>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d119      	bne.n	8001e3a <menu+0xdb2>
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <menu+0xe48>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	f083 0301 	eor.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <menu+0xdb2>
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <menu+0xe74>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10e      	bne.n	8001e3a <menu+0xdb2>
			altLimit = altLimit - 1;
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <menu+0xe64>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <menu+0xe64>)
 8001e26:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <menu+0xe64>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <menu+0xdae>
		   		altLimit = 1;
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <menu+0xe64>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e36:	f002 fd3b 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <menu+0xe44>)
 8001e3e:	f007 f921 	bl	8009084 <HAL_GPIO_ReadPin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d12d      	bne.n	8001ea4 <menu+0xe1c>
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <menu+0xe48>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	f083 0301 	eor.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d026      	beq.n	8001ea4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <menu+0xe64>)
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <menu+0xe50>)
 8001e5c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <menu+0xe64>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d110      	bne.n	8001e88 <menu+0xe00>
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <menu+0xe78>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <menu+0xdee>
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <menu+0xe78>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d108      	bne.n	8001e88 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <menu+0xe78>)
 8001e78:	2203      	movs	r2, #3
 8001e7a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <menu+0xe78>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <menu+0xe50>)
 8001e82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001e86:	e00a      	b.n	8001e9e <menu+0xe16>
			} else if(altLimit == 0) {
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <menu+0xe64>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <menu+0xe16>
				platformSilindirTipi = 0;
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <menu+0xe7c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <menu+0xe7c>)
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <menu+0xe50>)
 8001e9c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <menu+0xe54>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <menu+0xe58>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b06      	cmp	r3, #6
 8001eaa:	f040 80b6 	bne.w	800201a <menu+0xf92>
		if(dilSecim == 0) {
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <menu+0xe3c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d12a      	bne.n	8001f0c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <menu+0xe80>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f005 fdbc 	bl	8007a38 <lcd_print>
 8001ec0:	e02d      	b.n	8001f1e <menu+0xe96>
 8001ec2:	bf00      	nop
 8001ec4:	2000020d 	.word	0x2000020d
 8001ec8:	0800d0e4 	.word	0x0800d0e4
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	2000021b 	.word	0x2000021b
 8001ed4:	200001f1 	.word	0x200001f1
 8001ed8:	20000118 	.word	0x20000118
 8001edc:	20000218 	.word	0x20000218
 8001ee0:	200001ec 	.word	0x200001ec
 8001ee4:	0800d0f8 	.word	0x0800d0f8
 8001ee8:	0800d10c 	.word	0x0800d10c
 8001eec:	200001f2 	.word	0x200001f2
 8001ef0:	0800d070 	.word	0x0800d070
 8001ef4:	0800d084 	.word	0x0800d084
 8001ef8:	0800d0d0 	.word	0x0800d0d0
 8001efc:	200001ed 	.word	0x200001ed
 8001f00:	200001f9 	.word	0x200001f9
 8001f04:	200001ff 	.word	0x200001ff
 8001f08:	0800d120 	.word	0x0800d120
		} else if(dilSecim == 1){
 8001f0c:	4b7a      	ldr	r3, [pc, #488]	; (80020f8 <menu+0x1070>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d104      	bne.n	8001f1e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001f14:	4a79      	ldr	r2, [pc, #484]	; (80020fc <menu+0x1074>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f005 fd8d 	bl	8007a38 <lcd_print>
		}
		if(basincSalteri == 0){
 8001f1e:	4b78      	ldr	r3, [pc, #480]	; (8002100 <menu+0x1078>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d113      	bne.n	8001f4e <menu+0xec6>
			if(dilSecim == 0) {
 8001f26:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <menu+0x1070>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001f2e:	4a75      	ldr	r2, [pc, #468]	; (8002104 <menu+0x107c>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	2002      	movs	r0, #2
 8001f34:	f005 fd80 	bl	8007a38 <lcd_print>
 8001f38:	e020      	b.n	8001f7c <menu+0xef4>
			} else if(dilSecim == 1){
 8001f3a:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <menu+0x1070>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d11c      	bne.n	8001f7c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001f42:	4a71      	ldr	r2, [pc, #452]	; (8002108 <menu+0x1080>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 fd76 	bl	8007a38 <lcd_print>
 8001f4c:	e016      	b.n	8001f7c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001f4e:	4b6c      	ldr	r3, [pc, #432]	; (8002100 <menu+0x1078>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d112      	bne.n	8001f7c <menu+0xef4>
			if(dilSecim == 0) {
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <menu+0x1070>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001f5e:	4a6b      	ldr	r2, [pc, #428]	; (800210c <menu+0x1084>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2002      	movs	r0, #2
 8001f64:	f005 fd68 	bl	8007a38 <lcd_print>
 8001f68:	e008      	b.n	8001f7c <menu+0xef4>
			} else if(dilSecim == 1) {
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <menu+0x1070>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d104      	bne.n	8001f7c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8001f72:	4a67      	ldr	r2, [pc, #412]	; (8002110 <menu+0x1088>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	2002      	movs	r0, #2
 8001f78:	f005 fd5e 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4865      	ldr	r0, [pc, #404]	; (8002114 <menu+0x108c>)
 8001f80:	f007 f880 	bl	8009084 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d115      	bne.n	8001fb6 <menu+0xf2e>
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <menu+0x1090>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <menu+0x1078>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <menu+0x1078>)
 8001fa2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <menu+0x1078>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d902      	bls.n	8001fb2 <menu+0xf2a>
				basincSalteri = 0;
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <menu+0x1078>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fb2:	f002 fc7d 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	4856      	ldr	r0, [pc, #344]	; (8002114 <menu+0x108c>)
 8001fba:	f007 f863 	bl	8009084 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d115      	bne.n	8001ff0 <menu+0xf68>
 8001fc4:	4b54      	ldr	r3, [pc, #336]	; (8002118 <menu+0x1090>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00e      	beq.n	8001ff0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <menu+0x1078>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <menu+0x1078>)
 8001fdc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001fde:	4b48      	ldr	r3, [pc, #288]	; (8002100 <menu+0x1078>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <menu+0xf64>
		   		basincSalteri = 1;
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <menu+0x1078>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fec:	f002 fc60 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	4848      	ldr	r0, [pc, #288]	; (8002114 <menu+0x108c>)
 8001ff4:	f007 f846 	bl	8009084 <HAL_GPIO_ReadPin>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d10d      	bne.n	800201a <menu+0xf92>
 8001ffe:	4b46      	ldr	r3, [pc, #280]	; (8002118 <menu+0x1090>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800200c:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <menu+0x1078>)
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <menu+0x1094>)
 8002012:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <menu+0x1098>)
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800201a:	4b42      	ldr	r3, [pc, #264]	; (8002124 <menu+0x109c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b07      	cmp	r3, #7
 8002020:	f040 80f5 	bne.w	800220e <menu+0x1186>
		if(dilSecim == 0) {
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <menu+0x1070>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800202c:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <menu+0x10a0>)
 800202e:	2101      	movs	r1, #1
 8002030:	2001      	movs	r0, #1
 8002032:	f005 fd01 	bl	8007a38 <lcd_print>
 8002036:	e008      	b.n	800204a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <menu+0x1070>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d104      	bne.n	800204a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002040:	4a3a      	ldr	r2, [pc, #232]	; (800212c <menu+0x10a4>)
 8002042:	2101      	movs	r1, #1
 8002044:	2001      	movs	r0, #1
 8002046:	f005 fcf7 	bl	8007a38 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <menu+0x10a8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d113      	bne.n	800207a <menu+0xff2>
			if(dilSecim == 0) {
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <menu+0x1070>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800205a:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <menu+0x107c>)
 800205c:	2101      	movs	r1, #1
 800205e:	2002      	movs	r0, #2
 8002060:	f005 fcea 	bl	8007a38 <lcd_print>
 8002064:	e079      	b.n	800215a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <menu+0x1070>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d175      	bne.n	800215a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800206e:	4a26      	ldr	r2, [pc, #152]	; (8002108 <menu+0x1080>)
 8002070:	2101      	movs	r1, #1
 8002072:	2002      	movs	r0, #2
 8002074:	f005 fce0 	bl	8007a38 <lcd_print>
 8002078:	e06f      	b.n	800215a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <menu+0x10a8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d113      	bne.n	80020aa <menu+0x1022>
			if(dilSecim == 0) {
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <menu+0x1070>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <menu+0x10ac>)
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f005 fcd2 	bl	8007a38 <lcd_print>
 8002094:	e061      	b.n	800215a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <menu+0x1070>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d15d      	bne.n	800215a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <menu+0x10b0>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	2002      	movs	r0, #2
 80020a4:	f005 fcc8 	bl	8007a38 <lcd_print>
 80020a8:	e057      	b.n	800215a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <menu+0x10a8>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d113      	bne.n	80020da <menu+0x1052>
			if(dilSecim == 0) {
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <menu+0x1070>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80020ba:	4a20      	ldr	r2, [pc, #128]	; (800213c <menu+0x10b4>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f005 fcba 	bl	8007a38 <lcd_print>
 80020c4:	e049      	b.n	800215a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <menu+0x1070>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d145      	bne.n	800215a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <menu+0x10b8>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f005 fcb0 	bl	8007a38 <lcd_print>
 80020d8:	e03f      	b.n	800215a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <menu+0x10a8>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d13b      	bne.n	800215a <menu+0x10d2>
			if(dilSecim == 0) {
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <menu+0x1070>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d12e      	bne.n	8002148 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80020ea:	4a16      	ldr	r2, [pc, #88]	; (8002144 <menu+0x10bc>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f005 fca2 	bl	8007a38 <lcd_print>
 80020f4:	e031      	b.n	800215a <menu+0x10d2>
 80020f6:	bf00      	nop
 80020f8:	2000020d 	.word	0x2000020d
 80020fc:	0800d130 	.word	0x0800d130
 8002100:	200001f3 	.word	0x200001f3
 8002104:	0800d070 	.word	0x0800d070
 8002108:	0800d084 	.word	0x0800d084
 800210c:	0800d0d0 	.word	0x0800d0d0
 8002110:	0800d0e4 	.word	0x0800d0e4
 8002114:	40010800 	.word	0x40010800
 8002118:	2000021b 	.word	0x2000021b
 800211c:	20000118 	.word	0x20000118
 8002120:	20000218 	.word	0x20000218
 8002124:	200001ec 	.word	0x200001ec
 8002128:	0800d140 	.word	0x0800d140
 800212c:	0800d154 	.word	0x0800d154
 8002130:	200001f4 	.word	0x200001f4
 8002134:	0800d168 	.word	0x0800d168
 8002138:	0800d17c 	.word	0x0800d17c
 800213c:	0800d190 	.word	0x0800d190
 8002140:	0800d1a4 	.word	0x0800d1a4
 8002144:	0800d1b8 	.word	0x0800d1b8
			} else if(dilSecim == 1){
 8002148:	4b99      	ldr	r3, [pc, #612]	; (80023b0 <menu+0x1328>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d104      	bne.n	800215a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002150:	4a98      	ldr	r2, [pc, #608]	; (80023b4 <menu+0x132c>)
 8002152:	2101      	movs	r1, #1
 8002154:	2002      	movs	r0, #2
 8002156:	f005 fc6f 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800215a:	2102      	movs	r1, #2
 800215c:	4896      	ldr	r0, [pc, #600]	; (80023b8 <menu+0x1330>)
 800215e:	f006 ff91 	bl	8009084 <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	2b01      	cmp	r3, #1
 8002166:	d115      	bne.n	8002194 <menu+0x110c>
 8002168:	4b94      	ldr	r3, [pc, #592]	; (80023bc <menu+0x1334>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00e      	beq.n	8002194 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002176:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <menu+0x1338>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <menu+0x1338>)
 8002180:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002182:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <menu+0x1338>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d902      	bls.n	8002190 <menu+0x1108>
				kapiSecimleri = 0;
 800218a:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <menu+0x1338>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002190:	f002 fb8e 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002194:	2104      	movs	r1, #4
 8002196:	4888      	ldr	r0, [pc, #544]	; (80023b8 <menu+0x1330>)
 8002198:	f006 ff74 	bl	8009084 <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d115      	bne.n	80021ce <menu+0x1146>
 80021a2:	4b86      	ldr	r3, [pc, #536]	; (80023bc <menu+0x1334>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	f083 0301 	eor.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80021b0:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <menu+0x1338>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <menu+0x1338>)
 80021ba:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <menu+0x1338>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d902      	bls.n	80021ca <menu+0x1142>
		   		kapiSecimleri = 3;
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <menu+0x1338>)
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021ca:	f002 fb71 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ce:	2108      	movs	r1, #8
 80021d0:	4879      	ldr	r0, [pc, #484]	; (80023b8 <menu+0x1330>)
 80021d2:	f006 ff57 	bl	8009084 <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d118      	bne.n	800220e <menu+0x1186>
 80021dc:	4b77      	ldr	r3, [pc, #476]	; (80023bc <menu+0x1334>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f083 0301 	eor.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d011      	beq.n	800220e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80021ea:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <menu+0x1338>)
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <menu+0x133c>)
 80021f0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <menu+0x1338>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <menu+0x1180>
				altLimit = 1;
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <menu+0x1340>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002200:	4b71      	ldr	r3, [pc, #452]	; (80023c8 <menu+0x1340>)
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <menu+0x133c>)
 8002206:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002208:	4b70      	ldr	r3, [pc, #448]	; (80023cc <menu+0x1344>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800220e:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <menu+0x1348>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b08      	cmp	r3, #8
 8002214:	f040 8092 	bne.w	800233c <menu+0x12b4>
		if(dilSecim == 0) {
 8002218:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <menu+0x1328>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002220:	4a6c      	ldr	r2, [pc, #432]	; (80023d4 <menu+0x134c>)
 8002222:	2101      	movs	r1, #1
 8002224:	2001      	movs	r0, #1
 8002226:	f005 fc07 	bl	8007a38 <lcd_print>
 800222a:	e008      	b.n	800223e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <menu+0x1328>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d104      	bne.n	800223e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002234:	4a68      	ldr	r2, [pc, #416]	; (80023d8 <menu+0x1350>)
 8002236:	2101      	movs	r1, #1
 8002238:	2001      	movs	r0, #1
 800223a:	f005 fbfd 	bl	8007a38 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <menu+0x1354>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d113      	bne.n	800226e <menu+0x11e6>
			if(dilSecim == 0) {
 8002246:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <menu+0x1328>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800224e:	4a64      	ldr	r2, [pc, #400]	; (80023e0 <menu+0x1358>)
 8002250:	2101      	movs	r1, #1
 8002252:	2002      	movs	r0, #2
 8002254:	f005 fbf0 	bl	8007a38 <lcd_print>
 8002258:	e020      	b.n	800229c <menu+0x1214>
			} else if(dilSecim == 1) {
 800225a:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <menu+0x1328>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d11c      	bne.n	800229c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002262:	4a60      	ldr	r2, [pc, #384]	; (80023e4 <menu+0x135c>)
 8002264:	2101      	movs	r1, #1
 8002266:	2002      	movs	r0, #2
 8002268:	f005 fbe6 	bl	8007a38 <lcd_print>
 800226c:	e016      	b.n	800229c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800226e:	4b5b      	ldr	r3, [pc, #364]	; (80023dc <menu+0x1354>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d112      	bne.n	800229c <menu+0x1214>
			if(dilSecim == 0){
 8002276:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <menu+0x1328>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800227e:	4a5a      	ldr	r2, [pc, #360]	; (80023e8 <menu+0x1360>)
 8002280:	2101      	movs	r1, #1
 8002282:	2002      	movs	r0, #2
 8002284:	f005 fbd8 	bl	8007a38 <lcd_print>
 8002288:	e008      	b.n	800229c <menu+0x1214>
			} else if(dilSecim == 1){
 800228a:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <menu+0x1328>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d104      	bne.n	800229c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002292:	4a56      	ldr	r2, [pc, #344]	; (80023ec <menu+0x1364>)
 8002294:	2101      	movs	r1, #1
 8002296:	2002      	movs	r0, #2
 8002298:	f005 fbce 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800229c:	2102      	movs	r1, #2
 800229e:	4846      	ldr	r0, [pc, #280]	; (80023b8 <menu+0x1330>)
 80022a0:	f006 fef0 	bl	8009084 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d115      	bne.n	80022d6 <menu+0x124e>
 80022aa:	4b44      	ldr	r3, [pc, #272]	; (80023bc <menu+0x1334>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80022b8:	4b48      	ldr	r3, [pc, #288]	; (80023dc <menu+0x1354>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <menu+0x1354>)
 80022c2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80022c4:	4b45      	ldr	r3, [pc, #276]	; (80023dc <menu+0x1354>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d902      	bls.n	80022d2 <menu+0x124a>
				kapiAcTipi = 0;
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <menu+0x1354>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022d2:	f002 faed 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d6:	2104      	movs	r1, #4
 80022d8:	4837      	ldr	r0, [pc, #220]	; (80023b8 <menu+0x1330>)
 80022da:	f006 fed3 	bl	8009084 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d115      	bne.n	8002310 <menu+0x1288>
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <menu+0x1334>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <menu+0x1354>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <menu+0x1354>)
 80022fc:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80022fe:	4b37      	ldr	r3, [pc, #220]	; (80023dc <menu+0x1354>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002306:	4b35      	ldr	r3, [pc, #212]	; (80023dc <menu+0x1354>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800230c:	f002 fad0 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002310:	2108      	movs	r1, #8
 8002312:	4829      	ldr	r0, [pc, #164]	; (80023b8 <menu+0x1330>)
 8002314:	f006 feb6 	bl	8009084 <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d10e      	bne.n	800233c <menu+0x12b4>
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <menu+0x1334>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <menu+0x1354>)
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <menu+0x133c>)
 8002332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <menu+0x1344>)
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <menu+0x1348>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b09      	cmp	r3, #9
 8002342:	f040 80b9 	bne.w	80024b8 <menu+0x1430>
		if(dilSecim == 0){
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <menu+0x1328>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800234e:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <menu+0x1368>)
 8002350:	2101      	movs	r1, #1
 8002352:	2001      	movs	r0, #1
 8002354:	f005 fb70 	bl	8007a38 <lcd_print>
 8002358:	e008      	b.n	800236c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <menu+0x1328>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d104      	bne.n	800236c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002362:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <menu+0x136c>)
 8002364:	2101      	movs	r1, #1
 8002366:	2001      	movs	r0, #1
 8002368:	f005 fb66 	bl	8007a38 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <menu+0x1370>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <menu+0x1374>)
 8002376:	2101      	movs	r1, #1
 8002378:	2002      	movs	r0, #2
 800237a:	f005 fb5d 	bl	8007a38 <lcd_print>
 800237e:	e04c      	b.n	800241a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <menu+0x1370>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d13f      	bne.n	8002408 <menu+0x1380>
			if(dilSecim == 0){
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <menu+0x1328>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002390:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <menu+0x1378>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f005 fb4f 	bl	8007a38 <lcd_print>
 800239a:	e03e      	b.n	800241a <menu+0x1392>
			} else if(dilSecim == 1) {
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <menu+0x1328>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d13a      	bne.n	800241a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <menu+0x137c>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	2002      	movs	r0, #2
 80023aa:	f005 fb45 	bl	8007a38 <lcd_print>
 80023ae:	e034      	b.n	800241a <menu+0x1392>
 80023b0:	2000020d 	.word	0x2000020d
 80023b4:	0800d1cc 	.word	0x0800d1cc
 80023b8:	40010800 	.word	0x40010800
 80023bc:	2000021b 	.word	0x2000021b
 80023c0:	200001f4 	.word	0x200001f4
 80023c4:	20000118 	.word	0x20000118
 80023c8:	200001f2 	.word	0x200001f2
 80023cc:	20000218 	.word	0x20000218
 80023d0:	200001ec 	.word	0x200001ec
 80023d4:	0800d1e0 	.word	0x0800d1e0
 80023d8:	0800d1f4 	.word	0x0800d1f4
 80023dc:	200001f8 	.word	0x200001f8
 80023e0:	0800d208 	.word	0x0800d208
 80023e4:	0800d218 	.word	0x0800d218
 80023e8:	0800d228 	.word	0x0800d228
 80023ec:	0800d23c 	.word	0x0800d23c
 80023f0:	0800d250 	.word	0x0800d250
 80023f4:	0800d264 	.word	0x0800d264
 80023f8:	200001f5 	.word	0x200001f5
 80023fc:	0800d278 	.word	0x0800d278
 8002400:	0800d28c 	.word	0x0800d28c
 8002404:	0800d29c 	.word	0x0800d29c
			}
		} else if(kapi1Tip == 2) {
 8002408:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <menu+0x15ac>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d104      	bne.n	800241a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002410:	4a89      	ldr	r2, [pc, #548]	; (8002638 <menu+0x15b0>)
 8002412:	2101      	movs	r1, #1
 8002414:	2002      	movs	r0, #2
 8002416:	f005 fb0f 	bl	8007a38 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800241a:	2102      	movs	r1, #2
 800241c:	4887      	ldr	r0, [pc, #540]	; (800263c <menu+0x15b4>)
 800241e:	f006 fe31 	bl	8009084 <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d115      	bne.n	8002454 <menu+0x13cc>
 8002428:	4b85      	ldr	r3, [pc, #532]	; (8002640 <menu+0x15b8>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <menu+0x15ac>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b7d      	ldr	r3, [pc, #500]	; (8002634 <menu+0x15ac>)
 8002440:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002442:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <menu+0x15ac>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d902      	bls.n	8002450 <menu+0x13c8>
				kapi1Tip = 0;
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <menu+0x15ac>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002450:	f002 fa2e 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002454:	2104      	movs	r1, #4
 8002456:	4879      	ldr	r0, [pc, #484]	; (800263c <menu+0x15b4>)
 8002458:	f006 fe14 	bl	8009084 <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d115      	bne.n	800248e <menu+0x1406>
 8002462:	4b77      	ldr	r3, [pc, #476]	; (8002640 <menu+0x15b8>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002470:	4b70      	ldr	r3, [pc, #448]	; (8002634 <menu+0x15ac>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <menu+0x15ac>)
 800247a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <menu+0x15ac>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d902      	bls.n	800248a <menu+0x1402>
		   		kapi1Tip = 2;
 8002484:	4b6b      	ldr	r3, [pc, #428]	; (8002634 <menu+0x15ac>)
 8002486:	2202      	movs	r2, #2
 8002488:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800248a:	f002 fa11 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800248e:	2108      	movs	r1, #8
 8002490:	486a      	ldr	r0, [pc, #424]	; (800263c <menu+0x15b4>)
 8002492:	f006 fdf7 	bl	8009084 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10d      	bne.n	80024b8 <menu+0x1430>
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <menu+0x15b8>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80024aa:	4b62      	ldr	r3, [pc, #392]	; (8002634 <menu+0x15ac>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <menu+0x15bc>)
 80024b0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <menu+0x15c0>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <menu+0x15c4>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b0a      	cmp	r3, #10
 80024be:	d17f      	bne.n	80025c0 <menu+0x1538>
		if(dilSecim == 0) {
 80024c0:	4b63      	ldr	r3, [pc, #396]	; (8002650 <menu+0x15c8>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80024c8:	4a62      	ldr	r2, [pc, #392]	; (8002654 <menu+0x15cc>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	2001      	movs	r0, #1
 80024ce:	f005 fab3 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80024d2:	4a61      	ldr	r2, [pc, #388]	; (8002658 <menu+0x15d0>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f005 faae 	bl	8007a38 <lcd_print>
 80024dc:	e00d      	b.n	80024fa <menu+0x1472>
		} else if(dilSecim == 1) {
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <menu+0x15c8>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d109      	bne.n	80024fa <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80024e6:	4a5d      	ldr	r2, [pc, #372]	; (800265c <menu+0x15d4>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2001      	movs	r0, #1
 80024ec:	f005 faa4 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80024f0:	4a5b      	ldr	r2, [pc, #364]	; (8002660 <menu+0x15d8>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	2002      	movs	r0, #2
 80024f6:	f005 fa9f 	bl	8007a38 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80024fa:	4b5a      	ldr	r3, [pc, #360]	; (8002664 <menu+0x15dc>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	220a      	movs	r2, #10
 8002500:	4959      	ldr	r1, [pc, #356]	; (8002668 <menu+0x15e0>)
 8002502:	4618      	mov	r0, r3
 8002504:	f009 fdea 	bl	800c0dc <itoa>
		lcd_print(2,16,snum);
 8002508:	4a57      	ldr	r2, [pc, #348]	; (8002668 <menu+0x15e0>)
 800250a:	2110      	movs	r1, #16
 800250c:	2002      	movs	r0, #2
 800250e:	f005 fa93 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002512:	2102      	movs	r1, #2
 8002514:	4849      	ldr	r0, [pc, #292]	; (800263c <menu+0x15b4>)
 8002516:	f006 fdb5 	bl	8009084 <HAL_GPIO_ReadPin>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d119      	bne.n	8002554 <menu+0x14cc>
 8002520:	4b47      	ldr	r3, [pc, #284]	; (8002640 <menu+0x15b8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <menu+0x14cc>
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <menu+0x15ac>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10e      	bne.n	8002554 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002536:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <menu+0x15dc>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <menu+0x15dc>)
 8002540:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002542:	4b48      	ldr	r3, [pc, #288]	; (8002664 <menu+0x15dc>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d902      	bls.n	8002550 <menu+0x14c8>
				kapi1AcSure = 0;
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <menu+0x15dc>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002550:	f002 f9ae 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002554:	2104      	movs	r1, #4
 8002556:	4839      	ldr	r0, [pc, #228]	; (800263c <menu+0x15b4>)
 8002558:	f006 fd94 	bl	8009084 <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d119      	bne.n	8002596 <menu+0x150e>
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <menu+0x15b8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d012      	beq.n	8002596 <menu+0x150e>
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <menu+0x15ac>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10e      	bne.n	8002596 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002578:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <menu+0x15dc>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <menu+0x15dc>)
 8002582:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <menu+0x15dc>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d902      	bls.n	8002592 <menu+0x150a>
		   		kapi1AcSure = 5;
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <menu+0x15dc>)
 800258e:	2205      	movs	r2, #5
 8002590:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002592:	f002 f98d 	bl	80048b0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002596:	2108      	movs	r1, #8
 8002598:	4828      	ldr	r0, [pc, #160]	; (800263c <menu+0x15b4>)
 800259a:	f006 fd73 	bl	8009084 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10d      	bne.n	80025c0 <menu+0x1538>
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <menu+0x15b8>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80025b2:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <menu+0x15dc>)
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <menu+0x15bc>)
 80025b8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <menu+0x15c0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <menu+0x15c4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b0b      	cmp	r3, #11
 80025c6:	f040 80b5 	bne.w	8002734 <menu+0x16ac>
		if(dilSecim == 0) {
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <menu+0x15c8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80025d2:	4a26      	ldr	r2, [pc, #152]	; (800266c <menu+0x15e4>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	2001      	movs	r0, #1
 80025d8:	f005 fa2e 	bl	8007a38 <lcd_print>
 80025dc:	e008      	b.n	80025f0 <menu+0x1568>
		} else if(dilSecim == 1) {
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <menu+0x15c8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d104      	bne.n	80025f0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <menu+0x15e8>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2001      	movs	r0, #1
 80025ec:	f005 fa24 	bl	8007a38 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <menu+0x15ec>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80025f8:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <menu+0x15f0>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2002      	movs	r0, #2
 80025fe:	f005 fa1b 	bl	8007a38 <lcd_print>
 8002602:	e048      	b.n	8002696 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <menu+0x15ec>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d13b      	bne.n	8002684 <menu+0x15fc>
			if(dilSecim == 0) {
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <menu+0x15c8>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002614:	4a19      	ldr	r2, [pc, #100]	; (800267c <menu+0x15f4>)
 8002616:	2101      	movs	r1, #1
 8002618:	2002      	movs	r0, #2
 800261a:	f005 fa0d 	bl	8007a38 <lcd_print>
 800261e:	e03a      	b.n	8002696 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <menu+0x15c8>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d136      	bne.n	8002696 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <menu+0x15f8>)
 800262a:	2101      	movs	r1, #1
 800262c:	2002      	movs	r0, #2
 800262e:	f005 fa03 	bl	8007a38 <lcd_print>
 8002632:	e030      	b.n	8002696 <menu+0x160e>
 8002634:	200001f5 	.word	0x200001f5
 8002638:	0800d2b0 	.word	0x0800d2b0
 800263c:	40010800 	.word	0x40010800
 8002640:	2000021b 	.word	0x2000021b
 8002644:	20000118 	.word	0x20000118
 8002648:	20000218 	.word	0x20000218
 800264c:	200001ec 	.word	0x200001ec
 8002650:	2000020d 	.word	0x2000020d
 8002654:	0800d2c0 	.word	0x0800d2c0
 8002658:	0800d2d4 	.word	0x0800d2d4
 800265c:	0800d2e4 	.word	0x0800d2e4
 8002660:	0800d2f8 	.word	0x0800d2f8
 8002664:	20000205 	.word	0x20000205
 8002668:	20000188 	.word	0x20000188
 800266c:	0800d308 	.word	0x0800d308
 8002670:	0800d31c 	.word	0x0800d31c
 8002674:	200001f6 	.word	0x200001f6
 8002678:	0800d278 	.word	0x0800d278
 800267c:	0800d28c 	.word	0x0800d28c
 8002680:	0800d29c 	.word	0x0800d29c
			}
		} else if(kapi2Tip == 2) {
 8002684:	4b8a      	ldr	r3, [pc, #552]	; (80028b0 <menu+0x1828>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d104      	bne.n	8002696 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800268c:	4a89      	ldr	r2, [pc, #548]	; (80028b4 <menu+0x182c>)
 800268e:	2101      	movs	r1, #1
 8002690:	2002      	movs	r0, #2
 8002692:	f005 f9d1 	bl	8007a38 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002696:	2102      	movs	r1, #2
 8002698:	4887      	ldr	r0, [pc, #540]	; (80028b8 <menu+0x1830>)
 800269a:	f006 fcf3 	bl	8009084 <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d115      	bne.n	80026d0 <menu+0x1648>
 80026a4:	4b85      	ldr	r3, [pc, #532]	; (80028bc <menu+0x1834>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00e      	beq.n	80026d0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <menu+0x1828>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <menu+0x1828>)
 80026bc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80026be:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <menu+0x1828>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <menu+0x1644>
				kapi2Tip = 0;
 80026c6:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <menu+0x1828>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026cc:	f002 f8f0 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d0:	2104      	movs	r1, #4
 80026d2:	4879      	ldr	r0, [pc, #484]	; (80028b8 <menu+0x1830>)
 80026d4:	f006 fcd6 	bl	8009084 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d115      	bne.n	800270a <menu+0x1682>
 80026de:	4b77      	ldr	r3, [pc, #476]	; (80028bc <menu+0x1834>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f083 0301 	eor.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80026ec:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <menu+0x1828>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b6e      	ldr	r3, [pc, #440]	; (80028b0 <menu+0x1828>)
 80026f6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <menu+0x1828>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d902      	bls.n	8002706 <menu+0x167e>
		   		kapi2Tip = 2;
 8002700:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <menu+0x1828>)
 8002702:	2202      	movs	r2, #2
 8002704:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002706:	f002 f8d3 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800270a:	2108      	movs	r1, #8
 800270c:	486a      	ldr	r0, [pc, #424]	; (80028b8 <menu+0x1830>)
 800270e:	f006 fcb9 	bl	8009084 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10d      	bne.n	8002734 <menu+0x16ac>
 8002718:	4b68      	ldr	r3, [pc, #416]	; (80028bc <menu+0x1834>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002726:	4b62      	ldr	r3, [pc, #392]	; (80028b0 <menu+0x1828>)
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <menu+0x1838>)
 800272c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <menu+0x183c>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <menu+0x1840>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d17f      	bne.n	800283c <menu+0x17b4>
		if(dilSecim == 0) {
 800273c:	4b63      	ldr	r3, [pc, #396]	; (80028cc <menu+0x1844>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002744:	4a62      	ldr	r2, [pc, #392]	; (80028d0 <menu+0x1848>)
 8002746:	2101      	movs	r1, #1
 8002748:	2001      	movs	r0, #1
 800274a:	f005 f975 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800274e:	4a61      	ldr	r2, [pc, #388]	; (80028d4 <menu+0x184c>)
 8002750:	2101      	movs	r1, #1
 8002752:	2002      	movs	r0, #2
 8002754:	f005 f970 	bl	8007a38 <lcd_print>
 8002758:	e00d      	b.n	8002776 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <menu+0x1844>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d109      	bne.n	8002776 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002762:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <menu+0x1850>)
 8002764:	2101      	movs	r1, #1
 8002766:	2001      	movs	r0, #1
 8002768:	f005 f966 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800276c:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <menu+0x1854>)
 800276e:	2101      	movs	r1, #1
 8002770:	2002      	movs	r0, #2
 8002772:	f005 f961 	bl	8007a38 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002776:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <menu+0x1858>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	220a      	movs	r2, #10
 800277c:	4959      	ldr	r1, [pc, #356]	; (80028e4 <menu+0x185c>)
 800277e:	4618      	mov	r0, r3
 8002780:	f009 fcac 	bl	800c0dc <itoa>
		lcd_print(2,16,snum);
 8002784:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <menu+0x185c>)
 8002786:	2110      	movs	r1, #16
 8002788:	2002      	movs	r0, #2
 800278a:	f005 f955 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800278e:	2102      	movs	r1, #2
 8002790:	4849      	ldr	r0, [pc, #292]	; (80028b8 <menu+0x1830>)
 8002792:	f006 fc77 	bl	8009084 <HAL_GPIO_ReadPin>
 8002796:	4603      	mov	r3, r0
 8002798:	2b01      	cmp	r3, #1
 800279a:	d119      	bne.n	80027d0 <menu+0x1748>
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <menu+0x1834>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f083 0301 	eor.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <menu+0x1748>
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <menu+0x1828>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10e      	bne.n	80027d0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80027b2:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <menu+0x1858>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <menu+0x1858>)
 80027bc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <menu+0x1858>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d902      	bls.n	80027cc <menu+0x1744>
				kapi2AcSure = 0;
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <menu+0x1858>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027cc:	f002 f870 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027d0:	2104      	movs	r1, #4
 80027d2:	4839      	ldr	r0, [pc, #228]	; (80028b8 <menu+0x1830>)
 80027d4:	f006 fc56 	bl	8009084 <HAL_GPIO_ReadPin>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d119      	bne.n	8002812 <menu+0x178a>
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <menu+0x1834>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	f083 0301 	eor.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <menu+0x178a>
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <menu+0x1828>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <menu+0x1858>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <menu+0x1858>)
 80027fe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <menu+0x1858>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d902      	bls.n	800280e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <menu+0x1858>)
 800280a:	2205      	movs	r2, #5
 800280c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800280e:	f002 f84f 	bl	80048b0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002812:	2108      	movs	r1, #8
 8002814:	4828      	ldr	r0, [pc, #160]	; (80028b8 <menu+0x1830>)
 8002816:	f006 fc35 	bl	8009084 <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10d      	bne.n	800283c <menu+0x17b4>
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <menu+0x1834>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <menu+0x1858>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <menu+0x1838>)
 8002834:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <menu+0x183c>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <menu+0x1840>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b0d      	cmp	r3, #13
 8002842:	f040 80b5 	bne.w	80029b0 <menu+0x1928>
		if(dilSecim == 0) {
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <menu+0x1844>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d105      	bne.n	800285a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <menu+0x1860>)
 8002850:	2101      	movs	r1, #1
 8002852:	2001      	movs	r0, #1
 8002854:	f005 f8f0 	bl	8007a38 <lcd_print>
 8002858:	e008      	b.n	800286c <menu+0x17e4>
		} else if(dilSecim == 1){
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <menu+0x1844>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d104      	bne.n	800286c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002862:	4a22      	ldr	r2, [pc, #136]	; (80028ec <menu+0x1864>)
 8002864:	2101      	movs	r1, #1
 8002866:	2001      	movs	r0, #1
 8002868:	f005 f8e6 	bl	8007a38 <lcd_print>
		}

		if(kapitablaTip == 0) {
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <menu+0x1868>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002874:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <menu+0x186c>)
 8002876:	2101      	movs	r1, #1
 8002878:	2002      	movs	r0, #2
 800287a:	f005 f8dd 	bl	8007a38 <lcd_print>
 800287e:	e048      	b.n	8002912 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <menu+0x1868>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d13b      	bne.n	8002900 <menu+0x1878>
			if(dilSecim == 0) {
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <menu+0x1844>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <menu+0x1870>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f005 f8cf 	bl	8007a38 <lcd_print>
 800289a:	e03a      	b.n	8002912 <menu+0x188a>
			} else if(dilSecim == 1) {
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <menu+0x1844>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d136      	bne.n	8002912 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80028a4:	4a15      	ldr	r2, [pc, #84]	; (80028fc <menu+0x1874>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	2002      	movs	r0, #2
 80028aa:	f005 f8c5 	bl	8007a38 <lcd_print>
 80028ae:	e030      	b.n	8002912 <menu+0x188a>
 80028b0:	200001f6 	.word	0x200001f6
 80028b4:	0800d2b0 	.word	0x0800d2b0
 80028b8:	40010800 	.word	0x40010800
 80028bc:	2000021b 	.word	0x2000021b
 80028c0:	20000118 	.word	0x20000118
 80028c4:	20000218 	.word	0x20000218
 80028c8:	200001ec 	.word	0x200001ec
 80028cc:	2000020d 	.word	0x2000020d
 80028d0:	0800d330 	.word	0x0800d330
 80028d4:	0800d2d4 	.word	0x0800d2d4
 80028d8:	0800d344 	.word	0x0800d344
 80028dc:	0800d2f8 	.word	0x0800d2f8
 80028e0:	20000206 	.word	0x20000206
 80028e4:	20000188 	.word	0x20000188
 80028e8:	0800d358 	.word	0x0800d358
 80028ec:	0800d36c 	.word	0x0800d36c
 80028f0:	200001f7 	.word	0x200001f7
 80028f4:	0800d278 	.word	0x0800d278
 80028f8:	0800d28c 	.word	0x0800d28c
 80028fc:	0800d29c 	.word	0x0800d29c
			}
		} else if(kapitablaTip == 2) {
 8002900:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <menu+0x19e8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d104      	bne.n	8002912 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002908:	4a5a      	ldr	r2, [pc, #360]	; (8002a74 <menu+0x19ec>)
 800290a:	2101      	movs	r1, #1
 800290c:	2002      	movs	r0, #2
 800290e:	f005 f893 	bl	8007a38 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002912:	2102      	movs	r1, #2
 8002914:	4858      	ldr	r0, [pc, #352]	; (8002a78 <menu+0x19f0>)
 8002916:	f006 fbb5 	bl	8009084 <HAL_GPIO_ReadPin>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d115      	bne.n	800294c <menu+0x18c4>
 8002920:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <menu+0x19f4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 800292e:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <menu+0x19e8>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b4e      	ldr	r3, [pc, #312]	; (8002a70 <menu+0x19e8>)
 8002938:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800293a:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <menu+0x19e8>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <menu+0x18c0>
				kapitablaTip = 0;
 8002942:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <menu+0x19e8>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002948:	f001 ffb2 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800294c:	2104      	movs	r1, #4
 800294e:	484a      	ldr	r0, [pc, #296]	; (8002a78 <menu+0x19f0>)
 8002950:	f006 fb98 	bl	8009084 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d115      	bne.n	8002986 <menu+0x18fe>
 800295a:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <menu+0x19f4>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <menu+0x19e8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <menu+0x19e8>)
 8002972:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <menu+0x19e8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d902      	bls.n	8002982 <menu+0x18fa>
		   		kapitablaTip = 2;
 800297c:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <menu+0x19e8>)
 800297e:	2202      	movs	r2, #2
 8002980:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002982:	f001 ff95 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002986:	2108      	movs	r1, #8
 8002988:	483b      	ldr	r0, [pc, #236]	; (8002a78 <menu+0x19f0>)
 800298a:	f006 fb7b 	bl	8009084 <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d10d      	bne.n	80029b0 <menu+0x1928>
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <menu+0x19f4>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80029a2:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <menu+0x19e8>)
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <menu+0x19f8>)
 80029a8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <menu+0x19fc>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80029b0:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <menu+0x1a00>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b0e      	cmp	r3, #14
 80029b6:	f040 80f2 	bne.w	8002b9e <menu+0x1b16>
		if(dilSecim == 0) {
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <menu+0x1a04>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80029c2:	4a33      	ldr	r2, [pc, #204]	; (8002a90 <menu+0x1a08>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	2001      	movs	r0, #1
 80029c8:	f005 f836 	bl	8007a38 <lcd_print>
 80029cc:	e008      	b.n	80029e0 <menu+0x1958>
		} else if(dilSecim == 1) {
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <menu+0x1a04>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d104      	bne.n	80029e0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80029d6:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <menu+0x1a0c>)
 80029d8:	2101      	movs	r1, #1
 80029da:	2001      	movs	r0, #1
 80029dc:	f005 f82c 	bl	8007a38 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80029e0:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <menu+0x1a10>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <menu+0x1988>
			if(dilSecim == 0){
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <menu+0x1a04>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 80029f0:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <menu+0x1a14>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f005 f81f 	bl	8007a38 <lcd_print>
 80029fa:	e071      	b.n	8002ae0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 80029fc:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <menu+0x1a04>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d16d      	bne.n	8002ae0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <menu+0x1a18>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f005 f815 	bl	8007a38 <lcd_print>
 8002a0e:	e067      	b.n	8002ae0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <menu+0x1a10>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d112      	bne.n	8002a3e <menu+0x19b6>
			if(dilSecim == 0){
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <menu+0x1a04>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002a20:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <menu+0x1a1c>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f005 f807 	bl	8007a38 <lcd_print>
			}
			if(dilSecim == 1){
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <menu+0x1a04>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d156      	bne.n	8002ae0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <menu+0x1a20>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	2002      	movs	r0, #2
 8002a38:	f004 fffe 	bl	8007a38 <lcd_print>
 8002a3c:	e050      	b.n	8002ae0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <menu+0x1a10>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d136      	bne.n	8002ab4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <menu+0x1a04>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <menu+0x1a24>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2002      	movs	r0, #2
 8002a54:	f004 fff0 	bl	8007a38 <lcd_print>
 8002a58:	e042      	b.n	8002ae0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <menu+0x1a04>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d13e      	bne.n	8002ae0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <menu+0x1a28>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f004 ffe6 	bl	8007a38 <lcd_print>
 8002a6c:	e038      	b.n	8002ae0 <menu+0x1a58>
 8002a6e:	bf00      	nop
 8002a70:	200001f7 	.word	0x200001f7
 8002a74:	0800d2b0 	.word	0x0800d2b0
 8002a78:	40010800 	.word	0x40010800
 8002a7c:	2000021b 	.word	0x2000021b
 8002a80:	20000118 	.word	0x20000118
 8002a84:	20000218 	.word	0x20000218
 8002a88:	200001ec 	.word	0x200001ec
 8002a8c:	2000020d 	.word	0x2000020d
 8002a90:	0800d380 	.word	0x0800d380
 8002a94:	0800d394 	.word	0x0800d394
 8002a98:	200001f9 	.word	0x200001f9
 8002a9c:	0800d3a8 	.word	0x0800d3a8
 8002aa0:	0800d3b8 	.word	0x0800d3b8
 8002aa4:	0800d3c8 	.word	0x0800d3c8
 8002aa8:	0800d3d8 	.word	0x0800d3d8
 8002aac:	0800d3e8 	.word	0x0800d3e8
 8002ab0:	0800d3fc 	.word	0x0800d3fc
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ab4:	4b9b      	ldr	r3, [pc, #620]	; (8002d24 <menu+0x1c9c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d111      	bne.n	8002ae0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002abc:	4b9a      	ldr	r3, [pc, #616]	; (8002d28 <menu+0x1ca0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002ac4:	4a99      	ldr	r2, [pc, #612]	; (8002d2c <menu+0x1ca4>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f004 ffb5 	bl	8007a38 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ace:	4b96      	ldr	r3, [pc, #600]	; (8002d28 <menu+0x1ca0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d104      	bne.n	8002ae0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002ad6:	4a96      	ldr	r2, [pc, #600]	; (8002d30 <menu+0x1ca8>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2002      	movs	r0, #2
 8002adc:	f004 ffac 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4894      	ldr	r0, [pc, #592]	; (8002d34 <menu+0x1cac>)
 8002ae4:	f006 face 	bl	8009084 <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d115      	bne.n	8002b1a <menu+0x1a92>
 8002aee:	4b92      	ldr	r3, [pc, #584]	; (8002d38 <menu+0x1cb0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	f083 0301 	eor.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002afc:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <menu+0x1c9c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b87      	ldr	r3, [pc, #540]	; (8002d24 <menu+0x1c9c>)
 8002b06:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b08:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <menu+0x1c9c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d902      	bls.n	8002b16 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002b10:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <menu+0x1c9c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b16:	f001 fecb 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	4885      	ldr	r0, [pc, #532]	; (8002d34 <menu+0x1cac>)
 8002b1e:	f006 fab1 	bl	8009084 <HAL_GPIO_ReadPin>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d115      	bne.n	8002b54 <menu+0x1acc>
 8002b28:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <menu+0x1cb0>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f083 0301 	eor.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b36:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <menu+0x1c9c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b79      	ldr	r3, [pc, #484]	; (8002d24 <menu+0x1c9c>)
 8002b40:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b42:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <menu+0x1c9c>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d902      	bls.n	8002b50 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002b4a:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <menu+0x1c9c>)
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b50:	f001 feae 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b54:	2108      	movs	r1, #8
 8002b56:	4877      	ldr	r0, [pc, #476]	; (8002d34 <menu+0x1cac>)
 8002b58:	f006 fa94 	bl	8009084 <HAL_GPIO_ReadPin>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d11d      	bne.n	8002b9e <menu+0x1b16>
 8002b62:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <menu+0x1cb0>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	f083 0301 	eor.w	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002b70:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <menu+0x1c9c>)
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	4b71      	ldr	r3, [pc, #452]	; (8002d3c <menu+0x1cb4>)
 8002b76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <menu+0x1c9c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <menu+0x1b02>
 8002b82:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <menu+0x1c9c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d106      	bne.n	8002b98 <menu+0x1b10>
				altLimit = 1;
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <menu+0x1cb8>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002b90:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <menu+0x1cb8>)
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	4b69      	ldr	r3, [pc, #420]	; (8002d3c <menu+0x1cb4>)
 8002b96:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <menu+0x1cbc>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <menu+0x1cc0>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	d17f      	bne.n	8002ca6 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002ba6:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <menu+0x1ca0>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002bae:	4a67      	ldr	r2, [pc, #412]	; (8002d4c <menu+0x1cc4>)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f004 ff40 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002bb8:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <menu+0x1cc8>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f004 ff3b 	bl	8007a38 <lcd_print>
 8002bc2:	e00d      	b.n	8002be0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <menu+0x1ca0>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d109      	bne.n	8002be0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002bcc:	4a61      	ldr	r2, [pc, #388]	; (8002d54 <menu+0x1ccc>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f004 ff31 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002bd6:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <menu+0x1cd0>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f004 ff2c 	bl	8007a38 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002be0:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <menu+0x1cd4>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	220a      	movs	r2, #10
 8002be6:	495e      	ldr	r1, [pc, #376]	; (8002d60 <menu+0x1cd8>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f009 fa77 	bl	800c0dc <itoa>
		lcd_print(2,16,snum);
 8002bee:	4a5c      	ldr	r2, [pc, #368]	; (8002d60 <menu+0x1cd8>)
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f004 ff20 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	484e      	ldr	r0, [pc, #312]	; (8002d34 <menu+0x1cac>)
 8002bfc:	f006 fa42 	bl	8009084 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d119      	bne.n	8002c3a <menu+0x1bb2>
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <menu+0x1cb0>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <menu+0x1bb2>
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <menu+0x1cdc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10e      	bne.n	8002c3a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <menu+0x1cd4>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <menu+0x1cd4>)
 8002c26:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002c28:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <menu+0x1cd4>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d902      	bls.n	8002c36 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002c30:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <menu+0x1cd4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c36:	f001 fe3b 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	483d      	ldr	r0, [pc, #244]	; (8002d34 <menu+0x1cac>)
 8002c3e:	f006 fa21 	bl	8009084 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d119      	bne.n	8002c7c <menu+0x1bf4>
 8002c48:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <menu+0x1cb0>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d012      	beq.n	8002c7c <menu+0x1bf4>
 8002c56:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <menu+0x1cdc>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10e      	bne.n	8002c7c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <menu+0x1cd4>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <menu+0x1cd4>)
 8002c68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <menu+0x1cd4>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002c72:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <menu+0x1cd4>)
 8002c74:	2205      	movs	r2, #5
 8002c76:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c78:	f001 fe1a 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c7c:	2108      	movs	r1, #8
 8002c7e:	482d      	ldr	r0, [pc, #180]	; (8002d34 <menu+0x1cac>)
 8002c80:	f006 fa00 	bl	8009084 <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10d      	bne.n	8002ca6 <menu+0x1c1e>
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <menu+0x1cb0>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <menu+0x1cd4>)
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <menu+0x1cb4>)
 8002c9e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <menu+0x1cbc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002ca6:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <menu+0x1cc0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	f040 80bc 	bne.w	8002e28 <menu+0x1da0>
		if(dilSecim == 0) {
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <menu+0x1ca0>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	; (8002d68 <menu+0x1ce0>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f004 febb 	bl	8007a38 <lcd_print>
 8002cc2:	e008      	b.n	8002cd6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <menu+0x1ca0>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d104      	bne.n	8002cd6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <menu+0x1ce4>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f004 feb1 	bl	8007a38 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <menu+0x1ce8>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d113      	bne.n	8002d06 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <menu+0x1ca0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <menu+0x1ca4>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f004 fea4 	bl	8007a38 <lcd_print>
 8002cf0:	e04b      	b.n	8002d8a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <menu+0x1ca0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d147      	bne.n	8002d8a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <menu+0x1ca8>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f004 fe9a 	bl	8007a38 <lcd_print>
 8002d04:	e041      	b.n	8002d8a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <menu+0x1ce8>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d13d      	bne.n	8002d8a <menu+0x1d02>
			if(dilSecim == 0) {
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <menu+0x1ca0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d130      	bne.n	8002d78 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <menu+0x1cec>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f004 fe8c 	bl	8007a38 <lcd_print>
 8002d20:	e033      	b.n	8002d8a <menu+0x1d02>
 8002d22:	bf00      	nop
 8002d24:	200001f9 	.word	0x200001f9
 8002d28:	2000020d 	.word	0x2000020d
 8002d2c:	0800d070 	.word	0x0800d070
 8002d30:	0800d084 	.word	0x0800d084
 8002d34:	40010800 	.word	0x40010800
 8002d38:	2000021b 	.word	0x2000021b
 8002d3c:	20000118 	.word	0x20000118
 8002d40:	200001f2 	.word	0x200001f2
 8002d44:	20000218 	.word	0x20000218
 8002d48:	200001ec 	.word	0x200001ec
 8002d4c:	0800d410 	.word	0x0800d410
 8002d50:	0800d2d4 	.word	0x0800d2d4
 8002d54:	0800d424 	.word	0x0800d424
 8002d58:	0800d2f8 	.word	0x0800d2f8
 8002d5c:	20000207 	.word	0x20000207
 8002d60:	20000188 	.word	0x20000188
 8002d64:	200001f7 	.word	0x200001f7
 8002d68:	0800d438 	.word	0x0800d438
 8002d6c:	0800d44c 	.word	0x0800d44c
 8002d70:	200001fa 	.word	0x200001fa
 8002d74:	0800d0d0 	.word	0x0800d0d0
			} else if(dilSecim == 1) {
 8002d78:	4b99      	ldr	r3, [pc, #612]	; (8002fe0 <menu+0x1f58>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d104      	bne.n	8002d8a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002d80:	4a98      	ldr	r2, [pc, #608]	; (8002fe4 <menu+0x1f5c>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	2002      	movs	r0, #2
 8002d86:	f004 fe57 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4896      	ldr	r0, [pc, #600]	; (8002fe8 <menu+0x1f60>)
 8002d8e:	f006 f979 	bl	8009084 <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d115      	bne.n	8002dc4 <menu+0x1d3c>
 8002d98:	4b94      	ldr	r3, [pc, #592]	; (8002fec <menu+0x1f64>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002da6:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <menu+0x1f68>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4b90      	ldr	r3, [pc, #576]	; (8002ff0 <menu+0x1f68>)
 8002db0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002db2:	4b8f      	ldr	r3, [pc, #572]	; (8002ff0 <menu+0x1f68>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d902      	bls.n	8002dc0 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002dba:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <menu+0x1f68>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dc0:	f001 fd76 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	4888      	ldr	r0, [pc, #544]	; (8002fe8 <menu+0x1f60>)
 8002dc8:	f006 f95c 	bl	8009084 <HAL_GPIO_ReadPin>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d115      	bne.n	8002dfe <menu+0x1d76>
 8002dd2:	4b86      	ldr	r3, [pc, #536]	; (8002fec <menu+0x1f64>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002de0:	4b83      	ldr	r3, [pc, #524]	; (8002ff0 <menu+0x1f68>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <menu+0x1f68>)
 8002dea:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <menu+0x1f68>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002df4:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <menu+0x1f68>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dfa:	f001 fd59 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfe:	2108      	movs	r1, #8
 8002e00:	4879      	ldr	r0, [pc, #484]	; (8002fe8 <menu+0x1f60>)
 8002e02:	f006 f93f 	bl	8009084 <HAL_GPIO_ReadPin>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10d      	bne.n	8002e28 <menu+0x1da0>
 8002e0c:	4b77      	ldr	r3, [pc, #476]	; (8002fec <menu+0x1f64>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f083 0301 	eor.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002e1a:	4b75      	ldr	r3, [pc, #468]	; (8002ff0 <menu+0x1f68>)
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <menu+0x1f6c>)
 8002e20:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002e22:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <menu+0x1f70>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002e28:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <menu+0x1f74>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b11      	cmp	r3, #17
 8002e2e:	f040 80c3 	bne.w	8002fb8 <menu+0x1f30>
		if(dilSecim == 0) {
 8002e32:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <menu+0x1f58>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d105      	bne.n	8002e46 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002e3a:	4a71      	ldr	r2, [pc, #452]	; (8003000 <menu+0x1f78>)
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f004 fdfa 	bl	8007a38 <lcd_print>
 8002e44:	e008      	b.n	8002e58 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <menu+0x1f58>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d104      	bne.n	8002e58 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002e4e:	4a6d      	ldr	r2, [pc, #436]	; (8003004 <menu+0x1f7c>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	2001      	movs	r0, #1
 8002e54:	f004 fdf0 	bl	8007a38 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <menu+0x1f80>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d113      	bne.n	8002e88 <menu+0x1e00>
			if(dilSecim == 0){
 8002e60:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <menu+0x1f58>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002e68:	4a68      	ldr	r2, [pc, #416]	; (800300c <menu+0x1f84>)
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2002      	movs	r0, #2
 8002e6e:	f004 fde3 	bl	8007a38 <lcd_print>
 8002e72:	e038      	b.n	8002ee6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <menu+0x1f58>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d134      	bne.n	8002ee6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002e7c:	4a64      	ldr	r2, [pc, #400]	; (8003010 <menu+0x1f88>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2002      	movs	r0, #2
 8002e82:	f004 fdd9 	bl	8007a38 <lcd_print>
 8002e86:	e02e      	b.n	8002ee6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002e88:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <menu+0x1f80>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d113      	bne.n	8002eb8 <menu+0x1e30>
			if(dilSecim == 0){
 8002e90:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <menu+0x1f58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002e98:	4a5e      	ldr	r2, [pc, #376]	; (8003014 <menu+0x1f8c>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f004 fdcb 	bl	8007a38 <lcd_print>
 8002ea2:	e020      	b.n	8002ee6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <menu+0x1f58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d11c      	bne.n	8002ee6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002eac:	4a5a      	ldr	r2, [pc, #360]	; (8003018 <menu+0x1f90>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f004 fdc1 	bl	8007a38 <lcd_print>
 8002eb6:	e016      	b.n	8002ee6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <menu+0x1f80>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d112      	bne.n	8002ee6 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002ec0:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <menu+0x1f58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002ec8:	4a54      	ldr	r2, [pc, #336]	; (800301c <menu+0x1f94>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f004 fdb3 	bl	8007a38 <lcd_print>
 8002ed2:	e008      	b.n	8002ee6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ed4:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <menu+0x1f58>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d104      	bne.n	8002ee6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <menu+0x1f98>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	f004 fda9 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	483f      	ldr	r0, [pc, #252]	; (8002fe8 <menu+0x1f60>)
 8002eea:	f006 f8cb 	bl	8009084 <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d115      	bne.n	8002f20 <menu+0x1e98>
 8002ef4:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <menu+0x1f64>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <menu+0x1f80>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <menu+0x1f80>)
 8002f0c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <menu+0x1f80>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d902      	bls.n	8002f1c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002f16:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <menu+0x1f80>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f1c:	f001 fcc8 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f20:	2104      	movs	r1, #4
 8002f22:	4831      	ldr	r0, [pc, #196]	; (8002fe8 <menu+0x1f60>)
 8002f24:	f006 f8ae 	bl	8009084 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d115      	bne.n	8002f5a <menu+0x1ed2>
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <menu+0x1f64>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002f3c:	4b32      	ldr	r3, [pc, #200]	; (8003008 <menu+0x1f80>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <menu+0x1f80>)
 8002f46:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002f48:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <menu+0x1f80>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d902      	bls.n	8002f56 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <menu+0x1f80>)
 8002f52:	2202      	movs	r2, #2
 8002f54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f56:	f001 fcab 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	4822      	ldr	r0, [pc, #136]	; (8002fe8 <menu+0x1f60>)
 8002f5e:	f006 f891 	bl	8009084 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d127      	bne.n	8002fb8 <menu+0x1f30>
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <menu+0x1f64>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d020      	beq.n	8002fb8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <menu+0x1f80>)
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <menu+0x1f6c>)
 8002f7c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <menu+0x1f80>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <menu+0x1f06>
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <menu+0x1f80>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <menu+0x1f14>
				calismaSekli = 0;
 8002f8e:	4b25      	ldr	r3, [pc, #148]	; (8003024 <menu+0x1f9c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <menu+0x1f9c>)
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <menu+0x1f6c>)
 8002f9a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <menu+0x1f80>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <menu+0x1fa0>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <menu+0x1fa0>)
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <menu+0x1f6c>)
 8002fb0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <menu+0x1f70>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <menu+0x1f74>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	f040 80d5 	bne.w	800316c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <menu+0x1f80>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d13c      	bne.n	8003044 <menu+0x1fbc>
			if(dilSecim == 0) {
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <menu+0x1f58>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d12e      	bne.n	8003030 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <menu+0x1fa4>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f004 fd2e 	bl	8007a38 <lcd_print>
 8002fdc:	e048      	b.n	8003070 <menu+0x1fe8>
 8002fde:	bf00      	nop
 8002fe0:	2000020d 	.word	0x2000020d
 8002fe4:	0800d0e4 	.word	0x0800d0e4
 8002fe8:	40010800 	.word	0x40010800
 8002fec:	2000021b 	.word	0x2000021b
 8002ff0:	200001fa 	.word	0x200001fa
 8002ff4:	20000118 	.word	0x20000118
 8002ff8:	20000218 	.word	0x20000218
 8002ffc:	200001ec 	.word	0x200001ec
 8003000:	0800d460 	.word	0x0800d460
 8003004:	0800d474 	.word	0x0800d474
 8003008:	200001fb 	.word	0x200001fb
 800300c:	0800d488 	.word	0x0800d488
 8003010:	0800d498 	.word	0x0800d498
 8003014:	0800d4a8 	.word	0x0800d4a8
 8003018:	0800d4b8 	.word	0x0800d4b8
 800301c:	0800d070 	.word	0x0800d070
 8003020:	0800d084 	.word	0x0800d084
 8003024:	200001ed 	.word	0x200001ed
 8003028:	200001fe 	.word	0x200001fe
 800302c:	0800d4c8 	.word	0x0800d4c8
			} else if(dilSecim == 1) {
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <menu+0x2198>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d11b      	bne.n	8003070 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003038:	4a7a      	ldr	r2, [pc, #488]	; (8003224 <menu+0x219c>)
 800303a:	2101      	movs	r1, #1
 800303c:	2001      	movs	r0, #1
 800303e:	f004 fcfb 	bl	8007a38 <lcd_print>
 8003042:	e015      	b.n	8003070 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003044:	4b78      	ldr	r3, [pc, #480]	; (8003228 <menu+0x21a0>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d111      	bne.n	8003070 <menu+0x1fe8>
			if(dilSecim == 0){
 800304c:	4b74      	ldr	r3, [pc, #464]	; (8003220 <menu+0x2198>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003054:	4a75      	ldr	r2, [pc, #468]	; (800322c <menu+0x21a4>)
 8003056:	2101      	movs	r1, #1
 8003058:	2001      	movs	r0, #1
 800305a:	f004 fced 	bl	8007a38 <lcd_print>
			}
			if(dilSecim == 1){
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <menu+0x2198>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d104      	bne.n	8003070 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003066:	4a72      	ldr	r2, [pc, #456]	; (8003230 <menu+0x21a8>)
 8003068:	2101      	movs	r1, #1
 800306a:	2001      	movs	r0, #1
 800306c:	f004 fce4 	bl	8007a38 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003070:	4b70      	ldr	r3, [pc, #448]	; (8003234 <menu+0x21ac>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d113      	bne.n	80030a0 <menu+0x2018>
			if(dilSecim == 0) {
 8003078:	4b69      	ldr	r3, [pc, #420]	; (8003220 <menu+0x2198>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003080:	4a6d      	ldr	r2, [pc, #436]	; (8003238 <menu+0x21b0>)
 8003082:	2101      	movs	r1, #1
 8003084:	2002      	movs	r0, #2
 8003086:	f004 fcd7 	bl	8007a38 <lcd_print>
 800308a:	e020      	b.n	80030ce <menu+0x2046>
			} else if(dilSecim == 1){
 800308c:	4b64      	ldr	r3, [pc, #400]	; (8003220 <menu+0x2198>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d11c      	bne.n	80030ce <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003094:	4a69      	ldr	r2, [pc, #420]	; (800323c <menu+0x21b4>)
 8003096:	2101      	movs	r1, #1
 8003098:	2002      	movs	r0, #2
 800309a:	f004 fccd 	bl	8007a38 <lcd_print>
 800309e:	e016      	b.n	80030ce <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80030a0:	4b64      	ldr	r3, [pc, #400]	; (8003234 <menu+0x21ac>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d112      	bne.n	80030ce <menu+0x2046>
			if(dilSecim == 0){
 80030a8:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <menu+0x2198>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80030b0:	4a63      	ldr	r2, [pc, #396]	; (8003240 <menu+0x21b8>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f004 fcbf 	bl	8007a38 <lcd_print>
 80030ba:	e008      	b.n	80030ce <menu+0x2046>
			} else if(dilSecim == 1){
 80030bc:	4b58      	ldr	r3, [pc, #352]	; (8003220 <menu+0x2198>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d104      	bne.n	80030ce <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80030c4:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <menu+0x21bc>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	2002      	movs	r0, #2
 80030ca:	f004 fcb5 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ce:	2102      	movs	r1, #2
 80030d0:	485d      	ldr	r0, [pc, #372]	; (8003248 <menu+0x21c0>)
 80030d2:	f005 ffd7 	bl	8009084 <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d115      	bne.n	8003108 <menu+0x2080>
 80030dc:	4b5b      	ldr	r3, [pc, #364]	; (800324c <menu+0x21c4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80030ea:	4b52      	ldr	r3, [pc, #328]	; (8003234 <menu+0x21ac>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <menu+0x21ac>)
 80030f4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80030f6:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <menu+0x21ac>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d902      	bls.n	8003104 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80030fe:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <menu+0x21ac>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003104:	f001 fbd4 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003108:	2104      	movs	r1, #4
 800310a:	484f      	ldr	r0, [pc, #316]	; (8003248 <menu+0x21c0>)
 800310c:	f005 ffba 	bl	8009084 <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d115      	bne.n	8003142 <menu+0x20ba>
 8003116:	4b4d      	ldr	r3, [pc, #308]	; (800324c <menu+0x21c4>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <menu+0x21ac>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <menu+0x21ac>)
 800312e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <menu+0x21ac>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003138:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <menu+0x21ac>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800313e:	f001 fbb7 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003142:	2108      	movs	r1, #8
 8003144:	4840      	ldr	r0, [pc, #256]	; (8003248 <menu+0x21c0>)
 8003146:	f005 ff9d 	bl	8009084 <HAL_GPIO_ReadPin>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10d      	bne.n	800316c <menu+0x20e4>
 8003150:	4b3e      	ldr	r3, [pc, #248]	; (800324c <menu+0x21c4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800315e:	4b35      	ldr	r3, [pc, #212]	; (8003234 <menu+0x21ac>)
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <menu+0x21c8>)
 8003164:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <menu+0x21cc>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800316c:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <menu+0x21d0>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b13      	cmp	r3, #19
 8003172:	f040 80d5 	bne.w	8003320 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003176:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <menu+0x21a0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d113      	bne.n	80031a6 <menu+0x211e>
			if(dilSecim == 0) {
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <menu+0x2198>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003186:	4a35      	ldr	r2, [pc, #212]	; (800325c <menu+0x21d4>)
 8003188:	2101      	movs	r1, #1
 800318a:	2001      	movs	r0, #1
 800318c:	f004 fc54 	bl	8007a38 <lcd_print>
 8003190:	e01f      	b.n	80031d2 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <menu+0x2198>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d11b      	bne.n	80031d2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800319a:	4a31      	ldr	r2, [pc, #196]	; (8003260 <menu+0x21d8>)
 800319c:	2101      	movs	r1, #1
 800319e:	2001      	movs	r0, #1
 80031a0:	f004 fc4a 	bl	8007a38 <lcd_print>
 80031a4:	e015      	b.n	80031d2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <menu+0x21a0>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d111      	bne.n	80031d2 <menu+0x214a>
			if(dilSecim == 0) {
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <menu+0x2198>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80031b6:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <menu+0x21dc>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	2001      	movs	r0, #1
 80031bc:	f004 fc3c 	bl	8007a38 <lcd_print>
			}
			if(dilSecim == 1) {
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <menu+0x2198>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d104      	bne.n	80031d2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <menu+0x21e0>)
 80031ca:	2101      	movs	r1, #1
 80031cc:	2001      	movs	r0, #1
 80031ce:	f004 fc33 	bl	8007a38 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <menu+0x21e4>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d113      	bne.n	8003202 <menu+0x217a>
			if(dilSecim == 0) {
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <menu+0x2198>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <menu+0x21b0>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	2002      	movs	r0, #2
 80031e8:	f004 fc26 	bl	8007a38 <lcd_print>
 80031ec:	e049      	b.n	8003282 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <menu+0x2198>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d145      	bne.n	8003282 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <menu+0x21b4>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	2002      	movs	r0, #2
 80031fc:	f004 fc1c 	bl	8007a38 <lcd_print>
 8003200:	e03f      	b.n	8003282 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <menu+0x21e4>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d13b      	bne.n	8003282 <menu+0x21fa>
			if(dilSecim == 0) {
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <menu+0x2198>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d12e      	bne.n	8003270 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <menu+0x21b8>)
 8003214:	2101      	movs	r1, #1
 8003216:	2002      	movs	r0, #2
 8003218:	f004 fc0e 	bl	8007a38 <lcd_print>
 800321c:	e031      	b.n	8003282 <menu+0x21fa>
 800321e:	bf00      	nop
 8003220:	2000020d 	.word	0x2000020d
 8003224:	0800d4dc 	.word	0x0800d4dc
 8003228:	200001fb 	.word	0x200001fb
 800322c:	0800d4ec 	.word	0x0800d4ec
 8003230:	0800d500 	.word	0x0800d500
 8003234:	200001fc 	.word	0x200001fc
 8003238:	0800d070 	.word	0x0800d070
 800323c:	0800d084 	.word	0x0800d084
 8003240:	0800d0d0 	.word	0x0800d0d0
 8003244:	0800d0e4 	.word	0x0800d0e4
 8003248:	40010800 	.word	0x40010800
 800324c:	2000021b 	.word	0x2000021b
 8003250:	20000118 	.word	0x20000118
 8003254:	20000218 	.word	0x20000218
 8003258:	200001ec 	.word	0x200001ec
 800325c:	0800d514 	.word	0x0800d514
 8003260:	0800d528 	.word	0x0800d528
 8003264:	0800d53c 	.word	0x0800d53c
 8003268:	0800d550 	.word	0x0800d550
 800326c:	200001fd 	.word	0x200001fd
			} else if(dilSecim == 1) {
 8003270:	4b90      	ldr	r3, [pc, #576]	; (80034b4 <menu+0x242c>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d104      	bne.n	8003282 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003278:	4a8f      	ldr	r2, [pc, #572]	; (80034b8 <menu+0x2430>)
 800327a:	2101      	movs	r1, #1
 800327c:	2002      	movs	r0, #2
 800327e:	f004 fbdb 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003282:	2102      	movs	r1, #2
 8003284:	488d      	ldr	r0, [pc, #564]	; (80034bc <menu+0x2434>)
 8003286:	f005 fefd 	bl	8009084 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d115      	bne.n	80032bc <menu+0x2234>
 8003290:	4b8b      	ldr	r3, [pc, #556]	; (80034c0 <menu+0x2438>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800329e:	4b89      	ldr	r3, [pc, #548]	; (80034c4 <menu+0x243c>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b87      	ldr	r3, [pc, #540]	; (80034c4 <menu+0x243c>)
 80032a8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80032aa:	4b86      	ldr	r3, [pc, #536]	; (80034c4 <menu+0x243c>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d902      	bls.n	80032b8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80032b2:	4b84      	ldr	r3, [pc, #528]	; (80034c4 <menu+0x243c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032b8:	f001 fafa 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032bc:	2104      	movs	r1, #4
 80032be:	487f      	ldr	r0, [pc, #508]	; (80034bc <menu+0x2434>)
 80032c0:	f005 fee0 	bl	8009084 <HAL_GPIO_ReadPin>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d115      	bne.n	80032f6 <menu+0x226e>
 80032ca:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <menu+0x2438>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f083 0301 	eor.w	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80032d8:	4b7a      	ldr	r3, [pc, #488]	; (80034c4 <menu+0x243c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	3b01      	subs	r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b78      	ldr	r3, [pc, #480]	; (80034c4 <menu+0x243c>)
 80032e2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80032e4:	4b77      	ldr	r3, [pc, #476]	; (80034c4 <menu+0x243c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80032ec:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <menu+0x243c>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032f2:	f001 fadd 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032f6:	2108      	movs	r1, #8
 80032f8:	4870      	ldr	r0, [pc, #448]	; (80034bc <menu+0x2434>)
 80032fa:	f005 fec3 	bl	8009084 <HAL_GPIO_ReadPin>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10d      	bne.n	8003320 <menu+0x2298>
 8003304:	4b6e      	ldr	r3, [pc, #440]	; (80034c0 <menu+0x2438>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f083 0301 	eor.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003312:	4b6c      	ldr	r3, [pc, #432]	; (80034c4 <menu+0x243c>)
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <menu+0x2440>)
 8003318:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800331a:	4b6c      	ldr	r3, [pc, #432]	; (80034cc <menu+0x2444>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003320:	4b6b      	ldr	r3, [pc, #428]	; (80034d0 <menu+0x2448>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b14      	cmp	r3, #20
 8003326:	f040 80b5 	bne.w	8003494 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800332a:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <menu+0x244c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d113      	bne.n	800335a <menu+0x22d2>
			if(dilSecim == 0) {
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <menu+0x242c>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800333a:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <menu+0x2450>)
 800333c:	2101      	movs	r1, #1
 800333e:	2001      	movs	r0, #1
 8003340:	f004 fb7a 	bl	8007a38 <lcd_print>
 8003344:	e020      	b.n	8003388 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <menu+0x242c>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d11c      	bne.n	8003388 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800334e:	4a63      	ldr	r2, [pc, #396]	; (80034dc <menu+0x2454>)
 8003350:	2101      	movs	r1, #1
 8003352:	2001      	movs	r0, #1
 8003354:	f004 fb70 	bl	8007a38 <lcd_print>
 8003358:	e016      	b.n	8003388 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800335a:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <menu+0x244c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d112      	bne.n	8003388 <menu+0x2300>
			if(dilSecim == 0) {
 8003362:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <menu+0x242c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800336a:	4a5d      	ldr	r2, [pc, #372]	; (80034e0 <menu+0x2458>)
 800336c:	2101      	movs	r1, #1
 800336e:	2001      	movs	r0, #1
 8003370:	f004 fb62 	bl	8007a38 <lcd_print>
 8003374:	e008      	b.n	8003388 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003376:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <menu+0x242c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d104      	bne.n	8003388 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800337e:	4a59      	ldr	r2, [pc, #356]	; (80034e4 <menu+0x245c>)
 8003380:	2101      	movs	r1, #1
 8003382:	2001      	movs	r0, #1
 8003384:	f004 fb58 	bl	8007a38 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003388:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <menu+0x2460>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <menu+0x2330>
			if(dilSecim == 0) {
 8003390:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <menu+0x242c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003398:	4a54      	ldr	r2, [pc, #336]	; (80034ec <menu+0x2464>)
 800339a:	2101      	movs	r1, #1
 800339c:	2002      	movs	r0, #2
 800339e:	f004 fb4b 	bl	8007a38 <lcd_print>
 80033a2:	e020      	b.n	80033e6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80033a4:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <menu+0x242c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d11c      	bne.n	80033e6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80033ac:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <menu+0x2468>)
 80033ae:	2101      	movs	r1, #1
 80033b0:	2002      	movs	r0, #2
 80033b2:	f004 fb41 	bl	8007a38 <lcd_print>
 80033b6:	e016      	b.n	80033e6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <menu+0x2460>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d112      	bne.n	80033e6 <menu+0x235e>
			if(dilSecim == 0) {
 80033c0:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <menu+0x242c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <menu+0x246c>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f004 fb33 	bl	8007a38 <lcd_print>
 80033d2:	e008      	b.n	80033e6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80033d4:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <menu+0x242c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d104      	bne.n	80033e6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <menu+0x2470>)
 80033de:	2101      	movs	r1, #1
 80033e0:	2002      	movs	r0, #2
 80033e2:	f004 fb29 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80033e6:	2102      	movs	r1, #2
 80033e8:	4834      	ldr	r0, [pc, #208]	; (80034bc <menu+0x2434>)
 80033ea:	f005 fe4b 	bl	8009084 <HAL_GPIO_ReadPin>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d119      	bne.n	8003428 <menu+0x23a0>
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <menu+0x2438>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f083 0301 	eor.w	r3, r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <menu+0x23a0>
 8003402:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <menu+0x244c>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d10e      	bne.n	8003428 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <menu+0x2460>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <menu+0x2460>)
 8003414:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003416:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <menu+0x2460>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d902      	bls.n	8003424 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800341e:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <menu+0x2460>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003424:	f001 fa44 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003428:	2104      	movs	r1, #4
 800342a:	4824      	ldr	r0, [pc, #144]	; (80034bc <menu+0x2434>)
 800342c:	f005 fe2a 	bl	8009084 <HAL_GPIO_ReadPin>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d119      	bne.n	800346a <menu+0x23e2>
 8003436:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <menu+0x2438>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d012      	beq.n	800346a <menu+0x23e2>
 8003444:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <menu+0x244c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d10e      	bne.n	800346a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <menu+0x2460>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <menu+0x2460>)
 8003456:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <menu+0x2460>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <menu+0x2460>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003466:	f001 fa23 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346a:	2108      	movs	r1, #8
 800346c:	4813      	ldr	r0, [pc, #76]	; (80034bc <menu+0x2434>)
 800346e:	f005 fe09 	bl	8009084 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10d      	bne.n	8003494 <menu+0x240c>
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <menu+0x2438>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <menu+0x2460>)
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <menu+0x2440>)
 800348c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <menu+0x2444>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <menu+0x2448>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b15      	cmp	r3, #21
 800349a:	f040 80c2 	bne.w	8003622 <menu+0x259a>
		if(dilSecim == 0) {
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <menu+0x242c>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d12c      	bne.n	8003500 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <menu+0x2474>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	2001      	movs	r0, #1
 80034ac:	f004 fac4 	bl	8007a38 <lcd_print>
 80034b0:	e02f      	b.n	8003512 <menu+0x248a>
 80034b2:	bf00      	nop
 80034b4:	2000020d 	.word	0x2000020d
 80034b8:	0800d0e4 	.word	0x0800d0e4
 80034bc:	40010800 	.word	0x40010800
 80034c0:	2000021b 	.word	0x2000021b
 80034c4:	200001fd 	.word	0x200001fd
 80034c8:	20000118 	.word	0x20000118
 80034cc:	20000218 	.word	0x20000218
 80034d0:	200001ec 	.word	0x200001ec
 80034d4:	200001fb 	.word	0x200001fb
 80034d8:	0800d564 	.word	0x0800d564
 80034dc:	0800d578 	.word	0x0800d578
 80034e0:	0800d58c 	.word	0x0800d58c
 80034e4:	0800d5a0 	.word	0x0800d5a0
 80034e8:	200001fe 	.word	0x200001fe
 80034ec:	0800d5b4 	.word	0x0800d5b4
 80034f0:	0800d5c8 	.word	0x0800d5c8
 80034f4:	0800d5d8 	.word	0x0800d5d8
 80034f8:	0800d5ec 	.word	0x0800d5ec
 80034fc:	0800d5fc 	.word	0x0800d5fc
		} else if(dilSecim == 1) {
 8003500:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <menu+0x26ec>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d104      	bne.n	8003512 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003508:	4a9b      	ldr	r2, [pc, #620]	; (8003778 <menu+0x26f0>)
 800350a:	2101      	movs	r1, #1
 800350c:	2001      	movs	r0, #1
 800350e:	f004 fa93 	bl	8007a38 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003512:	4b9a      	ldr	r3, [pc, #616]	; (800377c <menu+0x26f4>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d112      	bne.n	8003540 <menu+0x24b8>
			if(dilSecim == 0) {
 800351a:	4b96      	ldr	r3, [pc, #600]	; (8003774 <menu+0x26ec>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003522:	4a97      	ldr	r2, [pc, #604]	; (8003780 <menu+0x26f8>)
 8003524:	2101      	movs	r1, #1
 8003526:	2002      	movs	r0, #2
 8003528:	f004 fa86 	bl	8007a38 <lcd_print>
			}
			if(dilSecim == 1) {
 800352c:	4b91      	ldr	r3, [pc, #580]	; (8003774 <menu+0x26ec>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d11c      	bne.n	800356e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003534:	4a93      	ldr	r2, [pc, #588]	; (8003784 <menu+0x26fc>)
 8003536:	2101      	movs	r1, #1
 8003538:	2002      	movs	r0, #2
 800353a:	f004 fa7d 	bl	8007a38 <lcd_print>
 800353e:	e016      	b.n	800356e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003540:	4b8e      	ldr	r3, [pc, #568]	; (800377c <menu+0x26f4>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d112      	bne.n	800356e <menu+0x24e6>
			if(dilSecim == 0) {
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <menu+0x26ec>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003550:	4a8d      	ldr	r2, [pc, #564]	; (8003788 <menu+0x2700>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f004 fa6f 	bl	8007a38 <lcd_print>
 800355a:	e008      	b.n	800356e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800355c:	4b85      	ldr	r3, [pc, #532]	; (8003774 <menu+0x26ec>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d104      	bne.n	800356e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003564:	4a89      	ldr	r2, [pc, #548]	; (800378c <menu+0x2704>)
 8003566:	2101      	movs	r1, #1
 8003568:	2002      	movs	r0, #2
 800356a:	f004 fa65 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800356e:	2102      	movs	r1, #2
 8003570:	4887      	ldr	r0, [pc, #540]	; (8003790 <menu+0x2708>)
 8003572:	f005 fd87 	bl	8009084 <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d115      	bne.n	80035a8 <menu+0x2520>
 800357c:	4b85      	ldr	r3, [pc, #532]	; (8003794 <menu+0x270c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800358a:	4b7c      	ldr	r3, [pc, #496]	; (800377c <menu+0x26f4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b7a      	ldr	r3, [pc, #488]	; (800377c <menu+0x26f4>)
 8003594:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003596:	4b79      	ldr	r3, [pc, #484]	; (800377c <menu+0x26f4>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d902      	bls.n	80035a4 <menu+0x251c>
				platformSilindirTipi = 0;
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <menu+0x26f4>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035a4:	f001 f984 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035a8:	2104      	movs	r1, #4
 80035aa:	4879      	ldr	r0, [pc, #484]	; (8003790 <menu+0x2708>)
 80035ac:	f005 fd6a 	bl	8009084 <HAL_GPIO_ReadPin>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d115      	bne.n	80035e2 <menu+0x255a>
 80035b6:	4b77      	ldr	r3, [pc, #476]	; (8003794 <menu+0x270c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80035c4:	4b6d      	ldr	r3, [pc, #436]	; (800377c <menu+0x26f4>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <menu+0x26f4>)
 80035ce:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <menu+0x26f4>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <menu+0x2556>
		   		platformSilindirTipi = 1;
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <menu+0x26f4>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035de:	f001 f967 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e2:	2108      	movs	r1, #8
 80035e4:	486a      	ldr	r0, [pc, #424]	; (8003790 <menu+0x2708>)
 80035e6:	f005 fd4d 	bl	8009084 <HAL_GPIO_ReadPin>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d118      	bne.n	8003622 <menu+0x259a>
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <menu+0x270c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d011      	beq.n	8003622 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <menu+0x26f4>)
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	4b65      	ldr	r3, [pc, #404]	; (8003798 <menu+0x2710>)
 8003604:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003606:	4b5d      	ldr	r3, [pc, #372]	; (800377c <menu+0x26f4>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d106      	bne.n	800361c <menu+0x2594>
				altLimit = 1;
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <menu+0x2714>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <menu+0x2714>)
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <menu+0x2710>)
 800361a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800361c:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <menu+0x2718>)
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003622:	4b60      	ldr	r3, [pc, #384]	; (80037a4 <menu+0x271c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b16      	cmp	r3, #22
 8003628:	f040 8081 	bne.w	800372e <menu+0x26a6>
		if(dilSecim == 0) {
 800362c:	4b51      	ldr	r3, [pc, #324]	; (8003774 <menu+0x26ec>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003634:	4a5c      	ldr	r2, [pc, #368]	; (80037a8 <menu+0x2720>)
 8003636:	2101      	movs	r1, #1
 8003638:	2001      	movs	r0, #1
 800363a:	f004 f9fd 	bl	8007a38 <lcd_print>
 800363e:	e008      	b.n	8003652 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <menu+0x26ec>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d104      	bne.n	8003652 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <menu+0x2724>)
 800364a:	2101      	movs	r1, #1
 800364c:	2001      	movs	r0, #1
 800364e:	f004 f9f3 	bl	8007a38 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003652:	4b48      	ldr	r3, [pc, #288]	; (8003774 <menu+0x26ec>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800365a:	4a55      	ldr	r2, [pc, #340]	; (80037b0 <menu+0x2728>)
 800365c:	2101      	movs	r1, #1
 800365e:	2002      	movs	r0, #2
 8003660:	f004 f9ea 	bl	8007a38 <lcd_print>
 8003664:	e008      	b.n	8003678 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <menu+0x26ec>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d104      	bne.n	8003678 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800366e:	4a51      	ldr	r2, [pc, #324]	; (80037b4 <menu+0x272c>)
 8003670:	2101      	movs	r1, #1
 8003672:	2002      	movs	r0, #2
 8003674:	f004 f9e0 	bl	8007a38 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003678:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <menu+0x2730>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	220a      	movs	r2, #10
 800367e:	494f      	ldr	r1, [pc, #316]	; (80037bc <menu+0x2734>)
 8003680:	4618      	mov	r0, r3
 8003682:	f008 fd2b 	bl	800c0dc <itoa>
		lcd_print(2,16,snum);
 8003686:	4a4d      	ldr	r2, [pc, #308]	; (80037bc <menu+0x2734>)
 8003688:	2110      	movs	r1, #16
 800368a:	2002      	movs	r0, #2
 800368c:	f004 f9d4 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003690:	2102      	movs	r1, #2
 8003692:	483f      	ldr	r0, [pc, #252]	; (8003790 <menu+0x2708>)
 8003694:	f005 fcf6 	bl	8009084 <HAL_GPIO_ReadPin>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d115      	bne.n	80036ca <menu+0x2642>
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <menu+0x270c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	f083 0301 	eor.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <menu+0x2730>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <menu+0x2730>)
 80036b6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <menu+0x2730>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d902      	bls.n	80036c6 <menu+0x263e>
				yukariValfTmr = 0;
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <menu+0x2730>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036c6:	f001 f8f3 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ca:	2104      	movs	r1, #4
 80036cc:	4830      	ldr	r0, [pc, #192]	; (8003790 <menu+0x2708>)
 80036ce:	f005 fcd9 	bl	8009084 <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d115      	bne.n	8003704 <menu+0x267c>
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <menu+0x270c>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <menu+0x2730>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <menu+0x2730>)
 80036f0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <menu+0x2730>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d902      	bls.n	8003700 <menu+0x2678>
		   		yukariValfTmr = 5;
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <menu+0x2730>)
 80036fc:	2205      	movs	r2, #5
 80036fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003700:	f001 f8d6 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003704:	2108      	movs	r1, #8
 8003706:	4822      	ldr	r0, [pc, #136]	; (8003790 <menu+0x2708>)
 8003708:	f005 fcbc 	bl	8009084 <HAL_GPIO_ReadPin>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10d      	bne.n	800372e <menu+0x26a6>
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <menu+0x270c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	f083 0301 	eor.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <menu+0x2730>)
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <menu+0x2710>)
 8003726:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <menu+0x2718>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <menu+0x271c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b17      	cmp	r3, #23
 8003734:	f040 80ac 	bne.w	8003890 <menu+0x2808>
		if(dilSecim == 0) {
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <menu+0x26ec>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003740:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <menu+0x2738>)
 8003742:	2101      	movs	r1, #1
 8003744:	2001      	movs	r0, #1
 8003746:	f004 f977 	bl	8007a38 <lcd_print>
 800374a:	e008      	b.n	800375e <menu+0x26d6>
		} else if(dilSecim == 1) {
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <menu+0x26ec>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d104      	bne.n	800375e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <menu+0x273c>)
 8003756:	2101      	movs	r1, #1
 8003758:	2001      	movs	r0, #1
 800375a:	f004 f96d 	bl	8007a38 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <menu+0x26ec>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d130      	bne.n	80037c8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <menu+0x2728>)
 8003768:	2101      	movs	r1, #1
 800376a:	2002      	movs	r0, #2
 800376c:	f004 f964 	bl	8007a38 <lcd_print>
 8003770:	e033      	b.n	80037da <menu+0x2752>
 8003772:	bf00      	nop
 8003774:	2000020d 	.word	0x2000020d
 8003778:	0800d610 	.word	0x0800d610
 800377c:	200001ff 	.word	0x200001ff
 8003780:	0800d5b4 	.word	0x0800d5b4
 8003784:	0800d5c8 	.word	0x0800d5c8
 8003788:	0800d5d8 	.word	0x0800d5d8
 800378c:	0800d5ec 	.word	0x0800d5ec
 8003790:	40010800 	.word	0x40010800
 8003794:	2000021b 	.word	0x2000021b
 8003798:	20000118 	.word	0x20000118
 800379c:	200001f2 	.word	0x200001f2
 80037a0:	20000218 	.word	0x20000218
 80037a4:	200001ec 	.word	0x200001ec
 80037a8:	0800d620 	.word	0x0800d620
 80037ac:	0800d634 	.word	0x0800d634
 80037b0:	0800d2d4 	.word	0x0800d2d4
 80037b4:	0800d648 	.word	0x0800d648
 80037b8:	20000200 	.word	0x20000200
 80037bc:	20000188 	.word	0x20000188
 80037c0:	0800d658 	.word	0x0800d658
 80037c4:	0800d66c 	.word	0x0800d66c
			} else if(dilSecim == 1) {
 80037c8:	4b98      	ldr	r3, [pc, #608]	; (8003a2c <menu+0x29a4>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d104      	bne.n	80037da <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80037d0:	4a97      	ldr	r2, [pc, #604]	; (8003a30 <menu+0x29a8>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	2002      	movs	r0, #2
 80037d6:	f004 f92f 	bl	8007a38 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80037da:	4b96      	ldr	r3, [pc, #600]	; (8003a34 <menu+0x29ac>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	220a      	movs	r2, #10
 80037e0:	4995      	ldr	r1, [pc, #596]	; (8003a38 <menu+0x29b0>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f008 fc7a 	bl	800c0dc <itoa>
		lcd_print(2,16,snum);
 80037e8:	4a93      	ldr	r2, [pc, #588]	; (8003a38 <menu+0x29b0>)
 80037ea:	2110      	movs	r1, #16
 80037ec:	2002      	movs	r0, #2
 80037ee:	f004 f923 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f2:	2102      	movs	r1, #2
 80037f4:	4891      	ldr	r0, [pc, #580]	; (8003a3c <menu+0x29b4>)
 80037f6:	f005 fc45 	bl	8009084 <HAL_GPIO_ReadPin>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d115      	bne.n	800382c <menu+0x27a4>
 8003800:	4b8f      	ldr	r3, [pc, #572]	; (8003a40 <menu+0x29b8>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f083 0301 	eor.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800380e:	4b89      	ldr	r3, [pc, #548]	; (8003a34 <menu+0x29ac>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b87      	ldr	r3, [pc, #540]	; (8003a34 <menu+0x29ac>)
 8003818:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800381a:	4b86      	ldr	r3, [pc, #536]	; (8003a34 <menu+0x29ac>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b05      	cmp	r3, #5
 8003820:	d902      	bls.n	8003828 <menu+0x27a0>
				asagiValfTmr = 0;
 8003822:	4b84      	ldr	r3, [pc, #528]	; (8003a34 <menu+0x29ac>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003828:	f001 f842 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800382c:	2104      	movs	r1, #4
 800382e:	4883      	ldr	r0, [pc, #524]	; (8003a3c <menu+0x29b4>)
 8003830:	f005 fc28 	bl	8009084 <HAL_GPIO_ReadPin>
 8003834:	4603      	mov	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d115      	bne.n	8003866 <menu+0x27de>
 800383a:	4b81      	ldr	r3, [pc, #516]	; (8003a40 <menu+0x29b8>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003848:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <menu+0x29ac>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	4b78      	ldr	r3, [pc, #480]	; (8003a34 <menu+0x29ac>)
 8003852:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003854:	4b77      	ldr	r3, [pc, #476]	; (8003a34 <menu+0x29ac>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d902      	bls.n	8003862 <menu+0x27da>
		   		asagiValfTmr = 5;
 800385c:	4b75      	ldr	r3, [pc, #468]	; (8003a34 <menu+0x29ac>)
 800385e:	2205      	movs	r2, #5
 8003860:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003862:	f001 f825 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003866:	2108      	movs	r1, #8
 8003868:	4874      	ldr	r0, [pc, #464]	; (8003a3c <menu+0x29b4>)
 800386a:	f005 fc0b 	bl	8009084 <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10d      	bne.n	8003890 <menu+0x2808>
 8003874:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <menu+0x29b8>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003882:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <menu+0x29ac>)
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <menu+0x29bc>)
 8003888:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800388a:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <menu+0x29c0>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003890:	4b6e      	ldr	r3, [pc, #440]	; (8003a4c <menu+0x29c4>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b18      	cmp	r3, #24
 8003896:	f040 809d 	bne.w	80039d4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <menu+0x29c8>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d113      	bne.n	80038ca <menu+0x2842>
			if(dilSecim == 0) {
 80038a2:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <menu+0x29a4>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80038aa:	4a6a      	ldr	r2, [pc, #424]	; (8003a54 <menu+0x29cc>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	2001      	movs	r0, #1
 80038b0:	f004 f8c2 	bl	8007a38 <lcd_print>
 80038b4:	e020      	b.n	80038f8 <menu+0x2870>
			} else if(dilSecim == 1) {
 80038b6:	4b5d      	ldr	r3, [pc, #372]	; (8003a2c <menu+0x29a4>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d11c      	bne.n	80038f8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80038be:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <menu+0x29d0>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	2001      	movs	r0, #1
 80038c4:	f004 f8b8 	bl	8007a38 <lcd_print>
 80038c8:	e016      	b.n	80038f8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80038ca:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <menu+0x29c8>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d112      	bne.n	80038f8 <menu+0x2870>
			if(dilSecim == 0) {
 80038d2:	4b56      	ldr	r3, [pc, #344]	; (8003a2c <menu+0x29a4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80038da:	4a60      	ldr	r2, [pc, #384]	; (8003a5c <menu+0x29d4>)
 80038dc:	2101      	movs	r1, #1
 80038de:	2001      	movs	r0, #1
 80038e0:	f004 f8aa 	bl	8007a38 <lcd_print>
 80038e4:	e008      	b.n	80038f8 <menu+0x2870>
			} else if(dilSecim == 1) {
 80038e6:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <menu+0x29a4>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d104      	bne.n	80038f8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80038ee:	4a5c      	ldr	r2, [pc, #368]	; (8003a60 <menu+0x29d8>)
 80038f0:	2101      	movs	r1, #1
 80038f2:	2001      	movs	r0, #1
 80038f4:	f004 f8a0 	bl	8007a38 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80038f8:	4b4c      	ldr	r3, [pc, #304]	; (8003a2c <menu+0x29a4>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <menu+0x29dc>)
 8003902:	2101      	movs	r1, #1
 8003904:	2002      	movs	r0, #2
 8003906:	f004 f897 	bl	8007a38 <lcd_print>
 800390a:	e008      	b.n	800391e <menu+0x2896>
			} else if(dilSecim == 1) {
 800390c:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <menu+0x29a4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d104      	bne.n	800391e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003914:	4a46      	ldr	r2, [pc, #280]	; (8003a30 <menu+0x29a8>)
 8003916:	2101      	movs	r1, #1
 8003918:	2002      	movs	r0, #2
 800391a:	f004 f88d 	bl	8007a38 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800391e:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <menu+0x29e0>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	220a      	movs	r2, #10
 8003924:	4944      	ldr	r1, [pc, #272]	; (8003a38 <menu+0x29b0>)
 8003926:	4618      	mov	r0, r3
 8003928:	f008 fbd8 	bl	800c0dc <itoa>
		lcd_print(2, 16, snum);
 800392c:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <menu+0x29b0>)
 800392e:	2110      	movs	r1, #16
 8003930:	2002      	movs	r0, #2
 8003932:	f004 f881 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003936:	2102      	movs	r1, #2
 8003938:	4840      	ldr	r0, [pc, #256]	; (8003a3c <menu+0x29b4>)
 800393a:	f005 fba3 	bl	8009084 <HAL_GPIO_ReadPin>
 800393e:	4603      	mov	r3, r0
 8003940:	2b01      	cmp	r3, #1
 8003942:	d115      	bne.n	8003970 <menu+0x28e8>
 8003944:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <menu+0x29b8>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003952:	4b45      	ldr	r3, [pc, #276]	; (8003a68 <menu+0x29e0>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <menu+0x29e0>)
 800395c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800395e:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <menu+0x29e0>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d902      	bls.n	800396c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <menu+0x29e0>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800396c:	f000 ffa0 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003970:	2104      	movs	r1, #4
 8003972:	4832      	ldr	r0, [pc, #200]	; (8003a3c <menu+0x29b4>)
 8003974:	f005 fb86 	bl	8009084 <HAL_GPIO_ReadPin>
 8003978:	4603      	mov	r3, r0
 800397a:	2b01      	cmp	r3, #1
 800397c:	d115      	bne.n	80039aa <menu+0x2922>
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <menu+0x29b8>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	f083 0301 	eor.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <menu+0x29e0>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <menu+0x29e0>)
 8003996:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <menu+0x29e0>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b06      	cmp	r3, #6
 800399e:	d902      	bls.n	80039a6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80039a0:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <menu+0x29e0>)
 80039a2:	2205      	movs	r2, #5
 80039a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039a6:	f000 ff83 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039aa:	2108      	movs	r1, #8
 80039ac:	4823      	ldr	r0, [pc, #140]	; (8003a3c <menu+0x29b4>)
 80039ae:	f005 fb69 	bl	8009084 <HAL_GPIO_ReadPin>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10d      	bne.n	80039d4 <menu+0x294c>
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <menu+0x29b8>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <menu+0x29e0>)
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <menu+0x29bc>)
 80039cc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <menu+0x29c0>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <menu+0x29c4>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b19      	cmp	r3, #25
 80039da:	f040 80c4 	bne.w	8003b66 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <menu+0x29c8>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d113      	bne.n	8003a0e <menu+0x2986>
			if(dilSecim == 0) {
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <menu+0x29a4>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 80039ee:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <menu+0x29e4>)
 80039f0:	2101      	movs	r1, #1
 80039f2:	2001      	movs	r0, #1
 80039f4:	f004 f820 	bl	8007a38 <lcd_print>
 80039f8:	e047      	b.n	8003a8a <menu+0x2a02>
			} else if(dilSecim == 1) {
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <menu+0x29a4>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d143      	bne.n	8003a8a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <menu+0x29e8>)
 8003a04:	2101      	movs	r1, #1
 8003a06:	2001      	movs	r0, #1
 8003a08:	f004 f816 	bl	8007a38 <lcd_print>
 8003a0c:	e03d      	b.n	8003a8a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <menu+0x29c8>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d139      	bne.n	8003a8a <menu+0x2a02>
			if(dilSecim == 0) {
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <menu+0x29a4>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d12c      	bne.n	8003a78 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <menu+0x29ec>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	2001      	movs	r0, #1
 8003a24:	f004 f808 	bl	8007a38 <lcd_print>
 8003a28:	e02f      	b.n	8003a8a <menu+0x2a02>
 8003a2a:	bf00      	nop
 8003a2c:	2000020d 	.word	0x2000020d
 8003a30:	0800d648 	.word	0x0800d648
 8003a34:	20000201 	.word	0x20000201
 8003a38:	20000188 	.word	0x20000188
 8003a3c:	40010800 	.word	0x40010800
 8003a40:	2000021b 	.word	0x2000021b
 8003a44:	20000118 	.word	0x20000118
 8003a48:	20000218 	.word	0x20000218
 8003a4c:	200001ec 	.word	0x200001ec
 8003a50:	200001fb 	.word	0x200001fb
 8003a54:	0800d680 	.word	0x0800d680
 8003a58:	0800d694 	.word	0x0800d694
 8003a5c:	0800d6a8 	.word	0x0800d6a8
 8003a60:	0800d6bc 	.word	0x0800d6bc
 8003a64:	0800d2d4 	.word	0x0800d2d4
 8003a68:	20000202 	.word	0x20000202
 8003a6c:	0800d6d0 	.word	0x0800d6d0
 8003a70:	0800d6e4 	.word	0x0800d6e4
 8003a74:	0800d6f8 	.word	0x0800d6f8
			} else if(dilSecim == 1) {
 8003a78:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <menu+0x2bc0>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d104      	bne.n	8003a8a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003a80:	4a72      	ldr	r2, [pc, #456]	; (8003c4c <menu+0x2bc4>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	2001      	movs	r0, #1
 8003a86:	f003 ffd7 	bl	8007a38 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003a8a:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <menu+0x2bc0>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a92:	4a6f      	ldr	r2, [pc, #444]	; (8003c50 <menu+0x2bc8>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	2002      	movs	r0, #2
 8003a98:	f003 ffce 	bl	8007a38 <lcd_print>
 8003a9c:	e008      	b.n	8003ab0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <menu+0x2bc0>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d104      	bne.n	8003ab0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003aa6:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <menu+0x2bcc>)
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f003 ffc4 	bl	8007a38 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ab0:	4b69      	ldr	r3, [pc, #420]	; (8003c58 <menu+0x2bd0>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	4969      	ldr	r1, [pc, #420]	; (8003c5c <menu+0x2bd4>)
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 fb0f 	bl	800c0dc <itoa>
		lcd_print(2,16,snum);
 8003abe:	4a67      	ldr	r2, [pc, #412]	; (8003c5c <menu+0x2bd4>)
 8003ac0:	2110      	movs	r1, #16
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f003 ffb8 	bl	8007a38 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4865      	ldr	r0, [pc, #404]	; (8003c60 <menu+0x2bd8>)
 8003acc:	f005 fada 	bl	8009084 <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d115      	bne.n	8003b02 <menu+0x2a7a>
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <menu+0x2bdc>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ae4:	4b5c      	ldr	r3, [pc, #368]	; (8003c58 <menu+0x2bd0>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b5a      	ldr	r3, [pc, #360]	; (8003c58 <menu+0x2bd0>)
 8003aee:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003af0:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <menu+0x2bd0>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d902      	bls.n	8003afe <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <menu+0x2bd0>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003afe:	f000 fed7 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b02:	2104      	movs	r1, #4
 8003b04:	4856      	ldr	r0, [pc, #344]	; (8003c60 <menu+0x2bd8>)
 8003b06:	f005 fabd 	bl	8009084 <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <menu+0x2ab4>
 8003b10:	4b54      	ldr	r3, [pc, #336]	; (8003c64 <menu+0x2bdc>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	; (8003c58 <menu+0x2bd0>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <menu+0x2bd0>)
 8003b28:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003b2a:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <menu+0x2bd0>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003b32:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <menu+0x2bd0>)
 8003b34:	2205      	movs	r2, #5
 8003b36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b38:	f000 feba 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4848      	ldr	r0, [pc, #288]	; (8003c60 <menu+0x2bd8>)
 8003b40:	f005 faa0 	bl	8009084 <HAL_GPIO_ReadPin>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10d      	bne.n	8003b66 <menu+0x2ade>
 8003b4a:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <menu+0x2bdc>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	f083 0301 	eor.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d006      	beq.n	8003b66 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003b58:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <menu+0x2bd0>)
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <menu+0x2be0>)
 8003b5e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <menu+0x2be4>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <menu+0x2be8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b1a      	cmp	r3, #26
 8003b6c:	f040 80ec 	bne.w	8003d48 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003b70:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <menu+0x2bc0>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003b78:	4a3e      	ldr	r2, [pc, #248]	; (8003c74 <menu+0x2bec>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f003 ff5b 	bl	8007a38 <lcd_print>
 8003b82:	e008      	b.n	8003b96 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <menu+0x2bc0>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d104      	bne.n	8003b96 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003b8c:	4a3a      	ldr	r2, [pc, #232]	; (8003c78 <menu+0x2bf0>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	2001      	movs	r0, #1
 8003b92:	f003 ff51 	bl	8007a38 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003b96:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <menu+0x2bf4>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b63      	cmp	r3, #99	; 0x63
 8003b9c:	d91e      	bls.n	8003bdc <menu+0x2b54>
			if(dilSecim == 0) {
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <menu+0x2bc0>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <menu+0x2bc8>)
 8003ba8:	2101      	movs	r1, #1
 8003baa:	2002      	movs	r0, #2
 8003bac:	f003 ff44 	bl	8007a38 <lcd_print>
			}
			if(dilSecim == 1) {
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <menu+0x2bc0>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d104      	bne.n	8003bc2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <menu+0x2bcc>)
 8003bba:	2101      	movs	r1, #1
 8003bbc:	2002      	movs	r0, #2
 8003bbe:	f003 ff3b 	bl	8007a38 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <menu+0x2bf4>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	4924      	ldr	r1, [pc, #144]	; (8003c5c <menu+0x2bd4>)
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f008 fa86 	bl	800c0dc <itoa>
			lcd_print(2,14,snum);
 8003bd0:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <menu+0x2bd4>)
 8003bd2:	210e      	movs	r1, #14
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f003 ff2f 	bl	8007a38 <lcd_print>
 8003bda:	e066      	b.n	8003caa <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <menu+0x2bf4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d923      	bls.n	8003c2c <menu+0x2ba4>
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <menu+0x2bf4>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b63      	cmp	r3, #99	; 0x63
 8003bea:	d81f      	bhi.n	8003c2c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <menu+0x2bc0>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <menu+0x2bc8>)
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f003 ff1d 	bl	8007a38 <lcd_print>
 8003bfe:	e008      	b.n	8003c12 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <menu+0x2bc0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d104      	bne.n	8003c12 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <menu+0x2bcc>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f003 ff13 	bl	8007a38 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <menu+0x2bf4>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	220a      	movs	r2, #10
 8003c18:	4910      	ldr	r1, [pc, #64]	; (8003c5c <menu+0x2bd4>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f008 fa5e 	bl	800c0dc <itoa>
			lcd_print(2, 15, snum);
 8003c20:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <menu+0x2bd4>)
 8003c22:	210f      	movs	r1, #15
 8003c24:	2002      	movs	r0, #2
 8003c26:	f003 ff07 	bl	8007a38 <lcd_print>
 8003c2a:	e03e      	b.n	8003caa <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <menu+0x2bf4>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b09      	cmp	r3, #9
 8003c32:	d83a      	bhi.n	8003caa <menu+0x2c22>
			if(dilSecim == 0) {
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <menu+0x2bc0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d121      	bne.n	8003c80 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <menu+0x2bc8>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2002      	movs	r0, #2
 8003c42:	f003 fef9 	bl	8007a38 <lcd_print>
 8003c46:	e024      	b.n	8003c92 <menu+0x2c0a>
 8003c48:	2000020d 	.word	0x2000020d
 8003c4c:	0800d70c 	.word	0x0800d70c
 8003c50:	0800d2d4 	.word	0x0800d2d4
 8003c54:	0800d648 	.word	0x0800d648
 8003c58:	20000203 	.word	0x20000203
 8003c5c:	20000188 	.word	0x20000188
 8003c60:	40010800 	.word	0x40010800
 8003c64:	2000021b 	.word	0x2000021b
 8003c68:	20000118 	.word	0x20000118
 8003c6c:	20000218 	.word	0x20000218
 8003c70:	200001ec 	.word	0x200001ec
 8003c74:	0800d720 	.word	0x0800d720
 8003c78:	0800d734 	.word	0x0800d734
 8003c7c:	20000204 	.word	0x20000204
			} else if(dilSecim == 1) {
 8003c80:	4b8f      	ldr	r3, [pc, #572]	; (8003ec0 <menu+0x2e38>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d104      	bne.n	8003c92 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003c88:	4a8e      	ldr	r2, [pc, #568]	; (8003ec4 <menu+0x2e3c>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f003 fed3 	bl	8007a38 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c92:	4b8d      	ldr	r3, [pc, #564]	; (8003ec8 <menu+0x2e40>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	220a      	movs	r2, #10
 8003c98:	498c      	ldr	r1, [pc, #560]	; (8003ecc <menu+0x2e44>)
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f008 fa1e 	bl	800c0dc <itoa>
			lcd_print(2, 16, snum);
 8003ca0:	4a8a      	ldr	r2, [pc, #552]	; (8003ecc <menu+0x2e44>)
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	2002      	movs	r0, #2
 8003ca6:	f003 fec7 	bl	8007a38 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003caa:	2102      	movs	r1, #2
 8003cac:	4888      	ldr	r0, [pc, #544]	; (8003ed0 <menu+0x2e48>)
 8003cae:	f005 f9e9 	bl	8009084 <HAL_GPIO_ReadPin>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d115      	bne.n	8003ce4 <menu+0x2c5c>
 8003cb8:	4b86      	ldr	r3, [pc, #536]	; (8003ed4 <menu+0x2e4c>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f083 0301 	eor.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00e      	beq.n	8003ce4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003cc6:	4b80      	ldr	r3, [pc, #512]	; (8003ec8 <menu+0x2e40>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b7e      	ldr	r3, [pc, #504]	; (8003ec8 <menu+0x2e40>)
 8003cd0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003cd2:	4b7d      	ldr	r3, [pc, #500]	; (8003ec8 <menu+0x2e40>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2bb4      	cmp	r3, #180	; 0xb4
 8003cd8:	d902      	bls.n	8003ce0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003cda:	4b7b      	ldr	r3, [pc, #492]	; (8003ec8 <menu+0x2e40>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ce0:	f000 fde6 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	487a      	ldr	r0, [pc, #488]	; (8003ed0 <menu+0x2e48>)
 8003ce8:	f005 f9cc 	bl	8009084 <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d115      	bne.n	8003d1e <menu+0x2c96>
 8003cf2:	4b78      	ldr	r3, [pc, #480]	; (8003ed4 <menu+0x2e4c>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003d00:	4b71      	ldr	r3, [pc, #452]	; (8003ec8 <menu+0x2e40>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <menu+0x2e40>)
 8003d0a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003d0c:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <menu+0x2e40>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2bb5      	cmp	r3, #181	; 0xb5
 8003d12:	d902      	bls.n	8003d1a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003d14:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <menu+0x2e40>)
 8003d16:	22b4      	movs	r2, #180	; 0xb4
 8003d18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d1a:	f000 fdc9 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d1e:	2108      	movs	r1, #8
 8003d20:	486b      	ldr	r0, [pc, #428]	; (8003ed0 <menu+0x2e48>)
 8003d22:	f005 f9af 	bl	8009084 <HAL_GPIO_ReadPin>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10d      	bne.n	8003d48 <menu+0x2cc0>
 8003d2c:	4b69      	ldr	r3, [pc, #420]	; (8003ed4 <menu+0x2e4c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	f083 0301 	eor.w	r3, r3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003d3a:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <menu+0x2e40>)
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	4b66      	ldr	r3, [pc, #408]	; (8003ed8 <menu+0x2e50>)
 8003d40:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003d42:	4b66      	ldr	r3, [pc, #408]	; (8003edc <menu+0x2e54>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003d48:	4b65      	ldr	r3, [pc, #404]	; (8003ee0 <menu+0x2e58>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b1b      	cmp	r3, #27
 8003d4e:	f040 8083 	bne.w	8003e58 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003d52:	4a64      	ldr	r2, [pc, #400]	; (8003ee4 <menu+0x2e5c>)
 8003d54:	2101      	movs	r1, #1
 8003d56:	2001      	movs	r0, #1
 8003d58:	f003 fe6e 	bl	8007a38 <lcd_print>

		if(buzzer == 0) {
 8003d5c:	4b62      	ldr	r3, [pc, #392]	; (8003ee8 <menu+0x2e60>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d113      	bne.n	8003d8c <menu+0x2d04>
			if(dilSecim == 0) {
 8003d64:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <menu+0x2e38>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003d6c:	4a5f      	ldr	r2, [pc, #380]	; (8003eec <menu+0x2e64>)
 8003d6e:	2101      	movs	r1, #1
 8003d70:	2002      	movs	r0, #2
 8003d72:	f003 fe61 	bl	8007a38 <lcd_print>
 8003d76:	e020      	b.n	8003dba <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003d78:	4b51      	ldr	r3, [pc, #324]	; (8003ec0 <menu+0x2e38>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d11c      	bne.n	8003dba <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003d80:	4a5b      	ldr	r2, [pc, #364]	; (8003ef0 <menu+0x2e68>)
 8003d82:	2101      	movs	r1, #1
 8003d84:	2002      	movs	r0, #2
 8003d86:	f003 fe57 	bl	8007a38 <lcd_print>
 8003d8a:	e016      	b.n	8003dba <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003d8c:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <menu+0x2e60>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d112      	bne.n	8003dba <menu+0x2d32>
			if(dilSecim == 0) {
 8003d94:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <menu+0x2e38>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003d9c:	4a55      	ldr	r2, [pc, #340]	; (8003ef4 <menu+0x2e6c>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	2002      	movs	r0, #2
 8003da2:	f003 fe49 	bl	8007a38 <lcd_print>
 8003da6:	e008      	b.n	8003dba <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003da8:	4b45      	ldr	r3, [pc, #276]	; (8003ec0 <menu+0x2e38>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d104      	bne.n	8003dba <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003db0:	4a51      	ldr	r2, [pc, #324]	; (8003ef8 <menu+0x2e70>)
 8003db2:	2101      	movs	r1, #1
 8003db4:	2002      	movs	r0, #2
 8003db6:	f003 fe3f 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4844      	ldr	r0, [pc, #272]	; (8003ed0 <menu+0x2e48>)
 8003dbe:	f005 f961 	bl	8009084 <HAL_GPIO_ReadPin>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d115      	bne.n	8003df4 <menu+0x2d6c>
 8003dc8:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <menu+0x2e4c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003dd6:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <menu+0x2e60>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <menu+0x2e60>)
 8003de0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <menu+0x2e60>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d902      	bls.n	8003df0 <menu+0x2d68>
				buzzer = 0;
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <menu+0x2e60>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003df0:	f000 fd5e 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df4:	2104      	movs	r1, #4
 8003df6:	4836      	ldr	r0, [pc, #216]	; (8003ed0 <menu+0x2e48>)
 8003df8:	f005 f944 	bl	8009084 <HAL_GPIO_ReadPin>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d115      	bne.n	8003e2e <menu+0x2da6>
 8003e02:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <menu+0x2e4c>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <menu+0x2da6>
			buzzer = buzzer - 1;
 8003e10:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <menu+0x2e60>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <menu+0x2e60>)
 8003e1a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <menu+0x2e60>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <menu+0x2da2>
		   		buzzer = 1;
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <menu+0x2e60>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e2a:	f000 fd41 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2e:	2108      	movs	r1, #8
 8003e30:	4827      	ldr	r0, [pc, #156]	; (8003ed0 <menu+0x2e48>)
 8003e32:	f005 f927 	bl	8009084 <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10d      	bne.n	8003e58 <menu+0x2dd0>
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <menu+0x2e4c>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f083 0301 	eor.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <menu+0x2e60>)
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <menu+0x2e50>)
 8003e50:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <menu+0x2e54>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <menu+0x2e58>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b1c      	cmp	r3, #28
 8003e5e:	f040 80ab 	bne.w	8003fb8 <menu+0x2f30>
		calismaSayModu = 0;
 8003e62:	4b26      	ldr	r3, [pc, #152]	; (8003efc <menu+0x2e74>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003e68:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <menu+0x2e78>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f003 fde3 	bl	8007a38 <lcd_print>

		if(demoMode == 0) {
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <menu+0x2e7c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d113      	bne.n	8003ea2 <menu+0x2e1a>
			if(dilSecim == 0) {
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <menu+0x2e38>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <menu+0x2e64>)
 8003e84:	2101      	movs	r1, #1
 8003e86:	2002      	movs	r0, #2
 8003e88:	f003 fdd6 	bl	8007a38 <lcd_print>
 8003e8c:	e045      	b.n	8003f1a <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <menu+0x2e38>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d141      	bne.n	8003f1a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <menu+0x2e68>)
 8003e98:	2101      	movs	r1, #1
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f003 fdcc 	bl	8007a38 <lcd_print>
 8003ea0:	e03b      	b.n	8003f1a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <menu+0x2e7c>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d137      	bne.n	8003f1a <menu+0x2e92>
			if(dilSecim == 0){
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <menu+0x2e38>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d12a      	bne.n	8003f08 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003eb2:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <menu+0x2e6c>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f003 fdbe 	bl	8007a38 <lcd_print>
 8003ebc:	e02d      	b.n	8003f1a <menu+0x2e92>
 8003ebe:	bf00      	nop
 8003ec0:	2000020d 	.word	0x2000020d
 8003ec4:	0800d648 	.word	0x0800d648
 8003ec8:	20000204 	.word	0x20000204
 8003ecc:	20000188 	.word	0x20000188
 8003ed0:	40010800 	.word	0x40010800
 8003ed4:	2000021b 	.word	0x2000021b
 8003ed8:	20000118 	.word	0x20000118
 8003edc:	20000218 	.word	0x20000218
 8003ee0:	200001ec 	.word	0x200001ec
 8003ee4:	0800d748 	.word	0x0800d748
 8003ee8:	20000208 	.word	0x20000208
 8003eec:	0800d070 	.word	0x0800d070
 8003ef0:	0800d084 	.word	0x0800d084
 8003ef4:	0800d0d0 	.word	0x0800d0d0
 8003ef8:	0800d0e4 	.word	0x0800d0e4
 8003efc:	2000020c 	.word	0x2000020c
 8003f00:	0800d75c 	.word	0x0800d75c
 8003f04:	2000020a 	.word	0x2000020a
			} else if(dilSecim == 1) {
 8003f08:	4b71      	ldr	r3, [pc, #452]	; (80040d0 <menu+0x3048>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d104      	bne.n	8003f1a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003f10:	4a70      	ldr	r2, [pc, #448]	; (80040d4 <menu+0x304c>)
 8003f12:	2101      	movs	r1, #1
 8003f14:	2002      	movs	r0, #2
 8003f16:	f003 fd8f 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	486e      	ldr	r0, [pc, #440]	; (80040d8 <menu+0x3050>)
 8003f1e:	f005 f8b1 	bl	8009084 <HAL_GPIO_ReadPin>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d115      	bne.n	8003f54 <menu+0x2ecc>
 8003f28:	4b6c      	ldr	r3, [pc, #432]	; (80040dc <menu+0x3054>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	f083 0301 	eor.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00e      	beq.n	8003f54 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003f36:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <menu+0x3058>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <menu+0x3058>)
 8003f40:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003f42:	4b67      	ldr	r3, [pc, #412]	; (80040e0 <menu+0x3058>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d902      	bls.n	8003f50 <menu+0x2ec8>
				demoMode = 0;
 8003f4a:	4b65      	ldr	r3, [pc, #404]	; (80040e0 <menu+0x3058>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f50:	f000 fcae 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f54:	2104      	movs	r1, #4
 8003f56:	4860      	ldr	r0, [pc, #384]	; (80040d8 <menu+0x3050>)
 8003f58:	f005 f894 	bl	8009084 <HAL_GPIO_ReadPin>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d115      	bne.n	8003f8e <menu+0x2f06>
 8003f62:	4b5e      	ldr	r3, [pc, #376]	; (80040dc <menu+0x3054>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	f083 0301 	eor.w	r3, r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00e      	beq.n	8003f8e <menu+0x2f06>
			demoMode = demoMode - 1;
 8003f70:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <menu+0x3058>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <menu+0x3058>)
 8003f7a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <menu+0x3058>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <menu+0x2f02>
		   		demoMode = 1;
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <menu+0x3058>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f8a:	f000 fc91 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f8e:	2108      	movs	r1, #8
 8003f90:	4851      	ldr	r0, [pc, #324]	; (80040d8 <menu+0x3050>)
 8003f92:	f005 f877 	bl	8009084 <HAL_GPIO_ReadPin>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d10d      	bne.n	8003fb8 <menu+0x2f30>
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	; (80040dc <menu+0x3054>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <menu+0x2f30>
			eepromData[26] = demoMode;
 8003faa:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <menu+0x3058>)
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <menu+0x305c>)
 8003fb0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <menu+0x3060>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003fb8:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <menu+0x3064>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b1d      	cmp	r3, #29
 8003fbe:	f040 8132 	bne.w	8004226 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003fc2:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <menu+0x3068>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <menu+0x2f6a>
 8003fca:	4b4a      	ldr	r3, [pc, #296]	; (80040f4 <menu+0x306c>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <menu+0x2f6a>
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <menu+0x3070>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <menu+0x2f6a>
 8003fda:	4b48      	ldr	r3, [pc, #288]	; (80040fc <menu+0x3074>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <menu+0x2f6a>
 8003fe2:	4b47      	ldr	r3, [pc, #284]	; (8004100 <menu+0x3078>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 8003fea:	4b46      	ldr	r3, [pc, #280]	; (8004104 <menu+0x307c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e002      	b.n	8003ff8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8003ff2:	4b44      	ldr	r3, [pc, #272]	; (8004104 <menu+0x307c>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003ff8:	4b43      	ldr	r3, [pc, #268]	; (8004108 <menu+0x3080>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d154      	bne.n	80040aa <menu+0x3022>
			if(dilSecim == 0) {
 8004000:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <menu+0x3048>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004008:	4a40      	ldr	r2, [pc, #256]	; (800410c <menu+0x3084>)
 800400a:	2101      	movs	r1, #1
 800400c:	2001      	movs	r0, #1
 800400e:	f003 fd13 	bl	8007a38 <lcd_print>
 8004012:	e008      	b.n	8004026 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <menu+0x3048>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d104      	bne.n	8004026 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <menu+0x3088>)
 800401e:	2101      	movs	r1, #1
 8004020:	2001      	movs	r0, #1
 8004022:	f003 fd09 	bl	8007a38 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004026:	4b36      	ldr	r3, [pc, #216]	; (8004100 <menu+0x3078>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	220a      	movs	r2, #10
 800402c:	4939      	ldr	r1, [pc, #228]	; (8004114 <menu+0x308c>)
 800402e:	4618      	mov	r0, r3
 8004030:	f008 f854 	bl	800c0dc <itoa>
			lcd_print(2, 12, snum);
 8004034:	4a37      	ldr	r2, [pc, #220]	; (8004114 <menu+0x308c>)
 8004036:	210c      	movs	r1, #12
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fcfd 	bl	8007a38 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800403e:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <menu+0x3074>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	220a      	movs	r2, #10
 8004044:	4933      	ldr	r1, [pc, #204]	; (8004114 <menu+0x308c>)
 8004046:	4618      	mov	r0, r3
 8004048:	f008 f848 	bl	800c0dc <itoa>
			lcd_print(2, 13, snum);
 800404c:	4a31      	ldr	r2, [pc, #196]	; (8004114 <menu+0x308c>)
 800404e:	210d      	movs	r1, #13
 8004050:	2002      	movs	r0, #2
 8004052:	f003 fcf1 	bl	8007a38 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <menu+0x3070>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	220a      	movs	r2, #10
 800405c:	492d      	ldr	r1, [pc, #180]	; (8004114 <menu+0x308c>)
 800405e:	4618      	mov	r0, r3
 8004060:	f008 f83c 	bl	800c0dc <itoa>
			lcd_print(2, 14, snum);
 8004064:	4a2b      	ldr	r2, [pc, #172]	; (8004114 <menu+0x308c>)
 8004066:	210e      	movs	r1, #14
 8004068:	2002      	movs	r0, #2
 800406a:	f003 fce5 	bl	8007a38 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <menu+0x306c>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	220a      	movs	r2, #10
 8004074:	4927      	ldr	r1, [pc, #156]	; (8004114 <menu+0x308c>)
 8004076:	4618      	mov	r0, r3
 8004078:	f008 f830 	bl	800c0dc <itoa>
			lcd_print(2, 15, snum);
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <menu+0x308c>)
 800407e:	210f      	movs	r1, #15
 8004080:	2002      	movs	r0, #2
 8004082:	f003 fcd9 	bl	8007a38 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <menu+0x3068>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	220a      	movs	r2, #10
 800408c:	4921      	ldr	r1, [pc, #132]	; (8004114 <menu+0x308c>)
 800408e:	4618      	mov	r0, r3
 8004090:	f008 f824 	bl	800c0dc <itoa>
			lcd_print(2, 16, snum);
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <menu+0x308c>)
 8004096:	2110      	movs	r1, #16
 8004098:	2002      	movs	r0, #2
 800409a:	f003 fccd 	bl	8007a38 <lcd_print>

			lcd_print(2, 1, "           ");
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <menu+0x3090>)
 80040a0:	2101      	movs	r1, #1
 80040a2:	2002      	movs	r0, #2
 80040a4:	f003 fcc8 	bl	8007a38 <lcd_print>
 80040a8:	e048      	b.n	800413c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <menu+0x3080>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d144      	bne.n	800413c <menu+0x30b4>
			if(dilSecim == 0) {
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <menu+0x3048>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d132      	bne.n	8004120 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <menu+0x3084>)
 80040bc:	2101      	movs	r1, #1
 80040be:	2001      	movs	r0, #1
 80040c0:	f003 fcba 	bl	8007a38 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80040c4:	4a15      	ldr	r2, [pc, #84]	; (800411c <menu+0x3094>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	2002      	movs	r0, #2
 80040ca:	f003 fcb5 	bl	8007a38 <lcd_print>
 80040ce:	e035      	b.n	800413c <menu+0x30b4>
 80040d0:	2000020d 	.word	0x2000020d
 80040d4:	0800d0e4 	.word	0x0800d0e4
 80040d8:	40010800 	.word	0x40010800
 80040dc:	2000021b 	.word	0x2000021b
 80040e0:	2000020a 	.word	0x2000020a
 80040e4:	20000118 	.word	0x20000118
 80040e8:	20000218 	.word	0x20000218
 80040ec:	200001ec 	.word	0x200001ec
 80040f0:	200001e9 	.word	0x200001e9
 80040f4:	200001ea 	.word	0x200001ea
 80040f8:	20000000 	.word	0x20000000
 80040fc:	20000001 	.word	0x20000001
 8004100:	200001eb 	.word	0x200001eb
 8004104:	2000022d 	.word	0x2000022d
 8004108:	2000020c 	.word	0x2000020c
 800410c:	0800d76c 	.word	0x0800d76c
 8004110:	0800d780 	.word	0x0800d780
 8004114:	20000188 	.word	0x20000188
 8004118:	0800d794 	.word	0x0800d794
 800411c:	0800d7a0 	.word	0x0800d7a0
			} else if(dilSecim == 1) {
 8004120:	4b94      	ldr	r3, [pc, #592]	; (8004374 <menu+0x32ec>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d109      	bne.n	800413c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004128:	4a93      	ldr	r2, [pc, #588]	; (8004378 <menu+0x32f0>)
 800412a:	2101      	movs	r1, #1
 800412c:	2001      	movs	r0, #1
 800412e:	f003 fc83 	bl	8007a38 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004132:	4a92      	ldr	r2, [pc, #584]	; (800437c <menu+0x32f4>)
 8004134:	2101      	movs	r1, #1
 8004136:	2002      	movs	r0, #2
 8004138:	f003 fc7e 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800413c:	2102      	movs	r1, #2
 800413e:	4890      	ldr	r0, [pc, #576]	; (8004380 <menu+0x32f8>)
 8004140:	f004 ffa0 	bl	8009084 <HAL_GPIO_ReadPin>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d119      	bne.n	800417e <menu+0x30f6>
 800414a:	4b8e      	ldr	r3, [pc, #568]	; (8004384 <menu+0x32fc>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	f083 0301 	eor.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <menu+0x30f6>
 8004158:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <menu+0x3300>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004160:	4b8a      	ldr	r3, [pc, #552]	; (800438c <menu+0x3304>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b88      	ldr	r3, [pc, #544]	; (800438c <menu+0x3304>)
 800416a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800416c:	4b87      	ldr	r3, [pc, #540]	; (800438c <menu+0x3304>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d902      	bls.n	800417a <menu+0x30f2>
				calismaSayModu = 0;
 8004174:	4b85      	ldr	r3, [pc, #532]	; (800438c <menu+0x3304>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800417a:	f000 fb99 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800417e:	2104      	movs	r1, #4
 8004180:	487f      	ldr	r0, [pc, #508]	; (8004380 <menu+0x32f8>)
 8004182:	f004 ff7f 	bl	8009084 <HAL_GPIO_ReadPin>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d119      	bne.n	80041c0 <menu+0x3138>
 800418c:	4b7d      	ldr	r3, [pc, #500]	; (8004384 <menu+0x32fc>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f083 0301 	eor.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <menu+0x3138>
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <menu+0x3300>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80041a2:	4b7a      	ldr	r3, [pc, #488]	; (800438c <menu+0x3304>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4b78      	ldr	r3, [pc, #480]	; (800438c <menu+0x3304>)
 80041ac:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80041ae:	4b77      	ldr	r3, [pc, #476]	; (800438c <menu+0x3304>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <menu+0x3134>
		   		calismaSayModu = 1;
 80041b6:	4b75      	ldr	r3, [pc, #468]	; (800438c <menu+0x3304>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041bc:	f000 fb78 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041c0:	2108      	movs	r1, #8
 80041c2:	486f      	ldr	r0, [pc, #444]	; (8004380 <menu+0x32f8>)
 80041c4:	f004 ff5e 	bl	8009084 <HAL_GPIO_ReadPin>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d12b      	bne.n	8004226 <menu+0x319e>
 80041ce:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <menu+0x32fc>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f083 0301 	eor.w	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d024      	beq.n	8004226 <menu+0x319e>
			eepromData[32] = 0;
 80041dc:	4b6c      	ldr	r3, [pc, #432]	; (8004390 <menu+0x3308>)
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <menu+0x3308>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80041ea:	4b69      	ldr	r3, [pc, #420]	; (8004390 <menu+0x3308>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <menu+0x3308>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80041f6:	4b66      	ldr	r3, [pc, #408]	; (8004390 <menu+0x3308>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80041fc:	4b65      	ldr	r3, [pc, #404]	; (8004394 <menu+0x330c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004202:	4b65      	ldr	r3, [pc, #404]	; (8004398 <menu+0x3310>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004208:	4b64      	ldr	r3, [pc, #400]	; (800439c <menu+0x3314>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800420e:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <menu+0x3318>)
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004214:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <menu+0x331c>)
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800421a:	4b5c      	ldr	r3, [pc, #368]	; (800438c <menu+0x3304>)
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <menu+0x3320>)
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <menu+0x3324>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b1e      	cmp	r3, #30
 800422c:	d16f      	bne.n	800430e <menu+0x3286>
		calismaSayModu = 0;
 800422e:	4b57      	ldr	r3, [pc, #348]	; (800438c <menu+0x3304>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <menu+0x32ec>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800423c:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <menu+0x3328>)
 800423e:	2101      	movs	r1, #1
 8004240:	2001      	movs	r0, #1
 8004242:	f003 fbf9 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004246:	4a5b      	ldr	r2, [pc, #364]	; (80043b4 <menu+0x332c>)
 8004248:	2101      	movs	r1, #1
 800424a:	2002      	movs	r0, #2
 800424c:	f003 fbf4 	bl	8007a38 <lcd_print>
 8004250:	e00d      	b.n	800426e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004252:	4b48      	ldr	r3, [pc, #288]	; (8004374 <menu+0x32ec>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d109      	bne.n	800426e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800425a:	4a57      	ldr	r2, [pc, #348]	; (80043b8 <menu+0x3330>)
 800425c:	2101      	movs	r1, #1
 800425e:	2001      	movs	r0, #1
 8004260:	f003 fbea 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004264:	4a55      	ldr	r2, [pc, #340]	; (80043bc <menu+0x3334>)
 8004266:	2101      	movs	r1, #1
 8004268:	2002      	movs	r0, #2
 800426a:	f003 fbe5 	bl	8007a38 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800426e:	2102      	movs	r1, #2
 8004270:	4843      	ldr	r0, [pc, #268]	; (8004380 <menu+0x32f8>)
 8004272:	f004 ff07 	bl	8009084 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d115      	bne.n	80042a8 <menu+0x3220>
 800427c:	4b41      	ldr	r3, [pc, #260]	; (8004384 <menu+0x32fc>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800428a:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <menu+0x32ec>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b38      	ldr	r3, [pc, #224]	; (8004374 <menu+0x32ec>)
 8004294:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <menu+0x32ec>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d902      	bls.n	80042a4 <menu+0x321c>
				dilSecim = 0;
 800429e:	4b35      	ldr	r3, [pc, #212]	; (8004374 <menu+0x32ec>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80042a4:	f000 fb04 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042a8:	2104      	movs	r1, #4
 80042aa:	4835      	ldr	r0, [pc, #212]	; (8004380 <menu+0x32f8>)
 80042ac:	f004 feea 	bl	8009084 <HAL_GPIO_ReadPin>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d115      	bne.n	80042e2 <menu+0x325a>
 80042b6:	4b33      	ldr	r3, [pc, #204]	; (8004384 <menu+0x32fc>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f083 0301 	eor.w	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <menu+0x32ec>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <menu+0x32ec>)
 80042ce:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <menu+0x32ec>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <menu+0x3256>
		   		dilSecim = 1;
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <menu+0x32ec>)
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80042de:	f000 fae7 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042e2:	2108      	movs	r1, #8
 80042e4:	4826      	ldr	r0, [pc, #152]	; (8004380 <menu+0x32f8>)
 80042e6:	f004 fecd 	bl	8009084 <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10e      	bne.n	800430e <menu+0x3286>
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <menu+0x32fc>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <menu+0x3286>
			eepromData[33] = dilSecim;
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <menu+0x32ec>)
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	4b23      	ldr	r3, [pc, #140]	; (8004390 <menu+0x3308>)
 8004304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <menu+0x3320>)
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <menu+0x3324>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b1f      	cmp	r3, #31
 8004314:	f040 80b7 	bne.w	8004486 <menu+0x33fe>
		calismaSayModu = 0;
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <menu+0x3304>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <menu+0x3338>)
 8004320:	2101      	movs	r1, #1
 8004322:	2001      	movs	r0, #1
 8004324:	f003 fb88 	bl	8007a38 <lcd_print>

		if(iotMode == 0) {
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <menu+0x333c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <menu+0x32d0>
			if(dilSecim == 0) {
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <menu+0x32ec>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <menu+0x3340>)
 800433a:	2101      	movs	r1, #1
 800433c:	2002      	movs	r0, #2
 800433e:	f003 fb7b 	bl	8007a38 <lcd_print>
 8004342:	e050      	b.n	80043e6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <menu+0x32ec>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d14c      	bne.n	80043e6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <menu+0x3344>)
 800434e:	2101      	movs	r1, #1
 8004350:	2002      	movs	r0, #2
 8004352:	f003 fb71 	bl	8007a38 <lcd_print>
 8004356:	e046      	b.n	80043e6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <menu+0x333c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d142      	bne.n	80043e6 <menu+0x335e>
			if(dilSecim == 0) {
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <menu+0x32ec>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d135      	bne.n	80043d4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <menu+0x3348>)
 800436a:	2101      	movs	r1, #1
 800436c:	2002      	movs	r0, #2
 800436e:	f003 fb63 	bl	8007a38 <lcd_print>
 8004372:	e038      	b.n	80043e6 <menu+0x335e>
 8004374:	2000020d 	.word	0x2000020d
 8004378:	0800d780 	.word	0x0800d780
 800437c:	0800d7b4 	.word	0x0800d7b4
 8004380:	40010800 	.word	0x40010800
 8004384:	2000021b 	.word	0x2000021b
 8004388:	2000022d 	.word	0x2000022d
 800438c:	2000020c 	.word	0x2000020c
 8004390:	20000118 	.word	0x20000118
 8004394:	200001eb 	.word	0x200001eb
 8004398:	20000001 	.word	0x20000001
 800439c:	20000000 	.word	0x20000000
 80043a0:	200001ea 	.word	0x200001ea
 80043a4:	200001e9 	.word	0x200001e9
 80043a8:	20000218 	.word	0x20000218
 80043ac:	200001ec 	.word	0x200001ec
 80043b0:	0800d7c8 	.word	0x0800d7c8
 80043b4:	0800d7dc 	.word	0x0800d7dc
 80043b8:	0800d7f0 	.word	0x0800d7f0
 80043bc:	0800d804 	.word	0x0800d804
 80043c0:	0800d818 	.word	0x0800d818
 80043c4:	2000020b 	.word	0x2000020b
 80043c8:	0800d070 	.word	0x0800d070
 80043cc:	0800d084 	.word	0x0800d084
 80043d0:	0800d0d0 	.word	0x0800d0d0
			} else if(dilSecim == 1) {
 80043d4:	4baf      	ldr	r3, [pc, #700]	; (8004694 <menu+0x360c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d104      	bne.n	80043e6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80043dc:	4aae      	ldr	r2, [pc, #696]	; (8004698 <menu+0x3610>)
 80043de:	2101      	movs	r1, #1
 80043e0:	2002      	movs	r0, #2
 80043e2:	f003 fb29 	bl	8007a38 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043e6:	2102      	movs	r1, #2
 80043e8:	48ac      	ldr	r0, [pc, #688]	; (800469c <menu+0x3614>)
 80043ea:	f004 fe4b 	bl	8009084 <HAL_GPIO_ReadPin>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d115      	bne.n	8004420 <menu+0x3398>
 80043f4:	4baa      	ldr	r3, [pc, #680]	; (80046a0 <menu+0x3618>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <menu+0x3398>
			iotMode = iotMode + 1;
 8004402:	4ba8      	ldr	r3, [pc, #672]	; (80046a4 <menu+0x361c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4ba6      	ldr	r3, [pc, #664]	; (80046a4 <menu+0x361c>)
 800440c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800440e:	4ba5      	ldr	r3, [pc, #660]	; (80046a4 <menu+0x361c>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d902      	bls.n	800441c <menu+0x3394>
				iotMode = 0;
 8004416:	4ba3      	ldr	r3, [pc, #652]	; (80046a4 <menu+0x361c>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800441c:	f000 fa48 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004420:	2104      	movs	r1, #4
 8004422:	489e      	ldr	r0, [pc, #632]	; (800469c <menu+0x3614>)
 8004424:	f004 fe2e 	bl	8009084 <HAL_GPIO_ReadPin>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d115      	bne.n	800445a <menu+0x33d2>
 800442e:	4b9c      	ldr	r3, [pc, #624]	; (80046a0 <menu+0x3618>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f083 0301 	eor.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <menu+0x33d2>
			iotMode = iotMode - 1;
 800443c:	4b99      	ldr	r3, [pc, #612]	; (80046a4 <menu+0x361c>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	4b97      	ldr	r3, [pc, #604]	; (80046a4 <menu+0x361c>)
 8004446:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004448:	4b96      	ldr	r3, [pc, #600]	; (80046a4 <menu+0x361c>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <menu+0x33ce>
		   		iotMode = 1;
 8004450:	4b94      	ldr	r3, [pc, #592]	; (80046a4 <menu+0x361c>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004456:	f000 fa2b 	bl	80048b0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800445a:	2108      	movs	r1, #8
 800445c:	488f      	ldr	r0, [pc, #572]	; (800469c <menu+0x3614>)
 800445e:	f004 fe11 	bl	8009084 <HAL_GPIO_ReadPin>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10e      	bne.n	8004486 <menu+0x33fe>
 8004468:	4b8d      	ldr	r3, [pc, #564]	; (80046a0 <menu+0x3618>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004476:	4b8b      	ldr	r3, [pc, #556]	; (80046a4 <menu+0x361c>)
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <menu+0x3620>)
 800447c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004480:	4b8a      	ldr	r3, [pc, #552]	; (80046ac <menu+0x3624>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004486:	4b8a      	ldr	r3, [pc, #552]	; (80046b0 <menu+0x3628>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b20      	cmp	r3, #32
 800448c:	d12b      	bne.n	80044e6 <menu+0x345e>
		calismaSayModu = 0;
 800448e:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <menu+0x362c>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004494:	2001      	movs	r0, #1
 8004496:	f7fc f94f 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 800449a:	2032      	movs	r0, #50	; 0x32
 800449c:	f004 f822 	bl	80084e4 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7fc fdad 	bl	8001000 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044a6:	2102      	movs	r1, #2
 80044a8:	487c      	ldr	r0, [pc, #496]	; (800469c <menu+0x3614>)
 80044aa:	f004 fdeb 	bl	8009084 <HAL_GPIO_ReadPin>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d118      	bne.n	80044e6 <menu+0x345e>
 80044b4:	2104      	movs	r1, #4
 80044b6:	4879      	ldr	r0, [pc, #484]	; (800469c <menu+0x3614>)
 80044b8:	f004 fde4 	bl	8009084 <HAL_GPIO_ReadPin>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d111      	bne.n	80044e6 <menu+0x345e>
 80044c2:	4b77      	ldr	r3, [pc, #476]	; (80046a0 <menu+0x3618>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <menu+0x345e>
			takeMachineID();
 80044d0:	f002 fb38 	bl	8006b44 <takeMachineID>

			convertArrays(1);
 80044d4:	2001      	movs	r0, #1
 80044d6:	f7fc f92f 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80044da:	2032      	movs	r0, #50	; 0x32
 80044dc:	f004 f802 	bl	80084e4 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 80044e0:	2001      	movs	r0, #1
 80044e2:	f7fc fd8d 	bl	8001000 <printCredentials>
		}
	}

	if (menuSayac == 33) {
 80044e6:	4b72      	ldr	r3, [pc, #456]	; (80046b0 <menu+0x3628>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b21      	cmp	r3, #33	; 0x21
 80044ec:	d17e      	bne.n	80045ec <menu+0x3564>
		calismaSayModu = 0;
 80044ee:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <menu+0x362c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80044f4:	2001      	movs	r0, #1
 80044f6:	f003 faeb 	bl	8007ad0 <lcd_backlight>

		int ssidLength = strlen(wifiSSID);
 80044fa:	486f      	ldr	r0, [pc, #444]	; (80046b8 <menu+0x3630>)
 80044fc:	f7fb fe92 	bl	8000224 <strlen>
 8004500:	4603      	mov	r3, r0
 8004502:	61fb      	str	r3, [r7, #28]

		convertArrays(2);
 8004504:	2002      	movs	r0, #2
 8004506:	f7fc f917 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 800450a:	2032      	movs	r0, #50	; 0x32
 800450c:	f003 ffea 	bl	80084e4 <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 8004510:	4a6a      	ldr	r2, [pc, #424]	; (80046bc <menu+0x3634>)
 8004512:	2101      	movs	r1, #1
 8004514:	2001      	movs	r0, #1
 8004516:	f003 fa8f 	bl	8007a38 <lcd_print>
		lcd_print(2, 1, "                ");
 800451a:	4a69      	ldr	r2, [pc, #420]	; (80046c0 <menu+0x3638>)
 800451c:	2101      	movs	r1, #1
 800451e:	2002      	movs	r0, #2
 8004520:	f003 fa8a 	bl	8007a38 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8004524:	4a64      	ldr	r2, [pc, #400]	; (80046b8 <menu+0x3630>)
 8004526:	2101      	movs	r1, #1
 8004528:	2002      	movs	r0, #2
 800452a:	f003 fa85 	bl	8007a38 <lcd_print>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
				lcdVal++;
			}
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800452e:	2102      	movs	r1, #2
 8004530:	485a      	ldr	r0, [pc, #360]	; (800469c <menu+0x3614>)
 8004532:	f004 fda7 	bl	8009084 <HAL_GPIO_ReadPin>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d157      	bne.n	80045ec <menu+0x3564>
 800453c:	2104      	movs	r1, #4
 800453e:	4857      	ldr	r0, [pc, #348]	; (800469c <menu+0x3614>)
 8004540:	f004 fda0 	bl	8009084 <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d150      	bne.n	80045ec <menu+0x3564>
 800454a:	4b55      	ldr	r3, [pc, #340]	; (80046a0 <menu+0x3618>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d049      	beq.n	80045ec <menu+0x3564>
			takeWifiSSID();
 8004558:	f002 fc7a 	bl	8006e50 <takeWifiSSID>

			convertArrays(2);
 800455c:	2002      	movs	r0, #2
 800455e:	f7fc f8eb 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004562:	2032      	movs	r0, #50	; 0x32
 8004564:	f003 ffbe 	bl	80084e4 <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 8004568:	4853      	ldr	r0, [pc, #332]	; (80046b8 <menu+0x3630>)
 800456a:	f7fb fe5b 	bl	8000224 <strlen>
 800456e:	4603      	mov	r3, r0
 8004570:	61fb      	str	r3, [r7, #28]

			HAL_Delay(250);
 8004572:	20fa      	movs	r0, #250	; 0xfa
 8004574:	f003 ffb6 	bl	80084e4 <HAL_Delay>
			if(ssidLength == 16) {
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b10      	cmp	r3, #16
 800457c:	d105      	bne.n	800458a <menu+0x3502>
				lcd_print(2, 1, wifiSSID);
 800457e:	4a4e      	ldr	r2, [pc, #312]	; (80046b8 <menu+0x3630>)
 8004580:	2101      	movs	r1, #1
 8004582:	2002      	movs	r0, #2
 8004584:	f003 fa58 	bl	8007a38 <lcd_print>
 8004588:	e030      	b.n	80045ec <menu+0x3564>
			} else if(ssidLength < 16) {
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	dc15      	bgt.n	80045bc <menu+0x3534>
				for(int i=0; i<16-ssidLength; i++) {
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e00b      	b.n	80045ae <menu+0x3526>
					lcd_delete_char(2, ssidLength);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	2002      	movs	r0, #2
 800459e:	f003 fa81 	bl	8007aa4 <lcd_delete_char>
					ssidLength++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
				for(int i=0; i<16-ssidLength; i++) {
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f1c3 0310 	rsb	r3, r3, #16
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	dbed      	blt.n	8004596 <menu+0x350e>
 80045ba:	e017      	b.n	80045ec <menu+0x3564>
				}
			} else {
				int lcdVal = 1;
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e00f      	b.n	80045e6 <menu+0x355e>
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	b2d9      	uxtb	r1, r3
 80045ca:	4a3b      	ldr	r2, [pc, #236]	; (80046b8 <menu+0x3630>)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	2002      	movs	r0, #2
 80045d6:	f003 fa44 	bl	8007a62 <lcd_print_char>
					lcdVal++;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3301      	adds	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
				for(int i=0; i<16; i++) {
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	3301      	adds	r3, #1
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	ddec      	ble.n	80045c6 <menu+0x353e>
				}
			}
		}
	}

	if (menuSayac == 34) {
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <menu+0x3628>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b22      	cmp	r3, #34	; 0x22
 80045f2:	f040 809c 	bne.w	800472e <menu+0x36a6>
		calismaSayModu = 0;
 80045f6:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <menu+0x362c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f003 fa67 	bl	8007ad0 <lcd_backlight>

		int passLength = strlen(wifiPass);
 8004602:	4830      	ldr	r0, [pc, #192]	; (80046c4 <menu+0x363c>)
 8004604:	f7fb fe0e 	bl	8000224 <strlen>
 8004608:	4603      	mov	r3, r0
 800460a:	60fb      	str	r3, [r7, #12]

		convertArrays(3);
 800460c:	2003      	movs	r0, #3
 800460e:	f7fc f893 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004612:	2032      	movs	r0, #50	; 0x32
 8004614:	f003 ff66 	bl	80084e4 <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004618:	4a2b      	ldr	r2, [pc, #172]	; (80046c8 <menu+0x3640>)
 800461a:	2101      	movs	r1, #1
 800461c:	2001      	movs	r0, #1
 800461e:	f003 fa0b 	bl	8007a38 <lcd_print>
		lcd_print(2, 1, "                ");
 8004622:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <menu+0x3638>)
 8004624:	2101      	movs	r1, #1
 8004626:	2002      	movs	r0, #2
 8004628:	f003 fa06 	bl	8007a38 <lcd_print>
		lcd_print(2, 1, wifiPass);
 800462c:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <menu+0x363c>)
 800462e:	2101      	movs	r1, #1
 8004630:	2002      	movs	r0, #2
 8004632:	f003 fa01 	bl	8007a38 <lcd_print>
				lcd_print_char(2, lcdVal, wifiPass[i]);
				lcdVal++;
			}
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004636:	2102      	movs	r1, #2
 8004638:	4818      	ldr	r0, [pc, #96]	; (800469c <menu+0x3614>)
 800463a:	f004 fd23 	bl	8009084 <HAL_GPIO_ReadPin>
 800463e:	4603      	mov	r3, r0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d174      	bne.n	800472e <menu+0x36a6>
 8004644:	2104      	movs	r1, #4
 8004646:	4815      	ldr	r0, [pc, #84]	; (800469c <menu+0x3614>)
 8004648:	f004 fd1c 	bl	8009084 <HAL_GPIO_ReadPin>
 800464c:	4603      	mov	r3, r0
 800464e:	2b01      	cmp	r3, #1
 8004650:	d16d      	bne.n	800472e <menu+0x36a6>
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <menu+0x3618>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f083 0301 	eor.w	r3, r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d066      	beq.n	800472e <menu+0x36a6>
			takeWifiPass();
 8004660:	f002 fd6e 	bl	8007140 <takeWifiPass>

			convertArrays(3);
 8004664:	2003      	movs	r0, #3
 8004666:	f7fc f867 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 800466a:	2032      	movs	r0, #50	; 0x32
 800466c:	f003 ff3a 	bl	80084e4 <HAL_Delay>

			passLength = strlen(wifiPass);
 8004670:	4814      	ldr	r0, [pc, #80]	; (80046c4 <menu+0x363c>)
 8004672:	f7fb fdd7 	bl	8000224 <strlen>
 8004676:	4603      	mov	r3, r0
 8004678:	60fb      	str	r3, [r7, #12]

			HAL_Delay(250);
 800467a:	20fa      	movs	r0, #250	; 0xfa
 800467c:	f003 ff32 	bl	80084e4 <HAL_Delay>
			if(passLength == 16) {
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b10      	cmp	r3, #16
 8004684:	d122      	bne.n	80046cc <menu+0x3644>
				lcd_print(2, 1, wifiPass);
 8004686:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <menu+0x363c>)
 8004688:	2101      	movs	r1, #1
 800468a:	2002      	movs	r0, #2
 800468c:	f003 f9d4 	bl	8007a38 <lcd_print>
 8004690:	e04d      	b.n	800472e <menu+0x36a6>
 8004692:	bf00      	nop
 8004694:	2000020d 	.word	0x2000020d
 8004698:	0800d0e4 	.word	0x0800d0e4
 800469c:	40010800 	.word	0x40010800
 80046a0:	2000021b 	.word	0x2000021b
 80046a4:	2000020b 	.word	0x2000020b
 80046a8:	20000118 	.word	0x20000118
 80046ac:	20000218 	.word	0x20000218
 80046b0:	200001ec 	.word	0x200001ec
 80046b4:	2000020c 	.word	0x2000020c
 80046b8:	2000019c 	.word	0x2000019c
 80046bc:	0800d82c 	.word	0x0800d82c
 80046c0:	0800d840 	.word	0x0800d840
 80046c4:	200001b0 	.word	0x200001b0
 80046c8:	0800d854 	.word	0x0800d854
			} else if(passLength < 16) {
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b0f      	cmp	r3, #15
 80046d0:	dc15      	bgt.n	80046fe <menu+0x3676>
				for(int i=0; i<16-passLength; i++) {
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	e00b      	b.n	80046f0 <menu+0x3668>
					lcd_delete_char(2, passLength);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	4619      	mov	r1, r3
 80046de:	2002      	movs	r0, #2
 80046e0:	f003 f9e0 	bl	8007aa4 <lcd_delete_char>
					passLength++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
				for(int i=0; i<16-passLength; i++) {
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f1c3 0310 	rsb	r3, r3, #16
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	dbed      	blt.n	80046d8 <menu+0x3650>
 80046fc:	e017      	b.n	800472e <menu+0x36a6>
				}
			} else {
				int lcdVal = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004702:	2300      	movs	r3, #0
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	e00f      	b.n	8004728 <menu+0x36a0>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	b2d9      	uxtb	r1, r3
 800470c:	4a33      	ldr	r2, [pc, #204]	; (80047dc <menu+0x3754>)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	2002      	movs	r0, #2
 8004718:	f003 f9a3 	bl	8007a62 <lcd_print_char>
					lcdVal++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	ddec      	ble.n	8004708 <menu+0x3680>
				}
			}
		}
	}

	if (menuSayac == 35) {
 800472e:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <menu+0x3758>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b23      	cmp	r3, #35	; 0x23
 8004734:	d14d      	bne.n	80047d2 <menu+0x374a>
		if(dilSecim == 0) {
 8004736:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <menu+0x375c>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <menu+0x36cc>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <menu+0x3760>)
 8004740:	2101      	movs	r1, #1
 8004742:	2001      	movs	r0, #1
 8004744:	f003 f978 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004748:	4a28      	ldr	r2, [pc, #160]	; (80047ec <menu+0x3764>)
 800474a:	2101      	movs	r1, #1
 800474c:	2002      	movs	r0, #2
 800474e:	f003 f973 	bl	8007a38 <lcd_print>
 8004752:	e00d      	b.n	8004770 <menu+0x36e8>
		} else if(dilSecim == 1) {
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <menu+0x375c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d109      	bne.n	8004770 <menu+0x36e8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800475c:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <menu+0x3768>)
 800475e:	2101      	movs	r1, #1
 8004760:	2001      	movs	r0, #1
 8004762:	f003 f969 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004766:	4a23      	ldr	r2, [pc, #140]	; (80047f4 <menu+0x376c>)
 8004768:	2101      	movs	r1, #1
 800476a:	2002      	movs	r0, #2
 800476c:	f003 f964 	bl	8007a38 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004770:	2108      	movs	r1, #8
 8004772:	4821      	ldr	r0, [pc, #132]	; (80047f8 <menu+0x3770>)
 8004774:	f004 fc86 	bl	8009084 <HAL_GPIO_ReadPin>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d129      	bne.n	80047d2 <menu+0x374a>
			menuGiris = 0;
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <menu+0x3774>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004784:	bf00      	nop
 8004786:	481e      	ldr	r0, [pc, #120]	; (8004800 <menu+0x3778>)
 8004788:	f005 faa5 	bl	8009cd6 <HAL_I2C_GetError>
 800478c:	4603      	mov	r3, r0
 800478e:	2b04      	cmp	r3, #4
 8004790:	d0f9      	beq.n	8004786 <menu+0x36fe>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004792:	bf00      	nop
 8004794:	481a      	ldr	r0, [pc, #104]	; (8004800 <menu+0x3778>)
 8004796:	f005 fa91 	bl	8009cbc <HAL_I2C_GetState>
 800479a:	4603      	mov	r3, r0
 800479c:	2b20      	cmp	r3, #32
 800479e:	d1f9      	bne.n	8004794 <menu+0x370c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80047a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	236e      	movs	r3, #110	; 0x6e
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	4b16      	ldr	r3, [pc, #88]	; (8004804 <menu+0x377c>)
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	236e      	movs	r3, #110	; 0x6e
 80047b0:	2200      	movs	r2, #0
 80047b2:	21a0      	movs	r1, #160	; 0xa0
 80047b4:	4812      	ldr	r0, [pc, #72]	; (8004800 <menu+0x3778>)
 80047b6:	f004 ff1f 	bl	80095f8 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80047ba:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80047be:	f003 fe91 	bl	80084e4 <HAL_Delay>

			lcd_clear();
 80047c2:	f003 f965 	bl	8007a90 <lcd_clear>
			HAL_Delay(500);
 80047c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047ca:	f003 fe8b 	bl	80084e4 <HAL_Delay>
			NVIC_SystemReset();
 80047ce:	f7fc fc45 	bl	800105c <__NVIC_SystemReset>
		}
	}
}
 80047d2:	bf00      	nop
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200001b0 	.word	0x200001b0
 80047e0:	200001ec 	.word	0x200001ec
 80047e4:	2000020d 	.word	0x2000020d
 80047e8:	0800d868 	.word	0x0800d868
 80047ec:	0800d87c 	.word	0x0800d87c
 80047f0:	0800d890 	.word	0x0800d890
 80047f4:	0800d8a4 	.word	0x0800d8a4
 80047f8:	40010800 	.word	0x40010800
 80047fc:	20000209 	.word	0x20000209
 8004800:	20000374 	.word	0x20000374
 8004804:	20000118 	.word	0x20000118

08004808 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <lcdUpdate+0x9c>)
 800481a:	2101      	movs	r1, #1
 800481c:	2002      	movs	r0, #2
 800481e:	f003 f90b 	bl	8007a38 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004822:	e03b      	b.n	800489c <lcdUpdate+0x94>
	} else if(y==2) {
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d105      	bne.n	8004836 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <lcdUpdate+0x9c>)
 800482c:	2102      	movs	r1, #2
 800482e:	2002      	movs	r0, #2
 8004830:	f003 f902 	bl	8007a38 <lcd_print>
}
 8004834:	e032      	b.n	800489c <lcdUpdate+0x94>
	} else if(y==3) {
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d105      	bne.n	8004848 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <lcdUpdate+0x9c>)
 800483e:	2103      	movs	r1, #3
 8004840:	2002      	movs	r0, #2
 8004842:	f003 f8f9 	bl	8007a38 <lcd_print>
}
 8004846:	e029      	b.n	800489c <lcdUpdate+0x94>
	} else if(y==4) {
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d105      	bne.n	800485a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800484e:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <lcdUpdate+0x9c>)
 8004850:	2104      	movs	r1, #4
 8004852:	2002      	movs	r0, #2
 8004854:	f003 f8f0 	bl	8007a38 <lcd_print>
}
 8004858:	e020      	b.n	800489c <lcdUpdate+0x94>
	} else if(y==5) {
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	2b05      	cmp	r3, #5
 800485e:	d105      	bne.n	800486c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <lcdUpdate+0x9c>)
 8004862:	2105      	movs	r1, #5
 8004864:	2002      	movs	r0, #2
 8004866:	f003 f8e7 	bl	8007a38 <lcd_print>
}
 800486a:	e017      	b.n	800489c <lcdUpdate+0x94>
	} else if(y==6) {
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d105      	bne.n	800487e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <lcdUpdate+0x9c>)
 8004874:	2106      	movs	r1, #6
 8004876:	2002      	movs	r0, #2
 8004878:	f003 f8de 	bl	8007a38 <lcd_print>
}
 800487c:	e00e      	b.n	800489c <lcdUpdate+0x94>
	} else if (y==7) {
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b07      	cmp	r3, #7
 8004882:	d10b      	bne.n	800489c <lcdUpdate+0x94>
		lcd_clear();
 8004884:	f003 f904 	bl	8007a90 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004888:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <lcdUpdate+0xa0>)
 800488a:	2104      	movs	r1, #4
 800488c:	2001      	movs	r0, #1
 800488e:	f003 f8d3 	bl	8007a38 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004892:	4a06      	ldr	r2, [pc, #24]	; (80048ac <lcdUpdate+0xa4>)
 8004894:	2106      	movs	r1, #6
 8004896:	2002      	movs	r0, #2
 8004898:	f003 f8ce 	bl	8007a38 <lcd_print>
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0800d8b8 	.word	0x0800d8b8
 80048a8:	0800d8bc 	.word	0x0800d8bc
 80048ac:	0800d8c4 	.word	0x0800d8c4

080048b0 <bekle>:

void bekle() {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	timer1=millis;
 80048b4:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <bekle+0x124>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a47      	ldr	r2, [pc, #284]	; (80049d8 <bekle+0x128>)
 80048ba:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048bc:	e002      	b.n	80048c4 <bekle+0x14>
    	butonKontrol = 1;
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <bekle+0x12c>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048c4:	2101      	movs	r1, #1
 80048c6:	4846      	ldr	r0, [pc, #280]	; (80049e0 <bekle+0x130>)
 80048c8:	f004 fbdc 	bl	8009084 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d109      	bne.n	80048e6 <bekle+0x36>
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <bekle+0x124>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <bekle+0x128>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d0ef      	beq.n	80048be <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048de:	e002      	b.n	80048e6 <bekle+0x36>
    	butonKontrol = 1;
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <bekle+0x12c>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048e6:	2108      	movs	r1, #8
 80048e8:	483e      	ldr	r0, [pc, #248]	; (80049e4 <bekle+0x134>)
 80048ea:	f004 fbcb 	bl	8009084 <HAL_GPIO_ReadPin>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d109      	bne.n	8004908 <bekle+0x58>
 80048f4:	4b37      	ldr	r3, [pc, #220]	; (80049d4 <bekle+0x124>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <bekle+0x128>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d0ef      	beq.n	80048e0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004900:	e002      	b.n	8004908 <bekle+0x58>
    	butonKontrol = 1;
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <bekle+0x12c>)
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004908:	2102      	movs	r1, #2
 800490a:	4835      	ldr	r0, [pc, #212]	; (80049e0 <bekle+0x130>)
 800490c:	f004 fbba 	bl	8009084 <HAL_GPIO_ReadPin>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d109      	bne.n	800492a <bekle+0x7a>
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <bekle+0x124>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <bekle+0x128>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d0ef      	beq.n	8004902 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004922:	e002      	b.n	800492a <bekle+0x7a>
    	butonKontrol = 1;
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <bekle+0x12c>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800492a:	2104      	movs	r1, #4
 800492c:	482c      	ldr	r0, [pc, #176]	; (80049e0 <bekle+0x130>)
 800492e:	f004 fba9 	bl	8009084 <HAL_GPIO_ReadPin>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d109      	bne.n	800494c <bekle+0x9c>
 8004938:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <bekle+0x124>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <bekle+0x128>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d0ef      	beq.n	8004924 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004944:	e002      	b.n	800494c <bekle+0x9c>
    	butonKontrol = 1;
 8004946:	4b25      	ldr	r3, [pc, #148]	; (80049dc <bekle+0x12c>)
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800494c:	2108      	movs	r1, #8
 800494e:	4824      	ldr	r0, [pc, #144]	; (80049e0 <bekle+0x130>)
 8004950:	f004 fb98 	bl	8009084 <HAL_GPIO_ReadPin>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d109      	bne.n	800496e <bekle+0xbe>
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <bekle+0x124>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <bekle+0x128>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d0ef      	beq.n	8004946 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004966:	e002      	b.n	800496e <bekle+0xbe>
    	butonKontrol = 1;
 8004968:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <bekle+0x12c>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	481c      	ldr	r0, [pc, #112]	; (80049e4 <bekle+0x134>)
 8004972:	f004 fb87 	bl	8009084 <HAL_GPIO_ReadPin>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <bekle+0xe0>
 800497c:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <bekle+0x124>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <bekle+0x128>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d0ef      	beq.n	8004968 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004988:	e002      	b.n	8004990 <bekle+0xe0>
    	butonKontrol = 1;
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <bekle+0x12c>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004994:	4813      	ldr	r0, [pc, #76]	; (80049e4 <bekle+0x134>)
 8004996:	f004 fb75 	bl	8009084 <HAL_GPIO_ReadPin>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <bekle+0x104>
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <bekle+0x124>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <bekle+0x128>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d0ee      	beq.n	800498a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049ac:	e002      	b.n	80049b4 <bekle+0x104>
    	butonKontrol = 1;
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <bekle+0x12c>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049b8:	480a      	ldr	r0, [pc, #40]	; (80049e4 <bekle+0x134>)
 80049ba:	f004 fb63 	bl	8009084 <HAL_GPIO_ReadPin>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <bekle+0x120>
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <bekle+0x124>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <bekle+0x128>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d0ee      	beq.n	80049ae <bekle+0xfe>
    }

}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	200001c8 	.word	0x200001c8
 80049d8:	200001d0 	.word	0x200001d0
 80049dc:	2000021b 	.word	0x2000021b
 80049e0:	40010800 	.word	0x40010800
 80049e4:	40011000 	.word	0x40011000

080049e8 <buttonCheck>:

uint8_t buttonCheck(void) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 80049ec:	2101      	movs	r1, #1
 80049ee:	4815      	ldr	r0, [pc, #84]	; (8004a44 <buttonCheck+0x5c>)
 80049f0:	f004 fb48 	bl	8009084 <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d01b      	beq.n	8004a32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 80049fa:	2108      	movs	r1, #8
 80049fc:	4812      	ldr	r0, [pc, #72]	; (8004a48 <buttonCheck+0x60>)
 80049fe:	f004 fb41 	bl	8009084 <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d014      	beq.n	8004a32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004a08:	2102      	movs	r1, #2
 8004a0a:	480e      	ldr	r0, [pc, #56]	; (8004a44 <buttonCheck+0x5c>)
 8004a0c:	f004 fb3a 	bl	8009084 <HAL_GPIO_ReadPin>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d00d      	beq.n	8004a32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004a16:	2104      	movs	r1, #4
 8004a18:	480a      	ldr	r0, [pc, #40]	; (8004a44 <buttonCheck+0x5c>)
 8004a1a:	f004 fb33 	bl	8009084 <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d006      	beq.n	8004a32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004a24:	2108      	movs	r1, #8
 8004a26:	4807      	ldr	r0, [pc, #28]	; (8004a44 <buttonCheck+0x5c>)
 8004a28:	f004 fb2c 	bl	8009084 <HAL_GPIO_ReadPin>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d104      	bne.n	8004a3c <buttonCheck+0x54>
		backLightTimer = 0;
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <buttonCheck+0x64>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
		return 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <buttonCheck+0x56>
	}
	return 0;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40010800 	.word	0x40010800
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	200001e4 	.word	0x200001e4

08004a50 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <checkLCDBacklight+0x24>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <checkLCDBacklight+0x28>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b3b      	cmp	r3, #59	; 0x3b
 8004a60:	d903      	bls.n	8004a6a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a62:	2000      	movs	r0, #0
 8004a64:	f003 f834 	bl	8007ad0 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004a68:	e002      	b.n	8004a70 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f003 f830 	bl	8007ad0 <lcd_backlight>
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	200001c8 	.word	0x200001c8
 8004a78:	200001e4 	.word	0x200001e4

08004a7c <checkBasincSalteri>:

void checkBasincSalteri() {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <checkBasincSalteri+0x54>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <checkBasincSalteri+0x12>
		basincVar=1;
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <checkBasincSalteri+0x58>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <checkBasincSalteri+0x54>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d119      	bne.n	8004aca <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a9a:	480f      	ldr	r0, [pc, #60]	; (8004ad8 <checkBasincSalteri+0x5c>)
 8004a9c:	f004 faf2 	bl	8009084 <HAL_GPIO_ReadPin>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <checkBasincSalteri+0x60>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <checkBasincSalteri+0x64>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d90a      	bls.n	8004aca <checkBasincSalteri+0x4e>
				basincVar=1;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <checkBasincSalteri+0x58>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004aba:	e006      	b.n	8004aca <checkBasincSalteri+0x4e>
			timer5=millis;
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <checkBasincSalteri+0x60>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <checkBasincSalteri+0x64>)
 8004ac2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <checkBasincSalteri+0x58>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200001f3 	.word	0x200001f3
 8004ad4:	200001ef 	.word	0x200001ef
 8004ad8:	40011000 	.word	0x40011000
 8004adc:	200001c8 	.word	0x200001c8
 8004ae0:	200001e0 	.word	0x200001e0

08004ae4 <checkBasGonder>:

void checkBasGonder() {
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <checkBasGonder+0x74>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10b      	bne.n	8004b08 <checkBasGonder+0x24>
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <checkBasGonder+0x78>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <checkBasGonder+0x24>
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <checkBasGonder+0x7c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004b00:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <checkBasGonder+0x80>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e009      	b.n	8004b1c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <checkBasGonder+0x78>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	f083 0301 	eor.w	r3, r3, #1
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <checkBasGonder+0x80>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <checkBasGonder+0x74>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10b      	bne.n	8004b3c <checkBasGonder+0x58>
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <checkBasGonder+0x84>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <checkBasGonder+0x58>
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <checkBasGonder+0x7c>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004b34:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <checkBasGonder+0x88>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004b3a:	e009      	b.n	8004b50 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <checkBasGonder+0x84>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f083 0301 	eor.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <checkBasGonder+0x88>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	200001ed 	.word	0x200001ed
 8004b5c:	20000221 	.word	0x20000221
 8004b60:	200001fb 	.word	0x200001fb
 8004b64:	20000228 	.word	0x20000228
 8004b68:	20000224 	.word	0x20000224
 8004b6c:	20000229 	.word	0x20000229

08004b70 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004b74:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <checkKapiSecimleri+0x98>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004b82:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <checkKapiSecimleri+0x98>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8e:	4820      	ldr	r0, [pc, #128]	; (8004c10 <checkKapiSecimleri+0xa0>)
 8004b90:	f004 fa78 	bl	8009084 <HAL_GPIO_ReadPin>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e002      	b.n	8004ba8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004ba2:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <checkKapiSecimleri+0x98>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d10e      	bne.n	8004bce <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bb4:	4816      	ldr	r0, [pc, #88]	; (8004c10 <checkKapiSecimleri+0xa0>)
 8004bb6:	f004 fa65 	bl	8009084 <HAL_GPIO_ReadPin>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <checkKapiSecimleri+0x98>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d116      	bne.n	8004c04 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bda:	480d      	ldr	r0, [pc, #52]	; (8004c10 <checkKapiSecimleri+0xa0>)
 8004bdc:	f004 fa52 	bl	8009084 <HAL_GPIO_ReadPin>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <checkKapiSecimleri+0x8e>
 8004be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bea:	4809      	ldr	r0, [pc, #36]	; (8004c10 <checkKapiSecimleri+0xa0>)
 8004bec:	f004 fa4a 	bl	8009084 <HAL_GPIO_ReadPin>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004bfc:	e002      	b.n	8004c04 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004bfe:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <checkKapiSecimleri+0x9c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200001f4 	.word	0x200001f4
 8004c0c:	2000023f 	.word	0x2000023f
 8004c10:	40010800 	.word	0x40010800

08004c14 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004c18:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <checkAktifCalisma+0x190>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f041 833e 	bne.w	800629e <checkAktifCalisma+0x168a>
 8004c22:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <checkAktifCalisma+0x194>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f041 8339 	bne.w	800629e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004c2c:	4b5f      	ldr	r3, [pc, #380]	; (8004dac <checkAktifCalisma+0x198>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11a      	bne.n	8004c6a <checkAktifCalisma+0x56>
 8004c34:	4b5e      	ldr	r3, [pc, #376]	; (8004db0 <checkAktifCalisma+0x19c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <checkAktifCalisma+0x56>
 8004c3c:	4b5d      	ldr	r3, [pc, #372]	; (8004db4 <checkAktifCalisma+0x1a0>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <checkAktifCalisma+0x46>
 8004c44:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <checkAktifCalisma+0x1a4>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f083 0301 	eor.w	r3, r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <checkAktifCalisma+0x46>
 8004c52:	4b5a      	ldr	r3, [pc, #360]	; (8004dbc <checkAktifCalisma+0x1a8>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d007      	beq.n	8004c6a <checkAktifCalisma+0x56>
 8004c5a:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <checkAktifCalisma+0x1ac>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d018      	beq.n	8004c94 <checkAktifCalisma+0x80>
 8004c62:	4b58      	ldr	r3, [pc, #352]	; (8004dc4 <checkAktifCalisma+0x1b0>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d114      	bne.n	8004c94 <checkAktifCalisma+0x80>
 8004c6a:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <checkAktifCalisma+0x1b4>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <checkAktifCalisma+0x80>
 8004c72:	4b56      	ldr	r3, [pc, #344]	; (8004dcc <checkAktifCalisma+0x1b8>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c80:	4853      	ldr	r0, [pc, #332]	; (8004dd0 <checkAktifCalisma+0x1bc>)
 8004c82:	f004 fa16 	bl	80090b2 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004c86:	4b53      	ldr	r3, [pc, #332]	; (8004dd4 <checkAktifCalisma+0x1c0>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004c8c:	4b52      	ldr	r3, [pc, #328]	; (8004dd8 <checkAktifCalisma+0x1c4>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e008      	b.n	8004ca6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004c94:	2200      	movs	r2, #0
 8004c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c9a:	484d      	ldr	r0, [pc, #308]	; (8004dd0 <checkAktifCalisma+0x1bc>)
 8004c9c:	f004 fa09 	bl	80090b2 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004ca0:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <checkAktifCalisma+0x1c0>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004ca6:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <checkAktifCalisma+0x194>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d160      	bne.n	8004d70 <checkAktifCalisma+0x15c>
 8004cae:	4b46      	ldr	r3, [pc, #280]	; (8004dc8 <checkAktifCalisma+0x1b4>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d05c      	beq.n	8004d70 <checkAktifCalisma+0x15c>
 8004cb6:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <checkAktifCalisma+0x1b8>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d058      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cc2:	4843      	ldr	r0, [pc, #268]	; (8004dd0 <checkAktifCalisma+0x1bc>)
 8004cc4:	f004 f9de 	bl	8009084 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <checkAktifCalisma+0xc2>
 8004cce:	4b43      	ldr	r3, [pc, #268]	; (8004ddc <checkAktifCalisma+0x1c8>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d04c      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	4841      	ldr	r0, [pc, #260]	; (8004de0 <checkAktifCalisma+0x1cc>)
 8004cda:	f004 f9d3 	bl	8009084 <HAL_GPIO_ReadPin>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d145      	bne.n	8004d70 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004ce4:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <checkAktifCalisma+0x1d0>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d041      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cf0:	4837      	ldr	r0, [pc, #220]	; (8004dd0 <checkAktifCalisma+0x1bc>)
 8004cf2:	f004 f9c7 	bl	8009084 <HAL_GPIO_ReadPin>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10e      	bne.n	8004d1a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d00:	4833      	ldr	r0, [pc, #204]	; (8004dd0 <checkAktifCalisma+0x1bc>)
 8004d02:	f004 f9bf 	bl	8009084 <HAL_GPIO_ReadPin>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d106      	bne.n	8004d1a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004d0c:	2140      	movs	r1, #64	; 0x40
 8004d0e:	4834      	ldr	r0, [pc, #208]	; (8004de0 <checkAktifCalisma+0x1cc>)
 8004d10:	f004 f9b8 	bl	8009084 <HAL_GPIO_ReadPin>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <checkAktifCalisma+0x10e>
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <checkAktifCalisma+0x198>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d026      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <checkAktifCalisma+0x1a0>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f083 0301 	eor.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01f      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004d30:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <checkAktifCalisma+0x19c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f083 0301 	eor.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d018      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <checkAktifCalisma+0x1ac>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	f083 0301 	eor.w	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d011      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d4c:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <checkAktifCalisma+0x1d4>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f083 0301 	eor.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <checkAktifCalisma+0x1d8>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	f083 0301 	eor.w	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <checkAktifCalisma+0x198>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004d70:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <checkAktifCalisma+0x198>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <checkAktifCalisma+0x198>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d03a      	beq.n	8004df4 <checkAktifCalisma+0x1e0>
 8004d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d82:	4817      	ldr	r0, [pc, #92]	; (8004de0 <checkAktifCalisma+0x1cc>)
 8004d84:	f004 f97e 	bl	8009084 <HAL_GPIO_ReadPin>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d132      	bne.n	8004df4 <checkAktifCalisma+0x1e0>
 8004d8e:	4b18      	ldr	r3, [pc, #96]	; (8004df0 <checkAktifCalisma+0x1dc>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02e      	beq.n	8004df4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004d96:	2201      	movs	r2, #1
 8004d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d9c:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <checkAktifCalisma+0x1bc>)
 8004d9e:	f004 f988 	bl	80090b2 <HAL_GPIO_WritePin>
 8004da2:	e02d      	b.n	8004e00 <checkAktifCalisma+0x1ec>
 8004da4:	2000020a 	.word	0x2000020a
 8004da8:	20000209 	.word	0x20000209
 8004dac:	20000221 	.word	0x20000221
 8004db0:	20000222 	.word	0x20000222
 8004db4:	20000224 	.word	0x20000224
 8004db8:	2000021c 	.word	0x2000021c
 8004dbc:	200001ff 	.word	0x200001ff
 8004dc0:	20000223 	.word	0x20000223
 8004dc4:	200001fe 	.word	0x200001fe
 8004dc8:	2000023e 	.word	0x2000023e
 8004dcc:	2000023f 	.word	0x2000023f
 8004dd0:	40010c00 	.word	0x40010c00
 8004dd4:	20000240 	.word	0x20000240
 8004dd8:	2000022b 	.word	0x2000022b
 8004ddc:	20000228 	.word	0x20000228
 8004de0:	40011000 	.word	0x40011000
 8004de4:	200001ef 	.word	0x200001ef
 8004de8:	20000226 	.word	0x20000226
 8004dec:	20000227 	.word	0x20000227
 8004df0:	200001fa 	.word	0x200001fa
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dfa:	4860      	ldr	r0, [pc, #384]	; (8004f7c <checkAktifCalisma+0x368>)
 8004dfc:	f004 f959 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004e00:	4b5f      	ldr	r3, [pc, #380]	; (8004f80 <checkAktifCalisma+0x36c>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <checkAktifCalisma+0x21c>
 8004e08:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <checkAktifCalisma+0x370>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d007      	beq.n	8004e20 <checkAktifCalisma+0x20c>
 8004e10:	4b5c      	ldr	r3, [pc, #368]	; (8004f84 <checkAktifCalisma+0x370>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d003      	beq.n	8004e20 <checkAktifCalisma+0x20c>
 8004e18:	4b5b      	ldr	r3, [pc, #364]	; (8004f88 <checkAktifCalisma+0x374>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004e20:	2201      	movs	r2, #1
 8004e22:	2104      	movs	r1, #4
 8004e24:	4855      	ldr	r0, [pc, #340]	; (8004f7c <checkAktifCalisma+0x368>)
 8004e26:	f004 f944 	bl	80090b2 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004e2a:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <checkAktifCalisma+0x378>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004e30:	4b56      	ldr	r3, [pc, #344]	; (8004f8c <checkAktifCalisma+0x378>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02f      	beq.n	8004e98 <checkAktifCalisma+0x284>
 8004e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e3c:	484f      	ldr	r0, [pc, #316]	; (8004f7c <checkAktifCalisma+0x368>)
 8004e3e:	f004 f921 	bl	8009084 <HAL_GPIO_ReadPin>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <checkAktifCalisma+0x242>
 8004e48:	4b51      	ldr	r3, [pc, #324]	; (8004f90 <checkAktifCalisma+0x37c>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f083 0301 	eor.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <checkAktifCalisma+0x250>
 8004e56:	2102      	movs	r1, #2
 8004e58:	484e      	ldr	r0, [pc, #312]	; (8004f94 <checkAktifCalisma+0x380>)
 8004e5a:	f004 f913 	bl	8009084 <HAL_GPIO_ReadPin>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d119      	bne.n	8004e98 <checkAktifCalisma+0x284>
 8004e64:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <checkAktifCalisma+0x384>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <checkAktifCalisma+0x284>
 8004e6c:	4b4b      	ldr	r3, [pc, #300]	; (8004f9c <checkAktifCalisma+0x388>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <checkAktifCalisma+0x284>
 8004e74:	4b4a      	ldr	r3, [pc, #296]	; (8004fa0 <checkAktifCalisma+0x38c>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <checkAktifCalisma+0x284>
 8004e7c:	4b49      	ldr	r3, [pc, #292]	; (8004fa4 <checkAktifCalisma+0x390>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f083 0301 	eor.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <checkAktifCalisma+0x284>
			timer2=millis;
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <checkAktifCalisma+0x394>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a47      	ldr	r2, [pc, #284]	; (8004fac <checkAktifCalisma+0x398>)
 8004e90:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004e92:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <checkAktifCalisma+0x390>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004e98:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <checkAktifCalisma+0x394>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b43      	ldr	r3, [pc, #268]	; (8004fac <checkAktifCalisma+0x398>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	4a43      	ldr	r2, [pc, #268]	; (8004fb0 <checkAktifCalisma+0x39c>)
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d303      	bcc.n	8004eb2 <checkAktifCalisma+0x29e>
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <checkAktifCalisma+0x390>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d111      	bne.n	8004ed6 <checkAktifCalisma+0x2c2>
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <checkAktifCalisma+0x384>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f083 0301 	eor.w	r3, r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <checkAktifCalisma+0x2c2>
 8004ec0:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <checkAktifCalisma+0x388>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f083 0301 	eor.w	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <checkAktifCalisma+0x2c2>
 8004ece:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <checkAktifCalisma+0x38c>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2104      	movs	r1, #4
 8004eda:	4828      	ldr	r0, [pc, #160]	; (8004f7c <checkAktifCalisma+0x368>)
 8004edc:	f004 f8e9 	bl	80090b2 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <checkAktifCalisma+0x378>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <checkAktifCalisma+0x390>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004eec:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <checkAktifCalisma+0x3a0>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d102      	bne.n	8004efa <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <checkAktifCalisma+0x3a4>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <checkAktifCalisma+0x3a0>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d116      	bne.n	8004f30 <checkAktifCalisma+0x31c>
 8004f02:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <checkAktifCalisma+0x3a8>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d112      	bne.n	8004f30 <checkAktifCalisma+0x31c>
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4821      	ldr	r0, [pc, #132]	; (8004f94 <checkAktifCalisma+0x380>)
 8004f0e:	f004 f8b9 	bl	8009084 <HAL_GPIO_ReadPin>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <checkAktifCalisma+0x31c>
 8004f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1c:	4817      	ldr	r0, [pc, #92]	; (8004f7c <checkAktifCalisma+0x368>)
 8004f1e:	f004 f8b1 	bl	8009084 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004f28:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <checkAktifCalisma+0x3a4>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e011      	b.n	8004f54 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004f30:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <checkAktifCalisma+0x3a0>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d10d      	bne.n	8004f54 <checkAktifCalisma+0x340>
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4816      	ldr	r0, [pc, #88]	; (8004f94 <checkAktifCalisma+0x380>)
 8004f3c:	f004 f8a2 	bl	8009084 <HAL_GPIO_ReadPin>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d106      	bne.n	8004f54 <checkAktifCalisma+0x340>
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <checkAktifCalisma+0x3a8>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <checkAktifCalisma+0x3a4>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <checkAktifCalisma+0x3a0>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d134      	bne.n	8004fc6 <checkAktifCalisma+0x3b2>
 8004f5c:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <checkAktifCalisma+0x3a8>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d130      	bne.n	8004fc6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f64:	2101      	movs	r1, #1
 8004f66:	480b      	ldr	r0, [pc, #44]	; (8004f94 <checkAktifCalisma+0x380>)
 8004f68:	f004 f88c 	bl	8009084 <HAL_GPIO_ReadPin>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d126      	bne.n	8004fc0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004f72:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <checkAktifCalisma+0x3a4>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e025      	b.n	8004fc6 <checkAktifCalisma+0x3b2>
 8004f7a:	bf00      	nop
 8004f7c:	40010c00 	.word	0x40010c00
 8004f80:	20000221 	.word	0x20000221
 8004f84:	200001fb 	.word	0x200001fb
 8004f88:	200001ff 	.word	0x200001ff
 8004f8c:	20000225 	.word	0x20000225
 8004f90:	20000228 	.word	0x20000228
 8004f94:	40011000 	.word	0x40011000
 8004f98:	2000023e 	.word	0x2000023e
 8004f9c:	2000023f 	.word	0x2000023f
 8004fa0:	200001ef 	.word	0x200001ef
 8004fa4:	2000021d 	.word	0x2000021d
 8004fa8:	200001c8 	.word	0x200001c8
 8004fac:	200001d4 	.word	0x200001d4
 8004fb0:	20000200 	.word	0x20000200
 8004fb4:	200001f0 	.word	0x200001f0
 8004fb8:	20000243 	.word	0x20000243
 8004fbc:	200001ed 	.word	0x200001ed
			} else {
				cerceveVar=0;
 8004fc0:	4b7f      	ldr	r3, [pc, #508]	; (80051c0 <checkAktifCalisma+0x5ac>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004fc6:	4b7f      	ldr	r3, [pc, #508]	; (80051c4 <checkAktifCalisma+0x5b0>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d17c      	bne.n	80050c8 <checkAktifCalisma+0x4b4>
 8004fce:	4b7e      	ldr	r3, [pc, #504]	; (80051c8 <checkAktifCalisma+0x5b4>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d078      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	; (80051cc <checkAktifCalisma+0x5b8>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d074      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004fde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fe2:	487b      	ldr	r0, [pc, #492]	; (80051d0 <checkAktifCalisma+0x5bc>)
 8004fe4:	f004 f84e 	bl	8009084 <HAL_GPIO_ReadPin>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <checkAktifCalisma+0x3e2>
 8004fee:	4b79      	ldr	r3, [pc, #484]	; (80051d4 <checkAktifCalisma+0x5c0>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d068      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004ff6:	4b72      	ldr	r3, [pc, #456]	; (80051c0 <checkAktifCalisma+0x5ac>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d064      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <checkAktifCalisma+0x5c4>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f083 0301 	eor.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05d      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800500c:	2104      	movs	r1, #4
 800500e:	4873      	ldr	r0, [pc, #460]	; (80051dc <checkAktifCalisma+0x5c8>)
 8005010:	f004 f838 	bl	8009084 <HAL_GPIO_ReadPin>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <checkAktifCalisma+0x40e>
 800501a:	4b71      	ldr	r3, [pc, #452]	; (80051e0 <checkAktifCalisma+0x5cc>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d152      	bne.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005026:	486a      	ldr	r0, [pc, #424]	; (80051d0 <checkAktifCalisma+0x5bc>)
 8005028:	f004 f82c 	bl	8009084 <HAL_GPIO_ReadPin>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10e      	bne.n	8005050 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005036:	4866      	ldr	r0, [pc, #408]	; (80051d0 <checkAktifCalisma+0x5bc>)
 8005038:	f004 f824 	bl	8009084 <HAL_GPIO_ReadPin>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d106      	bne.n	8005050 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005042:	2140      	movs	r1, #64	; 0x40
 8005044:	4865      	ldr	r0, [pc, #404]	; (80051dc <checkAktifCalisma+0x5c8>)
 8005046:	f004 f81d 	bl	8009084 <HAL_GPIO_ReadPin>
 800504a:	4603      	mov	r3, r0
 800504c:	2b01      	cmp	r3, #1
 800504e:	d003      	beq.n	8005058 <checkAktifCalisma+0x444>
 8005050:	4b64      	ldr	r3, [pc, #400]	; (80051e4 <checkAktifCalisma+0x5d0>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d037      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005058:	4b63      	ldr	r3, [pc, #396]	; (80051e8 <checkAktifCalisma+0x5d4>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f083 0301 	eor.w	r3, r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d030      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005066:	4b61      	ldr	r3, [pc, #388]	; (80051ec <checkAktifCalisma+0x5d8>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f083 0301 	eor.w	r3, r3, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d029      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005074:	4b5e      	ldr	r3, [pc, #376]	; (80051f0 <checkAktifCalisma+0x5dc>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f083 0301 	eor.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d022      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005082:	4b5c      	ldr	r3, [pc, #368]	; (80051f4 <checkAktifCalisma+0x5e0>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f083 0301 	eor.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005090:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <checkAktifCalisma+0x5e4>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f083 0301 	eor.w	r3, r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d014      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800509e:	4b57      	ldr	r3, [pc, #348]	; (80051fc <checkAktifCalisma+0x5e8>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f083 0301 	eor.w	r3, r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80050ac:	2201      	movs	r2, #1
 80050ae:	2102      	movs	r1, #2
 80050b0:	4847      	ldr	r0, [pc, #284]	; (80051d0 <checkAktifCalisma+0x5bc>)
 80050b2:	f003 fffe 	bl	80090b2 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80050b6:	4b4b      	ldr	r3, [pc, #300]	; (80051e4 <checkAktifCalisma+0x5d0>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80050bc:	4b50      	ldr	r3, [pc, #320]	; (8005200 <checkAktifCalisma+0x5ec>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80050c2:	4b50      	ldr	r3, [pc, #320]	; (8005204 <checkAktifCalisma+0x5f0>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80050c8:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <checkAktifCalisma+0x5d0>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d033      	beq.n	8005138 <checkAktifCalisma+0x524>
 80050d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050d4:	483e      	ldr	r0, [pc, #248]	; (80051d0 <checkAktifCalisma+0x5bc>)
 80050d6:	f003 ffd5 	bl	8009084 <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d106      	bne.n	80050ee <checkAktifCalisma+0x4da>
 80050e0:	4b3c      	ldr	r3, [pc, #240]	; (80051d4 <checkAktifCalisma+0x5c0>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f083 0301 	eor.w	r3, r3, #1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <checkAktifCalisma+0x4f0>
 80050ee:	2104      	movs	r1, #4
 80050f0:	483a      	ldr	r0, [pc, #232]	; (80051dc <checkAktifCalisma+0x5c8>)
 80050f2:	f003 ffc7 	bl	8009084 <HAL_GPIO_ReadPin>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d11d      	bne.n	8005138 <checkAktifCalisma+0x524>
 80050fc:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <checkAktifCalisma+0x5cc>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d019      	beq.n	8005138 <checkAktifCalisma+0x524>
 8005104:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <checkAktifCalisma+0x5b4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <checkAktifCalisma+0x524>
 800510c:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <checkAktifCalisma+0x5b8>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d011      	beq.n	8005138 <checkAktifCalisma+0x524>
 8005114:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <checkAktifCalisma+0x5ac>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <checkAktifCalisma+0x524>
 800511c:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <checkAktifCalisma+0x5f4>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f083 0301 	eor.w	r3, r3, #1
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d006      	beq.n	8005138 <checkAktifCalisma+0x524>
			timer2=millis;
 800512a:	4b38      	ldr	r3, [pc, #224]	; (800520c <checkAktifCalisma+0x5f8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a38      	ldr	r2, [pc, #224]	; (8005210 <checkAktifCalisma+0x5fc>)
 8005130:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <checkAktifCalisma+0x5f4>)
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005138:	4b34      	ldr	r3, [pc, #208]	; (800520c <checkAktifCalisma+0x5f8>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b34      	ldr	r3, [pc, #208]	; (8005210 <checkAktifCalisma+0x5fc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4a34      	ldr	r2, [pc, #208]	; (8005214 <checkAktifCalisma+0x600>)
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	4293      	cmp	r3, r2
 8005148:	d303      	bcc.n	8005152 <checkAktifCalisma+0x53e>
 800514a:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <checkAktifCalisma+0x5f4>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d114      	bne.n	800517c <checkAktifCalisma+0x568>
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <checkAktifCalisma+0x5b4>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	f083 0301 	eor.w	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <checkAktifCalisma+0x568>
 8005160:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <checkAktifCalisma+0x5b8>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <checkAktifCalisma+0x568>
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <checkAktifCalisma+0x5ac>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	f083 0301 	eor.w	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800517c:	2200      	movs	r2, #0
 800517e:	2102      	movs	r1, #2
 8005180:	4813      	ldr	r0, [pc, #76]	; (80051d0 <checkAktifCalisma+0x5bc>)
 8005182:	f003 ff96 	bl	80090b2 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <checkAktifCalisma+0x5d0>)
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800518c:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <checkAktifCalisma+0x5f4>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <checkAktifCalisma+0x5d0>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d040      	beq.n	800521c <checkAktifCalisma+0x608>
 800519a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800519e:	480f      	ldr	r0, [pc, #60]	; (80051dc <checkAktifCalisma+0x5c8>)
 80051a0:	f003 ff70 	bl	8009084 <HAL_GPIO_ReadPin>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d138      	bne.n	800521c <checkAktifCalisma+0x608>
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <checkAktifCalisma+0x604>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d034      	beq.n	800521c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80051b2:	2201      	movs	r2, #1
 80051b4:	2101      	movs	r1, #1
 80051b6:	4806      	ldr	r0, [pc, #24]	; (80051d0 <checkAktifCalisma+0x5bc>)
 80051b8:	f003 ff7b 	bl	80090b2 <HAL_GPIO_WritePin>
 80051bc:	e033      	b.n	8005226 <checkAktifCalisma+0x612>
 80051be:	bf00      	nop
 80051c0:	20000243 	.word	0x20000243
 80051c4:	20000209 	.word	0x20000209
 80051c8:	2000023e 	.word	0x2000023e
 80051cc:	2000023f 	.word	0x2000023f
 80051d0:	40010c00 	.word	0x40010c00
 80051d4:	20000229 	.word	0x20000229
 80051d8:	2000023d 	.word	0x2000023d
 80051dc:	40011000 	.word	0x40011000
 80051e0:	200001f2 	.word	0x200001f2
 80051e4:	20000224 	.word	0x20000224
 80051e8:	20000221 	.word	0x20000221
 80051ec:	20000225 	.word	0x20000225
 80051f0:	20000222 	.word	0x20000222
 80051f4:	20000223 	.word	0x20000223
 80051f8:	20000226 	.word	0x20000226
 80051fc:	20000227 	.word	0x20000227
 8005200:	2000022c 	.word	0x2000022c
 8005204:	2000024d 	.word	0x2000024d
 8005208:	2000021c 	.word	0x2000021c
 800520c:	200001c8 	.word	0x200001c8
 8005210:	200001d4 	.word	0x200001d4
 8005214:	20000201 	.word	0x20000201
 8005218:	200001f1 	.word	0x200001f1
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800521c:	2200      	movs	r2, #0
 800521e:	2101      	movs	r1, #1
 8005220:	4836      	ldr	r0, [pc, #216]	; (80052fc <checkAktifCalisma+0x6e8>)
 8005222:	f003 ff46 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005226:	4b36      	ldr	r3, [pc, #216]	; (8005300 <checkAktifCalisma+0x6ec>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f040 8080 	bne.w	8005330 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005230:	4b34      	ldr	r3, [pc, #208]	; (8005304 <checkAktifCalisma+0x6f0>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d003      	beq.n	8005240 <checkAktifCalisma+0x62c>
 8005238:	4b32      	ldr	r3, [pc, #200]	; (8005304 <checkAktifCalisma+0x6f0>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d177      	bne.n	8005330 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005240:	4b31      	ldr	r3, [pc, #196]	; (8005308 <checkAktifCalisma+0x6f4>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d073      	beq.n	8005330 <checkAktifCalisma+0x71c>
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <checkAktifCalisma+0x6f8>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d06f      	beq.n	8005330 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005254:	4829      	ldr	r0, [pc, #164]	; (80052fc <checkAktifCalisma+0x6e8>)
 8005256:	f003 ff15 	bl	8009084 <HAL_GPIO_ReadPin>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d167      	bne.n	8005330 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005264:	482a      	ldr	r0, [pc, #168]	; (8005310 <checkAktifCalisma+0x6fc>)
 8005266:	f003 ff0d 	bl	8009084 <HAL_GPIO_ReadPin>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <checkAktifCalisma+0x664>
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <checkAktifCalisma+0x700>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d15b      	bne.n	8005330 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005278:	2140      	movs	r1, #64	; 0x40
 800527a:	4825      	ldr	r0, [pc, #148]	; (8005310 <checkAktifCalisma+0x6fc>)
 800527c:	f003 ff02 	bl	8009084 <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10f      	bne.n	80052a6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800528a:	481c      	ldr	r0, [pc, #112]	; (80052fc <checkAktifCalisma+0x6e8>)
 800528c:	f003 fefa 	bl	8009084 <HAL_GPIO_ReadPin>
 8005290:	4603      	mov	r3, r0
 8005292:	2b01      	cmp	r3, #1
 8005294:	d107      	bne.n	80052a6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800529a:	4818      	ldr	r0, [pc, #96]	; (80052fc <checkAktifCalisma+0x6e8>)
 800529c:	f003 fef2 	bl	8009084 <HAL_GPIO_ReadPin>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d003      	beq.n	80052ae <checkAktifCalisma+0x69a>
 80052a6:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <checkAktifCalisma+0x704>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d040      	beq.n	8005330 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80052ae:	4b1b      	ldr	r3, [pc, #108]	; (800531c <checkAktifCalisma+0x708>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f083 0301 	eor.w	r3, r3, #1
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d039      	beq.n	8005330 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <checkAktifCalisma+0x70c>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f083 0301 	eor.w	r3, r3, #1
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d032      	beq.n	8005330 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80052ca:	4b16      	ldr	r3, [pc, #88]	; (8005324 <checkAktifCalisma+0x710>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	f083 0301 	eor.w	r3, r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02b      	beq.n	8005330 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <checkAktifCalisma+0x714>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f083 0301 	eor.w	r3, r3, #1
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d024      	beq.n	8005330 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <checkAktifCalisma+0x718>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f083 0301 	eor.w	r3, r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01d      	beq.n	8005330 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80052f4:	4b08      	ldr	r3, [pc, #32]	; (8005318 <checkAktifCalisma+0x704>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e01c      	b.n	8005336 <checkAktifCalisma+0x722>
 80052fc:	40010c00 	.word	0x40010c00
 8005300:	20000209 	.word	0x20000209
 8005304:	200001fb 	.word	0x200001fb
 8005308:	2000023e 	.word	0x2000023e
 800530c:	2000023f 	.word	0x2000023f
 8005310:	40011000 	.word	0x40011000
 8005314:	200001fc 	.word	0x200001fc
 8005318:	20000222 	.word	0x20000222
 800531c:	20000221 	.word	0x20000221
 8005320:	20000225 	.word	0x20000225
 8005324:	20000224 	.word	0x20000224
 8005328:	20000223 	.word	0x20000223
 800532c:	20000227 	.word	0x20000227
		} else {
			devmotoryukaricalisiyor=0;
 8005330:	4b64      	ldr	r3, [pc, #400]	; (80054c4 <checkAktifCalisma+0x8b0>)
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005336:	4b63      	ldr	r3, [pc, #396]	; (80054c4 <checkAktifCalisma+0x8b0>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800533e:	2201      	movs	r2, #1
 8005340:	2120      	movs	r1, #32
 8005342:	4861      	ldr	r0, [pc, #388]	; (80054c8 <checkAktifCalisma+0x8b4>)
 8005344:	f003 feb5 	bl	80090b2 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005348:	4b60      	ldr	r3, [pc, #384]	; (80054cc <checkAktifCalisma+0x8b8>)
 800534a:	2201      	movs	r2, #1
 800534c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800534e:	4b5f      	ldr	r3, [pc, #380]	; (80054cc <checkAktifCalisma+0x8b8>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d025      	beq.n	80053a2 <checkAktifCalisma+0x78e>
 8005356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800535a:	485d      	ldr	r0, [pc, #372]	; (80054d0 <checkAktifCalisma+0x8bc>)
 800535c:	f003 fe92 	bl	8009084 <HAL_GPIO_ReadPin>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d007      	beq.n	8005376 <checkAktifCalisma+0x762>
 8005366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800536a:	4857      	ldr	r0, [pc, #348]	; (80054c8 <checkAktifCalisma+0x8b4>)
 800536c:	f003 fe8a 	bl	8009084 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d115      	bne.n	80053a2 <checkAktifCalisma+0x78e>
 8005376:	4b57      	ldr	r3, [pc, #348]	; (80054d4 <checkAktifCalisma+0x8c0>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d011      	beq.n	80053a2 <checkAktifCalisma+0x78e>
 800537e:	4b56      	ldr	r3, [pc, #344]	; (80054d8 <checkAktifCalisma+0x8c4>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <checkAktifCalisma+0x78e>
 8005386:	4b55      	ldr	r3, [pc, #340]	; (80054dc <checkAktifCalisma+0x8c8>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f083 0301 	eor.w	r3, r3, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d006      	beq.n	80053a2 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005394:	4b52      	ldr	r3, [pc, #328]	; (80054e0 <checkAktifCalisma+0x8cc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a52      	ldr	r2, [pc, #328]	; (80054e4 <checkAktifCalisma+0x8d0>)
 800539a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800539c:	4b4f      	ldr	r3, [pc, #316]	; (80054dc <checkAktifCalisma+0x8c8>)
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80053a2:	4b4f      	ldr	r3, [pc, #316]	; (80054e0 <checkAktifCalisma+0x8cc>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b4f      	ldr	r3, [pc, #316]	; (80054e4 <checkAktifCalisma+0x8d0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	4a4e      	ldr	r2, [pc, #312]	; (80054e8 <checkAktifCalisma+0x8d4>)
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d303      	bcc.n	80053bc <checkAktifCalisma+0x7a8>
 80053b4:	4b49      	ldr	r3, [pc, #292]	; (80054dc <checkAktifCalisma+0x8c8>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10d      	bne.n	80053d8 <checkAktifCalisma+0x7c4>
 80053bc:	4b45      	ldr	r3, [pc, #276]	; (80054d4 <checkAktifCalisma+0x8c0>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <checkAktifCalisma+0x7c4>
 80053ca:	4b43      	ldr	r3, [pc, #268]	; (80054d8 <checkAktifCalisma+0x8c4>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f083 0301 	eor.w	r3, r3, #1
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80053d8:	2200      	movs	r2, #0
 80053da:	2120      	movs	r1, #32
 80053dc:	483a      	ldr	r0, [pc, #232]	; (80054c8 <checkAktifCalisma+0x8b4>)
 80053de:	f003 fe68 	bl	80090b2 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80053e2:	4b3a      	ldr	r3, [pc, #232]	; (80054cc <checkAktifCalisma+0x8b8>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80053e8:	4b3c      	ldr	r3, [pc, #240]	; (80054dc <checkAktifCalisma+0x8c8>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80053ee:	4b3f      	ldr	r3, [pc, #252]	; (80054ec <checkAktifCalisma+0x8d8>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f040 8088 	bne.w	8005508 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053f8:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <checkAktifCalisma+0x8dc>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d003      	beq.n	8005408 <checkAktifCalisma+0x7f4>
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <checkAktifCalisma+0x8dc>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d17f      	bne.n	8005508 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005408:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <checkAktifCalisma+0x8c0>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d07b      	beq.n	8005508 <checkAktifCalisma+0x8f4>
 8005410:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <checkAktifCalisma+0x8c4>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d077      	beq.n	8005508 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005418:	2140      	movs	r1, #64	; 0x40
 800541a:	482b      	ldr	r0, [pc, #172]	; (80054c8 <checkAktifCalisma+0x8b4>)
 800541c:	f003 fe32 	bl	8009084 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d170      	bne.n	8005508 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800542a:	4827      	ldr	r0, [pc, #156]	; (80054c8 <checkAktifCalisma+0x8b4>)
 800542c:	f003 fe2a 	bl	8009084 <HAL_GPIO_ReadPin>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <checkAktifCalisma+0x82a>
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <checkAktifCalisma+0x8e0>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d164      	bne.n	8005508 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800543e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005442:	4823      	ldr	r0, [pc, #140]	; (80054d0 <checkAktifCalisma+0x8bc>)
 8005444:	f003 fe1e 	bl	8009084 <HAL_GPIO_ReadPin>
 8005448:	4603      	mov	r3, r0
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10f      	bne.n	800546e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800544e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005452:	481f      	ldr	r0, [pc, #124]	; (80054d0 <checkAktifCalisma+0x8bc>)
 8005454:	f003 fe16 	bl	8009084 <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800545e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005462:	481b      	ldr	r0, [pc, #108]	; (80054d0 <checkAktifCalisma+0x8bc>)
 8005464:	f003 fe0e 	bl	8009084 <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d003      	beq.n	8005476 <checkAktifCalisma+0x862>
 800546e:	4b22      	ldr	r3, [pc, #136]	; (80054f8 <checkAktifCalisma+0x8e4>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d048      	beq.n	8005508 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <checkAktifCalisma+0x8e8>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f083 0301 	eor.w	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d041      	beq.n	8005508 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005484:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <checkAktifCalisma+0x8ec>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d03a      	beq.n	8005508 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <checkAktifCalisma+0x8f0>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d033      	beq.n	8005508 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <checkAktifCalisma+0x8b8>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f083 0301 	eor.w	r3, r3, #1
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d02c      	beq.n	8005508 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <checkAktifCalisma+0x8b0>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d025      	beq.n	8005508 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <checkAktifCalisma+0x8e4>)
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e024      	b.n	800550e <checkAktifCalisma+0x8fa>
 80054c4:	20000222 	.word	0x20000222
 80054c8:	40011000 	.word	0x40011000
 80054cc:	20000226 	.word	0x20000226
 80054d0:	40010c00 	.word	0x40010c00
 80054d4:	2000023e 	.word	0x2000023e
 80054d8:	2000023f 	.word	0x2000023f
 80054dc:	2000021e 	.word	0x2000021e
 80054e0:	200001c8 	.word	0x200001c8
 80054e4:	200001d4 	.word	0x200001d4
 80054e8:	20000202 	.word	0x20000202
 80054ec:	20000209 	.word	0x20000209
 80054f0:	200001fb 	.word	0x200001fb
 80054f4:	200001fd 	.word	0x200001fd
 80054f8:	20000223 	.word	0x20000223
 80054fc:	20000221 	.word	0x20000221
 8005500:	20000225 	.word	0x20000225
 8005504:	20000224 	.word	0x20000224
		} else {
			devmotorasagicalisiyor=0;
 8005508:	4b96      	ldr	r3, [pc, #600]	; (8005764 <checkAktifCalisma+0xb50>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800550e:	4b95      	ldr	r3, [pc, #596]	; (8005764 <checkAktifCalisma+0xb50>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005516:	2201      	movs	r2, #1
 8005518:	2110      	movs	r1, #16
 800551a:	4893      	ldr	r0, [pc, #588]	; (8005768 <checkAktifCalisma+0xb54>)
 800551c:	f003 fdc9 	bl	80090b2 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005520:	4b92      	ldr	r3, [pc, #584]	; (800576c <checkAktifCalisma+0xb58>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005526:	4b91      	ldr	r3, [pc, #580]	; (800576c <checkAktifCalisma+0xb58>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d024      	beq.n	8005578 <checkAktifCalisma+0x964>
 800552e:	2140      	movs	r1, #64	; 0x40
 8005530:	488d      	ldr	r0, [pc, #564]	; (8005768 <checkAktifCalisma+0xb54>)
 8005532:	f003 fda7 	bl	8009084 <HAL_GPIO_ReadPin>
 8005536:	4603      	mov	r3, r0
 8005538:	2b01      	cmp	r3, #1
 800553a:	d007      	beq.n	800554c <checkAktifCalisma+0x938>
 800553c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005540:	4889      	ldr	r0, [pc, #548]	; (8005768 <checkAktifCalisma+0xb54>)
 8005542:	f003 fd9f 	bl	8009084 <HAL_GPIO_ReadPin>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d115      	bne.n	8005578 <checkAktifCalisma+0x964>
 800554c:	4b88      	ldr	r3, [pc, #544]	; (8005770 <checkAktifCalisma+0xb5c>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d011      	beq.n	8005578 <checkAktifCalisma+0x964>
 8005554:	4b87      	ldr	r3, [pc, #540]	; (8005774 <checkAktifCalisma+0xb60>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <checkAktifCalisma+0x964>
 800555c:	4b86      	ldr	r3, [pc, #536]	; (8005778 <checkAktifCalisma+0xb64>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f083 0301 	eor.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <checkAktifCalisma+0x964>
			timer2=millis;
 800556a:	4b84      	ldr	r3, [pc, #528]	; (800577c <checkAktifCalisma+0xb68>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a84      	ldr	r2, [pc, #528]	; (8005780 <checkAktifCalisma+0xb6c>)
 8005570:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005572:	4b81      	ldr	r3, [pc, #516]	; (8005778 <checkAktifCalisma+0xb64>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005578:	4b80      	ldr	r3, [pc, #512]	; (800577c <checkAktifCalisma+0xb68>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b80      	ldr	r3, [pc, #512]	; (8005780 <checkAktifCalisma+0xb6c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	4a80      	ldr	r2, [pc, #512]	; (8005784 <checkAktifCalisma+0xb70>)
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	4293      	cmp	r3, r2
 8005588:	d303      	bcc.n	8005592 <checkAktifCalisma+0x97e>
 800558a:	4b7b      	ldr	r3, [pc, #492]	; (8005778 <checkAktifCalisma+0xb64>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <checkAktifCalisma+0x99a>
 8005592:	4b77      	ldr	r3, [pc, #476]	; (8005770 <checkAktifCalisma+0xb5c>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f083 0301 	eor.w	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <checkAktifCalisma+0x99a>
 80055a0:	4b74      	ldr	r3, [pc, #464]	; (8005774 <checkAktifCalisma+0xb60>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f083 0301 	eor.w	r3, r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2110      	movs	r1, #16
 80055b2:	486d      	ldr	r0, [pc, #436]	; (8005768 <checkAktifCalisma+0xb54>)
 80055b4:	f003 fd7d 	bl	80090b2 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80055b8:	4b6c      	ldr	r3, [pc, #432]	; (800576c <checkAktifCalisma+0xb58>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80055be:	4b6e      	ldr	r3, [pc, #440]	; (8005778 <checkAktifCalisma+0xb64>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80055c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055c8:	486f      	ldr	r0, [pc, #444]	; (8005788 <checkAktifCalisma+0xb74>)
 80055ca:	f003 fd5b 	bl	8009084 <HAL_GPIO_ReadPin>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d120      	bne.n	8005616 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80055d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055d8:	486b      	ldr	r0, [pc, #428]	; (8005788 <checkAktifCalisma+0xb74>)
 80055da:	f003 fd53 	bl	8009084 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d118      	bne.n	8005616 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80055e4:	2104      	movs	r1, #4
 80055e6:	4868      	ldr	r0, [pc, #416]	; (8005788 <checkAktifCalisma+0xb74>)
 80055e8:	f003 fd4c 	bl	8009084 <HAL_GPIO_ReadPin>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d111      	bne.n	8005616 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80055f2:	2102      	movs	r1, #2
 80055f4:	4864      	ldr	r0, [pc, #400]	; (8005788 <checkAktifCalisma+0xb74>)
 80055f6:	f003 fd45 	bl	8009084 <HAL_GPIO_ReadPin>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005600:	2101      	movs	r1, #1
 8005602:	4861      	ldr	r0, [pc, #388]	; (8005788 <checkAktifCalisma+0xb74>)
 8005604:	f003 fd3e 	bl	8009084 <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <checkAktifCalisma+0xa02>
			makineStop=1;
 800560e:	4b5f      	ldr	r3, [pc, #380]	; (800578c <checkAktifCalisma+0xb78>)
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	e002      	b.n	800561c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005616:	4b5d      	ldr	r3, [pc, #372]	; (800578c <checkAktifCalisma+0xb78>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800561c:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <checkAktifCalisma+0xb7c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d144      	bne.n	80056ae <checkAktifCalisma+0xa9a>
 8005624:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <checkAktifCalisma+0xb80>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d003      	beq.n	8005634 <checkAktifCalisma+0xa20>
 800562c:	4b59      	ldr	r3, [pc, #356]	; (8005794 <checkAktifCalisma+0xb80>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d13c      	bne.n	80056ae <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005634:	2180      	movs	r1, #128	; 0x80
 8005636:	484c      	ldr	r0, [pc, #304]	; (8005768 <checkAktifCalisma+0xb54>)
 8005638:	f003 fd24 	bl	8009084 <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <checkAktifCalisma+0xa36>
 8005642:	4b55      	ldr	r3, [pc, #340]	; (8005798 <checkAktifCalisma+0xb84>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <checkAktifCalisma+0xa4e>
 800564a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800564e:	484e      	ldr	r0, [pc, #312]	; (8005788 <checkAktifCalisma+0xb74>)
 8005650:	f003 fd18 	bl	8009084 <HAL_GPIO_ReadPin>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d129      	bne.n	80056ae <checkAktifCalisma+0xa9a>
 800565a:	4b4f      	ldr	r3, [pc, #316]	; (8005798 <checkAktifCalisma+0xb84>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d125      	bne.n	80056ae <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005662:	2104      	movs	r1, #4
 8005664:	4840      	ldr	r0, [pc, #256]	; (8005768 <checkAktifCalisma+0xb54>)
 8005666:	f003 fd0d 	bl	8009084 <HAL_GPIO_ReadPin>
 800566a:	4603      	mov	r3, r0
 800566c:	2b01      	cmp	r3, #1
 800566e:	d003      	beq.n	8005678 <checkAktifCalisma+0xa64>
 8005670:	4b4a      	ldr	r3, [pc, #296]	; (800579c <checkAktifCalisma+0xb88>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11a      	bne.n	80056ae <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005678:	2102      	movs	r1, #2
 800567a:	483b      	ldr	r0, [pc, #236]	; (8005768 <checkAktifCalisma+0xb54>)
 800567c:	f003 fd02 	bl	8009084 <HAL_GPIO_ReadPin>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d113      	bne.n	80056ae <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <checkAktifCalisma+0xb8c>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f083 0301 	eor.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00c      	beq.n	80056ae <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005694:	4b3d      	ldr	r3, [pc, #244]	; (800578c <checkAktifCalisma+0xb78>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800569c:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <checkAktifCalisma+0xb90>)
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80056a2:	4b36      	ldr	r3, [pc, #216]	; (800577c <checkAktifCalisma+0xb68>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a40      	ldr	r2, [pc, #256]	; (80057a8 <checkAktifCalisma+0xb94>)
 80056a8:	6013      	str	r3, [r2, #0]
			bekle();
 80056aa:	f7ff f901 	bl	80048b0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80056ae:	4b33      	ldr	r3, [pc, #204]	; (800577c <checkAktifCalisma+0xb68>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <checkAktifCalisma+0xb94>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <checkAktifCalisma+0xb98>)
 80056ba:	7812      	ldrb	r2, [r2, #0]
 80056bc:	4293      	cmp	r3, r2
 80056be:	d211      	bcs.n	80056e4 <checkAktifCalisma+0xad0>
 80056c0:	2104      	movs	r1, #4
 80056c2:	4829      	ldr	r0, [pc, #164]	; (8005768 <checkAktifCalisma+0xb54>)
 80056c4:	f003 fcde 	bl	8009084 <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <checkAktifCalisma+0xad0>
 80056ce:	4b33      	ldr	r3, [pc, #204]	; (800579c <checkAktifCalisma+0xb88>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <checkAktifCalisma+0xad0>
 80056d6:	4b2d      	ldr	r3, [pc, #180]	; (800578c <checkAktifCalisma+0xb78>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f083 0301 	eor.w	r3, r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80056e4:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <checkAktifCalisma+0xb90>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <checkAktifCalisma+0xb7c>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d160      	bne.n	80057b4 <checkAktifCalisma+0xba0>
 80056f2:	4b28      	ldr	r3, [pc, #160]	; (8005794 <checkAktifCalisma+0xb80>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d003      	beq.n	8005702 <checkAktifCalisma+0xaee>
 80056fa:	4b26      	ldr	r3, [pc, #152]	; (8005794 <checkAktifCalisma+0xb80>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d158      	bne.n	80057b4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005702:	2104      	movs	r1, #4
 8005704:	4818      	ldr	r0, [pc, #96]	; (8005768 <checkAktifCalisma+0xb54>)
 8005706:	f003 fcbd 	bl	8009084 <HAL_GPIO_ReadPin>
 800570a:	4603      	mov	r3, r0
 800570c:	2b01      	cmp	r3, #1
 800570e:	d003      	beq.n	8005718 <checkAktifCalisma+0xb04>
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <checkAktifCalisma+0xb88>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d14d      	bne.n	80057b4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005718:	2102      	movs	r1, #2
 800571a:	4813      	ldr	r0, [pc, #76]	; (8005768 <checkAktifCalisma+0xb54>)
 800571c:	f003 fcb2 	bl	8009084 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d146      	bne.n	80057b4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	480f      	ldr	r0, [pc, #60]	; (8005768 <checkAktifCalisma+0xb54>)
 800572a:	f003 fcab 	bl	8009084 <HAL_GPIO_ReadPin>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <checkAktifCalisma+0xb28>
 8005734:	4b18      	ldr	r3, [pc, #96]	; (8005798 <checkAktifCalisma+0xb84>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <checkAktifCalisma+0xb40>
 800573c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005740:	4811      	ldr	r0, [pc, #68]	; (8005788 <checkAktifCalisma+0xb74>)
 8005742:	f003 fc9f 	bl	8009084 <HAL_GPIO_ReadPin>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d133      	bne.n	80057b4 <checkAktifCalisma+0xba0>
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <checkAktifCalisma+0xb84>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d12f      	bne.n	80057b4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <checkAktifCalisma+0xb78>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02b      	beq.n	80057b4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <checkAktifCalisma+0xb9c>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e02a      	b.n	80057ba <checkAktifCalisma+0xba6>
 8005764:	20000223 	.word	0x20000223
 8005768:	40011000 	.word	0x40011000
 800576c:	20000227 	.word	0x20000227
 8005770:	2000023e 	.word	0x2000023e
 8005774:	2000023f 	.word	0x2000023f
 8005778:	2000021f 	.word	0x2000021f
 800577c:	200001c8 	.word	0x200001c8
 8005780:	200001d4 	.word	0x200001d4
 8005784:	20000202 	.word	0x20000202
 8005788:	40010c00 	.word	0x40010c00
 800578c:	2000022e 	.word	0x2000022e
 8005790:	200001f5 	.word	0x200001f5
 8005794:	200001f4 	.word	0x200001f4
 8005798:	200001f8 	.word	0x200001f8
 800579c:	200001f2 	.word	0x200001f2
 80057a0:	2000021b 	.word	0x2000021b
 80057a4:	2000022f 	.word	0x2000022f
 80057a8:	200001cc 	.word	0x200001cc
 80057ac:	20000205 	.word	0x20000205
 80057b0:	20000230 	.word	0x20000230
		} else {
			kapi1butonkontrol=0;
 80057b4:	4b8b      	ldr	r3, [pc, #556]	; (80059e4 <checkAktifCalisma+0xdd0>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057ba:	4b8b      	ldr	r3, [pc, #556]	; (80059e8 <checkAktifCalisma+0xdd4>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d121      	bne.n	8005806 <checkAktifCalisma+0xbf2>
 80057c2:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <checkAktifCalisma+0xdd8>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d003      	beq.n	80057d2 <checkAktifCalisma+0xbbe>
 80057ca:	4b88      	ldr	r3, [pc, #544]	; (80059ec <checkAktifCalisma+0xdd8>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d119      	bne.n	8005806 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057d2:	2104      	movs	r1, #4
 80057d4:	4886      	ldr	r0, [pc, #536]	; (80059f0 <checkAktifCalisma+0xddc>)
 80057d6:	f003 fc55 	bl	8009084 <HAL_GPIO_ReadPin>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d003      	beq.n	80057e8 <checkAktifCalisma+0xbd4>
 80057e0:	4b84      	ldr	r3, [pc, #528]	; (80059f4 <checkAktifCalisma+0xde0>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10e      	bne.n	8005806 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057e8:	2102      	movs	r1, #2
 80057ea:	4881      	ldr	r0, [pc, #516]	; (80059f0 <checkAktifCalisma+0xddc>)
 80057ec:	f003 fc4a 	bl	8009084 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80057f6:	4b80      	ldr	r3, [pc, #512]	; (80059f8 <checkAktifCalisma+0xde4>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80057fe:	4b7f      	ldr	r3, [pc, #508]	; (80059fc <checkAktifCalisma+0xde8>)
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e002      	b.n	800580c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005806:	4b7d      	ldr	r3, [pc, #500]	; (80059fc <checkAktifCalisma+0xde8>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800580c:	4b75      	ldr	r3, [pc, #468]	; (80059e4 <checkAktifCalisma+0xdd0>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <checkAktifCalisma+0xc10>
 8005814:	4b79      	ldr	r3, [pc, #484]	; (80059fc <checkAktifCalisma+0xde8>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <checkAktifCalisma+0xc10>
 800581c:	4b78      	ldr	r3, [pc, #480]	; (8005a00 <checkAktifCalisma+0xdec>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005824:	2201      	movs	r2, #1
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	4876      	ldr	r0, [pc, #472]	; (8005a04 <checkAktifCalisma+0xdf0>)
 800582a:	f003 fc42 	bl	80090b2 <HAL_GPIO_WritePin>
 800582e:	e004      	b.n	800583a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	4873      	ldr	r0, [pc, #460]	; (8005a04 <checkAktifCalisma+0xdf0>)
 8005836:	f003 fc3c 	bl	80090b2 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800583a:	4b73      	ldr	r3, [pc, #460]	; (8005a08 <checkAktifCalisma+0xdf4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d141      	bne.n	80058c6 <checkAktifCalisma+0xcb2>
 8005842:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <checkAktifCalisma+0xdd8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d003      	beq.n	8005852 <checkAktifCalisma+0xc3e>
 800584a:	4b68      	ldr	r3, [pc, #416]	; (80059ec <checkAktifCalisma+0xdd8>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d139      	bne.n	80058c6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005856:	4866      	ldr	r0, [pc, #408]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005858:	f003 fc14 	bl	8009084 <HAL_GPIO_ReadPin>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <checkAktifCalisma+0xc56>
 8005862:	4b6a      	ldr	r3, [pc, #424]	; (8005a0c <checkAktifCalisma+0xdf8>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <checkAktifCalisma+0xc6e>
 800586a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800586e:	4868      	ldr	r0, [pc, #416]	; (8005a10 <checkAktifCalisma+0xdfc>)
 8005870:	f003 fc08 	bl	8009084 <HAL_GPIO_ReadPin>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d125      	bne.n	80058c6 <checkAktifCalisma+0xcb2>
 800587a:	4b64      	ldr	r3, [pc, #400]	; (8005a0c <checkAktifCalisma+0xdf8>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d121      	bne.n	80058c6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005882:	2102      	movs	r1, #2
 8005884:	485a      	ldr	r0, [pc, #360]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005886:	f003 fbfd 	bl	8009084 <HAL_GPIO_ReadPin>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d11a      	bne.n	80058c6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005890:	2104      	movs	r1, #4
 8005892:	4857      	ldr	r0, [pc, #348]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005894:	f003 fbf6 	bl	8009084 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d113      	bne.n	80058c6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800589e:	4b56      	ldr	r3, [pc, #344]	; (80059f8 <checkAktifCalisma+0xde4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80058a6:	4b5b      	ldr	r3, [pc, #364]	; (8005a14 <checkAktifCalisma+0xe00>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f083 0301 	eor.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80058b4:	4b58      	ldr	r3, [pc, #352]	; (8005a18 <checkAktifCalisma+0xe04>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058ba:	4b58      	ldr	r3, [pc, #352]	; (8005a1c <checkAktifCalisma+0xe08>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <checkAktifCalisma+0xe0c>)
 80058c0:	6013      	str	r3, [r2, #0]
			bekle();
 80058c2:	f7fe fff5 	bl	80048b0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80058c6:	4b55      	ldr	r3, [pc, #340]	; (8005a1c <checkAktifCalisma+0xe08>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b55      	ldr	r3, [pc, #340]	; (8005a20 <checkAktifCalisma+0xe0c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	4a54      	ldr	r2, [pc, #336]	; (8005a24 <checkAktifCalisma+0xe10>)
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d20d      	bcs.n	80058f4 <checkAktifCalisma+0xce0>
 80058d8:	2102      	movs	r1, #2
 80058da:	4845      	ldr	r0, [pc, #276]	; (80059f0 <checkAktifCalisma+0xddc>)
 80058dc:	f003 fbd2 	bl	8009084 <HAL_GPIO_ReadPin>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <checkAktifCalisma+0xce0>
 80058e6:	4b44      	ldr	r3, [pc, #272]	; (80059f8 <checkAktifCalisma+0xde4>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f083 0301 	eor.w	r3, r3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80058f4:	4b48      	ldr	r3, [pc, #288]	; (8005a18 <checkAktifCalisma+0xe04>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058fa:	4b43      	ldr	r3, [pc, #268]	; (8005a08 <checkAktifCalisma+0xdf4>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d135      	bne.n	800596e <checkAktifCalisma+0xd5a>
 8005902:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <checkAktifCalisma+0xdd8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d003      	beq.n	8005912 <checkAktifCalisma+0xcfe>
 800590a:	4b38      	ldr	r3, [pc, #224]	; (80059ec <checkAktifCalisma+0xdd8>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d12d      	bne.n	800596e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005916:	4836      	ldr	r0, [pc, #216]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005918:	f003 fbb4 	bl	8009084 <HAL_GPIO_ReadPin>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <checkAktifCalisma+0xd16>
 8005922:	4b3a      	ldr	r3, [pc, #232]	; (8005a0c <checkAktifCalisma+0xdf8>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <checkAktifCalisma+0xd2e>
 800592a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800592e:	4838      	ldr	r0, [pc, #224]	; (8005a10 <checkAktifCalisma+0xdfc>)
 8005930:	f003 fba8 	bl	8009084 <HAL_GPIO_ReadPin>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d119      	bne.n	800596e <checkAktifCalisma+0xd5a>
 800593a:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <checkAktifCalisma+0xdf8>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d115      	bne.n	800596e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005942:	2102      	movs	r1, #2
 8005944:	482a      	ldr	r0, [pc, #168]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005946:	f003 fb9d 	bl	8009084 <HAL_GPIO_ReadPin>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10e      	bne.n	800596e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005950:	2104      	movs	r1, #4
 8005952:	4827      	ldr	r0, [pc, #156]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005954:	f003 fb96 	bl	8009084 <HAL_GPIO_ReadPin>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <checkAktifCalisma+0xde4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005966:	4b30      	ldr	r3, [pc, #192]	; (8005a28 <checkAktifCalisma+0xe14>)
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e002      	b.n	8005974 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800596e:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <checkAktifCalisma+0xe14>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <checkAktifCalisma+0xdf4>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d11d      	bne.n	80059b8 <checkAktifCalisma+0xda4>
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <checkAktifCalisma+0xdd8>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d003      	beq.n	800598c <checkAktifCalisma+0xd78>
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <checkAktifCalisma+0xdd8>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d115      	bne.n	80059b8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800598c:	2102      	movs	r1, #2
 800598e:	4818      	ldr	r0, [pc, #96]	; (80059f0 <checkAktifCalisma+0xddc>)
 8005990:	f003 fb78 	bl	8009084 <HAL_GPIO_ReadPin>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d10e      	bne.n	80059b8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800599a:	2104      	movs	r1, #4
 800599c:	4814      	ldr	r0, [pc, #80]	; (80059f0 <checkAktifCalisma+0xddc>)
 800599e:	f003 fb71 	bl	8009084 <HAL_GPIO_ReadPin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <checkAktifCalisma+0xde4>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80059b0:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <checkAktifCalisma+0xe18>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e002      	b.n	80059be <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <checkAktifCalisma+0xe18>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <checkAktifCalisma+0xe14>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <checkAktifCalisma+0xdc2>
 80059c6:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <checkAktifCalisma+0xe18>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <checkAktifCalisma+0xdc2>
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <checkAktifCalisma+0xe04>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02c      	beq.n	8005a30 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059d6:	2201      	movs	r2, #1
 80059d8:	2140      	movs	r1, #64	; 0x40
 80059da:	480a      	ldr	r0, [pc, #40]	; (8005a04 <checkAktifCalisma+0xdf0>)
 80059dc:	f003 fb69 	bl	80090b2 <HAL_GPIO_WritePin>
 80059e0:	e02b      	b.n	8005a3a <checkAktifCalisma+0xe26>
 80059e2:	bf00      	nop
 80059e4:	20000230 	.word	0x20000230
 80059e8:	200001f5 	.word	0x200001f5
 80059ec:	200001f4 	.word	0x200001f4
 80059f0:	40011000 	.word	0x40011000
 80059f4:	200001f2 	.word	0x200001f2
 80059f8:	2000022e 	.word	0x2000022e
 80059fc:	20000231 	.word	0x20000231
 8005a00:	2000022f 	.word	0x2000022f
 8005a04:	40010800 	.word	0x40010800
 8005a08:	200001f6 	.word	0x200001f6
 8005a0c:	200001f8 	.word	0x200001f8
 8005a10:	40010c00 	.word	0x40010c00
 8005a14:	2000021b 	.word	0x2000021b
 8005a18:	20000232 	.word	0x20000232
 8005a1c:	200001c8 	.word	0x200001c8
 8005a20:	200001cc 	.word	0x200001cc
 8005a24:	20000206 	.word	0x20000206
 8005a28:	20000233 	.word	0x20000233
 8005a2c:	20000234 	.word	0x20000234
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a30:	2200      	movs	r2, #0
 8005a32:	2140      	movs	r1, #64	; 0x40
 8005a34:	488d      	ldr	r0, [pc, #564]	; (8005c6c <checkAktifCalisma+0x1058>)
 8005a36:	f003 fb3c 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	; (8005c70 <checkAktifCalisma+0x105c>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <checkAktifCalisma+0xe36>
 8005a42:	4b8b      	ldr	r3, [pc, #556]	; (8005c70 <checkAktifCalisma+0x105c>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d115      	bne.n	8005a76 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	4889      	ldr	r0, [pc, #548]	; (8005c74 <checkAktifCalisma+0x1060>)
 8005a4e:	f003 fb19 	bl	8009084 <HAL_GPIO_ReadPin>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d003      	beq.n	8005a60 <checkAktifCalisma+0xe4c>
 8005a58:	4b87      	ldr	r3, [pc, #540]	; (8005c78 <checkAktifCalisma+0x1064>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a60:	2102      	movs	r1, #2
 8005a62:	4884      	ldr	r0, [pc, #528]	; (8005c74 <checkAktifCalisma+0x1060>)
 8005a64:	f003 fb0e 	bl	8009084 <HAL_GPIO_ReadPin>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005a6e:	4b83      	ldr	r3, [pc, #524]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e002      	b.n	8005a7c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005a76:	4b81      	ldr	r3, [pc, #516]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005a7c:	4b7c      	ldr	r3, [pc, #496]	; (8005c70 <checkAktifCalisma+0x105c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d003      	beq.n	8005a8c <checkAktifCalisma+0xe78>
 8005a84:	4b7a      	ldr	r3, [pc, #488]	; (8005c70 <checkAktifCalisma+0x105c>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d111      	bne.n	8005ab0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a8c:	2102      	movs	r1, #2
 8005a8e:	4879      	ldr	r0, [pc, #484]	; (8005c74 <checkAktifCalisma+0x1060>)
 8005a90:	f003 faf8 	bl	8009084 <HAL_GPIO_ReadPin>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10a      	bne.n	8005ab0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	4875      	ldr	r0, [pc, #468]	; (8005c74 <checkAktifCalisma+0x1060>)
 8005a9e:	f003 faf1 	bl	8009084 <HAL_GPIO_ReadPin>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005aa8:	4b75      	ldr	r3, [pc, #468]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ab0:	4b73      	ldr	r3, [pc, #460]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005ab6:	4b71      	ldr	r3, [pc, #452]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00f      	beq.n	8005ade <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005abe:	4b71      	ldr	r3, [pc, #452]	; (8005c84 <checkAktifCalisma+0x1070>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10b      	bne.n	8005ade <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005ac6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aca:	486f      	ldr	r0, [pc, #444]	; (8005c88 <checkAktifCalisma+0x1074>)
 8005acc:	f003 fada 	bl	8009084 <HAL_GPIO_ReadPin>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	; (8005c8c <checkAktifCalisma+0x1078>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	e002      	b.n	8005ae4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005ade:	4b6b      	ldr	r3, [pc, #428]	; (8005c8c <checkAktifCalisma+0x1078>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005ae4:	4b66      	ldr	r3, [pc, #408]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00f      	beq.n	8005b0c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005aec:	4b65      	ldr	r3, [pc, #404]	; (8005c84 <checkAktifCalisma+0x1070>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d10b      	bne.n	8005b0c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005af8:	4863      	ldr	r0, [pc, #396]	; (8005c88 <checkAktifCalisma+0x1074>)
 8005afa:	f003 fac3 	bl	8009084 <HAL_GPIO_ReadPin>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005b04:	4b62      	ldr	r3, [pc, #392]	; (8005c90 <checkAktifCalisma+0x107c>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e002      	b.n	8005b12 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005b0c:	4b60      	ldr	r3, [pc, #384]	; (8005c90 <checkAktifCalisma+0x107c>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b12:	4b60      	ldr	r3, [pc, #384]	; (8005c94 <checkAktifCalisma+0x1080>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d137      	bne.n	8005b8a <checkAktifCalisma+0xf76>
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <checkAktifCalisma+0x1084>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d003      	beq.n	8005b2a <checkAktifCalisma+0xf16>
 8005b22:	4b5d      	ldr	r3, [pc, #372]	; (8005c98 <checkAktifCalisma+0x1084>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d12f      	bne.n	8005b8a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b2a:	4b54      	ldr	r3, [pc, #336]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <checkAktifCalisma+0xf26>
 8005b32:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d027      	beq.n	8005b8a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b3e:	484d      	ldr	r0, [pc, #308]	; (8005c74 <checkAktifCalisma+0x1060>)
 8005b40:	f003 faa0 	bl	8009084 <HAL_GPIO_ReadPin>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <checkAktifCalisma+0xf3e>
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <checkAktifCalisma+0x1070>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b52:	4b4e      	ldr	r3, [pc, #312]	; (8005c8c <checkAktifCalisma+0x1078>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <checkAktifCalisma+0xf4e>
 8005b5a:	4b4d      	ldr	r3, [pc, #308]	; (8005c90 <checkAktifCalisma+0x107c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d013      	beq.n	8005b8a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b62:	4b4e      	ldr	r3, [pc, #312]	; (8005c9c <checkAktifCalisma+0x1088>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005b6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <checkAktifCalisma+0x108c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f083 0301 	eor.w	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005b78:	4b4a      	ldr	r3, [pc, #296]	; (8005ca4 <checkAktifCalisma+0x1090>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ca8 <checkAktifCalisma+0x1094>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a4a      	ldr	r2, [pc, #296]	; (8005cac <checkAktifCalisma+0x1098>)
 8005b84:	6013      	str	r3, [r2, #0]
			bekle();
 8005b86:	f7fe fe93 	bl	80048b0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005b8a:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <checkAktifCalisma+0x1094>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <checkAktifCalisma+0x1098>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	4a46      	ldr	r2, [pc, #280]	; (8005cb0 <checkAktifCalisma+0x109c>)
 8005b96:	7812      	ldrb	r2, [r2, #0]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d214      	bcs.n	8005bc6 <checkAktifCalisma+0xfb2>
 8005b9c:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f083 0301 	eor.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <checkAktifCalisma+0xfa4>
 8005baa:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <checkAktifCalisma+0xfb2>
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <checkAktifCalisma+0x1088>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <checkAktifCalisma+0x1090>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bcc:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <checkAktifCalisma+0x1080>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d12b      	bne.n	8005c2c <checkAktifCalisma+0x1018>
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <checkAktifCalisma+0x1084>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d003      	beq.n	8005be4 <checkAktifCalisma+0xfd0>
 8005bdc:	4b2e      	ldr	r3, [pc, #184]	; (8005c98 <checkAktifCalisma+0x1084>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d123      	bne.n	8005c2c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <checkAktifCalisma+0xfe0>
 8005bec:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bf8:	481e      	ldr	r0, [pc, #120]	; (8005c74 <checkAktifCalisma+0x1060>)
 8005bfa:	f003 fa43 	bl	8009084 <HAL_GPIO_ReadPin>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d103      	bne.n	8005c0c <checkAktifCalisma+0xff8>
 8005c04:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <checkAktifCalisma+0x1070>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c0c:	4b1f      	ldr	r3, [pc, #124]	; (8005c8c <checkAktifCalisma+0x1078>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <checkAktifCalisma+0x1008>
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <checkAktifCalisma+0x107c>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <checkAktifCalisma+0x1088>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005c24:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <checkAktifCalisma+0x10a0>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005c2c:	4b21      	ldr	r3, [pc, #132]	; (8005cb4 <checkAktifCalisma+0x10a0>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c32:	4b18      	ldr	r3, [pc, #96]	; (8005c94 <checkAktifCalisma+0x1080>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d140      	bne.n	8005cbc <checkAktifCalisma+0x10a8>
 8005c3a:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <checkAktifCalisma+0x1084>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d003      	beq.n	8005c4a <checkAktifCalisma+0x1036>
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <checkAktifCalisma+0x1084>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d138      	bne.n	8005cbc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <checkAktifCalisma+0x1068>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <checkAktifCalisma+0x1046>
 8005c52:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <checkAktifCalisma+0x106c>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d030      	beq.n	8005cbc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <checkAktifCalisma+0x1088>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02c      	beq.n	8005cbc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <checkAktifCalisma+0x10a4>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	e02b      	b.n	8005cc2 <checkAktifCalisma+0x10ae>
 8005c6a:	bf00      	nop
 8005c6c:	40010800 	.word	0x40010800
 8005c70:	200001f9 	.word	0x200001f9
 8005c74:	40011000 	.word	0x40011000
 8005c78:	200001f2 	.word	0x200001f2
 8005c7c:	20000238 	.word	0x20000238
 8005c80:	20000239 	.word	0x20000239
 8005c84:	200001f8 	.word	0x200001f8
 8005c88:	40010c00 	.word	0x40010c00
 8005c8c:	20000248 	.word	0x20000248
 8005c90:	20000249 	.word	0x20000249
 8005c94:	200001f7 	.word	0x200001f7
 8005c98:	200001f4 	.word	0x200001f4
 8005c9c:	2000022e 	.word	0x2000022e
 8005ca0:	2000021b 	.word	0x2000021b
 8005ca4:	20000235 	.word	0x20000235
 8005ca8:	200001c8 	.word	0x200001c8
 8005cac:	200001cc 	.word	0x200001cc
 8005cb0:	20000207 	.word	0x20000207
 8005cb4:	20000236 	.word	0x20000236
 8005cb8:	20000237 	.word	0x20000237
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005cbc:	4b8b      	ldr	r3, [pc, #556]	; (8005eec <checkAktifCalisma+0x12d8>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005cc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ef0 <checkAktifCalisma+0x12dc>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <checkAktifCalisma+0x10c6>
 8005cca:	4b8a      	ldr	r3, [pc, #552]	; (8005ef4 <checkAktifCalisma+0x12e0>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <checkAktifCalisma+0x10c6>
 8005cd2:	4b86      	ldr	r3, [pc, #536]	; (8005eec <checkAktifCalisma+0x12d8>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005cda:	2201      	movs	r2, #1
 8005cdc:	2120      	movs	r1, #32
 8005cde:	4886      	ldr	r0, [pc, #536]	; (8005ef8 <checkAktifCalisma+0x12e4>)
 8005ce0:	f003 f9e7 	bl	80090b2 <HAL_GPIO_WritePin>
 8005ce4:	e004      	b.n	8005cf0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2120      	movs	r1, #32
 8005cea:	4883      	ldr	r0, [pc, #524]	; (8005ef8 <checkAktifCalisma+0x12e4>)
 8005cec:	f003 f9e1 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005cf0:	4b82      	ldr	r3, [pc, #520]	; (8005efc <checkAktifCalisma+0x12e8>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <checkAktifCalisma+0x1102>
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	4881      	ldr	r0, [pc, #516]	; (8005f00 <checkAktifCalisma+0x12ec>)
 8005cfc:	f003 f9c2 	bl	8009084 <HAL_GPIO_ReadPin>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <checkAktifCalisma+0x1102>
 8005d06:	4b7f      	ldr	r3, [pc, #508]	; (8005f04 <checkAktifCalisma+0x12f0>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <checkAktifCalisma+0x1102>
 8005d0e:	4b7e      	ldr	r3, [pc, #504]	; (8005f08 <checkAktifCalisma+0x12f4>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d112      	bne.n	8005d3c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005d16:	4b7d      	ldr	r3, [pc, #500]	; (8005f0c <checkAktifCalisma+0x12f8>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d066      	beq.n	8005dec <checkAktifCalisma+0x11d8>
 8005d1e:	2104      	movs	r1, #4
 8005d20:	4877      	ldr	r0, [pc, #476]	; (8005f00 <checkAktifCalisma+0x12ec>)
 8005d22:	f003 f9af 	bl	8009084 <HAL_GPIO_ReadPin>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d15f      	bne.n	8005dec <checkAktifCalisma+0x11d8>
 8005d2c:	4b75      	ldr	r3, [pc, #468]	; (8005f04 <checkAktifCalisma+0x12f0>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d05b      	beq.n	8005dec <checkAktifCalisma+0x11d8>
 8005d34:	4b74      	ldr	r3, [pc, #464]	; (8005f08 <checkAktifCalisma+0x12f4>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d057      	beq.n	8005dec <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005d3c:	4b74      	ldr	r3, [pc, #464]	; (8005f10 <checkAktifCalisma+0x12fc>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	4b72      	ldr	r3, [pc, #456]	; (8005f10 <checkAktifCalisma+0x12fc>)
 8005d46:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d48:	4b71      	ldr	r3, [pc, #452]	; (8005f10 <checkAktifCalisma+0x12fc>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	d908      	bls.n	8005d62 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d50:	4b6f      	ldr	r3, [pc, #444]	; (8005f10 <checkAktifCalisma+0x12fc>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d56:	4b6f      	ldr	r3, [pc, #444]	; (8005f14 <checkAktifCalisma+0x1300>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	; (8005f14 <checkAktifCalisma+0x1300>)
 8005d60:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d62:	4b6c      	ldr	r3, [pc, #432]	; (8005f14 <checkAktifCalisma+0x1300>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d908      	bls.n	8005d7c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005d6a:	4b6a      	ldr	r3, [pc, #424]	; (8005f14 <checkAktifCalisma+0x1300>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005d70:	4b69      	ldr	r3, [pc, #420]	; (8005f18 <checkAktifCalisma+0x1304>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	4b67      	ldr	r3, [pc, #412]	; (8005f18 <checkAktifCalisma+0x1304>)
 8005d7a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005d7c:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <checkAktifCalisma+0x1304>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d908      	bls.n	8005d96 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005d84:	4b64      	ldr	r3, [pc, #400]	; (8005f18 <checkAktifCalisma+0x1304>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005d8a:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <checkAktifCalisma+0x1308>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b62      	ldr	r3, [pc, #392]	; (8005f1c <checkAktifCalisma+0x1308>)
 8005d94:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005d96:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <checkAktifCalisma+0x1308>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b09      	cmp	r3, #9
 8005d9c:	d908      	bls.n	8005db0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005d9e:	4b5f      	ldr	r3, [pc, #380]	; (8005f1c <checkAktifCalisma+0x1308>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005da4:	4b5e      	ldr	r3, [pc, #376]	; (8005f20 <checkAktifCalisma+0x130c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b5c      	ldr	r3, [pc, #368]	; (8005f20 <checkAktifCalisma+0x130c>)
 8005dae:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005db0:	4b5b      	ldr	r3, [pc, #364]	; (8005f20 <checkAktifCalisma+0x130c>)
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <checkAktifCalisma+0x1310>)
 8005db6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005dba:	4b58      	ldr	r3, [pc, #352]	; (8005f1c <checkAktifCalisma+0x1308>)
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <checkAktifCalisma+0x1310>)
 8005dc0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005dc2:	4b55      	ldr	r3, [pc, #340]	; (8005f18 <checkAktifCalisma+0x1304>)
 8005dc4:	781a      	ldrb	r2, [r3, #0]
 8005dc6:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <checkAktifCalisma+0x1310>)
 8005dc8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005dca:	4b52      	ldr	r3, [pc, #328]	; (8005f14 <checkAktifCalisma+0x1300>)
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	4b55      	ldr	r3, [pc, #340]	; (8005f24 <checkAktifCalisma+0x1310>)
 8005dd0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <checkAktifCalisma+0x12fc>)
 8005dd4:	781a      	ldrb	r2, [r3, #0]
 8005dd6:	4b53      	ldr	r3, [pc, #332]	; (8005f24 <checkAktifCalisma+0x1310>)
 8005dd8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005dda:	4b53      	ldr	r3, [pc, #332]	; (8005f28 <checkAktifCalisma+0x1314>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005de0:	4b46      	ldr	r3, [pc, #280]	; (8005efc <checkAktifCalisma+0x12e8>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005de6:	4b49      	ldr	r3, [pc, #292]	; (8005f0c <checkAktifCalisma+0x12f8>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005df0:	484e      	ldr	r0, [pc, #312]	; (8005f2c <checkAktifCalisma+0x1318>)
 8005df2:	f003 f947 	bl	8009084 <HAL_GPIO_ReadPin>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d016      	beq.n	8005e2a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e00:	484a      	ldr	r0, [pc, #296]	; (8005f2c <checkAktifCalisma+0x1318>)
 8005e02:	f003 f93f 	bl	8009084 <HAL_GPIO_ReadPin>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e10:	4846      	ldr	r0, [pc, #280]	; (8005f2c <checkAktifCalisma+0x1318>)
 8005e12:	f003 f937 	bl	8009084 <HAL_GPIO_ReadPin>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e1c:	2140      	movs	r1, #64	; 0x40
 8005e1e:	4838      	ldr	r0, [pc, #224]	; (8005f00 <checkAktifCalisma+0x12ec>)
 8005e20:	f003 f930 	bl	8009084 <HAL_GPIO_ReadPin>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d103      	bne.n	8005e32 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005e2a:	4b41      	ldr	r3, [pc, #260]	; (8005f30 <checkAktifCalisma+0x131c>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e002      	b.n	8005e38 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005e32:	4b3f      	ldr	r3, [pc, #252]	; (8005f30 <checkAktifCalisma+0x131c>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005e38:	4b3d      	ldr	r3, [pc, #244]	; (8005f30 <checkAktifCalisma+0x131c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d016      	beq.n	8005e6e <checkAktifCalisma+0x125a>
 8005e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e44:	4839      	ldr	r0, [pc, #228]	; (8005f2c <checkAktifCalisma+0x1318>)
 8005e46:	f003 f91d 	bl	8009084 <HAL_GPIO_ReadPin>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10e      	bne.n	8005e6e <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e50:	4b38      	ldr	r3, [pc, #224]	; (8005f34 <checkAktifCalisma+0x1320>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e56:	2001      	movs	r0, #1
 8005e58:	f7fa fde8 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	f7fa fd8b 	bl	8000978 <hata2EEPROM>
			convertAndSendData();
 8005e62:	f001 fc09 	bl	8007678 <convertAndSendData>
			acilstophatasi=1;
 8005e66:	4b34      	ldr	r3, [pc, #208]	; (8005f38 <checkAktifCalisma+0x1324>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e018      	b.n	8005ea0 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005e6e:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <checkAktifCalisma+0x1324>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d014      	beq.n	8005ea0 <checkAktifCalisma+0x128c>
 8005e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e7a:	482c      	ldr	r0, [pc, #176]	; (8005f2c <checkAktifCalisma+0x1318>)
 8005e7c:	f003 f902 	bl	8009084 <HAL_GPIO_ReadPin>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10c      	bne.n	8005ea0 <checkAktifCalisma+0x128c>
 8005e86:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <checkAktifCalisma+0x131c>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	f083 0301 	eor.w	r3, r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <checkAktifCalisma+0x1324>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f7fe fcb4 	bl	8004808 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <checkAktifCalisma+0x1328>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f083 0301 	eor.w	r3, r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d04e      	beq.n	8005f4c <checkAktifCalisma+0x1338>
 8005eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eb2:	481e      	ldr	r0, [pc, #120]	; (8005f2c <checkAktifCalisma+0x1318>)
 8005eb4:	f003 f8e6 	bl	8009084 <HAL_GPIO_ReadPin>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <checkAktifCalisma+0x12b2>
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <checkAktifCalisma+0x132c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d042      	beq.n	8005f4c <checkAktifCalisma+0x1338>
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <checkAktifCalisma+0x1330>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d13e      	bne.n	8005f4c <checkAktifCalisma+0x1338>
			hataVar=1;
 8005ece:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <checkAktifCalisma+0x1320>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005ed4:	2002      	movs	r0, #2
 8005ed6:	f7fa fda9 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005eda:	2002      	movs	r0, #2
 8005edc:	f7fa fd4c 	bl	8000978 <hata2EEPROM>
			convertAndSendData();
 8005ee0:	f001 fbca 	bl	8007678 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005ee4:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <checkAktifCalisma+0x1334>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e047      	b.n	8005f7c <checkAktifCalisma+0x1368>
 8005eec:	20000237 	.word	0x20000237
 8005ef0:	20000236 	.word	0x20000236
 8005ef4:	20000235 	.word	0x20000235
 8005ef8:	40010800 	.word	0x40010800
 8005efc:	2000022b 	.word	0x2000022b
 8005f00:	40011000 	.word	0x40011000
 8005f04:	200001f2 	.word	0x200001f2
 8005f08:	2000022e 	.word	0x2000022e
 8005f0c:	2000022c 	.word	0x2000022c
 8005f10:	200001e9 	.word	0x200001e9
 8005f14:	200001ea 	.word	0x200001ea
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	20000001 	.word	0x20000001
 8005f20:	200001eb 	.word	0x200001eb
 8005f24:	20000118 	.word	0x20000118
 8005f28:	20000218 	.word	0x20000218
 8005f2c:	40010c00 	.word	0x40010c00
 8005f30:	2000023a 	.word	0x2000023a
 8005f34:	20000241 	.word	0x20000241
 8005f38:	2000023c 	.word	0x2000023c
 8005f3c:	20000243 	.word	0x20000243
 8005f40:	2000024d 	.word	0x2000024d
 8005f44:	200001f0 	.word	0x200001f0
 8005f48:	2000023d 	.word	0x2000023d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f4c:	4b9b      	ldr	r3, [pc, #620]	; (80061bc <checkAktifCalisma+0x15a8>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <checkAktifCalisma+0x1368>
 8005f54:	4b9a      	ldr	r3, [pc, #616]	; (80061c0 <checkAktifCalisma+0x15ac>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00f      	beq.n	8005f7c <checkAktifCalisma+0x1368>
 8005f5c:	4b99      	ldr	r3, [pc, #612]	; (80061c4 <checkAktifCalisma+0x15b0>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f083 0301 	eor.w	r3, r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005f6a:	4b94      	ldr	r3, [pc, #592]	; (80061bc <checkAktifCalisma+0x15a8>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005f70:	4b95      	ldr	r3, [pc, #596]	; (80061c8 <checkAktifCalisma+0x15b4>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005f76:	2002      	movs	r0, #2
 8005f78:	f7fe fc46 	bl	8004808 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005f7c:	4b93      	ldr	r3, [pc, #588]	; (80061cc <checkAktifCalisma+0x15b8>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11e      	bne.n	8005fc2 <checkAktifCalisma+0x13ae>
 8005f84:	4b92      	ldr	r3, [pc, #584]	; (80061d0 <checkAktifCalisma+0x15bc>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d11a      	bne.n	8005fc2 <checkAktifCalisma+0x13ae>
 8005f8c:	4b91      	ldr	r3, [pc, #580]	; (80061d4 <checkAktifCalisma+0x15c0>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <checkAktifCalisma+0x13ae>
 8005f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f98:	488f      	ldr	r0, [pc, #572]	; (80061d8 <checkAktifCalisma+0x15c4>)
 8005f9a:	f003 f873 	bl	8009084 <HAL_GPIO_ReadPin>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d10e      	bne.n	8005fc2 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005fa4:	4b8d      	ldr	r3, [pc, #564]	; (80061dc <checkAktifCalisma+0x15c8>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005faa:	2003      	movs	r0, #3
 8005fac:	f7fa fd3e 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005fb0:	2003      	movs	r0, #3
 8005fb2:	f7fa fce1 	bl	8000978 <hata2EEPROM>
			convertAndSendData();
 8005fb6:	f001 fb5f 	bl	8007678 <convertAndSendData>
			basinchatasi=1;
 8005fba:	4b89      	ldr	r3, [pc, #548]	; (80061e0 <checkAktifCalisma+0x15cc>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e015      	b.n	8005fee <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005fc2:	4b87      	ldr	r3, [pc, #540]	; (80061e0 <checkAktifCalisma+0x15cc>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d011      	beq.n	8005fee <checkAktifCalisma+0x13da>
 8005fca:	4b80      	ldr	r3, [pc, #512]	; (80061cc <checkAktifCalisma+0x15b8>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d10d      	bne.n	8005fee <checkAktifCalisma+0x13da>
 8005fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fd6:	4883      	ldr	r0, [pc, #524]	; (80061e4 <checkAktifCalisma+0x15d0>)
 8005fd8:	f003 f854 	bl	8009084 <HAL_GPIO_ReadPin>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d105      	bne.n	8005fee <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005fe2:	4b7f      	ldr	r3, [pc, #508]	; (80061e0 <checkAktifCalisma+0x15cc>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005fe8:	2003      	movs	r0, #3
 8005fea:	f7fe fc0d 	bl	8004808 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005fee:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <checkAktifCalisma+0x15d4>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <checkAktifCalisma+0x13ea>
 8005ff6:	4b7d      	ldr	r3, [pc, #500]	; (80061ec <checkAktifCalisma+0x15d8>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01e      	beq.n	800603c <checkAktifCalisma+0x1428>
 8005ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006002:	487b      	ldr	r0, [pc, #492]	; (80061f0 <checkAktifCalisma+0x15dc>)
 8006004:	f003 f83e 	bl	8009084 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d116      	bne.n	800603c <checkAktifCalisma+0x1428>
 800600e:	4b79      	ldr	r3, [pc, #484]	; (80061f4 <checkAktifCalisma+0x15e0>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d003      	beq.n	800601e <checkAktifCalisma+0x140a>
 8006016:	4b77      	ldr	r3, [pc, #476]	; (80061f4 <checkAktifCalisma+0x15e0>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d10e      	bne.n	800603c <checkAktifCalisma+0x1428>
			hataVar=1;
 800601e:	4b6f      	ldr	r3, [pc, #444]	; (80061dc <checkAktifCalisma+0x15c8>)
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006024:	2004      	movs	r0, #4
 8006026:	f7fa fd01 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(4);
 800602a:	2004      	movs	r0, #4
 800602c:	f7fa fca4 	bl	8000978 <hata2EEPROM>
			convertAndSendData();
 8006030:	f001 fb22 	bl	8007678 <convertAndSendData>
			katkapisivicihatasi=1;
 8006034:	4b70      	ldr	r3, [pc, #448]	; (80061f8 <checkAktifCalisma+0x15e4>)
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	e01f      	b.n	800607c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800603c:	4b6e      	ldr	r3, [pc, #440]	; (80061f8 <checkAktifCalisma+0x15e4>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01b      	beq.n	800607c <checkAktifCalisma+0x1468>
 8006044:	4b6d      	ldr	r3, [pc, #436]	; (80061fc <checkAktifCalisma+0x15e8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d017      	beq.n	800607c <checkAktifCalisma+0x1468>
 800604c:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <checkAktifCalisma+0x15d4>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f083 0301 	eor.w	r3, r3, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d010      	beq.n	800607c <checkAktifCalisma+0x1468>
 800605a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800605e:	4864      	ldr	r0, [pc, #400]	; (80061f0 <checkAktifCalisma+0x15dc>)
 8006060:	f003 f810 	bl	8009084 <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800606a:	4b63      	ldr	r3, [pc, #396]	; (80061f8 <checkAktifCalisma+0x15e4>)
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006070:	4b5e      	ldr	r3, [pc, #376]	; (80061ec <checkAktifCalisma+0x15d8>)
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006076:	2004      	movs	r0, #4
 8006078:	f7fe fbc6 	bl	8004808 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800607c:	4b5a      	ldr	r3, [pc, #360]	; (80061e8 <checkAktifCalisma+0x15d4>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <checkAktifCalisma+0x1478>
 8006084:	4b5e      	ldr	r3, [pc, #376]	; (8006200 <checkAktifCalisma+0x15ec>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01e      	beq.n	80060ca <checkAktifCalisma+0x14b6>
 800608c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006090:	4857      	ldr	r0, [pc, #348]	; (80061f0 <checkAktifCalisma+0x15dc>)
 8006092:	f002 fff7 	bl	8009084 <HAL_GPIO_ReadPin>
 8006096:	4603      	mov	r3, r0
 8006098:	2b01      	cmp	r3, #1
 800609a:	d116      	bne.n	80060ca <checkAktifCalisma+0x14b6>
 800609c:	4b55      	ldr	r3, [pc, #340]	; (80061f4 <checkAktifCalisma+0x15e0>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d003      	beq.n	80060ac <checkAktifCalisma+0x1498>
 80060a4:	4b53      	ldr	r3, [pc, #332]	; (80061f4 <checkAktifCalisma+0x15e0>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d10e      	bne.n	80060ca <checkAktifCalisma+0x14b6>
			hataVar=1;
 80060ac:	4b4b      	ldr	r3, [pc, #300]	; (80061dc <checkAktifCalisma+0x15c8>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80060b2:	2005      	movs	r0, #5
 80060b4:	f7fa fcba 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(5);
 80060b8:	2005      	movs	r0, #5
 80060ba:	f7fa fc5d 	bl	8000978 <hata2EEPROM>
			convertAndSendData();
 80060be:	f001 fadb 	bl	8007678 <convertAndSendData>
			tablakapisivicihatasi=1;
 80060c2:	4b50      	ldr	r3, [pc, #320]	; (8006204 <checkAktifCalisma+0x15f0>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e023      	b.n	8006112 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80060ca:	4b4e      	ldr	r3, [pc, #312]	; (8006204 <checkAktifCalisma+0x15f0>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01f      	beq.n	8006112 <checkAktifCalisma+0x14fe>
 80060d2:	4b4a      	ldr	r3, [pc, #296]	; (80061fc <checkAktifCalisma+0x15e8>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <checkAktifCalisma+0x14fe>
 80060da:	4b43      	ldr	r3, [pc, #268]	; (80061e8 <checkAktifCalisma+0x15d4>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f083 0301 	eor.w	r3, r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d014      	beq.n	8006112 <checkAktifCalisma+0x14fe>
 80060e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060ec:	4840      	ldr	r0, [pc, #256]	; (80061f0 <checkAktifCalisma+0x15dc>)
 80060ee:	f002 ffc9 	bl	8009084 <HAL_GPIO_ReadPin>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10c      	bne.n	8006112 <checkAktifCalisma+0x14fe>
 80060f8:	4b40      	ldr	r3, [pc, #256]	; (80061fc <checkAktifCalisma+0x15e8>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006100:	4b40      	ldr	r3, [pc, #256]	; (8006204 <checkAktifCalisma+0x15f0>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <checkAktifCalisma+0x15ec>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800610c:	2005      	movs	r0, #5
 800610e:	f7fe fb7b 	bl	8004808 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006112:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <checkAktifCalisma+0x15c0>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <checkAktifCalisma+0x1516>
 800611a:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <checkAktifCalisma+0x15b0>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <checkAktifCalisma+0x1516>
 8006122:	4b39      	ldr	r3, [pc, #228]	; (8006208 <checkAktifCalisma+0x15f4>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800612a:	4b38      	ldr	r3, [pc, #224]	; (800620c <checkAktifCalisma+0x15f8>)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b38      	ldr	r3, [pc, #224]	; (8006210 <checkAktifCalisma+0x15fc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	4a37      	ldr	r2, [pc, #220]	; (8006214 <checkAktifCalisma+0x1600>)
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	4293      	cmp	r3, r2
 800613a:	d30d      	bcc.n	8006158 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <checkAktifCalisma+0x15c8>)
 800613e:	2201      	movs	r2, #1
 8006140:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006142:	2006      	movs	r0, #6
 8006144:	f7fa fc72 	bl	8000a2c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006148:	2006      	movs	r0, #6
 800614a:	f7fa fc15 	bl	8000978 <hata2EEPROM>
			  	convertAndSendData();
 800614e:	f001 fa93 	bl	8007678 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006152:	4b31      	ldr	r3, [pc, #196]	; (8006218 <checkAktifCalisma+0x1604>)
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006158:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <checkAktifCalisma+0x1604>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <checkAktifCalisma+0x1574>
 8006160:	2108      	movs	r1, #8
 8006162:	4823      	ldr	r0, [pc, #140]	; (80061f0 <checkAktifCalisma+0x15dc>)
 8006164:	f002 ff8e 	bl	8009084 <HAL_GPIO_ReadPin>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <checkAktifCalisma+0x1574>
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <checkAktifCalisma+0x15d4>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f083 0301 	eor.w	r3, r3, #1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800617c:	4b26      	ldr	r3, [pc, #152]	; (8006218 <checkAktifCalisma+0x1604>)
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006182:	2006      	movs	r0, #6
 8006184:	f7fe fb40 	bl	8004808 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006188:	4b24      	ldr	r3, [pc, #144]	; (800621c <checkAktifCalisma+0x1608>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <checkAktifCalisma+0x1594>
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <checkAktifCalisma+0x15b0>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d107      	bne.n	80061a8 <checkAktifCalisma+0x1594>
 8006198:	4b21      	ldr	r3, [pc, #132]	; (8006220 <checkAktifCalisma+0x160c>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <checkAktifCalisma+0x1594>
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <checkAktifCalisma+0x15f4>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d03f      	beq.n	8006228 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <checkAktifCalisma+0x1610>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <checkAktifCalisma+0x15d8>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <checkAktifCalisma+0x15ec>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e03c      	b.n	8006236 <checkAktifCalisma+0x1622>
 80061bc:	2000023d 	.word	0x2000023d
 80061c0:	20000243 	.word	0x20000243
 80061c4:	20000224 	.word	0x20000224
 80061c8:	2000024d 	.word	0x2000024d
 80061cc:	200001ef 	.word	0x200001ef
 80061d0:	200001f3 	.word	0x200001f3
 80061d4:	20000240 	.word	0x20000240
 80061d8:	40011000 	.word	0x40011000
 80061dc:	20000241 	.word	0x20000241
 80061e0:	2000024a 	.word	0x2000024a
 80061e4:	40010c00 	.word	0x40010c00
 80061e8:	2000023a 	.word	0x2000023a
 80061ec:	2000024e 	.word	0x2000024e
 80061f0:	40010800 	.word	0x40010800
 80061f4:	200001f4 	.word	0x200001f4
 80061f8:	2000024b 	.word	0x2000024b
 80061fc:	2000022e 	.word	0x2000022e
 8006200:	2000024f 	.word	0x2000024f
 8006204:	2000024c 	.word	0x2000024c
 8006208:	20000223 	.word	0x20000223
 800620c:	200001c8 	.word	0x200001c8
 8006210:	200001dc 	.word	0x200001dc
 8006214:	20000204 	.word	0x20000204
 8006218:	2000023b 	.word	0x2000023b
 800621c:	20000221 	.word	0x20000221
 8006220:	20000222 	.word	0x20000222
 8006224:	20000242 	.word	0x20000242
		} else {
			makineCalisiyor=1;
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <checkAktifCalisma+0x1690>)
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <checkAktifCalisma+0x1694>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <checkAktifCalisma+0x1698>)
 8006234:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <checkAktifCalisma+0x169c>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02f      	beq.n	800629e <checkAktifCalisma+0x168a>
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <checkAktifCalisma+0x16a0>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f083 0301 	eor.w	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d028      	beq.n	800629e <checkAktifCalisma+0x168a>
 800624c:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <checkAktifCalisma+0x16a4>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f083 0301 	eor.w	r3, r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d021      	beq.n	800629e <checkAktifCalisma+0x168a>
 800625a:	4b18      	ldr	r3, [pc, #96]	; (80062bc <checkAktifCalisma+0x16a8>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f083 0301 	eor.w	r3, r3, #1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01a      	beq.n	800629e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <checkAktifCalisma+0x16ac>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	f083 0301 	eor.w	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d013      	beq.n	800629e <checkAktifCalisma+0x168a>
 8006276:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <checkAktifCalisma+0x16b0>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f083 0301 	eor.w	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00c      	beq.n	800629e <checkAktifCalisma+0x168a>
 8006284:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <checkAktifCalisma+0x16b4>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f083 0301 	eor.w	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <checkAktifCalisma+0x169c>)
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006298:	2007      	movs	r0, #7
 800629a:	f7fe fab5 	bl	8004808 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000242 	.word	0x20000242
 80062a8:	200001c8 	.word	0x200001c8
 80062ac:	200001dc 	.word	0x200001dc
 80062b0:	20000241 	.word	0x20000241
 80062b4:	2000023c 	.word	0x2000023c
 80062b8:	2000023d 	.word	0x2000023d
 80062bc:	2000024a 	.word	0x2000024a
 80062c0:	2000024b 	.word	0x2000024b
 80062c4:	2000024c 	.word	0x2000024c
 80062c8:	2000023b 	.word	0x2000023b

080062cc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80062d0:	4b8b      	ldr	r3, [pc, #556]	; (8006500 <checkDemoModCalisma+0x234>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 8229 	bne.w	800672c <checkDemoModCalisma+0x460>
 80062da:	4b8a      	ldr	r3, [pc, #552]	; (8006504 <checkDemoModCalisma+0x238>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8224 	beq.w	800672c <checkDemoModCalisma+0x460>
 80062e4:	4b88      	ldr	r3, [pc, #544]	; (8006508 <checkDemoModCalisma+0x23c>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 821f 	bne.w	800672c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062ee:	2102      	movs	r1, #2
 80062f0:	4886      	ldr	r0, [pc, #536]	; (800650c <checkDemoModCalisma+0x240>)
 80062f2:	f002 fec7 	bl	8009084 <HAL_GPIO_ReadPin>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11d      	bne.n	8006338 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80062fc:	4b84      	ldr	r3, [pc, #528]	; (8006510 <checkDemoModCalisma+0x244>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f083 0301 	eor.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800630a:	4b82      	ldr	r3, [pc, #520]	; (8006514 <checkDemoModCalisma+0x248>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00f      	beq.n	8006338 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006318:	4b7f      	ldr	r3, [pc, #508]	; (8006518 <checkDemoModCalisma+0x24c>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f083 0301 	eor.w	r3, r3, #1
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006326:	2201      	movs	r2, #1
 8006328:	2104      	movs	r1, #4
 800632a:	487c      	ldr	r0, [pc, #496]	; (800651c <checkDemoModCalisma+0x250>)
 800632c:	f002 fec1 	bl	80090b2 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006330:	4b7b      	ldr	r3, [pc, #492]	; (8006520 <checkDemoModCalisma+0x254>)
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e00e      	b.n	8006356 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006338:	2102      	movs	r1, #2
 800633a:	4874      	ldr	r0, [pc, #464]	; (800650c <checkDemoModCalisma+0x240>)
 800633c:	f002 fea2 	bl	8009084 <HAL_GPIO_ReadPin>
 8006340:	4603      	mov	r3, r0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d107      	bne.n	8006356 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006346:	2200      	movs	r2, #0
 8006348:	2104      	movs	r1, #4
 800634a:	4874      	ldr	r0, [pc, #464]	; (800651c <checkDemoModCalisma+0x250>)
 800634c:	f002 feb1 	bl	80090b2 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006350:	4b73      	ldr	r3, [pc, #460]	; (8006520 <checkDemoModCalisma+0x254>)
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006356:	4b72      	ldr	r3, [pc, #456]	; (8006520 <checkDemoModCalisma+0x254>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <checkDemoModCalisma+0xaa>
 800635e:	4b6d      	ldr	r3, [pc, #436]	; (8006514 <checkDemoModCalisma+0x248>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d107      	bne.n	8006376 <checkDemoModCalisma+0xaa>
 8006366:	4b6c      	ldr	r3, [pc, #432]	; (8006518 <checkDemoModCalisma+0x24c>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <checkDemoModCalisma+0xaa>
 800636e:	4b68      	ldr	r3, [pc, #416]	; (8006510 <checkDemoModCalisma+0x244>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00c      	beq.n	8006390 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006376:	2201      	movs	r2, #1
 8006378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800637c:	4867      	ldr	r0, [pc, #412]	; (800651c <checkDemoModCalisma+0x250>)
 800637e:	f002 fe98 	bl	80090b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006382:	2201      	movs	r2, #1
 8006384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006388:	4864      	ldr	r0, [pc, #400]	; (800651c <checkDemoModCalisma+0x250>)
 800638a:	f002 fe92 	bl	80090b2 <HAL_GPIO_WritePin>
 800638e:	e00b      	b.n	80063a8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006390:	2200      	movs	r2, #0
 8006392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006396:	4861      	ldr	r0, [pc, #388]	; (800651c <checkDemoModCalisma+0x250>)
 8006398:	f002 fe8b 	bl	80090b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800639c:	2200      	movs	r2, #0
 800639e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063a2:	485e      	ldr	r0, [pc, #376]	; (800651c <checkDemoModCalisma+0x250>)
 80063a4:	f002 fe85 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063a8:	2102      	movs	r1, #2
 80063aa:	4858      	ldr	r0, [pc, #352]	; (800650c <checkDemoModCalisma+0x240>)
 80063ac:	f002 fe6a 	bl	8009084 <HAL_GPIO_ReadPin>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10d      	bne.n	80063d2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063ba:	4854      	ldr	r0, [pc, #336]	; (800650c <checkDemoModCalisma+0x240>)
 80063bc:	f002 fe62 	bl	8009084 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80063c6:	4b56      	ldr	r3, [pc, #344]	; (8006520 <checkDemoModCalisma+0x254>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f083 0301 	eor.w	r3, r3, #1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063d2:	2102      	movs	r1, #2
 80063d4:	484d      	ldr	r0, [pc, #308]	; (800650c <checkDemoModCalisma+0x240>)
 80063d6:	f002 fe55 	bl	8009084 <HAL_GPIO_ReadPin>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d125      	bne.n	800642c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063e4:	4849      	ldr	r0, [pc, #292]	; (800650c <checkDemoModCalisma+0x240>)
 80063e6:	f002 fe4d 	bl	8009084 <HAL_GPIO_ReadPin>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80063f0:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <checkDemoModCalisma+0x254>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f083 0301 	eor.w	r3, r3, #1
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80063fe:	4b44      	ldr	r3, [pc, #272]	; (8006510 <checkDemoModCalisma+0x244>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f083 0301 	eor.w	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00f      	beq.n	800642c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800640c:	4b42      	ldr	r3, [pc, #264]	; (8006518 <checkDemoModCalisma+0x24c>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f083 0301 	eor.w	r3, r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d008      	beq.n	800642c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800641a:	2201      	movs	r2, #1
 800641c:	2120      	movs	r1, #32
 800641e:	483b      	ldr	r0, [pc, #236]	; (800650c <checkDemoModCalisma+0x240>)
 8006420:	f002 fe47 	bl	80090b2 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006424:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <checkDemoModCalisma+0x248>)
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e007      	b.n	800643c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800642c:	2200      	movs	r2, #0
 800642e:	2120      	movs	r1, #32
 8006430:	4836      	ldr	r0, [pc, #216]	; (800650c <checkDemoModCalisma+0x240>)
 8006432:	f002 fe3e 	bl	80090b2 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006436:	4b37      	ldr	r3, [pc, #220]	; (8006514 <checkDemoModCalisma+0x248>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800643c:	2102      	movs	r1, #2
 800643e:	4833      	ldr	r0, [pc, #204]	; (800650c <checkDemoModCalisma+0x240>)
 8006440:	f002 fe20 	bl	8009084 <HAL_GPIO_ReadPin>
 8006444:	4603      	mov	r3, r0
 8006446:	2b01      	cmp	r3, #1
 8006448:	d125      	bne.n	8006496 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800644a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800644e:	482f      	ldr	r0, [pc, #188]	; (800650c <checkDemoModCalisma+0x240>)
 8006450:	f002 fe18 	bl	8009084 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d11d      	bne.n	8006496 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800645a:	4b31      	ldr	r3, [pc, #196]	; (8006520 <checkDemoModCalisma+0x254>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f083 0301 	eor.w	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d016      	beq.n	8006496 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006468:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <checkDemoModCalisma+0x248>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f083 0301 	eor.w	r3, r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00f      	beq.n	8006496 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006476:	4b26      	ldr	r3, [pc, #152]	; (8006510 <checkDemoModCalisma+0x244>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	f083 0301 	eor.w	r3, r3, #1
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006484:	2201      	movs	r2, #1
 8006486:	2110      	movs	r1, #16
 8006488:	4820      	ldr	r0, [pc, #128]	; (800650c <checkDemoModCalisma+0x240>)
 800648a:	f002 fe12 	bl	80090b2 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800648e:	4b22      	ldr	r3, [pc, #136]	; (8006518 <checkDemoModCalisma+0x24c>)
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e007      	b.n	80064a6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006496:	2200      	movs	r2, #0
 8006498:	2110      	movs	r1, #16
 800649a:	481c      	ldr	r0, [pc, #112]	; (800650c <checkDemoModCalisma+0x240>)
 800649c:	f002 fe09 	bl	80090b2 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80064a0:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <checkDemoModCalisma+0x24c>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80064a6:	2104      	movs	r1, #4
 80064a8:	4818      	ldr	r0, [pc, #96]	; (800650c <checkDemoModCalisma+0x240>)
 80064aa:	f002 fdeb 	bl	8009084 <HAL_GPIO_ReadPin>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d139      	bne.n	8006528 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80064b4:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <checkDemoModCalisma+0x254>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d032      	beq.n	8006528 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <checkDemoModCalisma+0x24c>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f083 0301 	eor.w	r3, r3, #1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02b      	beq.n	8006528 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <checkDemoModCalisma+0x248>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f083 0301 	eor.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d024      	beq.n	8006528 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80064de:	2201      	movs	r2, #1
 80064e0:	2102      	movs	r1, #2
 80064e2:	480e      	ldr	r0, [pc, #56]	; (800651c <checkDemoModCalisma+0x250>)
 80064e4:	f002 fde5 	bl	80090b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80064e8:	2201      	movs	r2, #1
 80064ea:	2101      	movs	r1, #1
 80064ec:	480b      	ldr	r0, [pc, #44]	; (800651c <checkDemoModCalisma+0x250>)
 80064ee:	f002 fde0 	bl	80090b2 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <checkDemoModCalisma+0x244>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80064f8:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <checkDemoModCalisma+0x258>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e027      	b.n	8006550 <checkDemoModCalisma+0x284>
 8006500:	2000020a 	.word	0x2000020a
 8006504:	2000023e 	.word	0x2000023e
 8006508:	20000209 	.word	0x20000209
 800650c:	40011000 	.word	0x40011000
 8006510:	20000245 	.word	0x20000245
 8006514:	20000246 	.word	0x20000246
 8006518:	20000247 	.word	0x20000247
 800651c:	40010c00 	.word	0x40010c00
 8006520:	20000244 	.word	0x20000244
 8006524:	2000022a 	.word	0x2000022a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006528:	2104      	movs	r1, #4
 800652a:	48a0      	ldr	r0, [pc, #640]	; (80067ac <checkDemoModCalisma+0x4e0>)
 800652c:	f002 fdaa 	bl	8009084 <HAL_GPIO_ReadPin>
 8006530:	4603      	mov	r3, r0
 8006532:	2b01      	cmp	r3, #1
 8006534:	d10c      	bne.n	8006550 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006536:	2200      	movs	r2, #0
 8006538:	2102      	movs	r1, #2
 800653a:	489d      	ldr	r0, [pc, #628]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 800653c:	f002 fdb9 	bl	80090b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006540:	2200      	movs	r2, #0
 8006542:	2101      	movs	r1, #1
 8006544:	489a      	ldr	r0, [pc, #616]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 8006546:	f002 fdb4 	bl	80090b2 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800654a:	4b9a      	ldr	r3, [pc, #616]	; (80067b4 <checkDemoModCalisma+0x4e8>)
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006550:	2104      	movs	r1, #4
 8006552:	4896      	ldr	r0, [pc, #600]	; (80067ac <checkDemoModCalisma+0x4e0>)
 8006554:	f002 fd96 	bl	8009084 <HAL_GPIO_ReadPin>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10d      	bne.n	800657a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800655e:	2201      	movs	r2, #1
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	4895      	ldr	r0, [pc, #596]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 8006564:	f002 fda5 	bl	80090b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006568:	2201      	movs	r2, #1
 800656a:	2120      	movs	r1, #32
 800656c:	4892      	ldr	r0, [pc, #584]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 800656e:	f002 fda0 	bl	80090b2 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006572:	4b92      	ldr	r3, [pc, #584]	; (80067bc <checkDemoModCalisma+0x4f0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a92      	ldr	r2, [pc, #584]	; (80067c0 <checkDemoModCalisma+0x4f4>)
 8006578:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800657a:	4b90      	ldr	r3, [pc, #576]	; (80067bc <checkDemoModCalisma+0x4f0>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b90      	ldr	r3, [pc, #576]	; (80067c0 <checkDemoModCalisma+0x4f4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b04      	cmp	r3, #4
 8006586:	d909      	bls.n	800659c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	488a      	ldr	r0, [pc, #552]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 800658e:	f002 fd90 	bl	80090b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006592:	2200      	movs	r2, #0
 8006594:	2120      	movs	r1, #32
 8006596:	4888      	ldr	r0, [pc, #544]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 8006598:	f002 fd8b 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800659c:	2102      	movs	r1, #2
 800659e:	4883      	ldr	r0, [pc, #524]	; (80067ac <checkDemoModCalisma+0x4e0>)
 80065a0:	f002 fd70 	bl	8009084 <HAL_GPIO_ReadPin>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d108      	bne.n	80065bc <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80065aa:	2201      	movs	r2, #1
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	4882      	ldr	r0, [pc, #520]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 80065b0:	f002 fd7f 	bl	80090b2 <HAL_GPIO_WritePin>
			timer3 = millis;
 80065b4:	4b81      	ldr	r3, [pc, #516]	; (80067bc <checkDemoModCalisma+0x4f0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a81      	ldr	r2, [pc, #516]	; (80067c0 <checkDemoModCalisma+0x4f4>)
 80065ba:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065bc:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <checkDemoModCalisma+0x4f0>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4b7f      	ldr	r3, [pc, #508]	; (80067c0 <checkDemoModCalisma+0x4f4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d904      	bls.n	80065d4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80065ca:	2200      	movs	r2, #0
 80065cc:	2140      	movs	r1, #64	; 0x40
 80065ce:	487a      	ldr	r0, [pc, #488]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 80065d0:	f002 fd6f 	bl	80090b2 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80065d4:	4b7b      	ldr	r3, [pc, #492]	; (80067c4 <checkDemoModCalisma+0x4f8>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d058      	beq.n	800668e <checkDemoModCalisma+0x3c2>
 80065dc:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <checkDemoModCalisma+0x4fc>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d054      	beq.n	800668e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80065e4:	4b79      	ldr	r3, [pc, #484]	; (80067cc <checkDemoModCalisma+0x500>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	4b77      	ldr	r3, [pc, #476]	; (80067cc <checkDemoModCalisma+0x500>)
 80065ee:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80065f0:	4b76      	ldr	r3, [pc, #472]	; (80067cc <checkDemoModCalisma+0x500>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d908      	bls.n	800660a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80065f8:	4b74      	ldr	r3, [pc, #464]	; (80067cc <checkDemoModCalisma+0x500>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80065fe:	4b74      	ldr	r3, [pc, #464]	; (80067d0 <checkDemoModCalisma+0x504>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	4b72      	ldr	r3, [pc, #456]	; (80067d0 <checkDemoModCalisma+0x504>)
 8006608:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800660a:	4b71      	ldr	r3, [pc, #452]	; (80067d0 <checkDemoModCalisma+0x504>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b09      	cmp	r3, #9
 8006610:	d908      	bls.n	8006624 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006612:	4b6f      	ldr	r3, [pc, #444]	; (80067d0 <checkDemoModCalisma+0x504>)
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006618:	4b6e      	ldr	r3, [pc, #440]	; (80067d4 <checkDemoModCalisma+0x508>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	4b6c      	ldr	r3, [pc, #432]	; (80067d4 <checkDemoModCalisma+0x508>)
 8006622:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006624:	4b6b      	ldr	r3, [pc, #428]	; (80067d4 <checkDemoModCalisma+0x508>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b09      	cmp	r3, #9
 800662a:	d908      	bls.n	800663e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 800662c:	4b69      	ldr	r3, [pc, #420]	; (80067d4 <checkDemoModCalisma+0x508>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006632:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <checkDemoModCalisma+0x50c>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4b67      	ldr	r3, [pc, #412]	; (80067d8 <checkDemoModCalisma+0x50c>)
 800663c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800663e:	4b66      	ldr	r3, [pc, #408]	; (80067d8 <checkDemoModCalisma+0x50c>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b09      	cmp	r3, #9
 8006644:	d908      	bls.n	8006658 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006646:	4b64      	ldr	r3, [pc, #400]	; (80067d8 <checkDemoModCalisma+0x50c>)
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800664c:	4b63      	ldr	r3, [pc, #396]	; (80067dc <checkDemoModCalisma+0x510>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b61      	ldr	r3, [pc, #388]	; (80067dc <checkDemoModCalisma+0x510>)
 8006656:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006658:	4b60      	ldr	r3, [pc, #384]	; (80067dc <checkDemoModCalisma+0x510>)
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <checkDemoModCalisma+0x514>)
 800665e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006662:	4b5d      	ldr	r3, [pc, #372]	; (80067d8 <checkDemoModCalisma+0x50c>)
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <checkDemoModCalisma+0x514>)
 8006668:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800666a:	4b5a      	ldr	r3, [pc, #360]	; (80067d4 <checkDemoModCalisma+0x508>)
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	4b5c      	ldr	r3, [pc, #368]	; (80067e0 <checkDemoModCalisma+0x514>)
 8006670:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006672:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <checkDemoModCalisma+0x504>)
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	4b5a      	ldr	r3, [pc, #360]	; (80067e0 <checkDemoModCalisma+0x514>)
 8006678:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800667a:	4b54      	ldr	r3, [pc, #336]	; (80067cc <checkDemoModCalisma+0x500>)
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <checkDemoModCalisma+0x514>)
 8006680:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006682:	4b58      	ldr	r3, [pc, #352]	; (80067e4 <checkDemoModCalisma+0x518>)
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006688:	4b4f      	ldr	r3, [pc, #316]	; (80067c8 <checkDemoModCalisma+0x4fc>)
 800668a:	2200      	movs	r2, #0
 800668c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800668e:	4b56      	ldr	r3, [pc, #344]	; (80067e8 <checkDemoModCalisma+0x51c>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 8087 	bne.w	80067a6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006698:	4a54      	ldr	r2, [pc, #336]	; (80067ec <checkDemoModCalisma+0x520>)
 800669a:	2101      	movs	r1, #1
 800669c:	2002      	movs	r0, #2
 800669e:	f001 f9cb 	bl	8007a38 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80066a2:	4a53      	ldr	r2, [pc, #332]	; (80067f0 <checkDemoModCalisma+0x524>)
 80066a4:	2101      	movs	r1, #1
 80066a6:	2001      	movs	r0, #1
 80066a8:	f001 f9c6 	bl	8007a38 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80066ac:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <checkDemoModCalisma+0x510>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	220a      	movs	r2, #10
 80066b2:	4950      	ldr	r1, [pc, #320]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066b4:	4618      	mov	r0, r3
 80066b6:	f005 fd11 	bl	800c0dc <itoa>
			lcd_print(2,12,snum);
 80066ba:	4a4e      	ldr	r2, [pc, #312]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066bc:	210c      	movs	r1, #12
 80066be:	2002      	movs	r0, #2
 80066c0:	f001 f9ba 	bl	8007a38 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80066c4:	4b44      	ldr	r3, [pc, #272]	; (80067d8 <checkDemoModCalisma+0x50c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	220a      	movs	r2, #10
 80066ca:	494a      	ldr	r1, [pc, #296]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066cc:	4618      	mov	r0, r3
 80066ce:	f005 fd05 	bl	800c0dc <itoa>
			lcd_print(2,13,snum);
 80066d2:	4a48      	ldr	r2, [pc, #288]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066d4:	210d      	movs	r1, #13
 80066d6:	2002      	movs	r0, #2
 80066d8:	f001 f9ae 	bl	8007a38 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80066dc:	4b3d      	ldr	r3, [pc, #244]	; (80067d4 <checkDemoModCalisma+0x508>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	220a      	movs	r2, #10
 80066e2:	4944      	ldr	r1, [pc, #272]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066e4:	4618      	mov	r0, r3
 80066e6:	f005 fcf9 	bl	800c0dc <itoa>
			lcd_print(2,14,snum);
 80066ea:	4a42      	ldr	r2, [pc, #264]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066ec:	210e      	movs	r1, #14
 80066ee:	2002      	movs	r0, #2
 80066f0:	f001 f9a2 	bl	8007a38 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80066f4:	4b36      	ldr	r3, [pc, #216]	; (80067d0 <checkDemoModCalisma+0x504>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	220a      	movs	r2, #10
 80066fa:	493e      	ldr	r1, [pc, #248]	; (80067f4 <checkDemoModCalisma+0x528>)
 80066fc:	4618      	mov	r0, r3
 80066fe:	f005 fced 	bl	800c0dc <itoa>
			lcd_print(2,15,snum);
 8006702:	4a3c      	ldr	r2, [pc, #240]	; (80067f4 <checkDemoModCalisma+0x528>)
 8006704:	210f      	movs	r1, #15
 8006706:	2002      	movs	r0, #2
 8006708:	f001 f996 	bl	8007a38 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800670c:	4b2f      	ldr	r3, [pc, #188]	; (80067cc <checkDemoModCalisma+0x500>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	220a      	movs	r2, #10
 8006712:	4938      	ldr	r1, [pc, #224]	; (80067f4 <checkDemoModCalisma+0x528>)
 8006714:	4618      	mov	r0, r3
 8006716:	f005 fce1 	bl	800c0dc <itoa>
			lcd_print(2,16,snum);
 800671a:	4a36      	ldr	r2, [pc, #216]	; (80067f4 <checkDemoModCalisma+0x528>)
 800671c:	2110      	movs	r1, #16
 800671e:	2002      	movs	r0, #2
 8006720:	f001 f98a 	bl	8007a38 <lcd_print>
			mesajYazildi=1;
 8006724:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <checkDemoModCalisma+0x52c>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800672a:	e03c      	b.n	80067a6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800672c:	4b33      	ldr	r3, [pc, #204]	; (80067fc <checkDemoModCalisma+0x530>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d003      	beq.n	800673c <checkDemoModCalisma+0x470>
 8006734:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <checkDemoModCalisma+0x51c>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d134      	bne.n	80067a6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800673c:	2200      	movs	r2, #0
 800673e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006742:	481b      	ldr	r0, [pc, #108]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 8006744:	f002 fcb5 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800674e:	4818      	ldr	r0, [pc, #96]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 8006750:	f002 fcaf 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006754:	2200      	movs	r2, #0
 8006756:	2104      	movs	r1, #4
 8006758:	4815      	ldr	r0, [pc, #84]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 800675a:	f002 fcaa 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800675e:	2200      	movs	r2, #0
 8006760:	2102      	movs	r1, #2
 8006762:	4813      	ldr	r0, [pc, #76]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 8006764:	f002 fca5 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006768:	2200      	movs	r2, #0
 800676a:	2101      	movs	r1, #1
 800676c:	4810      	ldr	r0, [pc, #64]	; (80067b0 <checkDemoModCalisma+0x4e4>)
 800676e:	f002 fca0 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006772:	2200      	movs	r2, #0
 8006774:	2120      	movs	r1, #32
 8006776:	480d      	ldr	r0, [pc, #52]	; (80067ac <checkDemoModCalisma+0x4e0>)
 8006778:	f002 fc9b 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800677c:	2200      	movs	r2, #0
 800677e:	2110      	movs	r1, #16
 8006780:	480a      	ldr	r0, [pc, #40]	; (80067ac <checkDemoModCalisma+0x4e0>)
 8006782:	f002 fc96 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006786:	2200      	movs	r2, #0
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	480b      	ldr	r0, [pc, #44]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 800678c:	f002 fc91 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006790:	2200      	movs	r2, #0
 8006792:	2140      	movs	r1, #64	; 0x40
 8006794:	4808      	ldr	r0, [pc, #32]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 8006796:	f002 fc8c 	bl	80090b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800679a:	2200      	movs	r2, #0
 800679c:	2120      	movs	r1, #32
 800679e:	4806      	ldr	r0, [pc, #24]	; (80067b8 <checkDemoModCalisma+0x4ec>)
 80067a0:	f002 fc87 	bl	80090b2 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80067a4:	e7ff      	b.n	80067a6 <checkDemoModCalisma+0x4da>
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40011000 	.word	0x40011000
 80067b0:	40010c00 	.word	0x40010c00
 80067b4:	20000245 	.word	0x20000245
 80067b8:	40010800 	.word	0x40010800
 80067bc:	200001c8 	.word	0x200001c8
 80067c0:	200001d8 	.word	0x200001d8
 80067c4:	20000244 	.word	0x20000244
 80067c8:	2000022a 	.word	0x2000022a
 80067cc:	200001e9 	.word	0x200001e9
 80067d0:	200001ea 	.word	0x200001ea
 80067d4:	20000000 	.word	0x20000000
 80067d8:	20000001 	.word	0x20000001
 80067dc:	200001eb 	.word	0x200001eb
 80067e0:	20000118 	.word	0x20000118
 80067e4:	20000218 	.word	0x20000218
 80067e8:	20000209 	.word	0x20000209
 80067ec:	0800d8c8 	.word	0x0800d8c8
 80067f0:	0800d8d4 	.word	0x0800d8d4
 80067f4:	20000188 	.word	0x20000188
 80067f8:	20000220 	.word	0x20000220
 80067fc:	2000020a 	.word	0x2000020a

08006800 <mainLoop>:

void mainLoop() {
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006806:	f7fe f923 	bl	8004a50 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800680a:	2101      	movs	r1, #1
 800680c:	48a9      	ldr	r0, [pc, #676]	; (8006ab4 <mainLoop+0x2b4>)
 800680e:	f002 fc39 	bl	8009084 <HAL_GPIO_ReadPin>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d136      	bne.n	8006886 <mainLoop+0x86>
 8006818:	2108      	movs	r1, #8
 800681a:	48a7      	ldr	r0, [pc, #668]	; (8006ab8 <mainLoop+0x2b8>)
 800681c:	f002 fc32 	bl	8009084 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d12f      	bne.n	8006886 <mainLoop+0x86>
 8006826:	2102      	movs	r1, #2
 8006828:	48a2      	ldr	r0, [pc, #648]	; (8006ab4 <mainLoop+0x2b4>)
 800682a:	f002 fc2b 	bl	8009084 <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d128      	bne.n	8006886 <mainLoop+0x86>
 8006834:	2104      	movs	r1, #4
 8006836:	489f      	ldr	r0, [pc, #636]	; (8006ab4 <mainLoop+0x2b4>)
 8006838:	f002 fc24 	bl	8009084 <HAL_GPIO_ReadPin>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d121      	bne.n	8006886 <mainLoop+0x86>
 8006842:	2108      	movs	r1, #8
 8006844:	489b      	ldr	r0, [pc, #620]	; (8006ab4 <mainLoop+0x2b4>)
 8006846:	f002 fc1d 	bl	8009084 <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11a      	bne.n	8006886 <mainLoop+0x86>
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	4899      	ldr	r0, [pc, #612]	; (8006ab8 <mainLoop+0x2b8>)
 8006854:	f002 fc16 	bl	8009084 <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d113      	bne.n	8006886 <mainLoop+0x86>
 800685e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006862:	4895      	ldr	r0, [pc, #596]	; (8006ab8 <mainLoop+0x2b8>)
 8006864:	f002 fc0e 	bl	8009084 <HAL_GPIO_ReadPin>
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d10b      	bne.n	8006886 <mainLoop+0x86>
 800686e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006872:	4891      	ldr	r0, [pc, #580]	; (8006ab8 <mainLoop+0x2b8>)
 8006874:	f002 fc06 	bl	8009084 <HAL_GPIO_ReadPin>
 8006878:	4603      	mov	r3, r0
 800687a:	2b01      	cmp	r3, #1
 800687c:	d103      	bne.n	8006886 <mainLoop+0x86>
			butonKontrol=0;
 800687e:	4b8f      	ldr	r3, [pc, #572]	; (8006abc <mainLoop+0x2bc>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	e003      	b.n	800688e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006886:	4b8e      	ldr	r3, [pc, #568]	; (8006ac0 <mainLoop+0x2c0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a8e      	ldr	r2, [pc, #568]	; (8006ac4 <mainLoop+0x2c4>)
 800688c:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 800688e:	f7fe f8ab 	bl	80049e8 <buttonCheck>
 8006892:	4603      	mov	r3, r0
 8006894:	2b01      	cmp	r3, #1
 8006896:	d003      	beq.n	80068a0 <mainLoop+0xa0>
			backLightTimer = millis;
 8006898:	4b89      	ldr	r3, [pc, #548]	; (8006ac0 <mainLoop+0x2c0>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a89      	ldr	r2, [pc, #548]	; (8006ac4 <mainLoop+0x2c4>)
 800689e:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80068a0:	4b89      	ldr	r3, [pc, #548]	; (8006ac8 <mainLoop+0x2c8>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03a      	beq.n	800691e <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068a8:	bf00      	nop
 80068aa:	4888      	ldr	r0, [pc, #544]	; (8006acc <mainLoop+0x2cc>)
 80068ac:	f003 fa13 	bl	8009cd6 <HAL_I2C_GetError>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d0f9      	beq.n	80068aa <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80068b6:	bf00      	nop
 80068b8:	4884      	ldr	r0, [pc, #528]	; (8006acc <mainLoop+0x2cc>)
 80068ba:	f003 f9ff 	bl	8009cbc <HAL_I2C_GetState>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d1f9      	bne.n	80068b8 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80068c4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	236e      	movs	r3, #110	; 0x6e
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	4b80      	ldr	r3, [pc, #512]	; (8006ad0 <mainLoop+0x2d0>)
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	236e      	movs	r3, #110	; 0x6e
 80068d4:	2200      	movs	r2, #0
 80068d6:	21a0      	movs	r1, #160	; 0xa0
 80068d8:	487c      	ldr	r0, [pc, #496]	; (8006acc <mainLoop+0x2cc>)
 80068da:	f002 fe8d 	bl	80095f8 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80068de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068e2:	f001 fdff 	bl	80084e4 <HAL_Delay>

		  hafizaYaz=0;
 80068e6:	4b78      	ldr	r3, [pc, #480]	; (8006ac8 <mainLoop+0x2c8>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80068ec:	4b79      	ldr	r3, [pc, #484]	; (8006ad4 <mainLoop+0x2d4>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 80068f4:	4a78      	ldr	r2, [pc, #480]	; (8006ad8 <mainLoop+0x2d8>)
 80068f6:	2101      	movs	r1, #1
 80068f8:	2002      	movs	r0, #2
 80068fa:	f001 f89d 	bl	8007a38 <lcd_print>
 80068fe:	e008      	b.n	8006912 <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006900:	4b74      	ldr	r3, [pc, #464]	; (8006ad4 <mainLoop+0x2d4>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d104      	bne.n	8006912 <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006908:	4a74      	ldr	r2, [pc, #464]	; (8006adc <mainLoop+0x2dc>)
 800690a:	2101      	movs	r1, #1
 800690c:	2002      	movs	r0, #2
 800690e:	f001 f893 	bl	8007a38 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006916:	f001 fde5 	bl	80084e4 <HAL_Delay>
		  lcd_clear();
 800691a:	f001 f8b9 	bl	8007a90 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800691e:	4b70      	ldr	r3, [pc, #448]	; (8006ae0 <mainLoop+0x2e0>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f083 0301 	eor.w	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d06d      	beq.n	8006a08 <mainLoop+0x208>
 800692c:	4867      	ldr	r0, [pc, #412]	; (8006acc <mainLoop+0x2cc>)
 800692e:	f003 f9c5 	bl	8009cbc <HAL_I2C_GetState>
 8006932:	4603      	mov	r3, r0
 8006934:	2b20      	cmp	r3, #32
 8006936:	d167      	bne.n	8006a08 <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006938:	4b6a      	ldr	r3, [pc, #424]	; (8006ae4 <mainLoop+0x2e4>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f083 0301 	eor.w	r3, r3, #1
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d044      	beq.n	80069d0 <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006946:	4a68      	ldr	r2, [pc, #416]	; (8006ae8 <mainLoop+0x2e8>)
 8006948:	2101      	movs	r1, #1
 800694a:	2001      	movs	r0, #1
 800694c:	f001 f874 	bl	8007a38 <lcd_print>
			  if(dilSecim==0) {
 8006950:	4b60      	ldr	r3, [pc, #384]	; (8006ad4 <mainLoop+0x2d4>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006958:	4a64      	ldr	r2, [pc, #400]	; (8006aec <mainLoop+0x2ec>)
 800695a:	2101      	movs	r1, #1
 800695c:	2002      	movs	r0, #2
 800695e:	f001 f86b 	bl	8007a38 <lcd_print>
 8006962:	e008      	b.n	8006976 <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006964:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <mainLoop+0x2d4>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d104      	bne.n	8006976 <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 800696c:	4a60      	ldr	r2, [pc, #384]	; (8006af0 <mainLoop+0x2f0>)
 800696e:	2101      	movs	r1, #1
 8006970:	2002      	movs	r0, #2
 8006972:	f001 f861 	bl	8007a38 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800697a:	f001 fdb3 	bl	80084e4 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800697e:	bf00      	nop
 8006980:	4852      	ldr	r0, [pc, #328]	; (8006acc <mainLoop+0x2cc>)
 8006982:	f003 f9a8 	bl	8009cd6 <HAL_I2C_GetError>
 8006986:	4603      	mov	r3, r0
 8006988:	2b04      	cmp	r3, #4
 800698a:	d0f9      	beq.n	8006980 <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800698c:	e003      	b.n	8006996 <mainLoop+0x196>
				  HAL_Delay(1000);
 800698e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006992:	f001 fda7 	bl	80084e4 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006996:	484d      	ldr	r0, [pc, #308]	; (8006acc <mainLoop+0x2cc>)
 8006998:	f003 f990 	bl	8009cbc <HAL_I2C_GetState>
 800699c:	4603      	mov	r3, r0
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d1f5      	bne.n	800698e <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 80069a2:	4b4c      	ldr	r3, [pc, #304]	; (8006ad4 <mainLoop+0x2d4>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 80069aa:	4a52      	ldr	r2, [pc, #328]	; (8006af4 <mainLoop+0x2f4>)
 80069ac:	2101      	movs	r1, #1
 80069ae:	2002      	movs	r0, #2
 80069b0:	f001 f842 	bl	8007a38 <lcd_print>
 80069b4:	e008      	b.n	80069c8 <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 80069b6:	4b47      	ldr	r3, [pc, #284]	; (8006ad4 <mainLoop+0x2d4>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d104      	bne.n	80069c8 <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 80069be:	4a4e      	ldr	r2, [pc, #312]	; (8006af8 <mainLoop+0x2f8>)
 80069c0:	2101      	movs	r1, #1
 80069c2:	2002      	movs	r0, #2
 80069c4:	f001 f838 	bl	8007a38 <lcd_print>
			  }

			  ilkOkuma=1;
 80069c8:	4b46      	ldr	r3, [pc, #280]	; (8006ae4 <mainLoop+0x2e4>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e014      	b.n	80069fa <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 80069d0:	4b40      	ldr	r3, [pc, #256]	; (8006ad4 <mainLoop+0x2d4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 80069d8:	4a48      	ldr	r2, [pc, #288]	; (8006afc <mainLoop+0x2fc>)
 80069da:	2101      	movs	r1, #1
 80069dc:	2002      	movs	r0, #2
 80069de:	f001 f82b 	bl	8007a38 <lcd_print>
 80069e2:	e008      	b.n	80069f6 <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 80069e4:	4b3b      	ldr	r3, [pc, #236]	; (8006ad4 <mainLoop+0x2d4>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d104      	bne.n	80069f6 <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 80069ec:	4a44      	ldr	r2, [pc, #272]	; (8006b00 <mainLoop+0x300>)
 80069ee:	2101      	movs	r1, #1
 80069f0:	2002      	movs	r0, #2
 80069f2:	f001 f821 	bl	8007a38 <lcd_print>
			  }
			  lcd_clear();
 80069f6:	f001 f84b 	bl	8007a90 <lcd_clear>
		  }

		  lcd_clear();
 80069fa:	f001 f849 	bl	8007a90 <lcd_clear>

		  eepromKontrol();
 80069fe:	f7f9 fc19 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006a02:	4b37      	ldr	r3, [pc, #220]	; (8006ae0 <mainLoop+0x2e0>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006a08:	4b3e      	ldr	r3, [pc, #248]	; (8006b04 <mainLoop+0x304>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d11c      	bne.n	8006a4a <mainLoop+0x24a>
 8006a10:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <mainLoop+0x308>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f083 0301 	eor.w	r3, r3, #1
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d015      	beq.n	8006a4a <mainLoop+0x24a>
 8006a1e:	4b3b      	ldr	r3, [pc, #236]	; (8006b0c <mainLoop+0x30c>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d111      	bne.n	8006a4a <mainLoop+0x24a>
			lcd_clear();
 8006a26:	f001 f833 	bl	8007a90 <lcd_clear>
			HAL_Delay(10);
 8006a2a:	200a      	movs	r0, #10
 8006a2c:	f001 fd5a 	bl	80084e4 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a30:	4a37      	ldr	r2, [pc, #220]	; (8006b10 <mainLoop+0x310>)
 8006a32:	2101      	movs	r1, #1
 8006a34:	2001      	movs	r0, #1
 8006a36:	f000 ffff 	bl	8007a38 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006a3a:	4a36      	ldr	r2, [pc, #216]	; (8006b14 <mainLoop+0x314>)
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	2002      	movs	r0, #2
 8006a40:	f000 fffa 	bl	8007a38 <lcd_print>
			mesajYazildi=1;
 8006a44:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <mainLoop+0x308>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <mainLoop+0x304>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d112      	bne.n	8006a78 <mainLoop+0x278>
 8006a52:	2102      	movs	r1, #2
 8006a54:	4817      	ldr	r0, [pc, #92]	; (8006ab4 <mainLoop+0x2b4>)
 8006a56:	f002 fb15 	bl	8009084 <HAL_GPIO_ReadPin>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10b      	bne.n	8006a78 <mainLoop+0x278>
 8006a60:	2104      	movs	r1, #4
 8006a62:	4814      	ldr	r0, [pc, #80]	; (8006ab4 <mainLoop+0x2b4>)
 8006a64:	f002 fb0e 	bl	8009084 <HAL_GPIO_ReadPin>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d104      	bne.n	8006a78 <mainLoop+0x278>
			menuGiris=1;
 8006a6e:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <mainLoop+0x304>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a74:	f001 f80c 	bl	8007a90 <lcd_clear>
		}

		if(menuGiris==1) {
 8006a78:	4b22      	ldr	r3, [pc, #136]	; (8006b04 <mainLoop+0x304>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <mainLoop+0x284>
			menu();
 8006a80:	f7fa fb02 	bl	8001088 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a88:	480b      	ldr	r0, [pc, #44]	; (8006ab8 <mainLoop+0x2b8>)
 8006a8a:	f002 fb2a 	bl	80090e2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a92:	4821      	ldr	r0, [pc, #132]	; (8006b18 <mainLoop+0x318>)
 8006a94:	f002 faf6 	bl	8009084 <HAL_GPIO_ReadPin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d142      	bne.n	8006b24 <mainLoop+0x324>
 8006a9e:	4b1f      	ldr	r3, [pc, #124]	; (8006b1c <mainLoop+0x31c>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	f083 0301 	eor.w	r3, r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d03b      	beq.n	8006b24 <mainLoop+0x324>
			stopVar=1;
 8006aac:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <mainLoop+0x320>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	e03a      	b.n	8006b2a <mainLoop+0x32a>
 8006ab4:	40010800 	.word	0x40010800
 8006ab8:	40011000 	.word	0x40011000
 8006abc:	2000021b 	.word	0x2000021b
 8006ac0:	200001c8 	.word	0x200001c8
 8006ac4:	200001e4 	.word	0x200001e4
 8006ac8:	20000218 	.word	0x20000218
 8006acc:	20000374 	.word	0x20000374
 8006ad0:	20000118 	.word	0x20000118
 8006ad4:	2000020d 	.word	0x2000020d
 8006ad8:	0800d8e8 	.word	0x0800d8e8
 8006adc:	0800d8fc 	.word	0x0800d8fc
 8006ae0:	20000219 	.word	0x20000219
 8006ae4:	2000021a 	.word	0x2000021a
 8006ae8:	0800d910 	.word	0x0800d910
 8006aec:	0800d924 	.word	0x0800d924
 8006af0:	0800d938 	.word	0x0800d938
 8006af4:	0800d94c 	.word	0x0800d94c
 8006af8:	0800d960 	.word	0x0800d960
 8006afc:	0800d974 	.word	0x0800d974
 8006b00:	0800d988 	.word	0x0800d988
 8006b04:	20000209 	.word	0x20000209
 8006b08:	20000220 	.word	0x20000220
 8006b0c:	2000020a 	.word	0x2000020a
 8006b10:	0800d99c 	.word	0x0800d99c
 8006b14:	0800d9b0 	.word	0x0800d9b0
 8006b18:	40010c00 	.word	0x40010c00
 8006b1c:	20000241 	.word	0x20000241
 8006b20:	2000023e 	.word	0x2000023e
		} else {
			stopVar=0;
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <mainLoop+0x340>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006b2a:	f7fd ffa7 	bl	8004a7c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006b2e:	f7fd ffd9 	bl	8004ae4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006b32:	f7fe f81d 	bl	8004b70 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006b36:	f7fe f86d 	bl	8004c14 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006b3a:	f7ff fbc7 	bl	80062cc <checkDemoModCalisma>
		checkLCDBacklight();
 8006b3e:	e662      	b.n	8006806 <mainLoop+0x6>
 8006b40:	2000023e 	.word	0x2000023e

08006b44 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	f000 ffd2 	bl	8007af4 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006b50:	220c      	movs	r2, #12
 8006b52:	2100      	movs	r1, #0
 8006b54:	48a4      	ldr	r0, [pc, #656]	; (8006de8 <takeMachineID+0x2a4>)
 8006b56:	f005 fbd9 	bl	800c30c <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006b5a:	2305      	movs	r3, #5
 8006b5c:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006b5e:	2303      	movs	r3, #3
 8006b60:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006b62:	2300      	movs	r3, #0
 8006b64:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006b66:	4ba1      	ldr	r3, [pc, #644]	; (8006dec <takeMachineID+0x2a8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	2001      	movs	r0, #1
 8006b70:	f7fa f90e 	bl	8000d90 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006b74:	2108      	movs	r1, #8
 8006b76:	489e      	ldr	r0, [pc, #632]	; (8006df0 <takeMachineID+0x2ac>)
 8006b78:	f002 fa84 	bl	8009084 <HAL_GPIO_ReadPin>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d12b      	bne.n	8006bda <takeMachineID+0x96>
        	lcd_cursor(0);
 8006b82:	2000      	movs	r0, #0
 8006b84:	f000 ffb6 	bl	8007af4 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006b88:	4897      	ldr	r0, [pc, #604]	; (8006de8 <takeMachineID+0x2a4>)
 8006b8a:	f7f9 fb4b 	bl	8000224 <strlen>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b0c      	cmp	r3, #12
 8006b92:	d010      	beq.n	8006bb6 <takeMachineID+0x72>
        		lcd_clear();
 8006b94:	f000 ff7c 	bl	8007a90 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006b98:	4a96      	ldr	r2, [pc, #600]	; (8006df4 <takeMachineID+0x2b0>)
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	f000 ff4b 	bl	8007a38 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006ba2:	4a95      	ldr	r2, [pc, #596]	; (8006df8 <takeMachineID+0x2b4>)
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	2002      	movs	r0, #2
 8006ba8:	f000 ff46 	bl	8007a38 <lcd_print>
        		HAL_Delay(1200);
 8006bac:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006bb0:	f001 fc98 	bl	80084e4 <HAL_Delay>
        		goto mainSection;
 8006bb4:	e7c9      	b.n	8006b4a <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006bb6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	236e      	movs	r3, #110	; 0x6e
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	4b8e      	ldr	r3, [pc, #568]	; (8006dfc <takeMachineID+0x2b8>)
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	236e      	movs	r3, #110	; 0x6e
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	21a0      	movs	r1, #160	; 0xa0
 8006bca:	488d      	ldr	r0, [pc, #564]	; (8006e00 <takeMachineID+0x2bc>)
 8006bcc:	f002 fd14 	bl	80095f8 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bd4:	f001 fc86 	bl	80084e4 <HAL_Delay>

            	break;
 8006bd8:	e133      	b.n	8006e42 <takeMachineID+0x2fe>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006bda:	2101      	movs	r1, #1
 8006bdc:	4884      	ldr	r0, [pc, #528]	; (8006df0 <takeMachineID+0x2ac>)
 8006bde:	f002 fa51 	bl	8009084 <HAL_GPIO_ReadPin>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d111      	bne.n	8006c0c <takeMachineID+0xc8>
        	if(cursorPosition == 7) {
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b07      	cmp	r3, #7
 8006bec:	d102      	bne.n	8006bf4 <takeMachineID+0xb0>
        		cursorPosition = 10;
 8006bee:	230a      	movs	r3, #10
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	e008      	b.n	8006c06 <takeMachineID+0xc2>
        	} else if (cursorPosition == 14) {
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b0e      	cmp	r3, #14
 8006bf8:	d102      	bne.n	8006c00 <takeMachineID+0xbc>
                cursorPosition = 3;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	e002      	b.n	8006c06 <takeMachineID+0xc2>
            } else {
            	cursorPosition++;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006c06:	2096      	movs	r0, #150	; 0x96
 8006c08:	f001 fc6c 	bl	80084e4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006c0c:	2108      	movs	r1, #8
 8006c0e:	487d      	ldr	r0, [pc, #500]	; (8006e04 <takeMachineID+0x2c0>)
 8006c10:	f002 fa38 	bl	8009084 <HAL_GPIO_ReadPin>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d111      	bne.n	8006c3e <takeMachineID+0xfa>
            if (cursorPosition == 3) {
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d102      	bne.n	8006c26 <takeMachineID+0xe2>
                cursorPosition = 14;
 8006c20:	230e      	movs	r3, #14
 8006c22:	60bb      	str	r3, [r7, #8]
 8006c24:	e008      	b.n	8006c38 <takeMachineID+0xf4>
            } else if(cursorPosition == 10) {
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b0a      	cmp	r3, #10
 8006c2a:	d102      	bne.n	8006c32 <takeMachineID+0xee>
            	cursorPosition = 7;
 8006c2c:	2307      	movs	r3, #7
 8006c2e:	60bb      	str	r3, [r7, #8]
 8006c30:	e002      	b.n	8006c38 <takeMachineID+0xf4>
            } else {
            	cursorPosition--;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006c38:	2096      	movs	r0, #150	; 0x96
 8006c3a:	f001 fc53 	bl	80084e4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006c3e:	2102      	movs	r1, #2
 8006c40:	486b      	ldr	r0, [pc, #428]	; (8006df0 <takeMachineID+0x2ac>)
 8006c42:	f002 fa1f 	bl	8009084 <HAL_GPIO_ReadPin>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f040 80a1 	bne.w	8006d90 <takeMachineID+0x24c>
        	if(cursorPosition == 3) {
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d10a      	bne.n	8006c6a <takeMachineID+0x126>
        		machineID[arrayPos] = '0';
 8006c54:	4a64      	ldr	r2, [pc, #400]	; (8006de8 <takeMachineID+0x2a4>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4413      	add	r3, r2
 8006c5a:	2230      	movs	r2, #48	; 0x30
 8006c5c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006c5e:	4a67      	ldr	r2, [pc, #412]	; (8006dfc <takeMachineID+0x2b8>)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	4413      	add	r3, r2
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e07c      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 4) {
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d10a      	bne.n	8006c86 <takeMachineID+0x142>
        		machineID[arrayPos] = '1';
 8006c70:	4a5d      	ldr	r2, [pc, #372]	; (8006de8 <takeMachineID+0x2a4>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	2231      	movs	r2, #49	; 0x31
 8006c78:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006c7a:	4a60      	ldr	r2, [pc, #384]	; (8006dfc <takeMachineID+0x2b8>)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	4413      	add	r3, r2
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e06e      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 5) {
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	d10a      	bne.n	8006ca2 <takeMachineID+0x15e>
        		machineID[arrayPos] = '2';
 8006c8c:	4a56      	ldr	r2, [pc, #344]	; (8006de8 <takeMachineID+0x2a4>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	2232      	movs	r2, #50	; 0x32
 8006c94:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006c96:	4a59      	ldr	r2, [pc, #356]	; (8006dfc <takeMachineID+0x2b8>)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e060      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 6) {
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b06      	cmp	r3, #6
 8006ca6:	d10a      	bne.n	8006cbe <takeMachineID+0x17a>
        		machineID[arrayPos] = '3';
 8006ca8:	4a4f      	ldr	r2, [pc, #316]	; (8006de8 <takeMachineID+0x2a4>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	2233      	movs	r2, #51	; 0x33
 8006cb0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006cb2:	4a52      	ldr	r2, [pc, #328]	; (8006dfc <takeMachineID+0x2b8>)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2203      	movs	r2, #3
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e052      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 7) {
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b07      	cmp	r3, #7
 8006cc2:	d10a      	bne.n	8006cda <takeMachineID+0x196>
        		machineID[arrayPos] = '4';
 8006cc4:	4a48      	ldr	r2, [pc, #288]	; (8006de8 <takeMachineID+0x2a4>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2234      	movs	r2, #52	; 0x34
 8006ccc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006cce:	4a4b      	ldr	r2, [pc, #300]	; (8006dfc <takeMachineID+0x2b8>)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e044      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 10) {
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b0a      	cmp	r3, #10
 8006cde:	d10a      	bne.n	8006cf6 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '5';
 8006ce0:	4a41      	ldr	r2, [pc, #260]	; (8006de8 <takeMachineID+0x2a4>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	2235      	movs	r2, #53	; 0x35
 8006ce8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006cea:	4a44      	ldr	r2, [pc, #272]	; (8006dfc <takeMachineID+0x2b8>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	4413      	add	r3, r2
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e036      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 11) {
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b0b      	cmp	r3, #11
 8006cfa:	d10a      	bne.n	8006d12 <takeMachineID+0x1ce>
        		machineID[arrayPos] = '6';
 8006cfc:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <takeMachineID+0x2a4>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	2236      	movs	r2, #54	; 0x36
 8006d04:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006d06:	4a3d      	ldr	r2, [pc, #244]	; (8006dfc <takeMachineID+0x2b8>)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	2206      	movs	r2, #6
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	e028      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 12) {
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b0c      	cmp	r3, #12
 8006d16:	d10a      	bne.n	8006d2e <takeMachineID+0x1ea>
        		machineID[arrayPos] = '7';
 8006d18:	4a33      	ldr	r2, [pc, #204]	; (8006de8 <takeMachineID+0x2a4>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	2237      	movs	r2, #55	; 0x37
 8006d20:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006d22:	4a36      	ldr	r2, [pc, #216]	; (8006dfc <takeMachineID+0x2b8>)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	4413      	add	r3, r2
 8006d28:	2207      	movs	r2, #7
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e01a      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 13) {
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b0d      	cmp	r3, #13
 8006d32:	d10a      	bne.n	8006d4a <takeMachineID+0x206>
        		machineID[arrayPos] = '8';
 8006d34:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <takeMachineID+0x2a4>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	2238      	movs	r2, #56	; 0x38
 8006d3c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006d3e:	4a2f      	ldr	r2, [pc, #188]	; (8006dfc <takeMachineID+0x2b8>)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	4413      	add	r3, r2
 8006d44:	2208      	movs	r2, #8
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e00c      	b.n	8006d64 <takeMachineID+0x220>
        	} else if(cursorPosition == 14) {
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b0e      	cmp	r3, #14
 8006d4e:	d109      	bne.n	8006d64 <takeMachineID+0x220>
        		machineID[arrayPos] = '9';
 8006d50:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <takeMachineID+0x2a4>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4413      	add	r3, r2
 8006d56:	2239      	movs	r2, #57	; 0x39
 8006d58:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006d5a:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <takeMachineID+0x2b8>)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	4413      	add	r3, r2
 8006d60:	2209      	movs	r2, #9
 8006d62:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	b2d9      	uxtb	r1, r3
 8006d68:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <takeMachineID+0x2a4>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	2001      	movs	r0, #1
 8006d74:	f000 fe75 	bl	8007a62 <lcd_print_char>

        	writeLoc++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3301      	adds	r3, #1
 8006d82:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006d8a:	2096      	movs	r0, #150	; 0x96
 8006d8c:	f001 fbaa 	bl	80084e4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006d90:	2104      	movs	r1, #4
 8006d92:	4817      	ldr	r0, [pc, #92]	; (8006df0 <takeMachineID+0x2ac>)
 8006d94:	f002 f976 	bl	8009084 <HAL_GPIO_ReadPin>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d14a      	bne.n	8006e34 <takeMachineID+0x2f0>
            if(strlen(machineID) >= 1) {
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <takeMachineID+0x2a4>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d043      	beq.n	8006e2e <takeMachineID+0x2ea>
                machineID[arrayPos] = '\0';
 8006da6:	4a10      	ldr	r2, [pc, #64]	; (8006de8 <takeMachineID+0x2a4>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4413      	add	r3, r2
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006db0:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <takeMachineID+0x2b8>)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	dd03      	ble.n	8006dc8 <takeMachineID+0x284>
                	writeLoc--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e004      	b.n	8006dd2 <takeMachineID+0x28e>
                } else if(writeLoc < 5) {
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	dc01      	bgt.n	8006dd2 <takeMachineID+0x28e>
                	writeLoc = 5;
 8006dce:	2305      	movs	r3, #5
 8006dd0:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dd17      	ble.n	8006e08 <takeMachineID+0x2c4>
                	arrayPos--;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	e018      	b.n	8006e18 <takeMachineID+0x2d4>
 8006de6:	bf00      	nop
 8006de8:	20000190 	.word	0x20000190
 8006dec:	20000004 	.word	0x20000004
 8006df0:	40010800 	.word	0x40010800
 8006df4:	0800d9c4 	.word	0x0800d9c4
 8006df8:	0800d9d8 	.word	0x0800d9d8
 8006dfc:	20000118 	.word	0x20000118
 8006e00:	20000374 	.word	0x20000374
 8006e04:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da04      	bge.n	8006e18 <takeMachineID+0x2d4>
                	arrayPos = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006e12:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <takeMachineID+0x308>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	2001      	movs	r0, #1
 8006e24:	f000 fe3e 	bl	8007aa4 <lcd_delete_char>
                HAL_Delay(50);
 8006e28:	2032      	movs	r0, #50	; 0x32
 8006e2a:	f001 fb5b 	bl	80084e4 <HAL_Delay>
            }

            HAL_Delay(150);
 8006e2e:	2096      	movs	r0, #150	; 0x96
 8006e30:	f001 fb58 	bl	80084e4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4619      	mov	r1, r3
 8006e3a:	2002      	movs	r0, #2
 8006e3c:	f000 fddd 	bl	80079fa <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e40:	e698      	b.n	8006b74 <takeMachineID+0x30>
    }
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000004 	.word	0x20000004

08006e50 <takeWifiSSID>:

void takeWifiSSID() {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8006e56:	2001      	movs	r0, #1
 8006e58:	f000 fe4c 	bl	8007af4 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8006e5c:	2214      	movs	r2, #20
 8006e5e:	2100      	movs	r1, #0
 8006e60:	489c      	ldr	r0, [pc, #624]	; (80070d4 <takeWifiSSID+0x284>)
 8006e62:	f005 fa53 	bl	800c30c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006e66:	2301      	movs	r3, #1
 8006e68:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006e6a:	2307      	movs	r3, #7
 8006e6c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006e6e:	2301      	movs	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006e76:	4b98      	ldr	r3, [pc, #608]	; (80070d8 <takeWifiSSID+0x288>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	2002      	movs	r0, #2
 8006e80:	f7f9 ff86 	bl	8000d90 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e84:	2108      	movs	r1, #8
 8006e86:	4895      	ldr	r0, [pc, #596]	; (80070dc <takeWifiSSID+0x28c>)
 8006e88:	f002 f8fc 	bl	8009084 <HAL_GPIO_ReadPin>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d12b      	bne.n	8006eea <takeWifiSSID+0x9a>
            lcd_cursor(0);
 8006e92:	2000      	movs	r0, #0
 8006e94:	f000 fe2e 	bl	8007af4 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006e98:	488e      	ldr	r0, [pc, #568]	; (80070d4 <takeWifiSSID+0x284>)
 8006e9a:	f7f9 f9c3 	bl	8000224 <strlen>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b14      	cmp	r3, #20
 8006ea2:	d910      	bls.n	8006ec6 <takeWifiSSID+0x76>
                lcd_clear();
 8006ea4:	f000 fdf4 	bl	8007a90 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006ea8:	4a8d      	ldr	r2, [pc, #564]	; (80070e0 <takeWifiSSID+0x290>)
 8006eaa:	2101      	movs	r1, #1
 8006eac:	2001      	movs	r0, #1
 8006eae:	f000 fdc3 	bl	8007a38 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006eb2:	4a8c      	ldr	r2, [pc, #560]	; (80070e4 <takeWifiSSID+0x294>)
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	f000 fdbe 	bl	8007a38 <lcd_print>
                HAL_Delay(1250);
 8006ebc:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006ec0:	f001 fb10 	bl	80084e4 <HAL_Delay>
                goto mainSSIDSection;
 8006ec4:	e7c7      	b.n	8006e56 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ec6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006eca:	9302      	str	r3, [sp, #8]
 8006ecc:	236e      	movs	r3, #110	; 0x6e
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	4b85      	ldr	r3, [pc, #532]	; (80070e8 <takeWifiSSID+0x298>)
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	236e      	movs	r3, #110	; 0x6e
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	21a0      	movs	r1, #160	; 0xa0
 8006eda:	4884      	ldr	r0, [pc, #528]	; (80070ec <takeWifiSSID+0x29c>)
 8006edc:	f002 fb8c 	bl	80095f8 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ee4:	f001 fafe 	bl	80084e4 <HAL_Delay>

            	break;
 8006ee8:	e123      	b.n	8007132 <takeWifiSSID+0x2e2>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006eea:	2101      	movs	r1, #1
 8006eec:	487b      	ldr	r0, [pc, #492]	; (80070dc <takeWifiSSID+0x28c>)
 8006eee:	f002 f8c9 	bl	8009084 <HAL_GPIO_ReadPin>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d14d      	bne.n	8006f94 <takeWifiSSID+0x144>
        	if(cursorPosition > 80) {
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b50      	cmp	r3, #80	; 0x50
 8006efc:	dd01      	ble.n	8006f02 <takeWifiSSID+0xb2>
        		cursorPosition = 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d13f      	bne.n	8006f88 <takeWifiSSID+0x138>
            	if(page == 1) {
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d109      	bne.n	8006f22 <takeWifiSSID+0xd2>
            		cursorPosition = 1;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	3301      	adds	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006f18:	2102      	movs	r1, #2
 8006f1a:	2002      	movs	r0, #2
 8006f1c:	f7f9 ff38 	bl	8000d90 <printTemplate>
 8006f20:	e035      	b.n	8006f8e <takeWifiSSID+0x13e>
            	} else if(page == 2) {
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d109      	bne.n	8006f3c <takeWifiSSID+0xec>
            		cursorPosition = 1;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006f32:	2103      	movs	r1, #3
 8006f34:	2002      	movs	r0, #2
 8006f36:	f7f9 ff2b 	bl	8000d90 <printTemplate>
 8006f3a:	e028      	b.n	8006f8e <takeWifiSSID+0x13e>
            	} else if(page == 3) {
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d109      	bne.n	8006f56 <takeWifiSSID+0x106>
            		cursorPosition = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006f4c:	2104      	movs	r1, #4
 8006f4e:	2002      	movs	r0, #2
 8006f50:	f7f9 ff1e 	bl	8000d90 <printTemplate>
 8006f54:	e01b      	b.n	8006f8e <takeWifiSSID+0x13e>
            	} else if(page == 4) {
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d109      	bne.n	8006f70 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	3301      	adds	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006f66:	2105      	movs	r1, #5
 8006f68:	2002      	movs	r0, #2
 8006f6a:	f7f9 ff11 	bl	8000d90 <printTemplate>
 8006f6e:	e00e      	b.n	8006f8e <takeWifiSSID+0x13e>
            	} else if(page == 5) {
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	d10b      	bne.n	8006f8e <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 8006f76:	2301      	movs	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f7e:	2101      	movs	r1, #1
 8006f80:	2002      	movs	r0, #2
 8006f82:	f7f9 ff05 	bl	8000d90 <printTemplate>
 8006f86:	e002      	b.n	8006f8e <takeWifiSSID+0x13e>
            	}
            } else {
            	cursorPosition++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006f8e:	2096      	movs	r0, #150	; 0x96
 8006f90:	f001 faa8 	bl	80084e4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f94:	2108      	movs	r1, #8
 8006f96:	4856      	ldr	r0, [pc, #344]	; (80070f0 <takeWifiSSID+0x2a0>)
 8006f98:	f002 f874 	bl	8009084 <HAL_GPIO_ReadPin>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d149      	bne.n	8007036 <takeWifiSSID+0x1e6>
        	if(cursorPosition < 1) {
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc01      	bgt.n	8006fac <takeWifiSSID+0x15c>
        		cursorPosition = 80;
 8006fa8:	2350      	movs	r3, #80	; 0x50
 8006faa:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d13b      	bne.n	800702a <takeWifiSSID+0x1da>
            	if(page == 1) {
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d108      	bne.n	8006fca <takeWifiSSID+0x17a>
            		cursorPosition = 16;
 8006fb8:	2310      	movs	r3, #16
 8006fba:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8006fbc:	2305      	movs	r3, #5
 8006fbe:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006fc0:	2105      	movs	r1, #5
 8006fc2:	2002      	movs	r0, #2
 8006fc4:	f7f9 fee4 	bl	8000d90 <printTemplate>
 8006fc8:	e032      	b.n	8007030 <takeWifiSSID+0x1e0>
            	} else if(page == 2) {
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d108      	bne.n	8006fe2 <takeWifiSSID+0x192>
            		cursorPosition = 16;
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006fd8:	2101      	movs	r1, #1
 8006fda:	2002      	movs	r0, #2
 8006fdc:	f7f9 fed8 	bl	8000d90 <printTemplate>
 8006fe0:	e026      	b.n	8007030 <takeWifiSSID+0x1e0>
            	} else if(page == 3) {
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d108      	bne.n	8006ffa <takeWifiSSID+0x1aa>
            		cursorPosition = 16;
 8006fe8:	2310      	movs	r3, #16
 8006fea:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8006fec:	2302      	movs	r3, #2
 8006fee:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	2002      	movs	r0, #2
 8006ff4:	f7f9 fecc 	bl	8000d90 <printTemplate>
 8006ff8:	e01a      	b.n	8007030 <takeWifiSSID+0x1e0>
            	} else if(page == 4) {
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d108      	bne.n	8007012 <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8007000:	2310      	movs	r3, #16
 8007002:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007004:	2303      	movs	r3, #3
 8007006:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007008:	2103      	movs	r1, #3
 800700a:	2002      	movs	r0, #2
 800700c:	f7f9 fec0 	bl	8000d90 <printTemplate>
 8007010:	e00e      	b.n	8007030 <takeWifiSSID+0x1e0>
            	} else if(page == 5) {
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b05      	cmp	r3, #5
 8007016:	d10b      	bne.n	8007030 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8007018:	2310      	movs	r3, #16
 800701a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800701c:	2304      	movs	r3, #4
 800701e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007020:	2104      	movs	r1, #4
 8007022:	2002      	movs	r0, #2
 8007024:	f7f9 feb4 	bl	8000d90 <printTemplate>
 8007028:	e002      	b.n	8007030 <takeWifiSSID+0x1e0>
            	}
            } else {
            	cursorPosition--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3b01      	subs	r3, #1
 800702e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007030:	2096      	movs	r0, #150	; 0x96
 8007032:	f001 fa57 	bl	80084e4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007036:	2102      	movs	r1, #2
 8007038:	4828      	ldr	r0, [pc, #160]	; (80070dc <takeWifiSSID+0x28c>)
 800703a:	f002 f823 	bl	8009084 <HAL_GPIO_ReadPin>
 800703e:	4603      	mov	r3, r0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d121      	bne.n	8007088 <takeWifiSSID+0x238>
            eepromData[eepromVal] = cursorPosition;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	b2d9      	uxtb	r1, r3
 8007048:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <takeWifiSSID+0x298>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	460a      	mov	r2, r1
 8007050:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	b2d9      	uxtb	r1, r3
 8007056:	4a27      	ldr	r2, [pc, #156]	; (80070f4 <takeWifiSSID+0x2a4>)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	2001      	movs	r0, #1
 8007062:	f000 fcfe 	bl	8007a62 <lcd_print_char>

            writeLoc++;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3301      	adds	r3, #1
 800706a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3301      	adds	r3, #1
 8007070:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3301      	adds	r3, #1
 8007076:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007078:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <takeWifiSSID+0x298>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007082:	2096      	movs	r0, #150	; 0x96
 8007084:	f001 fa2e 	bl	80084e4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007088:	2104      	movs	r1, #4
 800708a:	4814      	ldr	r0, [pc, #80]	; (80070dc <takeWifiSSID+0x28c>)
 800708c:	f001 fffa 	bl	8009084 <HAL_GPIO_ReadPin>
 8007090:	4603      	mov	r3, r0
 8007092:	2b01      	cmp	r3, #1
 8007094:	d146      	bne.n	8007124 <takeWifiSSID+0x2d4>
        	if(strlen(wifiSSID) >= 1) {
 8007096:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <takeWifiSSID+0x284>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d03f      	beq.n	800711e <takeWifiSSID+0x2ce>
        		eepromData[eepromVal] = '\0';
 800709e:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <takeWifiSSID+0x298>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	dd03      	ble.n	80070b6 <takeWifiSSID+0x266>
        			writeLoc--;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	e004      	b.n	80070c0 <takeWifiSSID+0x270>
        		} else if(writeLoc < 7) {
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b06      	cmp	r3, #6
 80070ba:	dc01      	bgt.n	80070c0 <takeWifiSSID+0x270>
        			writeLoc = 7;
 80070bc:	2307      	movs	r3, #7
 80070be:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dd18      	ble.n	80070f8 <takeWifiSSID+0x2a8>
        			arrayPosition--;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	e019      	b.n	8007108 <takeWifiSSID+0x2b8>
 80070d4:	2000019c 	.word	0x2000019c
 80070d8:	20000008 	.word	0x20000008
 80070dc:	40010800 	.word	0x40010800
 80070e0:	0800d9ec 	.word	0x0800d9ec
 80070e4:	0800da00 	.word	0x0800da00
 80070e8:	20000118 	.word	0x20000118
 80070ec:	20000374 	.word	0x20000374
 80070f0:	40011000 	.word	0x40011000
 80070f4:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	da04      	bge.n	8007108 <takeWifiSSID+0x2b8>
        			arrayPosition = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007102:	4b0e      	ldr	r3, [pc, #56]	; (800713c <takeWifiSSID+0x2ec>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	3306      	adds	r3, #6
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	2001      	movs	r0, #1
 8007114:	f000 fcc6 	bl	8007aa4 <lcd_delete_char>
        		HAL_Delay(50);
 8007118:	2032      	movs	r0, #50	; 0x32
 800711a:	f001 f9e3 	bl	80084e4 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800711e:	2096      	movs	r0, #150	; 0x96
 8007120:	f001 f9e0 	bl	80084e4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	2002      	movs	r0, #2
 800712c:	f000 fc65 	bl	80079fa <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007130:	e6a8      	b.n	8006e84 <takeWifiSSID+0x34>
    }
}
 8007132:	bf00      	nop
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000008 	.word	0x20000008

08007140 <takeWifiPass>:

void takeWifiPass() {
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007146:	2001      	movs	r0, #1
 8007148:	f000 fcd4 	bl	8007af4 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800714c:	2214      	movs	r2, #20
 800714e:	2100      	movs	r1, #0
 8007150:	489c      	ldr	r0, [pc, #624]	; (80073c4 <takeWifiPass+0x284>)
 8007152:	f005 f8db 	bl	800c30c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007156:	2301      	movs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800715a:	2307      	movs	r3, #7
 800715c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007162:	2300      	movs	r3, #0
 8007164:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007166:	4b98      	ldr	r3, [pc, #608]	; (80073c8 <takeWifiPass+0x288>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800716c:	2101      	movs	r1, #1
 800716e:	2003      	movs	r0, #3
 8007170:	f7f9 fe0e 	bl	8000d90 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007174:	2108      	movs	r1, #8
 8007176:	4895      	ldr	r0, [pc, #596]	; (80073cc <takeWifiPass+0x28c>)
 8007178:	f001 ff84 	bl	8009084 <HAL_GPIO_ReadPin>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d12b      	bne.n	80071da <takeWifiPass+0x9a>
            lcd_cursor(0);
 8007182:	2000      	movs	r0, #0
 8007184:	f000 fcb6 	bl	8007af4 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007188:	4891      	ldr	r0, [pc, #580]	; (80073d0 <takeWifiPass+0x290>)
 800718a:	f7f9 f84b 	bl	8000224 <strlen>
 800718e:	4603      	mov	r3, r0
 8007190:	2b14      	cmp	r3, #20
 8007192:	d910      	bls.n	80071b6 <takeWifiPass+0x76>
                lcd_clear();
 8007194:	f000 fc7c 	bl	8007a90 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007198:	4a8e      	ldr	r2, [pc, #568]	; (80073d4 <takeWifiPass+0x294>)
 800719a:	2101      	movs	r1, #1
 800719c:	2001      	movs	r0, #1
 800719e:	f000 fc4b 	bl	8007a38 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80071a2:	4a8d      	ldr	r2, [pc, #564]	; (80073d8 <takeWifiPass+0x298>)
 80071a4:	2101      	movs	r1, #1
 80071a6:	2002      	movs	r0, #2
 80071a8:	f000 fc46 	bl	8007a38 <lcd_print>
                HAL_Delay(1250);
 80071ac:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80071b0:	f001 f998 	bl	80084e4 <HAL_Delay>
                goto mainPassSection;
 80071b4:	e7c7      	b.n	8007146 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	236e      	movs	r3, #110	; 0x6e
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	4b86      	ldr	r3, [pc, #536]	; (80073dc <takeWifiPass+0x29c>)
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	236e      	movs	r3, #110	; 0x6e
 80071c6:	2200      	movs	r2, #0
 80071c8:	21a0      	movs	r1, #160	; 0xa0
 80071ca:	4885      	ldr	r0, [pc, #532]	; (80073e0 <takeWifiPass+0x2a0>)
 80071cc:	f002 fa14 	bl	80095f8 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80071d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071d4:	f001 f986 	bl	80084e4 <HAL_Delay>

            	break;
 80071d8:	e125      	b.n	8007426 <takeWifiPass+0x2e6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071da:	2101      	movs	r1, #1
 80071dc:	487b      	ldr	r0, [pc, #492]	; (80073cc <takeWifiPass+0x28c>)
 80071de:	f001 ff51 	bl	8009084 <HAL_GPIO_ReadPin>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d14d      	bne.n	8007284 <takeWifiPass+0x144>
        	if(cursorPosition > 80) {
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b50      	cmp	r3, #80	; 0x50
 80071ec:	dd01      	ble.n	80071f2 <takeWifiPass+0xb2>
        		cursorPosition = 1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d13f      	bne.n	8007278 <takeWifiPass+0x138>
            	if(page == 1) {
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d109      	bne.n	8007212 <takeWifiPass+0xd2>
            		cursorPosition = 1;
 80071fe:	2301      	movs	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
            		page++;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	3301      	adds	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007208:	2102      	movs	r1, #2
 800720a:	2003      	movs	r0, #3
 800720c:	f7f9 fdc0 	bl	8000d90 <printTemplate>
 8007210:	e035      	b.n	800727e <takeWifiPass+0x13e>
            	} else if(page == 2) {
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d109      	bne.n	800722c <takeWifiPass+0xec>
            		cursorPosition = 1;
 8007218:	2301      	movs	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
            		page++;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3301      	adds	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007222:	2103      	movs	r1, #3
 8007224:	2003      	movs	r0, #3
 8007226:	f7f9 fdb3 	bl	8000d90 <printTemplate>
 800722a:	e028      	b.n	800727e <takeWifiPass+0x13e>
            	} else if(page == 3) {
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b03      	cmp	r3, #3
 8007230:	d109      	bne.n	8007246 <takeWifiPass+0x106>
            		cursorPosition = 1;
 8007232:	2301      	movs	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
            		page++;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	3301      	adds	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800723c:	2104      	movs	r1, #4
 800723e:	2003      	movs	r0, #3
 8007240:	f7f9 fda6 	bl	8000d90 <printTemplate>
 8007244:	e01b      	b.n	800727e <takeWifiPass+0x13e>
            	} else if(page == 4) {
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b04      	cmp	r3, #4
 800724a:	d109      	bne.n	8007260 <takeWifiPass+0x120>
            		cursorPosition = 1;
 800724c:	2301      	movs	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3301      	adds	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007256:	2105      	movs	r1, #5
 8007258:	2003      	movs	r0, #3
 800725a:	f7f9 fd99 	bl	8000d90 <printTemplate>
 800725e:	e00e      	b.n	800727e <takeWifiPass+0x13e>
            	} else if(page == 5) {
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b05      	cmp	r3, #5
 8007264:	d10b      	bne.n	800727e <takeWifiPass+0x13e>
            		cursorPosition = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800726a:	2301      	movs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800726e:	2101      	movs	r1, #1
 8007270:	2003      	movs	r0, #3
 8007272:	f7f9 fd8d 	bl	8000d90 <printTemplate>
 8007276:	e002      	b.n	800727e <takeWifiPass+0x13e>
            	}
            } else {
            	cursorPosition++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800727e:	2096      	movs	r0, #150	; 0x96
 8007280:	f001 f930 	bl	80084e4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007284:	2108      	movs	r1, #8
 8007286:	4857      	ldr	r0, [pc, #348]	; (80073e4 <takeWifiPass+0x2a4>)
 8007288:	f001 fefc 	bl	8009084 <HAL_GPIO_ReadPin>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d149      	bne.n	8007326 <takeWifiPass+0x1e6>
        	if(cursorPosition < 1) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc01      	bgt.n	800729c <takeWifiPass+0x15c>
        		cursorPosition = 80;
 8007298:	2350      	movs	r3, #80	; 0x50
 800729a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d13b      	bne.n	800731a <takeWifiPass+0x1da>
            	if(page == 1) {
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d108      	bne.n	80072ba <takeWifiPass+0x17a>
            		cursorPosition = 16;
 80072a8:	2310      	movs	r3, #16
 80072aa:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80072ac:	2305      	movs	r3, #5
 80072ae:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80072b0:	2105      	movs	r1, #5
 80072b2:	2003      	movs	r0, #3
 80072b4:	f7f9 fd6c 	bl	8000d90 <printTemplate>
 80072b8:	e032      	b.n	8007320 <takeWifiPass+0x1e0>
            	} else if(page == 2) {
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d108      	bne.n	80072d2 <takeWifiPass+0x192>
            		cursorPosition = 16;
 80072c0:	2310      	movs	r3, #16
 80072c2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072c4:	2301      	movs	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80072c8:	2101      	movs	r1, #1
 80072ca:	2003      	movs	r0, #3
 80072cc:	f7f9 fd60 	bl	8000d90 <printTemplate>
 80072d0:	e026      	b.n	8007320 <takeWifiPass+0x1e0>
            	} else if(page == 3) {
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d108      	bne.n	80072ea <takeWifiPass+0x1aa>
            		cursorPosition = 16;
 80072d8:	2310      	movs	r3, #16
 80072da:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80072dc:	2302      	movs	r3, #2
 80072de:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80072e0:	2102      	movs	r1, #2
 80072e2:	2003      	movs	r0, #3
 80072e4:	f7f9 fd54 	bl	8000d90 <printTemplate>
 80072e8:	e01a      	b.n	8007320 <takeWifiPass+0x1e0>
            	} else if(page == 4) {
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d108      	bne.n	8007302 <takeWifiPass+0x1c2>
            		cursorPosition = 16;
 80072f0:	2310      	movs	r3, #16
 80072f2:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80072f4:	2303      	movs	r3, #3
 80072f6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80072f8:	2103      	movs	r1, #3
 80072fa:	2003      	movs	r0, #3
 80072fc:	f7f9 fd48 	bl	8000d90 <printTemplate>
 8007300:	e00e      	b.n	8007320 <takeWifiPass+0x1e0>
            	} else if(page == 5) {
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b05      	cmp	r3, #5
 8007306:	d10b      	bne.n	8007320 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 8007308:	2310      	movs	r3, #16
 800730a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800730c:	2304      	movs	r3, #4
 800730e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007310:	2104      	movs	r1, #4
 8007312:	2003      	movs	r0, #3
 8007314:	f7f9 fd3c 	bl	8000d90 <printTemplate>
 8007318:	e002      	b.n	8007320 <takeWifiPass+0x1e0>
            	}
            } else {
            	cursorPosition--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b01      	subs	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007320:	2096      	movs	r0, #150	; 0x96
 8007322:	f001 f8df 	bl	80084e4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007326:	2102      	movs	r1, #2
 8007328:	4828      	ldr	r0, [pc, #160]	; (80073cc <takeWifiPass+0x28c>)
 800732a:	f001 feab 	bl	8009084 <HAL_GPIO_ReadPin>
 800732e:	4603      	mov	r3, r0
 8007330:	2b01      	cmp	r3, #1
 8007332:	d121      	bne.n	8007378 <takeWifiPass+0x238>
            eepromData[eepromVal] = cursorPosition;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	b2d9      	uxtb	r1, r3
 8007338:	4a28      	ldr	r2, [pc, #160]	; (80073dc <takeWifiPass+0x29c>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	460a      	mov	r2, r1
 8007340:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	b2d9      	uxtb	r1, r3
 8007346:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <takeWifiPass+0x2a8>)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	2001      	movs	r0, #1
 8007352:	f000 fb86 	bl	8007a62 <lcd_print_char>

            writeLoc++;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	3301      	adds	r3, #1
 800735a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3301      	adds	r3, #1
 8007360:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3301      	adds	r3, #1
 8007366:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <takeWifiPass+0x29c>)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007372:	2096      	movs	r0, #150	; 0x96
 8007374:	f001 f8b6 	bl	80084e4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007378:	2104      	movs	r1, #4
 800737a:	4814      	ldr	r0, [pc, #80]	; (80073cc <takeWifiPass+0x28c>)
 800737c:	f001 fe82 	bl	8009084 <HAL_GPIO_ReadPin>
 8007380:	4603      	mov	r3, r0
 8007382:	2b01      	cmp	r3, #1
 8007384:	d148      	bne.n	8007418 <takeWifiPass+0x2d8>
        	if(strlen(wifiSSID) >= 1) {
 8007386:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <takeWifiPass+0x290>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d041      	beq.n	8007412 <takeWifiPass+0x2d2>
        		eepromData[eepromVal] = '\0';
 800738e:	4a13      	ldr	r2, [pc, #76]	; (80073dc <takeWifiPass+0x29c>)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4413      	add	r3, r2
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b07      	cmp	r3, #7
 800739c:	dd03      	ble.n	80073a6 <takeWifiPass+0x266>
        			writeLoc--;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	e004      	b.n	80073b0 <takeWifiPass+0x270>
        		} else if(writeLoc < 7) {
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b06      	cmp	r3, #6
 80073aa:	dc01      	bgt.n	80073b0 <takeWifiPass+0x270>
        			writeLoc = 7;
 80073ac:	2307      	movs	r3, #7
 80073ae:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dd1a      	ble.n	80073ec <takeWifiPass+0x2ac>
        			arrayPosition--;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3b01      	subs	r3, #1
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	e01b      	b.n	80073fc <takeWifiPass+0x2bc>
 80073c4:	200001b0 	.word	0x200001b0
 80073c8:	2000000c 	.word	0x2000000c
 80073cc:	40010800 	.word	0x40010800
 80073d0:	2000019c 	.word	0x2000019c
 80073d4:	0800d9ec 	.word	0x0800d9ec
 80073d8:	0800da00 	.word	0x0800da00
 80073dc:	20000118 	.word	0x20000118
 80073e0:	20000374 	.word	0x20000374
 80073e4:	40011000 	.word	0x40011000
 80073e8:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da04      	bge.n	80073fc <takeWifiPass+0x2bc>
        			arrayPosition = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80073f6:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <takeWifiPass+0x2f0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	3306      	adds	r3, #6
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	2001      	movs	r0, #1
 8007408:	f000 fb4c 	bl	8007aa4 <lcd_delete_char>
        		HAL_Delay(50);
 800740c:	2032      	movs	r0, #50	; 0x32
 800740e:	f001 f869 	bl	80084e4 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007412:	2096      	movs	r0, #150	; 0x96
 8007414:	f001 f866 	bl	80084e4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	2002      	movs	r0, #2
 8007420:	f000 faeb 	bl	80079fa <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007424:	e6a6      	b.n	8007174 <takeWifiPass+0x34>
    }
}
 8007426:	bf00      	nop
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	2000000c 	.word	0x2000000c

08007434 <mergeData>:

char* mergeData() {
 8007434:	b580      	push	{r7, lr}
 8007436:	b09c      	sub	sp, #112	; 0x70
 8007438:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800743a:	2300      	movs	r3, #0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007442:	2228      	movs	r2, #40	; 0x28
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f004 ff60 	bl	800c30c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800744c:	4b67      	ldr	r3, [pc, #412]	; (80075ec <mergeData+0x1b8>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	713b      	strb	r3, [r7, #4]
 8007452:	4b67      	ldr	r3, [pc, #412]	; (80075f0 <mergeData+0x1bc>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	717b      	strb	r3, [r7, #5]
 8007458:	4b66      	ldr	r3, [pc, #408]	; (80075f4 <mergeData+0x1c0>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	71bb      	strb	r3, [r7, #6]
 800745e:	4b66      	ldr	r3, [pc, #408]	; (80075f8 <mergeData+0x1c4>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
 8007464:	4b65      	ldr	r3, [pc, #404]	; (80075fc <mergeData+0x1c8>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	723b      	strb	r3, [r7, #8]
 800746a:	4b65      	ldr	r3, [pc, #404]	; (8007600 <mergeData+0x1cc>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	727b      	strb	r3, [r7, #9]
 8007470:	4b64      	ldr	r3, [pc, #400]	; (8007604 <mergeData+0x1d0>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	72bb      	strb	r3, [r7, #10]
 8007476:	4b64      	ldr	r3, [pc, #400]	; (8007608 <mergeData+0x1d4>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	72fb      	strb	r3, [r7, #11]
 800747c:	4b63      	ldr	r3, [pc, #396]	; (800760c <mergeData+0x1d8>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	733b      	strb	r3, [r7, #12]
 8007482:	4b63      	ldr	r3, [pc, #396]	; (8007610 <mergeData+0x1dc>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	737b      	strb	r3, [r7, #13]
 8007488:	4b62      	ldr	r3, [pc, #392]	; (8007614 <mergeData+0x1e0>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	73bb      	strb	r3, [r7, #14]
 800748e:	4b62      	ldr	r3, [pc, #392]	; (8007618 <mergeData+0x1e4>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	4b61      	ldr	r3, [pc, #388]	; (800761c <mergeData+0x1e8>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	743b      	strb	r3, [r7, #16]
 800749a:	4b61      	ldr	r3, [pc, #388]	; (8007620 <mergeData+0x1ec>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	747b      	strb	r3, [r7, #17]
 80074a0:	4b60      	ldr	r3, [pc, #384]	; (8007624 <mergeData+0x1f0>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	74bb      	strb	r3, [r7, #18]
 80074a6:	4b60      	ldr	r3, [pc, #384]	; (8007628 <mergeData+0x1f4>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	74fb      	strb	r3, [r7, #19]
 80074ac:	4b5f      	ldr	r3, [pc, #380]	; (800762c <mergeData+0x1f8>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	753b      	strb	r3, [r7, #20]
 80074b2:	4b5f      	ldr	r3, [pc, #380]	; (8007630 <mergeData+0x1fc>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	757b      	strb	r3, [r7, #21]
 80074b8:	4b5e      	ldr	r3, [pc, #376]	; (8007634 <mergeData+0x200>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	75bb      	strb	r3, [r7, #22]
 80074be:	4b5e      	ldr	r3, [pc, #376]	; (8007638 <mergeData+0x204>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	75fb      	strb	r3, [r7, #23]
 80074c4:	4b5d      	ldr	r3, [pc, #372]	; (800763c <mergeData+0x208>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	763b      	strb	r3, [r7, #24]
 80074ca:	4b5d      	ldr	r3, [pc, #372]	; (8007640 <mergeData+0x20c>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	767b      	strb	r3, [r7, #25]
 80074d0:	4b5c      	ldr	r3, [pc, #368]	; (8007644 <mergeData+0x210>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	76bb      	strb	r3, [r7, #26]
 80074d6:	4b5c      	ldr	r3, [pc, #368]	; (8007648 <mergeData+0x214>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	76fb      	strb	r3, [r7, #27]
 80074dc:	4b5b      	ldr	r3, [pc, #364]	; (800764c <mergeData+0x218>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	773b      	strb	r3, [r7, #28]
 80074e2:	4b5b      	ldr	r3, [pc, #364]	; (8007650 <mergeData+0x21c>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	777b      	strb	r3, [r7, #29]
 80074e8:	4b5a      	ldr	r3, [pc, #360]	; (8007654 <mergeData+0x220>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	77bb      	strb	r3, [r7, #30]
 80074ee:	4b5a      	ldr	r3, [pc, #360]	; (8007658 <mergeData+0x224>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	4b59      	ldr	r3, [pc, #356]	; (800765c <mergeData+0x228>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f887 3020 	strb.w	r3, [r7, #32]
 80074fc:	4b58      	ldr	r3, [pc, #352]	; (8007660 <mergeData+0x22c>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007504:	4b57      	ldr	r3, [pc, #348]	; (8007664 <mergeData+0x230>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800750c:	4b56      	ldr	r3, [pc, #344]	; (8007668 <mergeData+0x234>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007514:	4b55      	ldr	r3, [pc, #340]	; (800766c <mergeData+0x238>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800751c:	4b54      	ldr	r3, [pc, #336]	; (8007670 <mergeData+0x23c>)
 800751e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007526:	4b52      	ldr	r3, [pc, #328]	; (8007670 <mergeData+0x23c>)
 8007528:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800752c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007530:	4b4f      	ldr	r3, [pc, #316]	; (8007670 <mergeData+0x23c>)
 8007532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800753a:	4b4d      	ldr	r3, [pc, #308]	; (8007670 <mergeData+0x23c>)
 800753c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007540:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007544:	4b4a      	ldr	r3, [pc, #296]	; (8007670 <mergeData+0x23c>)
 8007546:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800754a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800754e:	4b48      	ldr	r3, [pc, #288]	; (8007670 <mergeData+0x23c>)
 8007550:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007558:	4b45      	ldr	r3, [pc, #276]	; (8007670 <mergeData+0x23c>)
 800755a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007562:	4b43      	ldr	r3, [pc, #268]	; (8007670 <mergeData+0x23c>)
 8007564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007568:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800756c:	4b40      	ldr	r3, [pc, #256]	; (8007670 <mergeData+0x23c>)
 800756e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007572:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007576:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <mergeData+0x23c>)
 8007578:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800757c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007580:	2306      	movs	r3, #6
 8007582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007586:	2300      	movs	r3, #0
 8007588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800758a:	e015      	b.n	80075b8 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800758c:	1d3a      	adds	r2, r7, #4
 800758e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007590:	4413      	add	r3, r2
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800759a:	4936      	ldr	r1, [pc, #216]	; (8007674 <mergeData+0x240>)
 800759c:	4618      	mov	r0, r3
 800759e:	f004 fe95 	bl	800c2cc <siprintf>
	    strcat(combinedString, temp);
 80075a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f004 feb5 	bl	800c31c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b4:	3301      	adds	r3, #1
 80075b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	2b2b      	cmp	r3, #43	; 0x2b
 80075bc:	d9e6      	bls.n	800758c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80075be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7f8 fe2e 	bl	8000224 <strlen>
 80075c8:	4603      	mov	r3, r0
 80075ca:	3301      	adds	r3, #1
 80075cc:	4618      	mov	r0, r3
 80075ce:	f004 fd87 	bl	800c0e0 <malloc>
 80075d2:	4603      	mov	r3, r0
 80075d4:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80075d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075da:	4619      	mov	r1, r3
 80075dc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80075de:	f004 fee9 	bl	800c3b4 <strcpy>
	return result;
 80075e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3770      	adds	r7, #112	; 0x70
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	200001fb 	.word	0x200001fb
 80075f0:	200001ed 	.word	0x200001ed
 80075f4:	200001f0 	.word	0x200001f0
 80075f8:	200001f1 	.word	0x200001f1
 80075fc:	200001f2 	.word	0x200001f2
 8007600:	200001f9 	.word	0x200001f9
 8007604:	200001f3 	.word	0x200001f3
 8007608:	200001f4 	.word	0x200001f4
 800760c:	200001f8 	.word	0x200001f8
 8007610:	200001f5 	.word	0x200001f5
 8007614:	20000205 	.word	0x20000205
 8007618:	200001f6 	.word	0x200001f6
 800761c:	20000206 	.word	0x20000206
 8007620:	200001f7 	.word	0x200001f7
 8007624:	20000207 	.word	0x20000207
 8007628:	200001fa 	.word	0x200001fa
 800762c:	200001fc 	.word	0x200001fc
 8007630:	200001fd 	.word	0x200001fd
 8007634:	200001fe 	.word	0x200001fe
 8007638:	200001ff 	.word	0x200001ff
 800763c:	20000200 	.word	0x20000200
 8007640:	20000201 	.word	0x20000201
 8007644:	20000202 	.word	0x20000202
 8007648:	20000203 	.word	0x20000203
 800764c:	20000204 	.word	0x20000204
 8007650:	20000208 	.word	0x20000208
 8007654:	2000020a 	.word	0x2000020a
 8007658:	200001e9 	.word	0x200001e9
 800765c:	200001ea 	.word	0x200001ea
 8007660:	20000000 	.word	0x20000000
 8007664:	20000001 	.word	0x20000001
 8007668:	200001eb 	.word	0x200001eb
 800766c:	2000020d 	.word	0x2000020d
 8007670:	20000118 	.word	0x20000118
 8007674:	0800da14 	.word	0x0800da14

08007678 <convertAndSendData>:

void convertAndSendData() {
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 800767e:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <convertAndSendData+0x60>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007686:	4a15      	ldr	r2, [pc, #84]	; (80076dc <convertAndSendData+0x64>)
 8007688:	2101      	movs	r1, #1
 800768a:	2001      	movs	r0, #1
 800768c:	f000 f9d4 	bl	8007a38 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <convertAndSendData+0x68>)
 8007692:	2101      	movs	r1, #1
 8007694:	2002      	movs	r0, #2
 8007696:	f000 f9cf 	bl	8007a38 <lcd_print>
 800769a:	e009      	b.n	80076b0 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800769c:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <convertAndSendData+0x6c>)
 800769e:	2101      	movs	r1, #1
 80076a0:	2001      	movs	r0, #1
 80076a2:	f000 f9c9 	bl	8007a38 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <convertAndSendData+0x70>)
 80076a8:	2101      	movs	r1, #1
 80076aa:	2002      	movs	r0, #2
 80076ac:	f000 f9c4 	bl	8007a38 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80076b0:	f7ff fec0 	bl	8007434 <mergeData>
 80076b4:	4603      	mov	r3, r0
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <convertAndSendData+0x74>)
 80076ba:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <convertAndSendData+0x78>)
 80076bc:	490d      	ldr	r1, [pc, #52]	; (80076f4 <convertAndSendData+0x7c>)
 80076be:	480e      	ldr	r0, [pc, #56]	; (80076f8 <convertAndSendData+0x80>)
 80076c0:	f7f9 f8ca 	bl	8000858 <sendMachineData>

	HAL_Delay(500);
 80076c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076c8:	f000 ff0c 	bl	80084e4 <HAL_Delay>
	lcd_clear();
 80076cc:	f000 f9e0 	bl	8007a90 <lcd_clear>
}
 80076d0:	bf00      	nop
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	2000020d 	.word	0x2000020d
 80076dc:	0800da18 	.word	0x0800da18
 80076e0:	0800da2c 	.word	0x0800da2c
 80076e4:	0800da40 	.word	0x0800da40
 80076e8:	0800da54 	.word	0x0800da54
 80076ec:	200001b0 	.word	0x200001b0
 80076f0:	2000019c 	.word	0x2000019c
 80076f4:	20000190 	.word	0x20000190
 80076f8:	20000410 	.word	0x20000410

080076fc <iotSetup>:

void iotSetup() {
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 8007700:	bf00      	nop
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	4603      	mov	r3, r0
 8007710:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	f023 030f 	bic.w	r3, r3, #15
 8007718:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007720:	7b7b      	ldrb	r3, [r7, #13]
 8007722:	f043 030c 	orr.w	r3, r3, #12
 8007726:	b2db      	uxtb	r3, r3
 8007728:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800772a:	7b7b      	ldrb	r3, [r7, #13]
 800772c:	f043 0308 	orr.w	r3, r3, #8
 8007730:	b2db      	uxtb	r3, r3
 8007732:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007734:	7b3b      	ldrb	r3, [r7, #12]
 8007736:	f043 030c 	orr.w	r3, r3, #12
 800773a:	b2db      	uxtb	r3, r3
 800773c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800773e:	7b3b      	ldrb	r3, [r7, #12]
 8007740:	f043 0308 	orr.w	r3, r3, #8
 8007744:	b2db      	uxtb	r3, r3
 8007746:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007748:	bf00      	nop
 800774a:	4825      	ldr	r0, [pc, #148]	; (80077e0 <lcd_send_cmd+0xd8>)
 800774c:	f002 fac3 	bl	8009cd6 <HAL_I2C_GetError>
 8007750:	4603      	mov	r3, r0
 8007752:	2b04      	cmp	r3, #4
 8007754:	d0f9      	beq.n	800774a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007756:	bf00      	nop
 8007758:	4821      	ldr	r0, [pc, #132]	; (80077e0 <lcd_send_cmd+0xd8>)
 800775a:	f002 faaf 	bl	8009cbc <HAL_I2C_GetState>
 800775e:	4603      	mov	r3, r0
 8007760:	2b20      	cmp	r3, #32
 8007762:	d1f9      	bne.n	8007758 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007764:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <lcd_send_cmd+0xdc>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d116      	bne.n	800779a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
 8007770:	e00f      	b.n	8007792 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	3310      	adds	r3, #16
 8007776:	443b      	add	r3, r7
 8007778:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	f022 0208 	bic.w	r2, r2, #8
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	3310      	adds	r3, #16
 8007786:	443b      	add	r3, r7
 8007788:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	3301      	adds	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b03      	cmp	r3, #3
 8007796:	d9ec      	bls.n	8007772 <lcd_send_cmd+0x6a>
 8007798:	e015      	b.n	80077c6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800779a:	2300      	movs	r3, #0
 800779c:	73bb      	strb	r3, [r7, #14]
 800779e:	e00f      	b.n	80077c0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	3310      	adds	r3, #16
 80077a4:	443b      	add	r3, r7
 80077a6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	f042 0208 	orr.w	r2, r2, #8
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	3310      	adds	r3, #16
 80077b4:	443b      	add	r3, r7
 80077b6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	3301      	adds	r3, #1
 80077be:	73bb      	strb	r3, [r7, #14]
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d9ec      	bls.n	80077a0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80077c6:	f107 0208 	add.w	r2, r7, #8
 80077ca:	2364      	movs	r3, #100	; 0x64
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	2304      	movs	r3, #4
 80077d0:	214e      	movs	r1, #78	; 0x4e
 80077d2:	4803      	ldr	r0, [pc, #12]	; (80077e0 <lcd_send_cmd+0xd8>)
 80077d4:	f001 fe12 	bl	80093fc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000374 	.word	0x20000374
 80077e4:	2000034a 	.word	0x2000034a

080077e8 <lcd_send_data>:

void lcd_send_data (char data) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	4603      	mov	r3, r0
 80077f0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	f023 030f 	bic.w	r3, r3, #15
 80077f8:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007800:	7b7b      	ldrb	r3, [r7, #13]
 8007802:	f043 030d 	orr.w	r3, r3, #13
 8007806:	b2db      	uxtb	r3, r3
 8007808:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800780a:	7b7b      	ldrb	r3, [r7, #13]
 800780c:	f043 0309 	orr.w	r3, r3, #9
 8007810:	b2db      	uxtb	r3, r3
 8007812:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007814:	7b3b      	ldrb	r3, [r7, #12]
 8007816:	f043 030d 	orr.w	r3, r3, #13
 800781a:	b2db      	uxtb	r3, r3
 800781c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800781e:	7b3b      	ldrb	r3, [r7, #12]
 8007820:	f043 0309 	orr.w	r3, r3, #9
 8007824:	b2db      	uxtb	r3, r3
 8007826:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007828:	bf00      	nop
 800782a:	4825      	ldr	r0, [pc, #148]	; (80078c0 <lcd_send_data+0xd8>)
 800782c:	f002 fa53 	bl	8009cd6 <HAL_I2C_GetError>
 8007830:	4603      	mov	r3, r0
 8007832:	2b04      	cmp	r3, #4
 8007834:	d0f9      	beq.n	800782a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007836:	bf00      	nop
 8007838:	4821      	ldr	r0, [pc, #132]	; (80078c0 <lcd_send_data+0xd8>)
 800783a:	f002 fa3f 	bl	8009cbc <HAL_I2C_GetState>
 800783e:	4603      	mov	r3, r0
 8007840:	2b20      	cmp	r3, #32
 8007842:	d1f9      	bne.n	8007838 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007844:	4b1f      	ldr	r3, [pc, #124]	; (80078c4 <lcd_send_data+0xdc>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d116      	bne.n	800787a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	e00f      	b.n	8007872 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	3310      	adds	r3, #16
 8007856:	443b      	add	r3, r7
 8007858:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	f022 0208 	bic.w	r2, r2, #8
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	3310      	adds	r3, #16
 8007866:	443b      	add	r3, r7
 8007868:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	3301      	adds	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d9ec      	bls.n	8007852 <lcd_send_data+0x6a>
 8007878:	e015      	b.n	80078a6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800787a:	2300      	movs	r3, #0
 800787c:	73bb      	strb	r3, [r7, #14]
 800787e:	e00f      	b.n	80078a0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	3310      	adds	r3, #16
 8007884:	443b      	add	r3, r7
 8007886:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	f042 0208 	orr.w	r2, r2, #8
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	3310      	adds	r3, #16
 8007894:	443b      	add	r3, r7
 8007896:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	3301      	adds	r3, #1
 800789e:	73bb      	strb	r3, [r7, #14]
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d9ec      	bls.n	8007880 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80078a6:	f107 0208 	add.w	r2, r7, #8
 80078aa:	2364      	movs	r3, #100	; 0x64
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2304      	movs	r3, #4
 80078b0:	214e      	movs	r1, #78	; 0x4e
 80078b2:	4803      	ldr	r0, [pc, #12]	; (80078c0 <lcd_send_data+0xd8>)
 80078b4:	f001 fda2 	bl	80093fc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000374 	.word	0x20000374
 80078c4:	2000034a 	.word	0x2000034a

080078c8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	while (*str) {
 80078d0:	e006      	b.n	80078e0 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff ff84 	bl	80077e8 <lcd_send_data>
	while (*str) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1f4      	bne.n	80078d2 <lcd_send_string+0xa>
	}
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <lcd_send_char>:

void lcd_send_char(char ch) {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	4603      	mov	r3, r0
 80078fc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	f023 030f 	bic.w	r3, r3, #15
 8007904:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800790c:	7b7b      	ldrb	r3, [r7, #13]
 800790e:	f043 030d 	orr.w	r3, r3, #13
 8007912:	b2db      	uxtb	r3, r3
 8007914:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007916:	7b7b      	ldrb	r3, [r7, #13]
 8007918:	f043 0309 	orr.w	r3, r3, #9
 800791c:	b2db      	uxtb	r3, r3
 800791e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007920:	7b3b      	ldrb	r3, [r7, #12]
 8007922:	f043 030d 	orr.w	r3, r3, #13
 8007926:	b2db      	uxtb	r3, r3
 8007928:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800792a:	7b3b      	ldrb	r3, [r7, #12]
 800792c:	f043 0309 	orr.w	r3, r3, #9
 8007930:	b2db      	uxtb	r3, r3
 8007932:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007934:	bf00      	nop
 8007936:	4825      	ldr	r0, [pc, #148]	; (80079cc <lcd_send_char+0xd8>)
 8007938:	f002 f9cd 	bl	8009cd6 <HAL_I2C_GetError>
 800793c:	4603      	mov	r3, r0
 800793e:	2b04      	cmp	r3, #4
 8007940:	d0f9      	beq.n	8007936 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007942:	bf00      	nop
 8007944:	4821      	ldr	r0, [pc, #132]	; (80079cc <lcd_send_char+0xd8>)
 8007946:	f002 f9b9 	bl	8009cbc <HAL_I2C_GetState>
 800794a:	4603      	mov	r3, r0
 800794c:	2b20      	cmp	r3, #32
 800794e:	d1f9      	bne.n	8007944 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007950:	4b1f      	ldr	r3, [pc, #124]	; (80079d0 <lcd_send_char+0xdc>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d116      	bne.n	8007986 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
 800795c:	e00f      	b.n	800797e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	3310      	adds	r3, #16
 8007962:	443b      	add	r3, r7
 8007964:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	f022 0208 	bic.w	r2, r2, #8
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	3310      	adds	r3, #16
 8007972:	443b      	add	r3, r7
 8007974:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	3301      	adds	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d9ec      	bls.n	800795e <lcd_send_char+0x6a>
 8007984:	e015      	b.n	80079b2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007986:	2300      	movs	r3, #0
 8007988:	73bb      	strb	r3, [r7, #14]
 800798a:	e00f      	b.n	80079ac <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	3310      	adds	r3, #16
 8007990:	443b      	add	r3, r7
 8007992:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	f042 0208 	orr.w	r2, r2, #8
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	3310      	adds	r3, #16
 80079a0:	443b      	add	r3, r7
 80079a2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	3301      	adds	r3, #1
 80079aa:	73bb      	strb	r3, [r7, #14]
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d9ec      	bls.n	800798c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80079b2:	f107 0208 	add.w	r2, r7, #8
 80079b6:	2364      	movs	r3, #100	; 0x64
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	2304      	movs	r3, #4
 80079bc:	214e      	movs	r1, #78	; 0x4e
 80079be:	4803      	ldr	r0, [pc, #12]	; (80079cc <lcd_send_char+0xd8>)
 80079c0:	f001 fd1c 	bl	80093fc <HAL_I2C_Master_Transmit>
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000374 	.word	0x20000374
 80079d0:	2000034a 	.word	0x2000034a

080079d4 <lcd_init>:

void lcd_init (void) {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80079d8:	2002      	movs	r0, #2
 80079da:	f7ff fe95 	bl	8007708 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80079de:	2028      	movs	r0, #40	; 0x28
 80079e0:	f7ff fe92 	bl	8007708 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80079e4:	200c      	movs	r0, #12
 80079e6:	f7ff fe8f 	bl	8007708 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80079ea:	2080      	movs	r0, #128	; 0x80
 80079ec:	f7ff fe8c 	bl	8007708 <lcd_send_cmd>
	lcd_backlight(1);
 80079f0:	2001      	movs	r0, #1
 80079f2:	f000 f86d 	bl	8007ad0 <lcd_backlight>
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}

080079fa <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	4603      	mov	r3, r0
 8007a02:	460a      	mov	r2, r1
 8007a04:	71fb      	strb	r3, [r7, #7]
 8007a06:	4613      	mov	r3, r2
 8007a08:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d106      	bne.n	8007a1e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007a10:	79bb      	ldrb	r3, [r7, #6]
 8007a12:	337f      	adds	r3, #127	; 0x7f
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff fe76 	bl	8007708 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007a1c:	e008      	b.n	8007a30 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d105      	bne.n	8007a30 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007a24:	79bb      	ldrb	r3, [r7, #6]
 8007a26:	3b41      	subs	r3, #65	; 0x41
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fe6c 	bl	8007708 <lcd_send_cmd>
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	603a      	str	r2, [r7, #0]
 8007a42:	71fb      	strb	r3, [r7, #7]
 8007a44:	460b      	mov	r3, r1
 8007a46:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007a48:	79ba      	ldrb	r2, [r7, #6]
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ffd3 	bl	80079fa <lcd_gotoxy>
	lcd_send_string(str);
 8007a54:	6838      	ldr	r0, [r7, #0]
 8007a56:	f7ff ff37 	bl	80078c8 <lcd_send_string>
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	4603      	mov	r3, r0
 8007a6a:	71fb      	strb	r3, [r7, #7]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	71bb      	strb	r3, [r7, #6]
 8007a70:	4613      	mov	r3, r2
 8007a72:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007a74:	79ba      	ldrb	r2, [r7, #6]
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff ffbd 	bl	80079fa <lcd_gotoxy>
    lcd_send_char(ch);
 8007a80:	797b      	ldrb	r3, [r7, #5]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff ff36 	bl	80078f4 <lcd_send_char>
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <lcd_clear>:

void lcd_clear(void) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007a94:	2001      	movs	r0, #1
 8007a96:	f7ff fe37 	bl	8007708 <lcd_send_cmd>
    HAL_Delay(2);
 8007a9a:	2002      	movs	r0, #2
 8007a9c:	f000 fd22 	bl	80084e4 <HAL_Delay>
}
 8007aa0:	bf00      	nop
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	460a      	mov	r2, r1
 8007aae:	71fb      	strb	r3, [r7, #7]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007ab4:	79ba      	ldrb	r2, [r7, #6]
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff ff9d 	bl	80079fa <lcd_gotoxy>

    lcd_send_char(' ');
 8007ac0:	2020      	movs	r0, #32
 8007ac2:	f7ff ff17 	bl	80078f4 <lcd_send_char>
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007ada:	4a05      	ldr	r2, [pc, #20]	; (8007af0 <lcd_backlight+0x20>)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f7ff fe11 	bl	8007708 <lcd_send_cmd>
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	2000034a 	.word	0x2000034a

08007af4 <lcd_cursor>:

void lcd_cursor(int state) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d106      	bne.n	8007b10 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007b02:	200e      	movs	r0, #14
 8007b04:	f7ff fe00 	bl	8007708 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007b08:	200f      	movs	r0, #15
 8007b0a:	f7ff fdfd 	bl	8007708 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007b0e:	e002      	b.n	8007b16 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007b10:	200c      	movs	r0, #12
 8007b12:	f7ff fdf9 	bl	8007708 <lcd_send_cmd>
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	4a03      	ldr	r2, [pc, #12]	; (8007b3c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b30:	6013      	str	r3, [r2, #0]
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr
 8007b3c:	200001c8 	.word	0x200001c8

08007b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b44:	f000 fc6c 	bl	8008420 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b4c:	f000 fcca 	bl	80084e4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b50:	f000 f89c 	bl	8007c8c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b54:	f000 f9be 	bl	8007ed4 <MX_GPIO_Init>
  MX_CAN_Init();
 8007b58:	f000 f8de 	bl	8007d18 <MX_CAN_Init>
  MX_I2C1_Init();
 8007b5c:	f000 f910 	bl	8007d80 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007b60:	f000 f93c 	bl	8007ddc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007b64:	f000 f98c 	bl	8007e80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007b68:	2201      	movs	r2, #1
 8007b6a:	2140      	movs	r1, #64	; 0x40
 8007b6c:	483e      	ldr	r0, [pc, #248]	; (8007c68 <main+0x128>)
 8007b6e:	f001 faa0 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007b72:	2201      	movs	r2, #1
 8007b74:	2180      	movs	r1, #128	; 0x80
 8007b76:	483c      	ldr	r0, [pc, #240]	; (8007c68 <main+0x128>)
 8007b78:	f001 fa9b 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007b7c:	200a      	movs	r0, #10
 8007b7e:	f000 fcb1 	bl	80084e4 <HAL_Delay>
  lcd_init();
 8007b82:	f7ff ff27 	bl	80079d4 <lcd_init>
  HAL_Delay(10);
 8007b86:	200a      	movs	r0, #10
 8007b88:	f000 fcac 	bl	80084e4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007b8c:	4837      	ldr	r0, [pc, #220]	; (8007c6c <main+0x12c>)
 8007b8e:	f003 f943 	bl	800ae18 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b92:	bf00      	nop
 8007b94:	4836      	ldr	r0, [pc, #216]	; (8007c70 <main+0x130>)
 8007b96:	f002 f89e 	bl	8009cd6 <HAL_I2C_GetError>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d0f9      	beq.n	8007b94 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ba0:	bf00      	nop
 8007ba2:	4833      	ldr	r0, [pc, #204]	; (8007c70 <main+0x130>)
 8007ba4:	f002 f88a 	bl	8009cbc <HAL_I2C_GetState>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d1f9      	bne.n	8007ba2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bb4:	482c      	ldr	r0, [pc, #176]	; (8007c68 <main+0x128>)
 8007bb6:	f001 fa7c 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bc0:	4829      	ldr	r0, [pc, #164]	; (8007c68 <main+0x128>)
 8007bc2:	f001 fa76 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2104      	movs	r1, #4
 8007bca:	4827      	ldr	r0, [pc, #156]	; (8007c68 <main+0x128>)
 8007bcc:	f001 fa71 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	4824      	ldr	r0, [pc, #144]	; (8007c68 <main+0x128>)
 8007bd6:	f001 fa6c 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2101      	movs	r1, #1
 8007bde:	4822      	ldr	r0, [pc, #136]	; (8007c68 <main+0x128>)
 8007be0:	f001 fa67 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007be4:	2200      	movs	r2, #0
 8007be6:	2120      	movs	r1, #32
 8007be8:	4822      	ldr	r0, [pc, #136]	; (8007c74 <main+0x134>)
 8007bea:	f001 fa62 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2110      	movs	r1, #16
 8007bf2:	4820      	ldr	r0, [pc, #128]	; (8007c74 <main+0x134>)
 8007bf4:	f001 fa5d 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2180      	movs	r1, #128	; 0x80
 8007bfc:	481e      	ldr	r0, [pc, #120]	; (8007c78 <main+0x138>)
 8007bfe:	f001 fa58 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007c02:	2200      	movs	r2, #0
 8007c04:	2140      	movs	r1, #64	; 0x40
 8007c06:	481c      	ldr	r0, [pc, #112]	; (8007c78 <main+0x138>)
 8007c08:	f001 fa53 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2120      	movs	r1, #32
 8007c10:	4819      	ldr	r0, [pc, #100]	; (8007c78 <main+0x138>)
 8007c12:	f001 fa4e 	bl	80090b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007c16:	2200      	movs	r2, #0
 8007c18:	2110      	movs	r1, #16
 8007c1a:	4817      	ldr	r0, [pc, #92]	; (8007c78 <main+0x138>)
 8007c1c:	f001 fa49 	bl	80090b2 <HAL_GPIO_WritePin>

  i2cTest();
 8007c20:	f7f9 f808 	bl	8000c34 <i2cTest>
  HAL_Delay(100);
 8007c24:	2064      	movs	r0, #100	; 0x64
 8007c26:	f000 fc5d 	bl	80084e4 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007c2a:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <main+0x13c>)
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f7ff ff02 	bl	8007a38 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007c34:	4a12      	ldr	r2, [pc, #72]	; (8007c80 <main+0x140>)
 8007c36:	2101      	movs	r1, #1
 8007c38:	2002      	movs	r0, #2
 8007c3a:	f7ff fefd 	bl	8007a38 <lcd_print>
  HAL_Delay(1000);
 8007c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c42:	f000 fc4f 	bl	80084e4 <HAL_Delay>
  lcd_clear();
 8007c46:	f7ff ff23 	bl	8007a90 <lcd_clear>

  eepromKontrol();
 8007c4a:	f7f8 faf3 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c52:	f000 fc47 	bl	80084e4 <HAL_Delay>

  backLightTimer = millis;
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <main+0x144>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a0b      	ldr	r2, [pc, #44]	; (8007c88 <main+0x148>)
 8007c5c:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007c5e:	f7ff fd4d 	bl	80076fc <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007c62:	f7fe fdcd 	bl	8006800 <mainLoop>
 8007c66:	e7fc      	b.n	8007c62 <main+0x122>
 8007c68:	40010c00 	.word	0x40010c00
 8007c6c:	200003c8 	.word	0x200003c8
 8007c70:	20000374 	.word	0x20000374
 8007c74:	40011000 	.word	0x40011000
 8007c78:	40010800 	.word	0x40010800
 8007c7c:	0800da68 	.word	0x0800da68
 8007c80:	0800da7c 	.word	0x0800da7c
 8007c84:	200001c8 	.word	0x200001c8
 8007c88:	200001e4 	.word	0x200001e4

08007c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b090      	sub	sp, #64	; 0x40
 8007c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c92:	f107 0318 	add.w	r3, r7, #24
 8007c96:	2228      	movs	r2, #40	; 0x28
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f004 fb36 	bl	800c30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ca0:	1d3b      	adds	r3, r7, #4
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	605a      	str	r2, [r3, #4]
 8007ca8:	609a      	str	r2, [r3, #8]
 8007caa:	60da      	str	r2, [r3, #12]
 8007cac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007cca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007cd0:	f107 0318 	add.w	r3, r7, #24
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f002 fc3f 	bl	800a558 <HAL_RCC_OscConfig>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007ce0:	f000 f9a2 	bl	8008028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ce4:	230f      	movs	r3, #15
 8007ce6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	2102      	movs	r1, #2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 feac 	bl	800aa5c <HAL_RCC_ClockConfig>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007d0a:	f000 f98d 	bl	8008028 <Error_Handler>
  }
}
 8007d0e:	bf00      	nop
 8007d10:	3740      	adds	r7, #64	; 0x40
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007d1c:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d1e:	4a17      	ldr	r2, [pc, #92]	; (8007d7c <MX_CAN_Init+0x64>)
 8007d20:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d24:	2210      	movs	r2, #16
 8007d26:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007d28:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d2e:	4b12      	ldr	r3, [pc, #72]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007d34:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007d40:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007d58:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007d64:	4804      	ldr	r0, [pc, #16]	; (8007d78 <MX_CAN_Init+0x60>)
 8007d66:	f000 fbe1 	bl	800852c <HAL_CAN_Init>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007d70:	f000 f95a 	bl	8008028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	2000034c 	.word	0x2000034c
 8007d7c:	40006400 	.word	0x40006400

08007d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007d84:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007d86:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <MX_I2C1_Init+0x54>)
 8007d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007d8c:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <MX_I2C1_Init+0x58>)
 8007d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007d96:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007d9c:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007da4:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007daa:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007db6:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007dbc:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <MX_I2C1_Init+0x50>)
 8007dbe:	f001 f9a9 	bl	8009114 <HAL_I2C_Init>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007dc8:	f000 f92e 	bl	8008028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007dcc:	bf00      	nop
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000374 	.word	0x20000374
 8007dd4:	40005400 	.word	0x40005400
 8007dd8:	00061a80 	.word	0x00061a80

08007ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007de2:	f107 0308 	add.w	r3, r7, #8
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	605a      	str	r2, [r3, #4]
 8007dec:	609a      	str	r2, [r3, #8]
 8007dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007df0:	463b      	mov	r3, r7
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007df8:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007dfa:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <MX_TIM1_Init+0xa0>)
 8007dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e00:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e06:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007e0c:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e0e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e14:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e1a:	4b17      	ldr	r3, [pc, #92]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e20:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007e26:	4814      	ldr	r0, [pc, #80]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e28:	f002 ffa6 	bl	800ad78 <HAL_TIM_Base_Init>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007e32:	f000 f8f9 	bl	8008028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007e3c:	f107 0308 	add.w	r3, r7, #8
 8007e40:	4619      	mov	r1, r3
 8007e42:	480d      	ldr	r0, [pc, #52]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e44:	f003 f950 	bl	800b0e8 <HAL_TIM_ConfigClockSource>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007e4e:	f000 f8eb 	bl	8008028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e52:	2300      	movs	r3, #0
 8007e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4806      	ldr	r0, [pc, #24]	; (8007e78 <MX_TIM1_Init+0x9c>)
 8007e60:	f003 fb3e 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007e6a:	f000 f8dd 	bl	8008028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007e6e:	bf00      	nop
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200003c8 	.word	0x200003c8
 8007e7c:	40012c00 	.word	0x40012c00

08007e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007e84:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007e86:	4a12      	ldr	r2, [pc, #72]	; (8007ed0 <MX_USART1_UART_Init+0x50>)
 8007e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e8a:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007ea6:	220c      	movs	r2, #12
 8007ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007eaa:	4b08      	ldr	r3, [pc, #32]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007eb6:	4805      	ldr	r0, [pc, #20]	; (8007ecc <MX_USART1_UART_Init+0x4c>)
 8007eb8:	f003 fb90 	bl	800b5dc <HAL_UART_Init>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007ec2:	f000 f8b1 	bl	8008028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007ec6:	bf00      	nop
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000410 	.word	0x20000410
 8007ed0:	40013800 	.word	0x40013800

08007ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eda:	f107 0310 	add.w	r3, r7, #16
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
 8007ee4:	609a      	str	r2, [r3, #8]
 8007ee6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <MX_GPIO_Init+0x144>)
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	4a4a      	ldr	r2, [pc, #296]	; (8008018 <MX_GPIO_Init+0x144>)
 8007eee:	f043 0310 	orr.w	r3, r3, #16
 8007ef2:	6193      	str	r3, [r2, #24]
 8007ef4:	4b48      	ldr	r3, [pc, #288]	; (8008018 <MX_GPIO_Init+0x144>)
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f00:	4b45      	ldr	r3, [pc, #276]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	4a44      	ldr	r2, [pc, #272]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f06:	f043 0320 	orr.w	r3, r3, #32
 8007f0a:	6193      	str	r3, [r2, #24]
 8007f0c:	4b42      	ldr	r3, [pc, #264]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f18:	4b3f      	ldr	r3, [pc, #252]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	4a3e      	ldr	r2, [pc, #248]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f1e:	f043 0304 	orr.w	r3, r3, #4
 8007f22:	6193      	str	r3, [r2, #24]
 8007f24:	4b3c      	ldr	r3, [pc, #240]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f30:	4b39      	ldr	r3, [pc, #228]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	4a38      	ldr	r2, [pc, #224]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f36:	f043 0308 	orr.w	r3, r3, #8
 8007f3a:	6193      	str	r3, [r2, #24]
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <MX_GPIO_Init+0x144>)
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007f48:	2200      	movs	r2, #0
 8007f4a:	21f0      	movs	r1, #240	; 0xf0
 8007f4c:	4833      	ldr	r0, [pc, #204]	; (800801c <MX_GPIO_Init+0x148>)
 8007f4e:	f001 f8b0 	bl	80090b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	f241 0130 	movw	r1, #4144	; 0x1030
 8007f58:	4831      	ldr	r0, [pc, #196]	; (8008020 <MX_GPIO_Init+0x14c>)
 8007f5a:	f001 f8aa 	bl	80090b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f640 4107 	movw	r1, #3079	; 0xc07
 8007f64:	482f      	ldr	r0, [pc, #188]	; (8008024 <MX_GPIO_Init+0x150>)
 8007f66:	f001 f8a4 	bl	80090b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007f6a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007f6e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f78:	f107 0310 	add.w	r3, r7, #16
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4828      	ldr	r0, [pc, #160]	; (8008020 <MX_GPIO_Init+0x14c>)
 8007f80:	f000 fe20 	bl	8008bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007f84:	f248 130f 	movw	r3, #33039	; 0x810f
 8007f88:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f92:	f107 0310 	add.w	r3, r7, #16
 8007f96:	4619      	mov	r1, r3
 8007f98:	4820      	ldr	r0, [pc, #128]	; (800801c <MX_GPIO_Init+0x148>)
 8007f9a:	f000 fe13 	bl	8008bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007f9e:	23f0      	movs	r3, #240	; 0xf0
 8007fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007faa:	2302      	movs	r3, #2
 8007fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fae:	f107 0310 	add.w	r3, r7, #16
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4819      	ldr	r0, [pc, #100]	; (800801c <MX_GPIO_Init+0x148>)
 8007fb6:	f000 fe05 	bl	8008bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007fba:	f241 0330 	movw	r3, #4144	; 0x1030
 8007fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fcc:	f107 0310 	add.w	r3, r7, #16
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4813      	ldr	r0, [pc, #76]	; (8008020 <MX_GPIO_Init+0x14c>)
 8007fd4:	f000 fdf6 	bl	8008bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007fd8:	f640 4307 	movw	r3, #3079	; 0xc07
 8007fdc:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fea:	f107 0310 	add.w	r3, r7, #16
 8007fee:	4619      	mov	r1, r3
 8007ff0:	480c      	ldr	r0, [pc, #48]	; (8008024 <MX_GPIO_Init+0x150>)
 8007ff2:	f000 fde7 	bl	8008bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007ff6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008000:	2300      	movs	r3, #0
 8008002:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008004:	f107 0310 	add.w	r3, r7, #16
 8008008:	4619      	mov	r1, r3
 800800a:	4806      	ldr	r0, [pc, #24]	; (8008024 <MX_GPIO_Init+0x150>)
 800800c:	f000 fdda 	bl	8008bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008010:	bf00      	nop
 8008012:	3720      	adds	r7, #32
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40021000 	.word	0x40021000
 800801c:	40010800 	.word	0x40010800
 8008020:	40011000 	.word	0x40011000
 8008024:	40010c00 	.word	0x40010c00

08008028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800802c:	bf00      	nop
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800803a:	4b15      	ldr	r3, [pc, #84]	; (8008090 <HAL_MspInit+0x5c>)
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	4a14      	ldr	r2, [pc, #80]	; (8008090 <HAL_MspInit+0x5c>)
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	6193      	str	r3, [r2, #24]
 8008046:	4b12      	ldr	r3, [pc, #72]	; (8008090 <HAL_MspInit+0x5c>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	60bb      	str	r3, [r7, #8]
 8008050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008052:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <HAL_MspInit+0x5c>)
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	4a0e      	ldr	r2, [pc, #56]	; (8008090 <HAL_MspInit+0x5c>)
 8008058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800805c:	61d3      	str	r3, [r2, #28]
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <HAL_MspInit+0x5c>)
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <HAL_MspInit+0x60>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	4a04      	ldr	r2, [pc, #16]	; (8008094 <HAL_MspInit+0x60>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr
 8008090:	40021000 	.word	0x40021000
 8008094:	40010000 	.word	0x40010000

08008098 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a0:	f107 0310 	add.w	r3, r7, #16
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	605a      	str	r2, [r3, #4]
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1c      	ldr	r2, [pc, #112]	; (8008124 <HAL_CAN_MspInit+0x8c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d131      	bne.n	800811c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80080b8:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <HAL_CAN_MspInit+0x90>)
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	4a1a      	ldr	r2, [pc, #104]	; (8008128 <HAL_CAN_MspInit+0x90>)
 80080be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080c2:	61d3      	str	r3, [r2, #28]
 80080c4:	4b18      	ldr	r3, [pc, #96]	; (8008128 <HAL_CAN_MspInit+0x90>)
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080d0:	4b15      	ldr	r3, [pc, #84]	; (8008128 <HAL_CAN_MspInit+0x90>)
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	4a14      	ldr	r2, [pc, #80]	; (8008128 <HAL_CAN_MspInit+0x90>)
 80080d6:	f043 0304 	orr.w	r3, r3, #4
 80080da:	6193      	str	r3, [r2, #24]
 80080dc:	4b12      	ldr	r3, [pc, #72]	; (8008128 <HAL_CAN_MspInit+0x90>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80080e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f6:	f107 0310 	add.w	r3, r7, #16
 80080fa:	4619      	mov	r1, r3
 80080fc:	480b      	ldr	r0, [pc, #44]	; (800812c <HAL_CAN_MspInit+0x94>)
 80080fe:	f000 fd61 	bl	8008bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008108:	2302      	movs	r3, #2
 800810a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800810c:	2303      	movs	r3, #3
 800810e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008110:	f107 0310 	add.w	r3, r7, #16
 8008114:	4619      	mov	r1, r3
 8008116:	4805      	ldr	r0, [pc, #20]	; (800812c <HAL_CAN_MspInit+0x94>)
 8008118:	f000 fd54 	bl	8008bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800811c:	bf00      	nop
 800811e:	3720      	adds	r7, #32
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40006400 	.word	0x40006400
 8008128:	40021000 	.word	0x40021000
 800812c:	40010800 	.word	0x40010800

08008130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008138:	f107 0310 	add.w	r3, r7, #16
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <HAL_I2C_MspInit+0x70>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d123      	bne.n	8008198 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008150:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <HAL_I2C_MspInit+0x74>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	4a13      	ldr	r2, [pc, #76]	; (80081a4 <HAL_I2C_MspInit+0x74>)
 8008156:	f043 0308 	orr.w	r3, r3, #8
 800815a:	6193      	str	r3, [r2, #24]
 800815c:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <HAL_I2C_MspInit+0x74>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008168:	23c0      	movs	r3, #192	; 0xc0
 800816a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800816c:	2312      	movs	r3, #18
 800816e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008170:	2303      	movs	r3, #3
 8008172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008174:	f107 0310 	add.w	r3, r7, #16
 8008178:	4619      	mov	r1, r3
 800817a:	480b      	ldr	r0, [pc, #44]	; (80081a8 <HAL_I2C_MspInit+0x78>)
 800817c:	f000 fd22 	bl	8008bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008180:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <HAL_I2C_MspInit+0x74>)
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	4a07      	ldr	r2, [pc, #28]	; (80081a4 <HAL_I2C_MspInit+0x74>)
 8008186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800818a:	61d3      	str	r3, [r2, #28]
 800818c:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <HAL_I2C_MspInit+0x74>)
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008198:	bf00      	nop
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40005400 	.word	0x40005400
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40010c00 	.word	0x40010c00

080081ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <HAL_I2C_MspDeInit+0x38>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d10d      	bne.n	80081da <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_I2C_MspDeInit+0x3c>)
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	4a09      	ldr	r2, [pc, #36]	; (80081e8 <HAL_I2C_MspDeInit+0x3c>)
 80081c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081c8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80081ca:	2140      	movs	r1, #64	; 0x40
 80081cc:	4807      	ldr	r0, [pc, #28]	; (80081ec <HAL_I2C_MspDeInit+0x40>)
 80081ce:	f000 fe8d 	bl	8008eec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80081d2:	2180      	movs	r1, #128	; 0x80
 80081d4:	4805      	ldr	r0, [pc, #20]	; (80081ec <HAL_I2C_MspDeInit+0x40>)
 80081d6:	f000 fe89 	bl	8008eec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	40005400 	.word	0x40005400
 80081e8:	40021000 	.word	0x40021000
 80081ec:	40010c00 	.word	0x40010c00

080081f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <HAL_TIM_Base_MspInit+0x44>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d113      	bne.n	800822a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <HAL_TIM_Base_MspInit+0x48>)
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	4a0c      	ldr	r2, [pc, #48]	; (8008238 <HAL_TIM_Base_MspInit+0x48>)
 8008208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800820c:	6193      	str	r3, [r2, #24]
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_TIM_Base_MspInit+0x48>)
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	2019      	movs	r0, #25
 8008220:	f000 fb57 	bl	80088d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008224:	2019      	movs	r0, #25
 8008226:	f000 fb70 	bl	800890a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40021000 	.word	0x40021000

0800823c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008244:	f107 0310 	add.w	r3, r7, #16
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	609a      	str	r2, [r3, #8]
 8008250:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <HAL_UART_MspInit+0x9c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d139      	bne.n	80082d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800825c:	4b1f      	ldr	r3, [pc, #124]	; (80082dc <HAL_UART_MspInit+0xa0>)
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	4a1e      	ldr	r2, [pc, #120]	; (80082dc <HAL_UART_MspInit+0xa0>)
 8008262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008266:	6193      	str	r3, [r2, #24]
 8008268:	4b1c      	ldr	r3, [pc, #112]	; (80082dc <HAL_UART_MspInit+0xa0>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008274:	4b19      	ldr	r3, [pc, #100]	; (80082dc <HAL_UART_MspInit+0xa0>)
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	4a18      	ldr	r2, [pc, #96]	; (80082dc <HAL_UART_MspInit+0xa0>)
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	6193      	str	r3, [r2, #24]
 8008280:	4b16      	ldr	r3, [pc, #88]	; (80082dc <HAL_UART_MspInit+0xa0>)
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800828c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008290:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008292:	2302      	movs	r3, #2
 8008294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008296:	2303      	movs	r3, #3
 8008298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	4619      	mov	r1, r3
 80082a0:	480f      	ldr	r0, [pc, #60]	; (80082e0 <HAL_UART_MspInit+0xa4>)
 80082a2:	f000 fc8f 	bl	8008bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80082a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b4:	f107 0310 	add.w	r3, r7, #16
 80082b8:	4619      	mov	r1, r3
 80082ba:	4809      	ldr	r0, [pc, #36]	; (80082e0 <HAL_UART_MspInit+0xa4>)
 80082bc:	f000 fc82 	bl	8008bc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	2025      	movs	r0, #37	; 0x25
 80082c6:	f000 fb04 	bl	80088d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80082ca:	2025      	movs	r0, #37	; 0x25
 80082cc:	f000 fb1d 	bl	800890a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80082d0:	bf00      	nop
 80082d2:	3720      	adds	r7, #32
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40013800 	.word	0x40013800
 80082dc:	40021000 	.word	0x40021000
 80082e0:	40010800 	.word	0x40010800

080082e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082e8:	e7fe      	b.n	80082e8 <NMI_Handler+0x4>

080082ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082ea:	b480      	push	{r7}
 80082ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082ee:	e7fe      	b.n	80082ee <HardFault_Handler+0x4>

080082f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082f4:	e7fe      	b.n	80082f4 <MemManage_Handler+0x4>

080082f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082f6:	b480      	push	{r7}
 80082f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082fa:	e7fe      	b.n	80082fa <BusFault_Handler+0x4>

080082fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008300:	e7fe      	b.n	8008300 <UsageFault_Handler+0x4>

08008302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008302:	b480      	push	{r7}
 8008304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800830e:	b480      	push	{r7}
 8008310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008312:	bf00      	nop
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr

0800831a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800831a:	b480      	push	{r7}
 800831c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800831e:	bf00      	nop
 8008320:	46bd      	mov	sp, r7
 8008322:	bc80      	pop	{r7}
 8008324:	4770      	bx	lr

08008326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800832a:	f000 f8bf 	bl	80084ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008338:	4802      	ldr	r0, [pc, #8]	; (8008344 <TIM1_UP_IRQHandler+0x10>)
 800833a:	f002 fdcd 	bl	800aed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800833e:	bf00      	nop
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200003c8 	.word	0x200003c8

08008348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800834c:	4802      	ldr	r0, [pc, #8]	; (8008358 <USART1_IRQHandler+0x10>)
 800834e:	f003 f9cb 	bl	800b6e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000410 	.word	0x20000410

0800835c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008364:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <_sbrk+0x5c>)
 8008366:	4b15      	ldr	r3, [pc, #84]	; (80083bc <_sbrk+0x60>)
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008370:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <_sbrk+0x64>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d102      	bne.n	800837e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008378:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <_sbrk+0x64>)
 800837a:	4a12      	ldr	r2, [pc, #72]	; (80083c4 <_sbrk+0x68>)
 800837c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <_sbrk+0x64>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4413      	add	r3, r2
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	429a      	cmp	r2, r3
 800838a:	d207      	bcs.n	800839c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800838c:	f003 ffe6 	bl	800c35c <__errno>
 8008390:	4603      	mov	r3, r0
 8008392:	220c      	movs	r2, #12
 8008394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	e009      	b.n	80083b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800839c:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <_sbrk+0x64>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083a2:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <_sbrk+0x64>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	4a05      	ldr	r2, [pc, #20]	; (80083c0 <_sbrk+0x64>)
 80083ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083ae:	68fb      	ldr	r3, [r7, #12]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	2000c000 	.word	0x2000c000
 80083bc:	00000400 	.word	0x00000400
 80083c0:	20000458 	.word	0x20000458
 80083c4:	200005a8 	.word	0x200005a8

080083c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083cc:	bf00      	nop
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083d4:	480c      	ldr	r0, [pc, #48]	; (8008408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80083d6:	490d      	ldr	r1, [pc, #52]	; (800840c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80083d8:	4a0d      	ldr	r2, [pc, #52]	; (8008410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80083da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083dc:	e002      	b.n	80083e4 <LoopCopyDataInit>

080083de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083e2:	3304      	adds	r3, #4

080083e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083e8:	d3f9      	bcc.n	80083de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083ea:	4a0a      	ldr	r2, [pc, #40]	; (8008414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80083ec:	4c0a      	ldr	r4, [pc, #40]	; (8008418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80083ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083f0:	e001      	b.n	80083f6 <LoopFillZerobss>

080083f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083f4:	3204      	adds	r2, #4

080083f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083f8:	d3fb      	bcc.n	80083f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083fa:	f7ff ffe5 	bl	80083c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083fe:	f003 ffb3 	bl	800c368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008402:	f7ff fb9d 	bl	8007b40 <main>
  bx lr
 8008406:	4770      	bx	lr
  ldr r0, =_sdata
 8008408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800840c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008410:	0800db1c 	.word	0x0800db1c
  ldr r2, =_sbss
 8008414:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8008418:	200005a8 	.word	0x200005a8

0800841c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800841c:	e7fe      	b.n	800841c <ADC1_2_IRQHandler>
	...

08008420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008424:	4b08      	ldr	r3, [pc, #32]	; (8008448 <HAL_Init+0x28>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a07      	ldr	r2, [pc, #28]	; (8008448 <HAL_Init+0x28>)
 800842a:	f043 0310 	orr.w	r3, r3, #16
 800842e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008430:	2003      	movs	r0, #3
 8008432:	f000 fa43 	bl	80088bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008436:	200f      	movs	r0, #15
 8008438:	f000 f808 	bl	800844c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800843c:	f7ff fdfa 	bl	8008034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40022000 	.word	0x40022000

0800844c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <HAL_InitTick+0x54>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <HAL_InitTick+0x58>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	4619      	mov	r1, r3
 800845e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008462:	fbb3 f3f1 	udiv	r3, r3, r1
 8008466:	fbb2 f3f3 	udiv	r3, r2, r3
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fa5b 	bl	8008926 <HAL_SYSTICK_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e00e      	b.n	8008498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b0f      	cmp	r3, #15
 800847e:	d80a      	bhi.n	8008496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008480:	2200      	movs	r2, #0
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	f000 fa23 	bl	80088d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800848c:	4a06      	ldr	r2, [pc, #24]	; (80084a8 <HAL_InitTick+0x5c>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	e000      	b.n	8008498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	200000a0 	.word	0x200000a0
 80084a4:	200000a8 	.word	0x200000a8
 80084a8:	200000a4 	.word	0x200000a4

080084ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <HAL_IncTick+0x1c>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b05      	ldr	r3, [pc, #20]	; (80084cc <HAL_IncTick+0x20>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4413      	add	r3, r2
 80084bc:	4a03      	ldr	r2, [pc, #12]	; (80084cc <HAL_IncTick+0x20>)
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr
 80084c8:	200000a8 	.word	0x200000a8
 80084cc:	2000045c 	.word	0x2000045c

080084d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return uwTick;
 80084d4:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <HAL_GetTick+0x10>)
 80084d6:	681b      	ldr	r3, [r3, #0]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr
 80084e0:	2000045c 	.word	0x2000045c

080084e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084ec:	f7ff fff0 	bl	80084d0 <HAL_GetTick>
 80084f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d005      	beq.n	800850a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084fe:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <HAL_Delay+0x44>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800850a:	bf00      	nop
 800850c:	f7ff ffe0 	bl	80084d0 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	429a      	cmp	r2, r3
 800851a:	d8f7      	bhi.n	800850c <HAL_Delay+0x28>
  {
  }
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200000a8 	.word	0x200000a8

0800852c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e0ed      	b.n	800871a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fda4 	bl	8008098 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0201 	orr.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008560:	f7ff ffb6 	bl	80084d0 <HAL_GetTick>
 8008564:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008566:	e012      	b.n	800858e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008568:	f7ff ffb2 	bl	80084d0 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b0a      	cmp	r3, #10
 8008574:	d90b      	bls.n	800858e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2205      	movs	r2, #5
 8008586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0c5      	b.n	800871a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0e5      	beq.n	8008568 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0202 	bic.w	r2, r2, #2
 80085aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085ac:	f7ff ff90 	bl	80084d0 <HAL_GetTick>
 80085b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80085b2:	e012      	b.n	80085da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085b4:	f7ff ff8c 	bl	80084d0 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b0a      	cmp	r3, #10
 80085c0:	d90b      	bls.n	80085da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2205      	movs	r2, #5
 80085d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e09f      	b.n	800871a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e5      	bne.n	80085b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7e1b      	ldrb	r3, [r3, #24]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d108      	bne.n	8008602 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e007      	b.n	8008612 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7e5b      	ldrb	r3, [r3, #25]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d108      	bne.n	800862c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e007      	b.n	800863c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800863a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7e9b      	ldrb	r3, [r3, #26]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d108      	bne.n	8008656 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0220 	orr.w	r2, r2, #32
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e007      	b.n	8008666 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0220 	bic.w	r2, r2, #32
 8008664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7edb      	ldrb	r3, [r3, #27]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d108      	bne.n	8008680 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0210 	bic.w	r2, r2, #16
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e007      	b.n	8008690 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0210 	orr.w	r2, r2, #16
 800868e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7f1b      	ldrb	r3, [r3, #28]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d108      	bne.n	80086aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0208 	orr.w	r2, r2, #8
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	e007      	b.n	80086ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0208 	bic.w	r2, r2, #8
 80086b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7f5b      	ldrb	r3, [r3, #29]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d108      	bne.n	80086d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0204 	orr.w	r2, r2, #4
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	e007      	b.n	80086e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0204 	bic.w	r2, r2, #4
 80086e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	ea42 0103 	orr.w	r1, r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	1e5a      	subs	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <__NVIC_SetPriorityGrouping>:
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <__NVIC_SetPriorityGrouping+0x44>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008740:	4013      	ands	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800874c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008756:	4a04      	ldr	r2, [pc, #16]	; (8008768 <__NVIC_SetPriorityGrouping+0x44>)
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	60d3      	str	r3, [r2, #12]
}
 800875c:	bf00      	nop
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	e000ed00 	.word	0xe000ed00

0800876c <__NVIC_GetPriorityGrouping>:
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <__NVIC_GetPriorityGrouping+0x18>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	f003 0307 	and.w	r3, r3, #7
}
 800877a:	4618      	mov	r0, r3
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	e000ed00 	.word	0xe000ed00

08008788 <__NVIC_EnableIRQ>:
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008796:	2b00      	cmp	r3, #0
 8008798:	db0b      	blt.n	80087b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	f003 021f 	and.w	r2, r3, #31
 80087a0:	4906      	ldr	r1, [pc, #24]	; (80087bc <__NVIC_EnableIRQ+0x34>)
 80087a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	2001      	movs	r0, #1
 80087aa:	fa00 f202 	lsl.w	r2, r0, r2
 80087ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr
 80087bc:	e000e100 	.word	0xe000e100

080087c0 <__NVIC_SetPriority>:
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db0a      	blt.n	80087ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	490c      	ldr	r1, [pc, #48]	; (800880c <__NVIC_SetPriority+0x4c>)
 80087da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087de:	0112      	lsls	r2, r2, #4
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	440b      	add	r3, r1
 80087e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80087e8:	e00a      	b.n	8008800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	4908      	ldr	r1, [pc, #32]	; (8008810 <__NVIC_SetPriority+0x50>)
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	3b04      	subs	r3, #4
 80087f8:	0112      	lsls	r2, r2, #4
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	440b      	add	r3, r1
 80087fe:	761a      	strb	r2, [r3, #24]
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	e000e100 	.word	0xe000e100
 8008810:	e000ed00 	.word	0xe000ed00

08008814 <NVIC_EncodePriority>:
{
 8008814:	b480      	push	{r7}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f1c3 0307 	rsb	r3, r3, #7
 800882e:	2b04      	cmp	r3, #4
 8008830:	bf28      	it	cs
 8008832:	2304      	movcs	r3, #4
 8008834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	3304      	adds	r3, #4
 800883a:	2b06      	cmp	r3, #6
 800883c:	d902      	bls.n	8008844 <NVIC_EncodePriority+0x30>
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	3b03      	subs	r3, #3
 8008842:	e000      	b.n	8008846 <NVIC_EncodePriority+0x32>
 8008844:	2300      	movs	r3, #0
 8008846:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008848:	f04f 32ff 	mov.w	r2, #4294967295
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	43da      	mvns	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	401a      	ands	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800885c:	f04f 31ff 	mov.w	r1, #4294967295
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	43d9      	mvns	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800886c:	4313      	orrs	r3, r2
}
 800886e:	4618      	mov	r0, r3
 8008870:	3724      	adds	r7, #36	; 0x24
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3b01      	subs	r3, #1
 8008884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008888:	d301      	bcc.n	800888e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800888a:	2301      	movs	r3, #1
 800888c:	e00f      	b.n	80088ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800888e:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <SysTick_Config+0x40>)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3b01      	subs	r3, #1
 8008894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008896:	210f      	movs	r1, #15
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	f7ff ff90 	bl	80087c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088a0:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <SysTick_Config+0x40>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088a6:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <SysTick_Config+0x40>)
 80088a8:	2207      	movs	r2, #7
 80088aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	e000e010 	.word	0xe000e010

080088bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ff2d 	bl	8008724 <__NVIC_SetPriorityGrouping>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	4603      	mov	r3, r0
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80088e4:	f7ff ff42 	bl	800876c <__NVIC_GetPriorityGrouping>
 80088e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	6978      	ldr	r0, [r7, #20]
 80088f0:	f7ff ff90 	bl	8008814 <NVIC_EncodePriority>
 80088f4:	4602      	mov	r2, r0
 80088f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff ff5f 	bl	80087c0 <__NVIC_SetPriority>
}
 8008902:	bf00      	nop
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	4603      	mov	r3, r0
 8008912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff ff35 	bl	8008788 <__NVIC_EnableIRQ>
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff ffa2 	bl	8008878 <SysTick_Config>
 8008934:	4603      	mov	r3, r0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d008      	beq.n	8008968 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2204      	movs	r2, #4
 800895a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e020      	b.n	80089aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 020e 	bic.w	r2, r2, #14
 8008976:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0201 	bic.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008990:	2101      	movs	r1, #1
 8008992:	fa01 f202 	lsl.w	r2, r1, r2
 8008996:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d005      	beq.n	80089d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2204      	movs	r2, #4
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	73fb      	strb	r3, [r7, #15]
 80089d6:	e0d6      	b.n	8008b86 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 020e 	bic.w	r2, r2, #14
 80089e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	461a      	mov	r2, r3
 80089fe:	4b64      	ldr	r3, [pc, #400]	; (8008b90 <HAL_DMA_Abort_IT+0x1dc>)
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d958      	bls.n	8008ab6 <HAL_DMA_Abort_IT+0x102>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a62      	ldr	r2, [pc, #392]	; (8008b94 <HAL_DMA_Abort_IT+0x1e0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d04f      	beq.n	8008aae <HAL_DMA_Abort_IT+0xfa>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a61      	ldr	r2, [pc, #388]	; (8008b98 <HAL_DMA_Abort_IT+0x1e4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d048      	beq.n	8008aaa <HAL_DMA_Abort_IT+0xf6>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a5f      	ldr	r2, [pc, #380]	; (8008b9c <HAL_DMA_Abort_IT+0x1e8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d040      	beq.n	8008aa4 <HAL_DMA_Abort_IT+0xf0>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a5e      	ldr	r2, [pc, #376]	; (8008ba0 <HAL_DMA_Abort_IT+0x1ec>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d038      	beq.n	8008a9e <HAL_DMA_Abort_IT+0xea>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a5c      	ldr	r2, [pc, #368]	; (8008ba4 <HAL_DMA_Abort_IT+0x1f0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d030      	beq.n	8008a98 <HAL_DMA_Abort_IT+0xe4>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a5b      	ldr	r2, [pc, #364]	; (8008ba8 <HAL_DMA_Abort_IT+0x1f4>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d028      	beq.n	8008a92 <HAL_DMA_Abort_IT+0xde>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a52      	ldr	r2, [pc, #328]	; (8008b90 <HAL_DMA_Abort_IT+0x1dc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d020      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xd8>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a57      	ldr	r2, [pc, #348]	; (8008bac <HAL_DMA_Abort_IT+0x1f8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d019      	beq.n	8008a88 <HAL_DMA_Abort_IT+0xd4>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a55      	ldr	r2, [pc, #340]	; (8008bb0 <HAL_DMA_Abort_IT+0x1fc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d012      	beq.n	8008a84 <HAL_DMA_Abort_IT+0xd0>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a54      	ldr	r2, [pc, #336]	; (8008bb4 <HAL_DMA_Abort_IT+0x200>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00a      	beq.n	8008a7e <HAL_DMA_Abort_IT+0xca>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a52      	ldr	r2, [pc, #328]	; (8008bb8 <HAL_DMA_Abort_IT+0x204>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d102      	bne.n	8008a78 <HAL_DMA_Abort_IT+0xc4>
 8008a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a76:	e01b      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a7c:	e018      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a82:	e015      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a84:	2310      	movs	r3, #16
 8008a86:	e013      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e011      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a90:	e00e      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a96:	e00b      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a9c:	e008      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa2:	e005      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa8:	e002      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008aaa:	2310      	movs	r3, #16
 8008aac:	e000      	b.n	8008ab0 <HAL_DMA_Abort_IT+0xfc>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4a42      	ldr	r2, [pc, #264]	; (8008bbc <HAL_DMA_Abort_IT+0x208>)
 8008ab2:	6053      	str	r3, [r2, #4]
 8008ab4:	e057      	b.n	8008b66 <HAL_DMA_Abort_IT+0x1b2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a36      	ldr	r2, [pc, #216]	; (8008b94 <HAL_DMA_Abort_IT+0x1e0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d04f      	beq.n	8008b60 <HAL_DMA_Abort_IT+0x1ac>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a34      	ldr	r2, [pc, #208]	; (8008b98 <HAL_DMA_Abort_IT+0x1e4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d048      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x1a8>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a33      	ldr	r2, [pc, #204]	; (8008b9c <HAL_DMA_Abort_IT+0x1e8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d040      	beq.n	8008b56 <HAL_DMA_Abort_IT+0x1a2>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a31      	ldr	r2, [pc, #196]	; (8008ba0 <HAL_DMA_Abort_IT+0x1ec>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d038      	beq.n	8008b50 <HAL_DMA_Abort_IT+0x19c>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a30      	ldr	r2, [pc, #192]	; (8008ba4 <HAL_DMA_Abort_IT+0x1f0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d030      	beq.n	8008b4a <HAL_DMA_Abort_IT+0x196>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a2e      	ldr	r2, [pc, #184]	; (8008ba8 <HAL_DMA_Abort_IT+0x1f4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d028      	beq.n	8008b44 <HAL_DMA_Abort_IT+0x190>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a26      	ldr	r2, [pc, #152]	; (8008b90 <HAL_DMA_Abort_IT+0x1dc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d020      	beq.n	8008b3e <HAL_DMA_Abort_IT+0x18a>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <HAL_DMA_Abort_IT+0x1f8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d019      	beq.n	8008b3a <HAL_DMA_Abort_IT+0x186>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a29      	ldr	r2, [pc, #164]	; (8008bb0 <HAL_DMA_Abort_IT+0x1fc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d012      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x182>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a27      	ldr	r2, [pc, #156]	; (8008bb4 <HAL_DMA_Abort_IT+0x200>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00a      	beq.n	8008b30 <HAL_DMA_Abort_IT+0x17c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a26      	ldr	r2, [pc, #152]	; (8008bb8 <HAL_DMA_Abort_IT+0x204>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d102      	bne.n	8008b2a <HAL_DMA_Abort_IT+0x176>
 8008b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b28:	e01b      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b2e:	e018      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b34:	e015      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b36:	2310      	movs	r3, #16
 8008b38:	e013      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e011      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b42:	e00e      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b48:	e00b      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b4e:	e008      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b54:	e005      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b5a:	e002      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	e000      	b.n	8008b62 <HAL_DMA_Abort_IT+0x1ae>
 8008b60:	2301      	movs	r3, #1
 8008b62:	4a17      	ldr	r2, [pc, #92]	; (8008bc0 <HAL_DMA_Abort_IT+0x20c>)
 8008b64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4798      	blx	r3
    } 
  }
  return status;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	40020080 	.word	0x40020080
 8008b94:	40020008 	.word	0x40020008
 8008b98:	4002001c 	.word	0x4002001c
 8008b9c:	40020030 	.word	0x40020030
 8008ba0:	40020044 	.word	0x40020044
 8008ba4:	40020058 	.word	0x40020058
 8008ba8:	4002006c 	.word	0x4002006c
 8008bac:	40020408 	.word	0x40020408
 8008bb0:	4002041c 	.word	0x4002041c
 8008bb4:	40020430 	.word	0x40020430
 8008bb8:	40020444 	.word	0x40020444
 8008bbc:	40020400 	.word	0x40020400
 8008bc0:	40020000 	.word	0x40020000

08008bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b08b      	sub	sp, #44	; 0x2c
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bd6:	e179      	b.n	8008ecc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008bd8:	2201      	movs	r2, #1
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	4013      	ands	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	f040 8168 	bne.w	8008ec6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	4a96      	ldr	r2, [pc, #600]	; (8008e54 <HAL_GPIO_Init+0x290>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d05e      	beq.n	8008cbe <HAL_GPIO_Init+0xfa>
 8008c00:	4a94      	ldr	r2, [pc, #592]	; (8008e54 <HAL_GPIO_Init+0x290>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d875      	bhi.n	8008cf2 <HAL_GPIO_Init+0x12e>
 8008c06:	4a94      	ldr	r2, [pc, #592]	; (8008e58 <HAL_GPIO_Init+0x294>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d058      	beq.n	8008cbe <HAL_GPIO_Init+0xfa>
 8008c0c:	4a92      	ldr	r2, [pc, #584]	; (8008e58 <HAL_GPIO_Init+0x294>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d86f      	bhi.n	8008cf2 <HAL_GPIO_Init+0x12e>
 8008c12:	4a92      	ldr	r2, [pc, #584]	; (8008e5c <HAL_GPIO_Init+0x298>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d052      	beq.n	8008cbe <HAL_GPIO_Init+0xfa>
 8008c18:	4a90      	ldr	r2, [pc, #576]	; (8008e5c <HAL_GPIO_Init+0x298>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d869      	bhi.n	8008cf2 <HAL_GPIO_Init+0x12e>
 8008c1e:	4a90      	ldr	r2, [pc, #576]	; (8008e60 <HAL_GPIO_Init+0x29c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d04c      	beq.n	8008cbe <HAL_GPIO_Init+0xfa>
 8008c24:	4a8e      	ldr	r2, [pc, #568]	; (8008e60 <HAL_GPIO_Init+0x29c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d863      	bhi.n	8008cf2 <HAL_GPIO_Init+0x12e>
 8008c2a:	4a8e      	ldr	r2, [pc, #568]	; (8008e64 <HAL_GPIO_Init+0x2a0>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d046      	beq.n	8008cbe <HAL_GPIO_Init+0xfa>
 8008c30:	4a8c      	ldr	r2, [pc, #560]	; (8008e64 <HAL_GPIO_Init+0x2a0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d85d      	bhi.n	8008cf2 <HAL_GPIO_Init+0x12e>
 8008c36:	2b12      	cmp	r3, #18
 8008c38:	d82a      	bhi.n	8008c90 <HAL_GPIO_Init+0xcc>
 8008c3a:	2b12      	cmp	r3, #18
 8008c3c:	d859      	bhi.n	8008cf2 <HAL_GPIO_Init+0x12e>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <HAL_GPIO_Init+0x80>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008cbf 	.word	0x08008cbf
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008cab 	.word	0x08008cab
 8008c50:	08008ced 	.word	0x08008ced
 8008c54:	08008cf3 	.word	0x08008cf3
 8008c58:	08008cf3 	.word	0x08008cf3
 8008c5c:	08008cf3 	.word	0x08008cf3
 8008c60:	08008cf3 	.word	0x08008cf3
 8008c64:	08008cf3 	.word	0x08008cf3
 8008c68:	08008cf3 	.word	0x08008cf3
 8008c6c:	08008cf3 	.word	0x08008cf3
 8008c70:	08008cf3 	.word	0x08008cf3
 8008c74:	08008cf3 	.word	0x08008cf3
 8008c78:	08008cf3 	.word	0x08008cf3
 8008c7c:	08008cf3 	.word	0x08008cf3
 8008c80:	08008cf3 	.word	0x08008cf3
 8008c84:	08008cf3 	.word	0x08008cf3
 8008c88:	08008ca1 	.word	0x08008ca1
 8008c8c:	08008cb5 	.word	0x08008cb5
 8008c90:	4a75      	ldr	r2, [pc, #468]	; (8008e68 <HAL_GPIO_Init+0x2a4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d013      	beq.n	8008cbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008c96:	e02c      	b.n	8008cf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	623b      	str	r3, [r7, #32]
          break;
 8008c9e:	e029      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	623b      	str	r3, [r7, #32]
          break;
 8008ca8:	e024      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	623b      	str	r3, [r7, #32]
          break;
 8008cb2:	e01f      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	330c      	adds	r3, #12
 8008cba:	623b      	str	r3, [r7, #32]
          break;
 8008cbc:	e01a      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008cc6:	2304      	movs	r3, #4
 8008cc8:	623b      	str	r3, [r7, #32]
          break;
 8008cca:	e013      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d105      	bne.n	8008ce0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	611a      	str	r2, [r3, #16]
          break;
 8008cde:	e009      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	615a      	str	r2, [r3, #20]
          break;
 8008cea:	e003      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008cec:	2300      	movs	r3, #0
 8008cee:	623b      	str	r3, [r7, #32]
          break;
 8008cf0:	e000      	b.n	8008cf4 <HAL_GPIO_Init+0x130>
          break;
 8008cf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2bff      	cmp	r3, #255	; 0xff
 8008cf8:	d801      	bhi.n	8008cfe <HAL_GPIO_Init+0x13a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	e001      	b.n	8008d02 <HAL_GPIO_Init+0x13e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2bff      	cmp	r3, #255	; 0xff
 8008d08:	d802      	bhi.n	8008d10 <HAL_GPIO_Init+0x14c>
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	e002      	b.n	8008d16 <HAL_GPIO_Init+0x152>
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	3b08      	subs	r3, #8
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	210f      	movs	r1, #15
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	fa01 f303 	lsl.w	r3, r1, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	401a      	ands	r2, r3
 8008d28:	6a39      	ldr	r1, [r7, #32]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d30:	431a      	orrs	r2, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 80c1 	beq.w	8008ec6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008d44:	4b49      	ldr	r3, [pc, #292]	; (8008e6c <HAL_GPIO_Init+0x2a8>)
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	4a48      	ldr	r2, [pc, #288]	; (8008e6c <HAL_GPIO_Init+0x2a8>)
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6193      	str	r3, [r2, #24]
 8008d50:	4b46      	ldr	r3, [pc, #280]	; (8008e6c <HAL_GPIO_Init+0x2a8>)
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	60bb      	str	r3, [r7, #8]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008d5c:	4a44      	ldr	r2, [pc, #272]	; (8008e70 <HAL_GPIO_Init+0x2ac>)
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	089b      	lsrs	r3, r3, #2
 8008d62:	3302      	adds	r3, #2
 8008d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	220f      	movs	r2, #15
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a3c      	ldr	r2, [pc, #240]	; (8008e74 <HAL_GPIO_Init+0x2b0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01f      	beq.n	8008dc8 <HAL_GPIO_Init+0x204>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a3b      	ldr	r2, [pc, #236]	; (8008e78 <HAL_GPIO_Init+0x2b4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d019      	beq.n	8008dc4 <HAL_GPIO_Init+0x200>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a3a      	ldr	r2, [pc, #232]	; (8008e7c <HAL_GPIO_Init+0x2b8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <HAL_GPIO_Init+0x1fc>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a39      	ldr	r2, [pc, #228]	; (8008e80 <HAL_GPIO_Init+0x2bc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00d      	beq.n	8008dbc <HAL_GPIO_Init+0x1f8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a38      	ldr	r2, [pc, #224]	; (8008e84 <HAL_GPIO_Init+0x2c0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <HAL_GPIO_Init+0x1f4>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a37      	ldr	r2, [pc, #220]	; (8008e88 <HAL_GPIO_Init+0x2c4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d101      	bne.n	8008db4 <HAL_GPIO_Init+0x1f0>
 8008db0:	2305      	movs	r3, #5
 8008db2:	e00a      	b.n	8008dca <HAL_GPIO_Init+0x206>
 8008db4:	2306      	movs	r3, #6
 8008db6:	e008      	b.n	8008dca <HAL_GPIO_Init+0x206>
 8008db8:	2304      	movs	r3, #4
 8008dba:	e006      	b.n	8008dca <HAL_GPIO_Init+0x206>
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e004      	b.n	8008dca <HAL_GPIO_Init+0x206>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e002      	b.n	8008dca <HAL_GPIO_Init+0x206>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <HAL_GPIO_Init+0x206>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dcc:	f002 0203 	and.w	r2, r2, #3
 8008dd0:	0092      	lsls	r2, r2, #2
 8008dd2:	4093      	lsls	r3, r2
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008dda:	4925      	ldr	r1, [pc, #148]	; (8008e70 <HAL_GPIO_Init+0x2ac>)
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	089b      	lsrs	r3, r3, #2
 8008de0:	3302      	adds	r3, #2
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008df4:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	4924      	ldr	r1, [pc, #144]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	608b      	str	r3, [r1, #8]
 8008e00:	e006      	b.n	8008e10 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008e02:	4b22      	ldr	r3, [pc, #136]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	43db      	mvns	r3, r3
 8008e0a:	4920      	ldr	r1, [pc, #128]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d006      	beq.n	8008e2a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008e1c:	4b1b      	ldr	r3, [pc, #108]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	491a      	ldr	r1, [pc, #104]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	60cb      	str	r3, [r1, #12]
 8008e28:	e006      	b.n	8008e38 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008e2a:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	4916      	ldr	r1, [pc, #88]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d025      	beq.n	8008e90 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008e44:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	4910      	ldr	r1, [pc, #64]	; (8008e8c <HAL_GPIO_Init+0x2c8>)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	604b      	str	r3, [r1, #4]
 8008e50:	e025      	b.n	8008e9e <HAL_GPIO_Init+0x2da>
 8008e52:	bf00      	nop
 8008e54:	10320000 	.word	0x10320000
 8008e58:	10310000 	.word	0x10310000
 8008e5c:	10220000 	.word	0x10220000
 8008e60:	10210000 	.word	0x10210000
 8008e64:	10120000 	.word	0x10120000
 8008e68:	10110000 	.word	0x10110000
 8008e6c:	40021000 	.word	0x40021000
 8008e70:	40010000 	.word	0x40010000
 8008e74:	40010800 	.word	0x40010800
 8008e78:	40010c00 	.word	0x40010c00
 8008e7c:	40011000 	.word	0x40011000
 8008e80:	40011400 	.word	0x40011400
 8008e84:	40011800 	.word	0x40011800
 8008e88:	40011c00 	.word	0x40011c00
 8008e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008e90:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <HAL_GPIO_Init+0x324>)
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	43db      	mvns	r3, r3
 8008e98:	4913      	ldr	r1, [pc, #76]	; (8008ee8 <HAL_GPIO_Init+0x324>)
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d006      	beq.n	8008eb8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <HAL_GPIO_Init+0x324>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	490e      	ldr	r1, [pc, #56]	; (8008ee8 <HAL_GPIO_Init+0x324>)
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	600b      	str	r3, [r1, #0]
 8008eb6:	e006      	b.n	8008ec6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <HAL_GPIO_Init+0x324>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	43db      	mvns	r3, r3
 8008ec0:	4909      	ldr	r1, [pc, #36]	; (8008ee8 <HAL_GPIO_Init+0x324>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	3301      	adds	r3, #1
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f47f ae7e 	bne.w	8008bd8 <HAL_GPIO_Init+0x14>
  }
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	372c      	adds	r7, #44	; 0x2c
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr
 8008ee8:	40010400 	.word	0x40010400

08008eec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b089      	sub	sp, #36	; 0x24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008efa:	e0a6      	b.n	800904a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008efc:	2201      	movs	r2, #1
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	4013      	ands	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8099 	beq.w	8009044 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008f12:	4a54      	ldr	r2, [pc, #336]	; (8009064 <HAL_GPIO_DeInit+0x178>)
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	089b      	lsrs	r3, r3, #2
 8008f18:	3302      	adds	r3, #2
 8008f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f1e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	220f      	movs	r2, #15
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4013      	ands	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a4c      	ldr	r2, [pc, #304]	; (8009068 <HAL_GPIO_DeInit+0x17c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d01f      	beq.n	8008f7c <HAL_GPIO_DeInit+0x90>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a4b      	ldr	r2, [pc, #300]	; (800906c <HAL_GPIO_DeInit+0x180>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d019      	beq.n	8008f78 <HAL_GPIO_DeInit+0x8c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a4a      	ldr	r2, [pc, #296]	; (8009070 <HAL_GPIO_DeInit+0x184>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d013      	beq.n	8008f74 <HAL_GPIO_DeInit+0x88>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a49      	ldr	r2, [pc, #292]	; (8009074 <HAL_GPIO_DeInit+0x188>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00d      	beq.n	8008f70 <HAL_GPIO_DeInit+0x84>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a48      	ldr	r2, [pc, #288]	; (8009078 <HAL_GPIO_DeInit+0x18c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <HAL_GPIO_DeInit+0x80>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a47      	ldr	r2, [pc, #284]	; (800907c <HAL_GPIO_DeInit+0x190>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d101      	bne.n	8008f68 <HAL_GPIO_DeInit+0x7c>
 8008f64:	2305      	movs	r3, #5
 8008f66:	e00a      	b.n	8008f7e <HAL_GPIO_DeInit+0x92>
 8008f68:	2306      	movs	r3, #6
 8008f6a:	e008      	b.n	8008f7e <HAL_GPIO_DeInit+0x92>
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	e006      	b.n	8008f7e <HAL_GPIO_DeInit+0x92>
 8008f70:	2303      	movs	r3, #3
 8008f72:	e004      	b.n	8008f7e <HAL_GPIO_DeInit+0x92>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e002      	b.n	8008f7e <HAL_GPIO_DeInit+0x92>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <HAL_GPIO_DeInit+0x92>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	f002 0203 	and.w	r2, r2, #3
 8008f84:	0092      	lsls	r2, r2, #2
 8008f86:	4093      	lsls	r3, r2
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d132      	bne.n	8008ff4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008f8e:	4b3c      	ldr	r3, [pc, #240]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	43db      	mvns	r3, r3
 8008f96:	493a      	ldr	r1, [pc, #232]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008f9c:	4b38      	ldr	r3, [pc, #224]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	4936      	ldr	r1, [pc, #216]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008faa:	4b35      	ldr	r3, [pc, #212]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	4933      	ldr	r1, [pc, #204]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008fb8:	4b31      	ldr	r3, [pc, #196]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	43db      	mvns	r3, r3
 8008fc0:	492f      	ldr	r1, [pc, #188]	; (8009080 <HAL_GPIO_DeInit+0x194>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	220f      	movs	r2, #15
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008fd6:	4a23      	ldr	r2, [pc, #140]	; (8009064 <HAL_GPIO_DeInit+0x178>)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	089b      	lsrs	r3, r3, #2
 8008fdc:	3302      	adds	r3, #2
 8008fde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	43da      	mvns	r2, r3
 8008fe6:	481f      	ldr	r0, [pc, #124]	; (8009064 <HAL_GPIO_DeInit+0x178>)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	089b      	lsrs	r3, r3, #2
 8008fec:	400a      	ands	r2, r1
 8008fee:	3302      	adds	r3, #2
 8008ff0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	2bff      	cmp	r3, #255	; 0xff
 8008ff8:	d801      	bhi.n	8008ffe <HAL_GPIO_DeInit+0x112>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	e001      	b.n	8009002 <HAL_GPIO_DeInit+0x116>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3304      	adds	r3, #4
 8009002:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	2bff      	cmp	r3, #255	; 0xff
 8009008:	d802      	bhi.n	8009010 <HAL_GPIO_DeInit+0x124>
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	e002      	b.n	8009016 <HAL_GPIO_DeInit+0x12a>
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3b08      	subs	r3, #8
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	210f      	movs	r1, #15
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	fa01 f303 	lsl.w	r3, r1, r3
 8009024:	43db      	mvns	r3, r3
 8009026:	401a      	ands	r2, r3
 8009028:	2104      	movs	r1, #4
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	fa01 f303 	lsl.w	r3, r1, r3
 8009030:	431a      	orrs	r2, r3
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	43db      	mvns	r3, r3
 800903e:	401a      	ands	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	3301      	adds	r3, #1
 8009048:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	fa22 f303 	lsr.w	r3, r2, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	f47f af52 	bne.w	8008efc <HAL_GPIO_DeInit+0x10>
  }
}
 8009058:	bf00      	nop
 800905a:	bf00      	nop
 800905c:	3724      	adds	r7, #36	; 0x24
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr
 8009064:	40010000 	.word	0x40010000
 8009068:	40010800 	.word	0x40010800
 800906c:	40010c00 	.word	0x40010c00
 8009070:	40011000 	.word	0x40011000
 8009074:	40011400 	.word	0x40011400
 8009078:	40011800 	.word	0x40011800
 800907c:	40011c00 	.word	0x40011c00
 8009080:	40010400 	.word	0x40010400

08009084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	887b      	ldrh	r3, [r7, #2]
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800909c:	2301      	movs	r3, #1
 800909e:	73fb      	strb	r3, [r7, #15]
 80090a0:	e001      	b.n	80090a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr

080090b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	807b      	strh	r3, [r7, #2]
 80090be:	4613      	mov	r3, r2
 80090c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090c2:	787b      	ldrb	r3, [r7, #1]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090c8:	887a      	ldrh	r2, [r7, #2]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80090ce:	e003      	b.n	80090d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80090d0:	887b      	ldrh	r3, [r7, #2]
 80090d2:	041a      	lsls	r2, r3, #16
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	611a      	str	r2, [r3, #16]
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr

080090e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090f4:	887a      	ldrh	r2, [r7, #2]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4013      	ands	r3, r2
 80090fa:	041a      	lsls	r2, r3, #16
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	43d9      	mvns	r1, r3
 8009100:	887b      	ldrh	r3, [r7, #2]
 8009102:	400b      	ands	r3, r1
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	611a      	str	r2, [r3, #16]
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e12b      	b.n	800937e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d106      	bne.n	8009140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fe fff8 	bl	8008130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2224      	movs	r2, #36	; 0x24
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0201 	bic.w	r2, r2, #1
 8009156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009178:	f001 fdb8 	bl	800acec <HAL_RCC_GetPCLK1Freq>
 800917c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	4a81      	ldr	r2, [pc, #516]	; (8009388 <HAL_I2C_Init+0x274>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d807      	bhi.n	8009198 <HAL_I2C_Init+0x84>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a80      	ldr	r2, [pc, #512]	; (800938c <HAL_I2C_Init+0x278>)
 800918c:	4293      	cmp	r3, r2
 800918e:	bf94      	ite	ls
 8009190:	2301      	movls	r3, #1
 8009192:	2300      	movhi	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	e006      	b.n	80091a6 <HAL_I2C_Init+0x92>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4a7d      	ldr	r2, [pc, #500]	; (8009390 <HAL_I2C_Init+0x27c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	bf94      	ite	ls
 80091a0:	2301      	movls	r3, #1
 80091a2:	2300      	movhi	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e0e7      	b.n	800937e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4a78      	ldr	r2, [pc, #480]	; (8009394 <HAL_I2C_Init+0x280>)
 80091b2:	fba2 2303 	umull	r2, r3, r2, r3
 80091b6:	0c9b      	lsrs	r3, r3, #18
 80091b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	4a6a      	ldr	r2, [pc, #424]	; (8009388 <HAL_I2C_Init+0x274>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d802      	bhi.n	80091e8 <HAL_I2C_Init+0xd4>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3301      	adds	r3, #1
 80091e6:	e009      	b.n	80091fc <HAL_I2C_Init+0xe8>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091ee:	fb02 f303 	mul.w	r3, r2, r3
 80091f2:	4a69      	ldr	r2, [pc, #420]	; (8009398 <HAL_I2C_Init+0x284>)
 80091f4:	fba2 2303 	umull	r2, r3, r2, r3
 80091f8:	099b      	lsrs	r3, r3, #6
 80091fa:	3301      	adds	r3, #1
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	430b      	orrs	r3, r1
 8009202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800920e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	495c      	ldr	r1, [pc, #368]	; (8009388 <HAL_I2C_Init+0x274>)
 8009218:	428b      	cmp	r3, r1
 800921a:	d819      	bhi.n	8009250 <HAL_I2C_Init+0x13c>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	1e59      	subs	r1, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	fbb1 f3f3 	udiv	r3, r1, r3
 800922a:	1c59      	adds	r1, r3, #1
 800922c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009230:	400b      	ands	r3, r1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <HAL_I2C_Init+0x138>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	1e59      	subs	r1, r3, #1
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	fbb1 f3f3 	udiv	r3, r1, r3
 8009244:	3301      	adds	r3, #1
 8009246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800924a:	e051      	b.n	80092f0 <HAL_I2C_Init+0x1dc>
 800924c:	2304      	movs	r3, #4
 800924e:	e04f      	b.n	80092f0 <HAL_I2C_Init+0x1dc>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d111      	bne.n	800927c <HAL_I2C_Init+0x168>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	1e58      	subs	r0, r3, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6859      	ldr	r1, [r3, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	440b      	add	r3, r1
 8009266:	fbb0 f3f3 	udiv	r3, r0, r3
 800926a:	3301      	adds	r3, #1
 800926c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009270:	2b00      	cmp	r3, #0
 8009272:	bf0c      	ite	eq
 8009274:	2301      	moveq	r3, #1
 8009276:	2300      	movne	r3, #0
 8009278:	b2db      	uxtb	r3, r3
 800927a:	e012      	b.n	80092a2 <HAL_I2C_Init+0x18e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	1e58      	subs	r0, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6859      	ldr	r1, [r3, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	0099      	lsls	r1, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009292:	3301      	adds	r3, #1
 8009294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf0c      	ite	eq
 800929c:	2301      	moveq	r3, #1
 800929e:	2300      	movne	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <HAL_I2C_Init+0x196>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e022      	b.n	80092f0 <HAL_I2C_Init+0x1dc>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10e      	bne.n	80092d0 <HAL_I2C_Init+0x1bc>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1e58      	subs	r0, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6859      	ldr	r1, [r3, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	440b      	add	r3, r1
 80092c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80092c4:	3301      	adds	r3, #1
 80092c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ce:	e00f      	b.n	80092f0 <HAL_I2C_Init+0x1dc>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	1e58      	subs	r0, r3, #1
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6859      	ldr	r1, [r3, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	0099      	lsls	r1, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80092e6:	3301      	adds	r3, #1
 80092e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	6809      	ldr	r1, [r1, #0]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69da      	ldr	r2, [r3, #28]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	431a      	orrs	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800931e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6911      	ldr	r1, [r2, #16]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	68d2      	ldr	r2, [r2, #12]
 800932a:	4311      	orrs	r1, r2
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	430b      	orrs	r3, r1
 8009332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	695a      	ldr	r2, [r3, #20]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	000186a0 	.word	0x000186a0
 800938c:	001e847f 	.word	0x001e847f
 8009390:	003d08ff 	.word	0x003d08ff
 8009394:	431bde83 	.word	0x431bde83
 8009398:	10624dd3 	.word	0x10624dd3

0800939c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e021      	b.n	80093f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2224      	movs	r2, #36	; 0x24
 80093b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 0201 	bic.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7fe fef0 	bl	80081ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	607a      	str	r2, [r7, #4]
 8009406:	461a      	mov	r2, r3
 8009408:	460b      	mov	r3, r1
 800940a:	817b      	strh	r3, [r7, #10]
 800940c:	4613      	mov	r3, r2
 800940e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009410:	f7ff f85e 	bl	80084d0 <HAL_GetTick>
 8009414:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b20      	cmp	r3, #32
 8009420:	f040 80e0 	bne.w	80095e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	2319      	movs	r3, #25
 800942a:	2201      	movs	r2, #1
 800942c:	4970      	ldr	r1, [pc, #448]	; (80095f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fe5c 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800943a:	2302      	movs	r3, #2
 800943c:	e0d3      	b.n	80095e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_I2C_Master_Transmit+0x50>
 8009448:	2302      	movs	r3, #2
 800944a:	e0cc      	b.n	80095e6 <HAL_I2C_Master_Transmit+0x1ea>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b01      	cmp	r3, #1
 8009460:	d007      	beq.n	8009472 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 0201 	orr.w	r2, r2, #1
 8009470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2221      	movs	r2, #33	; 0x21
 8009486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2210      	movs	r2, #16
 800948e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	893a      	ldrh	r2, [r7, #8]
 80094a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a50      	ldr	r2, [pc, #320]	; (80095f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80094b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80094b4:	8979      	ldrh	r1, [r7, #10]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6a3a      	ldr	r2, [r7, #32]
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fc16 	bl	8009cec <I2C_MasterRequestWrite>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e08d      	b.n	80095e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ca:	2300      	movs	r3, #0
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80094e0:	e066      	b.n	80095b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	6a39      	ldr	r1, [r7, #32]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 ff1a 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00d      	beq.n	800950e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d107      	bne.n	800950a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e06b      	b.n	80095e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009528:	b29b      	uxth	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	b29a      	uxth	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b04      	cmp	r3, #4
 800954a:	d11b      	bne.n	8009584 <HAL_I2C_Master_Transmit+0x188>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	d017      	beq.n	8009584 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	781a      	ldrb	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956e:	b29b      	uxth	r3, r3
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	6a39      	ldr	r1, [r7, #32]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 ff11 	bl	800a3b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00d      	beq.n	80095b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	2b04      	cmp	r3, #4
 800959a:	d107      	bne.n	80095ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e01a      	b.n	80095e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d194      	bne.n	80094e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e000      	b.n	80095e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80095e4:	2302      	movs	r3, #2
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	00100002 	.word	0x00100002
 80095f4:	ffff0000 	.word	0xffff0000

080095f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	4608      	mov	r0, r1
 8009602:	4611      	mov	r1, r2
 8009604:	461a      	mov	r2, r3
 8009606:	4603      	mov	r3, r0
 8009608:	817b      	strh	r3, [r7, #10]
 800960a:	460b      	mov	r3, r1
 800960c:	813b      	strh	r3, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009612:	f7fe ff5d 	bl	80084d0 <HAL_GetTick>
 8009616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b20      	cmp	r3, #32
 8009622:	f040 80d9 	bne.w	80097d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	2319      	movs	r3, #25
 800962c:	2201      	movs	r2, #1
 800962e:	496d      	ldr	r1, [pc, #436]	; (80097e4 <HAL_I2C_Mem_Write+0x1ec>)
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 fd5b 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800963c:	2302      	movs	r3, #2
 800963e:	e0cc      	b.n	80097da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009646:	2b01      	cmp	r3, #1
 8009648:	d101      	bne.n	800964e <HAL_I2C_Mem_Write+0x56>
 800964a:	2302      	movs	r3, #2
 800964c:	e0c5      	b.n	80097da <HAL_I2C_Mem_Write+0x1e2>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	d007      	beq.n	8009674 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2221      	movs	r2, #33	; 0x21
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2240      	movs	r2, #64	; 0x40
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a3a      	ldr	r2, [r7, #32]
 800969e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4a4d      	ldr	r2, [pc, #308]	; (80097e8 <HAL_I2C_Mem_Write+0x1f0>)
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80096b6:	88f8      	ldrh	r0, [r7, #6]
 80096b8:	893a      	ldrh	r2, [r7, #8]
 80096ba:	8979      	ldrh	r1, [r7, #10]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4603      	mov	r3, r0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fb92 	bl	8009df0 <I2C_RequestMemoryWrite>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d052      	beq.n	8009778 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e081      	b.n	80097da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 fe20 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00d      	beq.n	8009702 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d107      	bne.n	80096fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e06b      	b.n	80097da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971c:	3b01      	subs	r3, #1
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009728:	b29b      	uxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	b29a      	uxth	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b04      	cmp	r3, #4
 800973e:	d11b      	bne.n	8009778 <HAL_I2C_Mem_Write+0x180>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009744:	2b00      	cmp	r3, #0
 8009746:	d017      	beq.n	8009778 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976e:	b29b      	uxth	r3, r3
 8009770:	3b01      	subs	r3, #1
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1aa      	bne.n	80096d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 fe13 	bl	800a3b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00d      	beq.n	80097ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009794:	2b04      	cmp	r3, #4
 8009796:	d107      	bne.n	80097a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e016      	b.n	80097da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2220      	movs	r2, #32
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	e000      	b.n	80097da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80097d8:	2302      	movs	r3, #2
  }
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	00100002 	.word	0x00100002
 80097e8:	ffff0000 	.word	0xffff0000

080097ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08c      	sub	sp, #48	; 0x30
 80097f0:	af02      	add	r7, sp, #8
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	4608      	mov	r0, r1
 80097f6:	4611      	mov	r1, r2
 80097f8:	461a      	mov	r2, r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	817b      	strh	r3, [r7, #10]
 80097fe:	460b      	mov	r3, r1
 8009800:	813b      	strh	r3, [r7, #8]
 8009802:	4613      	mov	r3, r2
 8009804:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800980a:	f7fe fe61 	bl	80084d0 <HAL_GetTick>
 800980e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b20      	cmp	r3, #32
 800981a:	f040 8244 	bne.w	8009ca6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	2319      	movs	r3, #25
 8009824:	2201      	movs	r2, #1
 8009826:	4982      	ldr	r1, [pc, #520]	; (8009a30 <HAL_I2C_Mem_Read+0x244>)
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fc5f 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009834:	2302      	movs	r3, #2
 8009836:	e237      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <HAL_I2C_Mem_Read+0x5a>
 8009842:	2302      	movs	r3, #2
 8009844:	e230      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	d007      	beq.n	800986c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800987a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2222      	movs	r2, #34	; 0x22
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2240      	movs	r2, #64	; 0x40
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800989c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4a62      	ldr	r2, [pc, #392]	; (8009a34 <HAL_I2C_Mem_Read+0x248>)
 80098ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098ae:	88f8      	ldrh	r0, [r7, #6]
 80098b0:	893a      	ldrh	r2, [r7, #8]
 80098b2:	8979      	ldrh	r1, [r7, #10]
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	4603      	mov	r3, r0
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fb2c 	bl	8009f1c <I2C_RequestMemoryRead>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e1ec      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d113      	bne.n	80098fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d6:	2300      	movs	r3, #0
 80098d8:	61fb      	str	r3, [r7, #28]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e1c0      	b.n	8009c80 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009902:	2b01      	cmp	r3, #1
 8009904:	d11e      	bne.n	8009944 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009914:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009916:	b672      	cpsid	i
}
 8009918:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800991a:	2300      	movs	r3, #0
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800993e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009940:	b662      	cpsie	i
}
 8009942:	e035      	b.n	80099b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009948:	2b02      	cmp	r3, #2
 800994a:	d11e      	bne.n	800998a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800995a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800995c:	b672      	cpsid	i
}
 800995e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009986:	b662      	cpsie	i
}
 8009988:	e012      	b.n	80099b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009998:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80099b0:	e166      	b.n	8009c80 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	f200 811f 	bhi.w	8009bfa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d123      	bne.n	8009a0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fd39 	bl	800a440 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e167      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a0a:	e139      	b.n	8009c80 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d152      	bne.n	8009aba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4906      	ldr	r1, [pc, #24]	; (8009a38 <HAL_I2C_Mem_Read+0x24c>)
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fb64 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d008      	beq.n	8009a3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e13c      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
 8009a2e:	bf00      	nop
 8009a30:	00100002 	.word	0x00100002
 8009a34:	ffff0000 	.word	0xffff0000
 8009a38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009a3c:	b672      	cpsid	i
}
 8009a3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009a82:	b662      	cpsie	i
}
 8009a84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691a      	ldr	r2, [r3, #16]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ab8:	e0e2      	b.n	8009c80 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	497b      	ldr	r1, [pc, #492]	; (8009cb0 <HAL_I2C_Mem_Read+0x4c4>)
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fb11 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0e9      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ae4:	b672      	cpsid	i
}
 8009ae6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691a      	ldr	r2, [r3, #16]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b1a:	4b66      	ldr	r3, [pc, #408]	; (8009cb4 <HAL_I2C_Mem_Read+0x4c8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	08db      	lsrs	r3, r3, #3
 8009b20:	4a65      	ldr	r2, [pc, #404]	; (8009cb8 <HAL_I2C_Mem_Read+0x4cc>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	0a1a      	lsrs	r2, r3, #8
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	00da      	lsls	r2, r3, #3
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d118      	bne.n	8009b72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	f043 0220 	orr.w	r2, r3, #32
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009b62:	b662      	cpsie	i
}
 8009b64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e09a      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d1d9      	bne.n	8009b34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009bc2:	b662      	cpsie	i
}
 8009bc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be2:	3b01      	subs	r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bf8:	e042      	b.n	8009c80 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fc1e 	bl	800a440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e04c      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d118      	bne.n	8009c80 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	b2d2      	uxtb	r2, r2
 8009c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f47f ae94 	bne.w	80099b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e000      	b.n	8009ca8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009ca6:	2302      	movs	r3, #2
  }
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3728      	adds	r7, #40	; 0x28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	00010004 	.word	0x00010004
 8009cb4:	200000a0 	.word	0x200000a0
 8009cb8:	14f8b589 	.word	0x14f8b589

08009cbc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cca:	b2db      	uxtb	r3, r3
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bc80      	pop	{r7}
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bc80      	pop	{r7}
 8009cea:	4770      	bx	lr

08009cec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d006      	beq.n	8009d16 <I2C_MasterRequestWrite+0x2a>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <I2C_MasterRequestWrite+0x2a>
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d14:	d108      	bne.n	8009d28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	e00b      	b.n	8009d40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	2b12      	cmp	r3, #18
 8009d2e:	d107      	bne.n	8009d40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 f9cd 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00d      	beq.n	8009d74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d103      	bne.n	8009d70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e035      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d7c:	d108      	bne.n	8009d90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d7e:	897b      	ldrh	r3, [r7, #10]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d8c:	611a      	str	r2, [r3, #16]
 8009d8e:	e01b      	b.n	8009dc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d90:	897b      	ldrh	r3, [r7, #10]
 8009d92:	11db      	asrs	r3, r3, #7
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0306 	and.w	r3, r3, #6
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f063 030f 	orn	r3, r3, #15
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	490e      	ldr	r1, [pc, #56]	; (8009de8 <I2C_MasterRequestWrite+0xfc>)
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 fa16 	bl	800a1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e010      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009dbe:	897b      	ldrh	r3, [r7, #10]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4907      	ldr	r1, [pc, #28]	; (8009dec <I2C_MasterRequestWrite+0x100>)
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 fa06 	bl	800a1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	00010008 	.word	0x00010008
 8009dec:	00010002 	.word	0x00010002

08009df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	4603      	mov	r3, r0
 8009e00:	817b      	strh	r3, [r7, #10]
 8009e02:	460b      	mov	r3, r1
 8009e04:	813b      	strh	r3, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f960 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00d      	beq.n	8009e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e40:	d103      	bne.n	8009e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e05f      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e4e:	897b      	ldrh	r3, [r7, #10]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	6a3a      	ldr	r2, [r7, #32]
 8009e62:	492d      	ldr	r1, [pc, #180]	; (8009f18 <I2C_RequestMemoryWrite+0x128>)
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f9bb 	bl	800a1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e04c      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8c:	6a39      	ldr	r1, [r7, #32]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fa46 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00d      	beq.n	8009eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d107      	bne.n	8009eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e02b      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d105      	bne.n	8009ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ebc:	893b      	ldrh	r3, [r7, #8]
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	611a      	str	r2, [r3, #16]
 8009ec6:	e021      	b.n	8009f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ec8:	893b      	ldrh	r3, [r7, #8]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed8:	6a39      	ldr	r1, [r7, #32]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fa20 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d107      	bne.n	8009efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e005      	b.n	8009f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f02:	893b      	ldrh	r3, [r7, #8]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	00010002 	.word	0x00010002

08009f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	4608      	mov	r0, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	817b      	strh	r3, [r7, #10]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	813b      	strh	r3, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 f8c2 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00d      	beq.n	8009f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f7c:	d103      	bne.n	8009f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e0aa      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f8a:	897b      	ldrh	r3, [r7, #10]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	6a3a      	ldr	r2, [r7, #32]
 8009f9e:	4952      	ldr	r1, [pc, #328]	; (800a0e8 <I2C_RequestMemoryRead+0x1cc>)
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f91d 	bl	800a1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e097      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc8:	6a39      	ldr	r1, [r7, #32]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 f9a8 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00d      	beq.n	8009ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	d107      	bne.n	8009fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e076      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d105      	bne.n	800a004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ff8:	893b      	ldrh	r3, [r7, #8]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	611a      	str	r2, [r3, #16]
 800a002:	e021      	b.n	800a048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a004:	893b      	ldrh	r3, [r7, #8]
 800a006:	0a1b      	lsrs	r3, r3, #8
 800a008:	b29b      	uxth	r3, r3
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a014:	6a39      	ldr	r1, [r7, #32]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f982 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00d      	beq.n	800a03e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	2b04      	cmp	r3, #4
 800a028:	d107      	bne.n	800a03a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e050      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a03e:	893b      	ldrh	r3, [r7, #8]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04a:	6a39      	ldr	r1, [r7, #32]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f967 	bl	800a320 <I2C_WaitOnTXEFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00d      	beq.n	800a074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	d107      	bne.n	800a070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a06e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e035      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f82b 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00d      	beq.n	800a0b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0aa:	d103      	bne.n	800a0b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e013      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a0b8:	897b      	ldrh	r3, [r7, #10]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	4906      	ldr	r1, [pc, #24]	; (800a0e8 <I2C_RequestMemoryRead+0x1cc>)
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f886 	bl	800a1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	00010002 	.word	0x00010002

0800a0ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0fc:	e048      	b.n	800a190 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d044      	beq.n	800a190 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a106:	f7fe f9e3 	bl	80084d0 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d302      	bcc.n	800a11c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d139      	bne.n	800a190 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	0c1b      	lsrs	r3, r3, #16
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b01      	cmp	r3, #1
 800a124:	d10d      	bne.n	800a142 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	43da      	mvns	r2, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	4013      	ands	r3, r2
 800a132:	b29b      	uxth	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	bf0c      	ite	eq
 800a138:	2301      	moveq	r3, #1
 800a13a:	2300      	movne	r3, #0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	461a      	mov	r2, r3
 800a140:	e00c      	b.n	800a15c <I2C_WaitOnFlagUntilTimeout+0x70>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	43da      	mvns	r2, r3
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4013      	ands	r3, r2
 800a14e:	b29b      	uxth	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	bf0c      	ite	eq
 800a154:	2301      	moveq	r3, #1
 800a156:	2300      	movne	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d116      	bne.n	800a190 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17c:	f043 0220 	orr.w	r2, r3, #32
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e023      	b.n	800a1d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	0c1b      	lsrs	r3, r3, #16
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b01      	cmp	r3, #1
 800a198:	d10d      	bne.n	800a1b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	43da      	mvns	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bf0c      	ite	eq
 800a1ac:	2301      	moveq	r3, #1
 800a1ae:	2300      	movne	r3, #0
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	e00c      	b.n	800a1d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	43da      	mvns	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bf0c      	ite	eq
 800a1c8:	2301      	moveq	r3, #1
 800a1ca:	2300      	movne	r3, #0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d093      	beq.n	800a0fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
 800a1ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1ee:	e071      	b.n	800a2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1fe:	d123      	bne.n	800a248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a20e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2220      	movs	r2, #32
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	f043 0204 	orr.w	r2, r3, #4
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e067      	b.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d041      	beq.n	800a2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a250:	f7fe f93e 	bl	80084d0 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d302      	bcc.n	800a266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d136      	bne.n	800a2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10c      	bne.n	800a28a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	43da      	mvns	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	4013      	ands	r3, r2
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bf14      	ite	ne
 800a282:	2301      	movne	r3, #1
 800a284:	2300      	moveq	r3, #0
 800a286:	b2db      	uxtb	r3, r3
 800a288:	e00b      	b.n	800a2a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	43da      	mvns	r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	4013      	ands	r3, r2
 800a296:	b29b      	uxth	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bf14      	ite	ne
 800a29c:	2301      	movne	r3, #1
 800a29e:	2300      	moveq	r3, #0
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d016      	beq.n	800a2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	f043 0220 	orr.w	r2, r3, #32
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e021      	b.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	0c1b      	lsrs	r3, r3, #16
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d10c      	bne.n	800a2f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	43da      	mvns	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bf14      	ite	ne
 800a2f0:	2301      	movne	r3, #1
 800a2f2:	2300      	moveq	r3, #0
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	e00b      	b.n	800a310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	43da      	mvns	r2, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4013      	ands	r3, r2
 800a304:	b29b      	uxth	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	bf14      	ite	ne
 800a30a:	2301      	movne	r3, #1
 800a30c:	2300      	moveq	r3, #0
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	f47f af6d 	bne.w	800a1f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a32c:	e034      	b.n	800a398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f8e3 	bl	800a4fa <I2C_IsAcknowledgeFailed>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e034      	b.n	800a3a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	d028      	beq.n	800a398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a346:	f7fe f8c3 	bl	80084d0 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	429a      	cmp	r2, r3
 800a354:	d302      	bcc.n	800a35c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d11d      	bne.n	800a398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a366:	2b80      	cmp	r3, #128	; 0x80
 800a368:	d016      	beq.n	800a398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2220      	movs	r2, #32
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	f043 0220 	orr.w	r2, r3, #32
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e007      	b.n	800a3a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a2:	2b80      	cmp	r3, #128	; 0x80
 800a3a4:	d1c3      	bne.n	800a32e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3bc:	e034      	b.n	800a428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f89b 	bl	800a4fa <I2C_IsAcknowledgeFailed>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e034      	b.n	800a438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d4:	d028      	beq.n	800a428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3d6:	f7fe f87b 	bl	80084d0 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d11d      	bne.n	800a428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d016      	beq.n	800a428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2220      	movs	r2, #32
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	f043 0220 	orr.w	r2, r3, #32
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e007      	b.n	800a438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b04      	cmp	r3, #4
 800a434:	d1c3      	bne.n	800a3be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a44c:	e049      	b.n	800a4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	f003 0310 	and.w	r3, r3, #16
 800a458:	2b10      	cmp	r3, #16
 800a45a:	d119      	bne.n	800a490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0210 	mvn.w	r2, #16
 800a464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2220      	movs	r2, #32
 800a470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e030      	b.n	800a4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a490:	f7fe f81e 	bl	80084d0 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d302      	bcc.n	800a4a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d11d      	bne.n	800a4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b0:	2b40      	cmp	r3, #64	; 0x40
 800a4b2:	d016      	beq.n	800a4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	f043 0220 	orr.w	r2, r3, #32
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e007      	b.n	800a4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b40      	cmp	r3, #64	; 0x40
 800a4ee:	d1ae      	bne.n	800a44e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a50c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a510:	d11b      	bne.n	800a54a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a51a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	f043 0204 	orr.w	r2, r3, #4
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	bc80      	pop	{r7}
 800a554:	4770      	bx	lr
	...

0800a558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e272      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 8087 	beq.w	800a686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a578:	4b92      	ldr	r3, [pc, #584]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f003 030c 	and.w	r3, r3, #12
 800a580:	2b04      	cmp	r3, #4
 800a582:	d00c      	beq.n	800a59e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a584:	4b8f      	ldr	r3, [pc, #572]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f003 030c 	and.w	r3, r3, #12
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d112      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x5e>
 800a590:	4b8c      	ldr	r3, [pc, #560]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59c:	d10b      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a59e:	4b89      	ldr	r3, [pc, #548]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d06c      	beq.n	800a684 <HAL_RCC_OscConfig+0x12c>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d168      	bne.n	800a684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e24c      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5be:	d106      	bne.n	800a5ce <HAL_RCC_OscConfig+0x76>
 800a5c0:	4b80      	ldr	r3, [pc, #512]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a7f      	ldr	r2, [pc, #508]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	e02e      	b.n	800a62c <HAL_RCC_OscConfig+0xd4>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10c      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x98>
 800a5d6:	4b7b      	ldr	r3, [pc, #492]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a7a      	ldr	r2, [pc, #488]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	4b78      	ldr	r3, [pc, #480]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a77      	ldr	r2, [pc, #476]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	e01d      	b.n	800a62c <HAL_RCC_OscConfig+0xd4>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5f8:	d10c      	bne.n	800a614 <HAL_RCC_OscConfig+0xbc>
 800a5fa:	4b72      	ldr	r3, [pc, #456]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a71      	ldr	r2, [pc, #452]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	4b6f      	ldr	r3, [pc, #444]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a6e      	ldr	r2, [pc, #440]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a60c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	e00b      	b.n	800a62c <HAL_RCC_OscConfig+0xd4>
 800a614:	4b6b      	ldr	r3, [pc, #428]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a6a      	ldr	r2, [pc, #424]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a61a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	4b68      	ldr	r3, [pc, #416]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a67      	ldr	r2, [pc, #412]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a62a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d013      	beq.n	800a65c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a634:	f7fd ff4c 	bl	80084d0 <HAL_GetTick>
 800a638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a63a:	e008      	b.n	800a64e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a63c:	f7fd ff48 	bl	80084d0 <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	2b64      	cmp	r3, #100	; 0x64
 800a648:	d901      	bls.n	800a64e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e200      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a64e:	4b5d      	ldr	r3, [pc, #372]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0f0      	beq.n	800a63c <HAL_RCC_OscConfig+0xe4>
 800a65a:	e014      	b.n	800a686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a65c:	f7fd ff38 	bl	80084d0 <HAL_GetTick>
 800a660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a662:	e008      	b.n	800a676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a664:	f7fd ff34 	bl	80084d0 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	2b64      	cmp	r3, #100	; 0x64
 800a670:	d901      	bls.n	800a676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e1ec      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a676:	4b53      	ldr	r3, [pc, #332]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1f0      	bne.n	800a664 <HAL_RCC_OscConfig+0x10c>
 800a682:	e000      	b.n	800a686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d063      	beq.n	800a75a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a692:	4b4c      	ldr	r3, [pc, #304]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f003 030c 	and.w	r3, r3, #12
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a69e:	4b49      	ldr	r3, [pc, #292]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f003 030c 	and.w	r3, r3, #12
 800a6a6:	2b08      	cmp	r3, #8
 800a6a8:	d11c      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x18c>
 800a6aa:	4b46      	ldr	r3, [pc, #280]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d116      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6b6:	4b43      	ldr	r3, [pc, #268]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 0302 	and.w	r3, r3, #2
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d005      	beq.n	800a6ce <HAL_RCC_OscConfig+0x176>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d001      	beq.n	800a6ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e1c0      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6ce:	4b3d      	ldr	r3, [pc, #244]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	4939      	ldr	r1, [pc, #228]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6e2:	e03a      	b.n	800a75a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d020      	beq.n	800a72e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6ec:	4b36      	ldr	r3, [pc, #216]	; (800a7c8 <HAL_RCC_OscConfig+0x270>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f2:	f7fd feed 	bl	80084d0 <HAL_GetTick>
 800a6f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6f8:	e008      	b.n	800a70c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6fa:	f7fd fee9 	bl	80084d0 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	2b02      	cmp	r3, #2
 800a706:	d901      	bls.n	800a70c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e1a1      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a70c:	4b2d      	ldr	r3, [pc, #180]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0302 	and.w	r3, r3, #2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0f0      	beq.n	800a6fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a718:	4b2a      	ldr	r3, [pc, #168]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	4927      	ldr	r1, [pc, #156]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	e015      	b.n	800a75a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a72e:	4b26      	ldr	r3, [pc, #152]	; (800a7c8 <HAL_RCC_OscConfig+0x270>)
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a734:	f7fd fecc 	bl	80084d0 <HAL_GetTick>
 800a738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a73c:	f7fd fec8 	bl	80084d0 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e180      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a74e:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0302 	and.w	r3, r3, #2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f0      	bne.n	800a73c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b00      	cmp	r3, #0
 800a764:	d03a      	beq.n	800a7dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d019      	beq.n	800a7a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a76e:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <HAL_RCC_OscConfig+0x274>)
 800a770:	2201      	movs	r2, #1
 800a772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a774:	f7fd feac 	bl	80084d0 <HAL_GetTick>
 800a778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a77a:	e008      	b.n	800a78e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a77c:	f7fd fea8 	bl	80084d0 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e160      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a78e:	4b0d      	ldr	r3, [pc, #52]	; (800a7c4 <HAL_RCC_OscConfig+0x26c>)
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0f0      	beq.n	800a77c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a79a:	2001      	movs	r0, #1
 800a79c:	f000 face 	bl	800ad3c <RCC_Delay>
 800a7a0:	e01c      	b.n	800a7dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7a2:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <HAL_RCC_OscConfig+0x274>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7a8:	f7fd fe92 	bl	80084d0 <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7ae:	e00f      	b.n	800a7d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7b0:	f7fd fe8e 	bl	80084d0 <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d908      	bls.n	800a7d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e146      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
 800a7c2:	bf00      	nop
 800a7c4:	40021000 	.word	0x40021000
 800a7c8:	42420000 	.word	0x42420000
 800a7cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7d0:	4b92      	ldr	r3, [pc, #584]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e9      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 80a6 	beq.w	800a936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7ee:	4b8b      	ldr	r3, [pc, #556]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10d      	bne.n	800a816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7fa:	4b88      	ldr	r3, [pc, #544]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	4a87      	ldr	r2, [pc, #540]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a804:	61d3      	str	r3, [r2, #28]
 800a806:	4b85      	ldr	r3, [pc, #532]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a80e:	60bb      	str	r3, [r7, #8]
 800a810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a812:	2301      	movs	r3, #1
 800a814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a816:	4b82      	ldr	r3, [pc, #520]	; (800aa20 <HAL_RCC_OscConfig+0x4c8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d118      	bne.n	800a854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a822:	4b7f      	ldr	r3, [pc, #508]	; (800aa20 <HAL_RCC_OscConfig+0x4c8>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a7e      	ldr	r2, [pc, #504]	; (800aa20 <HAL_RCC_OscConfig+0x4c8>)
 800a828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a82c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a82e:	f7fd fe4f 	bl	80084d0 <HAL_GetTick>
 800a832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a834:	e008      	b.n	800a848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a836:	f7fd fe4b 	bl	80084d0 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	2b64      	cmp	r3, #100	; 0x64
 800a842:	d901      	bls.n	800a848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e103      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a848:	4b75      	ldr	r3, [pc, #468]	; (800aa20 <HAL_RCC_OscConfig+0x4c8>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a850:	2b00      	cmp	r3, #0
 800a852:	d0f0      	beq.n	800a836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d106      	bne.n	800a86a <HAL_RCC_OscConfig+0x312>
 800a85c:	4b6f      	ldr	r3, [pc, #444]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	4a6e      	ldr	r2, [pc, #440]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	6213      	str	r3, [r2, #32]
 800a868:	e02d      	b.n	800a8c6 <HAL_RCC_OscConfig+0x36e>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10c      	bne.n	800a88c <HAL_RCC_OscConfig+0x334>
 800a872:	4b6a      	ldr	r3, [pc, #424]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	4a69      	ldr	r2, [pc, #420]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a878:	f023 0301 	bic.w	r3, r3, #1
 800a87c:	6213      	str	r3, [r2, #32]
 800a87e:	4b67      	ldr	r3, [pc, #412]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	4a66      	ldr	r2, [pc, #408]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a884:	f023 0304 	bic.w	r3, r3, #4
 800a888:	6213      	str	r3, [r2, #32]
 800a88a:	e01c      	b.n	800a8c6 <HAL_RCC_OscConfig+0x36e>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	2b05      	cmp	r3, #5
 800a892:	d10c      	bne.n	800a8ae <HAL_RCC_OscConfig+0x356>
 800a894:	4b61      	ldr	r3, [pc, #388]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	4a60      	ldr	r2, [pc, #384]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a89a:	f043 0304 	orr.w	r3, r3, #4
 800a89e:	6213      	str	r3, [r2, #32]
 800a8a0:	4b5e      	ldr	r3, [pc, #376]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	4a5d      	ldr	r2, [pc, #372]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8a6:	f043 0301 	orr.w	r3, r3, #1
 800a8aa:	6213      	str	r3, [r2, #32]
 800a8ac:	e00b      	b.n	800a8c6 <HAL_RCC_OscConfig+0x36e>
 800a8ae:	4b5b      	ldr	r3, [pc, #364]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	4a5a      	ldr	r2, [pc, #360]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	6213      	str	r3, [r2, #32]
 800a8ba:	4b58      	ldr	r3, [pc, #352]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	4a57      	ldr	r2, [pc, #348]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8c0:	f023 0304 	bic.w	r3, r3, #4
 800a8c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d015      	beq.n	800a8fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8ce:	f7fd fdff 	bl	80084d0 <HAL_GetTick>
 800a8d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8d4:	e00a      	b.n	800a8ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8d6:	f7fd fdfb 	bl	80084d0 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e0b1      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8ec:	4b4b      	ldr	r3, [pc, #300]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0ee      	beq.n	800a8d6 <HAL_RCC_OscConfig+0x37e>
 800a8f8:	e014      	b.n	800a924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8fa:	f7fd fde9 	bl	80084d0 <HAL_GetTick>
 800a8fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a900:	e00a      	b.n	800a918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a902:	f7fd fde5 	bl	80084d0 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a910:	4293      	cmp	r3, r2
 800a912:	d901      	bls.n	800a918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e09b      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a918:	4b40      	ldr	r3, [pc, #256]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	f003 0302 	and.w	r3, r3, #2
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1ee      	bne.n	800a902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d105      	bne.n	800a936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a92a:	4b3c      	ldr	r3, [pc, #240]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	4a3b      	ldr	r2, [pc, #236]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 8087 	beq.w	800aa4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a940:	4b36      	ldr	r3, [pc, #216]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	f003 030c 	and.w	r3, r3, #12
 800a948:	2b08      	cmp	r3, #8
 800a94a:	d061      	beq.n	800aa10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d146      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a954:	4b33      	ldr	r3, [pc, #204]	; (800aa24 <HAL_RCC_OscConfig+0x4cc>)
 800a956:	2200      	movs	r2, #0
 800a958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a95a:	f7fd fdb9 	bl	80084d0 <HAL_GetTick>
 800a95e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a960:	e008      	b.n	800a974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a962:	f7fd fdb5 	bl	80084d0 <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d901      	bls.n	800a974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e06d      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a974:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1f0      	bne.n	800a962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a988:	d108      	bne.n	800a99c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a98a:	4b24      	ldr	r3, [pc, #144]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	4921      	ldr	r1, [pc, #132]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a99c:	4b1f      	ldr	r3, [pc, #124]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a19      	ldr	r1, [r3, #32]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	430b      	orrs	r3, r1
 800a9ae:	491b      	ldr	r1, [pc, #108]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9b4:	4b1b      	ldr	r3, [pc, #108]	; (800aa24 <HAL_RCC_OscConfig+0x4cc>)
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ba:	f7fd fd89 	bl	80084d0 <HAL_GetTick>
 800a9be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a9c0:	e008      	b.n	800a9d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9c2:	f7fd fd85 	bl	80084d0 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e03d      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0f0      	beq.n	800a9c2 <HAL_RCC_OscConfig+0x46a>
 800a9e0:	e035      	b.n	800aa4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9e2:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <HAL_RCC_OscConfig+0x4cc>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9e8:	f7fd fd72 	bl	80084d0 <HAL_GetTick>
 800a9ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9ee:	e008      	b.n	800aa02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9f0:	f7fd fd6e 	bl	80084d0 <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d901      	bls.n	800aa02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e026      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa02:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <HAL_RCC_OscConfig+0x4c4>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1f0      	bne.n	800a9f0 <HAL_RCC_OscConfig+0x498>
 800aa0e:	e01e      	b.n	800aa4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d107      	bne.n	800aa28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e019      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
 800aa1c:	40021000 	.word	0x40021000
 800aa20:	40007000 	.word	0x40007000
 800aa24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aa28:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <HAL_RCC_OscConfig+0x500>)
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d106      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d001      	beq.n	800aa4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	40021000 	.word	0x40021000

0800aa5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e0d0      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa70:	4b6a      	ldr	r3, [pc, #424]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d910      	bls.n	800aaa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa7e:	4b67      	ldr	r3, [pc, #412]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f023 0207 	bic.w	r2, r3, #7
 800aa86:	4965      	ldr	r1, [pc, #404]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa8e:	4b63      	ldr	r3, [pc, #396]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0307 	and.w	r3, r3, #7
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d001      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e0b8      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d020      	beq.n	800aaee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aab8:	4b59      	ldr	r3, [pc, #356]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4a58      	ldr	r2, [pc, #352]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800aabe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0308 	and.w	r3, r3, #8
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aad0:	4b53      	ldr	r3, [pc, #332]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	4a52      	ldr	r2, [pc, #328]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800aad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800aada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aadc:	4b50      	ldr	r3, [pc, #320]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	494d      	ldr	r1, [pc, #308]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d040      	beq.n	800ab7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d107      	bne.n	800ab12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab02:	4b47      	ldr	r3, [pc, #284]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d115      	bne.n	800ab3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e07f      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d107      	bne.n	800ab2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab1a:	4b41      	ldr	r3, [pc, #260]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d109      	bne.n	800ab3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e073      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab2a:	4b3d      	ldr	r3, [pc, #244]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0302 	and.w	r3, r3, #2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e06b      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab3a:	4b39      	ldr	r3, [pc, #228]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f023 0203 	bic.w	r2, r3, #3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	4936      	ldr	r1, [pc, #216]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab4c:	f7fd fcc0 	bl	80084d0 <HAL_GetTick>
 800ab50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab52:	e00a      	b.n	800ab6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab54:	f7fd fcbc 	bl	80084d0 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d901      	bls.n	800ab6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e053      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab6a:	4b2d      	ldr	r3, [pc, #180]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f003 020c 	and.w	r2, r3, #12
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d1eb      	bne.n	800ab54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab7c:	4b27      	ldr	r3, [pc, #156]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0307 	and.w	r3, r3, #7
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d210      	bcs.n	800abac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab8a:	4b24      	ldr	r3, [pc, #144]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f023 0207 	bic.w	r2, r3, #7
 800ab92:	4922      	ldr	r1, [pc, #136]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9a:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <HAL_RCC_ClockConfig+0x1c0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0307 	and.w	r3, r3, #7
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d001      	beq.n	800abac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e032      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d008      	beq.n	800abca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abb8:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	4916      	ldr	r1, [pc, #88]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	490e      	ldr	r1, [pc, #56]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800abea:	f000 f821 	bl	800ac30 <HAL_RCC_GetSysClockFreq>
 800abee:	4602      	mov	r2, r0
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <HAL_RCC_ClockConfig+0x1c4>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	f003 030f 	and.w	r3, r3, #15
 800abfa:	490a      	ldr	r1, [pc, #40]	; (800ac24 <HAL_RCC_ClockConfig+0x1c8>)
 800abfc:	5ccb      	ldrb	r3, [r1, r3]
 800abfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ac02:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <HAL_RCC_ClockConfig+0x1cc>)
 800ac04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <HAL_RCC_ClockConfig+0x1d0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fd fc1e 	bl	800844c <HAL_InitTick>

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40022000 	.word	0x40022000
 800ac20:	40021000 	.word	0x40021000
 800ac24:	0800da90 	.word	0x0800da90
 800ac28:	200000a0 	.word	0x200000a0
 800ac2c:	200000a4 	.word	0x200000a4

0800ac30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60bb      	str	r3, [r7, #8]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac4a:	4b1e      	ldr	r3, [pc, #120]	; (800acc4 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f003 030c 	and.w	r3, r3, #12
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d002      	beq.n	800ac60 <HAL_RCC_GetSysClockFreq+0x30>
 800ac5a:	2b08      	cmp	r3, #8
 800ac5c:	d003      	beq.n	800ac66 <HAL_RCC_GetSysClockFreq+0x36>
 800ac5e:	e027      	b.n	800acb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ac60:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac62:	613b      	str	r3, [r7, #16]
      break;
 800ac64:	e027      	b.n	800acb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	0c9b      	lsrs	r3, r3, #18
 800ac6a:	f003 030f 	and.w	r3, r3, #15
 800ac6e:	4a17      	ldr	r2, [pc, #92]	; (800accc <HAL_RCC_GetSysClockFreq+0x9c>)
 800ac70:	5cd3      	ldrb	r3, [r2, r3]
 800ac72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d010      	beq.n	800aca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ac7e:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	0c5b      	lsrs	r3, r3, #17
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	4a11      	ldr	r2, [pc, #68]	; (800acd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ac8a:	5cd3      	ldrb	r3, [r2, r3]
 800ac8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a0d      	ldr	r2, [pc, #52]	; (800acc8 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac92:	fb03 f202 	mul.w	r2, r3, r2
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac9c:	617b      	str	r3, [r7, #20]
 800ac9e:	e004      	b.n	800acaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aca4:	fb02 f303 	mul.w	r3, r2, r3
 800aca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	613b      	str	r3, [r7, #16]
      break;
 800acae:	e002      	b.n	800acb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800acb0:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <HAL_RCC_GetSysClockFreq+0x98>)
 800acb2:	613b      	str	r3, [r7, #16]
      break;
 800acb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800acb6:	693b      	ldr	r3, [r7, #16]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bc80      	pop	{r7}
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	40021000 	.word	0x40021000
 800acc8:	007a1200 	.word	0x007a1200
 800accc:	0800daa8 	.word	0x0800daa8
 800acd0:	0800dab8 	.word	0x0800dab8
 800acd4:	003d0900 	.word	0x003d0900

0800acd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acdc:	4b02      	ldr	r3, [pc, #8]	; (800ace8 <HAL_RCC_GetHCLKFreq+0x10>)
 800acde:	681b      	ldr	r3, [r3, #0]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr
 800ace8:	200000a0 	.word	0x200000a0

0800acec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800acf0:	f7ff fff2 	bl	800acd8 <HAL_RCC_GetHCLKFreq>
 800acf4:	4602      	mov	r2, r0
 800acf6:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <HAL_RCC_GetPCLK1Freq+0x20>)
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	4903      	ldr	r1, [pc, #12]	; (800ad10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad02:	5ccb      	ldrb	r3, [r1, r3]
 800ad04:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	40021000 	.word	0x40021000
 800ad10:	0800daa0 	.word	0x0800daa0

0800ad14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ad18:	f7ff ffde 	bl	800acd8 <HAL_RCC_GetHCLKFreq>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	0adb      	lsrs	r3, r3, #11
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	4903      	ldr	r1, [pc, #12]	; (800ad38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad2a:	5ccb      	ldrb	r3, [r1, r3]
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40021000 	.word	0x40021000
 800ad38:	0800daa0 	.word	0x0800daa0

0800ad3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <RCC_Delay+0x34>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a0a      	ldr	r2, [pc, #40]	; (800ad74 <RCC_Delay+0x38>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	0a5b      	lsrs	r3, r3, #9
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	fb02 f303 	mul.w	r3, r2, r3
 800ad56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ad58:	bf00      	nop
  }
  while (Delay --);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	60fa      	str	r2, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1f9      	bne.n	800ad58 <RCC_Delay+0x1c>
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bc80      	pop	{r7}
 800ad6e:	4770      	bx	lr
 800ad70:	200000a0 	.word	0x200000a0
 800ad74:	10624dd3 	.word	0x10624dd3

0800ad78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e041      	b.n	800ae0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fd fa26 	bl	80081f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3304      	adds	r3, #4
 800adb4:	4619      	mov	r1, r3
 800adb6:	4610      	mov	r0, r2
 800adb8:	f000 fa82 	bl	800b2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d001      	beq.n	800ae30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e044      	b.n	800aeba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f042 0201 	orr.w	r2, r2, #1
 800ae46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a1d      	ldr	r2, [pc, #116]	; (800aec4 <HAL_TIM_Base_Start_IT+0xac>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d018      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x6c>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a1c      	ldr	r2, [pc, #112]	; (800aec8 <HAL_TIM_Base_Start_IT+0xb0>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x6c>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae64:	d00e      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x6c>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a18      	ldr	r2, [pc, #96]	; (800aecc <HAL_TIM_Base_Start_IT+0xb4>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d009      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x6c>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a16      	ldr	r2, [pc, #88]	; (800aed0 <HAL_TIM_Base_Start_IT+0xb8>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d004      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x6c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a15      	ldr	r2, [pc, #84]	; (800aed4 <HAL_TIM_Base_Start_IT+0xbc>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d111      	bne.n	800aea8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b06      	cmp	r3, #6
 800ae94:	d010      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f042 0201 	orr.w	r2, r2, #1
 800aea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aea6:	e007      	b.n	800aeb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f042 0201 	orr.w	r2, r2, #1
 800aeb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bc80      	pop	{r7}
 800aec2:	4770      	bx	lr
 800aec4:	40012c00 	.word	0x40012c00
 800aec8:	40013400 	.word	0x40013400
 800aecc:	40000400 	.word	0x40000400
 800aed0:	40000800 	.word	0x40000800
 800aed4:	40000c00 	.word	0x40000c00

0800aed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d122      	bne.n	800af34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d11b      	bne.n	800af34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f06f 0202 	mvn.w	r2, #2
 800af04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	f003 0303 	and.w	r3, r3, #3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f9b4 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800af20:	e005      	b.n	800af2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f9a7 	bl	800b276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f9b6 	bl	800b29a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0304 	and.w	r3, r3, #4
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d122      	bne.n	800af88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d11b      	bne.n	800af88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0204 	mvn.w	r2, #4
 800af58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2202      	movs	r2, #2
 800af5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f98a 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800af74:	e005      	b.n	800af82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f97d 	bl	800b276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f98c 	bl	800b29a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	f003 0308 	and.w	r3, r3, #8
 800af92:	2b08      	cmp	r3, #8
 800af94:	d122      	bne.n	800afdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f003 0308 	and.w	r3, r3, #8
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d11b      	bne.n	800afdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f06f 0208 	mvn.w	r2, #8
 800afac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2204      	movs	r2, #4
 800afb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	f003 0303 	and.w	r3, r3, #3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f960 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800afc8:	e005      	b.n	800afd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f953 	bl	800b276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f962 	bl	800b29a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f003 0310 	and.w	r3, r3, #16
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d122      	bne.n	800b030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d11b      	bne.n	800b030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f06f 0210 	mvn.w	r2, #16
 800b000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2208      	movs	r2, #8
 800b006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f936 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800b01c:	e005      	b.n	800b02a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f929 	bl	800b276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f938 	bl	800b29a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d10e      	bne.n	800b05c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d107      	bne.n	800b05c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f06f 0201 	mvn.w	r2, #1
 800b054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7fc fd62 	bl	8007b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b066:	2b80      	cmp	r3, #128	; 0x80
 800b068:	d10e      	bne.n	800b088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b074:	2b80      	cmp	r3, #128	; 0x80
 800b076:	d107      	bne.n	800b088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 faa1 	bl	800b5ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b092:	2b40      	cmp	r3, #64	; 0x40
 800b094:	d10e      	bne.n	800b0b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b40      	cmp	r3, #64	; 0x40
 800b0a2:	d107      	bne.n	800b0b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f8fc 	bl	800b2ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	d10e      	bne.n	800b0e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b20      	cmp	r3, #32
 800b0ce:	d107      	bne.n	800b0e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f06f 0220 	mvn.w	r2, #32
 800b0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fa6c 	bl	800b5b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d101      	bne.n	800b104 <HAL_TIM_ConfigClockSource+0x1c>
 800b100:	2302      	movs	r3, #2
 800b102:	e0b4      	b.n	800b26e <HAL_TIM_ConfigClockSource+0x186>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b12a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b13c:	d03e      	beq.n	800b1bc <HAL_TIM_ConfigClockSource+0xd4>
 800b13e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b142:	f200 8087 	bhi.w	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b14a:	f000 8086 	beq.w	800b25a <HAL_TIM_ConfigClockSource+0x172>
 800b14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b152:	d87f      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b154:	2b70      	cmp	r3, #112	; 0x70
 800b156:	d01a      	beq.n	800b18e <HAL_TIM_ConfigClockSource+0xa6>
 800b158:	2b70      	cmp	r3, #112	; 0x70
 800b15a:	d87b      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b15c:	2b60      	cmp	r3, #96	; 0x60
 800b15e:	d050      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x11a>
 800b160:	2b60      	cmp	r3, #96	; 0x60
 800b162:	d877      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b164:	2b50      	cmp	r3, #80	; 0x50
 800b166:	d03c      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0xfa>
 800b168:	2b50      	cmp	r3, #80	; 0x50
 800b16a:	d873      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b16c:	2b40      	cmp	r3, #64	; 0x40
 800b16e:	d058      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x13a>
 800b170:	2b40      	cmp	r3, #64	; 0x40
 800b172:	d86f      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b174:	2b30      	cmp	r3, #48	; 0x30
 800b176:	d064      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x15a>
 800b178:	2b30      	cmp	r3, #48	; 0x30
 800b17a:	d86b      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	d060      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x15a>
 800b180:	2b20      	cmp	r3, #32
 800b182:	d867      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d05c      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x15a>
 800b188:	2b10      	cmp	r3, #16
 800b18a:	d05a      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x15a>
 800b18c:	e062      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b19e:	f000 f980 	bl	800b4a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	609a      	str	r2, [r3, #8]
      break;
 800b1ba:	e04f      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1cc:	f000 f969 	bl	800b4a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1de:	609a      	str	r2, [r3, #8]
      break;
 800b1e0:	e03c      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f000 f8e0 	bl	800b3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2150      	movs	r1, #80	; 0x50
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 f937 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800b200:	e02c      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b20e:	461a      	mov	r2, r3
 800b210:	f000 f8fe 	bl	800b410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2160      	movs	r1, #96	; 0x60
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 f927 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800b220:	e01c      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b22e:	461a      	mov	r2, r3
 800b230:	f000 f8c0 	bl	800b3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2140      	movs	r1, #64	; 0x40
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 f917 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800b240:	e00c      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f000 f90e 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800b252:	e003      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	73fb      	strb	r3, [r7, #15]
      break;
 800b258:	e000      	b.n	800b25c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b25a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	bc80      	pop	{r7}
 800b286:	4770      	bx	lr

0800b288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	bc80      	pop	{r7}
 800b298:	4770      	bx	lr

0800b29a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2a2:	bf00      	nop
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bc80      	pop	{r7}
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bc80      	pop	{r7}
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a33      	ldr	r2, [pc, #204]	; (800b3a0 <TIM_Base_SetConfig+0xe0>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d013      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a32      	ldr	r2, [pc, #200]	; (800b3a4 <TIM_Base_SetConfig+0xe4>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d00f      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e6:	d00b      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a2f      	ldr	r2, [pc, #188]	; (800b3a8 <TIM_Base_SetConfig+0xe8>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d007      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a2e      	ldr	r2, [pc, #184]	; (800b3ac <TIM_Base_SetConfig+0xec>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d003      	beq.n	800b300 <TIM_Base_SetConfig+0x40>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a2d      	ldr	r2, [pc, #180]	; (800b3b0 <TIM_Base_SetConfig+0xf0>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d108      	bne.n	800b312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a22      	ldr	r2, [pc, #136]	; (800b3a0 <TIM_Base_SetConfig+0xe0>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d013      	beq.n	800b342 <TIM_Base_SetConfig+0x82>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a21      	ldr	r2, [pc, #132]	; (800b3a4 <TIM_Base_SetConfig+0xe4>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d00f      	beq.n	800b342 <TIM_Base_SetConfig+0x82>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b328:	d00b      	beq.n	800b342 <TIM_Base_SetConfig+0x82>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a1e      	ldr	r2, [pc, #120]	; (800b3a8 <TIM_Base_SetConfig+0xe8>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d007      	beq.n	800b342 <TIM_Base_SetConfig+0x82>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a1d      	ldr	r2, [pc, #116]	; (800b3ac <TIM_Base_SetConfig+0xec>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d003      	beq.n	800b342 <TIM_Base_SetConfig+0x82>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a1c      	ldr	r2, [pc, #112]	; (800b3b0 <TIM_Base_SetConfig+0xf0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d108      	bne.n	800b354 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4313      	orrs	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	689a      	ldr	r2, [r3, #8]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a09      	ldr	r2, [pc, #36]	; (800b3a0 <TIM_Base_SetConfig+0xe0>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d003      	beq.n	800b388 <TIM_Base_SetConfig+0xc8>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a08      	ldr	r2, [pc, #32]	; (800b3a4 <TIM_Base_SetConfig+0xe4>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d103      	bne.n	800b390 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	615a      	str	r2, [r3, #20]
}
 800b396:	bf00      	nop
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bc80      	pop	{r7}
 800b39e:	4770      	bx	lr
 800b3a0:	40012c00 	.word	0x40012c00
 800b3a4:	40013400 	.word	0x40013400
 800b3a8:	40000400 	.word	0x40000400
 800b3ac:	40000800 	.word	0x40000800
 800b3b0:	40000c00 	.word	0x40000c00

0800b3b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	f023 0201 	bic.w	r2, r3, #1
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f023 030a 	bic.w	r3, r3, #10
 800b3f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	621a      	str	r2, [r3, #32]
}
 800b406:	bf00      	nop
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bc80      	pop	{r7}
 800b40e:	4770      	bx	lr

0800b410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0210 	bic.w	r2, r3, #16
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b43a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	031b      	lsls	r3, r3, #12
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	4313      	orrs	r3, r2
 800b444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b44c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	011b      	lsls	r3, r3, #4
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	4313      	orrs	r3, r2
 800b456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	621a      	str	r2, [r3, #32]
}
 800b464:	bf00      	nop
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr

0800b46e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	f043 0307 	orr.w	r3, r3, #7
 800b490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	609a      	str	r2, [r3, #8]
}
 800b498:	bf00      	nop
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bc80      	pop	{r7}
 800b4a0:	4770      	bx	lr

0800b4a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
 800b4ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	021a      	lsls	r2, r3, #8
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	609a      	str	r2, [r3, #8]
}
 800b4d6:	bf00      	nop
 800b4d8:	371c      	adds	r7, #28
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bc80      	pop	{r7}
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d101      	bne.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e050      	b.n	800b59a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b51e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a1b      	ldr	r2, [pc, #108]	; (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d018      	beq.n	800b56e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a19      	ldr	r2, [pc, #100]	; (800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d013      	beq.n	800b56e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b54e:	d00e      	beq.n	800b56e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a15      	ldr	r2, [pc, #84]	; (800b5ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d009      	beq.n	800b56e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a14      	ldr	r2, [pc, #80]	; (800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d004      	beq.n	800b56e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a12      	ldr	r2, [pc, #72]	; (800b5b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d10c      	bne.n	800b588 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr
 800b5a4:	40012c00 	.word	0x40012c00
 800b5a8:	40013400 	.word	0x40013400
 800b5ac:	40000400 	.word	0x40000400
 800b5b0:	40000800 	.word	0x40000800
 800b5b4:	40000c00 	.word	0x40000c00

0800b5b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bc80      	pop	{r7}
 800b5c8:	4770      	bx	lr

0800b5ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bc80      	pop	{r7}
 800b5da:	4770      	bx	lr

0800b5dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e042      	b.n	800b674 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d106      	bne.n	800b608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7fc fe1a 	bl	800823c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2224      	movs	r2, #36	; 0x24
 800b60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b61e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fcb5 	bl	800bf90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	695a      	ldr	r2, [r3, #20]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2220      	movs	r2, #32
 800b660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2220      	movs	r2, #32
 800b668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b20      	cmp	r3, #32
 800b694:	d121      	bne.n	800b6da <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <HAL_UART_Transmit_IT+0x26>
 800b69c:	88fb      	ldrh	r3, [r7, #6]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e01a      	b.n	800b6dc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	88fa      	ldrh	r2, [r7, #6]
 800b6b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	88fa      	ldrh	r2, [r7, #6]
 800b6b6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2221      	movs	r2, #33	; 0x21
 800b6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e000      	b.n	800b6dc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b6da:	2302      	movs	r3, #2
  }
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b0ba      	sub	sp, #232	; 0xe8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b70e:	2300      	movs	r3, #0
 800b710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b714:	2300      	movs	r3, #0
 800b716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10f      	bne.n	800b74e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <HAL_UART_IRQHandler+0x66>
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fb63 	bl	800be12 <UART_Receive_IT>
      return;
 800b74c:	e25b      	b.n	800bc06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b74e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 80de 	beq.w	800b914 <HAL_UART_IRQHandler+0x22c>
 800b758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b768:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80d1 	beq.w	800b914 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <HAL_UART_IRQHandler+0xae>
 800b77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b786:	2b00      	cmp	r3, #0
 800b788:	d005      	beq.n	800b796 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78e:	f043 0201 	orr.w	r2, r3, #1
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79a:	f003 0304 	and.w	r3, r3, #4
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <HAL_UART_IRQHandler+0xd2>
 800b7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	f043 0202 	orr.w	r2, r3, #2
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00b      	beq.n	800b7de <HAL_UART_IRQHandler+0xf6>
 800b7c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d6:	f043 0204 	orr.w	r2, r3, #4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7e2:	f003 0308 	and.w	r3, r3, #8
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d011      	beq.n	800b80e <HAL_UART_IRQHandler+0x126>
 800b7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d105      	bne.n	800b802 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b7f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	f043 0208 	orr.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 81f2 	beq.w	800bbfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81c:	f003 0320 	and.w	r3, r3, #32
 800b820:	2b00      	cmp	r3, #0
 800b822:	d008      	beq.n	800b836 <HAL_UART_IRQHandler+0x14e>
 800b824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b828:	f003 0320 	and.w	r3, r3, #32
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 faee 	bl	800be12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	bf14      	ite	ne
 800b844:	2301      	movne	r3, #1
 800b846:	2300      	moveq	r3, #0
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d103      	bne.n	800b862 <HAL_UART_IRQHandler+0x17a>
 800b85a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d04f      	beq.n	800b902 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f9f8 	bl	800bc58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b872:	2b00      	cmp	r3, #0
 800b874:	d041      	beq.n	800b8fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3314      	adds	r3, #20
 800b87c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b88c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3314      	adds	r3, #20
 800b89e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b8ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8b2:	e841 2300 	strex	r3, r2, [r1]
 800b8b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1d9      	bne.n	800b876 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d013      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ce:	4a7e      	ldr	r2, [pc, #504]	; (800bac8 <HAL_UART_IRQHandler+0x3e0>)
 800b8d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fd f86c 	bl	80089b4 <HAL_DMA_Abort_IT>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d016      	beq.n	800b910 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f0:	e00e      	b.n	800b910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f99c 	bl	800bc30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f8:	e00a      	b.n	800b910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f998 	bl	800bc30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b900:	e006      	b.n	800b910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f994 	bl	800bc30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b90e:	e175      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b910:	bf00      	nop
    return;
 800b912:	e173      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b918:	2b01      	cmp	r3, #1
 800b91a:	f040 814f 	bne.w	800bbbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b922:	f003 0310 	and.w	r3, r3, #16
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 8148 	beq.w	800bbbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b930:	f003 0310 	and.w	r3, r3, #16
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8141 	beq.w	800bbbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	60bb      	str	r3, [r7, #8]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	60bb      	str	r3, [r7, #8]
 800b94e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 80b6 	beq.w	800bacc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b96c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 8145 	beq.w	800bc00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b97a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b97e:	429a      	cmp	r2, r3
 800b980:	f080 813e 	bcs.w	800bc00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b98a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	2b20      	cmp	r3, #32
 800b994:	f000 8088 	beq.w	800baa8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	330c      	adds	r3, #12
 800b99e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9a6:	e853 3f00 	ldrex	r3, [r3]
 800b9aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b9ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	330c      	adds	r3, #12
 800b9c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b9c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b9d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b9dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1d9      	bne.n	800b998 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3314      	adds	r3, #20
 800b9ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ee:	e853 3f00 	ldrex	r3, [r3]
 800b9f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9f6:	f023 0301 	bic.w	r3, r3, #1
 800b9fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3314      	adds	r3, #20
 800ba04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba14:	e841 2300 	strex	r3, r2, [r1]
 800ba18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e1      	bne.n	800b9e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3314      	adds	r3, #20
 800ba26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3314      	adds	r3, #20
 800ba40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba44:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e3      	bne.n	800ba20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	330c      	adds	r3, #12
 800ba6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba78:	f023 0310 	bic.w	r3, r3, #16
 800ba7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	330c      	adds	r3, #12
 800ba86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba8a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba92:	e841 2300 	strex	r3, r2, [r1]
 800ba96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e3      	bne.n	800ba66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fc ff4b 	bl	800893e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2202      	movs	r2, #2
 800baac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	b29b      	uxth	r3, r3
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8bf 	bl	800bc42 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bac4:	e09c      	b.n	800bc00 <HAL_UART_IRQHandler+0x518>
 800bac6:	bf00      	nop
 800bac8:	0800bd1d 	.word	0x0800bd1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 808e 	beq.w	800bc04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 8089 	beq.w	800bc04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	330c      	adds	r3, #12
 800baf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	e853 3f00 	ldrex	r3, [r3]
 800bb00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	330c      	adds	r3, #12
 800bb12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb16:	647a      	str	r2, [r7, #68]	; 0x44
 800bb18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb1e:	e841 2300 	strex	r3, r2, [r1]
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1e3      	bne.n	800baf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3314      	adds	r3, #20
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	623b      	str	r3, [r7, #32]
   return(result);
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	f023 0301 	bic.w	r3, r3, #1
 800bb40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3314      	adds	r3, #20
 800bb4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb4e:	633a      	str	r2, [r7, #48]	; 0x30
 800bb50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e3      	bne.n	800bb2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2220      	movs	r2, #32
 800bb66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	330c      	adds	r3, #12
 800bb76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f023 0310 	bic.w	r3, r3, #16
 800bb86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	330c      	adds	r3, #12
 800bb90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb94:	61fa      	str	r2, [r7, #28]
 800bb96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb98:	69b9      	ldr	r1, [r7, #24]
 800bb9a:	69fa      	ldr	r2, [r7, #28]
 800bb9c:	e841 2300 	strex	r3, r2, [r1]
 800bba0:	617b      	str	r3, [r7, #20]
   return(result);
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1e3      	bne.n	800bb70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bbae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f844 	bl	800bc42 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbba:	e023      	b.n	800bc04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bbbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d009      	beq.n	800bbdc <HAL_UART_IRQHandler+0x4f4>
 800bbc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f8b5 	bl	800bd44 <UART_Transmit_IT>
    return;
 800bbda:	e014      	b.n	800bc06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00e      	beq.n	800bc06 <HAL_UART_IRQHandler+0x51e>
 800bbe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d008      	beq.n	800bc06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f8f4 	bl	800bde2 <UART_EndTransmit_IT>
    return;
 800bbfa:	e004      	b.n	800bc06 <HAL_UART_IRQHandler+0x51e>
    return;
 800bbfc:	bf00      	nop
 800bbfe:	e002      	b.n	800bc06 <HAL_UART_IRQHandler+0x51e>
      return;
 800bc00:	bf00      	nop
 800bc02:	e000      	b.n	800bc06 <HAL_UART_IRQHandler+0x51e>
      return;
 800bc04:	bf00      	nop
  }
}
 800bc06:	37e8      	adds	r7, #232	; 0xe8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	4770      	bx	lr

0800bc1e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bc26:	bf00      	nop
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bc80      	pop	{r7}
 800bc40:	4770      	bx	lr

0800bc42 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b083      	sub	sp, #12
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bc80      	pop	{r7}
 800bc56:	4770      	bx	lr

0800bc58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b095      	sub	sp, #84	; 0x54
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	330c      	adds	r3, #12
 800bc66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6a:	e853 3f00 	ldrex	r3, [r3]
 800bc6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	330c      	adds	r3, #12
 800bc7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc80:	643a      	str	r2, [r7, #64]	; 0x40
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc88:	e841 2300 	strex	r3, r2, [r1]
 800bc8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e5      	bne.n	800bc60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3314      	adds	r3, #20
 800bc9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	e853 3f00 	ldrex	r3, [r3]
 800bca2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	f023 0301 	bic.w	r3, r3, #1
 800bcaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e5      	bne.n	800bc94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d119      	bne.n	800bd04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	330c      	adds	r3, #12
 800bcd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	e853 3f00 	ldrex	r3, [r3]
 800bcde:	60bb      	str	r3, [r7, #8]
   return(result);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	f023 0310 	bic.w	r3, r3, #16
 800bce6:	647b      	str	r3, [r7, #68]	; 0x44
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	330c      	adds	r3, #12
 800bcee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcf0:	61ba      	str	r2, [r7, #24]
 800bcf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf4:	6979      	ldr	r1, [r7, #20]
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	e841 2300 	strex	r3, r2, [r1]
 800bcfc:	613b      	str	r3, [r7, #16]
   return(result);
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1e5      	bne.n	800bcd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2220      	movs	r2, #32
 800bd08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd12:	bf00      	nop
 800bd14:	3754      	adds	r7, #84	; 0x54
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bc80      	pop	{r7}
 800bd1a:	4770      	bx	lr

0800bd1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff ff7a 	bl	800bc30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b21      	cmp	r3, #33	; 0x21
 800bd56:	d13e      	bne.n	800bdd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd60:	d114      	bne.n	800bd8c <UART_Transmit_IT+0x48>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d110      	bne.n	800bd8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	461a      	mov	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	1c9a      	adds	r2, r3, #2
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	621a      	str	r2, [r3, #32]
 800bd8a:	e008      	b.n	800bd9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a1b      	ldr	r3, [r3, #32]
 800bd90:	1c59      	adds	r1, r3, #1
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	6211      	str	r1, [r2, #32]
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10f      	bne.n	800bdd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68da      	ldr	r2, [r3, #12]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e000      	b.n	800bdd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bdd6:	2302      	movs	r3, #2
  }
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bc80      	pop	{r7}
 800bde0:	4770      	bx	lr

0800bde2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68da      	ldr	r2, [r3, #12]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff ff02 	bl	800bc0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b08c      	sub	sp, #48	; 0x30
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b22      	cmp	r3, #34	; 0x22
 800be24:	f040 80ae 	bne.w	800bf84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be30:	d117      	bne.n	800be62 <UART_Receive_IT+0x50>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d113      	bne.n	800be62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be50:	b29a      	uxth	r2, r3
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	1c9a      	adds	r2, r3, #2
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	629a      	str	r2, [r3, #40]	; 0x28
 800be60:	e026      	b.n	800beb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be74:	d007      	beq.n	800be86 <UART_Receive_IT+0x74>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10a      	bne.n	800be94 <UART_Receive_IT+0x82>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d106      	bne.n	800be94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be90:	701a      	strb	r2, [r3, #0]
 800be92:	e008      	b.n	800bea6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	3b01      	subs	r3, #1
 800beb8:	b29b      	uxth	r3, r3
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	4619      	mov	r1, r3
 800bebe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d15d      	bne.n	800bf80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68da      	ldr	r2, [r3, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 0220 	bic.w	r2, r2, #32
 800bed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68da      	ldr	r2, [r3, #12]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	695a      	ldr	r2, [r3, #20]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f022 0201 	bic.w	r2, r2, #1
 800bef2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2220      	movs	r2, #32
 800bef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d135      	bne.n	800bf76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	330c      	adds	r3, #12
 800bf16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	613b      	str	r3, [r7, #16]
   return(result);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f023 0310 	bic.w	r3, r3, #16
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	330c      	adds	r3, #12
 800bf2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf30:	623a      	str	r2, [r7, #32]
 800bf32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	69f9      	ldr	r1, [r7, #28]
 800bf36:	6a3a      	ldr	r2, [r7, #32]
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e5      	bne.n	800bf10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0310 	and.w	r3, r3, #16
 800bf4e:	2b10      	cmp	r3, #16
 800bf50:	d10a      	bne.n	800bf68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf52:	2300      	movs	r3, #0
 800bf54:	60fb      	str	r3, [r7, #12]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	60fb      	str	r3, [r7, #12]
 800bf66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff fe67 	bl	800bc42 <HAL_UARTEx_RxEventCallback>
 800bf74:	e002      	b.n	800bf7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff fe51 	bl	800bc1e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e002      	b.n	800bf86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e000      	b.n	800bf86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf84:	2302      	movs	r3, #2
  }
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3730      	adds	r7, #48	; 0x30
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
	...

0800bf90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68da      	ldr	r2, [r3, #12]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bfca:	f023 030c 	bic.w	r3, r3, #12
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6812      	ldr	r2, [r2, #0]
 800bfd2:	68b9      	ldr	r1, [r7, #8]
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a2c      	ldr	r2, [pc, #176]	; (800c0a4 <UART_SetConfig+0x114>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d103      	bne.n	800c000 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bff8:	f7fe fe8c 	bl	800ad14 <HAL_RCC_GetPCLK2Freq>
 800bffc:	60f8      	str	r0, [r7, #12]
 800bffe:	e002      	b.n	800c006 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c000:	f7fe fe74 	bl	800acec <HAL_RCC_GetPCLK1Freq>
 800c004:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4613      	mov	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	009a      	lsls	r2, r3, #2
 800c010:	441a      	add	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01c:	4a22      	ldr	r2, [pc, #136]	; (800c0a8 <UART_SetConfig+0x118>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	095b      	lsrs	r3, r3, #5
 800c024:	0119      	lsls	r1, r3, #4
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	009a      	lsls	r2, r3, #2
 800c030:	441a      	add	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	fbb2 f2f3 	udiv	r2, r2, r3
 800c03c:	4b1a      	ldr	r3, [pc, #104]	; (800c0a8 <UART_SetConfig+0x118>)
 800c03e:	fba3 0302 	umull	r0, r3, r3, r2
 800c042:	095b      	lsrs	r3, r3, #5
 800c044:	2064      	movs	r0, #100	; 0x64
 800c046:	fb00 f303 	mul.w	r3, r0, r3
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	011b      	lsls	r3, r3, #4
 800c04e:	3332      	adds	r3, #50	; 0x32
 800c050:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <UART_SetConfig+0x118>)
 800c052:	fba2 2303 	umull	r2, r3, r2, r3
 800c056:	095b      	lsrs	r3, r3, #5
 800c058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c05c:	4419      	add	r1, r3
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009a      	lsls	r2, r3, #2
 800c068:	441a      	add	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	fbb2 f2f3 	udiv	r2, r2, r3
 800c074:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <UART_SetConfig+0x118>)
 800c076:	fba3 0302 	umull	r0, r3, r3, r2
 800c07a:	095b      	lsrs	r3, r3, #5
 800c07c:	2064      	movs	r0, #100	; 0x64
 800c07e:	fb00 f303 	mul.w	r3, r0, r3
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	3332      	adds	r3, #50	; 0x32
 800c088:	4a07      	ldr	r2, [pc, #28]	; (800c0a8 <UART_SetConfig+0x118>)
 800c08a:	fba2 2303 	umull	r2, r3, r2, r3
 800c08e:	095b      	lsrs	r3, r3, #5
 800c090:	f003 020f 	and.w	r2, r3, #15
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	440a      	add	r2, r1
 800c09a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c09c:	bf00      	nop
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	40013800 	.word	0x40013800
 800c0a8:	51eb851f 	.word	0x51eb851f

0800c0ac <__itoa>:
 800c0ac:	1e93      	subs	r3, r2, #2
 800c0ae:	2b22      	cmp	r3, #34	; 0x22
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	d904      	bls.n	800c0c0 <__itoa+0x14>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	461c      	mov	r4, r3
 800c0ba:	700b      	strb	r3, [r1, #0]
 800c0bc:	4620      	mov	r0, r4
 800c0be:	bd10      	pop	{r4, pc}
 800c0c0:	2a0a      	cmp	r2, #10
 800c0c2:	d109      	bne.n	800c0d8 <__itoa+0x2c>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	da07      	bge.n	800c0d8 <__itoa+0x2c>
 800c0c8:	232d      	movs	r3, #45	; 0x2d
 800c0ca:	700b      	strb	r3, [r1, #0]
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	4240      	negs	r0, r0
 800c0d0:	4421      	add	r1, r4
 800c0d2:	f000 f8b9 	bl	800c248 <__utoa>
 800c0d6:	e7f1      	b.n	800c0bc <__itoa+0x10>
 800c0d8:	2100      	movs	r1, #0
 800c0da:	e7f9      	b.n	800c0d0 <__itoa+0x24>

0800c0dc <itoa>:
 800c0dc:	f7ff bfe6 	b.w	800c0ac <__itoa>

0800c0e0 <malloc>:
 800c0e0:	4b02      	ldr	r3, [pc, #8]	; (800c0ec <malloc+0xc>)
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f000 b823 	b.w	800c130 <_malloc_r>
 800c0ea:	bf00      	nop
 800c0ec:	200000f8 	.word	0x200000f8

0800c0f0 <sbrk_aligned>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	4e0e      	ldr	r6, [pc, #56]	; (800c12c <sbrk_aligned+0x3c>)
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	6831      	ldr	r1, [r6, #0]
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	b911      	cbnz	r1, 800c102 <sbrk_aligned+0x12>
 800c0fc:	f000 f91e 	bl	800c33c <_sbrk_r>
 800c100:	6030      	str	r0, [r6, #0]
 800c102:	4621      	mov	r1, r4
 800c104:	4628      	mov	r0, r5
 800c106:	f000 f919 	bl	800c33c <_sbrk_r>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d00a      	beq.n	800c124 <sbrk_aligned+0x34>
 800c10e:	1cc4      	adds	r4, r0, #3
 800c110:	f024 0403 	bic.w	r4, r4, #3
 800c114:	42a0      	cmp	r0, r4
 800c116:	d007      	beq.n	800c128 <sbrk_aligned+0x38>
 800c118:	1a21      	subs	r1, r4, r0
 800c11a:	4628      	mov	r0, r5
 800c11c:	f000 f90e 	bl	800c33c <_sbrk_r>
 800c120:	3001      	adds	r0, #1
 800c122:	d101      	bne.n	800c128 <sbrk_aligned+0x38>
 800c124:	f04f 34ff 	mov.w	r4, #4294967295
 800c128:	4620      	mov	r0, r4
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	20000464 	.word	0x20000464

0800c130 <_malloc_r>:
 800c130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c134:	1ccd      	adds	r5, r1, #3
 800c136:	f025 0503 	bic.w	r5, r5, #3
 800c13a:	3508      	adds	r5, #8
 800c13c:	2d0c      	cmp	r5, #12
 800c13e:	bf38      	it	cc
 800c140:	250c      	movcc	r5, #12
 800c142:	2d00      	cmp	r5, #0
 800c144:	4607      	mov	r7, r0
 800c146:	db01      	blt.n	800c14c <_malloc_r+0x1c>
 800c148:	42a9      	cmp	r1, r5
 800c14a:	d905      	bls.n	800c158 <_malloc_r+0x28>
 800c14c:	230c      	movs	r3, #12
 800c14e:	2600      	movs	r6, #0
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	4630      	mov	r0, r6
 800c154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c158:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c22c <_malloc_r+0xfc>
 800c15c:	f000 f868 	bl	800c230 <__malloc_lock>
 800c160:	f8d8 3000 	ldr.w	r3, [r8]
 800c164:	461c      	mov	r4, r3
 800c166:	bb5c      	cbnz	r4, 800c1c0 <_malloc_r+0x90>
 800c168:	4629      	mov	r1, r5
 800c16a:	4638      	mov	r0, r7
 800c16c:	f7ff ffc0 	bl	800c0f0 <sbrk_aligned>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	4604      	mov	r4, r0
 800c174:	d155      	bne.n	800c222 <_malloc_r+0xf2>
 800c176:	f8d8 4000 	ldr.w	r4, [r8]
 800c17a:	4626      	mov	r6, r4
 800c17c:	2e00      	cmp	r6, #0
 800c17e:	d145      	bne.n	800c20c <_malloc_r+0xdc>
 800c180:	2c00      	cmp	r4, #0
 800c182:	d048      	beq.n	800c216 <_malloc_r+0xe6>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	4631      	mov	r1, r6
 800c188:	4638      	mov	r0, r7
 800c18a:	eb04 0903 	add.w	r9, r4, r3
 800c18e:	f000 f8d5 	bl	800c33c <_sbrk_r>
 800c192:	4581      	cmp	r9, r0
 800c194:	d13f      	bne.n	800c216 <_malloc_r+0xe6>
 800c196:	6821      	ldr	r1, [r4, #0]
 800c198:	4638      	mov	r0, r7
 800c19a:	1a6d      	subs	r5, r5, r1
 800c19c:	4629      	mov	r1, r5
 800c19e:	f7ff ffa7 	bl	800c0f0 <sbrk_aligned>
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d037      	beq.n	800c216 <_malloc_r+0xe6>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	442b      	add	r3, r5
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d038      	beq.n	800c226 <_malloc_r+0xf6>
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	42a2      	cmp	r2, r4
 800c1b8:	d12b      	bne.n	800c212 <_malloc_r+0xe2>
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	605a      	str	r2, [r3, #4]
 800c1be:	e00f      	b.n	800c1e0 <_malloc_r+0xb0>
 800c1c0:	6822      	ldr	r2, [r4, #0]
 800c1c2:	1b52      	subs	r2, r2, r5
 800c1c4:	d41f      	bmi.n	800c206 <_malloc_r+0xd6>
 800c1c6:	2a0b      	cmp	r2, #11
 800c1c8:	d917      	bls.n	800c1fa <_malloc_r+0xca>
 800c1ca:	1961      	adds	r1, r4, r5
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	6025      	str	r5, [r4, #0]
 800c1d0:	bf18      	it	ne
 800c1d2:	6059      	strne	r1, [r3, #4]
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	bf08      	it	eq
 800c1d8:	f8c8 1000 	streq.w	r1, [r8]
 800c1dc:	5162      	str	r2, [r4, r5]
 800c1de:	604b      	str	r3, [r1, #4]
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	f104 060b 	add.w	r6, r4, #11
 800c1e6:	f000 f829 	bl	800c23c <__malloc_unlock>
 800c1ea:	f026 0607 	bic.w	r6, r6, #7
 800c1ee:	1d23      	adds	r3, r4, #4
 800c1f0:	1af2      	subs	r2, r6, r3
 800c1f2:	d0ae      	beq.n	800c152 <_malloc_r+0x22>
 800c1f4:	1b9b      	subs	r3, r3, r6
 800c1f6:	50a3      	str	r3, [r4, r2]
 800c1f8:	e7ab      	b.n	800c152 <_malloc_r+0x22>
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	6862      	ldr	r2, [r4, #4]
 800c1fe:	d1dd      	bne.n	800c1bc <_malloc_r+0x8c>
 800c200:	f8c8 2000 	str.w	r2, [r8]
 800c204:	e7ec      	b.n	800c1e0 <_malloc_r+0xb0>
 800c206:	4623      	mov	r3, r4
 800c208:	6864      	ldr	r4, [r4, #4]
 800c20a:	e7ac      	b.n	800c166 <_malloc_r+0x36>
 800c20c:	4634      	mov	r4, r6
 800c20e:	6876      	ldr	r6, [r6, #4]
 800c210:	e7b4      	b.n	800c17c <_malloc_r+0x4c>
 800c212:	4613      	mov	r3, r2
 800c214:	e7cc      	b.n	800c1b0 <_malloc_r+0x80>
 800c216:	230c      	movs	r3, #12
 800c218:	4638      	mov	r0, r7
 800c21a:	603b      	str	r3, [r7, #0]
 800c21c:	f000 f80e 	bl	800c23c <__malloc_unlock>
 800c220:	e797      	b.n	800c152 <_malloc_r+0x22>
 800c222:	6025      	str	r5, [r4, #0]
 800c224:	e7dc      	b.n	800c1e0 <_malloc_r+0xb0>
 800c226:	605b      	str	r3, [r3, #4]
 800c228:	deff      	udf	#255	; 0xff
 800c22a:	bf00      	nop
 800c22c:	20000460 	.word	0x20000460

0800c230 <__malloc_lock>:
 800c230:	4801      	ldr	r0, [pc, #4]	; (800c238 <__malloc_lock+0x8>)
 800c232:	f000 b8bd 	b.w	800c3b0 <__retarget_lock_acquire_recursive>
 800c236:	bf00      	nop
 800c238:	200005a4 	.word	0x200005a4

0800c23c <__malloc_unlock>:
 800c23c:	4801      	ldr	r0, [pc, #4]	; (800c244 <__malloc_unlock+0x8>)
 800c23e:	f000 b8b8 	b.w	800c3b2 <__retarget_lock_release_recursive>
 800c242:	bf00      	nop
 800c244:	200005a4 	.word	0x200005a4

0800c248 <__utoa>:
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	b08b      	sub	sp, #44	; 0x2c
 800c24c:	4605      	mov	r5, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	466e      	mov	r6, sp
 800c252:	4c1d      	ldr	r4, [pc, #116]	; (800c2c8 <__utoa+0x80>)
 800c254:	f104 0c20 	add.w	ip, r4, #32
 800c258:	4637      	mov	r7, r6
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	6861      	ldr	r1, [r4, #4]
 800c25e:	3408      	adds	r4, #8
 800c260:	c703      	stmia	r7!, {r0, r1}
 800c262:	4564      	cmp	r4, ip
 800c264:	463e      	mov	r6, r7
 800c266:	d1f7      	bne.n	800c258 <__utoa+0x10>
 800c268:	7921      	ldrb	r1, [r4, #4]
 800c26a:	6820      	ldr	r0, [r4, #0]
 800c26c:	7139      	strb	r1, [r7, #4]
 800c26e:	1e91      	subs	r1, r2, #2
 800c270:	2922      	cmp	r1, #34	; 0x22
 800c272:	6038      	str	r0, [r7, #0]
 800c274:	f04f 0100 	mov.w	r1, #0
 800c278:	d904      	bls.n	800c284 <__utoa+0x3c>
 800c27a:	7019      	strb	r1, [r3, #0]
 800c27c:	460b      	mov	r3, r1
 800c27e:	4618      	mov	r0, r3
 800c280:	b00b      	add	sp, #44	; 0x2c
 800c282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c284:	1e58      	subs	r0, r3, #1
 800c286:	4684      	mov	ip, r0
 800c288:	fbb5 f7f2 	udiv	r7, r5, r2
 800c28c:	fb02 5617 	mls	r6, r2, r7, r5
 800c290:	3628      	adds	r6, #40	; 0x28
 800c292:	446e      	add	r6, sp
 800c294:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c298:	460c      	mov	r4, r1
 800c29a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c29e:	462e      	mov	r6, r5
 800c2a0:	42b2      	cmp	r2, r6
 800c2a2:	463d      	mov	r5, r7
 800c2a4:	f101 0101 	add.w	r1, r1, #1
 800c2a8:	d9ee      	bls.n	800c288 <__utoa+0x40>
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	545a      	strb	r2, [r3, r1]
 800c2ae:	1919      	adds	r1, r3, r4
 800c2b0:	1aa5      	subs	r5, r4, r2
 800c2b2:	42aa      	cmp	r2, r5
 800c2b4:	dae3      	bge.n	800c27e <__utoa+0x36>
 800c2b6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c2ba:	780e      	ldrb	r6, [r1, #0]
 800c2bc:	3201      	adds	r2, #1
 800c2be:	7006      	strb	r6, [r0, #0]
 800c2c0:	f801 5901 	strb.w	r5, [r1], #-1
 800c2c4:	e7f4      	b.n	800c2b0 <__utoa+0x68>
 800c2c6:	bf00      	nop
 800c2c8:	0800daba 	.word	0x0800daba

0800c2cc <siprintf>:
 800c2cc:	b40e      	push	{r1, r2, r3}
 800c2ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2d2:	b500      	push	{lr}
 800c2d4:	b09c      	sub	sp, #112	; 0x70
 800c2d6:	ab1d      	add	r3, sp, #116	; 0x74
 800c2d8:	9002      	str	r0, [sp, #8]
 800c2da:	9006      	str	r0, [sp, #24]
 800c2dc:	9107      	str	r1, [sp, #28]
 800c2de:	9104      	str	r1, [sp, #16]
 800c2e0:	4808      	ldr	r0, [pc, #32]	; (800c304 <siprintf+0x38>)
 800c2e2:	4909      	ldr	r1, [pc, #36]	; (800c308 <siprintf+0x3c>)
 800c2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e8:	9105      	str	r1, [sp, #20]
 800c2ea:	6800      	ldr	r0, [r0, #0]
 800c2ec:	a902      	add	r1, sp, #8
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	f000 f90a 	bl	800c508 <_svfiprintf_r>
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	9b02      	ldr	r3, [sp, #8]
 800c2f8:	701a      	strb	r2, [r3, #0]
 800c2fa:	b01c      	add	sp, #112	; 0x70
 800c2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c300:	b003      	add	sp, #12
 800c302:	4770      	bx	lr
 800c304:	200000f8 	.word	0x200000f8
 800c308:	ffff0208 	.word	0xffff0208

0800c30c <memset>:
 800c30c:	4603      	mov	r3, r0
 800c30e:	4402      	add	r2, r0
 800c310:	4293      	cmp	r3, r2
 800c312:	d100      	bne.n	800c316 <memset+0xa>
 800c314:	4770      	bx	lr
 800c316:	f803 1b01 	strb.w	r1, [r3], #1
 800c31a:	e7f9      	b.n	800c310 <memset+0x4>

0800c31c <strcat>:
 800c31c:	4602      	mov	r2, r0
 800c31e:	b510      	push	{r4, lr}
 800c320:	7814      	ldrb	r4, [r2, #0]
 800c322:	4613      	mov	r3, r2
 800c324:	3201      	adds	r2, #1
 800c326:	2c00      	cmp	r4, #0
 800c328:	d1fa      	bne.n	800c320 <strcat+0x4>
 800c32a:	3b01      	subs	r3, #1
 800c32c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c330:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c334:	2a00      	cmp	r2, #0
 800c336:	d1f9      	bne.n	800c32c <strcat+0x10>
 800c338:	bd10      	pop	{r4, pc}
	...

0800c33c <_sbrk_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	2300      	movs	r3, #0
 800c340:	4d05      	ldr	r5, [pc, #20]	; (800c358 <_sbrk_r+0x1c>)
 800c342:	4604      	mov	r4, r0
 800c344:	4608      	mov	r0, r1
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	f7fc f808 	bl	800835c <_sbrk>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_sbrk_r+0x1a>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_sbrk_r+0x1a>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	200005a0 	.word	0x200005a0

0800c35c <__errno>:
 800c35c:	4b01      	ldr	r3, [pc, #4]	; (800c364 <__errno+0x8>)
 800c35e:	6818      	ldr	r0, [r3, #0]
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	200000f8 	.word	0x200000f8

0800c368 <__libc_init_array>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	2600      	movs	r6, #0
 800c36c:	4d0c      	ldr	r5, [pc, #48]	; (800c3a0 <__libc_init_array+0x38>)
 800c36e:	4c0d      	ldr	r4, [pc, #52]	; (800c3a4 <__libc_init_array+0x3c>)
 800c370:	1b64      	subs	r4, r4, r5
 800c372:	10a4      	asrs	r4, r4, #2
 800c374:	42a6      	cmp	r6, r4
 800c376:	d109      	bne.n	800c38c <__libc_init_array+0x24>
 800c378:	f000 fbc6 	bl	800cb08 <_init>
 800c37c:	2600      	movs	r6, #0
 800c37e:	4d0a      	ldr	r5, [pc, #40]	; (800c3a8 <__libc_init_array+0x40>)
 800c380:	4c0a      	ldr	r4, [pc, #40]	; (800c3ac <__libc_init_array+0x44>)
 800c382:	1b64      	subs	r4, r4, r5
 800c384:	10a4      	asrs	r4, r4, #2
 800c386:	42a6      	cmp	r6, r4
 800c388:	d105      	bne.n	800c396 <__libc_init_array+0x2e>
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c390:	4798      	blx	r3
 800c392:	3601      	adds	r6, #1
 800c394:	e7ee      	b.n	800c374 <__libc_init_array+0xc>
 800c396:	f855 3b04 	ldr.w	r3, [r5], #4
 800c39a:	4798      	blx	r3
 800c39c:	3601      	adds	r6, #1
 800c39e:	e7f2      	b.n	800c386 <__libc_init_array+0x1e>
 800c3a0:	0800db14 	.word	0x0800db14
 800c3a4:	0800db14 	.word	0x0800db14
 800c3a8:	0800db14 	.word	0x0800db14
 800c3ac:	0800db18 	.word	0x0800db18

0800c3b0 <__retarget_lock_acquire_recursive>:
 800c3b0:	4770      	bx	lr

0800c3b2 <__retarget_lock_release_recursive>:
 800c3b2:	4770      	bx	lr

0800c3b4 <strcpy>:
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ba:	f803 2b01 	strb.w	r2, [r3], #1
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d1f9      	bne.n	800c3b6 <strcpy+0x2>
 800c3c2:	4770      	bx	lr

0800c3c4 <_free_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	2900      	cmp	r1, #0
 800c3ca:	d040      	beq.n	800c44e <_free_r+0x8a>
 800c3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d0:	1f0c      	subs	r4, r1, #4
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	bfb8      	it	lt
 800c3d6:	18e4      	addlt	r4, r4, r3
 800c3d8:	f7ff ff2a 	bl	800c230 <__malloc_lock>
 800c3dc:	4a1c      	ldr	r2, [pc, #112]	; (800c450 <_free_r+0x8c>)
 800c3de:	6813      	ldr	r3, [r2, #0]
 800c3e0:	b933      	cbnz	r3, 800c3f0 <_free_r+0x2c>
 800c3e2:	6063      	str	r3, [r4, #4]
 800c3e4:	6014      	str	r4, [r2, #0]
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ec:	f7ff bf26 	b.w	800c23c <__malloc_unlock>
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	d908      	bls.n	800c406 <_free_r+0x42>
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	1821      	adds	r1, r4, r0
 800c3f8:	428b      	cmp	r3, r1
 800c3fa:	bf01      	itttt	eq
 800c3fc:	6819      	ldreq	r1, [r3, #0]
 800c3fe:	685b      	ldreq	r3, [r3, #4]
 800c400:	1809      	addeq	r1, r1, r0
 800c402:	6021      	streq	r1, [r4, #0]
 800c404:	e7ed      	b.n	800c3e2 <_free_r+0x1e>
 800c406:	461a      	mov	r2, r3
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	b10b      	cbz	r3, 800c410 <_free_r+0x4c>
 800c40c:	42a3      	cmp	r3, r4
 800c40e:	d9fa      	bls.n	800c406 <_free_r+0x42>
 800c410:	6811      	ldr	r1, [r2, #0]
 800c412:	1850      	adds	r0, r2, r1
 800c414:	42a0      	cmp	r0, r4
 800c416:	d10b      	bne.n	800c430 <_free_r+0x6c>
 800c418:	6820      	ldr	r0, [r4, #0]
 800c41a:	4401      	add	r1, r0
 800c41c:	1850      	adds	r0, r2, r1
 800c41e:	4283      	cmp	r3, r0
 800c420:	6011      	str	r1, [r2, #0]
 800c422:	d1e0      	bne.n	800c3e6 <_free_r+0x22>
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	4408      	add	r0, r1
 800c42a:	6010      	str	r0, [r2, #0]
 800c42c:	6053      	str	r3, [r2, #4]
 800c42e:	e7da      	b.n	800c3e6 <_free_r+0x22>
 800c430:	d902      	bls.n	800c438 <_free_r+0x74>
 800c432:	230c      	movs	r3, #12
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	e7d6      	b.n	800c3e6 <_free_r+0x22>
 800c438:	6820      	ldr	r0, [r4, #0]
 800c43a:	1821      	adds	r1, r4, r0
 800c43c:	428b      	cmp	r3, r1
 800c43e:	bf01      	itttt	eq
 800c440:	6819      	ldreq	r1, [r3, #0]
 800c442:	685b      	ldreq	r3, [r3, #4]
 800c444:	1809      	addeq	r1, r1, r0
 800c446:	6021      	streq	r1, [r4, #0]
 800c448:	6063      	str	r3, [r4, #4]
 800c44a:	6054      	str	r4, [r2, #4]
 800c44c:	e7cb      	b.n	800c3e6 <_free_r+0x22>
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	20000460 	.word	0x20000460

0800c454 <__ssputs_r>:
 800c454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c458:	461f      	mov	r7, r3
 800c45a:	688e      	ldr	r6, [r1, #8]
 800c45c:	4682      	mov	sl, r0
 800c45e:	42be      	cmp	r6, r7
 800c460:	460c      	mov	r4, r1
 800c462:	4690      	mov	r8, r2
 800c464:	680b      	ldr	r3, [r1, #0]
 800c466:	d82c      	bhi.n	800c4c2 <__ssputs_r+0x6e>
 800c468:	898a      	ldrh	r2, [r1, #12]
 800c46a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c46e:	d026      	beq.n	800c4be <__ssputs_r+0x6a>
 800c470:	6965      	ldr	r5, [r4, #20]
 800c472:	6909      	ldr	r1, [r1, #16]
 800c474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c478:	eba3 0901 	sub.w	r9, r3, r1
 800c47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c480:	1c7b      	adds	r3, r7, #1
 800c482:	444b      	add	r3, r9
 800c484:	106d      	asrs	r5, r5, #1
 800c486:	429d      	cmp	r5, r3
 800c488:	bf38      	it	cc
 800c48a:	461d      	movcc	r5, r3
 800c48c:	0553      	lsls	r3, r2, #21
 800c48e:	d527      	bpl.n	800c4e0 <__ssputs_r+0x8c>
 800c490:	4629      	mov	r1, r5
 800c492:	f7ff fe4d 	bl	800c130 <_malloc_r>
 800c496:	4606      	mov	r6, r0
 800c498:	b360      	cbz	r0, 800c4f4 <__ssputs_r+0xa0>
 800c49a:	464a      	mov	r2, r9
 800c49c:	6921      	ldr	r1, [r4, #16]
 800c49e:	f000 faed 	bl	800ca7c <memcpy>
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ac:	81a3      	strh	r3, [r4, #12]
 800c4ae:	6126      	str	r6, [r4, #16]
 800c4b0:	444e      	add	r6, r9
 800c4b2:	6026      	str	r6, [r4, #0]
 800c4b4:	463e      	mov	r6, r7
 800c4b6:	6165      	str	r5, [r4, #20]
 800c4b8:	eba5 0509 	sub.w	r5, r5, r9
 800c4bc:	60a5      	str	r5, [r4, #8]
 800c4be:	42be      	cmp	r6, r7
 800c4c0:	d900      	bls.n	800c4c4 <__ssputs_r+0x70>
 800c4c2:	463e      	mov	r6, r7
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	4641      	mov	r1, r8
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	f000 faaf 	bl	800ca2c <memmove>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	68a3      	ldr	r3, [r4, #8]
 800c4d2:	1b9b      	subs	r3, r3, r6
 800c4d4:	60a3      	str	r3, [r4, #8]
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	4433      	add	r3, r6
 800c4da:	6023      	str	r3, [r4, #0]
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	462a      	mov	r2, r5
 800c4e2:	f000 fad9 	bl	800ca98 <_realloc_r>
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d1e0      	bne.n	800c4ae <__ssputs_r+0x5a>
 800c4ec:	4650      	mov	r0, sl
 800c4ee:	6921      	ldr	r1, [r4, #16]
 800c4f0:	f7ff ff68 	bl	800c3c4 <_free_r>
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	f8ca 3000 	str.w	r3, [sl]
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c504:	81a3      	strh	r3, [r4, #12]
 800c506:	e7e9      	b.n	800c4dc <__ssputs_r+0x88>

0800c508 <_svfiprintf_r>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	4698      	mov	r8, r3
 800c50e:	898b      	ldrh	r3, [r1, #12]
 800c510:	4607      	mov	r7, r0
 800c512:	061b      	lsls	r3, r3, #24
 800c514:	460d      	mov	r5, r1
 800c516:	4614      	mov	r4, r2
 800c518:	b09d      	sub	sp, #116	; 0x74
 800c51a:	d50e      	bpl.n	800c53a <_svfiprintf_r+0x32>
 800c51c:	690b      	ldr	r3, [r1, #16]
 800c51e:	b963      	cbnz	r3, 800c53a <_svfiprintf_r+0x32>
 800c520:	2140      	movs	r1, #64	; 0x40
 800c522:	f7ff fe05 	bl	800c130 <_malloc_r>
 800c526:	6028      	str	r0, [r5, #0]
 800c528:	6128      	str	r0, [r5, #16]
 800c52a:	b920      	cbnz	r0, 800c536 <_svfiprintf_r+0x2e>
 800c52c:	230c      	movs	r3, #12
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	f04f 30ff 	mov.w	r0, #4294967295
 800c534:	e0d0      	b.n	800c6d8 <_svfiprintf_r+0x1d0>
 800c536:	2340      	movs	r3, #64	; 0x40
 800c538:	616b      	str	r3, [r5, #20]
 800c53a:	2300      	movs	r3, #0
 800c53c:	9309      	str	r3, [sp, #36]	; 0x24
 800c53e:	2320      	movs	r3, #32
 800c540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c544:	2330      	movs	r3, #48	; 0x30
 800c546:	f04f 0901 	mov.w	r9, #1
 800c54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c54e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c6f0 <_svfiprintf_r+0x1e8>
 800c552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c556:	4623      	mov	r3, r4
 800c558:	469a      	mov	sl, r3
 800c55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c55e:	b10a      	cbz	r2, 800c564 <_svfiprintf_r+0x5c>
 800c560:	2a25      	cmp	r2, #37	; 0x25
 800c562:	d1f9      	bne.n	800c558 <_svfiprintf_r+0x50>
 800c564:	ebba 0b04 	subs.w	fp, sl, r4
 800c568:	d00b      	beq.n	800c582 <_svfiprintf_r+0x7a>
 800c56a:	465b      	mov	r3, fp
 800c56c:	4622      	mov	r2, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	4638      	mov	r0, r7
 800c572:	f7ff ff6f 	bl	800c454 <__ssputs_r>
 800c576:	3001      	adds	r0, #1
 800c578:	f000 80a9 	beq.w	800c6ce <_svfiprintf_r+0x1c6>
 800c57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57e:	445a      	add	r2, fp
 800c580:	9209      	str	r2, [sp, #36]	; 0x24
 800c582:	f89a 3000 	ldrb.w	r3, [sl]
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 80a1 	beq.w	800c6ce <_svfiprintf_r+0x1c6>
 800c58c:	2300      	movs	r3, #0
 800c58e:	f04f 32ff 	mov.w	r2, #4294967295
 800c592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c596:	f10a 0a01 	add.w	sl, sl, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	9307      	str	r3, [sp, #28]
 800c59e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c5a4:	4654      	mov	r4, sl
 800c5a6:	2205      	movs	r2, #5
 800c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ac:	4850      	ldr	r0, [pc, #320]	; (800c6f0 <_svfiprintf_r+0x1e8>)
 800c5ae:	f000 fa57 	bl	800ca60 <memchr>
 800c5b2:	9a04      	ldr	r2, [sp, #16]
 800c5b4:	b9d8      	cbnz	r0, 800c5ee <_svfiprintf_r+0xe6>
 800c5b6:	06d0      	lsls	r0, r2, #27
 800c5b8:	bf44      	itt	mi
 800c5ba:	2320      	movmi	r3, #32
 800c5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c0:	0711      	lsls	r1, r2, #28
 800c5c2:	bf44      	itt	mi
 800c5c4:	232b      	movmi	r3, #43	; 0x2b
 800c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d0:	d015      	beq.n	800c5fe <_svfiprintf_r+0xf6>
 800c5d2:	4654      	mov	r4, sl
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f04f 0c0a 	mov.w	ip, #10
 800c5da:	9a07      	ldr	r2, [sp, #28]
 800c5dc:	4621      	mov	r1, r4
 800c5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e2:	3b30      	subs	r3, #48	; 0x30
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d94d      	bls.n	800c684 <_svfiprintf_r+0x17c>
 800c5e8:	b1b0      	cbz	r0, 800c618 <_svfiprintf_r+0x110>
 800c5ea:	9207      	str	r2, [sp, #28]
 800c5ec:	e014      	b.n	800c618 <_svfiprintf_r+0x110>
 800c5ee:	eba0 0308 	sub.w	r3, r0, r8
 800c5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	46a2      	mov	sl, r4
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	e7d2      	b.n	800c5a4 <_svfiprintf_r+0x9c>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	1d19      	adds	r1, r3, #4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	9103      	str	r1, [sp, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	bfbb      	ittet	lt
 800c60a:	425b      	neglt	r3, r3
 800c60c:	f042 0202 	orrlt.w	r2, r2, #2
 800c610:	9307      	strge	r3, [sp, #28]
 800c612:	9307      	strlt	r3, [sp, #28]
 800c614:	bfb8      	it	lt
 800c616:	9204      	strlt	r2, [sp, #16]
 800c618:	7823      	ldrb	r3, [r4, #0]
 800c61a:	2b2e      	cmp	r3, #46	; 0x2e
 800c61c:	d10c      	bne.n	800c638 <_svfiprintf_r+0x130>
 800c61e:	7863      	ldrb	r3, [r4, #1]
 800c620:	2b2a      	cmp	r3, #42	; 0x2a
 800c622:	d134      	bne.n	800c68e <_svfiprintf_r+0x186>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	3402      	adds	r4, #2
 800c628:	1d1a      	adds	r2, r3, #4
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	9203      	str	r2, [sp, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bfb8      	it	lt
 800c632:	f04f 33ff 	movlt.w	r3, #4294967295
 800c636:	9305      	str	r3, [sp, #20]
 800c638:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c6f4 <_svfiprintf_r+0x1ec>
 800c63c:	2203      	movs	r2, #3
 800c63e:	4650      	mov	r0, sl
 800c640:	7821      	ldrb	r1, [r4, #0]
 800c642:	f000 fa0d 	bl	800ca60 <memchr>
 800c646:	b138      	cbz	r0, 800c658 <_svfiprintf_r+0x150>
 800c648:	2240      	movs	r2, #64	; 0x40
 800c64a:	9b04      	ldr	r3, [sp, #16]
 800c64c:	eba0 000a 	sub.w	r0, r0, sl
 800c650:	4082      	lsls	r2, r0
 800c652:	4313      	orrs	r3, r2
 800c654:	3401      	adds	r4, #1
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	2206      	movs	r2, #6
 800c65e:	4826      	ldr	r0, [pc, #152]	; (800c6f8 <_svfiprintf_r+0x1f0>)
 800c660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c664:	f000 f9fc 	bl	800ca60 <memchr>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d038      	beq.n	800c6de <_svfiprintf_r+0x1d6>
 800c66c:	4b23      	ldr	r3, [pc, #140]	; (800c6fc <_svfiprintf_r+0x1f4>)
 800c66e:	bb1b      	cbnz	r3, 800c6b8 <_svfiprintf_r+0x1b0>
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	3307      	adds	r3, #7
 800c674:	f023 0307 	bic.w	r3, r3, #7
 800c678:	3308      	adds	r3, #8
 800c67a:	9303      	str	r3, [sp, #12]
 800c67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67e:	4433      	add	r3, r6
 800c680:	9309      	str	r3, [sp, #36]	; 0x24
 800c682:	e768      	b.n	800c556 <_svfiprintf_r+0x4e>
 800c684:	460c      	mov	r4, r1
 800c686:	2001      	movs	r0, #1
 800c688:	fb0c 3202 	mla	r2, ip, r2, r3
 800c68c:	e7a6      	b.n	800c5dc <_svfiprintf_r+0xd4>
 800c68e:	2300      	movs	r3, #0
 800c690:	f04f 0c0a 	mov.w	ip, #10
 800c694:	4619      	mov	r1, r3
 800c696:	3401      	adds	r4, #1
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	4620      	mov	r0, r4
 800c69c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a0:	3a30      	subs	r2, #48	; 0x30
 800c6a2:	2a09      	cmp	r2, #9
 800c6a4:	d903      	bls.n	800c6ae <_svfiprintf_r+0x1a6>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0c6      	beq.n	800c638 <_svfiprintf_r+0x130>
 800c6aa:	9105      	str	r1, [sp, #20]
 800c6ac:	e7c4      	b.n	800c638 <_svfiprintf_r+0x130>
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b6:	e7f0      	b.n	800c69a <_svfiprintf_r+0x192>
 800c6b8:	ab03      	add	r3, sp, #12
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	462a      	mov	r2, r5
 800c6be:	4638      	mov	r0, r7
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <_svfiprintf_r+0x1f8>)
 800c6c2:	a904      	add	r1, sp, #16
 800c6c4:	f3af 8000 	nop.w
 800c6c8:	1c42      	adds	r2, r0, #1
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	d1d6      	bne.n	800c67c <_svfiprintf_r+0x174>
 800c6ce:	89ab      	ldrh	r3, [r5, #12]
 800c6d0:	065b      	lsls	r3, r3, #25
 800c6d2:	f53f af2d 	bmi.w	800c530 <_svfiprintf_r+0x28>
 800c6d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d8:	b01d      	add	sp, #116	; 0x74
 800c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6de:	ab03      	add	r3, sp, #12
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	462a      	mov	r2, r5
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <_svfiprintf_r+0x1f8>)
 800c6e8:	a904      	add	r1, sp, #16
 800c6ea:	f000 f87d 	bl	800c7e8 <_printf_i>
 800c6ee:	e7eb      	b.n	800c6c8 <_svfiprintf_r+0x1c0>
 800c6f0:	0800dadf 	.word	0x0800dadf
 800c6f4:	0800dae5 	.word	0x0800dae5
 800c6f8:	0800dae9 	.word	0x0800dae9
 800c6fc:	00000000 	.word	0x00000000
 800c700:	0800c455 	.word	0x0800c455

0800c704 <_printf_common>:
 800c704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c708:	4616      	mov	r6, r2
 800c70a:	4699      	mov	r9, r3
 800c70c:	688a      	ldr	r2, [r1, #8]
 800c70e:	690b      	ldr	r3, [r1, #16]
 800c710:	4607      	mov	r7, r0
 800c712:	4293      	cmp	r3, r2
 800c714:	bfb8      	it	lt
 800c716:	4613      	movlt	r3, r2
 800c718:	6033      	str	r3, [r6, #0]
 800c71a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c71e:	460c      	mov	r4, r1
 800c720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c724:	b10a      	cbz	r2, 800c72a <_printf_common+0x26>
 800c726:	3301      	adds	r3, #1
 800c728:	6033      	str	r3, [r6, #0]
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	0699      	lsls	r1, r3, #26
 800c72e:	bf42      	ittt	mi
 800c730:	6833      	ldrmi	r3, [r6, #0]
 800c732:	3302      	addmi	r3, #2
 800c734:	6033      	strmi	r3, [r6, #0]
 800c736:	6825      	ldr	r5, [r4, #0]
 800c738:	f015 0506 	ands.w	r5, r5, #6
 800c73c:	d106      	bne.n	800c74c <_printf_common+0x48>
 800c73e:	f104 0a19 	add.w	sl, r4, #25
 800c742:	68e3      	ldr	r3, [r4, #12]
 800c744:	6832      	ldr	r2, [r6, #0]
 800c746:	1a9b      	subs	r3, r3, r2
 800c748:	42ab      	cmp	r3, r5
 800c74a:	dc2b      	bgt.n	800c7a4 <_printf_common+0xa0>
 800c74c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c750:	1e13      	subs	r3, r2, #0
 800c752:	6822      	ldr	r2, [r4, #0]
 800c754:	bf18      	it	ne
 800c756:	2301      	movne	r3, #1
 800c758:	0692      	lsls	r2, r2, #26
 800c75a:	d430      	bmi.n	800c7be <_printf_common+0xba>
 800c75c:	4649      	mov	r1, r9
 800c75e:	4638      	mov	r0, r7
 800c760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c764:	47c0      	blx	r8
 800c766:	3001      	adds	r0, #1
 800c768:	d023      	beq.n	800c7b2 <_printf_common+0xae>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	6922      	ldr	r2, [r4, #16]
 800c76e:	f003 0306 	and.w	r3, r3, #6
 800c772:	2b04      	cmp	r3, #4
 800c774:	bf14      	ite	ne
 800c776:	2500      	movne	r5, #0
 800c778:	6833      	ldreq	r3, [r6, #0]
 800c77a:	f04f 0600 	mov.w	r6, #0
 800c77e:	bf08      	it	eq
 800c780:	68e5      	ldreq	r5, [r4, #12]
 800c782:	f104 041a 	add.w	r4, r4, #26
 800c786:	bf08      	it	eq
 800c788:	1aed      	subeq	r5, r5, r3
 800c78a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c78e:	bf08      	it	eq
 800c790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c794:	4293      	cmp	r3, r2
 800c796:	bfc4      	itt	gt
 800c798:	1a9b      	subgt	r3, r3, r2
 800c79a:	18ed      	addgt	r5, r5, r3
 800c79c:	42b5      	cmp	r5, r6
 800c79e:	d11a      	bne.n	800c7d6 <_printf_common+0xd2>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e008      	b.n	800c7b6 <_printf_common+0xb2>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4652      	mov	r2, sl
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	47c0      	blx	r8
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d103      	bne.n	800c7ba <_printf_common+0xb6>
 800c7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ba:	3501      	adds	r5, #1
 800c7bc:	e7c1      	b.n	800c742 <_printf_common+0x3e>
 800c7be:	2030      	movs	r0, #48	; 0x30
 800c7c0:	18e1      	adds	r1, r4, r3
 800c7c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7cc:	4422      	add	r2, r4
 800c7ce:	3302      	adds	r3, #2
 800c7d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7d4:	e7c2      	b.n	800c75c <_printf_common+0x58>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4622      	mov	r2, r4
 800c7da:	4649      	mov	r1, r9
 800c7dc:	4638      	mov	r0, r7
 800c7de:	47c0      	blx	r8
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d0e6      	beq.n	800c7b2 <_printf_common+0xae>
 800c7e4:	3601      	adds	r6, #1
 800c7e6:	e7d9      	b.n	800c79c <_printf_common+0x98>

0800c7e8 <_printf_i>:
 800c7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ec:	7e0f      	ldrb	r7, [r1, #24]
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	2f78      	cmp	r7, #120	; 0x78
 800c7f2:	4680      	mov	r8, r0
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	469a      	mov	sl, r3
 800c7f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7fe:	d807      	bhi.n	800c810 <_printf_i+0x28>
 800c800:	2f62      	cmp	r7, #98	; 0x62
 800c802:	d80a      	bhi.n	800c81a <_printf_i+0x32>
 800c804:	2f00      	cmp	r7, #0
 800c806:	f000 80d5 	beq.w	800c9b4 <_printf_i+0x1cc>
 800c80a:	2f58      	cmp	r7, #88	; 0x58
 800c80c:	f000 80c1 	beq.w	800c992 <_printf_i+0x1aa>
 800c810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c818:	e03a      	b.n	800c890 <_printf_i+0xa8>
 800c81a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c81e:	2b15      	cmp	r3, #21
 800c820:	d8f6      	bhi.n	800c810 <_printf_i+0x28>
 800c822:	a101      	add	r1, pc, #4	; (adr r1, 800c828 <_printf_i+0x40>)
 800c824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c828:	0800c881 	.word	0x0800c881
 800c82c:	0800c895 	.word	0x0800c895
 800c830:	0800c811 	.word	0x0800c811
 800c834:	0800c811 	.word	0x0800c811
 800c838:	0800c811 	.word	0x0800c811
 800c83c:	0800c811 	.word	0x0800c811
 800c840:	0800c895 	.word	0x0800c895
 800c844:	0800c811 	.word	0x0800c811
 800c848:	0800c811 	.word	0x0800c811
 800c84c:	0800c811 	.word	0x0800c811
 800c850:	0800c811 	.word	0x0800c811
 800c854:	0800c99b 	.word	0x0800c99b
 800c858:	0800c8c1 	.word	0x0800c8c1
 800c85c:	0800c955 	.word	0x0800c955
 800c860:	0800c811 	.word	0x0800c811
 800c864:	0800c811 	.word	0x0800c811
 800c868:	0800c9bd 	.word	0x0800c9bd
 800c86c:	0800c811 	.word	0x0800c811
 800c870:	0800c8c1 	.word	0x0800c8c1
 800c874:	0800c811 	.word	0x0800c811
 800c878:	0800c811 	.word	0x0800c811
 800c87c:	0800c95d 	.word	0x0800c95d
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	1d1a      	adds	r2, r3, #4
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	602a      	str	r2, [r5, #0]
 800c888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c88c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c890:	2301      	movs	r3, #1
 800c892:	e0a0      	b.n	800c9d6 <_printf_i+0x1ee>
 800c894:	6820      	ldr	r0, [r4, #0]
 800c896:	682b      	ldr	r3, [r5, #0]
 800c898:	0607      	lsls	r7, r0, #24
 800c89a:	f103 0104 	add.w	r1, r3, #4
 800c89e:	6029      	str	r1, [r5, #0]
 800c8a0:	d501      	bpl.n	800c8a6 <_printf_i+0xbe>
 800c8a2:	681e      	ldr	r6, [r3, #0]
 800c8a4:	e003      	b.n	800c8ae <_printf_i+0xc6>
 800c8a6:	0646      	lsls	r6, r0, #25
 800c8a8:	d5fb      	bpl.n	800c8a2 <_printf_i+0xba>
 800c8aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c8ae:	2e00      	cmp	r6, #0
 800c8b0:	da03      	bge.n	800c8ba <_printf_i+0xd2>
 800c8b2:	232d      	movs	r3, #45	; 0x2d
 800c8b4:	4276      	negs	r6, r6
 800c8b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ba:	230a      	movs	r3, #10
 800c8bc:	4859      	ldr	r0, [pc, #356]	; (800ca24 <_printf_i+0x23c>)
 800c8be:	e012      	b.n	800c8e6 <_printf_i+0xfe>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	6820      	ldr	r0, [r4, #0]
 800c8c4:	1d19      	adds	r1, r3, #4
 800c8c6:	6029      	str	r1, [r5, #0]
 800c8c8:	0605      	lsls	r5, r0, #24
 800c8ca:	d501      	bpl.n	800c8d0 <_printf_i+0xe8>
 800c8cc:	681e      	ldr	r6, [r3, #0]
 800c8ce:	e002      	b.n	800c8d6 <_printf_i+0xee>
 800c8d0:	0641      	lsls	r1, r0, #25
 800c8d2:	d5fb      	bpl.n	800c8cc <_printf_i+0xe4>
 800c8d4:	881e      	ldrh	r6, [r3, #0]
 800c8d6:	2f6f      	cmp	r7, #111	; 0x6f
 800c8d8:	bf0c      	ite	eq
 800c8da:	2308      	moveq	r3, #8
 800c8dc:	230a      	movne	r3, #10
 800c8de:	4851      	ldr	r0, [pc, #324]	; (800ca24 <_printf_i+0x23c>)
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8e6:	6865      	ldr	r5, [r4, #4]
 800c8e8:	2d00      	cmp	r5, #0
 800c8ea:	bfa8      	it	ge
 800c8ec:	6821      	ldrge	r1, [r4, #0]
 800c8ee:	60a5      	str	r5, [r4, #8]
 800c8f0:	bfa4      	itt	ge
 800c8f2:	f021 0104 	bicge.w	r1, r1, #4
 800c8f6:	6021      	strge	r1, [r4, #0]
 800c8f8:	b90e      	cbnz	r6, 800c8fe <_printf_i+0x116>
 800c8fa:	2d00      	cmp	r5, #0
 800c8fc:	d04b      	beq.n	800c996 <_printf_i+0x1ae>
 800c8fe:	4615      	mov	r5, r2
 800c900:	fbb6 f1f3 	udiv	r1, r6, r3
 800c904:	fb03 6711 	mls	r7, r3, r1, r6
 800c908:	5dc7      	ldrb	r7, [r0, r7]
 800c90a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c90e:	4637      	mov	r7, r6
 800c910:	42bb      	cmp	r3, r7
 800c912:	460e      	mov	r6, r1
 800c914:	d9f4      	bls.n	800c900 <_printf_i+0x118>
 800c916:	2b08      	cmp	r3, #8
 800c918:	d10b      	bne.n	800c932 <_printf_i+0x14a>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	07de      	lsls	r6, r3, #31
 800c91e:	d508      	bpl.n	800c932 <_printf_i+0x14a>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	6861      	ldr	r1, [r4, #4]
 800c924:	4299      	cmp	r1, r3
 800c926:	bfde      	ittt	le
 800c928:	2330      	movle	r3, #48	; 0x30
 800c92a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c92e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c932:	1b52      	subs	r2, r2, r5
 800c934:	6122      	str	r2, [r4, #16]
 800c936:	464b      	mov	r3, r9
 800c938:	4621      	mov	r1, r4
 800c93a:	4640      	mov	r0, r8
 800c93c:	f8cd a000 	str.w	sl, [sp]
 800c940:	aa03      	add	r2, sp, #12
 800c942:	f7ff fedf 	bl	800c704 <_printf_common>
 800c946:	3001      	adds	r0, #1
 800c948:	d14a      	bne.n	800c9e0 <_printf_i+0x1f8>
 800c94a:	f04f 30ff 	mov.w	r0, #4294967295
 800c94e:	b004      	add	sp, #16
 800c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	f043 0320 	orr.w	r3, r3, #32
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	2778      	movs	r7, #120	; 0x78
 800c95e:	4832      	ldr	r0, [pc, #200]	; (800ca28 <_printf_i+0x240>)
 800c960:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	6829      	ldr	r1, [r5, #0]
 800c968:	061f      	lsls	r7, r3, #24
 800c96a:	f851 6b04 	ldr.w	r6, [r1], #4
 800c96e:	d402      	bmi.n	800c976 <_printf_i+0x18e>
 800c970:	065f      	lsls	r7, r3, #25
 800c972:	bf48      	it	mi
 800c974:	b2b6      	uxthmi	r6, r6
 800c976:	07df      	lsls	r7, r3, #31
 800c978:	bf48      	it	mi
 800c97a:	f043 0320 	orrmi.w	r3, r3, #32
 800c97e:	6029      	str	r1, [r5, #0]
 800c980:	bf48      	it	mi
 800c982:	6023      	strmi	r3, [r4, #0]
 800c984:	b91e      	cbnz	r6, 800c98e <_printf_i+0x1a6>
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	f023 0320 	bic.w	r3, r3, #32
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	2310      	movs	r3, #16
 800c990:	e7a6      	b.n	800c8e0 <_printf_i+0xf8>
 800c992:	4824      	ldr	r0, [pc, #144]	; (800ca24 <_printf_i+0x23c>)
 800c994:	e7e4      	b.n	800c960 <_printf_i+0x178>
 800c996:	4615      	mov	r5, r2
 800c998:	e7bd      	b.n	800c916 <_printf_i+0x12e>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	6826      	ldr	r6, [r4, #0]
 800c99e:	1d18      	adds	r0, r3, #4
 800c9a0:	6961      	ldr	r1, [r4, #20]
 800c9a2:	6028      	str	r0, [r5, #0]
 800c9a4:	0635      	lsls	r5, r6, #24
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	d501      	bpl.n	800c9ae <_printf_i+0x1c6>
 800c9aa:	6019      	str	r1, [r3, #0]
 800c9ac:	e002      	b.n	800c9b4 <_printf_i+0x1cc>
 800c9ae:	0670      	lsls	r0, r6, #25
 800c9b0:	d5fb      	bpl.n	800c9aa <_printf_i+0x1c2>
 800c9b2:	8019      	strh	r1, [r3, #0]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4615      	mov	r5, r2
 800c9b8:	6123      	str	r3, [r4, #16]
 800c9ba:	e7bc      	b.n	800c936 <_printf_i+0x14e>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	2100      	movs	r1, #0
 800c9c0:	1d1a      	adds	r2, r3, #4
 800c9c2:	602a      	str	r2, [r5, #0]
 800c9c4:	681d      	ldr	r5, [r3, #0]
 800c9c6:	6862      	ldr	r2, [r4, #4]
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f000 f849 	bl	800ca60 <memchr>
 800c9ce:	b108      	cbz	r0, 800c9d4 <_printf_i+0x1ec>
 800c9d0:	1b40      	subs	r0, r0, r5
 800c9d2:	6060      	str	r0, [r4, #4]
 800c9d4:	6863      	ldr	r3, [r4, #4]
 800c9d6:	6123      	str	r3, [r4, #16]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9de:	e7aa      	b.n	800c936 <_printf_i+0x14e>
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	47d0      	blx	sl
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	d0ad      	beq.n	800c94a <_printf_i+0x162>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	079b      	lsls	r3, r3, #30
 800c9f2:	d413      	bmi.n	800ca1c <_printf_i+0x234>
 800c9f4:	68e0      	ldr	r0, [r4, #12]
 800c9f6:	9b03      	ldr	r3, [sp, #12]
 800c9f8:	4298      	cmp	r0, r3
 800c9fa:	bfb8      	it	lt
 800c9fc:	4618      	movlt	r0, r3
 800c9fe:	e7a6      	b.n	800c94e <_printf_i+0x166>
 800ca00:	2301      	movs	r3, #1
 800ca02:	4632      	mov	r2, r6
 800ca04:	4649      	mov	r1, r9
 800ca06:	4640      	mov	r0, r8
 800ca08:	47d0      	blx	sl
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	d09d      	beq.n	800c94a <_printf_i+0x162>
 800ca0e:	3501      	adds	r5, #1
 800ca10:	68e3      	ldr	r3, [r4, #12]
 800ca12:	9903      	ldr	r1, [sp, #12]
 800ca14:	1a5b      	subs	r3, r3, r1
 800ca16:	42ab      	cmp	r3, r5
 800ca18:	dcf2      	bgt.n	800ca00 <_printf_i+0x218>
 800ca1a:	e7eb      	b.n	800c9f4 <_printf_i+0x20c>
 800ca1c:	2500      	movs	r5, #0
 800ca1e:	f104 0619 	add.w	r6, r4, #25
 800ca22:	e7f5      	b.n	800ca10 <_printf_i+0x228>
 800ca24:	0800daf0 	.word	0x0800daf0
 800ca28:	0800db01 	.word	0x0800db01

0800ca2c <memmove>:
 800ca2c:	4288      	cmp	r0, r1
 800ca2e:	b510      	push	{r4, lr}
 800ca30:	eb01 0402 	add.w	r4, r1, r2
 800ca34:	d902      	bls.n	800ca3c <memmove+0x10>
 800ca36:	4284      	cmp	r4, r0
 800ca38:	4623      	mov	r3, r4
 800ca3a:	d807      	bhi.n	800ca4c <memmove+0x20>
 800ca3c:	1e43      	subs	r3, r0, #1
 800ca3e:	42a1      	cmp	r1, r4
 800ca40:	d008      	beq.n	800ca54 <memmove+0x28>
 800ca42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca4a:	e7f8      	b.n	800ca3e <memmove+0x12>
 800ca4c:	4601      	mov	r1, r0
 800ca4e:	4402      	add	r2, r0
 800ca50:	428a      	cmp	r2, r1
 800ca52:	d100      	bne.n	800ca56 <memmove+0x2a>
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca5e:	e7f7      	b.n	800ca50 <memmove+0x24>

0800ca60 <memchr>:
 800ca60:	4603      	mov	r3, r0
 800ca62:	b510      	push	{r4, lr}
 800ca64:	b2c9      	uxtb	r1, r1
 800ca66:	4402      	add	r2, r0
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	d101      	bne.n	800ca72 <memchr+0x12>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	e003      	b.n	800ca7a <memchr+0x1a>
 800ca72:	7804      	ldrb	r4, [r0, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	428c      	cmp	r4, r1
 800ca78:	d1f6      	bne.n	800ca68 <memchr+0x8>
 800ca7a:	bd10      	pop	{r4, pc}

0800ca7c <memcpy>:
 800ca7c:	440a      	add	r2, r1
 800ca7e:	4291      	cmp	r1, r2
 800ca80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca84:	d100      	bne.n	800ca88 <memcpy+0xc>
 800ca86:	4770      	bx	lr
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca8e:	4291      	cmp	r1, r2
 800ca90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca94:	d1f9      	bne.n	800ca8a <memcpy+0xe>
 800ca96:	bd10      	pop	{r4, pc}

0800ca98 <_realloc_r>:
 800ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9c:	4680      	mov	r8, r0
 800ca9e:	4614      	mov	r4, r2
 800caa0:	460e      	mov	r6, r1
 800caa2:	b921      	cbnz	r1, 800caae <_realloc_r+0x16>
 800caa4:	4611      	mov	r1, r2
 800caa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caaa:	f7ff bb41 	b.w	800c130 <_malloc_r>
 800caae:	b92a      	cbnz	r2, 800cabc <_realloc_r+0x24>
 800cab0:	f7ff fc88 	bl	800c3c4 <_free_r>
 800cab4:	4625      	mov	r5, r4
 800cab6:	4628      	mov	r0, r5
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	f000 f81b 	bl	800caf6 <_malloc_usable_size_r>
 800cac0:	4284      	cmp	r4, r0
 800cac2:	4607      	mov	r7, r0
 800cac4:	d802      	bhi.n	800cacc <_realloc_r+0x34>
 800cac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800caca:	d812      	bhi.n	800caf2 <_realloc_r+0x5a>
 800cacc:	4621      	mov	r1, r4
 800cace:	4640      	mov	r0, r8
 800cad0:	f7ff fb2e 	bl	800c130 <_malloc_r>
 800cad4:	4605      	mov	r5, r0
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d0ed      	beq.n	800cab6 <_realloc_r+0x1e>
 800cada:	42bc      	cmp	r4, r7
 800cadc:	4622      	mov	r2, r4
 800cade:	4631      	mov	r1, r6
 800cae0:	bf28      	it	cs
 800cae2:	463a      	movcs	r2, r7
 800cae4:	f7ff ffca 	bl	800ca7c <memcpy>
 800cae8:	4631      	mov	r1, r6
 800caea:	4640      	mov	r0, r8
 800caec:	f7ff fc6a 	bl	800c3c4 <_free_r>
 800caf0:	e7e1      	b.n	800cab6 <_realloc_r+0x1e>
 800caf2:	4635      	mov	r5, r6
 800caf4:	e7df      	b.n	800cab6 <_realloc_r+0x1e>

0800caf6 <_malloc_usable_size_r>:
 800caf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cafa:	1f18      	subs	r0, r3, #4
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	bfbc      	itt	lt
 800cb00:	580b      	ldrlt	r3, [r1, r0]
 800cb02:	18c0      	addlt	r0, r0, r3
 800cb04:	4770      	bx	lr
	...

0800cb08 <_init>:
 800cb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0a:	bf00      	nop
 800cb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb0e:	bc08      	pop	{r3}
 800cb10:	469e      	mov	lr, r3
 800cb12:	4770      	bx	lr

0800cb14 <_fini>:
 800cb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb16:	bf00      	nop
 800cb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1a:	bc08      	pop	{r3}
 800cb1c:	469e      	mov	lr, r3
 800cb1e:	4770      	bx	lr
