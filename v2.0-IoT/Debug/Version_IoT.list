
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cc1c  0800cc1c  0001cc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf8  0800dbf8  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbf8  0800dbf8  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbf8  0800dbf8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbfc  0800dbfc  0001dbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800dc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000104  0800dd04  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800dd04  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166b8  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ed  00000000  00000000  00036828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0db  00000000  00000000  000584bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eea9  00000000  00000000  00074597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052dc  00000000  00000000  00113440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000104 	.word	0x20000104
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cc04 	.word	0x0800cc04

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000108 	.word	0x20000108
 8000220:	0800cc04 	.word	0x0800cc04

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fb16 	bl	8009880 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f98e 	bl	8008578 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000120 	.word	0x20000120
 80004bc:	20000284 	.word	0x20000284
 80004c0:	200001cd 	.word	0x200001cd
 80004c4:	200001f5 	.word	0x200001f5
 80004c8:	200001f8 	.word	0x200001f8
 80004cc:	200001f9 	.word	0x200001f9
 80004d0:	200001fa 	.word	0x200001fa
 80004d4:	200001fb 	.word	0x200001fb
 80004d8:	200001fc 	.word	0x200001fc
 80004dc:	200001fd 	.word	0x200001fd
 80004e0:	2000020d 	.word	0x2000020d
 80004e4:	200001fe 	.word	0x200001fe
 80004e8:	2000020e 	.word	0x2000020e
 80004ec:	200001ff 	.word	0x200001ff
 80004f0:	2000020f 	.word	0x2000020f
 80004f4:	20000202 	.word	0x20000202
 80004f8:	20000203 	.word	0x20000203
 80004fc:	20000204 	.word	0x20000204
 8000500:	20000205 	.word	0x20000205
 8000504:	20000206 	.word	0x20000206
 8000508:	20000207 	.word	0x20000207
 800050c:	20000208 	.word	0x20000208
 8000510:	20000209 	.word	0x20000209
 8000514:	2000020a 	.word	0x2000020a
 8000518:	2000020b 	.word	0x2000020b
 800051c:	2000020c 	.word	0x2000020c
 8000520:	20000210 	.word	0x20000210
 8000524:	20000212 	.word	0x20000212
 8000528:	200001f0 	.word	0x200001f0
 800052c:	200001f1 	.word	0x200001f1
 8000530:	200001f2 	.word	0x200001f2
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001f3 	.word	0x200001f3
 8000540:	20000215 	.word	0x20000215
 8000544:	20000213 	.word	0x20000213
 8000548:	20000201 	.word	0x20000201
 800054c:	20000214 	.word	0x20000214
 8000550:	20000200 	.word	0x20000200
 8000554:	20000216 	.word	0x20000216
 8000558:	20000217 	.word	0x20000217
 800055c:	20000218 	.word	0x20000218
 8000560:	20000219 	.word	0x20000219
 8000564:	2000021a 	.word	0x2000021a
 8000568:	2000021b 	.word	0x2000021b
 800056c:	2000021c 	.word	0x2000021c
 8000570:	2000021d 	.word	0x2000021d
 8000574:	2000021e 	.word	0x2000021e
 8000578:	2000021f 	.word	0x2000021f
 800057c:	200001cc 	.word	0x200001cc
	}

	if(kapi1AcSure>5) {
 8000580:	4b65      	ldr	r3, [pc, #404]	; (8000718 <eepromKontrol+0x4e4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b63      	ldr	r3, [pc, #396]	; (8000718 <eepromKontrol+0x4e4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b63      	ldr	r3, [pc, #396]	; (800071c <eepromKontrol+0x4e8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b61      	ldr	r3, [pc, #388]	; (800071c <eepromKontrol+0x4e8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b60      	ldr	r3, [pc, #384]	; (8000720 <eepromKontrol+0x4ec>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b5e      	ldr	r3, [pc, #376]	; (8000720 <eepromKontrol+0x4ec>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b5e      	ldr	r3, [pc, #376]	; (8000724 <eepromKontrol+0x4f0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <eepromKontrol+0x4f0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b5b      	ldr	r3, [pc, #364]	; (8000728 <eepromKontrol+0x4f4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <eepromKontrol+0x4f4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b59      	ldr	r3, [pc, #356]	; (800072c <eepromKontrol+0x4f8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b57      	ldr	r3, [pc, #348]	; (800072c <eepromKontrol+0x4f8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b56      	ldr	r3, [pc, #344]	; (8000730 <eepromKontrol+0x4fc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b54      	ldr	r3, [pc, #336]	; (8000730 <eepromKontrol+0x4fc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b54      	ldr	r3, [pc, #336]	; (8000734 <eepromKontrol+0x500>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b52      	ldr	r3, [pc, #328]	; (8000734 <eepromKontrol+0x500>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b51      	ldr	r3, [pc, #324]	; (8000738 <eepromKontrol+0x504>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b4f      	ldr	r3, [pc, #316]	; (8000738 <eepromKontrol+0x504>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b4f      	ldr	r3, [pc, #316]	; (800073c <eepromKontrol+0x508>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b4d      	ldr	r3, [pc, #308]	; (800073c <eepromKontrol+0x508>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <eepromKontrol+0x50c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b4a      	ldr	r3, [pc, #296]	; (8000740 <eepromKontrol+0x50c>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <eepromKontrol+0x510>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b48      	ldr	r3, [pc, #288]	; (8000744 <eepromKontrol+0x510>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <eepromKontrol+0x514>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <eepromKontrol+0x514>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b45      	ldr	r3, [pc, #276]	; (800074c <eepromKontrol+0x518>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b43      	ldr	r3, [pc, #268]	; (800074c <eepromKontrol+0x518>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b42      	ldr	r3, [pc, #264]	; (8000750 <eepromKontrol+0x51c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b40      	ldr	r3, [pc, #256]	; (8000750 <eepromKontrol+0x51c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b40      	ldr	r3, [pc, #256]	; (8000754 <eepromKontrol+0x520>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <eepromKontrol+0x520>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <eepromKontrol+0x524>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <eepromKontrol+0x524>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <eepromKontrol+0x528>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <eepromKontrol+0x528>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b38      	ldr	r3, [pc, #224]	; (8000760 <eepromKontrol+0x52c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <eepromKontrol+0x52c>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <eepromKontrol+0x530>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <eepromKontrol+0x530>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <eepromKontrol+0x534>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b31      	ldr	r3, [pc, #196]	; (8000768 <eepromKontrol+0x534>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <eepromKontrol+0x538>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	; (800076c <eepromKontrol+0x538>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <eepromKontrol+0x53c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <eepromKontrol+0x540>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <eepromKontrol+0x544>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(200);
 80006ca:	20c8      	movs	r0, #200	; 0xc8
 80006cc:	f007 ff54 	bl	8008578 <HAL_Delay>
	memcpy(wifiSSID, (char *)&eepromData[ssidStartPos], wifiCharacterLimit);
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <eepromKontrol+0x548>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <eepromKontrol+0x540>)
 80006d6:	441a      	add	r2, r3
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <eepromKontrol+0x54c>)
 80006da:	6811      	ldr	r1, [r2, #0]
 80006dc:	6855      	ldr	r5, [r2, #4]
 80006de:	6894      	ldr	r4, [r2, #8]
 80006e0:	68d0      	ldr	r0, [r2, #12]
 80006e2:	6019      	str	r1, [r3, #0]
 80006e4:	605d      	str	r5, [r3, #4]
 80006e6:	609c      	str	r4, [r3, #8]
 80006e8:	60d8      	str	r0, [r3, #12]
 80006ea:	6911      	ldr	r1, [r2, #16]
 80006ec:	6119      	str	r1, [r3, #16]
	HAL_Delay(200);
 80006ee:	20c8      	movs	r0, #200	; 0xc8
 80006f0:	f007 ff42 	bl	8008578 <HAL_Delay>
	memcpy(wifiPass, (char *)&eepromData[passStartPos], wifiCharacterLimit);
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <eepromKontrol+0x550>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <eepromKontrol+0x540>)
 80006fa:	441a      	add	r2, r3
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <eepromKontrol+0x554>)
 80006fe:	6811      	ldr	r1, [r2, #0]
 8000700:	6855      	ldr	r5, [r2, #4]
 8000702:	6894      	ldr	r4, [r2, #8]
 8000704:	68d0      	ldr	r0, [r2, #12]
 8000706:	6019      	str	r1, [r3, #0]
 8000708:	605d      	str	r5, [r3, #4]
 800070a:	609c      	str	r4, [r3, #8]
 800070c:	60d8      	str	r0, [r3, #12]
 800070e:	6911      	ldr	r1, [r2, #16]
 8000710:	6119      	str	r1, [r3, #16]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bdb0      	pop	{r4, r5, r7, pc}
 8000718:	2000020d 	.word	0x2000020d
 800071c:	200001fe 	.word	0x200001fe
 8000720:	2000020e 	.word	0x2000020e
 8000724:	200001ff 	.word	0x200001ff
 8000728:	20000201 	.word	0x20000201
 800072c:	2000020f 	.word	0x2000020f
 8000730:	20000202 	.word	0x20000202
 8000734:	20000203 	.word	0x20000203
 8000738:	20000204 	.word	0x20000204
 800073c:	20000205 	.word	0x20000205
 8000740:	20000206 	.word	0x20000206
 8000744:	20000207 	.word	0x20000207
 8000748:	20000208 	.word	0x20000208
 800074c:	20000209 	.word	0x20000209
 8000750:	2000020a 	.word	0x2000020a
 8000754:	2000020b 	.word	0x2000020b
 8000758:	2000020c 	.word	0x2000020c
 800075c:	20000210 	.word	0x20000210
 8000760:	20000212 	.word	0x20000212
 8000764:	20000214 	.word	0x20000214
 8000768:	20000215 	.word	0x20000215
 800076c:	20000213 	.word	0x20000213
 8000770:	20000004 	.word	0x20000004
 8000774:	20000120 	.word	0x20000120
 8000778:	20000198 	.word	0x20000198
 800077c:	20000008 	.word	0x20000008
 8000780:	200001a4 	.word	0x200001a4
 8000784:	2000000c 	.word	0x2000000c
 8000788:	200001b8 	.word	0x200001b8

0800078c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <getCharFromCursorPosition+0x1c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000024 	.word	0x20000024

080007ac <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	4613      	mov	r3, r2
 80007b8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f7ff fd32 	bl	8000224 <strlen>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f00a ffa1 	bl	800b710 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fed1 	bl	8008578 <HAL_Delay>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <sendMachineData>:
    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
    sendATCommand(huart, cmd, 2000);
}

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0c6      	sub	sp, #280	; 0x118
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80007ee:	6018      	str	r0, [r3, #0]
 80007f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007f8:	6019      	str	r1, [r3, #0]
 80007fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000802:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000804:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <sendMachineData+0xb8>)
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <sendMachineData+0xbc>)
 800080c:	21c8      	movs	r1, #200	; 0xc8
 800080e:	f00b fd59 	bl	800c2c4 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 8000812:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800081a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800081e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	f7ff ffc2 	bl	80007ac <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000828:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800082c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000830:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <sendMachineData+0xc0>)
 8000836:	9201      	str	r2, [sp, #4]
 8000838:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800083c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <sendMachineData+0xc4>)
 8000848:	21c8      	movs	r1, #200	; 0xc8
 800084a:	f00b fd3b 	bl	800c2c4 <sniprintf>
 800084e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 8000852:	f107 0010 	add.w	r0, r7, #16
 8000856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <sendMachineData+0xc8>)
 800085c:	2132      	movs	r1, #50	; 0x32
 800085e:	f00b fd31 	bl	800c2c4 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 8000862:	f107 0110 	add.w	r1, r7, #16
 8000866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800086a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800086e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	f7ff ff9a 	bl	80007ac <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000878:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800087c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000884:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f7ff ff8f 	bl	80007ac <sendATCommand>
}
 800088e:	bf00      	nop
 8000890:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	0800cc6c 	.word	0x0800cc6c
 800089c:	0800cc7c 	.word	0x0800cc7c
 80008a0:	0800ccf8 	.word	0x0800ccf8
 80008a4:	0800cc9c 	.word	0x0800cc9c
 80008a8:	0800cd0c 	.word	0x0800cd0c

080008ac <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af04      	add	r7, sp, #16
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <hata2EEPROM+0xa4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <hata2EEPROM+0xa8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a25      	ldr	r2, [pc, #148]	; (8000958 <hata2EEPROM+0xac>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80008ca:	f000 f92b 	bl	8000b24 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80008ce:	e000      	b.n	80008d2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80008d0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e012      	b.n	80008fe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <hata2EEPROM+0xa8>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <hata2EEPROM+0xac>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d107      	bne.n	80008f8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <hata2EEPROM+0xa8>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	4919      	ldr	r1, [pc, #100]	; (8000958 <hata2EEPROM+0xac>)
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	54ca      	strb	r2, [r1, r3]
					break;
 80008f6:	e007      	b.n	8000908 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <hata2EEPROM+0xa4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbe7      	blt.n	80008d8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <hata2EEPROM+0xa8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	b299      	uxth	r1, r3
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <hata2EEPROM+0xa4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b298      	uxth	r0, r3
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <hata2EEPROM+0xa8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <hata2EEPROM+0xac>)
 800091a:	4413      	add	r3, r2
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <hata2EEPROM+0xa4>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	b292      	uxth	r2, r2
 8000922:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000926:	9402      	str	r4, [sp, #8]
 8000928:	9201      	str	r2, [sp, #4]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4603      	mov	r3, r0
 800092e:	460a      	mov	r2, r1
 8000930:	21a0      	movs	r1, #160	; 0xa0
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <hata2EEPROM+0xb0>)
 8000934:	f008 feaa 	bl	800968c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093c:	f007 fe1c 	bl	8008578 <HAL_Delay>
	eepromKontrol(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fc77 	bl	8000234 <eepromKontrol>
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	200000a0 	.word	0x200000a0
 8000954:	200000a4 	.word	0x200000a4
 8000958:	20000120 	.word	0x20000120
 800095c:	20000284 	.word	0x20000284

08000960 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d11d      	bne.n	80009ac <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000970:	4b62      	ldr	r3, [pc, #392]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000978:	4a61      	ldr	r2, [pc, #388]	; (8000b00 <hataKoduLcdGoster+0x1a0>)
 800097a:	2101      	movs	r1, #1
 800097c:	2001      	movs	r0, #1
 800097e:	f007 f8a5 	bl	8007acc <lcd_print>
 8000982:	e008      	b.n	8000996 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d104      	bne.n	8000996 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 800098c:	4a5d      	ldr	r2, [pc, #372]	; (8000b04 <hataKoduLcdGoster+0x1a4>)
 800098e:	2101      	movs	r1, #1
 8000990:	2001      	movs	r0, #1
 8000992:	f007 f89b 	bl	8007acc <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000996:	4a5c      	ldr	r2, [pc, #368]	; (8000b08 <hataKoduLcdGoster+0x1a8>)
 8000998:	2101      	movs	r1, #1
 800099a:	2002      	movs	r0, #2
 800099c:	f007 f896 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "          ");
 80009a0:	4a5a      	ldr	r2, [pc, #360]	; (8000b0c <hataKoduLcdGoster+0x1ac>)
 80009a2:	2107      	movs	r1, #7
 80009a4:	2002      	movs	r0, #2
 80009a6:	f007 f891 	bl	8007acc <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80009aa:	e0a3      	b.n	8000af4 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d11d      	bne.n	80009ee <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80009b2:	4b52      	ldr	r3, [pc, #328]	; (8000afc <hataKoduLcdGoster+0x19c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d105      	bne.n	80009c6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <hataKoduLcdGoster+0x1a0>)
 80009bc:	2101      	movs	r1, #1
 80009be:	2001      	movs	r0, #1
 80009c0:	f007 f884 	bl	8007acc <lcd_print>
 80009c4:	e008      	b.n	80009d8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <hataKoduLcdGoster+0x19c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d104      	bne.n	80009d8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 80009ce:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <hataKoduLcdGoster+0x1a4>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	2001      	movs	r0, #1
 80009d4:	f007 f87a 	bl	8007acc <lcd_print>
		lcd_print(2, 2, "2");
 80009d8:	4a4d      	ldr	r2, [pc, #308]	; (8000b10 <hataKoduLcdGoster+0x1b0>)
 80009da:	2102      	movs	r1, #2
 80009dc:	2002      	movs	r0, #2
 80009de:	f007 f875 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "          ");
 80009e2:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <hataKoduLcdGoster+0x1ac>)
 80009e4:	2107      	movs	r1, #7
 80009e6:	2002      	movs	r0, #2
 80009e8:	f007 f870 	bl	8007acc <lcd_print>
}
 80009ec:	e082      	b.n	8000af4 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d11d      	bne.n	8000a30 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80009f4:	4b41      	ldr	r3, [pc, #260]	; (8000afc <hataKoduLcdGoster+0x19c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 80009fc:	4a40      	ldr	r2, [pc, #256]	; (8000b00 <hataKoduLcdGoster+0x1a0>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	2001      	movs	r0, #1
 8000a02:	f007 f863 	bl	8007acc <lcd_print>
 8000a06:	e008      	b.n	8000a1a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000a08:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d104      	bne.n	8000a1a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000a10:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <hataKoduLcdGoster+0x1a4>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	2001      	movs	r0, #1
 8000a16:	f007 f859 	bl	8007acc <lcd_print>
		lcd_print(2, 3, "3");
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <hataKoduLcdGoster+0x1b4>)
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f007 f854 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "          ");
 8000a24:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <hataKoduLcdGoster+0x1ac>)
 8000a26:	2107      	movs	r1, #7
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f007 f84f 	bl	8007acc <lcd_print>
}
 8000a2e:	e061      	b.n	8000af4 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d11d      	bne.n	8000a72 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d105      	bne.n	8000a4a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000a3e:	4a30      	ldr	r2, [pc, #192]	; (8000b00 <hataKoduLcdGoster+0x1a0>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f007 f842 	bl	8007acc <lcd_print>
 8000a48:	e008      	b.n	8000a5c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d104      	bne.n	8000a5c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000a52:	4a2c      	ldr	r2, [pc, #176]	; (8000b04 <hataKoduLcdGoster+0x1a4>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	2001      	movs	r0, #1
 8000a58:	f007 f838 	bl	8007acc <lcd_print>
		lcd_print(2, 4, "4");
 8000a5c:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <hataKoduLcdGoster+0x1b8>)
 8000a5e:	2104      	movs	r1, #4
 8000a60:	2002      	movs	r0, #2
 8000a62:	f007 f833 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "          ");
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <hataKoduLcdGoster+0x1ac>)
 8000a68:	2107      	movs	r1, #7
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f007 f82e 	bl	8007acc <lcd_print>
}
 8000a70:	e040      	b.n	8000af4 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d11d      	bne.n	8000ab4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d105      	bne.n	8000a8c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <hataKoduLcdGoster+0x1a0>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	2001      	movs	r0, #1
 8000a86:	f007 f821 	bl	8007acc <lcd_print>
 8000a8a:	e008      	b.n	8000a9e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d104      	bne.n	8000a9e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <hataKoduLcdGoster+0x1a4>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f007 f817 	bl	8007acc <lcd_print>
		lcd_print(2, 5, "5");
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <hataKoduLcdGoster+0x1bc>)
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f007 f812 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <hataKoduLcdGoster+0x1ac>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	2002      	movs	r0, #2
 8000aae:	f007 f80d 	bl	8007acc <lcd_print>
}
 8000ab2:	e01f      	b.n	8000af4 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d11c      	bne.n	8000af4 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d105      	bne.n	8000ace <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <hataKoduLcdGoster+0x1a0>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f007 f800 	bl	8007acc <lcd_print>
 8000acc:	e008      	b.n	8000ae0 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <hataKoduLcdGoster+0x19c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d104      	bne.n	8000ae0 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <hataKoduLcdGoster+0x1a4>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2001      	movs	r0, #1
 8000adc:	f006 fff6 	bl	8007acc <lcd_print>
		lcd_print(2, 6, "6");
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <hataKoduLcdGoster+0x1c0>)
 8000ae2:	2106      	movs	r1, #6
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f006 fff1 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "          ");
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <hataKoduLcdGoster+0x1ac>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	2002      	movs	r0, #2
 8000af0:	f006 ffec 	bl	8007acc <lcd_print>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000215 	.word	0x20000215
 8000b00:	0800cd98 	.word	0x0800cd98
 8000b04:	0800cda8 	.word	0x0800cda8
 8000b08:	0800cdb8 	.word	0x0800cdb8
 8000b0c:	0800cdbc 	.word	0x0800cdbc
 8000b10:	0800cdc8 	.word	0x0800cdc8
 8000b14:	0800cdcc 	.word	0x0800cdcc
 8000b18:	0800cdd0 	.word	0x0800cdd0
 8000b1c:	0800cdd4 	.word	0x0800cdd4
 8000b20:	0800cdd8 	.word	0x0800cdd8

08000b24 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e009      	b.n	8000b44 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <eepromDataFillWithEmpty+0x38>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <eepromDataFillWithEmpty+0x3c>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <eepromDataFillWithEmpty+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbf0      	blt.n	8000b30 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000078 	.word	0x20000078
 8000b60:	20000120 	.word	0x20000120
 8000b64:	200000a0 	.word	0x200000a0

08000b68 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b7a:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <i2cTest+0x154>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <i2cTest+0x154>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0201 	bic.w	r2, r2, #1
 8000b88:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000b8a:	484c      	ldr	r0, [pc, #304]	; (8000cbc <i2cTest+0x154>)
 8000b8c:	f008 fc50 	bl	8009430 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b90:	23c0      	movs	r3, #192	; 0xc0
 8000b92:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000b94:	2311      	movs	r3, #17
 8000b96:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4846      	ldr	r0, [pc, #280]	; (8000cc0 <i2cTest+0x158>)
 8000ba6:	f008 f857 	bl	8008c58 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4844      	ldr	r0, [pc, #272]	; (8000cc0 <i2cTest+0x158>)
 8000bb0:	f008 fac9 	bl	8009146 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	4841      	ldr	r0, [pc, #260]	; (8000cc0 <i2cTest+0x158>)
 8000bba:	f008 fac4 	bl	8009146 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f007 fcda 	bl	8008578 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000bc4:	bf00      	nop
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	483d      	ldr	r0, [pc, #244]	; (8000cc0 <i2cTest+0x158>)
 8000bca:	f008 faa5 	bl	8009118 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d006      	beq.n	8000be2 <i2cTest+0x7a>
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	483a      	ldr	r0, [pc, #232]	; (8000cc0 <i2cTest+0x158>)
 8000bd8:	f008 fa9e 	bl	8009118 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d1f1      	bne.n	8000bc6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	4836      	ldr	r0, [pc, #216]	; (8000cc0 <i2cTest+0x158>)
 8000be8:	f008 faad 	bl	8009146 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f007 fcc3 	bl	8008578 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000bf2:	bf00      	nop
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	4832      	ldr	r0, [pc, #200]	; (8000cc0 <i2cTest+0x158>)
 8000bf8:	f008 fa8e 	bl	8009118 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d0f8      	beq.n	8000bf4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	482e      	ldr	r0, [pc, #184]	; (8000cc0 <i2cTest+0x158>)
 8000c08:	f008 fa9d 	bl	8009146 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f007 fcb3 	bl	8008578 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c12:	bf00      	nop
 8000c14:	2140      	movs	r1, #64	; 0x40
 8000c16:	482a      	ldr	r0, [pc, #168]	; (8000cc0 <i2cTest+0x158>)
 8000c18:	f008 fa7e 	bl	8009118 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d0f8      	beq.n	8000c14 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	4826      	ldr	r0, [pc, #152]	; (8000cc0 <i2cTest+0x158>)
 8000c28:	f008 fa8d 	bl	8009146 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f007 fca3 	bl	8008578 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c32:	bf00      	nop
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <i2cTest+0x158>)
 8000c38:	f008 fa6e 	bl	8009118 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d1f8      	bne.n	8000c34 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <i2cTest+0x158>)
 8000c48:	f008 fa7d 	bl	8009146 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f007 fc93 	bl	8008578 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c52:	bf00      	nop
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <i2cTest+0x158>)
 8000c58:	f008 fa5e 	bl	8009118 <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d1f8      	bne.n	8000c54 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c62:	23c0      	movs	r3, #192	; 0xc0
 8000c64:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <i2cTest+0x158>)
 8000c78:	f007 ffee 	bl	8008c58 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <i2cTest+0x154>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <i2cTest+0x154>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c8a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <i2cTest+0x154>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <i2cTest+0x154>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c9a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <i2cTest+0x154>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <i2cTest+0x154>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <i2cTest+0x154>)
 8000cae:	f008 fa7b 	bl	80091a8 <HAL_I2C_Init>
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000284 	.word	0x20000284
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cce:	20c8      	movs	r0, #200	; 0xc8
 8000cd0:	f007 fc52 	bl	8008578 <HAL_Delay>
	lcd_clear();
 8000cd4:	f006 ff26 	bl	8007b24 <lcd_clear>
	if(type == 1 && page == 0) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d143      	bne.n	8000d66 <printTemplate+0xa2>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d140      	bne.n	8000d66 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ce4:	4a9d      	ldr	r2, [pc, #628]	; (8000f5c <printTemplate+0x298>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f006 feef 	bl	8007acc <lcd_print>
		lcd_print(2, 3, "0");
 8000cee:	4a9c      	ldr	r2, [pc, #624]	; (8000f60 <printTemplate+0x29c>)
 8000cf0:	2103      	movs	r1, #3
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f006 feea 	bl	8007acc <lcd_print>
		lcd_print(2, 4, "1");
 8000cf8:	4a9a      	ldr	r2, [pc, #616]	; (8000f64 <printTemplate+0x2a0>)
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f006 fee5 	bl	8007acc <lcd_print>
		lcd_print(2, 5, "2");
 8000d02:	4a99      	ldr	r2, [pc, #612]	; (8000f68 <printTemplate+0x2a4>)
 8000d04:	2105      	movs	r1, #5
 8000d06:	2002      	movs	r0, #2
 8000d08:	f006 fee0 	bl	8007acc <lcd_print>
		lcd_print(2, 6, "3");
 8000d0c:	4a97      	ldr	r2, [pc, #604]	; (8000f6c <printTemplate+0x2a8>)
 8000d0e:	2106      	movs	r1, #6
 8000d10:	2002      	movs	r0, #2
 8000d12:	f006 fedb 	bl	8007acc <lcd_print>
		lcd_print(2, 7, "4");
 8000d16:	4a96      	ldr	r2, [pc, #600]	; (8000f70 <printTemplate+0x2ac>)
 8000d18:	2107      	movs	r1, #7
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f006 fed6 	bl	8007acc <lcd_print>
		lcd_print(2, 10, "5");
 8000d20:	4a94      	ldr	r2, [pc, #592]	; (8000f74 <printTemplate+0x2b0>)
 8000d22:	210a      	movs	r1, #10
 8000d24:	2002      	movs	r0, #2
 8000d26:	f006 fed1 	bl	8007acc <lcd_print>
		lcd_print(2, 11, "6");
 8000d2a:	4a93      	ldr	r2, [pc, #588]	; (8000f78 <printTemplate+0x2b4>)
 8000d2c:	210b      	movs	r1, #11
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f006 fecc 	bl	8007acc <lcd_print>
		lcd_print(2, 12, "7");
 8000d34:	4a91      	ldr	r2, [pc, #580]	; (8000f7c <printTemplate+0x2b8>)
 8000d36:	210c      	movs	r1, #12
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f006 fec7 	bl	8007acc <lcd_print>
		lcd_print(2, 13, "8");
 8000d3e:	4a90      	ldr	r2, [pc, #576]	; (8000f80 <printTemplate+0x2bc>)
 8000d40:	210d      	movs	r1, #13
 8000d42:	2002      	movs	r0, #2
 8000d44:	f006 fec2 	bl	8007acc <lcd_print>
		lcd_print(2, 14, "9");
 8000d48:	4a8e      	ldr	r2, [pc, #568]	; (8000f84 <printTemplate+0x2c0>)
 8000d4a:	210e      	movs	r1, #14
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f006 febd 	bl	8007acc <lcd_print>
		lcd_print(1, 5, machineID);
 8000d52:	4a8d      	ldr	r2, [pc, #564]	; (8000f88 <printTemplate+0x2c4>)
 8000d54:	2105      	movs	r1, #5
 8000d56:	2001      	movs	r0, #1
 8000d58:	f006 feb8 	bl	8007acc <lcd_print>
		lcd_gotoxy(2, 3);
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f006 fe95 	bl	8007a8e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000d64:	e0f5      	b.n	8000f52 <printTemplate+0x28e>
	} else if(type == 2) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d178      	bne.n	8000e5e <printTemplate+0x19a>
		if(page == 1) {
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d114      	bne.n	8000d9c <printTemplate+0xd8>
			lcd_clear();
 8000d72:	f006 fed7 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f007 fbfe 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d7c:	4a83      	ldr	r2, [pc, #524]	; (8000f8c <printTemplate+0x2c8>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2001      	movs	r0, #1
 8000d82:	f006 fea3 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d86:	4a82      	ldr	r2, [pc, #520]	; (8000f90 <printTemplate+0x2cc>)
 8000d88:	2107      	movs	r1, #7
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f006 fe9e 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000d90:	4a80      	ldr	r2, [pc, #512]	; (8000f94 <printTemplate+0x2d0>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	2002      	movs	r0, #2
 8000d96:	f006 fe99 	bl	8007acc <lcd_print>
}
 8000d9a:	e0da      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 2) {
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d114      	bne.n	8000dcc <printTemplate+0x108>
			lcd_clear();
 8000da2:	f006 febf 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000da6:	2064      	movs	r0, #100	; 0x64
 8000da8:	f007 fbe6 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dac:	4a77      	ldr	r2, [pc, #476]	; (8000f8c <printTemplate+0x2c8>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	2001      	movs	r0, #1
 8000db2:	f006 fe8b 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000db6:	4a76      	ldr	r2, [pc, #472]	; (8000f90 <printTemplate+0x2cc>)
 8000db8:	2107      	movs	r1, #7
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f006 fe86 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dc0:	4a75      	ldr	r2, [pc, #468]	; (8000f98 <printTemplate+0x2d4>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f006 fe81 	bl	8007acc <lcd_print>
}
 8000dca:	e0c2      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 3) {
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d114      	bne.n	8000dfc <printTemplate+0x138>
			lcd_clear();
 8000dd2:	f006 fea7 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	; 0x64
 8000dd8:	f007 fbce 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ddc:	4a6b      	ldr	r2, [pc, #428]	; (8000f8c <printTemplate+0x2c8>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	2001      	movs	r0, #1
 8000de2:	f006 fe73 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000de6:	4a6a      	ldr	r2, [pc, #424]	; (8000f90 <printTemplate+0x2cc>)
 8000de8:	2107      	movs	r1, #7
 8000dea:	2001      	movs	r0, #1
 8000dec:	f006 fe6e 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000df0:	4a6a      	ldr	r2, [pc, #424]	; (8000f9c <printTemplate+0x2d8>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	2002      	movs	r0, #2
 8000df6:	f006 fe69 	bl	8007acc <lcd_print>
}
 8000dfa:	e0aa      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 4) {
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d114      	bne.n	8000e2c <printTemplate+0x168>
			lcd_clear();
 8000e02:	f006 fe8f 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000e06:	2064      	movs	r0, #100	; 0x64
 8000e08:	f007 fbb6 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e0c:	4a5f      	ldr	r2, [pc, #380]	; (8000f8c <printTemplate+0x2c8>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2001      	movs	r0, #1
 8000e12:	f006 fe5b 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e16:	4a5e      	ldr	r2, [pc, #376]	; (8000f90 <printTemplate+0x2cc>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f006 fe56 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000e20:	4a5f      	ldr	r2, [pc, #380]	; (8000fa0 <printTemplate+0x2dc>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	2002      	movs	r0, #2
 8000e26:	f006 fe51 	bl	8007acc <lcd_print>
}
 8000e2a:	e092      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 5) {
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	f040 808f 	bne.w	8000f52 <printTemplate+0x28e>
			lcd_clear();
 8000e34:	f006 fe76 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000e38:	2064      	movs	r0, #100	; 0x64
 8000e3a:	f007 fb9d 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e3e:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <printTemplate+0x2c8>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f006 fe42 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e48:	4a51      	ldr	r2, [pc, #324]	; (8000f90 <printTemplate+0x2cc>)
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f006 fe3d 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000e52:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <printTemplate+0x2e0>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	2002      	movs	r0, #2
 8000e58:	f006 fe38 	bl	8007acc <lcd_print>
}
 8000e5c:	e079      	b.n	8000f52 <printTemplate+0x28e>
	} else if(type == 3) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d176      	bne.n	8000f52 <printTemplate+0x28e>
		if(page == 1) {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d114      	bne.n	8000e94 <printTemplate+0x1d0>
			lcd_clear();
 8000e6a:	f006 fe5b 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f007 fb82 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <printTemplate+0x2e4>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f006 fe27 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e7e:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <printTemplate+0x2e8>)
 8000e80:	2107      	movs	r1, #7
 8000e82:	2001      	movs	r0, #1
 8000e84:	f006 fe22 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e88:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <printTemplate+0x2d0>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f006 fe1d 	bl	8007acc <lcd_print>
}
 8000e92:	e05e      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 2) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d114      	bne.n	8000ec4 <printTemplate+0x200>
			lcd_clear();
 8000e9a:	f006 fe43 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f007 fb6a 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ea4:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <printTemplate+0x2e4>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f006 fe0f 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000eae:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <printTemplate+0x2e8>)
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f006 fe0a 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000eb8:	4a37      	ldr	r2, [pc, #220]	; (8000f98 <printTemplate+0x2d4>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f006 fe05 	bl	8007acc <lcd_print>
}
 8000ec2:	e046      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 3) {
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d114      	bne.n	8000ef4 <printTemplate+0x230>
			lcd_clear();
 8000eca:	f006 fe2b 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f007 fb52 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ed4:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <printTemplate+0x2e4>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f006 fdf7 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <printTemplate+0x2e8>)
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f006 fdf2 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ee8:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <printTemplate+0x2d8>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2002      	movs	r0, #2
 8000eee:	f006 fded 	bl	8007acc <lcd_print>
}
 8000ef2:	e02e      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 4) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d114      	bne.n	8000f24 <printTemplate+0x260>
			lcd_clear();
 8000efa:	f006 fe13 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f007 fb3a 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <printTemplate+0x2e4>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 fddf 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f0e:	4a27      	ldr	r2, [pc, #156]	; (8000fac <printTemplate+0x2e8>)
 8000f10:	2107      	movs	r1, #7
 8000f12:	2001      	movs	r0, #1
 8000f14:	f006 fdda 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f18:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <printTemplate+0x2dc>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f006 fdd5 	bl	8007acc <lcd_print>
}
 8000f22:	e016      	b.n	8000f52 <printTemplate+0x28e>
		} else if(page == 5) {
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d113      	bne.n	8000f52 <printTemplate+0x28e>
			lcd_clear();
 8000f2a:	f006 fdfb 	bl	8007b24 <lcd_clear>
			HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f007 fb22 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <printTemplate+0x2e4>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f006 fdc7 	bl	8007acc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <printTemplate+0x2e8>)
 8000f40:	2107      	movs	r1, #7
 8000f42:	2001      	movs	r0, #1
 8000f44:	f006 fdc2 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <printTemplate+0x2e0>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f006 fdbd 	bl	8007acc <lcd_print>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0800cddc 	.word	0x0800cddc
 8000f60:	0800cde4 	.word	0x0800cde4
 8000f64:	0800cde8 	.word	0x0800cde8
 8000f68:	0800cdec 	.word	0x0800cdec
 8000f6c:	0800cdf0 	.word	0x0800cdf0
 8000f70:	0800cdf4 	.word	0x0800cdf4
 8000f74:	0800cdf8 	.word	0x0800cdf8
 8000f78:	0800cdfc 	.word	0x0800cdfc
 8000f7c:	0800ce00 	.word	0x0800ce00
 8000f80:	0800ce04 	.word	0x0800ce04
 8000f84:	0800ce08 	.word	0x0800ce08
 8000f88:	20000198 	.word	0x20000198
 8000f8c:	0800ce0c 	.word	0x0800ce0c
 8000f90:	200001a4 	.word	0x200001a4
 8000f94:	0800ce14 	.word	0x0800ce14
 8000f98:	0800ce28 	.word	0x0800ce28
 8000f9c:	0800ce3c 	.word	0x0800ce3c
 8000fa0:	0800ce50 	.word	0x0800ce50
 8000fa4:	0800ce64 	.word	0x0800ce64
 8000fa8:	0800ce78 	.word	0x0800ce78
 8000fac:	200001b8 	.word	0x200001b8

08000fb0 <checkSlideVal>:

int checkSlideVal(int state) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d111      	bne.n	8000fe2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <checkSlideVal+0x60>)
 8000fc2:	f008 f8a9 	bl	8009118 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <checkSlideVal+0x20>
			return 34;
 8000fcc:	2322      	movs	r3, #34	; 0x22
 8000fce:	e01b      	b.n	8001008 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <checkSlideVal+0x64>)
 8000fd4:	f008 f8a0 	bl	8009118 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d113      	bne.n	8001006 <checkSlideVal+0x56>
			return 32;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e012      	b.n	8001008 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <checkSlideVal+0x60>)
 8000fe6:	f008 f897 	bl	8009118 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <checkSlideVal+0x44>
			return 35;
 8000ff0:	2323      	movs	r3, #35	; 0x23
 8000ff2:	e009      	b.n	8001008 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <checkSlideVal+0x64>)
 8000ff8:	f008 f88e 	bl	8009118 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <checkSlideVal+0x56>
			return 33;
 8001002:	2321      	movs	r3, #33	; 0x21
 8001004:	e000      	b.n	8001008 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010800 	.word	0x40010800
 8001014:	40011000 	.word	0x40011000

08001018 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff f8fc 	bl	8000224 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001034:	e08a      	b.n	800114c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f7ff ffba 	bl	8000fb0 <checkSlideVal>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	dd07      	ble.n	8001052 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f7ff ffb4 	bl	8000fb0 <checkSlideVal>
 8001048:	4603      	mov	r3, r0
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b44      	ldr	r3, [pc, #272]	; (8001160 <slideText+0x148>)
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e081      	b.n	8001156 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	e075      	b.n	8001144 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f7ff ffa9 	bl	8000fb0 <checkSlideVal>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	dd09      	ble.n	8001078 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f7ff ffa3 	bl	8000fb0 <checkSlideVal>
 800106a:	4603      	mov	r3, r0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <slideText+0x148>)
 8001070:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001076:	e069      	b.n	800114c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	4413      	add	r3, r2
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	e029      	b.n	80010d6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff ff94 	bl	8000fb0 <checkSlideVal>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	dd0b      	ble.n	80010a6 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff ff8e 	bl	8000fb0 <checkSlideVal>
 8001094:	4603      	mov	r3, r0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <slideText+0x148>)
 800109a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80010a4:	e01d      	b.n	80010e2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2d8      	uxtb	r0, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	f006 fd16 	bl	8007af6 <lcd_print_char>
				HAL_Delay(30);
 80010ca:	201e      	movs	r0, #30
 80010cc:	f007 fa54 	bl	8008578 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	3301      	adds	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbcf      	blt.n	8001082 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	e023      	b.n	8001132 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f7ff ff60 	bl	8000fb0 <checkSlideVal>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd0b      	ble.n	800110e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f7ff ff5a 	bl	8000fb0 <checkSlideVal>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <slideText+0x148>)
 8001102:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800110c:	e017      	b.n	800113e <slideText+0x126>
				}
			     if(j >= startPos) {
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	db0a      	blt.n	800112c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	b2d1      	uxtb	r1, r2
 800111e:	2220      	movs	r2, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fce8 	bl	8007af6 <lcd_print_char>
			    	 HAL_Delay(30);
 8001126:	201e      	movs	r0, #30
 8001128:	f007 fa26 	bl	8008578 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	3b01      	subs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	7dfa      	ldrb	r2, [r7, #23]
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	429a      	cmp	r2, r3
 800113c:	dad5      	bge.n	80010ea <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	3301      	adds	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	429a      	cmp	r2, r3
 800114a:	db85      	blt.n	8001058 <slideText+0x40>
	while(mainLoopVal == 1) {
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	2b01      	cmp	r3, #1
 8001150:	f43f af71 	beq.w	8001036 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001f4 	.word	0x200001f4

08001164 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001168:	f3bf 8f4f 	dsb	sy
}
 800116c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <__NVIC_SystemReset+0x24>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001176:	4904      	ldr	r1, [pc, #16]	; (8001188 <__NVIC_SystemReset+0x24>)
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_SystemReset+0x28>)
 800117a:	4313      	orrs	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800117e:	f3bf 8f4f 	dsb	sy
}
 8001182:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <__NVIC_SystemReset+0x20>
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	05fa0004 	.word	0x05fa0004

08001190 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001196:	2101      	movs	r1, #1
 8001198:	488e      	ldr	r0, [pc, #568]	; (80013d4 <menu+0x244>)
 800119a:	f007 ffbd 	bl	8009118 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	f040 808e 	bne.w	80012c2 <menu+0x132>
 80011a6:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <menu+0x248>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f083 0301 	eor.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8086 	beq.w	80012c2 <menu+0x132>
		menuSayac = menuSayac+1;
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <menu+0x24c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b87      	ldr	r3, [pc, #540]	; (80013dc <menu+0x24c>)
 80011c0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80011c2:	4b86      	ldr	r3, [pc, #536]	; (80013dc <menu+0x24c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b24      	cmp	r3, #36	; 0x24
 80011c8:	d102      	bne.n	80011d0 <menu+0x40>
			menuSayac = 1;
 80011ca:	4b84      	ldr	r3, [pc, #528]	; (80013dc <menu+0x24c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80011d0:	4b82      	ldr	r3, [pc, #520]	; (80013dc <menu+0x24c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b12      	cmp	r3, #18
 80011d6:	d106      	bne.n	80011e6 <menu+0x56>
 80011d8:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <menu+0x250>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <menu+0x56>
			menuSayac = 21;
 80011e0:	4b7e      	ldr	r3, [pc, #504]	; (80013dc <menu+0x24c>)
 80011e2:	2215      	movs	r2, #21
 80011e4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011e6:	4b7d      	ldr	r3, [pc, #500]	; (80013dc <menu+0x24c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d106      	bne.n	80011fc <menu+0x6c>
 80011ee:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <menu+0x254>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <menu+0x6c>
			menuSayac = 16;
 80011f6:	4b79      	ldr	r3, [pc, #484]	; (80013dc <menu+0x24c>)
 80011f8:	2210      	movs	r2, #16
 80011fa:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80011fc:	4b77      	ldr	r3, [pc, #476]	; (80013dc <menu+0x24c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b0d      	cmp	r3, #13
 8001202:	d106      	bne.n	8001212 <menu+0x82>
 8001204:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <menu+0x254>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d102      	bne.n	8001212 <menu+0x82>
			menuSayac = 16;
 800120c:	4b73      	ldr	r3, [pc, #460]	; (80013dc <menu+0x24c>)
 800120e:	2210      	movs	r2, #16
 8001210:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <menu+0x24c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d106      	bne.n	8001228 <menu+0x98>
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <menu+0x254>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d102      	bne.n	8001228 <menu+0x98>
			menuSayac = 13;
 8001222:	4b6e      	ldr	r3, [pc, #440]	; (80013dc <menu+0x24c>)
 8001224:	220d      	movs	r2, #13
 8001226:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001228:	4b6c      	ldr	r3, [pc, #432]	; (80013dc <menu+0x24c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b0a      	cmp	r3, #10
 800122e:	d10a      	bne.n	8001246 <menu+0xb6>
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <menu+0x258>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d003      	beq.n	8001240 <menu+0xb0>
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <menu+0x258>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d102      	bne.n	8001246 <menu+0xb6>
			menuSayac = 11;
 8001240:	4b66      	ldr	r3, [pc, #408]	; (80013dc <menu+0x24c>)
 8001242:	220b      	movs	r2, #11
 8001244:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <menu+0x24c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d10e      	bne.n	800126c <menu+0xdc>
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <menu+0x25c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d003      	beq.n	800125e <menu+0xce>
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <menu+0x25c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d106      	bne.n	800126c <menu+0xdc>
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <menu+0x254>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <menu+0xdc>
			menuSayac = 16;
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <menu+0x24c>)
 8001268:	2210      	movs	r2, #16
 800126a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800126c:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <menu+0x24c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d10e      	bne.n	8001292 <menu+0x102>
 8001274:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <menu+0x25c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <menu+0xf4>
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <menu+0x25c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d106      	bne.n	8001292 <menu+0x102>
 8001284:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <menu+0x254>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d102      	bne.n	8001292 <menu+0x102>
			menuSayac = 13;
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <menu+0x24c>)
 800128e:	220d      	movs	r2, #13
 8001290:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001292:	4b52      	ldr	r3, [pc, #328]	; (80013dc <menu+0x24c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d106      	bne.n	80012a8 <menu+0x118>
 800129a:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <menu+0x260>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <menu+0x118>
			menuSayac = 16;
 80012a2:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <menu+0x24c>)
 80012a4:	2210      	movs	r2, #16
 80012a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80012a8:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <menu+0x24c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b18      	cmp	r3, #24
 80012ae:	d106      	bne.n	80012be <menu+0x12e>
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <menu+0x250>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <menu+0x12e>
			menuSayac = 26;
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <menu+0x24c>)
 80012ba:	221a      	movs	r2, #26
 80012bc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012be:	f003 fb33 	bl	8004928 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012c2:	2108      	movs	r1, #8
 80012c4:	484b      	ldr	r0, [pc, #300]	; (80013f4 <menu+0x264>)
 80012c6:	f007 ff27 	bl	8009118 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d175      	bne.n	80013bc <menu+0x22c>
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <menu+0x248>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06e      	beq.n	80013bc <menu+0x22c>
		if (menuSayac <= 1) {
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <menu+0x24c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d802      	bhi.n	80012ec <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <menu+0x24c>)
 80012e8:	2224      	movs	r2, #36	; 0x24
 80012ea:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <menu+0x24c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <menu+0x24c>)
 80012f6:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <menu+0x24c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b14      	cmp	r3, #20
 80012fe:	d106      	bne.n	800130e <menu+0x17e>
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <menu+0x250>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <menu+0x17e>
			menuSayac = 17;
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <menu+0x24c>)
 800130a:	2211      	movs	r2, #17
 800130c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <menu+0x24c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	d106      	bne.n	8001324 <menu+0x194>
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <menu+0x254>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <menu+0x194>
			menuSayac = 7;
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <menu+0x24c>)
 8001320:	2207      	movs	r2, #7
 8001322:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <menu+0x24c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d106      	bne.n	800133a <menu+0x1aa>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <menu+0x254>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d102      	bne.n	800133a <menu+0x1aa>
			menuSayac = 12;
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <menu+0x24c>)
 8001336:	220c      	movs	r2, #12
 8001338:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <menu+0x24c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d106      	bne.n	8001350 <menu+0x1c0>
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <menu+0x254>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d102      	bne.n	8001350 <menu+0x1c0>
			menuSayac = 8;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <menu+0x24c>)
 800134c:	2208      	movs	r2, #8
 800134e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <menu+0x24c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b0a      	cmp	r3, #10
 8001356:	d10a      	bne.n	800136e <menu+0x1de>
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <menu+0x258>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d003      	beq.n	8001368 <menu+0x1d8>
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <menu+0x258>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d102      	bne.n	800136e <menu+0x1de>
			menuSayac = 9;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <menu+0x24c>)
 800136a:	2209      	movs	r2, #9
 800136c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <menu+0x24c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b0c      	cmp	r3, #12
 8001374:	d10a      	bne.n	800138c <menu+0x1fc>
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <menu+0x25c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d003      	beq.n	8001386 <menu+0x1f6>
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <menu+0x25c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d102      	bne.n	800138c <menu+0x1fc>
			menuSayac = 11;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <menu+0x24c>)
 8001388:	220b      	movs	r2, #11
 800138a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <menu+0x24c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d106      	bne.n	80013a2 <menu+0x212>
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <menu+0x260>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <menu+0x212>
			menuSayac = 14;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <menu+0x24c>)
 800139e:	220e      	movs	r2, #14
 80013a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <menu+0x24c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b19      	cmp	r3, #25
 80013a8:	d106      	bne.n	80013b8 <menu+0x228>
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <menu+0x250>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <menu+0x228>
			menuSayac = 23;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <menu+0x24c>)
 80013b4:	2217      	movs	r2, #23
 80013b6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013b8:	f003 fab6 	bl	8004928 <bekle>
	}

	if (menuSayac == 0) {
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <menu+0x24c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d133      	bne.n	800142c <menu+0x29c>
		if(dilSecim == 0) {
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <menu+0x268>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d121      	bne.n	8001410 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <menu+0x26c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	2001      	movs	r0, #1
 80013d2:	e015      	b.n	8001400 <menu+0x270>
 80013d4:	40010800 	.word	0x40010800
 80013d8:	20000223 	.word	0x20000223
 80013dc:	200001f4 	.word	0x200001f4
 80013e0:	20000203 	.word	0x20000203
 80013e4:	200001fc 	.word	0x200001fc
 80013e8:	200001fd 	.word	0x200001fd
 80013ec:	200001fe 	.word	0x200001fe
 80013f0:	200001ff 	.word	0x200001ff
 80013f4:	40011000 	.word	0x40011000
 80013f8:	20000215 	.word	0x20000215
 80013fc:	0800ce80 	.word	0x0800ce80
 8001400:	f006 fb64 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001404:	4a94      	ldr	r2, [pc, #592]	; (8001658 <menu+0x4c8>)
 8001406:	2101      	movs	r1, #1
 8001408:	2002      	movs	r0, #2
 800140a:	f006 fb5f 	bl	8007acc <lcd_print>
 800140e:	e00d      	b.n	800142c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001410:	4b92      	ldr	r3, [pc, #584]	; (800165c <menu+0x4cc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d109      	bne.n	800142c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001418:	4a91      	ldr	r2, [pc, #580]	; (8001660 <menu+0x4d0>)
 800141a:	2101      	movs	r1, #1
 800141c:	2001      	movs	r0, #1
 800141e:	f006 fb55 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001422:	4a90      	ldr	r2, [pc, #576]	; (8001664 <menu+0x4d4>)
 8001424:	2101      	movs	r1, #1
 8001426:	2002      	movs	r0, #2
 8001428:	f006 fb50 	bl	8007acc <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800142c:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <menu+0x4d8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 82b5 	bne.w	80019a0 <menu+0x810>
		if(dilSecim == 0) {
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <menu+0x4cc>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800143e:	4a8b      	ldr	r2, [pc, #556]	; (800166c <menu+0x4dc>)
 8001440:	2101      	movs	r1, #1
 8001442:	2001      	movs	r0, #1
 8001444:	f006 fb42 	bl	8007acc <lcd_print>
 8001448:	e008      	b.n	800145c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800144a:	4b84      	ldr	r3, [pc, #528]	; (800165c <menu+0x4cc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d104      	bne.n	800145c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001452:	4a87      	ldr	r2, [pc, #540]	; (8001670 <menu+0x4e0>)
 8001454:	2101      	movs	r1, #1
 8001456:	2001      	movs	r0, #1
 8001458:	f006 fb38 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800145c:	4b85      	ldr	r3, [pc, #532]	; (8001674 <menu+0x4e4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d123      	bne.n	80014ac <menu+0x31c>
			if(dilSecim == 0) {
 8001464:	4b7d      	ldr	r3, [pc, #500]	; (800165c <menu+0x4cc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800146c:	4a82      	ldr	r2, [pc, #520]	; (8001678 <menu+0x4e8>)
 800146e:	2101      	movs	r1, #1
 8001470:	2002      	movs	r0, #2
 8001472:	f006 fb2b 	bl	8007acc <lcd_print>
 8001476:	e008      	b.n	800148a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001478:	4b78      	ldr	r3, [pc, #480]	; (800165c <menu+0x4cc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d104      	bne.n	800148a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001480:	4a7e      	ldr	r2, [pc, #504]	; (800167c <menu+0x4ec>)
 8001482:	2101      	movs	r1, #1
 8001484:	2002      	movs	r0, #2
 8001486:	f006 fb21 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800148a:	4a7d      	ldr	r2, [pc, #500]	; (8001680 <menu+0x4f0>)
 800148c:	210f      	movs	r1, #15
 800148e:	2002      	movs	r0, #2
 8001490:	f006 fb1c 	bl	8007acc <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001494:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <menu+0x4f4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	220a      	movs	r2, #10
 800149a:	497b      	ldr	r1, [pc, #492]	; (8001688 <menu+0x4f8>)
 800149c:	4618      	mov	r0, r3
 800149e:	f00a fe67 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 80014a2:	4a79      	ldr	r2, [pc, #484]	; (8001688 <menu+0x4f8>)
 80014a4:	210e      	movs	r1, #14
 80014a6:	2002      	movs	r0, #2
 80014a8:	f006 fb10 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80014ac:	4b71      	ldr	r3, [pc, #452]	; (8001674 <menu+0x4e4>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d123      	bne.n	80014fc <menu+0x36c>
			if(dilSecim == 0) {
 80014b4:	4b69      	ldr	r3, [pc, #420]	; (800165c <menu+0x4cc>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80014bc:	4a73      	ldr	r2, [pc, #460]	; (800168c <menu+0x4fc>)
 80014be:	2101      	movs	r1, #1
 80014c0:	2002      	movs	r0, #2
 80014c2:	f006 fb03 	bl	8007acc <lcd_print>
 80014c6:	e008      	b.n	80014da <menu+0x34a>
			} else if(dilSecim == 1) {
 80014c8:	4b64      	ldr	r3, [pc, #400]	; (800165c <menu+0x4cc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d104      	bne.n	80014da <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80014d0:	4a6f      	ldr	r2, [pc, #444]	; (8001690 <menu+0x500>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	2002      	movs	r0, #2
 80014d6:	f006 faf9 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014da:	4a6e      	ldr	r2, [pc, #440]	; (8001694 <menu+0x504>)
 80014dc:	210f      	movs	r1, #15
 80014de:	2002      	movs	r0, #2
 80014e0:	f006 faf4 	bl	8007acc <lcd_print>
			itoa(hataKayit2, snum, 10);
 80014e4:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <menu+0x508>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	220a      	movs	r2, #10
 80014ea:	4967      	ldr	r1, [pc, #412]	; (8001688 <menu+0x4f8>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00a fe3f 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 80014f2:	4a65      	ldr	r2, [pc, #404]	; (8001688 <menu+0x4f8>)
 80014f4:	210e      	movs	r1, #14
 80014f6:	2002      	movs	r0, #2
 80014f8:	f006 fae8 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80014fc:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <menu+0x4e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <menu+0x3bc>
			if(dilSecim == 0) {
 8001504:	4b55      	ldr	r3, [pc, #340]	; (800165c <menu+0x4cc>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <menu+0x50c>)
 800150e:	2101      	movs	r1, #1
 8001510:	2002      	movs	r0, #2
 8001512:	f006 fadb 	bl	8007acc <lcd_print>
 8001516:	e008      	b.n	800152a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <menu+0x4cc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d104      	bne.n	800152a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001520:	4a5f      	ldr	r2, [pc, #380]	; (80016a0 <menu+0x510>)
 8001522:	2101      	movs	r1, #1
 8001524:	2002      	movs	r0, #2
 8001526:	f006 fad1 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800152a:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <menu+0x504>)
 800152c:	210f      	movs	r1, #15
 800152e:	2002      	movs	r0, #2
 8001530:	f006 facc 	bl	8007acc <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <menu+0x514>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	220a      	movs	r2, #10
 800153a:	4953      	ldr	r1, [pc, #332]	; (8001688 <menu+0x4f8>)
 800153c:	4618      	mov	r0, r3
 800153e:	f00a fe17 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 8001542:	4a51      	ldr	r2, [pc, #324]	; (8001688 <menu+0x4f8>)
 8001544:	210e      	movs	r1, #14
 8001546:	2002      	movs	r0, #2
 8001548:	f006 fac0 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800154c:	4b49      	ldr	r3, [pc, #292]	; (8001674 <menu+0x4e4>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d123      	bne.n	800159c <menu+0x40c>
			if(dilSecim == 0) {
 8001554:	4b41      	ldr	r3, [pc, #260]	; (800165c <menu+0x4cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <menu+0x518>)
 800155e:	2101      	movs	r1, #1
 8001560:	2002      	movs	r0, #2
 8001562:	f006 fab3 	bl	8007acc <lcd_print>
 8001566:	e008      	b.n	800157a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <menu+0x4cc>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d104      	bne.n	800157a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <menu+0x51c>)
 8001572:	2101      	movs	r1, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f006 faa9 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800157a:	4a46      	ldr	r2, [pc, #280]	; (8001694 <menu+0x504>)
 800157c:	210f      	movs	r1, #15
 800157e:	2002      	movs	r0, #2
 8001580:	f006 faa4 	bl	8007acc <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <menu+0x520>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	220a      	movs	r2, #10
 800158a:	493f      	ldr	r1, [pc, #252]	; (8001688 <menu+0x4f8>)
 800158c:	4618      	mov	r0, r3
 800158e:	f00a fdef 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 8001592:	4a3d      	ldr	r2, [pc, #244]	; (8001688 <menu+0x4f8>)
 8001594:	210e      	movs	r1, #14
 8001596:	2002      	movs	r0, #2
 8001598:	f006 fa98 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800159c:	4b35      	ldr	r3, [pc, #212]	; (8001674 <menu+0x4e4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d123      	bne.n	80015ec <menu+0x45c>
			if(dilSecim == 0) {
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <menu+0x4cc>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80015ac:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <menu+0x524>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	2002      	movs	r0, #2
 80015b2:	f006 fa8b 	bl	8007acc <lcd_print>
 80015b6:	e008      	b.n	80015ca <menu+0x43a>
			} else if(dilSecim == 1) {
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <menu+0x4cc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d104      	bne.n	80015ca <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80015c0:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <menu+0x528>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	2002      	movs	r0, #2
 80015c6:	f006 fa81 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <menu+0x504>)
 80015cc:	210f      	movs	r1, #15
 80015ce:	2002      	movs	r0, #2
 80015d0:	f006 fa7c 	bl	8007acc <lcd_print>
			itoa(hataKayit5, snum, 10);
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <menu+0x52c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	220a      	movs	r2, #10
 80015da:	492b      	ldr	r1, [pc, #172]	; (8001688 <menu+0x4f8>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f00a fdc7 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <menu+0x4f8>)
 80015e4:	210e      	movs	r1, #14
 80015e6:	2002      	movs	r0, #2
 80015e8:	f006 fa70 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <menu+0x4e4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d123      	bne.n	800163c <menu+0x4ac>
			if(dilSecim == 0) {
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <menu+0x4cc>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80015fc:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <menu+0x530>)
 80015fe:	2101      	movs	r1, #1
 8001600:	2002      	movs	r0, #2
 8001602:	f006 fa63 	bl	8007acc <lcd_print>
 8001606:	e008      	b.n	800161a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <menu+0x4cc>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d104      	bne.n	800161a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001610:	4a2c      	ldr	r2, [pc, #176]	; (80016c4 <menu+0x534>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f006 fa59 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <menu+0x504>)
 800161c:	210f      	movs	r1, #15
 800161e:	2002      	movs	r0, #2
 8001620:	f006 fa54 	bl	8007acc <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <menu+0x538>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	220a      	movs	r2, #10
 800162a:	4917      	ldr	r1, [pc, #92]	; (8001688 <menu+0x4f8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00a fd9f 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <menu+0x4f8>)
 8001634:	210e      	movs	r1, #14
 8001636:	2002      	movs	r0, #2
 8001638:	f006 fa48 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <menu+0x4e4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b06      	cmp	r3, #6
 8001642:	d15f      	bne.n	8001704 <menu+0x574>
			if(dilSecim == 0) {
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <menu+0x4cc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d141      	bne.n	80016d0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800164c:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <menu+0x53c>)
 800164e:	2101      	movs	r1, #1
 8001650:	2002      	movs	r0, #2
 8001652:	f006 fa3b 	bl	8007acc <lcd_print>
 8001656:	e044      	b.n	80016e2 <menu+0x552>
 8001658:	0800ce94 	.word	0x0800ce94
 800165c:	20000215 	.word	0x20000215
 8001660:	0800cea8 	.word	0x0800cea8
 8001664:	0800cebc 	.word	0x0800cebc
 8001668:	200001f4 	.word	0x200001f4
 800166c:	0800ced0 	.word	0x0800ced0
 8001670:	0800cee4 	.word	0x0800cee4
 8001674:	200001f6 	.word	0x200001f6
 8001678:	0800cef8 	.word	0x0800cef8
 800167c:	0800cf08 	.word	0x0800cf08
 8001680:	0800cf18 	.word	0x0800cf18
 8001684:	20000216 	.word	0x20000216
 8001688:	20000190 	.word	0x20000190
 800168c:	0800cf1c 	.word	0x0800cf1c
 8001690:	0800cf2c 	.word	0x0800cf2c
 8001694:	0800cf3c 	.word	0x0800cf3c
 8001698:	20000217 	.word	0x20000217
 800169c:	0800cf40 	.word	0x0800cf40
 80016a0:	0800cf50 	.word	0x0800cf50
 80016a4:	20000218 	.word	0x20000218
 80016a8:	0800cf60 	.word	0x0800cf60
 80016ac:	0800cf70 	.word	0x0800cf70
 80016b0:	20000219 	.word	0x20000219
 80016b4:	0800cf80 	.word	0x0800cf80
 80016b8:	0800cf90 	.word	0x0800cf90
 80016bc:	2000021a 	.word	0x2000021a
 80016c0:	0800cfa0 	.word	0x0800cfa0
 80016c4:	0800cfb0 	.word	0x0800cfb0
 80016c8:	2000021b 	.word	0x2000021b
 80016cc:	0800cfc0 	.word	0x0800cfc0
			} else if(dilSecim == 1) {
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <menu+0x680>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d104      	bne.n	80016e2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80016d8:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <menu+0x684>)
 80016da:	2101      	movs	r1, #1
 80016dc:	2002      	movs	r0, #2
 80016de:	f006 f9f5 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016e2:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <menu+0x688>)
 80016e4:	210f      	movs	r1, #15
 80016e6:	2002      	movs	r0, #2
 80016e8:	f006 f9f0 	bl	8007acc <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <menu+0x68c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	220a      	movs	r2, #10
 80016f2:	494b      	ldr	r1, [pc, #300]	; (8001820 <menu+0x690>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00a fd3b 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 80016fa:	4a49      	ldr	r2, [pc, #292]	; (8001820 <menu+0x690>)
 80016fc:	210e      	movs	r1, #14
 80016fe:	2002      	movs	r0, #2
 8001700:	f006 f9e4 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <menu+0x694>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b07      	cmp	r3, #7
 800170a:	d123      	bne.n	8001754 <menu+0x5c4>
			if(dilSecim == 0) {
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <menu+0x680>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001714:	4a44      	ldr	r2, [pc, #272]	; (8001828 <menu+0x698>)
 8001716:	2101      	movs	r1, #1
 8001718:	2002      	movs	r0, #2
 800171a:	f006 f9d7 	bl	8007acc <lcd_print>
 800171e:	e008      	b.n	8001732 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <menu+0x680>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d104      	bne.n	8001732 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001728:	4a40      	ldr	r2, [pc, #256]	; (800182c <menu+0x69c>)
 800172a:	2101      	movs	r1, #1
 800172c:	2002      	movs	r0, #2
 800172e:	f006 f9cd 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001732:	4a39      	ldr	r2, [pc, #228]	; (8001818 <menu+0x688>)
 8001734:	210f      	movs	r1, #15
 8001736:	2002      	movs	r0, #2
 8001738:	f006 f9c8 	bl	8007acc <lcd_print>
			itoa(hataKayit8, snum, 10);
 800173c:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <menu+0x6a0>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	220a      	movs	r2, #10
 8001742:	4937      	ldr	r1, [pc, #220]	; (8001820 <menu+0x690>)
 8001744:	4618      	mov	r0, r3
 8001746:	f00a fd13 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 800174a:	4a35      	ldr	r2, [pc, #212]	; (8001820 <menu+0x690>)
 800174c:	210e      	movs	r1, #14
 800174e:	2002      	movs	r0, #2
 8001750:	f006 f9bc 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001754:	4b33      	ldr	r3, [pc, #204]	; (8001824 <menu+0x694>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d123      	bne.n	80017a4 <menu+0x614>
			if(dilSecim == 0) {
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <menu+0x680>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001764:	4a33      	ldr	r2, [pc, #204]	; (8001834 <menu+0x6a4>)
 8001766:	2101      	movs	r1, #1
 8001768:	2002      	movs	r0, #2
 800176a:	f006 f9af 	bl	8007acc <lcd_print>
 800176e:	e008      	b.n	8001782 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <menu+0x680>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d104      	bne.n	8001782 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001778:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <menu+0x6a8>)
 800177a:	2101      	movs	r1, #1
 800177c:	2002      	movs	r0, #2
 800177e:	f006 f9a5 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <menu+0x688>)
 8001784:	210f      	movs	r1, #15
 8001786:	2002      	movs	r0, #2
 8001788:	f006 f9a0 	bl	8007acc <lcd_print>
			itoa(hataKayit9, snum, 10);
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <menu+0x6ac>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	220a      	movs	r2, #10
 8001792:	4923      	ldr	r1, [pc, #140]	; (8001820 <menu+0x690>)
 8001794:	4618      	mov	r0, r3
 8001796:	f00a fceb 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <menu+0x690>)
 800179c:	210e      	movs	r1, #14
 800179e:	2002      	movs	r0, #2
 80017a0:	f006 f994 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <menu+0x694>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	d123      	bne.n	80017f4 <menu+0x664>
			if(dilSecim == 0) {
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <menu+0x680>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <menu+0x6b0>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f006 f987 	bl	8007acc <lcd_print>
 80017be:	e008      	b.n	80017d2 <menu+0x642>
			} else if(dilSecim == 1) {
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <menu+0x680>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d104      	bne.n	80017d2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <menu+0x6b4>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	2002      	movs	r0, #2
 80017ce:	f006 f97d 	bl	8007acc <lcd_print>
			}
			lcd_print(2, 16, " ");
 80017d2:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <menu+0x6b8>)
 80017d4:	2110      	movs	r1, #16
 80017d6:	2002      	movs	r0, #2
 80017d8:	f006 f978 	bl	8007acc <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <menu+0x6bc>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	220a      	movs	r2, #10
 80017e2:	490f      	ldr	r1, [pc, #60]	; (8001820 <menu+0x690>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00a fcc3 	bl	800c170 <itoa>
			lcd_print(2, 15, snum);
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <menu+0x690>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 f96c 	bl	8007acc <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <menu+0x694>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b0a      	cmp	r3, #10
 80017fa:	d134      	bne.n	8001866 <menu+0x6d6>
			if(dilSecim == 0) {
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <menu+0x680>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d127      	bne.n	8001854 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <menu+0x6c0>)
 8001806:	2101      	movs	r1, #1
 8001808:	2002      	movs	r0, #2
 800180a:	f006 f95f 	bl	8007acc <lcd_print>
 800180e:	e02a      	b.n	8001866 <menu+0x6d6>
 8001810:	20000215 	.word	0x20000215
 8001814:	0800cfd0 	.word	0x0800cfd0
 8001818:	0800cf3c 	.word	0x0800cf3c
 800181c:	2000021c 	.word	0x2000021c
 8001820:	20000190 	.word	0x20000190
 8001824:	200001f6 	.word	0x200001f6
 8001828:	0800cfe0 	.word	0x0800cfe0
 800182c:	0800cff0 	.word	0x0800cff0
 8001830:	2000021d 	.word	0x2000021d
 8001834:	0800d000 	.word	0x0800d000
 8001838:	0800d010 	.word	0x0800d010
 800183c:	2000021e 	.word	0x2000021e
 8001840:	0800d020 	.word	0x0800d020
 8001844:	0800d030 	.word	0x0800d030
 8001848:	0800d040 	.word	0x0800d040
 800184c:	2000021f 	.word	0x2000021f
 8001850:	0800d044 	.word	0x0800d044
			} else if(dilSecim == 1) {
 8001854:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <menu+0x8d0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d104      	bne.n	8001866 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 800185c:	4a81      	ldr	r2, [pc, #516]	; (8001a64 <menu+0x8d4>)
 800185e:	2101      	movs	r1, #1
 8001860:	2002      	movs	r0, #2
 8001862:	f006 f933 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001866:	2102      	movs	r1, #2
 8001868:	487f      	ldr	r0, [pc, #508]	; (8001a68 <menu+0x8d8>)
 800186a:	f007 fc55 	bl	8009118 <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	d119      	bne.n	80018a8 <menu+0x718>
 8001874:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <menu+0x8dc>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f083 0301 	eor.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d012      	beq.n	80018a8 <menu+0x718>
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <menu+0x8e0>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10e      	bne.n	80018a8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800188a:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <menu+0x8e4>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <menu+0x8e4>)
 8001894:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001896:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <menu+0x8e4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b0a      	cmp	r3, #10
 800189c:	d902      	bls.n	80018a4 <menu+0x714>
				hataGostermeSirasi = 0;
 800189e:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <menu+0x8e4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018a4:	f003 f840 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018a8:	2104      	movs	r1, #4
 80018aa:	486f      	ldr	r0, [pc, #444]	; (8001a68 <menu+0x8d8>)
 80018ac:	f007 fc34 	bl	8009118 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d119      	bne.n	80018ea <menu+0x75a>
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <menu+0x8dc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f083 0301 	eor.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d012      	beq.n	80018ea <menu+0x75a>
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <menu+0x8e0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10e      	bne.n	80018ea <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018cc:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <menu+0x8e4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <menu+0x8e4>)
 80018d6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018d8:	4b66      	ldr	r3, [pc, #408]	; (8001a74 <menu+0x8e4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b0b      	cmp	r3, #11
 80018de:	d902      	bls.n	80018e6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <menu+0x8e4>)
 80018e2:	220a      	movs	r2, #10
 80018e4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018e6:	f003 f81f 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018ea:	2108      	movs	r1, #8
 80018ec:	485e      	ldr	r0, [pc, #376]	; (8001a68 <menu+0x8d8>)
 80018ee:	f007 fc13 	bl	8009118 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d153      	bne.n	80019a0 <menu+0x810>
 80018f8:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <menu+0x8dc>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f083 0301 	eor.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04c      	beq.n	80019a0 <menu+0x810>
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <menu+0x8e4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b0a      	cmp	r3, #10
 800190c:	d148      	bne.n	80019a0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 800190e:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <menu+0x8e8>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <menu+0x8ec>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <menu+0x8f0>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <menu+0x8ec>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <menu+0x8f4>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <menu+0x8ec>)
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <menu+0x8f8>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <menu+0x8ec>)
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001946:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <menu+0x8fc>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <menu+0x8ec>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001954:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <menu+0x900>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <menu+0x8ec>)
 800195c:	2200      	movs	r2, #0
 800195e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <menu+0x904>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <menu+0x8ec>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <menu+0x908>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <menu+0x8ec>)
 8001978:	2200      	movs	r2, #0
 800197a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <menu+0x90c>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <menu+0x8ec>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 800198c:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <menu+0x910>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <menu+0x8ec>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <menu+0x914>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019a0:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <menu+0x918>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	f040 80fc 	bne.w	8001ba2 <menu+0xa12>
		if(dilSecim == 0) {
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <menu+0x8d0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80019b2:	4a3e      	ldr	r2, [pc, #248]	; (8001aac <menu+0x91c>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	2001      	movs	r0, #1
 80019b8:	f006 f888 	bl	8007acc <lcd_print>
 80019bc:	e008      	b.n	80019d0 <menu+0x840>
		} else if(dilSecim == 1) {
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <menu+0x8d0>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d104      	bne.n	80019d0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80019c6:	4a3a      	ldr	r2, [pc, #232]	; (8001ab0 <menu+0x920>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	2001      	movs	r0, #1
 80019cc:	f006 f87e 	bl	8007acc <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <menu+0x8e0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d003      	beq.n	80019e0 <menu+0x850>
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <menu+0x8e0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d112      	bne.n	8001a06 <menu+0x876>
			if(dilSecim == 0) {
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <menu+0x8d0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80019e8:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <menu+0x924>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 f86d 	bl	8007acc <lcd_print>
 80019f2:	e008      	b.n	8001a06 <menu+0x876>
			} else if(dilSecim == 1) {
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <menu+0x8d0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d104      	bne.n	8001a06 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80019fc:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <menu+0x928>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	2002      	movs	r0, #2
 8001a02:	f006 f863 	bl	8007acc <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <menu+0x92c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d116      	bne.n	8001a3c <menu+0x8ac>
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <menu+0x8e0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d112      	bne.n	8001a3c <menu+0x8ac>
			if(dilSecim == 0) {
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <menu+0x8d0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d105      	bne.n	8001a2a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <menu+0x930>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	2002      	movs	r0, #2
 8001a24:	f006 f852 	bl	8007acc <lcd_print>
 8001a28:	e008      	b.n	8001a3c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <menu+0x8d0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d104      	bne.n	8001a3c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <menu+0x934>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	2002      	movs	r0, #2
 8001a38:	f006 f848 	bl	8007acc <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <menu+0x92c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d14c      	bne.n	8001ade <menu+0x94e>
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <menu+0x8e0>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d148      	bne.n	8001ade <menu+0x94e>
			if(dilSecim == 0) {
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <menu+0x8d0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d13b      	bne.n	8001acc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001a54:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <menu+0x938>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f006 f837 	bl	8007acc <lcd_print>
 8001a5e:	e03e      	b.n	8001ade <menu+0x94e>
 8001a60:	20000215 	.word	0x20000215
 8001a64:	0800d058 	.word	0x0800d058
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	20000223 	.word	0x20000223
 8001a70:	20000203 	.word	0x20000203
 8001a74:	200001f6 	.word	0x200001f6
 8001a78:	20000216 	.word	0x20000216
 8001a7c:	20000120 	.word	0x20000120
 8001a80:	20000217 	.word	0x20000217
 8001a84:	20000218 	.word	0x20000218
 8001a88:	20000219 	.word	0x20000219
 8001a8c:	2000021a 	.word	0x2000021a
 8001a90:	2000021b 	.word	0x2000021b
 8001a94:	2000021c 	.word	0x2000021c
 8001a98:	2000021d 	.word	0x2000021d
 8001a9c:	2000021e 	.word	0x2000021e
 8001aa0:	2000021f 	.word	0x2000021f
 8001aa4:	20000220 	.word	0x20000220
 8001aa8:	200001f4 	.word	0x200001f4
 8001aac:	0800d06c 	.word	0x0800d06c
 8001ab0:	0800d080 	.word	0x0800d080
 8001ab4:	0800d094 	.word	0x0800d094
 8001ab8:	0800d0a8 	.word	0x0800d0a8
 8001abc:	200001f5 	.word	0x200001f5
 8001ac0:	0800d0bc 	.word	0x0800d0bc
 8001ac4:	0800d0cc 	.word	0x0800d0cc
 8001ac8:	0800d0dc 	.word	0x0800d0dc
			} else if(dilSecim == 1) {
 8001acc:	4b98      	ldr	r3, [pc, #608]	; (8001d30 <menu+0xba0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d104      	bne.n	8001ade <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001ad4:	4a97      	ldr	r2, [pc, #604]	; (8001d34 <menu+0xba4>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f005 fff7 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4895      	ldr	r0, [pc, #596]	; (8001d38 <menu+0xba8>)
 8001ae2:	f007 fb19 	bl	8009118 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d119      	bne.n	8001b20 <menu+0x990>
 8001aec:	4b93      	ldr	r3, [pc, #588]	; (8001d3c <menu+0xbac>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f083 0301 	eor.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <menu+0x990>
 8001afa:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <menu+0xbb0>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10e      	bne.n	8001b20 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b02:	4b90      	ldr	r3, [pc, #576]	; (8001d44 <menu+0xbb4>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b8e      	ldr	r3, [pc, #568]	; (8001d44 <menu+0xbb4>)
 8001b0c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b0e:	4b8d      	ldr	r3, [pc, #564]	; (8001d44 <menu+0xbb4>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d902      	bls.n	8001b1c <menu+0x98c>
				calismaSekli = 0;
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <menu+0xbb4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b1c:	f002 ff04 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b20:	2104      	movs	r1, #4
 8001b22:	4885      	ldr	r0, [pc, #532]	; (8001d38 <menu+0xba8>)
 8001b24:	f007 faf8 	bl	8009118 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d119      	bne.n	8001b62 <menu+0x9d2>
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <menu+0xbac>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d012      	beq.n	8001b62 <menu+0x9d2>
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <menu+0xbb0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10e      	bne.n	8001b62 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001b44:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <menu+0xbb4>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b7d      	ldr	r3, [pc, #500]	; (8001d44 <menu+0xbb4>)
 8001b4e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b50:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <menu+0xbb4>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <menu+0x9ce>
	    		calismaSekli = 1;
 8001b58:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <menu+0xbb4>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b5e:	f002 fee3 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b62:	2108      	movs	r1, #8
 8001b64:	4874      	ldr	r0, [pc, #464]	; (8001d38 <menu+0xba8>)
 8001b66:	f007 fad7 	bl	8009118 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d118      	bne.n	8001ba2 <menu+0xa12>
 8001b70:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <menu+0xbac>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d011      	beq.n	8001ba2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b7e:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <menu+0xbb4>)
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <menu+0xbb8>)
 8001b84:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <menu+0xbb4>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d106      	bne.n	8001b9c <menu+0xa0c>
				altLimit = 1;
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <menu+0xbbc>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <menu+0xbbc>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <menu+0xbb8>)
 8001b9a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001b9c:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <menu+0xbc0>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <menu+0xbc4>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	f040 8083 	bne.w	8001cb2 <menu+0xb22>
		if(dilSecim == 0) {
 8001bac:	4b60      	ldr	r3, [pc, #384]	; (8001d30 <menu+0xba0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001bb4:	4a68      	ldr	r2, [pc, #416]	; (8001d58 <menu+0xbc8>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f005 ff87 	bl	8007acc <lcd_print>
 8001bbe:	e008      	b.n	8001bd2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <menu+0xba0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d104      	bne.n	8001bd2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001bc8:	4a64      	ldr	r2, [pc, #400]	; (8001d5c <menu+0xbcc>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f005 ff7d 	bl	8007acc <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <menu+0xbd0>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d113      	bne.n	8001c02 <menu+0xa72>
			if(dilSecim == 0) {
 8001bda:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <menu+0xba0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001be2:	4a60      	ldr	r2, [pc, #384]	; (8001d64 <menu+0xbd4>)
 8001be4:	2101      	movs	r1, #1
 8001be6:	2002      	movs	r0, #2
 8001be8:	f005 ff70 	bl	8007acc <lcd_print>
 8001bec:	e012      	b.n	8001c14 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001bee:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <menu+0xba0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10e      	bne.n	8001c14 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001bf6:	4a5c      	ldr	r2, [pc, #368]	; (8001d68 <menu+0xbd8>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f005 ff66 	bl	8007acc <lcd_print>
 8001c00:	e008      	b.n	8001c14 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <menu+0xbd0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c0a:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <menu+0xbdc>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f005 ff5c 	bl	8007acc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c14:	2102      	movs	r1, #2
 8001c16:	4848      	ldr	r0, [pc, #288]	; (8001d38 <menu+0xba8>)
 8001c18:	f007 fa7e 	bl	8009118 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d115      	bne.n	8001c4e <menu+0xabe>
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <menu+0xbac>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <menu+0xbd0>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <menu+0xbd0>)
 8001c3a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001c3c:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <menu+0xbd0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d902      	bls.n	8001c4a <menu+0xaba>
				emniyetCercevesi = 0;
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <menu+0xbd0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c4a:	f002 fe6d 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c4e:	2104      	movs	r1, #4
 8001c50:	4839      	ldr	r0, [pc, #228]	; (8001d38 <menu+0xba8>)
 8001c52:	f007 fa61 	bl	8009118 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d115      	bne.n	8001c88 <menu+0xaf8>
 8001c5c:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <menu+0xbac>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <menu+0xbd0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <menu+0xbd0>)
 8001c74:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <menu+0xbd0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <menu+0xbd0>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c84:	f002 fe50 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c88:	2108      	movs	r1, #8
 8001c8a:	482b      	ldr	r0, [pc, #172]	; (8001d38 <menu+0xba8>)
 8001c8c:	f007 fa44 	bl	8009118 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10d      	bne.n	8001cb2 <menu+0xb22>
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <menu+0xbac>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <menu+0xbd0>)
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <menu+0xbb8>)
 8001caa:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <menu+0xbc0>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <menu+0xbc4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	f040 80ba 	bne.w	8001e30 <menu+0xca0>
		if(dilSecim == 0) {
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <menu+0xba0>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	; (8001d70 <menu+0xbe0>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f005 feff 	bl	8007acc <lcd_print>
 8001cce:	e008      	b.n	8001ce2 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <menu+0xba0>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d104      	bne.n	8001ce2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001cd8:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <menu+0xbe4>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f005 fef5 	bl	8007acc <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <menu+0xbe8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d113      	bne.n	8001d12 <menu+0xb82>
			if(dilSecim == 0) {
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <menu+0xba0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <menu+0xbd4>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f005 fee8 	bl	8007acc <lcd_print>
 8001cfc:	e049      	b.n	8001d92 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <menu+0xba0>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d145      	bne.n	8001d92 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <menu+0xbd8>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f005 fede 	bl	8007acc <lcd_print>
 8001d10:	e03f      	b.n	8001d92 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <menu+0xbe8>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d13b      	bne.n	8001d92 <menu+0xc02>
			if(dilSecim == 0) {
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <menu+0xba0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d12e      	bne.n	8001d80 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d22:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <menu+0xbec>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	2002      	movs	r0, #2
 8001d28:	f005 fed0 	bl	8007acc <lcd_print>
 8001d2c:	e031      	b.n	8001d92 <menu+0xc02>
 8001d2e:	bf00      	nop
 8001d30:	20000215 	.word	0x20000215
 8001d34:	0800d0ec 	.word	0x0800d0ec
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	20000223 	.word	0x20000223
 8001d40:	20000203 	.word	0x20000203
 8001d44:	200001f5 	.word	0x200001f5
 8001d48:	20000120 	.word	0x20000120
 8001d4c:	200001fa 	.word	0x200001fa
 8001d50:	20000220 	.word	0x20000220
 8001d54:	200001f4 	.word	0x200001f4
 8001d58:	0800d0fc 	.word	0x0800d0fc
 8001d5c:	0800d110 	.word	0x0800d110
 8001d60:	200001f8 	.word	0x200001f8
 8001d64:	0800d124 	.word	0x0800d124
 8001d68:	0800d138 	.word	0x0800d138
 8001d6c:	0800d14c 	.word	0x0800d14c
 8001d70:	0800d15c 	.word	0x0800d15c
 8001d74:	0800d170 	.word	0x0800d170
 8001d78:	200001f9 	.word	0x200001f9
 8001d7c:	0800d184 	.word	0x0800d184
			} else if(dilSecim == 1) {
 8001d80:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <menu+0xe3c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d104      	bne.n	8001d92 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d88:	4a91      	ldr	r2, [pc, #580]	; (8001fd0 <menu+0xe40>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f005 fe9d 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d92:	2102      	movs	r1, #2
 8001d94:	488f      	ldr	r0, [pc, #572]	; (8001fd4 <menu+0xe44>)
 8001d96:	f007 f9bf 	bl	8009118 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d115      	bne.n	8001dcc <menu+0xc3c>
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <menu+0xe48>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	f083 0301 	eor.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00e      	beq.n	8001dcc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001dae:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <menu+0xe4c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <menu+0xe4c>)
 8001db8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <menu+0xe4c>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d902      	bls.n	8001dc8 <menu+0xc38>
				yavaslamaLimit = 0;
 8001dc2:	4b86      	ldr	r3, [pc, #536]	; (8001fdc <menu+0xe4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc8:	f002 fdae 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4881      	ldr	r0, [pc, #516]	; (8001fd4 <menu+0xe44>)
 8001dd0:	f007 f9a2 	bl	8009118 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d115      	bne.n	8001e06 <menu+0xc76>
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <menu+0xe48>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00e      	beq.n	8001e06 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001de8:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <menu+0xe4c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b7a      	ldr	r3, [pc, #488]	; (8001fdc <menu+0xe4c>)
 8001df2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <menu+0xe4c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001dfc:	4b77      	ldr	r3, [pc, #476]	; (8001fdc <menu+0xe4c>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e02:	f002 fd91 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e06:	2108      	movs	r1, #8
 8001e08:	4872      	ldr	r0, [pc, #456]	; (8001fd4 <menu+0xe44>)
 8001e0a:	f007 f985 	bl	8009118 <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10d      	bne.n	8001e30 <menu+0xca0>
 8001e14:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <menu+0xe48>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e22:	4b6e      	ldr	r3, [pc, #440]	; (8001fdc <menu+0xe4c>)
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <menu+0xe50>)
 8001e28:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <menu+0xe54>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e30:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <menu+0xe58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	f040 80b9 	bne.w	8001fac <menu+0xe1c>
		if(dilSecim == 0) {
 8001e3a:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <menu+0xe3c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001e42:	4a6a      	ldr	r2, [pc, #424]	; (8001fec <menu+0xe5c>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	2001      	movs	r0, #1
 8001e48:	f005 fe40 	bl	8007acc <lcd_print>
 8001e4c:	e008      	b.n	8001e60 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <menu+0xe3c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d104      	bne.n	8001e60 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001e56:	4a66      	ldr	r2, [pc, #408]	; (8001ff0 <menu+0xe60>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f005 fe36 	bl	8007acc <lcd_print>
		}

		if(altLimit == 0) {
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <menu+0xe64>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d113      	bne.n	8001e90 <menu+0xd00>
			if(dilSecim == 0) {
 8001e68:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <menu+0xe3c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e70:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <menu+0xe68>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	2002      	movs	r0, #2
 8001e76:	f005 fe29 	bl	8007acc <lcd_print>
 8001e7a:	e020      	b.n	8001ebe <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <menu+0xe3c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d11c      	bne.n	8001ebe <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e84:	4a5d      	ldr	r2, [pc, #372]	; (8001ffc <menu+0xe6c>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f005 fe1f 	bl	8007acc <lcd_print>
 8001e8e:	e016      	b.n	8001ebe <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001e90:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <menu+0xe64>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d112      	bne.n	8001ebe <menu+0xd2e>
			if(dilSecim == 0){
 8001e98:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <menu+0xe3c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001ea0:	4a57      	ldr	r2, [pc, #348]	; (8002000 <menu+0xe70>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f005 fe11 	bl	8007acc <lcd_print>
 8001eaa:	e008      	b.n	8001ebe <menu+0xd2e>
			} else if(dilSecim == 1){
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <menu+0xe3c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d104      	bne.n	8001ebe <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001eb4:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <menu+0xe40>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f005 fe07 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4844      	ldr	r0, [pc, #272]	; (8001fd4 <menu+0xe44>)
 8001ec2:	f007 f929 	bl	8009118 <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d119      	bne.n	8001f00 <menu+0xd70>
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <menu+0xe48>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <menu+0xd70>
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <menu+0xe74>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10e      	bne.n	8001f00 <menu+0xd70>
			altLimit = altLimit + 1;
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <menu+0xe64>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <menu+0xe64>)
 8001eec:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <menu+0xe64>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d902      	bls.n	8001efc <menu+0xd6c>
				altLimit = 0;
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <menu+0xe64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001efc:	f002 fd14 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f00:	2104      	movs	r1, #4
 8001f02:	4834      	ldr	r0, [pc, #208]	; (8001fd4 <menu+0xe44>)
 8001f04:	f007 f908 	bl	8009118 <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d119      	bne.n	8001f42 <menu+0xdb2>
 8001f0e:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <menu+0xe48>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f083 0301 	eor.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d012      	beq.n	8001f42 <menu+0xdb2>
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <menu+0xe74>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10e      	bne.n	8001f42 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f24:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <menu+0xe64>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <menu+0xe64>)
 8001f2e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <menu+0xe64>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <menu+0xdae>
		   		altLimit = 1;
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <menu+0xe64>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f3e:	f002 fcf3 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f42:	2108      	movs	r1, #8
 8001f44:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <menu+0xe44>)
 8001f46:	f007 f8e7 	bl	8009118 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d12d      	bne.n	8001fac <menu+0xe1c>
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <menu+0xe48>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d026      	beq.n	8001fac <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <menu+0xe64>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <menu+0xe50>)
 8001f64:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <menu+0xe64>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d110      	bne.n	8001f90 <menu+0xe00>
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <menu+0xe78>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <menu+0xdee>
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <menu+0xe78>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d108      	bne.n	8001f90 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <menu+0xe78>)
 8001f80:	2203      	movs	r2, #3
 8001f82:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <menu+0xe78>)
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <menu+0xe50>)
 8001f8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f8e:	e00a      	b.n	8001fa6 <menu+0xe16>
			} else if(altLimit == 0) {
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <menu+0xe64>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d106      	bne.n	8001fa6 <menu+0xe16>
				platformSilindirTipi = 0;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <menu+0xe7c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <menu+0xe7c>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <menu+0xe50>)
 8001fa4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <menu+0xe54>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <menu+0xe58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	f040 80b6 	bne.w	8002122 <menu+0xf92>
		if(dilSecim == 0) {
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <menu+0xe3c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d12a      	bne.n	8002014 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <menu+0xe80>)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f005 fd82 	bl	8007acc <lcd_print>
 8001fc8:	e02d      	b.n	8002026 <menu+0xe96>
 8001fca:	bf00      	nop
 8001fcc:	20000215 	.word	0x20000215
 8001fd0:	0800d198 	.word	0x0800d198
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	20000223 	.word	0x20000223
 8001fdc:	200001f9 	.word	0x200001f9
 8001fe0:	20000120 	.word	0x20000120
 8001fe4:	20000220 	.word	0x20000220
 8001fe8:	200001f4 	.word	0x200001f4
 8001fec:	0800d1ac 	.word	0x0800d1ac
 8001ff0:	0800d1c0 	.word	0x0800d1c0
 8001ff4:	200001fa 	.word	0x200001fa
 8001ff8:	0800d124 	.word	0x0800d124
 8001ffc:	0800d138 	.word	0x0800d138
 8002000:	0800d184 	.word	0x0800d184
 8002004:	200001f5 	.word	0x200001f5
 8002008:	20000201 	.word	0x20000201
 800200c:	20000207 	.word	0x20000207
 8002010:	0800d1d4 	.word	0x0800d1d4
		} else if(dilSecim == 1){
 8002014:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <menu+0x1070>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d104      	bne.n	8002026 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <menu+0x1074>)
 800201e:	2101      	movs	r1, #1
 8002020:	2001      	movs	r0, #1
 8002022:	f005 fd53 	bl	8007acc <lcd_print>
		}
		if(basincSalteri == 0){
 8002026:	4b78      	ldr	r3, [pc, #480]	; (8002208 <menu+0x1078>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d113      	bne.n	8002056 <menu+0xec6>
			if(dilSecim == 0) {
 800202e:	4b74      	ldr	r3, [pc, #464]	; (8002200 <menu+0x1070>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <menu+0x107c>)
 8002038:	2101      	movs	r1, #1
 800203a:	2002      	movs	r0, #2
 800203c:	f005 fd46 	bl	8007acc <lcd_print>
 8002040:	e020      	b.n	8002084 <menu+0xef4>
			} else if(dilSecim == 1){
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <menu+0x1070>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d11c      	bne.n	8002084 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800204a:	4a71      	ldr	r2, [pc, #452]	; (8002210 <menu+0x1080>)
 800204c:	2101      	movs	r1, #1
 800204e:	2002      	movs	r0, #2
 8002050:	f005 fd3c 	bl	8007acc <lcd_print>
 8002054:	e016      	b.n	8002084 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002056:	4b6c      	ldr	r3, [pc, #432]	; (8002208 <menu+0x1078>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d112      	bne.n	8002084 <menu+0xef4>
			if(dilSecim == 0) {
 800205e:	4b68      	ldr	r3, [pc, #416]	; (8002200 <menu+0x1070>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002066:	4a6b      	ldr	r2, [pc, #428]	; (8002214 <menu+0x1084>)
 8002068:	2101      	movs	r1, #1
 800206a:	2002      	movs	r0, #2
 800206c:	f005 fd2e 	bl	8007acc <lcd_print>
 8002070:	e008      	b.n	8002084 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <menu+0x1070>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d104      	bne.n	8002084 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800207a:	4a67      	ldr	r2, [pc, #412]	; (8002218 <menu+0x1088>)
 800207c:	2101      	movs	r1, #1
 800207e:	2002      	movs	r0, #2
 8002080:	f005 fd24 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002084:	2102      	movs	r1, #2
 8002086:	4865      	ldr	r0, [pc, #404]	; (800221c <menu+0x108c>)
 8002088:	f007 f846 	bl	8009118 <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d115      	bne.n	80020be <menu+0xf2e>
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <menu+0x1090>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <menu+0x1078>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <menu+0x1078>)
 80020aa:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80020ac:	4b56      	ldr	r3, [pc, #344]	; (8002208 <menu+0x1078>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d902      	bls.n	80020ba <menu+0xf2a>
				basincSalteri = 0;
 80020b4:	4b54      	ldr	r3, [pc, #336]	; (8002208 <menu+0x1078>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020ba:	f002 fc35 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020be:	2104      	movs	r1, #4
 80020c0:	4856      	ldr	r0, [pc, #344]	; (800221c <menu+0x108c>)
 80020c2:	f007 f829 	bl	8009118 <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d115      	bne.n	80020f8 <menu+0xf68>
 80020cc:	4b54      	ldr	r3, [pc, #336]	; (8002220 <menu+0x1090>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00e      	beq.n	80020f8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80020da:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <menu+0x1078>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3b01      	subs	r3, #1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b49      	ldr	r3, [pc, #292]	; (8002208 <menu+0x1078>)
 80020e4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <menu+0x1078>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <menu+0xf64>
		   		basincSalteri = 1;
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <menu+0x1078>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020f4:	f002 fc18 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f8:	2108      	movs	r1, #8
 80020fa:	4848      	ldr	r0, [pc, #288]	; (800221c <menu+0x108c>)
 80020fc:	f007 f80c 	bl	8009118 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10d      	bne.n	8002122 <menu+0xf92>
 8002106:	4b46      	ldr	r3, [pc, #280]	; (8002220 <menu+0x1090>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002114:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <menu+0x1078>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <menu+0x1094>)
 800211a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800211c:	4b42      	ldr	r3, [pc, #264]	; (8002228 <menu+0x1098>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002122:	4b42      	ldr	r3, [pc, #264]	; (800222c <menu+0x109c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b07      	cmp	r3, #7
 8002128:	f040 80f5 	bne.w	8002316 <menu+0x1186>
		if(dilSecim == 0) {
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <menu+0x1070>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002134:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <menu+0x10a0>)
 8002136:	2101      	movs	r1, #1
 8002138:	2001      	movs	r0, #1
 800213a:	f005 fcc7 	bl	8007acc <lcd_print>
 800213e:	e008      	b.n	8002152 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <menu+0x1070>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d104      	bne.n	8002152 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <menu+0x10a4>)
 800214a:	2101      	movs	r1, #1
 800214c:	2001      	movs	r0, #1
 800214e:	f005 fcbd 	bl	8007acc <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002152:	4b39      	ldr	r3, [pc, #228]	; (8002238 <menu+0x10a8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d113      	bne.n	8002182 <menu+0xff2>
			if(dilSecim == 0) {
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <menu+0x1070>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002162:	4a2a      	ldr	r2, [pc, #168]	; (800220c <menu+0x107c>)
 8002164:	2101      	movs	r1, #1
 8002166:	2002      	movs	r0, #2
 8002168:	f005 fcb0 	bl	8007acc <lcd_print>
 800216c:	e079      	b.n	8002262 <menu+0x10d2>
			} else if(dilSecim == 1){
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <menu+0x1070>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d175      	bne.n	8002262 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002176:	4a26      	ldr	r2, [pc, #152]	; (8002210 <menu+0x1080>)
 8002178:	2101      	movs	r1, #1
 800217a:	2002      	movs	r0, #2
 800217c:	f005 fca6 	bl	8007acc <lcd_print>
 8002180:	e06f      	b.n	8002262 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <menu+0x10a8>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d113      	bne.n	80021b2 <menu+0x1022>
			if(dilSecim == 0) {
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <menu+0x1070>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002192:	4a2a      	ldr	r2, [pc, #168]	; (800223c <menu+0x10ac>)
 8002194:	2101      	movs	r1, #1
 8002196:	2002      	movs	r0, #2
 8002198:	f005 fc98 	bl	8007acc <lcd_print>
 800219c:	e061      	b.n	8002262 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <menu+0x1070>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d15d      	bne.n	8002262 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80021a6:	4a26      	ldr	r2, [pc, #152]	; (8002240 <menu+0x10b0>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	2002      	movs	r0, #2
 80021ac:	f005 fc8e 	bl	8007acc <lcd_print>
 80021b0:	e057      	b.n	8002262 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <menu+0x10a8>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d113      	bne.n	80021e2 <menu+0x1052>
			if(dilSecim == 0) {
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <menu+0x1070>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80021c2:	4a20      	ldr	r2, [pc, #128]	; (8002244 <menu+0x10b4>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f005 fc80 	bl	8007acc <lcd_print>
 80021cc:	e049      	b.n	8002262 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <menu+0x1070>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d145      	bne.n	8002262 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <menu+0x10b8>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f005 fc76 	bl	8007acc <lcd_print>
 80021e0:	e03f      	b.n	8002262 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <menu+0x10a8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d13b      	bne.n	8002262 <menu+0x10d2>
			if(dilSecim == 0) {
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <menu+0x1070>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d12e      	bne.n	8002250 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80021f2:	4a16      	ldr	r2, [pc, #88]	; (800224c <menu+0x10bc>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f005 fc68 	bl	8007acc <lcd_print>
 80021fc:	e031      	b.n	8002262 <menu+0x10d2>
 80021fe:	bf00      	nop
 8002200:	20000215 	.word	0x20000215
 8002204:	0800d1e4 	.word	0x0800d1e4
 8002208:	200001fb 	.word	0x200001fb
 800220c:	0800d124 	.word	0x0800d124
 8002210:	0800d138 	.word	0x0800d138
 8002214:	0800d184 	.word	0x0800d184
 8002218:	0800d198 	.word	0x0800d198
 800221c:	40010800 	.word	0x40010800
 8002220:	20000223 	.word	0x20000223
 8002224:	20000120 	.word	0x20000120
 8002228:	20000220 	.word	0x20000220
 800222c:	200001f4 	.word	0x200001f4
 8002230:	0800d1f4 	.word	0x0800d1f4
 8002234:	0800d208 	.word	0x0800d208
 8002238:	200001fc 	.word	0x200001fc
 800223c:	0800d21c 	.word	0x0800d21c
 8002240:	0800d230 	.word	0x0800d230
 8002244:	0800d244 	.word	0x0800d244
 8002248:	0800d258 	.word	0x0800d258
 800224c:	0800d26c 	.word	0x0800d26c
			} else if(dilSecim == 1){
 8002250:	4b99      	ldr	r3, [pc, #612]	; (80024b8 <menu+0x1328>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d104      	bne.n	8002262 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002258:	4a98      	ldr	r2, [pc, #608]	; (80024bc <menu+0x132c>)
 800225a:	2101      	movs	r1, #1
 800225c:	2002      	movs	r0, #2
 800225e:	f005 fc35 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002262:	2102      	movs	r1, #2
 8002264:	4896      	ldr	r0, [pc, #600]	; (80024c0 <menu+0x1330>)
 8002266:	f006 ff57 	bl	8009118 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d115      	bne.n	800229c <menu+0x110c>
 8002270:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <menu+0x1334>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800227e:	4b92      	ldr	r3, [pc, #584]	; (80024c8 <menu+0x1338>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b90      	ldr	r3, [pc, #576]	; (80024c8 <menu+0x1338>)
 8002288:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800228a:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <menu+0x1338>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d902      	bls.n	8002298 <menu+0x1108>
				kapiSecimleri = 0;
 8002292:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <menu+0x1338>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002298:	f002 fb46 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800229c:	2104      	movs	r1, #4
 800229e:	4888      	ldr	r0, [pc, #544]	; (80024c0 <menu+0x1330>)
 80022a0:	f006 ff3a 	bl	8009118 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d115      	bne.n	80022d6 <menu+0x1146>
 80022aa:	4b86      	ldr	r3, [pc, #536]	; (80024c4 <menu+0x1334>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80022b8:	4b83      	ldr	r3, [pc, #524]	; (80024c8 <menu+0x1338>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3b01      	subs	r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <menu+0x1338>)
 80022c2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022c4:	4b80      	ldr	r3, [pc, #512]	; (80024c8 <menu+0x1338>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d902      	bls.n	80022d2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80022cc:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <menu+0x1338>)
 80022ce:	2203      	movs	r2, #3
 80022d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022d2:	f002 fb29 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d6:	2108      	movs	r1, #8
 80022d8:	4879      	ldr	r0, [pc, #484]	; (80024c0 <menu+0x1330>)
 80022da:	f006 ff1d 	bl	8009118 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d118      	bne.n	8002316 <menu+0x1186>
 80022e4:	4b77      	ldr	r3, [pc, #476]	; (80024c4 <menu+0x1334>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d011      	beq.n	8002316 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80022f2:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <menu+0x1338>)
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <menu+0x133c>)
 80022f8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <menu+0x1338>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <menu+0x1180>
				altLimit = 1;
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <menu+0x1340>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002308:	4b71      	ldr	r3, [pc, #452]	; (80024d0 <menu+0x1340>)
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <menu+0x133c>)
 800230e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002310:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <menu+0x1344>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002316:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <menu+0x1348>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b08      	cmp	r3, #8
 800231c:	f040 8092 	bne.w	8002444 <menu+0x12b4>
		if(dilSecim == 0) {
 8002320:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <menu+0x1328>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002328:	4a6c      	ldr	r2, [pc, #432]	; (80024dc <menu+0x134c>)
 800232a:	2101      	movs	r1, #1
 800232c:	2001      	movs	r0, #1
 800232e:	f005 fbcd 	bl	8007acc <lcd_print>
 8002332:	e008      	b.n	8002346 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002334:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <menu+0x1328>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d104      	bne.n	8002346 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800233c:	4a68      	ldr	r2, [pc, #416]	; (80024e0 <menu+0x1350>)
 800233e:	2101      	movs	r1, #1
 8002340:	2001      	movs	r0, #1
 8002342:	f005 fbc3 	bl	8007acc <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <menu+0x1354>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d113      	bne.n	8002376 <menu+0x11e6>
			if(dilSecim == 0) {
 800234e:	4b5a      	ldr	r3, [pc, #360]	; (80024b8 <menu+0x1328>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002356:	4a64      	ldr	r2, [pc, #400]	; (80024e8 <menu+0x1358>)
 8002358:	2101      	movs	r1, #1
 800235a:	2002      	movs	r0, #2
 800235c:	f005 fbb6 	bl	8007acc <lcd_print>
 8002360:	e020      	b.n	80023a4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002362:	4b55      	ldr	r3, [pc, #340]	; (80024b8 <menu+0x1328>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d11c      	bne.n	80023a4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800236a:	4a60      	ldr	r2, [pc, #384]	; (80024ec <menu+0x135c>)
 800236c:	2101      	movs	r1, #1
 800236e:	2002      	movs	r0, #2
 8002370:	f005 fbac 	bl	8007acc <lcd_print>
 8002374:	e016      	b.n	80023a4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <menu+0x1354>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d112      	bne.n	80023a4 <menu+0x1214>
			if(dilSecim == 0){
 800237e:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <menu+0x1328>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002386:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <menu+0x1360>)
 8002388:	2101      	movs	r1, #1
 800238a:	2002      	movs	r0, #2
 800238c:	f005 fb9e 	bl	8007acc <lcd_print>
 8002390:	e008      	b.n	80023a4 <menu+0x1214>
			} else if(dilSecim == 1){
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <menu+0x1328>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d104      	bne.n	80023a4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800239a:	4a56      	ldr	r2, [pc, #344]	; (80024f4 <menu+0x1364>)
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f005 fb94 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023a4:	2102      	movs	r1, #2
 80023a6:	4846      	ldr	r0, [pc, #280]	; (80024c0 <menu+0x1330>)
 80023a8:	f006 feb6 	bl	8009118 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d115      	bne.n	80023de <menu+0x124e>
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <menu+0x1334>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <menu+0x1354>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <menu+0x1354>)
 80023ca:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <menu+0x1354>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d902      	bls.n	80023da <menu+0x124a>
				kapiAcTipi = 0;
 80023d4:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <menu+0x1354>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023da:	f002 faa5 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023de:	2104      	movs	r1, #4
 80023e0:	4837      	ldr	r0, [pc, #220]	; (80024c0 <menu+0x1330>)
 80023e2:	f006 fe99 	bl	8009118 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d115      	bne.n	8002418 <menu+0x1288>
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <menu+0x1334>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <menu+0x1354>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <menu+0x1354>)
 8002404:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002406:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <menu+0x1354>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <menu+0x1284>
		   		kapiAcTipi = 1;
 800240e:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <menu+0x1354>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002414:	f002 fa88 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2108      	movs	r1, #8
 800241a:	4829      	ldr	r0, [pc, #164]	; (80024c0 <menu+0x1330>)
 800241c:	f006 fe7c 	bl	8009118 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10e      	bne.n	8002444 <menu+0x12b4>
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <menu+0x1334>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <menu+0x1354>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <menu+0x133c>)
 800243a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800243e:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <menu+0x1344>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <menu+0x1348>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b09      	cmp	r3, #9
 800244a:	f040 80b9 	bne.w	80025c0 <menu+0x1430>
		if(dilSecim == 0){
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <menu+0x1328>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <menu+0x1368>)
 8002458:	2101      	movs	r1, #1
 800245a:	2001      	movs	r0, #1
 800245c:	f005 fb36 	bl	8007acc <lcd_print>
 8002460:	e008      	b.n	8002474 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <menu+0x1328>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d104      	bne.n	8002474 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800246a:	4a24      	ldr	r2, [pc, #144]	; (80024fc <menu+0x136c>)
 800246c:	2101      	movs	r1, #1
 800246e:	2001      	movs	r0, #1
 8002470:	f005 fb2c 	bl	8007acc <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <menu+0x1370>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <menu+0x1374>)
 800247e:	2101      	movs	r1, #1
 8002480:	2002      	movs	r0, #2
 8002482:	f005 fb23 	bl	8007acc <lcd_print>
 8002486:	e04c      	b.n	8002522 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <menu+0x1370>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d13f      	bne.n	8002510 <menu+0x1380>
			if(dilSecim == 0){
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <menu+0x1328>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <menu+0x1378>)
 800249a:	2101      	movs	r1, #1
 800249c:	2002      	movs	r0, #2
 800249e:	f005 fb15 	bl	8007acc <lcd_print>
 80024a2:	e03e      	b.n	8002522 <menu+0x1392>
			} else if(dilSecim == 1) {
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <menu+0x1328>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d13a      	bne.n	8002522 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <menu+0x137c>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	2002      	movs	r0, #2
 80024b2:	f005 fb0b 	bl	8007acc <lcd_print>
 80024b6:	e034      	b.n	8002522 <menu+0x1392>
 80024b8:	20000215 	.word	0x20000215
 80024bc:	0800d280 	.word	0x0800d280
 80024c0:	40010800 	.word	0x40010800
 80024c4:	20000223 	.word	0x20000223
 80024c8:	200001fc 	.word	0x200001fc
 80024cc:	20000120 	.word	0x20000120
 80024d0:	200001fa 	.word	0x200001fa
 80024d4:	20000220 	.word	0x20000220
 80024d8:	200001f4 	.word	0x200001f4
 80024dc:	0800d294 	.word	0x0800d294
 80024e0:	0800d2a8 	.word	0x0800d2a8
 80024e4:	20000200 	.word	0x20000200
 80024e8:	0800d2bc 	.word	0x0800d2bc
 80024ec:	0800d2cc 	.word	0x0800d2cc
 80024f0:	0800d2dc 	.word	0x0800d2dc
 80024f4:	0800d2f0 	.word	0x0800d2f0
 80024f8:	0800d304 	.word	0x0800d304
 80024fc:	0800d318 	.word	0x0800d318
 8002500:	200001fd 	.word	0x200001fd
 8002504:	0800d32c 	.word	0x0800d32c
 8002508:	0800d340 	.word	0x0800d340
 800250c:	0800d350 	.word	0x0800d350
			}
		} else if(kapi1Tip == 2) {
 8002510:	4b8a      	ldr	r3, [pc, #552]	; (800273c <menu+0x15ac>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d104      	bne.n	8002522 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002518:	4a89      	ldr	r2, [pc, #548]	; (8002740 <menu+0x15b0>)
 800251a:	2101      	movs	r1, #1
 800251c:	2002      	movs	r0, #2
 800251e:	f005 fad5 	bl	8007acc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002522:	2102      	movs	r1, #2
 8002524:	4887      	ldr	r0, [pc, #540]	; (8002744 <menu+0x15b4>)
 8002526:	f006 fdf7 	bl	8009118 <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d115      	bne.n	800255c <menu+0x13cc>
 8002530:	4b85      	ldr	r3, [pc, #532]	; (8002748 <menu+0x15b8>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800253e:	4b7f      	ldr	r3, [pc, #508]	; (800273c <menu+0x15ac>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b7d      	ldr	r3, [pc, #500]	; (800273c <menu+0x15ac>)
 8002548:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800254a:	4b7c      	ldr	r3, [pc, #496]	; (800273c <menu+0x15ac>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d902      	bls.n	8002558 <menu+0x13c8>
				kapi1Tip = 0;
 8002552:	4b7a      	ldr	r3, [pc, #488]	; (800273c <menu+0x15ac>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002558:	f002 f9e6 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800255c:	2104      	movs	r1, #4
 800255e:	4879      	ldr	r0, [pc, #484]	; (8002744 <menu+0x15b4>)
 8002560:	f006 fdda 	bl	8009118 <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d115      	bne.n	8002596 <menu+0x1406>
 800256a:	4b77      	ldr	r3, [pc, #476]	; (8002748 <menu+0x15b8>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002578:	4b70      	ldr	r3, [pc, #448]	; (800273c <menu+0x15ac>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b6e      	ldr	r3, [pc, #440]	; (800273c <menu+0x15ac>)
 8002582:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <menu+0x15ac>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d902      	bls.n	8002592 <menu+0x1402>
		   		kapi1Tip = 2;
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <menu+0x15ac>)
 800258e:	2202      	movs	r2, #2
 8002590:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002592:	f002 f9c9 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002596:	2108      	movs	r1, #8
 8002598:	486a      	ldr	r0, [pc, #424]	; (8002744 <menu+0x15b4>)
 800259a:	f006 fdbd 	bl	8009118 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10d      	bne.n	80025c0 <menu+0x1430>
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <menu+0x15b8>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <menu+0x15ac>)
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <menu+0x15bc>)
 80025b8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <menu+0x15c0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <menu+0x15c4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d17f      	bne.n	80026c8 <menu+0x1538>
		if(dilSecim == 0) {
 80025c8:	4b63      	ldr	r3, [pc, #396]	; (8002758 <menu+0x15c8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80025d0:	4a62      	ldr	r2, [pc, #392]	; (800275c <menu+0x15cc>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f005 fa79 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <menu+0x15d0>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2002      	movs	r0, #2
 80025e0:	f005 fa74 	bl	8007acc <lcd_print>
 80025e4:	e00d      	b.n	8002602 <menu+0x1472>
		} else if(dilSecim == 1) {
 80025e6:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <menu+0x15c8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d109      	bne.n	8002602 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80025ee:	4a5d      	ldr	r2, [pc, #372]	; (8002764 <menu+0x15d4>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f005 fa6a 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80025f8:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <menu+0x15d8>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2002      	movs	r0, #2
 80025fe:	f005 fa65 	bl	8007acc <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002602:	4b5a      	ldr	r3, [pc, #360]	; (800276c <menu+0x15dc>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	220a      	movs	r2, #10
 8002608:	4959      	ldr	r1, [pc, #356]	; (8002770 <menu+0x15e0>)
 800260a:	4618      	mov	r0, r3
 800260c:	f009 fdb0 	bl	800c170 <itoa>
		lcd_print(2,16,snum);
 8002610:	4a57      	ldr	r2, [pc, #348]	; (8002770 <menu+0x15e0>)
 8002612:	2110      	movs	r1, #16
 8002614:	2002      	movs	r0, #2
 8002616:	f005 fa59 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800261a:	2102      	movs	r1, #2
 800261c:	4849      	ldr	r0, [pc, #292]	; (8002744 <menu+0x15b4>)
 800261e:	f006 fd7b 	bl	8009118 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d119      	bne.n	800265c <menu+0x14cc>
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <menu+0x15b8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f083 0301 	eor.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <menu+0x14cc>
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <menu+0x15ac>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800263e:	4b4b      	ldr	r3, [pc, #300]	; (800276c <menu+0x15dc>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <menu+0x15dc>)
 8002648:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <menu+0x15dc>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d902      	bls.n	8002658 <menu+0x14c8>
				kapi1AcSure = 0;
 8002652:	4b46      	ldr	r3, [pc, #280]	; (800276c <menu+0x15dc>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002658:	f002 f966 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800265c:	2104      	movs	r1, #4
 800265e:	4839      	ldr	r0, [pc, #228]	; (8002744 <menu+0x15b4>)
 8002660:	f006 fd5a 	bl	8009118 <HAL_GPIO_ReadPin>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d119      	bne.n	800269e <menu+0x150e>
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <menu+0x15b8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <menu+0x150e>
 8002678:	4b30      	ldr	r3, [pc, #192]	; (800273c <menu+0x15ac>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10e      	bne.n	800269e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <menu+0x15dc>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b38      	ldr	r3, [pc, #224]	; (800276c <menu+0x15dc>)
 800268a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800268c:	4b37      	ldr	r3, [pc, #220]	; (800276c <menu+0x15dc>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b06      	cmp	r3, #6
 8002692:	d902      	bls.n	800269a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <menu+0x15dc>)
 8002696:	2205      	movs	r2, #5
 8002698:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800269a:	f002 f945 	bl	8004928 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800269e:	2108      	movs	r1, #8
 80026a0:	4828      	ldr	r0, [pc, #160]	; (8002744 <menu+0x15b4>)
 80026a2:	f006 fd39 	bl	8009118 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <menu+0x1538>
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <menu+0x15b8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80026ba:	4b2c      	ldr	r3, [pc, #176]	; (800276c <menu+0x15dc>)
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <menu+0x15bc>)
 80026c0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <menu+0x15c0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <menu+0x15c4>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b0b      	cmp	r3, #11
 80026ce:	f040 80b5 	bne.w	800283c <menu+0x16ac>
		if(dilSecim == 0) {
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <menu+0x15c8>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <menu+0x15e4>)
 80026dc:	2101      	movs	r1, #1
 80026de:	2001      	movs	r0, #1
 80026e0:	f005 f9f4 	bl	8007acc <lcd_print>
 80026e4:	e008      	b.n	80026f8 <menu+0x1568>
		} else if(dilSecim == 1) {
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <menu+0x15c8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d104      	bne.n	80026f8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <menu+0x15e8>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	2001      	movs	r0, #1
 80026f4:	f005 f9ea 	bl	8007acc <lcd_print>
		}

		if(kapi2Tip == 0) {
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <menu+0x15ec>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002700:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <menu+0x15f0>)
 8002702:	2101      	movs	r1, #1
 8002704:	2002      	movs	r0, #2
 8002706:	f005 f9e1 	bl	8007acc <lcd_print>
 800270a:	e048      	b.n	800279e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <menu+0x15ec>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d13b      	bne.n	800278c <menu+0x15fc>
			if(dilSecim == 0) {
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <menu+0x15c8>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <menu+0x15f4>)
 800271e:	2101      	movs	r1, #1
 8002720:	2002      	movs	r0, #2
 8002722:	f005 f9d3 	bl	8007acc <lcd_print>
 8002726:	e03a      	b.n	800279e <menu+0x160e>
			} else if(dilSecim == 1) {
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <menu+0x15c8>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d136      	bne.n	800279e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002730:	4a15      	ldr	r2, [pc, #84]	; (8002788 <menu+0x15f8>)
 8002732:	2101      	movs	r1, #1
 8002734:	2002      	movs	r0, #2
 8002736:	f005 f9c9 	bl	8007acc <lcd_print>
 800273a:	e030      	b.n	800279e <menu+0x160e>
 800273c:	200001fd 	.word	0x200001fd
 8002740:	0800d364 	.word	0x0800d364
 8002744:	40010800 	.word	0x40010800
 8002748:	20000223 	.word	0x20000223
 800274c:	20000120 	.word	0x20000120
 8002750:	20000220 	.word	0x20000220
 8002754:	200001f4 	.word	0x200001f4
 8002758:	20000215 	.word	0x20000215
 800275c:	0800d374 	.word	0x0800d374
 8002760:	0800d388 	.word	0x0800d388
 8002764:	0800d398 	.word	0x0800d398
 8002768:	0800d3ac 	.word	0x0800d3ac
 800276c:	2000020d 	.word	0x2000020d
 8002770:	20000190 	.word	0x20000190
 8002774:	0800d3bc 	.word	0x0800d3bc
 8002778:	0800d3d0 	.word	0x0800d3d0
 800277c:	200001fe 	.word	0x200001fe
 8002780:	0800d32c 	.word	0x0800d32c
 8002784:	0800d340 	.word	0x0800d340
 8002788:	0800d350 	.word	0x0800d350
			}
		} else if(kapi2Tip == 2) {
 800278c:	4b8a      	ldr	r3, [pc, #552]	; (80029b8 <menu+0x1828>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d104      	bne.n	800279e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002794:	4a89      	ldr	r2, [pc, #548]	; (80029bc <menu+0x182c>)
 8002796:	2101      	movs	r1, #1
 8002798:	2002      	movs	r0, #2
 800279a:	f005 f997 	bl	8007acc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800279e:	2102      	movs	r1, #2
 80027a0:	4887      	ldr	r0, [pc, #540]	; (80029c0 <menu+0x1830>)
 80027a2:	f006 fcb9 	bl	8009118 <HAL_GPIO_ReadPin>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d115      	bne.n	80027d8 <menu+0x1648>
 80027ac:	4b85      	ldr	r3, [pc, #532]	; (80029c4 <menu+0x1834>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00e      	beq.n	80027d8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80027ba:	4b7f      	ldr	r3, [pc, #508]	; (80029b8 <menu+0x1828>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <menu+0x1828>)
 80027c4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027c6:	4b7c      	ldr	r3, [pc, #496]	; (80029b8 <menu+0x1828>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d902      	bls.n	80027d4 <menu+0x1644>
				kapi2Tip = 0;
 80027ce:	4b7a      	ldr	r3, [pc, #488]	; (80029b8 <menu+0x1828>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027d4:	f002 f8a8 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d8:	2104      	movs	r1, #4
 80027da:	4879      	ldr	r0, [pc, #484]	; (80029c0 <menu+0x1830>)
 80027dc:	f006 fc9c 	bl	8009118 <HAL_GPIO_ReadPin>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d115      	bne.n	8002812 <menu+0x1682>
 80027e6:	4b77      	ldr	r3, [pc, #476]	; (80029c4 <menu+0x1834>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80027f4:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <menu+0x1828>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <menu+0x1828>)
 80027fe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002800:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <menu+0x1828>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d902      	bls.n	800280e <menu+0x167e>
		   		kapi2Tip = 2;
 8002808:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <menu+0x1828>)
 800280a:	2202      	movs	r2, #2
 800280c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800280e:	f002 f88b 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002812:	2108      	movs	r1, #8
 8002814:	486a      	ldr	r0, [pc, #424]	; (80029c0 <menu+0x1830>)
 8002816:	f006 fc7f 	bl	8009118 <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10d      	bne.n	800283c <menu+0x16ac>
 8002820:	4b68      	ldr	r3, [pc, #416]	; (80029c4 <menu+0x1834>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800282e:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <menu+0x1828>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <menu+0x1838>)
 8002834:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <menu+0x183c>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <menu+0x1840>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d17f      	bne.n	8002944 <menu+0x17b4>
		if(dilSecim == 0) {
 8002844:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <menu+0x1844>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 800284c:	4a62      	ldr	r2, [pc, #392]	; (80029d8 <menu+0x1848>)
 800284e:	2101      	movs	r1, #1
 8002850:	2001      	movs	r0, #1
 8002852:	f005 f93b 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002856:	4a61      	ldr	r2, [pc, #388]	; (80029dc <menu+0x184c>)
 8002858:	2101      	movs	r1, #1
 800285a:	2002      	movs	r0, #2
 800285c:	f005 f936 	bl	8007acc <lcd_print>
 8002860:	e00d      	b.n	800287e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <menu+0x1844>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d109      	bne.n	800287e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800286a:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <menu+0x1850>)
 800286c:	2101      	movs	r1, #1
 800286e:	2001      	movs	r0, #1
 8002870:	f005 f92c 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002874:	4a5b      	ldr	r2, [pc, #364]	; (80029e4 <menu+0x1854>)
 8002876:	2101      	movs	r1, #1
 8002878:	2002      	movs	r0, #2
 800287a:	f005 f927 	bl	8007acc <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800287e:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <menu+0x1858>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	220a      	movs	r2, #10
 8002884:	4959      	ldr	r1, [pc, #356]	; (80029ec <menu+0x185c>)
 8002886:	4618      	mov	r0, r3
 8002888:	f009 fc72 	bl	800c170 <itoa>
		lcd_print(2,16,snum);
 800288c:	4a57      	ldr	r2, [pc, #348]	; (80029ec <menu+0x185c>)
 800288e:	2110      	movs	r1, #16
 8002890:	2002      	movs	r0, #2
 8002892:	f005 f91b 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002896:	2102      	movs	r1, #2
 8002898:	4849      	ldr	r0, [pc, #292]	; (80029c0 <menu+0x1830>)
 800289a:	f006 fc3d 	bl	8009118 <HAL_GPIO_ReadPin>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d119      	bne.n	80028d8 <menu+0x1748>
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <menu+0x1834>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d012      	beq.n	80028d8 <menu+0x1748>
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <menu+0x1828>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80028ba:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <menu+0x1858>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <menu+0x1858>)
 80028c4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80028c6:	4b48      	ldr	r3, [pc, #288]	; (80029e8 <menu+0x1858>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d902      	bls.n	80028d4 <menu+0x1744>
				kapi2AcSure = 0;
 80028ce:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <menu+0x1858>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028d4:	f002 f828 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028d8:	2104      	movs	r1, #4
 80028da:	4839      	ldr	r0, [pc, #228]	; (80029c0 <menu+0x1830>)
 80028dc:	f006 fc1c 	bl	8009118 <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d119      	bne.n	800291a <menu+0x178a>
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <menu+0x1834>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <menu+0x178a>
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <menu+0x1828>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10e      	bne.n	800291a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80028fc:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <menu+0x1858>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <menu+0x1858>)
 8002906:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002908:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <menu+0x1858>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b06      	cmp	r3, #6
 800290e:	d902      	bls.n	8002916 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <menu+0x1858>)
 8002912:	2205      	movs	r2, #5
 8002914:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002916:	f002 f807 	bl	8004928 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800291a:	2108      	movs	r1, #8
 800291c:	4828      	ldr	r0, [pc, #160]	; (80029c0 <menu+0x1830>)
 800291e:	f006 fbfb 	bl	8009118 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10d      	bne.n	8002944 <menu+0x17b4>
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <menu+0x1834>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f083 0301 	eor.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002936:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <menu+0x1858>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <menu+0x1838>)
 800293c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <menu+0x183c>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <menu+0x1840>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b0d      	cmp	r3, #13
 800294a:	f040 80b5 	bne.w	8002ab8 <menu+0x1928>
		if(dilSecim == 0) {
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <menu+0x1844>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002956:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <menu+0x1860>)
 8002958:	2101      	movs	r1, #1
 800295a:	2001      	movs	r0, #1
 800295c:	f005 f8b6 	bl	8007acc <lcd_print>
 8002960:	e008      	b.n	8002974 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <menu+0x1844>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d104      	bne.n	8002974 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800296a:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <menu+0x1864>)
 800296c:	2101      	movs	r1, #1
 800296e:	2001      	movs	r0, #1
 8002970:	f005 f8ac 	bl	8007acc <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <menu+0x1868>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <menu+0x186c>)
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f005 f8a3 	bl	8007acc <lcd_print>
 8002986:	e048      	b.n	8002a1a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <menu+0x1868>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d13b      	bne.n	8002a08 <menu+0x1878>
			if(dilSecim == 0) {
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <menu+0x1844>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <menu+0x1870>)
 800299a:	2101      	movs	r1, #1
 800299c:	2002      	movs	r0, #2
 800299e:	f005 f895 	bl	8007acc <lcd_print>
 80029a2:	e03a      	b.n	8002a1a <menu+0x188a>
			} else if(dilSecim == 1) {
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <menu+0x1844>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d136      	bne.n	8002a1a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <menu+0x1874>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	2002      	movs	r0, #2
 80029b2:	f005 f88b 	bl	8007acc <lcd_print>
 80029b6:	e030      	b.n	8002a1a <menu+0x188a>
 80029b8:	200001fe 	.word	0x200001fe
 80029bc:	0800d364 	.word	0x0800d364
 80029c0:	40010800 	.word	0x40010800
 80029c4:	20000223 	.word	0x20000223
 80029c8:	20000120 	.word	0x20000120
 80029cc:	20000220 	.word	0x20000220
 80029d0:	200001f4 	.word	0x200001f4
 80029d4:	20000215 	.word	0x20000215
 80029d8:	0800d3e4 	.word	0x0800d3e4
 80029dc:	0800d388 	.word	0x0800d388
 80029e0:	0800d3f8 	.word	0x0800d3f8
 80029e4:	0800d3ac 	.word	0x0800d3ac
 80029e8:	2000020e 	.word	0x2000020e
 80029ec:	20000190 	.word	0x20000190
 80029f0:	0800d40c 	.word	0x0800d40c
 80029f4:	0800d420 	.word	0x0800d420
 80029f8:	200001ff 	.word	0x200001ff
 80029fc:	0800d32c 	.word	0x0800d32c
 8002a00:	0800d340 	.word	0x0800d340
 8002a04:	0800d350 	.word	0x0800d350
			}
		} else if(kapitablaTip == 2) {
 8002a08:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <menu+0x19e8>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d104      	bne.n	8002a1a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a10:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <menu+0x19ec>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	2002      	movs	r0, #2
 8002a16:	f005 f859 	bl	8007acc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4858      	ldr	r0, [pc, #352]	; (8002b80 <menu+0x19f0>)
 8002a1e:	f006 fb7b 	bl	8009118 <HAL_GPIO_ReadPin>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d115      	bne.n	8002a54 <menu+0x18c4>
 8002a28:	4b56      	ldr	r3, [pc, #344]	; (8002b84 <menu+0x19f4>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00e      	beq.n	8002a54 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002a36:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <menu+0x19e8>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <menu+0x19e8>)
 8002a40:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <menu+0x19e8>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <menu+0x18c0>
				kapitablaTip = 0;
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <menu+0x19e8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a50:	f001 ff6a 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a54:	2104      	movs	r1, #4
 8002a56:	484a      	ldr	r0, [pc, #296]	; (8002b80 <menu+0x19f0>)
 8002a58:	f006 fb5e 	bl	8009118 <HAL_GPIO_ReadPin>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d115      	bne.n	8002a8e <menu+0x18fe>
 8002a62:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <menu+0x19f4>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	f083 0301 	eor.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00e      	beq.n	8002a8e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a70:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <menu+0x19e8>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <menu+0x19e8>)
 8002a7a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <menu+0x19e8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d902      	bls.n	8002a8a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a84:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <menu+0x19e8>)
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a8a:	f001 ff4d 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a8e:	2108      	movs	r1, #8
 8002a90:	483b      	ldr	r0, [pc, #236]	; (8002b80 <menu+0x19f0>)
 8002a92:	f006 fb41 	bl	8009118 <HAL_GPIO_ReadPin>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10d      	bne.n	8002ab8 <menu+0x1928>
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <menu+0x19f4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	f083 0301 	eor.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002aaa:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <menu+0x19e8>)
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <menu+0x19f8>)
 8002ab0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <menu+0x19fc>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <menu+0x1a00>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b0e      	cmp	r3, #14
 8002abe:	f040 80f2 	bne.w	8002ca6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002ac2:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <menu+0x1a04>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002aca:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <menu+0x1a08>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f004 fffc 	bl	8007acc <lcd_print>
 8002ad4:	e008      	b.n	8002ae8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <menu+0x1a04>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d104      	bne.n	8002ae8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <menu+0x1a0c>)
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f004 fff2 	bl	8007acc <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <menu+0x1a10>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d113      	bne.n	8002b18 <menu+0x1988>
			if(dilSecim == 0){
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <menu+0x1a04>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <menu+0x1a14>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	2002      	movs	r0, #2
 8002afe:	f004 ffe5 	bl	8007acc <lcd_print>
 8002b02:	e071      	b.n	8002be8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <menu+0x1a04>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d16d      	bne.n	8002be8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <menu+0x1a18>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2002      	movs	r0, #2
 8002b12:	f004 ffdb 	bl	8007acc <lcd_print>
 8002b16:	e067      	b.n	8002be8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <menu+0x1a10>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d112      	bne.n	8002b46 <menu+0x19b6>
			if(dilSecim == 0){
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <menu+0x1a04>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b28:	4a20      	ldr	r2, [pc, #128]	; (8002bac <menu+0x1a1c>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f004 ffcd 	bl	8007acc <lcd_print>
			}
			if(dilSecim == 1){
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <menu+0x1a04>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d156      	bne.n	8002be8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <menu+0x1a20>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f004 ffc4 	bl	8007acc <lcd_print>
 8002b44:	e050      	b.n	8002be8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <menu+0x1a10>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d136      	bne.n	8002bbc <menu+0x1a2c>
			if(dilSecim == 0){
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <menu+0x1a04>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002b56:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <menu+0x1a24>)
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f004 ffb6 	bl	8007acc <lcd_print>
 8002b60:	e042      	b.n	8002be8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <menu+0x1a04>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d13e      	bne.n	8002be8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <menu+0x1a28>)
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2002      	movs	r0, #2
 8002b70:	f004 ffac 	bl	8007acc <lcd_print>
 8002b74:	e038      	b.n	8002be8 <menu+0x1a58>
 8002b76:	bf00      	nop
 8002b78:	200001ff 	.word	0x200001ff
 8002b7c:	0800d364 	.word	0x0800d364
 8002b80:	40010800 	.word	0x40010800
 8002b84:	20000223 	.word	0x20000223
 8002b88:	20000120 	.word	0x20000120
 8002b8c:	20000220 	.word	0x20000220
 8002b90:	200001f4 	.word	0x200001f4
 8002b94:	20000215 	.word	0x20000215
 8002b98:	0800d434 	.word	0x0800d434
 8002b9c:	0800d448 	.word	0x0800d448
 8002ba0:	20000201 	.word	0x20000201
 8002ba4:	0800d45c 	.word	0x0800d45c
 8002ba8:	0800d46c 	.word	0x0800d46c
 8002bac:	0800d47c 	.word	0x0800d47c
 8002bb0:	0800d48c 	.word	0x0800d48c
 8002bb4:	0800d49c 	.word	0x0800d49c
 8002bb8:	0800d4b0 	.word	0x0800d4b0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002bbc:	4b9b      	ldr	r3, [pc, #620]	; (8002e2c <menu+0x1c9c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d111      	bne.n	8002be8 <menu+0x1a58>
			if(dilSecim == 0) {
 8002bc4:	4b9a      	ldr	r3, [pc, #616]	; (8002e30 <menu+0x1ca0>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002bcc:	4a99      	ldr	r2, [pc, #612]	; (8002e34 <menu+0x1ca4>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f004 ff7b 	bl	8007acc <lcd_print>
			}
			if(dilSecim == 1) {
 8002bd6:	4b96      	ldr	r3, [pc, #600]	; (8002e30 <menu+0x1ca0>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d104      	bne.n	8002be8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002bde:	4a96      	ldr	r2, [pc, #600]	; (8002e38 <menu+0x1ca8>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	2002      	movs	r0, #2
 8002be4:	f004 ff72 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be8:	2102      	movs	r1, #2
 8002bea:	4894      	ldr	r0, [pc, #592]	; (8002e3c <menu+0x1cac>)
 8002bec:	f006 fa94 	bl	8009118 <HAL_GPIO_ReadPin>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d115      	bne.n	8002c22 <menu+0x1a92>
 8002bf6:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <menu+0x1cb0>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c04:	4b89      	ldr	r3, [pc, #548]	; (8002e2c <menu+0x1c9c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b87      	ldr	r3, [pc, #540]	; (8002e2c <menu+0x1c9c>)
 8002c0e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c10:	4b86      	ldr	r3, [pc, #536]	; (8002e2c <menu+0x1c9c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d902      	bls.n	8002c1e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c18:	4b84      	ldr	r3, [pc, #528]	; (8002e2c <menu+0x1c9c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c1e:	f001 fe83 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c22:	2104      	movs	r1, #4
 8002c24:	4885      	ldr	r0, [pc, #532]	; (8002e3c <menu+0x1cac>)
 8002c26:	f006 fa77 	bl	8009118 <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d115      	bne.n	8002c5c <menu+0x1acc>
 8002c30:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <menu+0x1cb0>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <menu+0x1c9c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <menu+0x1c9c>)
 8002c48:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c4a:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <menu+0x1c9c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d902      	bls.n	8002c58 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <menu+0x1c9c>)
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c58:	f001 fe66 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5c:	2108      	movs	r1, #8
 8002c5e:	4877      	ldr	r0, [pc, #476]	; (8002e3c <menu+0x1cac>)
 8002c60:	f006 fa5a 	bl	8009118 <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d11d      	bne.n	8002ca6 <menu+0x1b16>
 8002c6a:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <menu+0x1cb0>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d016      	beq.n	8002ca6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c78:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <menu+0x1c9c>)
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	4b71      	ldr	r3, [pc, #452]	; (8002e44 <menu+0x1cb4>)
 8002c7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c82:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <menu+0x1c9c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <menu+0x1b02>
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <menu+0x1c9c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d106      	bne.n	8002ca0 <menu+0x1b10>
				altLimit = 1;
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <menu+0x1cb8>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002c98:	4b6b      	ldr	r3, [pc, #428]	; (8002e48 <menu+0x1cb8>)
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	4b69      	ldr	r3, [pc, #420]	; (8002e44 <menu+0x1cb4>)
 8002c9e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ca0:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <menu+0x1cbc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <menu+0x1cc0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d17f      	bne.n	8002dae <menu+0x1c1e>
		if(dilSecim == 0) {
 8002cae:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <menu+0x1ca0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002cb6:	4a67      	ldr	r2, [pc, #412]	; (8002e54 <menu+0x1cc4>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f004 ff06 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <menu+0x1cc8>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f004 ff01 	bl	8007acc <lcd_print>
 8002cca:	e00d      	b.n	8002ce8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <menu+0x1ca0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d109      	bne.n	8002ce8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002cd4:	4a61      	ldr	r2, [pc, #388]	; (8002e5c <menu+0x1ccc>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f004 fef7 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002cde:	4a60      	ldr	r2, [pc, #384]	; (8002e60 <menu+0x1cd0>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f004 fef2 	bl	8007acc <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <menu+0x1cd4>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	220a      	movs	r2, #10
 8002cee:	495e      	ldr	r1, [pc, #376]	; (8002e68 <menu+0x1cd8>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f009 fa3d 	bl	800c170 <itoa>
		lcd_print(2,16,snum);
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	; (8002e68 <menu+0x1cd8>)
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	f004 fee6 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d00:	2102      	movs	r1, #2
 8002d02:	484e      	ldr	r0, [pc, #312]	; (8002e3c <menu+0x1cac>)
 8002d04:	f006 fa08 	bl	8009118 <HAL_GPIO_ReadPin>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d119      	bne.n	8002d42 <menu+0x1bb2>
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <menu+0x1cb0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <menu+0x1bb2>
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <menu+0x1cdc>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10e      	bne.n	8002d42 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d24:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <menu+0x1cd4>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <menu+0x1cd4>)
 8002d2e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <menu+0x1cd4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d902      	bls.n	8002d3e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002d38:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <menu+0x1cd4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d3e:	f001 fdf3 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d42:	2104      	movs	r1, #4
 8002d44:	483d      	ldr	r0, [pc, #244]	; (8002e3c <menu+0x1cac>)
 8002d46:	f006 f9e7 	bl	8009118 <HAL_GPIO_ReadPin>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d119      	bne.n	8002d84 <menu+0x1bf4>
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <menu+0x1cb0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <menu+0x1bf4>
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <menu+0x1cdc>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <menu+0x1cd4>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <menu+0x1cd4>)
 8002d70:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <menu+0x1cd4>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <menu+0x1cd4>)
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d80:	f001 fdd2 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d84:	2108      	movs	r1, #8
 8002d86:	482d      	ldr	r0, [pc, #180]	; (8002e3c <menu+0x1cac>)
 8002d88:	f006 f9c6 	bl	8009118 <HAL_GPIO_ReadPin>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10d      	bne.n	8002dae <menu+0x1c1e>
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <menu+0x1cb0>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	f083 0301 	eor.w	r3, r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002da0:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <menu+0x1cd4>)
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <menu+0x1cb4>)
 8002da6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002da8:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <menu+0x1cbc>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <menu+0x1cc0>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	f040 80bc 	bne.w	8002f30 <menu+0x1da0>
		if(dilSecim == 0) {
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <menu+0x1ca0>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002dc0:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <menu+0x1ce0>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f004 fe81 	bl	8007acc <lcd_print>
 8002dca:	e008      	b.n	8002dde <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <menu+0x1ca0>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d104      	bne.n	8002dde <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002dd4:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <menu+0x1ce4>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f004 fe77 	bl	8007acc <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <menu+0x1ce8>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d113      	bne.n	8002e0e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <menu+0x1ca0>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <menu+0x1ca4>)
 8002df0:	2101      	movs	r1, #1
 8002df2:	2002      	movs	r0, #2
 8002df4:	f004 fe6a 	bl	8007acc <lcd_print>
 8002df8:	e04b      	b.n	8002e92 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <menu+0x1ca0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d147      	bne.n	8002e92 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e02:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <menu+0x1ca8>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	2002      	movs	r0, #2
 8002e08:	f004 fe60 	bl	8007acc <lcd_print>
 8002e0c:	e041      	b.n	8002e92 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <menu+0x1ce8>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d13d      	bne.n	8002e92 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <menu+0x1ca0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d130      	bne.n	8002e80 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <menu+0x1cec>)
 8002e20:	2101      	movs	r1, #1
 8002e22:	2002      	movs	r0, #2
 8002e24:	f004 fe52 	bl	8007acc <lcd_print>
 8002e28:	e033      	b.n	8002e92 <menu+0x1d02>
 8002e2a:	bf00      	nop
 8002e2c:	20000201 	.word	0x20000201
 8002e30:	20000215 	.word	0x20000215
 8002e34:	0800d124 	.word	0x0800d124
 8002e38:	0800d138 	.word	0x0800d138
 8002e3c:	40010800 	.word	0x40010800
 8002e40:	20000223 	.word	0x20000223
 8002e44:	20000120 	.word	0x20000120
 8002e48:	200001fa 	.word	0x200001fa
 8002e4c:	20000220 	.word	0x20000220
 8002e50:	200001f4 	.word	0x200001f4
 8002e54:	0800d4c4 	.word	0x0800d4c4
 8002e58:	0800d388 	.word	0x0800d388
 8002e5c:	0800d4d8 	.word	0x0800d4d8
 8002e60:	0800d3ac 	.word	0x0800d3ac
 8002e64:	2000020f 	.word	0x2000020f
 8002e68:	20000190 	.word	0x20000190
 8002e6c:	200001ff 	.word	0x200001ff
 8002e70:	0800d4ec 	.word	0x0800d4ec
 8002e74:	0800d500 	.word	0x0800d500
 8002e78:	20000202 	.word	0x20000202
 8002e7c:	0800d184 	.word	0x0800d184
			} else if(dilSecim == 1) {
 8002e80:	4b99      	ldr	r3, [pc, #612]	; (80030e8 <menu+0x1f58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d104      	bne.n	8002e92 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e88:	4a98      	ldr	r2, [pc, #608]	; (80030ec <menu+0x1f5c>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f004 fe1d 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e92:	2102      	movs	r1, #2
 8002e94:	4896      	ldr	r0, [pc, #600]	; (80030f0 <menu+0x1f60>)
 8002e96:	f006 f93f 	bl	8009118 <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d115      	bne.n	8002ecc <menu+0x1d3c>
 8002ea0:	4b94      	ldr	r3, [pc, #592]	; (80030f4 <menu+0x1f64>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	f083 0301 	eor.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002eae:	4b92      	ldr	r3, [pc, #584]	; (80030f8 <menu+0x1f68>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b90      	ldr	r3, [pc, #576]	; (80030f8 <menu+0x1f68>)
 8002eb8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002eba:	4b8f      	ldr	r3, [pc, #572]	; (80030f8 <menu+0x1f68>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d902      	bls.n	8002ec8 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <menu+0x1f68>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ec8:	f001 fd2e 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ecc:	2104      	movs	r1, #4
 8002ece:	4888      	ldr	r0, [pc, #544]	; (80030f0 <menu+0x1f60>)
 8002ed0:	f006 f922 	bl	8009118 <HAL_GPIO_ReadPin>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d115      	bne.n	8002f06 <menu+0x1d76>
 8002eda:	4b86      	ldr	r3, [pc, #536]	; (80030f4 <menu+0x1f64>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ee8:	4b83      	ldr	r3, [pc, #524]	; (80030f8 <menu+0x1f68>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <menu+0x1f68>)
 8002ef2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002ef4:	4b80      	ldr	r3, [pc, #512]	; (80030f8 <menu+0x1f68>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002efc:	4b7e      	ldr	r3, [pc, #504]	; (80030f8 <menu+0x1f68>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f02:	f001 fd11 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f06:	2108      	movs	r1, #8
 8002f08:	4879      	ldr	r0, [pc, #484]	; (80030f0 <menu+0x1f60>)
 8002f0a:	f006 f905 	bl	8009118 <HAL_GPIO_ReadPin>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10d      	bne.n	8002f30 <menu+0x1da0>
 8002f14:	4b77      	ldr	r3, [pc, #476]	; (80030f4 <menu+0x1f64>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f083 0301 	eor.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f22:	4b75      	ldr	r3, [pc, #468]	; (80030f8 <menu+0x1f68>)
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	4b75      	ldr	r3, [pc, #468]	; (80030fc <menu+0x1f6c>)
 8002f28:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f2a:	4b75      	ldr	r3, [pc, #468]	; (8003100 <menu+0x1f70>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f30:	4b74      	ldr	r3, [pc, #464]	; (8003104 <menu+0x1f74>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b11      	cmp	r3, #17
 8002f36:	f040 80c3 	bne.w	80030c0 <menu+0x1f30>
		if(dilSecim == 0) {
 8002f3a:	4b6b      	ldr	r3, [pc, #428]	; (80030e8 <menu+0x1f58>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f42:	4a71      	ldr	r2, [pc, #452]	; (8003108 <menu+0x1f78>)
 8002f44:	2101      	movs	r1, #1
 8002f46:	2001      	movs	r0, #1
 8002f48:	f004 fdc0 	bl	8007acc <lcd_print>
 8002f4c:	e008      	b.n	8002f60 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002f4e:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <menu+0x1f58>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d104      	bne.n	8002f60 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f56:	4a6d      	ldr	r2, [pc, #436]	; (800310c <menu+0x1f7c>)
 8002f58:	2101      	movs	r1, #1
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f004 fdb6 	bl	8007acc <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f60:	4b6b      	ldr	r3, [pc, #428]	; (8003110 <menu+0x1f80>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d113      	bne.n	8002f90 <menu+0x1e00>
			if(dilSecim == 0){
 8002f68:	4b5f      	ldr	r3, [pc, #380]	; (80030e8 <menu+0x1f58>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f70:	4a68      	ldr	r2, [pc, #416]	; (8003114 <menu+0x1f84>)
 8002f72:	2101      	movs	r1, #1
 8002f74:	2002      	movs	r0, #2
 8002f76:	f004 fda9 	bl	8007acc <lcd_print>
 8002f7a:	e038      	b.n	8002fee <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f7c:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <menu+0x1f58>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d134      	bne.n	8002fee <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f84:	4a64      	ldr	r2, [pc, #400]	; (8003118 <menu+0x1f88>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	2002      	movs	r0, #2
 8002f8a:	f004 fd9f 	bl	8007acc <lcd_print>
 8002f8e:	e02e      	b.n	8002fee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f90:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <menu+0x1f80>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d113      	bne.n	8002fc0 <menu+0x1e30>
			if(dilSecim == 0){
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <menu+0x1f58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002fa0:	4a5e      	ldr	r2, [pc, #376]	; (800311c <menu+0x1f8c>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f004 fd91 	bl	8007acc <lcd_print>
 8002faa:	e020      	b.n	8002fee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fac:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <menu+0x1f58>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d11c      	bne.n	8002fee <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <menu+0x1f90>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f004 fd87 	bl	8007acc <lcd_print>
 8002fbe:	e016      	b.n	8002fee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <menu+0x1f80>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d112      	bne.n	8002fee <menu+0x1e5e>
			if(dilSecim == 0) {
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <menu+0x1f58>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002fd0:	4a54      	ldr	r2, [pc, #336]	; (8003124 <menu+0x1f94>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f004 fd79 	bl	8007acc <lcd_print>
 8002fda:	e008      	b.n	8002fee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <menu+0x1f58>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d104      	bne.n	8002fee <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002fe4:	4a50      	ldr	r2, [pc, #320]	; (8003128 <menu+0x1f98>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f004 fd6f 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fee:	2102      	movs	r1, #2
 8002ff0:	483f      	ldr	r0, [pc, #252]	; (80030f0 <menu+0x1f60>)
 8002ff2:	f006 f891 	bl	8009118 <HAL_GPIO_ReadPin>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d115      	bne.n	8003028 <menu+0x1e98>
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <menu+0x1f64>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <menu+0x1f80>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <menu+0x1f80>)
 8003014:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <menu+0x1f80>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800301e:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <menu+0x1f80>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003024:	f001 fc80 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003028:	2104      	movs	r1, #4
 800302a:	4831      	ldr	r0, [pc, #196]	; (80030f0 <menu+0x1f60>)
 800302c:	f006 f874 	bl	8009118 <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d115      	bne.n	8003062 <menu+0x1ed2>
 8003036:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <menu+0x1f64>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <menu+0x1f80>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <menu+0x1f80>)
 800304e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <menu+0x1f80>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d902      	bls.n	800305e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <menu+0x1f80>)
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800305e:	f001 fc63 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003062:	2108      	movs	r1, #8
 8003064:	4822      	ldr	r0, [pc, #136]	; (80030f0 <menu+0x1f60>)
 8003066:	f006 f857 	bl	8009118 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d127      	bne.n	80030c0 <menu+0x1f30>
 8003070:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <menu+0x1f64>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <menu+0x1f80>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <menu+0x1f6c>)
 8003084:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <menu+0x1f80>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d003      	beq.n	8003096 <menu+0x1f06>
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <menu+0x1f80>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d106      	bne.n	80030a4 <menu+0x1f14>
				calismaSekli = 0;
 8003096:	4b25      	ldr	r3, [pc, #148]	; (800312c <menu+0x1f9c>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <menu+0x1f9c>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <menu+0x1f6c>)
 80030a2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <menu+0x1f80>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <menu+0x1fa0>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80030b2:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <menu+0x1fa0>)
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <menu+0x1f6c>)
 80030b8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <menu+0x1f70>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <menu+0x1f74>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	f040 80d5 	bne.w	8003274 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <menu+0x1f80>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d13c      	bne.n	800314c <menu+0x1fbc>
			if(dilSecim == 0) {
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <menu+0x1f58>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12e      	bne.n	8003138 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80030da:	4a16      	ldr	r2, [pc, #88]	; (8003134 <menu+0x1fa4>)
 80030dc:	2101      	movs	r1, #1
 80030de:	2001      	movs	r0, #1
 80030e0:	f004 fcf4 	bl	8007acc <lcd_print>
 80030e4:	e048      	b.n	8003178 <menu+0x1fe8>
 80030e6:	bf00      	nop
 80030e8:	20000215 	.word	0x20000215
 80030ec:	0800d198 	.word	0x0800d198
 80030f0:	40010800 	.word	0x40010800
 80030f4:	20000223 	.word	0x20000223
 80030f8:	20000202 	.word	0x20000202
 80030fc:	20000120 	.word	0x20000120
 8003100:	20000220 	.word	0x20000220
 8003104:	200001f4 	.word	0x200001f4
 8003108:	0800d514 	.word	0x0800d514
 800310c:	0800d528 	.word	0x0800d528
 8003110:	20000203 	.word	0x20000203
 8003114:	0800d53c 	.word	0x0800d53c
 8003118:	0800d54c 	.word	0x0800d54c
 800311c:	0800d55c 	.word	0x0800d55c
 8003120:	0800d56c 	.word	0x0800d56c
 8003124:	0800d124 	.word	0x0800d124
 8003128:	0800d138 	.word	0x0800d138
 800312c:	200001f5 	.word	0x200001f5
 8003130:	20000206 	.word	0x20000206
 8003134:	0800d57c 	.word	0x0800d57c
			} else if(dilSecim == 1) {
 8003138:	4b7b      	ldr	r3, [pc, #492]	; (8003328 <menu+0x2198>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d11b      	bne.n	8003178 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003140:	4a7a      	ldr	r2, [pc, #488]	; (800332c <menu+0x219c>)
 8003142:	2101      	movs	r1, #1
 8003144:	2001      	movs	r0, #1
 8003146:	f004 fcc1 	bl	8007acc <lcd_print>
 800314a:	e015      	b.n	8003178 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800314c:	4b78      	ldr	r3, [pc, #480]	; (8003330 <menu+0x21a0>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d111      	bne.n	8003178 <menu+0x1fe8>
			if(dilSecim == 0){
 8003154:	4b74      	ldr	r3, [pc, #464]	; (8003328 <menu+0x2198>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800315c:	4a75      	ldr	r2, [pc, #468]	; (8003334 <menu+0x21a4>)
 800315e:	2101      	movs	r1, #1
 8003160:	2001      	movs	r0, #1
 8003162:	f004 fcb3 	bl	8007acc <lcd_print>
			}
			if(dilSecim == 1){
 8003166:	4b70      	ldr	r3, [pc, #448]	; (8003328 <menu+0x2198>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d104      	bne.n	8003178 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800316e:	4a72      	ldr	r2, [pc, #456]	; (8003338 <menu+0x21a8>)
 8003170:	2101      	movs	r1, #1
 8003172:	2001      	movs	r0, #1
 8003174:	f004 fcaa 	bl	8007acc <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003178:	4b70      	ldr	r3, [pc, #448]	; (800333c <menu+0x21ac>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d113      	bne.n	80031a8 <menu+0x2018>
			if(dilSecim == 0) {
 8003180:	4b69      	ldr	r3, [pc, #420]	; (8003328 <menu+0x2198>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003188:	4a6d      	ldr	r2, [pc, #436]	; (8003340 <menu+0x21b0>)
 800318a:	2101      	movs	r1, #1
 800318c:	2002      	movs	r0, #2
 800318e:	f004 fc9d 	bl	8007acc <lcd_print>
 8003192:	e020      	b.n	80031d6 <menu+0x2046>
			} else if(dilSecim == 1){
 8003194:	4b64      	ldr	r3, [pc, #400]	; (8003328 <menu+0x2198>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d11c      	bne.n	80031d6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800319c:	4a69      	ldr	r2, [pc, #420]	; (8003344 <menu+0x21b4>)
 800319e:	2101      	movs	r1, #1
 80031a0:	2002      	movs	r0, #2
 80031a2:	f004 fc93 	bl	8007acc <lcd_print>
 80031a6:	e016      	b.n	80031d6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <menu+0x21ac>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d112      	bne.n	80031d6 <menu+0x2046>
			if(dilSecim == 0){
 80031b0:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <menu+0x2198>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80031b8:	4a63      	ldr	r2, [pc, #396]	; (8003348 <menu+0x21b8>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	2002      	movs	r0, #2
 80031be:	f004 fc85 	bl	8007acc <lcd_print>
 80031c2:	e008      	b.n	80031d6 <menu+0x2046>
			} else if(dilSecim == 1){
 80031c4:	4b58      	ldr	r3, [pc, #352]	; (8003328 <menu+0x2198>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d104      	bne.n	80031d6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80031cc:	4a5f      	ldr	r2, [pc, #380]	; (800334c <menu+0x21bc>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	2002      	movs	r0, #2
 80031d2:	f004 fc7b 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d6:	2102      	movs	r1, #2
 80031d8:	485d      	ldr	r0, [pc, #372]	; (8003350 <menu+0x21c0>)
 80031da:	f005 ff9d 	bl	8009118 <HAL_GPIO_ReadPin>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d115      	bne.n	8003210 <menu+0x2080>
 80031e4:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <menu+0x21c4>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f083 0301 	eor.w	r3, r3, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80031f2:	4b52      	ldr	r3, [pc, #328]	; (800333c <menu+0x21ac>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b50      	ldr	r3, [pc, #320]	; (800333c <menu+0x21ac>)
 80031fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80031fe:	4b4f      	ldr	r3, [pc, #316]	; (800333c <menu+0x21ac>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d902      	bls.n	800320c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003206:	4b4d      	ldr	r3, [pc, #308]	; (800333c <menu+0x21ac>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800320c:	f001 fb8c 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003210:	2104      	movs	r1, #4
 8003212:	484f      	ldr	r0, [pc, #316]	; (8003350 <menu+0x21c0>)
 8003214:	f005 ff80 	bl	8009118 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d115      	bne.n	800324a <menu+0x20ba>
 800321e:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <menu+0x21c4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <menu+0x21ac>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3b01      	subs	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <menu+0x21ac>)
 8003236:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <menu+0x21ac>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003240:	4b3e      	ldr	r3, [pc, #248]	; (800333c <menu+0x21ac>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003246:	f001 fb6f 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800324a:	2108      	movs	r1, #8
 800324c:	4840      	ldr	r0, [pc, #256]	; (8003350 <menu+0x21c0>)
 800324e:	f005 ff63 	bl	8009118 <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10d      	bne.n	8003274 <menu+0x20e4>
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <menu+0x21c4>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <menu+0x21ac>)
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <menu+0x21c8>)
 800326c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800326e:	4b3b      	ldr	r3, [pc, #236]	; (800335c <menu+0x21cc>)
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <menu+0x21d0>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b13      	cmp	r3, #19
 800327a:	f040 80d5 	bne.w	8003428 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <menu+0x21a0>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d113      	bne.n	80032ae <menu+0x211e>
			if(dilSecim == 0) {
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <menu+0x2198>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800328e:	4a35      	ldr	r2, [pc, #212]	; (8003364 <menu+0x21d4>)
 8003290:	2101      	movs	r1, #1
 8003292:	2001      	movs	r0, #1
 8003294:	f004 fc1a 	bl	8007acc <lcd_print>
 8003298:	e01f      	b.n	80032da <menu+0x214a>
			} else if(dilSecim == 1) {
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <menu+0x2198>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d11b      	bne.n	80032da <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80032a2:	4a31      	ldr	r2, [pc, #196]	; (8003368 <menu+0x21d8>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	2001      	movs	r0, #1
 80032a8:	f004 fc10 	bl	8007acc <lcd_print>
 80032ac:	e015      	b.n	80032da <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <menu+0x21a0>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d111      	bne.n	80032da <menu+0x214a>
			if(dilSecim == 0) {
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <menu+0x2198>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80032be:	4a2b      	ldr	r2, [pc, #172]	; (800336c <menu+0x21dc>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	2001      	movs	r0, #1
 80032c4:	f004 fc02 	bl	8007acc <lcd_print>
			}
			if(dilSecim == 1) {
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <menu+0x2198>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d104      	bne.n	80032da <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <menu+0x21e0>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2001      	movs	r0, #1
 80032d6:	f004 fbf9 	bl	8007acc <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <menu+0x21e4>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d113      	bne.n	800330a <menu+0x217a>
			if(dilSecim == 0) {
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <menu+0x2198>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <menu+0x21b0>)
 80032ec:	2101      	movs	r1, #1
 80032ee:	2002      	movs	r0, #2
 80032f0:	f004 fbec 	bl	8007acc <lcd_print>
 80032f4:	e049      	b.n	800338a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <menu+0x2198>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d145      	bne.n	800338a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <menu+0x21b4>)
 8003300:	2101      	movs	r1, #1
 8003302:	2002      	movs	r0, #2
 8003304:	f004 fbe2 	bl	8007acc <lcd_print>
 8003308:	e03f      	b.n	800338a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <menu+0x21e4>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d13b      	bne.n	800338a <menu+0x21fa>
			if(dilSecim == 0) {
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <menu+0x2198>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d12e      	bne.n	8003378 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800331a:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <menu+0x21b8>)
 800331c:	2101      	movs	r1, #1
 800331e:	2002      	movs	r0, #2
 8003320:	f004 fbd4 	bl	8007acc <lcd_print>
 8003324:	e031      	b.n	800338a <menu+0x21fa>
 8003326:	bf00      	nop
 8003328:	20000215 	.word	0x20000215
 800332c:	0800d590 	.word	0x0800d590
 8003330:	20000203 	.word	0x20000203
 8003334:	0800d5a0 	.word	0x0800d5a0
 8003338:	0800d5b4 	.word	0x0800d5b4
 800333c:	20000204 	.word	0x20000204
 8003340:	0800d124 	.word	0x0800d124
 8003344:	0800d138 	.word	0x0800d138
 8003348:	0800d184 	.word	0x0800d184
 800334c:	0800d198 	.word	0x0800d198
 8003350:	40010800 	.word	0x40010800
 8003354:	20000223 	.word	0x20000223
 8003358:	20000120 	.word	0x20000120
 800335c:	20000220 	.word	0x20000220
 8003360:	200001f4 	.word	0x200001f4
 8003364:	0800d5c8 	.word	0x0800d5c8
 8003368:	0800d5dc 	.word	0x0800d5dc
 800336c:	0800d5f0 	.word	0x0800d5f0
 8003370:	0800d604 	.word	0x0800d604
 8003374:	20000205 	.word	0x20000205
			} else if(dilSecim == 1) {
 8003378:	4b90      	ldr	r3, [pc, #576]	; (80035bc <menu+0x242c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d104      	bne.n	800338a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003380:	4a8f      	ldr	r2, [pc, #572]	; (80035c0 <menu+0x2430>)
 8003382:	2101      	movs	r1, #1
 8003384:	2002      	movs	r0, #2
 8003386:	f004 fba1 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800338a:	2102      	movs	r1, #2
 800338c:	488d      	ldr	r0, [pc, #564]	; (80035c4 <menu+0x2434>)
 800338e:	f005 fec3 	bl	8009118 <HAL_GPIO_ReadPin>
 8003392:	4603      	mov	r3, r0
 8003394:	2b01      	cmp	r3, #1
 8003396:	d115      	bne.n	80033c4 <menu+0x2234>
 8003398:	4b8b      	ldr	r3, [pc, #556]	; (80035c8 <menu+0x2438>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f083 0301 	eor.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80033a6:	4b89      	ldr	r3, [pc, #548]	; (80035cc <menu+0x243c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b87      	ldr	r3, [pc, #540]	; (80035cc <menu+0x243c>)
 80033b0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80033b2:	4b86      	ldr	r3, [pc, #536]	; (80035cc <menu+0x243c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d902      	bls.n	80033c0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80033ba:	4b84      	ldr	r3, [pc, #528]	; (80035cc <menu+0x243c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033c0:	f001 fab2 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c4:	2104      	movs	r1, #4
 80033c6:	487f      	ldr	r0, [pc, #508]	; (80035c4 <menu+0x2434>)
 80033c8:	f005 fea6 	bl	8009118 <HAL_GPIO_ReadPin>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d115      	bne.n	80033fe <menu+0x226e>
 80033d2:	4b7d      	ldr	r3, [pc, #500]	; (80035c8 <menu+0x2438>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f083 0301 	eor.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80033e0:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <menu+0x243c>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b78      	ldr	r3, [pc, #480]	; (80035cc <menu+0x243c>)
 80033ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80033ec:	4b77      	ldr	r3, [pc, #476]	; (80035cc <menu+0x243c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80033f4:	4b75      	ldr	r3, [pc, #468]	; (80035cc <menu+0x243c>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033fa:	f001 fa95 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fe:	2108      	movs	r1, #8
 8003400:	4870      	ldr	r0, [pc, #448]	; (80035c4 <menu+0x2434>)
 8003402:	f005 fe89 	bl	8009118 <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10d      	bne.n	8003428 <menu+0x2298>
 800340c:	4b6e      	ldr	r3, [pc, #440]	; (80035c8 <menu+0x2438>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <menu+0x243c>)
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <menu+0x2440>)
 8003420:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003422:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <menu+0x2444>)
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003428:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <menu+0x2448>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b14      	cmp	r3, #20
 800342e:	f040 80b5 	bne.w	800359c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <menu+0x244c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d113      	bne.n	8003462 <menu+0x22d2>
			if(dilSecim == 0) {
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <menu+0x242c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003442:	4a67      	ldr	r2, [pc, #412]	; (80035e0 <menu+0x2450>)
 8003444:	2101      	movs	r1, #1
 8003446:	2001      	movs	r0, #1
 8003448:	f004 fb40 	bl	8007acc <lcd_print>
 800344c:	e020      	b.n	8003490 <menu+0x2300>
			} else if(dilSecim == 1) {
 800344e:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <menu+0x242c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d11c      	bne.n	8003490 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003456:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <menu+0x2454>)
 8003458:	2101      	movs	r1, #1
 800345a:	2001      	movs	r0, #1
 800345c:	f004 fb36 	bl	8007acc <lcd_print>
 8003460:	e016      	b.n	8003490 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003462:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <menu+0x244c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d112      	bne.n	8003490 <menu+0x2300>
			if(dilSecim == 0) {
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <menu+0x242c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003472:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <menu+0x2458>)
 8003474:	2101      	movs	r1, #1
 8003476:	2001      	movs	r0, #1
 8003478:	f004 fb28 	bl	8007acc <lcd_print>
 800347c:	e008      	b.n	8003490 <menu+0x2300>
			} else if(dilSecim == 1) {
 800347e:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <menu+0x242c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d104      	bne.n	8003490 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003486:	4a59      	ldr	r2, [pc, #356]	; (80035ec <menu+0x245c>)
 8003488:	2101      	movs	r1, #1
 800348a:	2001      	movs	r0, #1
 800348c:	f004 fb1e 	bl	8007acc <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <menu+0x2460>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d113      	bne.n	80034c0 <menu+0x2330>
			if(dilSecim == 0) {
 8003498:	4b48      	ldr	r3, [pc, #288]	; (80035bc <menu+0x242c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80034a0:	4a54      	ldr	r2, [pc, #336]	; (80035f4 <menu+0x2464>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	2002      	movs	r0, #2
 80034a6:	f004 fb11 	bl	8007acc <lcd_print>
 80034aa:	e020      	b.n	80034ee <menu+0x235e>
			} else if(dilSecim == 1) {
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <menu+0x242c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d11c      	bne.n	80034ee <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80034b4:	4a50      	ldr	r2, [pc, #320]	; (80035f8 <menu+0x2468>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f004 fb07 	bl	8007acc <lcd_print>
 80034be:	e016      	b.n	80034ee <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <menu+0x2460>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d112      	bne.n	80034ee <menu+0x235e>
			if(dilSecim == 0) {
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <menu+0x242c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <menu+0x246c>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	2002      	movs	r0, #2
 80034d6:	f004 faf9 	bl	8007acc <lcd_print>
 80034da:	e008      	b.n	80034ee <menu+0x235e>
			} else if(dilSecim == 1) {
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <menu+0x242c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d104      	bne.n	80034ee <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80034e4:	4a46      	ldr	r2, [pc, #280]	; (8003600 <menu+0x2470>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f004 faef 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034ee:	2102      	movs	r1, #2
 80034f0:	4834      	ldr	r0, [pc, #208]	; (80035c4 <menu+0x2434>)
 80034f2:	f005 fe11 	bl	8009118 <HAL_GPIO_ReadPin>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d119      	bne.n	8003530 <menu+0x23a0>
 80034fc:	4b32      	ldr	r3, [pc, #200]	; (80035c8 <menu+0x2438>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f083 0301 	eor.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <menu+0x23a0>
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <menu+0x244c>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d10e      	bne.n	8003530 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <menu+0x2460>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <menu+0x2460>)
 800351c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800351e:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <menu+0x2460>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d902      	bls.n	800352c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <menu+0x2460>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800352c:	f001 f9fc 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003530:	2104      	movs	r1, #4
 8003532:	4824      	ldr	r0, [pc, #144]	; (80035c4 <menu+0x2434>)
 8003534:	f005 fdf0 	bl	8009118 <HAL_GPIO_ReadPin>
 8003538:	4603      	mov	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d119      	bne.n	8003572 <menu+0x23e2>
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <menu+0x2438>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	f083 0301 	eor.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <menu+0x23e2>
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <menu+0x244c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d10e      	bne.n	8003572 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003554:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <menu+0x2460>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <menu+0x2460>)
 800355e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003560:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <menu+0x2460>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <menu+0x2460>)
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800356e:	f001 f9db 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003572:	2108      	movs	r1, #8
 8003574:	4813      	ldr	r0, [pc, #76]	; (80035c4 <menu+0x2434>)
 8003576:	f005 fdcf 	bl	8009118 <HAL_GPIO_ReadPin>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10d      	bne.n	800359c <menu+0x240c>
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <menu+0x2438>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800358e:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <menu+0x2460>)
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <menu+0x2440>)
 8003594:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <menu+0x2444>)
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <menu+0x2448>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b15      	cmp	r3, #21
 80035a2:	f040 80c2 	bne.w	800372a <menu+0x259a>
		if(dilSecim == 0) {
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <menu+0x242c>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d12c      	bne.n	8003608 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <menu+0x2474>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	2001      	movs	r0, #1
 80035b4:	f004 fa8a 	bl	8007acc <lcd_print>
 80035b8:	e02f      	b.n	800361a <menu+0x248a>
 80035ba:	bf00      	nop
 80035bc:	20000215 	.word	0x20000215
 80035c0:	0800d198 	.word	0x0800d198
 80035c4:	40010800 	.word	0x40010800
 80035c8:	20000223 	.word	0x20000223
 80035cc:	20000205 	.word	0x20000205
 80035d0:	20000120 	.word	0x20000120
 80035d4:	20000220 	.word	0x20000220
 80035d8:	200001f4 	.word	0x200001f4
 80035dc:	20000203 	.word	0x20000203
 80035e0:	0800d618 	.word	0x0800d618
 80035e4:	0800d62c 	.word	0x0800d62c
 80035e8:	0800d640 	.word	0x0800d640
 80035ec:	0800d654 	.word	0x0800d654
 80035f0:	20000206 	.word	0x20000206
 80035f4:	0800d668 	.word	0x0800d668
 80035f8:	0800d67c 	.word	0x0800d67c
 80035fc:	0800d68c 	.word	0x0800d68c
 8003600:	0800d6a0 	.word	0x0800d6a0
 8003604:	0800d6b0 	.word	0x0800d6b0
		} else if(dilSecim == 1) {
 8003608:	4b9c      	ldr	r3, [pc, #624]	; (800387c <menu+0x26ec>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d104      	bne.n	800361a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003610:	4a9b      	ldr	r2, [pc, #620]	; (8003880 <menu+0x26f0>)
 8003612:	2101      	movs	r1, #1
 8003614:	2001      	movs	r0, #1
 8003616:	f004 fa59 	bl	8007acc <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800361a:	4b9a      	ldr	r3, [pc, #616]	; (8003884 <menu+0x26f4>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d112      	bne.n	8003648 <menu+0x24b8>
			if(dilSecim == 0) {
 8003622:	4b96      	ldr	r3, [pc, #600]	; (800387c <menu+0x26ec>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800362a:	4a97      	ldr	r2, [pc, #604]	; (8003888 <menu+0x26f8>)
 800362c:	2101      	movs	r1, #1
 800362e:	2002      	movs	r0, #2
 8003630:	f004 fa4c 	bl	8007acc <lcd_print>
			}
			if(dilSecim == 1) {
 8003634:	4b91      	ldr	r3, [pc, #580]	; (800387c <menu+0x26ec>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d11c      	bne.n	8003676 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800363c:	4a93      	ldr	r2, [pc, #588]	; (800388c <menu+0x26fc>)
 800363e:	2101      	movs	r1, #1
 8003640:	2002      	movs	r0, #2
 8003642:	f004 fa43 	bl	8007acc <lcd_print>
 8003646:	e016      	b.n	8003676 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003648:	4b8e      	ldr	r3, [pc, #568]	; (8003884 <menu+0x26f4>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d112      	bne.n	8003676 <menu+0x24e6>
			if(dilSecim == 0) {
 8003650:	4b8a      	ldr	r3, [pc, #552]	; (800387c <menu+0x26ec>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003658:	4a8d      	ldr	r2, [pc, #564]	; (8003890 <menu+0x2700>)
 800365a:	2101      	movs	r1, #1
 800365c:	2002      	movs	r0, #2
 800365e:	f004 fa35 	bl	8007acc <lcd_print>
 8003662:	e008      	b.n	8003676 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003664:	4b85      	ldr	r3, [pc, #532]	; (800387c <menu+0x26ec>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d104      	bne.n	8003676 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800366c:	4a89      	ldr	r2, [pc, #548]	; (8003894 <menu+0x2704>)
 800366e:	2101      	movs	r1, #1
 8003670:	2002      	movs	r0, #2
 8003672:	f004 fa2b 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003676:	2102      	movs	r1, #2
 8003678:	4887      	ldr	r0, [pc, #540]	; (8003898 <menu+0x2708>)
 800367a:	f005 fd4d 	bl	8009118 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <menu+0x2520>
 8003684:	4b85      	ldr	r3, [pc, #532]	; (800389c <menu+0x270c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003692:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <menu+0x26f4>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b7a      	ldr	r3, [pc, #488]	; (8003884 <menu+0x26f4>)
 800369c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800369e:	4b79      	ldr	r3, [pc, #484]	; (8003884 <menu+0x26f4>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d902      	bls.n	80036ac <menu+0x251c>
				platformSilindirTipi = 0;
 80036a6:	4b77      	ldr	r3, [pc, #476]	; (8003884 <menu+0x26f4>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ac:	f001 f93c 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b0:	2104      	movs	r1, #4
 80036b2:	4879      	ldr	r0, [pc, #484]	; (8003898 <menu+0x2708>)
 80036b4:	f005 fd30 	bl	8009118 <HAL_GPIO_ReadPin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d115      	bne.n	80036ea <menu+0x255a>
 80036be:	4b77      	ldr	r3, [pc, #476]	; (800389c <menu+0x270c>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80036cc:	4b6d      	ldr	r3, [pc, #436]	; (8003884 <menu+0x26f4>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b6b      	ldr	r3, [pc, #428]	; (8003884 <menu+0x26f4>)
 80036d6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80036d8:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <menu+0x26f4>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80036e0:	4b68      	ldr	r3, [pc, #416]	; (8003884 <menu+0x26f4>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036e6:	f001 f91f 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ea:	2108      	movs	r1, #8
 80036ec:	486a      	ldr	r0, [pc, #424]	; (8003898 <menu+0x2708>)
 80036ee:	f005 fd13 	bl	8009118 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d118      	bne.n	800372a <menu+0x259a>
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <menu+0x270c>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <menu+0x26f4>)
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <menu+0x2710>)
 800370c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800370e:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <menu+0x26f4>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <menu+0x2594>
				altLimit = 1;
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <menu+0x2714>)
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800371c:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <menu+0x2714>)
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <menu+0x2710>)
 8003722:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003724:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <menu+0x2718>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800372a:	4b60      	ldr	r3, [pc, #384]	; (80038ac <menu+0x271c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b16      	cmp	r3, #22
 8003730:	f040 8081 	bne.w	8003836 <menu+0x26a6>
		if(dilSecim == 0) {
 8003734:	4b51      	ldr	r3, [pc, #324]	; (800387c <menu+0x26ec>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 800373c:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <menu+0x2720>)
 800373e:	2101      	movs	r1, #1
 8003740:	2001      	movs	r0, #1
 8003742:	f004 f9c3 	bl	8007acc <lcd_print>
 8003746:	e008      	b.n	800375a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003748:	4b4c      	ldr	r3, [pc, #304]	; (800387c <menu+0x26ec>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d104      	bne.n	800375a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <menu+0x2724>)
 8003752:	2101      	movs	r1, #1
 8003754:	2001      	movs	r0, #1
 8003756:	f004 f9b9 	bl	8007acc <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800375a:	4b48      	ldr	r3, [pc, #288]	; (800387c <menu+0x26ec>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003762:	4a55      	ldr	r2, [pc, #340]	; (80038b8 <menu+0x2728>)
 8003764:	2101      	movs	r1, #1
 8003766:	2002      	movs	r0, #2
 8003768:	f004 f9b0 	bl	8007acc <lcd_print>
 800376c:	e008      	b.n	8003780 <menu+0x25f0>
			} else if(dilSecim == 1){
 800376e:	4b43      	ldr	r3, [pc, #268]	; (800387c <menu+0x26ec>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d104      	bne.n	8003780 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003776:	4a51      	ldr	r2, [pc, #324]	; (80038bc <menu+0x272c>)
 8003778:	2101      	movs	r1, #1
 800377a:	2002      	movs	r0, #2
 800377c:	f004 f9a6 	bl	8007acc <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003780:	4b4f      	ldr	r3, [pc, #316]	; (80038c0 <menu+0x2730>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	220a      	movs	r2, #10
 8003786:	494f      	ldr	r1, [pc, #316]	; (80038c4 <menu+0x2734>)
 8003788:	4618      	mov	r0, r3
 800378a:	f008 fcf1 	bl	800c170 <itoa>
		lcd_print(2,16,snum);
 800378e:	4a4d      	ldr	r2, [pc, #308]	; (80038c4 <menu+0x2734>)
 8003790:	2110      	movs	r1, #16
 8003792:	2002      	movs	r0, #2
 8003794:	f004 f99a 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003798:	2102      	movs	r1, #2
 800379a:	483f      	ldr	r0, [pc, #252]	; (8003898 <menu+0x2708>)
 800379c:	f005 fcbc 	bl	8009118 <HAL_GPIO_ReadPin>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d115      	bne.n	80037d2 <menu+0x2642>
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <menu+0x270c>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80037b4:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <menu+0x2730>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <menu+0x2730>)
 80037be:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80037c0:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <menu+0x2730>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d902      	bls.n	80037ce <menu+0x263e>
				yukariValfTmr = 0;
 80037c8:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <menu+0x2730>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037ce:	f001 f8ab 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d2:	2104      	movs	r1, #4
 80037d4:	4830      	ldr	r0, [pc, #192]	; (8003898 <menu+0x2708>)
 80037d6:	f005 fc9f 	bl	8009118 <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d115      	bne.n	800380c <menu+0x267c>
 80037e0:	4b2e      	ldr	r3, [pc, #184]	; (800389c <menu+0x270c>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <menu+0x2730>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <menu+0x2730>)
 80037f8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <menu+0x2730>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b06      	cmp	r3, #6
 8003800:	d902      	bls.n	8003808 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003802:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <menu+0x2730>)
 8003804:	2205      	movs	r2, #5
 8003806:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003808:	f001 f88e 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800380c:	2108      	movs	r1, #8
 800380e:	4822      	ldr	r0, [pc, #136]	; (8003898 <menu+0x2708>)
 8003810:	f005 fc82 	bl	8009118 <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10d      	bne.n	8003836 <menu+0x26a6>
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <menu+0x270c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <menu+0x2730>)
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <menu+0x2710>)
 800382e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <menu+0x2718>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <menu+0x271c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b17      	cmp	r3, #23
 800383c:	f040 80ac 	bne.w	8003998 <menu+0x2808>
		if(dilSecim == 0) {
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <menu+0x26ec>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <menu+0x2738>)
 800384a:	2101      	movs	r1, #1
 800384c:	2001      	movs	r0, #1
 800384e:	f004 f93d 	bl	8007acc <lcd_print>
 8003852:	e008      	b.n	8003866 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d104      	bne.n	8003866 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <menu+0x273c>)
 800385e:	2101      	movs	r1, #1
 8003860:	2001      	movs	r0, #1
 8003862:	f004 f933 	bl	8007acc <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <menu+0x26ec>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d130      	bne.n	80038d0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <menu+0x2728>)
 8003870:	2101      	movs	r1, #1
 8003872:	2002      	movs	r0, #2
 8003874:	f004 f92a 	bl	8007acc <lcd_print>
 8003878:	e033      	b.n	80038e2 <menu+0x2752>
 800387a:	bf00      	nop
 800387c:	20000215 	.word	0x20000215
 8003880:	0800d6c4 	.word	0x0800d6c4
 8003884:	20000207 	.word	0x20000207
 8003888:	0800d668 	.word	0x0800d668
 800388c:	0800d67c 	.word	0x0800d67c
 8003890:	0800d68c 	.word	0x0800d68c
 8003894:	0800d6a0 	.word	0x0800d6a0
 8003898:	40010800 	.word	0x40010800
 800389c:	20000223 	.word	0x20000223
 80038a0:	20000120 	.word	0x20000120
 80038a4:	200001fa 	.word	0x200001fa
 80038a8:	20000220 	.word	0x20000220
 80038ac:	200001f4 	.word	0x200001f4
 80038b0:	0800d6d4 	.word	0x0800d6d4
 80038b4:	0800d6e8 	.word	0x0800d6e8
 80038b8:	0800d388 	.word	0x0800d388
 80038bc:	0800d6fc 	.word	0x0800d6fc
 80038c0:	20000208 	.word	0x20000208
 80038c4:	20000190 	.word	0x20000190
 80038c8:	0800d70c 	.word	0x0800d70c
 80038cc:	0800d720 	.word	0x0800d720
			} else if(dilSecim == 1) {
 80038d0:	4b98      	ldr	r3, [pc, #608]	; (8003b34 <menu+0x29a4>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d104      	bne.n	80038e2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80038d8:	4a97      	ldr	r2, [pc, #604]	; (8003b38 <menu+0x29a8>)
 80038da:	2101      	movs	r1, #1
 80038dc:	2002      	movs	r0, #2
 80038de:	f004 f8f5 	bl	8007acc <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80038e2:	4b96      	ldr	r3, [pc, #600]	; (8003b3c <menu+0x29ac>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	220a      	movs	r2, #10
 80038e8:	4995      	ldr	r1, [pc, #596]	; (8003b40 <menu+0x29b0>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f008 fc40 	bl	800c170 <itoa>
		lcd_print(2,16,snum);
 80038f0:	4a93      	ldr	r2, [pc, #588]	; (8003b40 <menu+0x29b0>)
 80038f2:	2110      	movs	r1, #16
 80038f4:	2002      	movs	r0, #2
 80038f6:	f004 f8e9 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fa:	2102      	movs	r1, #2
 80038fc:	4891      	ldr	r0, [pc, #580]	; (8003b44 <menu+0x29b4>)
 80038fe:	f005 fc0b 	bl	8009118 <HAL_GPIO_ReadPin>
 8003902:	4603      	mov	r3, r0
 8003904:	2b01      	cmp	r3, #1
 8003906:	d115      	bne.n	8003934 <menu+0x27a4>
 8003908:	4b8f      	ldr	r3, [pc, #572]	; (8003b48 <menu+0x29b8>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	f083 0301 	eor.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003916:	4b89      	ldr	r3, [pc, #548]	; (8003b3c <menu+0x29ac>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b87      	ldr	r3, [pc, #540]	; (8003b3c <menu+0x29ac>)
 8003920:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003922:	4b86      	ldr	r3, [pc, #536]	; (8003b3c <menu+0x29ac>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d902      	bls.n	8003930 <menu+0x27a0>
				asagiValfTmr = 0;
 800392a:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <menu+0x29ac>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003930:	f000 fffa 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003934:	2104      	movs	r1, #4
 8003936:	4883      	ldr	r0, [pc, #524]	; (8003b44 <menu+0x29b4>)
 8003938:	f005 fbee 	bl	8009118 <HAL_GPIO_ReadPin>
 800393c:	4603      	mov	r3, r0
 800393e:	2b01      	cmp	r3, #1
 8003940:	d115      	bne.n	800396e <menu+0x27de>
 8003942:	4b81      	ldr	r3, [pc, #516]	; (8003b48 <menu+0x29b8>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00e      	beq.n	800396e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003950:	4b7a      	ldr	r3, [pc, #488]	; (8003b3c <menu+0x29ac>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	3b01      	subs	r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	4b78      	ldr	r3, [pc, #480]	; (8003b3c <menu+0x29ac>)
 800395a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800395c:	4b77      	ldr	r3, [pc, #476]	; (8003b3c <menu+0x29ac>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b06      	cmp	r3, #6
 8003962:	d902      	bls.n	800396a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003964:	4b75      	ldr	r3, [pc, #468]	; (8003b3c <menu+0x29ac>)
 8003966:	2205      	movs	r2, #5
 8003968:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800396a:	f000 ffdd 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800396e:	2108      	movs	r1, #8
 8003970:	4874      	ldr	r0, [pc, #464]	; (8003b44 <menu+0x29b4>)
 8003972:	f005 fbd1 	bl	8009118 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10d      	bne.n	8003998 <menu+0x2808>
 800397c:	4b72      	ldr	r3, [pc, #456]	; (8003b48 <menu+0x29b8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800398a:	4b6c      	ldr	r3, [pc, #432]	; (8003b3c <menu+0x29ac>)
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <menu+0x29bc>)
 8003990:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003992:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <menu+0x29c0>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003998:	4b6e      	ldr	r3, [pc, #440]	; (8003b54 <menu+0x29c4>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b18      	cmp	r3, #24
 800399e:	f040 809d 	bne.w	8003adc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80039a2:	4b6d      	ldr	r3, [pc, #436]	; (8003b58 <menu+0x29c8>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d113      	bne.n	80039d2 <menu+0x2842>
			if(dilSecim == 0) {
 80039aa:	4b62      	ldr	r3, [pc, #392]	; (8003b34 <menu+0x29a4>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80039b2:	4a6a      	ldr	r2, [pc, #424]	; (8003b5c <menu+0x29cc>)
 80039b4:	2101      	movs	r1, #1
 80039b6:	2001      	movs	r0, #1
 80039b8:	f004 f888 	bl	8007acc <lcd_print>
 80039bc:	e020      	b.n	8003a00 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <menu+0x29a4>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d11c      	bne.n	8003a00 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80039c6:	4a66      	ldr	r2, [pc, #408]	; (8003b60 <menu+0x29d0>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2001      	movs	r0, #1
 80039cc:	f004 f87e 	bl	8007acc <lcd_print>
 80039d0:	e016      	b.n	8003a00 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <menu+0x29c8>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d112      	bne.n	8003a00 <menu+0x2870>
			if(dilSecim == 0) {
 80039da:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <menu+0x29a4>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80039e2:	4a60      	ldr	r2, [pc, #384]	; (8003b64 <menu+0x29d4>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	2001      	movs	r0, #1
 80039e8:	f004 f870 	bl	8007acc <lcd_print>
 80039ec:	e008      	b.n	8003a00 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <menu+0x29a4>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d104      	bne.n	8003a00 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <menu+0x29d8>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	2001      	movs	r0, #1
 80039fc:	f004 f866 	bl	8007acc <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a00:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <menu+0x29a4>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <menu+0x29dc>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	f004 f85d 	bl	8007acc <lcd_print>
 8003a12:	e008      	b.n	8003a26 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a14:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <menu+0x29a4>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d104      	bne.n	8003a26 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a1c:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <menu+0x29a8>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	2002      	movs	r0, #2
 8003a22:	f004 f853 	bl	8007acc <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a26:	4b52      	ldr	r3, [pc, #328]	; (8003b70 <menu+0x29e0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	220a      	movs	r2, #10
 8003a2c:	4944      	ldr	r1, [pc, #272]	; (8003b40 <menu+0x29b0>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f008 fb9e 	bl	800c170 <itoa>
		lcd_print(2, 16, snum);
 8003a34:	4a42      	ldr	r2, [pc, #264]	; (8003b40 <menu+0x29b0>)
 8003a36:	2110      	movs	r1, #16
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f004 f847 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4840      	ldr	r0, [pc, #256]	; (8003b44 <menu+0x29b4>)
 8003a42:	f005 fb69 	bl	8009118 <HAL_GPIO_ReadPin>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d115      	bne.n	8003a78 <menu+0x28e8>
 8003a4c:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <menu+0x29b8>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	f083 0301 	eor.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00e      	beq.n	8003a78 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a5a:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <menu+0x29e0>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <menu+0x29e0>)
 8003a64:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a66:	4b42      	ldr	r3, [pc, #264]	; (8003b70 <menu+0x29e0>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d902      	bls.n	8003a74 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a6e:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <menu+0x29e0>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a74:	f000 ff58 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a78:	2104      	movs	r1, #4
 8003a7a:	4832      	ldr	r0, [pc, #200]	; (8003b44 <menu+0x29b4>)
 8003a7c:	f005 fb4c 	bl	8009118 <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d115      	bne.n	8003ab2 <menu+0x2922>
 8003a86:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <menu+0x29b8>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <menu+0x29e0>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <menu+0x29e0>)
 8003a9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003aa0:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <menu+0x29e0>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d902      	bls.n	8003aae <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003aa8:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <menu+0x29e0>)
 8003aaa:	2205      	movs	r2, #5
 8003aac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003aae:	f000 ff3b 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab2:	2108      	movs	r1, #8
 8003ab4:	4823      	ldr	r0, [pc, #140]	; (8003b44 <menu+0x29b4>)
 8003ab6:	f005 fb2f 	bl	8009118 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10d      	bne.n	8003adc <menu+0x294c>
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <menu+0x29b8>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f083 0301 	eor.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <menu+0x29e0>)
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <menu+0x29bc>)
 8003ad4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <menu+0x29c0>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <menu+0x29c4>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b19      	cmp	r3, #25
 8003ae2:	f040 80c4 	bne.w	8003c6e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <menu+0x29c8>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d113      	bne.n	8003b16 <menu+0x2986>
			if(dilSecim == 0) {
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <menu+0x29a4>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <menu+0x29e4>)
 8003af8:	2101      	movs	r1, #1
 8003afa:	2001      	movs	r0, #1
 8003afc:	f003 ffe6 	bl	8007acc <lcd_print>
 8003b00:	e047      	b.n	8003b92 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <menu+0x29a4>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d143      	bne.n	8003b92 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <menu+0x29e8>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f003 ffdc 	bl	8007acc <lcd_print>
 8003b14:	e03d      	b.n	8003b92 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <menu+0x29c8>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d139      	bne.n	8003b92 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <menu+0x29a4>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d12c      	bne.n	8003b80 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <menu+0x29ec>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f003 ffce 	bl	8007acc <lcd_print>
 8003b30:	e02f      	b.n	8003b92 <menu+0x2a02>
 8003b32:	bf00      	nop
 8003b34:	20000215 	.word	0x20000215
 8003b38:	0800d6fc 	.word	0x0800d6fc
 8003b3c:	20000209 	.word	0x20000209
 8003b40:	20000190 	.word	0x20000190
 8003b44:	40010800 	.word	0x40010800
 8003b48:	20000223 	.word	0x20000223
 8003b4c:	20000120 	.word	0x20000120
 8003b50:	20000220 	.word	0x20000220
 8003b54:	200001f4 	.word	0x200001f4
 8003b58:	20000203 	.word	0x20000203
 8003b5c:	0800d734 	.word	0x0800d734
 8003b60:	0800d748 	.word	0x0800d748
 8003b64:	0800d75c 	.word	0x0800d75c
 8003b68:	0800d770 	.word	0x0800d770
 8003b6c:	0800d388 	.word	0x0800d388
 8003b70:	2000020a 	.word	0x2000020a
 8003b74:	0800d784 	.word	0x0800d784
 8003b78:	0800d798 	.word	0x0800d798
 8003b7c:	0800d7ac 	.word	0x0800d7ac
			} else if(dilSecim == 1) {
 8003b80:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <menu+0x2bc0>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d104      	bne.n	8003b92 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b88:	4a72      	ldr	r2, [pc, #456]	; (8003d54 <menu+0x2bc4>)
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f003 ff9d 	bl	8007acc <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003b92:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <menu+0x2bc0>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b9a:	4a6f      	ldr	r2, [pc, #444]	; (8003d58 <menu+0x2bc8>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	2002      	movs	r0, #2
 8003ba0:	f003 ff94 	bl	8007acc <lcd_print>
 8003ba4:	e008      	b.n	8003bb8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <menu+0x2bc0>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d104      	bne.n	8003bb8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003bae:	4a6b      	ldr	r2, [pc, #428]	; (8003d5c <menu+0x2bcc>)
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f003 ff8a 	bl	8007acc <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003bb8:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <menu+0x2bd0>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	4969      	ldr	r1, [pc, #420]	; (8003d64 <menu+0x2bd4>)
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f008 fad5 	bl	800c170 <itoa>
		lcd_print(2,16,snum);
 8003bc6:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <menu+0x2bd4>)
 8003bc8:	2110      	movs	r1, #16
 8003bca:	2002      	movs	r0, #2
 8003bcc:	f003 ff7e 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4865      	ldr	r0, [pc, #404]	; (8003d68 <menu+0x2bd8>)
 8003bd4:	f005 faa0 	bl	8009118 <HAL_GPIO_ReadPin>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d115      	bne.n	8003c0a <menu+0x2a7a>
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <menu+0x2bdc>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003bec:	4b5c      	ldr	r3, [pc, #368]	; (8003d60 <menu+0x2bd0>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <menu+0x2bd0>)
 8003bf6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003bf8:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <menu+0x2bd0>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d902      	bls.n	8003c06 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c00:	4b57      	ldr	r3, [pc, #348]	; (8003d60 <menu+0x2bd0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c06:	f000 fe8f 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	4856      	ldr	r0, [pc, #344]	; (8003d68 <menu+0x2bd8>)
 8003c0e:	f005 fa83 	bl	8009118 <HAL_GPIO_ReadPin>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d115      	bne.n	8003c44 <menu+0x2ab4>
 8003c18:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <menu+0x2bdc>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f083 0301 	eor.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <menu+0x2bd0>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <menu+0x2bd0>)
 8003c30:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003c32:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <menu+0x2bd0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <menu+0x2bd0>)
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c40:	f000 fe72 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c44:	2108      	movs	r1, #8
 8003c46:	4848      	ldr	r0, [pc, #288]	; (8003d68 <menu+0x2bd8>)
 8003c48:	f005 fa66 	bl	8009118 <HAL_GPIO_ReadPin>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10d      	bne.n	8003c6e <menu+0x2ade>
 8003c52:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <menu+0x2bdc>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <menu+0x2bd0>)
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <menu+0x2be0>)
 8003c66:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c68:	4b42      	ldr	r3, [pc, #264]	; (8003d74 <menu+0x2be4>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c6e:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <menu+0x2be8>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b1a      	cmp	r3, #26
 8003c74:	f040 80ec 	bne.w	8003e50 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <menu+0x2bc0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c80:	4a3e      	ldr	r2, [pc, #248]	; (8003d7c <menu+0x2bec>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	2001      	movs	r0, #1
 8003c86:	f003 ff21 	bl	8007acc <lcd_print>
 8003c8a:	e008      	b.n	8003c9e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <menu+0x2bc0>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d104      	bne.n	8003c9e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003c94:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <menu+0x2bf0>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f003 ff17 	bl	8007acc <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <menu+0x2bf4>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b63      	cmp	r3, #99	; 0x63
 8003ca4:	d91e      	bls.n	8003ce4 <menu+0x2b54>
			if(dilSecim == 0) {
 8003ca6:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <menu+0x2bc0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cae:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <menu+0x2bc8>)
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2002      	movs	r0, #2
 8003cb4:	f003 ff0a 	bl	8007acc <lcd_print>
			}
			if(dilSecim == 1) {
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <menu+0x2bc0>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d104      	bne.n	8003cca <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <menu+0x2bcc>)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f003 ff01 	bl	8007acc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cca:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <menu+0x2bf4>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	220a      	movs	r2, #10
 8003cd0:	4924      	ldr	r1, [pc, #144]	; (8003d64 <menu+0x2bd4>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f008 fa4c 	bl	800c170 <itoa>
			lcd_print(2,14,snum);
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <menu+0x2bd4>)
 8003cda:	210e      	movs	r1, #14
 8003cdc:	2002      	movs	r0, #2
 8003cde:	f003 fef5 	bl	8007acc <lcd_print>
 8003ce2:	e066      	b.n	8003db2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <menu+0x2bf4>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d923      	bls.n	8003d34 <menu+0x2ba4>
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <menu+0x2bf4>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b63      	cmp	r3, #99	; 0x63
 8003cf2:	d81f      	bhi.n	8003d34 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <menu+0x2bc0>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <menu+0x2bc8>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	2002      	movs	r0, #2
 8003d02:	f003 fee3 	bl	8007acc <lcd_print>
 8003d06:	e008      	b.n	8003d1a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <menu+0x2bc0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d104      	bne.n	8003d1a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d10:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <menu+0x2bcc>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	2002      	movs	r0, #2
 8003d16:	f003 fed9 	bl	8007acc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <menu+0x2bf4>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	220a      	movs	r2, #10
 8003d20:	4910      	ldr	r1, [pc, #64]	; (8003d64 <menu+0x2bd4>)
 8003d22:	4618      	mov	r0, r3
 8003d24:	f008 fa24 	bl	800c170 <itoa>
			lcd_print(2, 15, snum);
 8003d28:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <menu+0x2bd4>)
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	2002      	movs	r0, #2
 8003d2e:	f003 fecd 	bl	8007acc <lcd_print>
 8003d32:	e03e      	b.n	8003db2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <menu+0x2bf4>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	d83a      	bhi.n	8003db2 <menu+0x2c22>
			if(dilSecim == 0) {
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <menu+0x2bc0>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d121      	bne.n	8003d88 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <menu+0x2bc8>)
 8003d46:	2101      	movs	r1, #1
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f003 febf 	bl	8007acc <lcd_print>
 8003d4e:	e024      	b.n	8003d9a <menu+0x2c0a>
 8003d50:	20000215 	.word	0x20000215
 8003d54:	0800d7c0 	.word	0x0800d7c0
 8003d58:	0800d388 	.word	0x0800d388
 8003d5c:	0800d6fc 	.word	0x0800d6fc
 8003d60:	2000020b 	.word	0x2000020b
 8003d64:	20000190 	.word	0x20000190
 8003d68:	40010800 	.word	0x40010800
 8003d6c:	20000223 	.word	0x20000223
 8003d70:	20000120 	.word	0x20000120
 8003d74:	20000220 	.word	0x20000220
 8003d78:	200001f4 	.word	0x200001f4
 8003d7c:	0800d7d4 	.word	0x0800d7d4
 8003d80:	0800d7e8 	.word	0x0800d7e8
 8003d84:	2000020c 	.word	0x2000020c
			} else if(dilSecim == 1) {
 8003d88:	4b8f      	ldr	r3, [pc, #572]	; (8003fc8 <menu+0x2e38>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d104      	bne.n	8003d9a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003d90:	4a8e      	ldr	r2, [pc, #568]	; (8003fcc <menu+0x2e3c>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	2002      	movs	r0, #2
 8003d96:	f003 fe99 	bl	8007acc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	; (8003fd0 <menu+0x2e40>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	220a      	movs	r2, #10
 8003da0:	498c      	ldr	r1, [pc, #560]	; (8003fd4 <menu+0x2e44>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f008 f9e4 	bl	800c170 <itoa>
			lcd_print(2, 16, snum);
 8003da8:	4a8a      	ldr	r2, [pc, #552]	; (8003fd4 <menu+0x2e44>)
 8003daa:	2110      	movs	r1, #16
 8003dac:	2002      	movs	r0, #2
 8003dae:	f003 fe8d 	bl	8007acc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003db2:	2102      	movs	r1, #2
 8003db4:	4888      	ldr	r0, [pc, #544]	; (8003fd8 <menu+0x2e48>)
 8003db6:	f005 f9af 	bl	8009118 <HAL_GPIO_ReadPin>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d115      	bne.n	8003dec <menu+0x2c5c>
 8003dc0:	4b86      	ldr	r3, [pc, #536]	; (8003fdc <menu+0x2e4c>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f083 0301 	eor.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003dce:	4b80      	ldr	r3, [pc, #512]	; (8003fd0 <menu+0x2e40>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <menu+0x2e40>)
 8003dd8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003dda:	4b7d      	ldr	r3, [pc, #500]	; (8003fd0 <menu+0x2e40>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2bb4      	cmp	r3, #180	; 0xb4
 8003de0:	d902      	bls.n	8003de8 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003de2:	4b7b      	ldr	r3, [pc, #492]	; (8003fd0 <menu+0x2e40>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003de8:	f000 fd9e 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dec:	2104      	movs	r1, #4
 8003dee:	487a      	ldr	r0, [pc, #488]	; (8003fd8 <menu+0x2e48>)
 8003df0:	f005 f992 	bl	8009118 <HAL_GPIO_ReadPin>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d115      	bne.n	8003e26 <menu+0x2c96>
 8003dfa:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <menu+0x2e4c>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f083 0301 	eor.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00e      	beq.n	8003e26 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e08:	4b71      	ldr	r3, [pc, #452]	; (8003fd0 <menu+0x2e40>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <menu+0x2e40>)
 8003e12:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e14:	4b6e      	ldr	r3, [pc, #440]	; (8003fd0 <menu+0x2e40>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2bb5      	cmp	r3, #181	; 0xb5
 8003e1a:	d902      	bls.n	8003e22 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e1c:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <menu+0x2e40>)
 8003e1e:	22b4      	movs	r2, #180	; 0xb4
 8003e20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e22:	f000 fd81 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e26:	2108      	movs	r1, #8
 8003e28:	486b      	ldr	r0, [pc, #428]	; (8003fd8 <menu+0x2e48>)
 8003e2a:	f005 f975 	bl	8009118 <HAL_GPIO_ReadPin>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <menu+0x2cc0>
 8003e34:	4b69      	ldr	r3, [pc, #420]	; (8003fdc <menu+0x2e4c>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f083 0301 	eor.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <menu+0x2e40>)
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <menu+0x2e50>)
 8003e48:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003e4a:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <menu+0x2e54>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003e50:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <menu+0x2e58>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b1b      	cmp	r3, #27
 8003e56:	f040 8083 	bne.w	8003f60 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e5a:	4a64      	ldr	r2, [pc, #400]	; (8003fec <menu+0x2e5c>)
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f003 fe34 	bl	8007acc <lcd_print>

		if(buzzer == 0) {
 8003e64:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <menu+0x2e60>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d113      	bne.n	8003e94 <menu+0x2d04>
			if(dilSecim == 0) {
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <menu+0x2e38>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e74:	4a5f      	ldr	r2, [pc, #380]	; (8003ff4 <menu+0x2e64>)
 8003e76:	2101      	movs	r1, #1
 8003e78:	2002      	movs	r0, #2
 8003e7a:	f003 fe27 	bl	8007acc <lcd_print>
 8003e7e:	e020      	b.n	8003ec2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e80:	4b51      	ldr	r3, [pc, #324]	; (8003fc8 <menu+0x2e38>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d11c      	bne.n	8003ec2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e88:	4a5b      	ldr	r2, [pc, #364]	; (8003ff8 <menu+0x2e68>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f003 fe1d 	bl	8007acc <lcd_print>
 8003e92:	e016      	b.n	8003ec2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <menu+0x2e60>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d112      	bne.n	8003ec2 <menu+0x2d32>
			if(dilSecim == 0) {
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <menu+0x2e38>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003ea4:	4a55      	ldr	r2, [pc, #340]	; (8003ffc <menu+0x2e6c>)
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	2002      	movs	r0, #2
 8003eaa:	f003 fe0f 	bl	8007acc <lcd_print>
 8003eae:	e008      	b.n	8003ec2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003eb0:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <menu+0x2e38>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d104      	bne.n	8003ec2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003eb8:	4a51      	ldr	r2, [pc, #324]	; (8004000 <menu+0x2e70>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f003 fe05 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4844      	ldr	r0, [pc, #272]	; (8003fd8 <menu+0x2e48>)
 8003ec6:	f005 f927 	bl	8009118 <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d115      	bne.n	8003efc <menu+0x2d6c>
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <menu+0x2e4c>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00e      	beq.n	8003efc <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003ede:	4b44      	ldr	r3, [pc, #272]	; (8003ff0 <menu+0x2e60>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <menu+0x2e60>)
 8003ee8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003eea:	4b41      	ldr	r3, [pc, #260]	; (8003ff0 <menu+0x2e60>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d902      	bls.n	8003ef8 <menu+0x2d68>
				buzzer = 0;
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <menu+0x2e60>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ef8:	f000 fd16 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003efc:	2104      	movs	r1, #4
 8003efe:	4836      	ldr	r0, [pc, #216]	; (8003fd8 <menu+0x2e48>)
 8003f00:	f005 f90a 	bl	8009118 <HAL_GPIO_ReadPin>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d115      	bne.n	8003f36 <menu+0x2da6>
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <menu+0x2e4c>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f083 0301 	eor.w	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f18:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <menu+0x2e60>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <menu+0x2e60>)
 8003f22:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f24:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <menu+0x2e60>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <menu+0x2da2>
		   		buzzer = 1;
 8003f2c:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <menu+0x2e60>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f32:	f000 fcf9 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f36:	2108      	movs	r1, #8
 8003f38:	4827      	ldr	r0, [pc, #156]	; (8003fd8 <menu+0x2e48>)
 8003f3a:	f005 f8ed 	bl	8009118 <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10d      	bne.n	8003f60 <menu+0x2dd0>
 8003f44:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <menu+0x2e4c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <menu+0x2e60>)
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <menu+0x2e50>)
 8003f58:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <menu+0x2e54>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <menu+0x2e58>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b1c      	cmp	r3, #28
 8003f66:	f040 80ab 	bne.w	80040c0 <menu+0x2f30>
		calismaSayModu = 0;
 8003f6a:	4b26      	ldr	r3, [pc, #152]	; (8004004 <menu+0x2e74>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <menu+0x2e78>)
 8003f72:	2101      	movs	r1, #1
 8003f74:	2001      	movs	r0, #1
 8003f76:	f003 fda9 	bl	8007acc <lcd_print>

		if(demoMode == 0) {
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <menu+0x2e7c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d113      	bne.n	8003faa <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <menu+0x2e38>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ff4 <menu+0x2e64>)
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	2002      	movs	r0, #2
 8003f90:	f003 fd9c 	bl	8007acc <lcd_print>
 8003f94:	e045      	b.n	8004022 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <menu+0x2e38>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d141      	bne.n	8004022 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <menu+0x2e68>)
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	2002      	movs	r0, #2
 8003fa4:	f003 fd92 	bl	8007acc <lcd_print>
 8003fa8:	e03b      	b.n	8004022 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <menu+0x2e7c>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d137      	bne.n	8004022 <menu+0x2e92>
			if(dilSecim == 0){
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <menu+0x2e38>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d12a      	bne.n	8004010 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003fba:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <menu+0x2e6c>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	f003 fd84 	bl	8007acc <lcd_print>
 8003fc4:	e02d      	b.n	8004022 <menu+0x2e92>
 8003fc6:	bf00      	nop
 8003fc8:	20000215 	.word	0x20000215
 8003fcc:	0800d6fc 	.word	0x0800d6fc
 8003fd0:	2000020c 	.word	0x2000020c
 8003fd4:	20000190 	.word	0x20000190
 8003fd8:	40010800 	.word	0x40010800
 8003fdc:	20000223 	.word	0x20000223
 8003fe0:	20000120 	.word	0x20000120
 8003fe4:	20000220 	.word	0x20000220
 8003fe8:	200001f4 	.word	0x200001f4
 8003fec:	0800d7fc 	.word	0x0800d7fc
 8003ff0:	20000210 	.word	0x20000210
 8003ff4:	0800d124 	.word	0x0800d124
 8003ff8:	0800d138 	.word	0x0800d138
 8003ffc:	0800d184 	.word	0x0800d184
 8004000:	0800d198 	.word	0x0800d198
 8004004:	20000214 	.word	0x20000214
 8004008:	0800d810 	.word	0x0800d810
 800400c:	20000212 	.word	0x20000212
			} else if(dilSecim == 1) {
 8004010:	4b71      	ldr	r3, [pc, #452]	; (80041d8 <menu+0x3048>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d104      	bne.n	8004022 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004018:	4a70      	ldr	r2, [pc, #448]	; (80041dc <menu+0x304c>)
 800401a:	2101      	movs	r1, #1
 800401c:	2002      	movs	r0, #2
 800401e:	f003 fd55 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004022:	2102      	movs	r1, #2
 8004024:	486e      	ldr	r0, [pc, #440]	; (80041e0 <menu+0x3050>)
 8004026:	f005 f877 	bl	8009118 <HAL_GPIO_ReadPin>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d115      	bne.n	800405c <menu+0x2ecc>
 8004030:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <menu+0x3054>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <menu+0x3058>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	3301      	adds	r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <menu+0x3058>)
 8004048:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800404a:	4b67      	ldr	r3, [pc, #412]	; (80041e8 <menu+0x3058>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d902      	bls.n	8004058 <menu+0x2ec8>
				demoMode = 0;
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <menu+0x3058>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004058:	f000 fc66 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800405c:	2104      	movs	r1, #4
 800405e:	4860      	ldr	r0, [pc, #384]	; (80041e0 <menu+0x3050>)
 8004060:	f005 f85a 	bl	8009118 <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d115      	bne.n	8004096 <menu+0x2f06>
 800406a:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <menu+0x3054>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	f083 0301 	eor.w	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004078:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <menu+0x3058>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	3b01      	subs	r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <menu+0x3058>)
 8004082:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004084:	4b58      	ldr	r3, [pc, #352]	; (80041e8 <menu+0x3058>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <menu+0x2f02>
		   		demoMode = 1;
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <menu+0x3058>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004092:	f000 fc49 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004096:	2108      	movs	r1, #8
 8004098:	4851      	ldr	r0, [pc, #324]	; (80041e0 <menu+0x3050>)
 800409a:	f005 f83d 	bl	8009118 <HAL_GPIO_ReadPin>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10d      	bne.n	80040c0 <menu+0x2f30>
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <menu+0x3054>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80040b2:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <menu+0x3058>)
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <menu+0x305c>)
 80040b8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80040ba:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <menu+0x3060>)
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <menu+0x3064>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b1d      	cmp	r3, #29
 80040c6:	f040 8132 	bne.w	800432e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80040ca:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <menu+0x3068>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d113      	bne.n	80040fa <menu+0x2f6a>
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <menu+0x306c>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <menu+0x2f6a>
 80040da:	4b49      	ldr	r3, [pc, #292]	; (8004200 <menu+0x3070>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <menu+0x2f6a>
 80040e2:	4b48      	ldr	r3, [pc, #288]	; (8004204 <menu+0x3074>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <menu+0x2f6a>
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <menu+0x3078>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <menu+0x2f6a>
			calismaSayisiYar = 0;
 80040f2:	4b46      	ldr	r3, [pc, #280]	; (800420c <menu+0x307c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e002      	b.n	8004100 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80040fa:	4b44      	ldr	r3, [pc, #272]	; (800420c <menu+0x307c>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004100:	4b43      	ldr	r3, [pc, #268]	; (8004210 <menu+0x3080>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d154      	bne.n	80041b2 <menu+0x3022>
			if(dilSecim == 0) {
 8004108:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <menu+0x3048>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004110:	4a40      	ldr	r2, [pc, #256]	; (8004214 <menu+0x3084>)
 8004112:	2101      	movs	r1, #1
 8004114:	2001      	movs	r0, #1
 8004116:	f003 fcd9 	bl	8007acc <lcd_print>
 800411a:	e008      	b.n	800412e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800411c:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <menu+0x3048>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d104      	bne.n	800412e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004124:	4a3c      	ldr	r2, [pc, #240]	; (8004218 <menu+0x3088>)
 8004126:	2101      	movs	r1, #1
 8004128:	2001      	movs	r0, #1
 800412a:	f003 fccf 	bl	8007acc <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <menu+0x3078>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	220a      	movs	r2, #10
 8004134:	4939      	ldr	r1, [pc, #228]	; (800421c <menu+0x308c>)
 8004136:	4618      	mov	r0, r3
 8004138:	f008 f81a 	bl	800c170 <itoa>
			lcd_print(2, 12, snum);
 800413c:	4a37      	ldr	r2, [pc, #220]	; (800421c <menu+0x308c>)
 800413e:	210c      	movs	r1, #12
 8004140:	2002      	movs	r0, #2
 8004142:	f003 fcc3 	bl	8007acc <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004146:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <menu+0x3074>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	220a      	movs	r2, #10
 800414c:	4933      	ldr	r1, [pc, #204]	; (800421c <menu+0x308c>)
 800414e:	4618      	mov	r0, r3
 8004150:	f008 f80e 	bl	800c170 <itoa>
			lcd_print(2, 13, snum);
 8004154:	4a31      	ldr	r2, [pc, #196]	; (800421c <menu+0x308c>)
 8004156:	210d      	movs	r1, #13
 8004158:	2002      	movs	r0, #2
 800415a:	f003 fcb7 	bl	8007acc <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800415e:	4b28      	ldr	r3, [pc, #160]	; (8004200 <menu+0x3070>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	220a      	movs	r2, #10
 8004164:	492d      	ldr	r1, [pc, #180]	; (800421c <menu+0x308c>)
 8004166:	4618      	mov	r0, r3
 8004168:	f008 f802 	bl	800c170 <itoa>
			lcd_print(2, 14, snum);
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <menu+0x308c>)
 800416e:	210e      	movs	r1, #14
 8004170:	2002      	movs	r0, #2
 8004172:	f003 fcab 	bl	8007acc <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004176:	4b21      	ldr	r3, [pc, #132]	; (80041fc <menu+0x306c>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	220a      	movs	r2, #10
 800417c:	4927      	ldr	r1, [pc, #156]	; (800421c <menu+0x308c>)
 800417e:	4618      	mov	r0, r3
 8004180:	f007 fff6 	bl	800c170 <itoa>
			lcd_print(2, 15, snum);
 8004184:	4a25      	ldr	r2, [pc, #148]	; (800421c <menu+0x308c>)
 8004186:	210f      	movs	r1, #15
 8004188:	2002      	movs	r0, #2
 800418a:	f003 fc9f 	bl	8007acc <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800418e:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <menu+0x3068>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	220a      	movs	r2, #10
 8004194:	4921      	ldr	r1, [pc, #132]	; (800421c <menu+0x308c>)
 8004196:	4618      	mov	r0, r3
 8004198:	f007 ffea 	bl	800c170 <itoa>
			lcd_print(2, 16, snum);
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <menu+0x308c>)
 800419e:	2110      	movs	r1, #16
 80041a0:	2002      	movs	r0, #2
 80041a2:	f003 fc93 	bl	8007acc <lcd_print>

			lcd_print(2, 1, "           ");
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <menu+0x3090>)
 80041a8:	2101      	movs	r1, #1
 80041aa:	2002      	movs	r0, #2
 80041ac:	f003 fc8e 	bl	8007acc <lcd_print>
 80041b0:	e048      	b.n	8004244 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <menu+0x3080>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d144      	bne.n	8004244 <menu+0x30b4>
			if(dilSecim == 0) {
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <menu+0x3048>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d132      	bne.n	8004228 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <menu+0x3084>)
 80041c4:	2101      	movs	r1, #1
 80041c6:	2001      	movs	r0, #1
 80041c8:	f003 fc80 	bl	8007acc <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <menu+0x3094>)
 80041ce:	2101      	movs	r1, #1
 80041d0:	2002      	movs	r0, #2
 80041d2:	f003 fc7b 	bl	8007acc <lcd_print>
 80041d6:	e035      	b.n	8004244 <menu+0x30b4>
 80041d8:	20000215 	.word	0x20000215
 80041dc:	0800d198 	.word	0x0800d198
 80041e0:	40010800 	.word	0x40010800
 80041e4:	20000223 	.word	0x20000223
 80041e8:	20000212 	.word	0x20000212
 80041ec:	20000120 	.word	0x20000120
 80041f0:	20000220 	.word	0x20000220
 80041f4:	200001f4 	.word	0x200001f4
 80041f8:	200001f1 	.word	0x200001f1
 80041fc:	200001f2 	.word	0x200001f2
 8004200:	20000000 	.word	0x20000000
 8004204:	20000001 	.word	0x20000001
 8004208:	200001f3 	.word	0x200001f3
 800420c:	20000235 	.word	0x20000235
 8004210:	20000214 	.word	0x20000214
 8004214:	0800d820 	.word	0x0800d820
 8004218:	0800d834 	.word	0x0800d834
 800421c:	20000190 	.word	0x20000190
 8004220:	0800d848 	.word	0x0800d848
 8004224:	0800d854 	.word	0x0800d854
			} else if(dilSecim == 1) {
 8004228:	4b94      	ldr	r3, [pc, #592]	; (800447c <menu+0x32ec>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d109      	bne.n	8004244 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004230:	4a93      	ldr	r2, [pc, #588]	; (8004480 <menu+0x32f0>)
 8004232:	2101      	movs	r1, #1
 8004234:	2001      	movs	r0, #1
 8004236:	f003 fc49 	bl	8007acc <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800423a:	4a92      	ldr	r2, [pc, #584]	; (8004484 <menu+0x32f4>)
 800423c:	2101      	movs	r1, #1
 800423e:	2002      	movs	r0, #2
 8004240:	f003 fc44 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004244:	2102      	movs	r1, #2
 8004246:	4890      	ldr	r0, [pc, #576]	; (8004488 <menu+0x32f8>)
 8004248:	f004 ff66 	bl	8009118 <HAL_GPIO_ReadPin>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d119      	bne.n	8004286 <menu+0x30f6>
 8004252:	4b8e      	ldr	r3, [pc, #568]	; (800448c <menu+0x32fc>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <menu+0x30f6>
 8004260:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <menu+0x3300>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00e      	beq.n	8004286 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004268:	4b8a      	ldr	r3, [pc, #552]	; (8004494 <menu+0x3304>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	4b88      	ldr	r3, [pc, #544]	; (8004494 <menu+0x3304>)
 8004272:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004274:	4b87      	ldr	r3, [pc, #540]	; (8004494 <menu+0x3304>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d902      	bls.n	8004282 <menu+0x30f2>
				calismaSayModu = 0;
 800427c:	4b85      	ldr	r3, [pc, #532]	; (8004494 <menu+0x3304>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004282:	f000 fb51 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004286:	2104      	movs	r1, #4
 8004288:	487f      	ldr	r0, [pc, #508]	; (8004488 <menu+0x32f8>)
 800428a:	f004 ff45 	bl	8009118 <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	2b01      	cmp	r3, #1
 8004292:	d119      	bne.n	80042c8 <menu+0x3138>
 8004294:	4b7d      	ldr	r3, [pc, #500]	; (800448c <menu+0x32fc>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <menu+0x3138>
 80042a2:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <menu+0x3300>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00e      	beq.n	80042c8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80042aa:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <menu+0x3304>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b78      	ldr	r3, [pc, #480]	; (8004494 <menu+0x3304>)
 80042b4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80042b6:	4b77      	ldr	r3, [pc, #476]	; (8004494 <menu+0x3304>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <menu+0x3134>
		   		calismaSayModu = 1;
 80042be:	4b75      	ldr	r3, [pc, #468]	; (8004494 <menu+0x3304>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042c4:	f000 fb30 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042c8:	2108      	movs	r1, #8
 80042ca:	486f      	ldr	r0, [pc, #444]	; (8004488 <menu+0x32f8>)
 80042cc:	f004 ff24 	bl	8009118 <HAL_GPIO_ReadPin>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d12b      	bne.n	800432e <menu+0x319e>
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <menu+0x32fc>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f083 0301 	eor.w	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d024      	beq.n	800432e <menu+0x319e>
			eepromData[32] = 0;
 80042e4:	4b6c      	ldr	r3, [pc, #432]	; (8004498 <menu+0x3308>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <menu+0x3308>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80042f2:	4b69      	ldr	r3, [pc, #420]	; (8004498 <menu+0x3308>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80042f8:	4b67      	ldr	r3, [pc, #412]	; (8004498 <menu+0x3308>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80042fe:	4b66      	ldr	r3, [pc, #408]	; (8004498 <menu+0x3308>)
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004304:	4b65      	ldr	r3, [pc, #404]	; (800449c <menu+0x330c>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800430a:	4b65      	ldr	r3, [pc, #404]	; (80044a0 <menu+0x3310>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <menu+0x3314>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004316:	4b64      	ldr	r3, [pc, #400]	; (80044a8 <menu+0x3318>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800431c:	4b63      	ldr	r3, [pc, #396]	; (80044ac <menu+0x331c>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004322:	4b5c      	ldr	r3, [pc, #368]	; (8004494 <menu+0x3304>)
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <menu+0x3320>)
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <menu+0x3324>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b1e      	cmp	r3, #30
 8004334:	d16f      	bne.n	8004416 <menu+0x3286>
		calismaSayModu = 0;
 8004336:	4b57      	ldr	r3, [pc, #348]	; (8004494 <menu+0x3304>)
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <menu+0x32ec>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004344:	4a5c      	ldr	r2, [pc, #368]	; (80044b8 <menu+0x3328>)
 8004346:	2101      	movs	r1, #1
 8004348:	2001      	movs	r0, #1
 800434a:	f003 fbbf 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800434e:	4a5b      	ldr	r2, [pc, #364]	; (80044bc <menu+0x332c>)
 8004350:	2101      	movs	r1, #1
 8004352:	2002      	movs	r0, #2
 8004354:	f003 fbba 	bl	8007acc <lcd_print>
 8004358:	e00d      	b.n	8004376 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800435a:	4b48      	ldr	r3, [pc, #288]	; (800447c <menu+0x32ec>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d109      	bne.n	8004376 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004362:	4a57      	ldr	r2, [pc, #348]	; (80044c0 <menu+0x3330>)
 8004364:	2101      	movs	r1, #1
 8004366:	2001      	movs	r0, #1
 8004368:	f003 fbb0 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800436c:	4a55      	ldr	r2, [pc, #340]	; (80044c4 <menu+0x3334>)
 800436e:	2101      	movs	r1, #1
 8004370:	2002      	movs	r0, #2
 8004372:	f003 fbab 	bl	8007acc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004376:	2102      	movs	r1, #2
 8004378:	4843      	ldr	r0, [pc, #268]	; (8004488 <menu+0x32f8>)
 800437a:	f004 fecd 	bl	8009118 <HAL_GPIO_ReadPin>
 800437e:	4603      	mov	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	d115      	bne.n	80043b0 <menu+0x3220>
 8004384:	4b41      	ldr	r3, [pc, #260]	; (800448c <menu+0x32fc>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f083 0301 	eor.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004392:	4b3a      	ldr	r3, [pc, #232]	; (800447c <menu+0x32ec>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b38      	ldr	r3, [pc, #224]	; (800447c <menu+0x32ec>)
 800439c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800439e:	4b37      	ldr	r3, [pc, #220]	; (800447c <menu+0x32ec>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d902      	bls.n	80043ac <menu+0x321c>
				dilSecim = 0;
 80043a6:	4b35      	ldr	r3, [pc, #212]	; (800447c <menu+0x32ec>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80043ac:	f000 fabc 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043b0:	2104      	movs	r1, #4
 80043b2:	4835      	ldr	r0, [pc, #212]	; (8004488 <menu+0x32f8>)
 80043b4:	f004 feb0 	bl	8009118 <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d115      	bne.n	80043ea <menu+0x325a>
 80043be:	4b33      	ldr	r3, [pc, #204]	; (800448c <menu+0x32fc>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f083 0301 	eor.w	r3, r3, #1
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <menu+0x325a>
			dilSecim = dilSecim - 1;
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <menu+0x32ec>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b29      	ldr	r3, [pc, #164]	; (800447c <menu+0x32ec>)
 80043d6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <menu+0x32ec>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <menu+0x3256>
		   		dilSecim = 1;
 80043e0:	4b26      	ldr	r3, [pc, #152]	; (800447c <menu+0x32ec>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80043e6:	f000 fa9f 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043ea:	2108      	movs	r1, #8
 80043ec:	4826      	ldr	r0, [pc, #152]	; (8004488 <menu+0x32f8>)
 80043ee:	f004 fe93 	bl	8009118 <HAL_GPIO_ReadPin>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10e      	bne.n	8004416 <menu+0x3286>
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <menu+0x32fc>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f083 0301 	eor.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <menu+0x32ec>)
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <menu+0x3308>)
 800440c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <menu+0x3320>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <menu+0x3324>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b1f      	cmp	r3, #31
 800441c:	f040 80b7 	bne.w	800458e <menu+0x33fe>
		calismaSayModu = 0;
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <menu+0x3304>)
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004426:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <menu+0x3338>)
 8004428:	2101      	movs	r1, #1
 800442a:	2001      	movs	r0, #1
 800442c:	f003 fb4e 	bl	8007acc <lcd_print>

		if(iotMode == 0) {
 8004430:	4b26      	ldr	r3, [pc, #152]	; (80044cc <menu+0x333c>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d113      	bne.n	8004460 <menu+0x32d0>
			if(dilSecim == 0) {
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <menu+0x32ec>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <menu+0x3340>)
 8004442:	2101      	movs	r1, #1
 8004444:	2002      	movs	r0, #2
 8004446:	f003 fb41 	bl	8007acc <lcd_print>
 800444a:	e050      	b.n	80044ee <menu+0x335e>
			} else if(dilSecim == 1) {
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <menu+0x32ec>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d14c      	bne.n	80044ee <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <menu+0x3344>)
 8004456:	2101      	movs	r1, #1
 8004458:	2002      	movs	r0, #2
 800445a:	f003 fb37 	bl	8007acc <lcd_print>
 800445e:	e046      	b.n	80044ee <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <menu+0x333c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d142      	bne.n	80044ee <menu+0x335e>
			if(dilSecim == 0) {
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <menu+0x32ec>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d135      	bne.n	80044dc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <menu+0x3348>)
 8004472:	2101      	movs	r1, #1
 8004474:	2002      	movs	r0, #2
 8004476:	f003 fb29 	bl	8007acc <lcd_print>
 800447a:	e038      	b.n	80044ee <menu+0x335e>
 800447c:	20000215 	.word	0x20000215
 8004480:	0800d834 	.word	0x0800d834
 8004484:	0800d868 	.word	0x0800d868
 8004488:	40010800 	.word	0x40010800
 800448c:	20000223 	.word	0x20000223
 8004490:	20000235 	.word	0x20000235
 8004494:	20000214 	.word	0x20000214
 8004498:	20000120 	.word	0x20000120
 800449c:	200001f3 	.word	0x200001f3
 80044a0:	20000001 	.word	0x20000001
 80044a4:	20000000 	.word	0x20000000
 80044a8:	200001f2 	.word	0x200001f2
 80044ac:	200001f1 	.word	0x200001f1
 80044b0:	20000220 	.word	0x20000220
 80044b4:	200001f4 	.word	0x200001f4
 80044b8:	0800d87c 	.word	0x0800d87c
 80044bc:	0800d890 	.word	0x0800d890
 80044c0:	0800d8a4 	.word	0x0800d8a4
 80044c4:	0800d8b8 	.word	0x0800d8b8
 80044c8:	0800d8cc 	.word	0x0800d8cc
 80044cc:	20000213 	.word	0x20000213
 80044d0:	0800d124 	.word	0x0800d124
 80044d4:	0800d138 	.word	0x0800d138
 80044d8:	0800d184 	.word	0x0800d184
			} else if(dilSecim == 1) {
 80044dc:	4bab      	ldr	r3, [pc, #684]	; (800478c <menu+0x35fc>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d104      	bne.n	80044ee <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80044e4:	4aaa      	ldr	r2, [pc, #680]	; (8004790 <menu+0x3600>)
 80044e6:	2101      	movs	r1, #1
 80044e8:	2002      	movs	r0, #2
 80044ea:	f003 faef 	bl	8007acc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ee:	2102      	movs	r1, #2
 80044f0:	48a8      	ldr	r0, [pc, #672]	; (8004794 <menu+0x3604>)
 80044f2:	f004 fe11 	bl	8009118 <HAL_GPIO_ReadPin>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d115      	bne.n	8004528 <menu+0x3398>
 80044fc:	4ba6      	ldr	r3, [pc, #664]	; (8004798 <menu+0x3608>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f083 0301 	eor.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <menu+0x3398>
			iotMode = iotMode + 1;
 800450a:	4ba4      	ldr	r3, [pc, #656]	; (800479c <menu+0x360c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	3301      	adds	r3, #1
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4ba2      	ldr	r3, [pc, #648]	; (800479c <menu+0x360c>)
 8004514:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004516:	4ba1      	ldr	r3, [pc, #644]	; (800479c <menu+0x360c>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d902      	bls.n	8004524 <menu+0x3394>
				iotMode = 0;
 800451e:	4b9f      	ldr	r3, [pc, #636]	; (800479c <menu+0x360c>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004524:	f000 fa00 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004528:	2104      	movs	r1, #4
 800452a:	489a      	ldr	r0, [pc, #616]	; (8004794 <menu+0x3604>)
 800452c:	f004 fdf4 	bl	8009118 <HAL_GPIO_ReadPin>
 8004530:	4603      	mov	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d115      	bne.n	8004562 <menu+0x33d2>
 8004536:	4b98      	ldr	r3, [pc, #608]	; (8004798 <menu+0x3608>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	f083 0301 	eor.w	r3, r3, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00e      	beq.n	8004562 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004544:	4b95      	ldr	r3, [pc, #596]	; (800479c <menu+0x360c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	3b01      	subs	r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	4b93      	ldr	r3, [pc, #588]	; (800479c <menu+0x360c>)
 800454e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004550:	4b92      	ldr	r3, [pc, #584]	; (800479c <menu+0x360c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <menu+0x33ce>
		   		iotMode = 1;
 8004558:	4b90      	ldr	r3, [pc, #576]	; (800479c <menu+0x360c>)
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800455e:	f000 f9e3 	bl	8004928 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004562:	2108      	movs	r1, #8
 8004564:	488b      	ldr	r0, [pc, #556]	; (8004794 <menu+0x3604>)
 8004566:	f004 fdd7 	bl	8009118 <HAL_GPIO_ReadPin>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10e      	bne.n	800458e <menu+0x33fe>
 8004570:	4b89      	ldr	r3, [pc, #548]	; (8004798 <menu+0x3608>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <menu+0x33fe>
			eepromData[48] = iotMode;
 800457e:	4b87      	ldr	r3, [pc, #540]	; (800479c <menu+0x360c>)
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	4b87      	ldr	r3, [pc, #540]	; (80047a0 <menu+0x3610>)
 8004584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004588:	4b86      	ldr	r3, [pc, #536]	; (80047a4 <menu+0x3614>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800458e:	4b86      	ldr	r3, [pc, #536]	; (80047a8 <menu+0x3618>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b20      	cmp	r3, #32
 8004594:	d13f      	bne.n	8004616 <menu+0x3486>
		calismaSayModu = 0;
 8004596:	4b85      	ldr	r3, [pc, #532]	; (80047ac <menu+0x361c>)
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800459c:	4b7b      	ldr	r3, [pc, #492]	; (800478c <menu+0x35fc>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80045a4:	4a82      	ldr	r2, [pc, #520]	; (80047b0 <menu+0x3620>)
 80045a6:	2101      	movs	r1, #1
 80045a8:	2001      	movs	r0, #1
 80045aa:	f003 fa8f 	bl	8007acc <lcd_print>
 80045ae:	e004      	b.n	80045ba <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80045b0:	4a80      	ldr	r2, [pc, #512]	; (80047b4 <menu+0x3624>)
 80045b2:	2101      	movs	r1, #1
 80045b4:	2001      	movs	r0, #1
 80045b6:	f003 fa89 	bl	8007acc <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80045ba:	4a7f      	ldr	r2, [pc, #508]	; (80047b8 <menu+0x3628>)
 80045bc:	2101      	movs	r1, #1
 80045be:	2002      	movs	r0, #2
 80045c0:	f003 fa84 	bl	8007acc <lcd_print>
		lcd_print(2, 13, "    ");
 80045c4:	4a7d      	ldr	r2, [pc, #500]	; (80047bc <menu+0x362c>)
 80045c6:	210d      	movs	r1, #13
 80045c8:	2002      	movs	r0, #2
 80045ca:	f003 fa7f 	bl	8007acc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045ce:	2102      	movs	r1, #2
 80045d0:	4870      	ldr	r0, [pc, #448]	; (8004794 <menu+0x3604>)
 80045d2:	f004 fda1 	bl	8009118 <HAL_GPIO_ReadPin>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11c      	bne.n	8004616 <menu+0x3486>
 80045dc:	2104      	movs	r1, #4
 80045de:	486d      	ldr	r0, [pc, #436]	; (8004794 <menu+0x3604>)
 80045e0:	f004 fd9a 	bl	8009118 <HAL_GPIO_ReadPin>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d115      	bne.n	8004616 <menu+0x3486>
 80045ea:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <menu+0x3608>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f083 0301 	eor.w	r3, r3, #1
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <menu+0x3486>
			takeMachineID();
 80045f8:	f002 faa2 	bl	8006b40 <takeMachineID>

			HAL_Delay(250);
 80045fc:	20fa      	movs	r0, #250	; 0xfa
 80045fe:	f003 ffbb 	bl	8008578 <HAL_Delay>
			lcd_print(2, 1, machineID);
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <menu+0x3628>)
 8004604:	2101      	movs	r1, #1
 8004606:	2002      	movs	r0, #2
 8004608:	f003 fa60 	bl	8007acc <lcd_print>
			lcd_print(2, 13, "    ");
 800460c:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <menu+0x362c>)
 800460e:	210d      	movs	r1, #13
 8004610:	2002      	movs	r0, #2
 8004612:	f003 fa5b 	bl	8007acc <lcd_print>
		}
	}

	if (menuSayac == 33) {
 8004616:	4b64      	ldr	r3, [pc, #400]	; (80047a8 <menu+0x3618>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b21      	cmp	r3, #33	; 0x21
 800461c:	d14f      	bne.n	80046be <menu+0x352e>
		calismaSayModu = 0;
 800461e:	4b63      	ldr	r3, [pc, #396]	; (80047ac <menu+0x361c>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004624:	4866      	ldr	r0, [pc, #408]	; (80047c0 <menu+0x3630>)
 8004626:	f7fb fdfd 	bl	8000224 <strlen>
 800462a:	4603      	mov	r3, r0
 800462c:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 800462e:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <menu+0x3634>)
 8004630:	2101      	movs	r1, #1
 8004632:	2001      	movs	r0, #1
 8004634:	f003 fa4a 	bl	8007acc <lcd_print>

		if(ssidLength <=16) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b10      	cmp	r3, #16
 800463c:	dc0e      	bgt.n	800465c <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 800463e:	4a60      	ldr	r2, [pc, #384]	; (80047c0 <menu+0x3630>)
 8004640:	2101      	movs	r1, #1
 8004642:	2002      	movs	r0, #2
 8004644:	f003 fa42 	bl	8007acc <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <menu+0x3638>)
 8004652:	4619      	mov	r1, r3
 8004654:	2002      	movs	r0, #2
 8004656:	f003 fa39 	bl	8007acc <lcd_print>
 800465a:	e005      	b.n	8004668 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800465c:	2300      	movs	r3, #0
 800465e:	2202      	movs	r2, #2
 8004660:	2101      	movs	r1, #1
 8004662:	4857      	ldr	r0, [pc, #348]	; (80047c0 <menu+0x3630>)
 8004664:	f7fc fcd8 	bl	8001018 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004668:	2102      	movs	r1, #2
 800466a:	484a      	ldr	r0, [pc, #296]	; (8004794 <menu+0x3604>)
 800466c:	f004 fd54 	bl	8009118 <HAL_GPIO_ReadPin>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d123      	bne.n	80046be <menu+0x352e>
 8004676:	2104      	movs	r1, #4
 8004678:	4846      	ldr	r0, [pc, #280]	; (8004794 <menu+0x3604>)
 800467a:	f004 fd4d 	bl	8009118 <HAL_GPIO_ReadPin>
 800467e:	4603      	mov	r3, r0
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11c      	bne.n	80046be <menu+0x352e>
 8004684:	4b44      	ldr	r3, [pc, #272]	; (8004798 <menu+0x3608>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f083 0301 	eor.w	r3, r3, #1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <menu+0x352e>
			takeWifiSSID();
 8004692:	f002 fbb7 	bl	8006e04 <takeWifiSSID>

			HAL_Delay(250);
 8004696:	20fa      	movs	r0, #250	; 0xfa
 8004698:	f003 ff6e 	bl	8008578 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 800469c:	4a48      	ldr	r2, [pc, #288]	; (80047c0 <menu+0x3630>)
 800469e:	2101      	movs	r1, #1
 80046a0:	2002      	movs	r0, #2
 80046a2:	f003 fa13 	bl	8007acc <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80046a6:	4846      	ldr	r0, [pc, #280]	; (80047c0 <menu+0x3630>)
 80046a8:	f7fb fdbc 	bl	8000224 <strlen>
 80046ac:	4603      	mov	r3, r0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4a44      	ldr	r2, [pc, #272]	; (80047c8 <menu+0x3638>)
 80046b6:	4619      	mov	r1, r3
 80046b8:	2002      	movs	r0, #2
 80046ba:	f003 fa07 	bl	8007acc <lcd_print>
		}
	}

	if (menuSayac == 34) {
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <menu+0x3618>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b22      	cmp	r3, #34	; 0x22
 80046c4:	d14f      	bne.n	8004766 <menu+0x35d6>
		calismaSayModu = 0;
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <menu+0x361c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80046cc:	483f      	ldr	r0, [pc, #252]	; (80047cc <menu+0x363c>)
 80046ce:	f7fb fda9 	bl	8000224 <strlen>
 80046d2:	4603      	mov	r3, r0
 80046d4:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80046d6:	4a3e      	ldr	r2, [pc, #248]	; (80047d0 <menu+0x3640>)
 80046d8:	2101      	movs	r1, #1
 80046da:	2001      	movs	r0, #1
 80046dc:	f003 f9f6 	bl	8007acc <lcd_print>

		if(passLength <= 16) {
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	dc0e      	bgt.n	8004704 <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 80046e6:	4a39      	ldr	r2, [pc, #228]	; (80047cc <menu+0x363c>)
 80046e8:	2101      	movs	r1, #1
 80046ea:	2002      	movs	r0, #2
 80046ec:	f003 f9ee 	bl	8007acc <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	4a33      	ldr	r2, [pc, #204]	; (80047c8 <menu+0x3638>)
 80046fa:	4619      	mov	r1, r3
 80046fc:	2002      	movs	r0, #2
 80046fe:	f003 f9e5 	bl	8007acc <lcd_print>
 8004702:	e005      	b.n	8004710 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004704:	2301      	movs	r3, #1
 8004706:	2202      	movs	r2, #2
 8004708:	2101      	movs	r1, #1
 800470a:	4830      	ldr	r0, [pc, #192]	; (80047cc <menu+0x363c>)
 800470c:	f7fc fc84 	bl	8001018 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004710:	2102      	movs	r1, #2
 8004712:	4820      	ldr	r0, [pc, #128]	; (8004794 <menu+0x3604>)
 8004714:	f004 fd00 	bl	8009118 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d123      	bne.n	8004766 <menu+0x35d6>
 800471e:	2104      	movs	r1, #4
 8004720:	481c      	ldr	r0, [pc, #112]	; (8004794 <menu+0x3604>)
 8004722:	f004 fcf9 	bl	8009118 <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11c      	bne.n	8004766 <menu+0x35d6>
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <menu+0x3608>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f083 0301 	eor.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d015      	beq.n	8004766 <menu+0x35d6>
			takeWifiPass();
 800473a:	f002 fcfd 	bl	8007138 <takeWifiPass>

			HAL_Delay(250);
 800473e:	20fa      	movs	r0, #250	; 0xfa
 8004740:	f003 ff1a 	bl	8008578 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004744:	4a21      	ldr	r2, [pc, #132]	; (80047cc <menu+0x363c>)
 8004746:	2101      	movs	r1, #1
 8004748:	2002      	movs	r0, #2
 800474a:	f003 f9bf 	bl	8007acc <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 800474e:	481f      	ldr	r0, [pc, #124]	; (80047cc <menu+0x363c>)
 8004750:	f7fb fd68 	bl	8000224 <strlen>
 8004754:	4603      	mov	r3, r0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3301      	adds	r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <menu+0x3638>)
 800475e:	4619      	mov	r1, r3
 8004760:	2002      	movs	r0, #2
 8004762:	f003 f9b3 	bl	8007acc <lcd_print>
		}
	}

	if (menuSayac == 35) {
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <menu+0x3618>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b23      	cmp	r3, #35	; 0x23
 800476c:	d175      	bne.n	800485a <menu+0x36ca>
		if(dilSecim == 0) {
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <menu+0x35fc>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d132      	bne.n	80047dc <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <menu+0x3644>)
 8004778:	2101      	movs	r1, #1
 800477a:	2001      	movs	r0, #1
 800477c:	f003 f9a6 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <menu+0x3648>)
 8004782:	2101      	movs	r1, #1
 8004784:	2002      	movs	r0, #2
 8004786:	f003 f9a1 	bl	8007acc <lcd_print>
 800478a:	e035      	b.n	80047f8 <menu+0x3668>
 800478c:	20000215 	.word	0x20000215
 8004790:	0800d198 	.word	0x0800d198
 8004794:	40010800 	.word	0x40010800
 8004798:	20000223 	.word	0x20000223
 800479c:	20000213 	.word	0x20000213
 80047a0:	20000120 	.word	0x20000120
 80047a4:	20000220 	.word	0x20000220
 80047a8:	200001f4 	.word	0x200001f4
 80047ac:	20000214 	.word	0x20000214
 80047b0:	0800d8e0 	.word	0x0800d8e0
 80047b4:	0800d8f4 	.word	0x0800d8f4
 80047b8:	20000198 	.word	0x20000198
 80047bc:	0800d908 	.word	0x0800d908
 80047c0:	200001a4 	.word	0x200001a4
 80047c4:	0800d910 	.word	0x0800d910
 80047c8:	20000010 	.word	0x20000010
 80047cc:	200001b8 	.word	0x200001b8
 80047d0:	0800d924 	.word	0x0800d924
 80047d4:	0800d938 	.word	0x0800d938
 80047d8:	0800d94c 	.word	0x0800d94c
		} else if(dilSecim == 1) {
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <menu+0x36d4>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d109      	bne.n	80047f8 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <menu+0x36d8>)
 80047e6:	2101      	movs	r1, #1
 80047e8:	2001      	movs	r0, #1
 80047ea:	f003 f96f 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80047ee:	4a1f      	ldr	r2, [pc, #124]	; (800486c <menu+0x36dc>)
 80047f0:	2101      	movs	r1, #1
 80047f2:	2002      	movs	r0, #2
 80047f4:	f003 f96a 	bl	8007acc <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80047f8:	2108      	movs	r1, #8
 80047fa:	481d      	ldr	r0, [pc, #116]	; (8004870 <menu+0x36e0>)
 80047fc:	f004 fc8c 	bl	8009118 <HAL_GPIO_ReadPin>
 8004800:	4603      	mov	r3, r0
 8004802:	2b01      	cmp	r3, #1
 8004804:	d129      	bne.n	800485a <menu+0x36ca>
			menuGiris = 0;
 8004806:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <menu+0x36e4>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800480c:	bf00      	nop
 800480e:	481a      	ldr	r0, [pc, #104]	; (8004878 <menu+0x36e8>)
 8004810:	f005 faab 	bl	8009d6a <HAL_I2C_GetError>
 8004814:	4603      	mov	r3, r0
 8004816:	2b04      	cmp	r3, #4
 8004818:	d0f9      	beq.n	800480e <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800481a:	bf00      	nop
 800481c:	4816      	ldr	r0, [pc, #88]	; (8004878 <menu+0x36e8>)
 800481e:	f005 fa97 	bl	8009d50 <HAL_I2C_GetState>
 8004822:	4603      	mov	r3, r0
 8004824:	2b20      	cmp	r3, #32
 8004826:	d1f9      	bne.n	800481c <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004828:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	236e      	movs	r3, #110	; 0x6e
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <menu+0x36ec>)
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	236e      	movs	r3, #110	; 0x6e
 8004838:	2200      	movs	r2, #0
 800483a:	21a0      	movs	r1, #160	; 0xa0
 800483c:	480e      	ldr	r0, [pc, #56]	; (8004878 <menu+0x36e8>)
 800483e:	f004 ff25 	bl	800968c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004842:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004846:	f003 fe97 	bl	8008578 <HAL_Delay>

			lcd_clear();
 800484a:	f003 f96b 	bl	8007b24 <lcd_clear>
			HAL_Delay(500);
 800484e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004852:	f003 fe91 	bl	8008578 <HAL_Delay>
			NVIC_SystemReset();
 8004856:	f7fc fc85 	bl	8001164 <__NVIC_SystemReset>
		}
	}
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000215 	.word	0x20000215
 8004868:	0800d960 	.word	0x0800d960
 800486c:	0800d974 	.word	0x0800d974
 8004870:	40010800 	.word	0x40010800
 8004874:	20000211 	.word	0x20000211
 8004878:	20000284 	.word	0x20000284
 800487c:	20000120 	.word	0x20000120

08004880 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004890:	4a22      	ldr	r2, [pc, #136]	; (800491c <lcdUpdate+0x9c>)
 8004892:	2101      	movs	r1, #1
 8004894:	2002      	movs	r0, #2
 8004896:	f003 f919 	bl	8007acc <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 800489a:	e03b      	b.n	8004914 <lcdUpdate+0x94>
	} else if(y==2) {
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d105      	bne.n	80048ae <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <lcdUpdate+0x9c>)
 80048a4:	2102      	movs	r1, #2
 80048a6:	2002      	movs	r0, #2
 80048a8:	f003 f910 	bl	8007acc <lcd_print>
}
 80048ac:	e032      	b.n	8004914 <lcdUpdate+0x94>
	} else if(y==3) {
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d105      	bne.n	80048c0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <lcdUpdate+0x9c>)
 80048b6:	2103      	movs	r1, #3
 80048b8:	2002      	movs	r0, #2
 80048ba:	f003 f907 	bl	8007acc <lcd_print>
}
 80048be:	e029      	b.n	8004914 <lcdUpdate+0x94>
	} else if(y==4) {
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d105      	bne.n	80048d2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <lcdUpdate+0x9c>)
 80048c8:	2104      	movs	r1, #4
 80048ca:	2002      	movs	r0, #2
 80048cc:	f003 f8fe 	bl	8007acc <lcd_print>
}
 80048d0:	e020      	b.n	8004914 <lcdUpdate+0x94>
	} else if(y==5) {
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d105      	bne.n	80048e4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80048d8:	4a10      	ldr	r2, [pc, #64]	; (800491c <lcdUpdate+0x9c>)
 80048da:	2105      	movs	r1, #5
 80048dc:	2002      	movs	r0, #2
 80048de:	f003 f8f5 	bl	8007acc <lcd_print>
}
 80048e2:	e017      	b.n	8004914 <lcdUpdate+0x94>
	} else if(y==6) {
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d105      	bne.n	80048f6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <lcdUpdate+0x9c>)
 80048ec:	2106      	movs	r1, #6
 80048ee:	2002      	movs	r0, #2
 80048f0:	f003 f8ec 	bl	8007acc <lcd_print>
}
 80048f4:	e00e      	b.n	8004914 <lcdUpdate+0x94>
	} else if (y==7) {
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	2b07      	cmp	r3, #7
 80048fa:	d10b      	bne.n	8004914 <lcdUpdate+0x94>
		lcd_clear();
 80048fc:	f003 f912 	bl	8007b24 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004900:	4a07      	ldr	r2, [pc, #28]	; (8004920 <lcdUpdate+0xa0>)
 8004902:	2104      	movs	r1, #4
 8004904:	2001      	movs	r0, #1
 8004906:	f003 f8e1 	bl	8007acc <lcd_print>
		lcd_print(2, 6, "RUN");
 800490a:	4a06      	ldr	r2, [pc, #24]	; (8004924 <lcdUpdate+0xa4>)
 800490c:	2106      	movs	r1, #6
 800490e:	2002      	movs	r0, #2
 8004910:	f003 f8dc 	bl	8007acc <lcd_print>
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	0800d988 	.word	0x0800d988
 8004920:	0800d98c 	.word	0x0800d98c
 8004924:	0800d994 	.word	0x0800d994

08004928 <bekle>:

void bekle() {
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
	timer1=millis;
 800492c:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <bekle+0x124>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a47      	ldr	r2, [pc, #284]	; (8004a50 <bekle+0x128>)
 8004932:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004934:	e002      	b.n	800493c <bekle+0x14>
    	butonKontrol = 1;
 8004936:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <bekle+0x12c>)
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800493c:	2101      	movs	r1, #1
 800493e:	4846      	ldr	r0, [pc, #280]	; (8004a58 <bekle+0x130>)
 8004940:	f004 fbea 	bl	8009118 <HAL_GPIO_ReadPin>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d109      	bne.n	800495e <bekle+0x36>
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <bekle+0x124>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <bekle+0x128>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d0ef      	beq.n	8004936 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004956:	e002      	b.n	800495e <bekle+0x36>
    	butonKontrol = 1;
 8004958:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <bekle+0x12c>)
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800495e:	2108      	movs	r1, #8
 8004960:	483e      	ldr	r0, [pc, #248]	; (8004a5c <bekle+0x134>)
 8004962:	f004 fbd9 	bl	8009118 <HAL_GPIO_ReadPin>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d109      	bne.n	8004980 <bekle+0x58>
 800496c:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <bekle+0x124>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <bekle+0x128>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d0ef      	beq.n	8004958 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004978:	e002      	b.n	8004980 <bekle+0x58>
    	butonKontrol = 1;
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <bekle+0x12c>)
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004980:	2102      	movs	r1, #2
 8004982:	4835      	ldr	r0, [pc, #212]	; (8004a58 <bekle+0x130>)
 8004984:	f004 fbc8 	bl	8009118 <HAL_GPIO_ReadPin>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d109      	bne.n	80049a2 <bekle+0x7a>
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <bekle+0x124>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <bekle+0x128>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d0ef      	beq.n	800497a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800499a:	e002      	b.n	80049a2 <bekle+0x7a>
    	butonKontrol = 1;
 800499c:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <bekle+0x12c>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a2:	2104      	movs	r1, #4
 80049a4:	482c      	ldr	r0, [pc, #176]	; (8004a58 <bekle+0x130>)
 80049a6:	f004 fbb7 	bl	8009118 <HAL_GPIO_ReadPin>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d109      	bne.n	80049c4 <bekle+0x9c>
 80049b0:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <bekle+0x124>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <bekle+0x128>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d0ef      	beq.n	800499c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049bc:	e002      	b.n	80049c4 <bekle+0x9c>
    	butonKontrol = 1;
 80049be:	4b25      	ldr	r3, [pc, #148]	; (8004a54 <bekle+0x12c>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049c4:	2108      	movs	r1, #8
 80049c6:	4824      	ldr	r0, [pc, #144]	; (8004a58 <bekle+0x130>)
 80049c8:	f004 fba6 	bl	8009118 <HAL_GPIO_ReadPin>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d109      	bne.n	80049e6 <bekle+0xbe>
 80049d2:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <bekle+0x124>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <bekle+0x128>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d0ef      	beq.n	80049be <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049de:	e002      	b.n	80049e6 <bekle+0xbe>
    	butonKontrol = 1;
 80049e0:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <bekle+0x12c>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	481c      	ldr	r0, [pc, #112]	; (8004a5c <bekle+0x134>)
 80049ea:	f004 fb95 	bl	8009118 <HAL_GPIO_ReadPin>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <bekle+0xe0>
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <bekle+0x124>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <bekle+0x128>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d0ef      	beq.n	80049e0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a00:	e002      	b.n	8004a08 <bekle+0xe0>
    	butonKontrol = 1;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <bekle+0x12c>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a0c:	4813      	ldr	r0, [pc, #76]	; (8004a5c <bekle+0x134>)
 8004a0e:	f004 fb83 	bl	8009118 <HAL_GPIO_ReadPin>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <bekle+0x104>
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <bekle+0x124>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <bekle+0x128>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0ee      	beq.n	8004a02 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a24:	e002      	b.n	8004a2c <bekle+0x104>
    	butonKontrol = 1;
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <bekle+0x12c>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a30:	480a      	ldr	r0, [pc, #40]	; (8004a5c <bekle+0x134>)
 8004a32:	f004 fb71 	bl	8009118 <HAL_GPIO_ReadPin>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <bekle+0x120>
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <bekle+0x124>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <bekle+0x128>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d0ee      	beq.n	8004a26 <bekle+0xfe>
    }

}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200001d0 	.word	0x200001d0
 8004a50:	200001d8 	.word	0x200001d8
 8004a54:	20000223 	.word	0x20000223
 8004a58:	40010800 	.word	0x40010800
 8004a5c:	40011000 	.word	0x40011000

08004a60 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <checkLCDBacklight+0x24>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <checkLCDBacklight+0x28>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b3b      	cmp	r3, #59	; 0x3b
 8004a70:	d903      	bls.n	8004a7a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a72:	2000      	movs	r0, #0
 8004a74:	f003 f876 	bl	8007b64 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004a78:	e002      	b.n	8004a80 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f003 f872 	bl	8007b64 <lcd_backlight>
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	200001d0 	.word	0x200001d0
 8004a88:	200001ec 	.word	0x200001ec

08004a8c <checkBasincSalteri>:

void checkBasincSalteri() {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <checkBasincSalteri+0x54>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <checkBasincSalteri+0x12>
		basincVar=1;
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <checkBasincSalteri+0x58>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <checkBasincSalteri+0x54>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d119      	bne.n	8004ada <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aaa:	480f      	ldr	r0, [pc, #60]	; (8004ae8 <checkBasincSalteri+0x5c>)
 8004aac:	f004 fb34 	bl	8009118 <HAL_GPIO_ReadPin>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <checkBasincSalteri+0x60>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <checkBasincSalteri+0x64>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d90a      	bls.n	8004ada <checkBasincSalteri+0x4e>
				basincVar=1;
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <checkBasincSalteri+0x58>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004aca:	e006      	b.n	8004ada <checkBasincSalteri+0x4e>
			timer5=millis;
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <checkBasincSalteri+0x60>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <checkBasincSalteri+0x64>)
 8004ad2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <checkBasincSalteri+0x58>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200001fb 	.word	0x200001fb
 8004ae4:	200001f7 	.word	0x200001f7
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	200001d0 	.word	0x200001d0
 8004af0:	200001e8 	.word	0x200001e8

08004af4 <checkBasGonder>:

void checkBasGonder() {
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004af8:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <checkBasGonder+0x74>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10b      	bne.n	8004b18 <checkBasGonder+0x24>
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <checkBasGonder+0x78>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <checkBasGonder+0x24>
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <checkBasGonder+0x7c>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004b10:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <checkBasGonder+0x80>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e009      	b.n	8004b2c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <checkBasGonder+0x78>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f083 0301 	eor.w	r3, r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004b26:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <checkBasGonder+0x80>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <checkBasGonder+0x74>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10b      	bne.n	8004b4c <checkBasGonder+0x58>
 8004b34:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <checkBasGonder+0x84>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <checkBasGonder+0x58>
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <checkBasGonder+0x7c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <checkBasGonder+0x88>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004b4a:	e009      	b.n	8004b60 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <checkBasGonder+0x84>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	f083 0301 	eor.w	r3, r3, #1
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <checkBasGonder+0x88>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	200001f5 	.word	0x200001f5
 8004b6c:	20000229 	.word	0x20000229
 8004b70:	20000203 	.word	0x20000203
 8004b74:	20000230 	.word	0x20000230
 8004b78:	2000022c 	.word	0x2000022c
 8004b7c:	20000231 	.word	0x20000231

08004b80 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <checkKapiSecimleri+0x98>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004b8c:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <checkKapiSecimleri+0x98>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d10e      	bne.n	8004bb8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b9e:	4820      	ldr	r0, [pc, #128]	; (8004c20 <checkKapiSecimleri+0xa0>)
 8004ba0:	f004 faba 	bl	8009118 <HAL_GPIO_ReadPin>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004baa:	4b1c      	ldr	r3, [pc, #112]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e002      	b.n	8004bb8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004bb8:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <checkKapiSecimleri+0x98>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d10e      	bne.n	8004bde <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bc4:	4816      	ldr	r0, [pc, #88]	; (8004c20 <checkKapiSecimleri+0xa0>)
 8004bc6:	f004 faa7 	bl	8009118 <HAL_GPIO_ReadPin>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d103      	bne.n	8004bd8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e002      	b.n	8004bde <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004bd8:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004bde:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <checkKapiSecimleri+0x98>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d116      	bne.n	8004c14 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bea:	480d      	ldr	r0, [pc, #52]	; (8004c20 <checkKapiSecimleri+0xa0>)
 8004bec:	f004 fa94 	bl	8009118 <HAL_GPIO_ReadPin>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <checkKapiSecimleri+0x8e>
 8004bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bfa:	4809      	ldr	r0, [pc, #36]	; (8004c20 <checkKapiSecimleri+0xa0>)
 8004bfc:	f004 fa8c 	bl	8009118 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004c0c:	e002      	b.n	8004c14 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004c0e:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <checkKapiSecimleri+0x9c>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200001fc 	.word	0x200001fc
 8004c1c:	20000247 	.word	0x20000247
 8004c20:	40010800 	.word	0x40010800

08004c24 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004c28:	4b62      	ldr	r3, [pc, #392]	; (8004db4 <checkAktifCalisma+0x190>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f041 833e 	bne.w	80062ae <checkAktifCalisma+0x168a>
 8004c32:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <checkAktifCalisma+0x194>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f041 8339 	bne.w	80062ae <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004c3c:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <checkAktifCalisma+0x198>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11a      	bne.n	8004c7a <checkAktifCalisma+0x56>
 8004c44:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <checkAktifCalisma+0x19c>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <checkAktifCalisma+0x56>
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	; (8004dc4 <checkAktifCalisma+0x1a0>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <checkAktifCalisma+0x46>
 8004c54:	4b5c      	ldr	r3, [pc, #368]	; (8004dc8 <checkAktifCalisma+0x1a4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f083 0301 	eor.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <checkAktifCalisma+0x46>
 8004c62:	4b5a      	ldr	r3, [pc, #360]	; (8004dcc <checkAktifCalisma+0x1a8>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d007      	beq.n	8004c7a <checkAktifCalisma+0x56>
 8004c6a:	4b59      	ldr	r3, [pc, #356]	; (8004dd0 <checkAktifCalisma+0x1ac>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <checkAktifCalisma+0x80>
 8004c72:	4b58      	ldr	r3, [pc, #352]	; (8004dd4 <checkAktifCalisma+0x1b0>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d114      	bne.n	8004ca4 <checkAktifCalisma+0x80>
 8004c7a:	4b57      	ldr	r3, [pc, #348]	; (8004dd8 <checkAktifCalisma+0x1b4>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d010      	beq.n	8004ca4 <checkAktifCalisma+0x80>
 8004c82:	4b56      	ldr	r3, [pc, #344]	; (8004ddc <checkAktifCalisma+0x1b8>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c90:	4853      	ldr	r0, [pc, #332]	; (8004de0 <checkAktifCalisma+0x1bc>)
 8004c92:	f004 fa58 	bl	8009146 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004c96:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <checkAktifCalisma+0x1c0>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004c9c:	4b52      	ldr	r3, [pc, #328]	; (8004de8 <checkAktifCalisma+0x1c4>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e008      	b.n	8004cb6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004caa:	484d      	ldr	r0, [pc, #308]	; (8004de0 <checkAktifCalisma+0x1bc>)
 8004cac:	f004 fa4b 	bl	8009146 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004cb0:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <checkAktifCalisma+0x1c0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004cb6:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <checkAktifCalisma+0x194>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d160      	bne.n	8004d80 <checkAktifCalisma+0x15c>
 8004cbe:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <checkAktifCalisma+0x1b4>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d05c      	beq.n	8004d80 <checkAktifCalisma+0x15c>
 8004cc6:	4b45      	ldr	r3, [pc, #276]	; (8004ddc <checkAktifCalisma+0x1b8>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d058      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cd2:	4843      	ldr	r0, [pc, #268]	; (8004de0 <checkAktifCalisma+0x1bc>)
 8004cd4:	f004 fa20 	bl	8009118 <HAL_GPIO_ReadPin>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <checkAktifCalisma+0xc2>
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <checkAktifCalisma+0x1c8>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04c      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ce6:	2102      	movs	r1, #2
 8004ce8:	4841      	ldr	r0, [pc, #260]	; (8004df0 <checkAktifCalisma+0x1cc>)
 8004cea:	f004 fa15 	bl	8009118 <HAL_GPIO_ReadPin>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d145      	bne.n	8004d80 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004cf4:	4b3f      	ldr	r3, [pc, #252]	; (8004df4 <checkAktifCalisma+0x1d0>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d041      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d00:	4837      	ldr	r0, [pc, #220]	; (8004de0 <checkAktifCalisma+0x1bc>)
 8004d02:	f004 fa09 	bl	8009118 <HAL_GPIO_ReadPin>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10e      	bne.n	8004d2a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d10:	4833      	ldr	r0, [pc, #204]	; (8004de0 <checkAktifCalisma+0x1bc>)
 8004d12:	f004 fa01 	bl	8009118 <HAL_GPIO_ReadPin>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d106      	bne.n	8004d2a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004d1c:	2140      	movs	r1, #64	; 0x40
 8004d1e:	4834      	ldr	r0, [pc, #208]	; (8004df0 <checkAktifCalisma+0x1cc>)
 8004d20:	f004 f9fa 	bl	8009118 <HAL_GPIO_ReadPin>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d003      	beq.n	8004d32 <checkAktifCalisma+0x10e>
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <checkAktifCalisma+0x198>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d026      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <checkAktifCalisma+0x1a0>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01f      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <checkAktifCalisma+0x19c>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <checkAktifCalisma+0x1ac>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f083 0301 	eor.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d011      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d5c:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <checkAktifCalisma+0x1d4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <checkAktifCalisma+0x1d8>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	f083 0301 	eor.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <checkAktifCalisma+0x198>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e002      	b.n	8004d86 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <checkAktifCalisma+0x198>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <checkAktifCalisma+0x198>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03a      	beq.n	8004e04 <checkAktifCalisma+0x1e0>
 8004d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d92:	4817      	ldr	r0, [pc, #92]	; (8004df0 <checkAktifCalisma+0x1cc>)
 8004d94:	f004 f9c0 	bl	8009118 <HAL_GPIO_ReadPin>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d132      	bne.n	8004e04 <checkAktifCalisma+0x1e0>
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <checkAktifCalisma+0x1dc>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02e      	beq.n	8004e04 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004da6:	2201      	movs	r2, #1
 8004da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dac:	480c      	ldr	r0, [pc, #48]	; (8004de0 <checkAktifCalisma+0x1bc>)
 8004dae:	f004 f9ca 	bl	8009146 <HAL_GPIO_WritePin>
 8004db2:	e02d      	b.n	8004e10 <checkAktifCalisma+0x1ec>
 8004db4:	20000212 	.word	0x20000212
 8004db8:	20000211 	.word	0x20000211
 8004dbc:	20000229 	.word	0x20000229
 8004dc0:	2000022a 	.word	0x2000022a
 8004dc4:	2000022c 	.word	0x2000022c
 8004dc8:	20000224 	.word	0x20000224
 8004dcc:	20000207 	.word	0x20000207
 8004dd0:	2000022b 	.word	0x2000022b
 8004dd4:	20000206 	.word	0x20000206
 8004dd8:	20000246 	.word	0x20000246
 8004ddc:	20000247 	.word	0x20000247
 8004de0:	40010c00 	.word	0x40010c00
 8004de4:	20000248 	.word	0x20000248
 8004de8:	20000233 	.word	0x20000233
 8004dec:	20000230 	.word	0x20000230
 8004df0:	40011000 	.word	0x40011000
 8004df4:	200001f7 	.word	0x200001f7
 8004df8:	2000022e 	.word	0x2000022e
 8004dfc:	2000022f 	.word	0x2000022f
 8004e00:	20000202 	.word	0x20000202
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e0a:	4860      	ldr	r0, [pc, #384]	; (8004f8c <checkAktifCalisma+0x368>)
 8004e0c:	f004 f99b 	bl	8009146 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004e10:	4b5f      	ldr	r3, [pc, #380]	; (8004f90 <checkAktifCalisma+0x36c>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <checkAktifCalisma+0x21c>
 8004e18:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <checkAktifCalisma+0x370>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d007      	beq.n	8004e30 <checkAktifCalisma+0x20c>
 8004e20:	4b5c      	ldr	r3, [pc, #368]	; (8004f94 <checkAktifCalisma+0x370>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d003      	beq.n	8004e30 <checkAktifCalisma+0x20c>
 8004e28:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <checkAktifCalisma+0x374>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d107      	bne.n	8004e40 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004e30:	2201      	movs	r2, #1
 8004e32:	2104      	movs	r1, #4
 8004e34:	4855      	ldr	r0, [pc, #340]	; (8004f8c <checkAktifCalisma+0x368>)
 8004e36:	f004 f986 	bl	8009146 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004e3a:	4b58      	ldr	r3, [pc, #352]	; (8004f9c <checkAktifCalisma+0x378>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004e40:	4b56      	ldr	r3, [pc, #344]	; (8004f9c <checkAktifCalisma+0x378>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02f      	beq.n	8004ea8 <checkAktifCalisma+0x284>
 8004e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e4c:	484f      	ldr	r0, [pc, #316]	; (8004f8c <checkAktifCalisma+0x368>)
 8004e4e:	f004 f963 	bl	8009118 <HAL_GPIO_ReadPin>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d106      	bne.n	8004e66 <checkAktifCalisma+0x242>
 8004e58:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <checkAktifCalisma+0x37c>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f083 0301 	eor.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <checkAktifCalisma+0x250>
 8004e66:	2102      	movs	r1, #2
 8004e68:	484e      	ldr	r0, [pc, #312]	; (8004fa4 <checkAktifCalisma+0x380>)
 8004e6a:	f004 f955 	bl	8009118 <HAL_GPIO_ReadPin>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d119      	bne.n	8004ea8 <checkAktifCalisma+0x284>
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <checkAktifCalisma+0x384>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <checkAktifCalisma+0x284>
 8004e7c:	4b4b      	ldr	r3, [pc, #300]	; (8004fac <checkAktifCalisma+0x388>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d011      	beq.n	8004ea8 <checkAktifCalisma+0x284>
 8004e84:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <checkAktifCalisma+0x38c>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <checkAktifCalisma+0x284>
 8004e8c:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <checkAktifCalisma+0x390>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f083 0301 	eor.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <checkAktifCalisma+0x284>
			timer2=millis;
 8004e9a:	4b47      	ldr	r3, [pc, #284]	; (8004fb8 <checkAktifCalisma+0x394>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a47      	ldr	r2, [pc, #284]	; (8004fbc <checkAktifCalisma+0x398>)
 8004ea0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004ea2:	4b44      	ldr	r3, [pc, #272]	; (8004fb4 <checkAktifCalisma+0x390>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <checkAktifCalisma+0x394>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <checkAktifCalisma+0x398>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	4a43      	ldr	r2, [pc, #268]	; (8004fc0 <checkAktifCalisma+0x39c>)
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d303      	bcc.n	8004ec2 <checkAktifCalisma+0x29e>
 8004eba:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <checkAktifCalisma+0x390>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d111      	bne.n	8004ee6 <checkAktifCalisma+0x2c2>
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <checkAktifCalisma+0x384>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	f083 0301 	eor.w	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <checkAktifCalisma+0x2c2>
 8004ed0:	4b36      	ldr	r3, [pc, #216]	; (8004fac <checkAktifCalisma+0x388>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f083 0301 	eor.w	r3, r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <checkAktifCalisma+0x2c2>
 8004ede:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <checkAktifCalisma+0x38c>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2104      	movs	r1, #4
 8004eea:	4828      	ldr	r0, [pc, #160]	; (8004f8c <checkAktifCalisma+0x368>)
 8004eec:	f004 f92b 	bl	8009146 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <checkAktifCalisma+0x378>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <checkAktifCalisma+0x390>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004efc:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <checkAktifCalisma+0x3a0>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004f04:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <checkAktifCalisma+0x3a4>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004f0a:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <checkAktifCalisma+0x3a0>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d116      	bne.n	8004f40 <checkAktifCalisma+0x31c>
 8004f12:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <checkAktifCalisma+0x3a8>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d112      	bne.n	8004f40 <checkAktifCalisma+0x31c>
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4821      	ldr	r0, [pc, #132]	; (8004fa4 <checkAktifCalisma+0x380>)
 8004f1e:	f004 f8fb 	bl	8009118 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <checkAktifCalisma+0x31c>
 8004f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f2c:	4817      	ldr	r0, [pc, #92]	; (8004f8c <checkAktifCalisma+0x368>)
 8004f2e:	f004 f8f3 	bl	8009118 <HAL_GPIO_ReadPin>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <checkAktifCalisma+0x3a4>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e011      	b.n	8004f64 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <checkAktifCalisma+0x3a0>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10d      	bne.n	8004f64 <checkAktifCalisma+0x340>
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4816      	ldr	r0, [pc, #88]	; (8004fa4 <checkAktifCalisma+0x380>)
 8004f4c:	f004 f8e4 	bl	8009118 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d106      	bne.n	8004f64 <checkAktifCalisma+0x340>
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <checkAktifCalisma+0x3a8>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <checkAktifCalisma+0x3a4>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <checkAktifCalisma+0x3a0>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d134      	bne.n	8004fd6 <checkAktifCalisma+0x3b2>
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <checkAktifCalisma+0x3a8>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d130      	bne.n	8004fd6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f74:	2101      	movs	r1, #1
 8004f76:	480b      	ldr	r0, [pc, #44]	; (8004fa4 <checkAktifCalisma+0x380>)
 8004f78:	f004 f8ce 	bl	8009118 <HAL_GPIO_ReadPin>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d126      	bne.n	8004fd0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <checkAktifCalisma+0x3a4>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e025      	b.n	8004fd6 <checkAktifCalisma+0x3b2>
 8004f8a:	bf00      	nop
 8004f8c:	40010c00 	.word	0x40010c00
 8004f90:	20000229 	.word	0x20000229
 8004f94:	20000203 	.word	0x20000203
 8004f98:	20000207 	.word	0x20000207
 8004f9c:	2000022d 	.word	0x2000022d
 8004fa0:	20000230 	.word	0x20000230
 8004fa4:	40011000 	.word	0x40011000
 8004fa8:	20000246 	.word	0x20000246
 8004fac:	20000247 	.word	0x20000247
 8004fb0:	200001f7 	.word	0x200001f7
 8004fb4:	20000225 	.word	0x20000225
 8004fb8:	200001d0 	.word	0x200001d0
 8004fbc:	200001dc 	.word	0x200001dc
 8004fc0:	20000208 	.word	0x20000208
 8004fc4:	200001f8 	.word	0x200001f8
 8004fc8:	2000024b 	.word	0x2000024b
 8004fcc:	200001f5 	.word	0x200001f5
			} else {
				cerceveVar=0;
 8004fd0:	4b7f      	ldr	r3, [pc, #508]	; (80051d0 <checkAktifCalisma+0x5ac>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004fd6:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <checkAktifCalisma+0x5b0>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d17c      	bne.n	80050d8 <checkAktifCalisma+0x4b4>
 8004fde:	4b7e      	ldr	r3, [pc, #504]	; (80051d8 <checkAktifCalisma+0x5b4>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d078      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
 8004fe6:	4b7d      	ldr	r3, [pc, #500]	; (80051dc <checkAktifCalisma+0x5b8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d074      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ff2:	487b      	ldr	r0, [pc, #492]	; (80051e0 <checkAktifCalisma+0x5bc>)
 8004ff4:	f004 f890 	bl	8009118 <HAL_GPIO_ReadPin>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <checkAktifCalisma+0x3e2>
 8004ffe:	4b79      	ldr	r3, [pc, #484]	; (80051e4 <checkAktifCalisma+0x5c0>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d068      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005006:	4b72      	ldr	r3, [pc, #456]	; (80051d0 <checkAktifCalisma+0x5ac>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d064      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
 800500e:	4b76      	ldr	r3, [pc, #472]	; (80051e8 <checkAktifCalisma+0x5c4>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f083 0301 	eor.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05d      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800501c:	2104      	movs	r1, #4
 800501e:	4873      	ldr	r0, [pc, #460]	; (80051ec <checkAktifCalisma+0x5c8>)
 8005020:	f004 f87a 	bl	8009118 <HAL_GPIO_ReadPin>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <checkAktifCalisma+0x40e>
 800502a:	4b71      	ldr	r3, [pc, #452]	; (80051f0 <checkAktifCalisma+0x5cc>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d152      	bne.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005036:	486a      	ldr	r0, [pc, #424]	; (80051e0 <checkAktifCalisma+0x5bc>)
 8005038:	f004 f86e 	bl	8009118 <HAL_GPIO_ReadPin>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10e      	bne.n	8005060 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005046:	4866      	ldr	r0, [pc, #408]	; (80051e0 <checkAktifCalisma+0x5bc>)
 8005048:	f004 f866 	bl	8009118 <HAL_GPIO_ReadPin>
 800504c:	4603      	mov	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d106      	bne.n	8005060 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005052:	2140      	movs	r1, #64	; 0x40
 8005054:	4865      	ldr	r0, [pc, #404]	; (80051ec <checkAktifCalisma+0x5c8>)
 8005056:	f004 f85f 	bl	8009118 <HAL_GPIO_ReadPin>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d003      	beq.n	8005068 <checkAktifCalisma+0x444>
 8005060:	4b64      	ldr	r3, [pc, #400]	; (80051f4 <checkAktifCalisma+0x5d0>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d037      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005068:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <checkAktifCalisma+0x5d4>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f083 0301 	eor.w	r3, r3, #1
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d030      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005076:	4b61      	ldr	r3, [pc, #388]	; (80051fc <checkAktifCalisma+0x5d8>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f083 0301 	eor.w	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d029      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005084:	4b5e      	ldr	r3, [pc, #376]	; (8005200 <checkAktifCalisma+0x5dc>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f083 0301 	eor.w	r3, r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d022      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005092:	4b5c      	ldr	r3, [pc, #368]	; (8005204 <checkAktifCalisma+0x5e0>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f083 0301 	eor.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80050a0:	4b59      	ldr	r3, [pc, #356]	; (8005208 <checkAktifCalisma+0x5e4>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f083 0301 	eor.w	r3, r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80050ae:	4b57      	ldr	r3, [pc, #348]	; (800520c <checkAktifCalisma+0x5e8>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f083 0301 	eor.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80050bc:	2201      	movs	r2, #1
 80050be:	2102      	movs	r1, #2
 80050c0:	4847      	ldr	r0, [pc, #284]	; (80051e0 <checkAktifCalisma+0x5bc>)
 80050c2:	f004 f840 	bl	8009146 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80050c6:	4b4b      	ldr	r3, [pc, #300]	; (80051f4 <checkAktifCalisma+0x5d0>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80050cc:	4b50      	ldr	r3, [pc, #320]	; (8005210 <checkAktifCalisma+0x5ec>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80050d2:	4b50      	ldr	r3, [pc, #320]	; (8005214 <checkAktifCalisma+0x5f0>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80050d8:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <checkAktifCalisma+0x5d0>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d033      	beq.n	8005148 <checkAktifCalisma+0x524>
 80050e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050e4:	483e      	ldr	r0, [pc, #248]	; (80051e0 <checkAktifCalisma+0x5bc>)
 80050e6:	f004 f817 	bl	8009118 <HAL_GPIO_ReadPin>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <checkAktifCalisma+0x4da>
 80050f0:	4b3c      	ldr	r3, [pc, #240]	; (80051e4 <checkAktifCalisma+0x5c0>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f083 0301 	eor.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <checkAktifCalisma+0x4f0>
 80050fe:	2104      	movs	r1, #4
 8005100:	483a      	ldr	r0, [pc, #232]	; (80051ec <checkAktifCalisma+0x5c8>)
 8005102:	f004 f809 	bl	8009118 <HAL_GPIO_ReadPin>
 8005106:	4603      	mov	r3, r0
 8005108:	2b01      	cmp	r3, #1
 800510a:	d11d      	bne.n	8005148 <checkAktifCalisma+0x524>
 800510c:	4b38      	ldr	r3, [pc, #224]	; (80051f0 <checkAktifCalisma+0x5cc>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <checkAktifCalisma+0x524>
 8005114:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <checkAktifCalisma+0x5b4>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <checkAktifCalisma+0x524>
 800511c:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <checkAktifCalisma+0x5b8>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d011      	beq.n	8005148 <checkAktifCalisma+0x524>
 8005124:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <checkAktifCalisma+0x5ac>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <checkAktifCalisma+0x524>
 800512c:	4b3a      	ldr	r3, [pc, #232]	; (8005218 <checkAktifCalisma+0x5f4>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f083 0301 	eor.w	r3, r3, #1
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <checkAktifCalisma+0x524>
			timer2=millis;
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <checkAktifCalisma+0x5f8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <checkAktifCalisma+0x5fc>)
 8005140:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005142:	4b35      	ldr	r3, [pc, #212]	; (8005218 <checkAktifCalisma+0x5f4>)
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005148:	4b34      	ldr	r3, [pc, #208]	; (800521c <checkAktifCalisma+0x5f8>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b34      	ldr	r3, [pc, #208]	; (8005220 <checkAktifCalisma+0x5fc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	4a34      	ldr	r2, [pc, #208]	; (8005224 <checkAktifCalisma+0x600>)
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	4293      	cmp	r3, r2
 8005158:	d303      	bcc.n	8005162 <checkAktifCalisma+0x53e>
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <checkAktifCalisma+0x5f4>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d114      	bne.n	800518c <checkAktifCalisma+0x568>
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <checkAktifCalisma+0x5b4>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	f083 0301 	eor.w	r3, r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10d      	bne.n	800518c <checkAktifCalisma+0x568>
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <checkAktifCalisma+0x5b8>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f083 0301 	eor.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <checkAktifCalisma+0x568>
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <checkAktifCalisma+0x5ac>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f083 0301 	eor.w	r3, r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800518c:	2200      	movs	r2, #0
 800518e:	2102      	movs	r1, #2
 8005190:	4813      	ldr	r0, [pc, #76]	; (80051e0 <checkAktifCalisma+0x5bc>)
 8005192:	f003 ffd8 	bl	8009146 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <checkAktifCalisma+0x5d0>)
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800519c:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <checkAktifCalisma+0x5f4>)
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <checkAktifCalisma+0x5d0>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d040      	beq.n	800522c <checkAktifCalisma+0x608>
 80051aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051ae:	480f      	ldr	r0, [pc, #60]	; (80051ec <checkAktifCalisma+0x5c8>)
 80051b0:	f003 ffb2 	bl	8009118 <HAL_GPIO_ReadPin>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d138      	bne.n	800522c <checkAktifCalisma+0x608>
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <checkAktifCalisma+0x604>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d034      	beq.n	800522c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80051c2:	2201      	movs	r2, #1
 80051c4:	2101      	movs	r1, #1
 80051c6:	4806      	ldr	r0, [pc, #24]	; (80051e0 <checkAktifCalisma+0x5bc>)
 80051c8:	f003 ffbd 	bl	8009146 <HAL_GPIO_WritePin>
 80051cc:	e033      	b.n	8005236 <checkAktifCalisma+0x612>
 80051ce:	bf00      	nop
 80051d0:	2000024b 	.word	0x2000024b
 80051d4:	20000211 	.word	0x20000211
 80051d8:	20000246 	.word	0x20000246
 80051dc:	20000247 	.word	0x20000247
 80051e0:	40010c00 	.word	0x40010c00
 80051e4:	20000231 	.word	0x20000231
 80051e8:	20000245 	.word	0x20000245
 80051ec:	40011000 	.word	0x40011000
 80051f0:	200001fa 	.word	0x200001fa
 80051f4:	2000022c 	.word	0x2000022c
 80051f8:	20000229 	.word	0x20000229
 80051fc:	2000022d 	.word	0x2000022d
 8005200:	2000022a 	.word	0x2000022a
 8005204:	2000022b 	.word	0x2000022b
 8005208:	2000022e 	.word	0x2000022e
 800520c:	2000022f 	.word	0x2000022f
 8005210:	20000234 	.word	0x20000234
 8005214:	20000255 	.word	0x20000255
 8005218:	20000224 	.word	0x20000224
 800521c:	200001d0 	.word	0x200001d0
 8005220:	200001dc 	.word	0x200001dc
 8005224:	20000209 	.word	0x20000209
 8005228:	200001f9 	.word	0x200001f9
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800522c:	2200      	movs	r2, #0
 800522e:	2101      	movs	r1, #1
 8005230:	4836      	ldr	r0, [pc, #216]	; (800530c <checkAktifCalisma+0x6e8>)
 8005232:	f003 ff88 	bl	8009146 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <checkAktifCalisma+0x6ec>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8080 	bne.w	8005340 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005240:	4b34      	ldr	r3, [pc, #208]	; (8005314 <checkAktifCalisma+0x6f0>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d003      	beq.n	8005250 <checkAktifCalisma+0x62c>
 8005248:	4b32      	ldr	r3, [pc, #200]	; (8005314 <checkAktifCalisma+0x6f0>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d177      	bne.n	8005340 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005250:	4b31      	ldr	r3, [pc, #196]	; (8005318 <checkAktifCalisma+0x6f4>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d073      	beq.n	8005340 <checkAktifCalisma+0x71c>
 8005258:	4b30      	ldr	r3, [pc, #192]	; (800531c <checkAktifCalisma+0x6f8>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d06f      	beq.n	8005340 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005264:	4829      	ldr	r0, [pc, #164]	; (800530c <checkAktifCalisma+0x6e8>)
 8005266:	f003 ff57 	bl	8009118 <HAL_GPIO_ReadPin>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d167      	bne.n	8005340 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005274:	482a      	ldr	r0, [pc, #168]	; (8005320 <checkAktifCalisma+0x6fc>)
 8005276:	f003 ff4f 	bl	8009118 <HAL_GPIO_ReadPin>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <checkAktifCalisma+0x664>
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <checkAktifCalisma+0x700>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d15b      	bne.n	8005340 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	4825      	ldr	r0, [pc, #148]	; (8005320 <checkAktifCalisma+0x6fc>)
 800528c:	f003 ff44 	bl	8009118 <HAL_GPIO_ReadPin>
 8005290:	4603      	mov	r3, r0
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10f      	bne.n	80052b6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800529a:	481c      	ldr	r0, [pc, #112]	; (800530c <checkAktifCalisma+0x6e8>)
 800529c:	f003 ff3c 	bl	8009118 <HAL_GPIO_ReadPin>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d107      	bne.n	80052b6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80052a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052aa:	4818      	ldr	r0, [pc, #96]	; (800530c <checkAktifCalisma+0x6e8>)
 80052ac:	f003 ff34 	bl	8009118 <HAL_GPIO_ReadPin>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d003      	beq.n	80052be <checkAktifCalisma+0x69a>
 80052b6:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <checkAktifCalisma+0x704>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d040      	beq.n	8005340 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <checkAktifCalisma+0x708>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d039      	beq.n	8005340 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80052cc:	4b18      	ldr	r3, [pc, #96]	; (8005330 <checkAktifCalisma+0x70c>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f083 0301 	eor.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d032      	beq.n	8005340 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80052da:	4b16      	ldr	r3, [pc, #88]	; (8005334 <checkAktifCalisma+0x710>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f083 0301 	eor.w	r3, r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02b      	beq.n	8005340 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <checkAktifCalisma+0x714>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f083 0301 	eor.w	r3, r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d024      	beq.n	8005340 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80052f6:	4b11      	ldr	r3, [pc, #68]	; (800533c <checkAktifCalisma+0x718>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01d      	beq.n	8005340 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005304:	4b08      	ldr	r3, [pc, #32]	; (8005328 <checkAktifCalisma+0x704>)
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e01c      	b.n	8005346 <checkAktifCalisma+0x722>
 800530c:	40010c00 	.word	0x40010c00
 8005310:	20000211 	.word	0x20000211
 8005314:	20000203 	.word	0x20000203
 8005318:	20000246 	.word	0x20000246
 800531c:	20000247 	.word	0x20000247
 8005320:	40011000 	.word	0x40011000
 8005324:	20000204 	.word	0x20000204
 8005328:	2000022a 	.word	0x2000022a
 800532c:	20000229 	.word	0x20000229
 8005330:	2000022d 	.word	0x2000022d
 8005334:	2000022c 	.word	0x2000022c
 8005338:	2000022b 	.word	0x2000022b
 800533c:	2000022f 	.word	0x2000022f
		} else {
			devmotoryukaricalisiyor=0;
 8005340:	4b64      	ldr	r3, [pc, #400]	; (80054d4 <checkAktifCalisma+0x8b0>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005346:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <checkAktifCalisma+0x8b0>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800534e:	2201      	movs	r2, #1
 8005350:	2120      	movs	r1, #32
 8005352:	4861      	ldr	r0, [pc, #388]	; (80054d8 <checkAktifCalisma+0x8b4>)
 8005354:	f003 fef7 	bl	8009146 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005358:	4b60      	ldr	r3, [pc, #384]	; (80054dc <checkAktifCalisma+0x8b8>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800535e:	4b5f      	ldr	r3, [pc, #380]	; (80054dc <checkAktifCalisma+0x8b8>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d025      	beq.n	80053b2 <checkAktifCalisma+0x78e>
 8005366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536a:	485d      	ldr	r0, [pc, #372]	; (80054e0 <checkAktifCalisma+0x8bc>)
 800536c:	f003 fed4 	bl	8009118 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d007      	beq.n	8005386 <checkAktifCalisma+0x762>
 8005376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800537a:	4857      	ldr	r0, [pc, #348]	; (80054d8 <checkAktifCalisma+0x8b4>)
 800537c:	f003 fecc 	bl	8009118 <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d115      	bne.n	80053b2 <checkAktifCalisma+0x78e>
 8005386:	4b57      	ldr	r3, [pc, #348]	; (80054e4 <checkAktifCalisma+0x8c0>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <checkAktifCalisma+0x78e>
 800538e:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <checkAktifCalisma+0x8c4>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <checkAktifCalisma+0x78e>
 8005396:	4b55      	ldr	r3, [pc, #340]	; (80054ec <checkAktifCalisma+0x8c8>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <checkAktifCalisma+0x78e>
			timer2=millis;
 80053a4:	4b52      	ldr	r3, [pc, #328]	; (80054f0 <checkAktifCalisma+0x8cc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a52      	ldr	r2, [pc, #328]	; (80054f4 <checkAktifCalisma+0x8d0>)
 80053aa:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80053ac:	4b4f      	ldr	r3, [pc, #316]	; (80054ec <checkAktifCalisma+0x8c8>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80053b2:	4b4f      	ldr	r3, [pc, #316]	; (80054f0 <checkAktifCalisma+0x8cc>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b4f      	ldr	r3, [pc, #316]	; (80054f4 <checkAktifCalisma+0x8d0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	4a4e      	ldr	r2, [pc, #312]	; (80054f8 <checkAktifCalisma+0x8d4>)
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d303      	bcc.n	80053cc <checkAktifCalisma+0x7a8>
 80053c4:	4b49      	ldr	r3, [pc, #292]	; (80054ec <checkAktifCalisma+0x8c8>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10d      	bne.n	80053e8 <checkAktifCalisma+0x7c4>
 80053cc:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <checkAktifCalisma+0x8c0>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f083 0301 	eor.w	r3, r3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <checkAktifCalisma+0x7c4>
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <checkAktifCalisma+0x8c4>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f083 0301 	eor.w	r3, r3, #1
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80053e8:	2200      	movs	r2, #0
 80053ea:	2120      	movs	r1, #32
 80053ec:	483a      	ldr	r0, [pc, #232]	; (80054d8 <checkAktifCalisma+0x8b4>)
 80053ee:	f003 feaa 	bl	8009146 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80053f2:	4b3a      	ldr	r3, [pc, #232]	; (80054dc <checkAktifCalisma+0x8b8>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80053f8:	4b3c      	ldr	r3, [pc, #240]	; (80054ec <checkAktifCalisma+0x8c8>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <checkAktifCalisma+0x8d8>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f040 8088 	bne.w	8005518 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005408:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <checkAktifCalisma+0x8dc>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d003      	beq.n	8005418 <checkAktifCalisma+0x7f4>
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <checkAktifCalisma+0x8dc>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d17f      	bne.n	8005518 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005418:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <checkAktifCalisma+0x8c0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d07b      	beq.n	8005518 <checkAktifCalisma+0x8f4>
 8005420:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <checkAktifCalisma+0x8c4>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d077      	beq.n	8005518 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005428:	2140      	movs	r1, #64	; 0x40
 800542a:	482b      	ldr	r0, [pc, #172]	; (80054d8 <checkAktifCalisma+0x8b4>)
 800542c:	f003 fe74 	bl	8009118 <HAL_GPIO_ReadPin>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d170      	bne.n	8005518 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800543a:	4827      	ldr	r0, [pc, #156]	; (80054d8 <checkAktifCalisma+0x8b4>)
 800543c:	f003 fe6c 	bl	8009118 <HAL_GPIO_ReadPin>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <checkAktifCalisma+0x82a>
 8005446:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <checkAktifCalisma+0x8e0>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d164      	bne.n	8005518 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800544e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005452:	4823      	ldr	r0, [pc, #140]	; (80054e0 <checkAktifCalisma+0x8bc>)
 8005454:	f003 fe60 	bl	8009118 <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10f      	bne.n	800547e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800545e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005462:	481f      	ldr	r0, [pc, #124]	; (80054e0 <checkAktifCalisma+0x8bc>)
 8005464:	f003 fe58 	bl	8009118 <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800546e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005472:	481b      	ldr	r0, [pc, #108]	; (80054e0 <checkAktifCalisma+0x8bc>)
 8005474:	f003 fe50 	bl	8009118 <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d003      	beq.n	8005486 <checkAktifCalisma+0x862>
 800547e:	4b22      	ldr	r3, [pc, #136]	; (8005508 <checkAktifCalisma+0x8e4>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d048      	beq.n	8005518 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <checkAktifCalisma+0x8e8>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f083 0301 	eor.w	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d041      	beq.n	8005518 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005494:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <checkAktifCalisma+0x8ec>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f083 0301 	eor.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03a      	beq.n	8005518 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80054a2:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <checkAktifCalisma+0x8f0>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f083 0301 	eor.w	r3, r3, #1
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d033      	beq.n	8005518 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <checkAktifCalisma+0x8b8>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f083 0301 	eor.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d02c      	beq.n	8005518 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <checkAktifCalisma+0x8b0>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	f083 0301 	eor.w	r3, r3, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d025      	beq.n	8005518 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <checkAktifCalisma+0x8e4>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e024      	b.n	800551e <checkAktifCalisma+0x8fa>
 80054d4:	2000022a 	.word	0x2000022a
 80054d8:	40011000 	.word	0x40011000
 80054dc:	2000022e 	.word	0x2000022e
 80054e0:	40010c00 	.word	0x40010c00
 80054e4:	20000246 	.word	0x20000246
 80054e8:	20000247 	.word	0x20000247
 80054ec:	20000226 	.word	0x20000226
 80054f0:	200001d0 	.word	0x200001d0
 80054f4:	200001dc 	.word	0x200001dc
 80054f8:	2000020a 	.word	0x2000020a
 80054fc:	20000211 	.word	0x20000211
 8005500:	20000203 	.word	0x20000203
 8005504:	20000205 	.word	0x20000205
 8005508:	2000022b 	.word	0x2000022b
 800550c:	20000229 	.word	0x20000229
 8005510:	2000022d 	.word	0x2000022d
 8005514:	2000022c 	.word	0x2000022c
		} else {
			devmotorasagicalisiyor=0;
 8005518:	4b96      	ldr	r3, [pc, #600]	; (8005774 <checkAktifCalisma+0xb50>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800551e:	4b95      	ldr	r3, [pc, #596]	; (8005774 <checkAktifCalisma+0xb50>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005526:	2201      	movs	r2, #1
 8005528:	2110      	movs	r1, #16
 800552a:	4893      	ldr	r0, [pc, #588]	; (8005778 <checkAktifCalisma+0xb54>)
 800552c:	f003 fe0b 	bl	8009146 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005530:	4b92      	ldr	r3, [pc, #584]	; (800577c <checkAktifCalisma+0xb58>)
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005536:	4b91      	ldr	r3, [pc, #580]	; (800577c <checkAktifCalisma+0xb58>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d024      	beq.n	8005588 <checkAktifCalisma+0x964>
 800553e:	2140      	movs	r1, #64	; 0x40
 8005540:	488d      	ldr	r0, [pc, #564]	; (8005778 <checkAktifCalisma+0xb54>)
 8005542:	f003 fde9 	bl	8009118 <HAL_GPIO_ReadPin>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d007      	beq.n	800555c <checkAktifCalisma+0x938>
 800554c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005550:	4889      	ldr	r0, [pc, #548]	; (8005778 <checkAktifCalisma+0xb54>)
 8005552:	f003 fde1 	bl	8009118 <HAL_GPIO_ReadPin>
 8005556:	4603      	mov	r3, r0
 8005558:	2b01      	cmp	r3, #1
 800555a:	d115      	bne.n	8005588 <checkAktifCalisma+0x964>
 800555c:	4b88      	ldr	r3, [pc, #544]	; (8005780 <checkAktifCalisma+0xb5c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d011      	beq.n	8005588 <checkAktifCalisma+0x964>
 8005564:	4b87      	ldr	r3, [pc, #540]	; (8005784 <checkAktifCalisma+0xb60>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <checkAktifCalisma+0x964>
 800556c:	4b86      	ldr	r3, [pc, #536]	; (8005788 <checkAktifCalisma+0xb64>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <checkAktifCalisma+0x964>
			timer2=millis;
 800557a:	4b84      	ldr	r3, [pc, #528]	; (800578c <checkAktifCalisma+0xb68>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a84      	ldr	r2, [pc, #528]	; (8005790 <checkAktifCalisma+0xb6c>)
 8005580:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005582:	4b81      	ldr	r3, [pc, #516]	; (8005788 <checkAktifCalisma+0xb64>)
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005588:	4b80      	ldr	r3, [pc, #512]	; (800578c <checkAktifCalisma+0xb68>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b80      	ldr	r3, [pc, #512]	; (8005790 <checkAktifCalisma+0xb6c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	4a80      	ldr	r2, [pc, #512]	; (8005794 <checkAktifCalisma+0xb70>)
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	4293      	cmp	r3, r2
 8005598:	d303      	bcc.n	80055a2 <checkAktifCalisma+0x97e>
 800559a:	4b7b      	ldr	r3, [pc, #492]	; (8005788 <checkAktifCalisma+0xb64>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <checkAktifCalisma+0x99a>
 80055a2:	4b77      	ldr	r3, [pc, #476]	; (8005780 <checkAktifCalisma+0xb5c>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <checkAktifCalisma+0x99a>
 80055b0:	4b74      	ldr	r3, [pc, #464]	; (8005784 <checkAktifCalisma+0xb60>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80055be:	2200      	movs	r2, #0
 80055c0:	2110      	movs	r1, #16
 80055c2:	486d      	ldr	r0, [pc, #436]	; (8005778 <checkAktifCalisma+0xb54>)
 80055c4:	f003 fdbf 	bl	8009146 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80055c8:	4b6c      	ldr	r3, [pc, #432]	; (800577c <checkAktifCalisma+0xb58>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80055ce:	4b6e      	ldr	r3, [pc, #440]	; (8005788 <checkAktifCalisma+0xb64>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80055d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055d8:	486f      	ldr	r0, [pc, #444]	; (8005798 <checkAktifCalisma+0xb74>)
 80055da:	f003 fd9d 	bl	8009118 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d120      	bne.n	8005626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80055e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055e8:	486b      	ldr	r0, [pc, #428]	; (8005798 <checkAktifCalisma+0xb74>)
 80055ea:	f003 fd95 	bl	8009118 <HAL_GPIO_ReadPin>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d118      	bne.n	8005626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80055f4:	2104      	movs	r1, #4
 80055f6:	4868      	ldr	r0, [pc, #416]	; (8005798 <checkAktifCalisma+0xb74>)
 80055f8:	f003 fd8e 	bl	8009118 <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d111      	bne.n	8005626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005602:	2102      	movs	r1, #2
 8005604:	4864      	ldr	r0, [pc, #400]	; (8005798 <checkAktifCalisma+0xb74>)
 8005606:	f003 fd87 	bl	8009118 <HAL_GPIO_ReadPin>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005610:	2101      	movs	r1, #1
 8005612:	4861      	ldr	r0, [pc, #388]	; (8005798 <checkAktifCalisma+0xb74>)
 8005614:	f003 fd80 	bl	8009118 <HAL_GPIO_ReadPin>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <checkAktifCalisma+0xa02>
			makineStop=1;
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <checkAktifCalisma+0xb78>)
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e002      	b.n	800562c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005626:	4b5d      	ldr	r3, [pc, #372]	; (800579c <checkAktifCalisma+0xb78>)
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800562c:	4b5c      	ldr	r3, [pc, #368]	; (80057a0 <checkAktifCalisma+0xb7c>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d144      	bne.n	80056be <checkAktifCalisma+0xa9a>
 8005634:	4b5b      	ldr	r3, [pc, #364]	; (80057a4 <checkAktifCalisma+0xb80>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d003      	beq.n	8005644 <checkAktifCalisma+0xa20>
 800563c:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <checkAktifCalisma+0xb80>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d13c      	bne.n	80056be <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	484c      	ldr	r0, [pc, #304]	; (8005778 <checkAktifCalisma+0xb54>)
 8005648:	f003 fd66 	bl	8009118 <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <checkAktifCalisma+0xa36>
 8005652:	4b55      	ldr	r3, [pc, #340]	; (80057a8 <checkAktifCalisma+0xb84>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <checkAktifCalisma+0xa4e>
 800565a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800565e:	484e      	ldr	r0, [pc, #312]	; (8005798 <checkAktifCalisma+0xb74>)
 8005660:	f003 fd5a 	bl	8009118 <HAL_GPIO_ReadPin>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d129      	bne.n	80056be <checkAktifCalisma+0xa9a>
 800566a:	4b4f      	ldr	r3, [pc, #316]	; (80057a8 <checkAktifCalisma+0xb84>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d125      	bne.n	80056be <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005672:	2104      	movs	r1, #4
 8005674:	4840      	ldr	r0, [pc, #256]	; (8005778 <checkAktifCalisma+0xb54>)
 8005676:	f003 fd4f 	bl	8009118 <HAL_GPIO_ReadPin>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d003      	beq.n	8005688 <checkAktifCalisma+0xa64>
 8005680:	4b4a      	ldr	r3, [pc, #296]	; (80057ac <checkAktifCalisma+0xb88>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11a      	bne.n	80056be <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005688:	2102      	movs	r1, #2
 800568a:	483b      	ldr	r0, [pc, #236]	; (8005778 <checkAktifCalisma+0xb54>)
 800568c:	f003 fd44 	bl	8009118 <HAL_GPIO_ReadPin>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d113      	bne.n	80056be <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005696:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <checkAktifCalisma+0xb8c>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f083 0301 	eor.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00c      	beq.n	80056be <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80056a4:	4b3d      	ldr	r3, [pc, #244]	; (800579c <checkAktifCalisma+0xb78>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <checkAktifCalisma+0xb90>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80056b2:	4b36      	ldr	r3, [pc, #216]	; (800578c <checkAktifCalisma+0xb68>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <checkAktifCalisma+0xb94>)
 80056b8:	6013      	str	r3, [r2, #0]
			bekle();
 80056ba:	f7ff f935 	bl	8004928 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80056be:	4b33      	ldr	r3, [pc, #204]	; (800578c <checkAktifCalisma+0xb68>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <checkAktifCalisma+0xb94>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	4a3c      	ldr	r2, [pc, #240]	; (80057bc <checkAktifCalisma+0xb98>)
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d211      	bcs.n	80056f4 <checkAktifCalisma+0xad0>
 80056d0:	2104      	movs	r1, #4
 80056d2:	4829      	ldr	r0, [pc, #164]	; (8005778 <checkAktifCalisma+0xb54>)
 80056d4:	f003 fd20 	bl	8009118 <HAL_GPIO_ReadPin>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <checkAktifCalisma+0xad0>
 80056de:	4b33      	ldr	r3, [pc, #204]	; (80057ac <checkAktifCalisma+0xb88>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <checkAktifCalisma+0xad0>
 80056e6:	4b2d      	ldr	r3, [pc, #180]	; (800579c <checkAktifCalisma+0xb78>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f083 0301 	eor.w	r3, r3, #1
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <checkAktifCalisma+0xb90>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <checkAktifCalisma+0xb7c>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d160      	bne.n	80057c4 <checkAktifCalisma+0xba0>
 8005702:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <checkAktifCalisma+0xb80>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d003      	beq.n	8005712 <checkAktifCalisma+0xaee>
 800570a:	4b26      	ldr	r3, [pc, #152]	; (80057a4 <checkAktifCalisma+0xb80>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d158      	bne.n	80057c4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005712:	2104      	movs	r1, #4
 8005714:	4818      	ldr	r0, [pc, #96]	; (8005778 <checkAktifCalisma+0xb54>)
 8005716:	f003 fcff 	bl	8009118 <HAL_GPIO_ReadPin>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d003      	beq.n	8005728 <checkAktifCalisma+0xb04>
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <checkAktifCalisma+0xb88>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d14d      	bne.n	80057c4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005728:	2102      	movs	r1, #2
 800572a:	4813      	ldr	r0, [pc, #76]	; (8005778 <checkAktifCalisma+0xb54>)
 800572c:	f003 fcf4 	bl	8009118 <HAL_GPIO_ReadPin>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d146      	bne.n	80057c4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	480f      	ldr	r0, [pc, #60]	; (8005778 <checkAktifCalisma+0xb54>)
 800573a:	f003 fced 	bl	8009118 <HAL_GPIO_ReadPin>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <checkAktifCalisma+0xb28>
 8005744:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <checkAktifCalisma+0xb84>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00b      	beq.n	8005764 <checkAktifCalisma+0xb40>
 800574c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005750:	4811      	ldr	r0, [pc, #68]	; (8005798 <checkAktifCalisma+0xb74>)
 8005752:	f003 fce1 	bl	8009118 <HAL_GPIO_ReadPin>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d133      	bne.n	80057c4 <checkAktifCalisma+0xba0>
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <checkAktifCalisma+0xb84>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d12f      	bne.n	80057c4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <checkAktifCalisma+0xb78>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02b      	beq.n	80057c4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800576c:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <checkAktifCalisma+0xb9c>)
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e02a      	b.n	80057ca <checkAktifCalisma+0xba6>
 8005774:	2000022b 	.word	0x2000022b
 8005778:	40011000 	.word	0x40011000
 800577c:	2000022f 	.word	0x2000022f
 8005780:	20000246 	.word	0x20000246
 8005784:	20000247 	.word	0x20000247
 8005788:	20000227 	.word	0x20000227
 800578c:	200001d0 	.word	0x200001d0
 8005790:	200001dc 	.word	0x200001dc
 8005794:	2000020a 	.word	0x2000020a
 8005798:	40010c00 	.word	0x40010c00
 800579c:	20000236 	.word	0x20000236
 80057a0:	200001fd 	.word	0x200001fd
 80057a4:	200001fc 	.word	0x200001fc
 80057a8:	20000200 	.word	0x20000200
 80057ac:	200001fa 	.word	0x200001fa
 80057b0:	20000223 	.word	0x20000223
 80057b4:	20000237 	.word	0x20000237
 80057b8:	200001d4 	.word	0x200001d4
 80057bc:	2000020d 	.word	0x2000020d
 80057c0:	20000238 	.word	0x20000238
		} else {
			kapi1butonkontrol=0;
 80057c4:	4b8b      	ldr	r3, [pc, #556]	; (80059f4 <checkAktifCalisma+0xdd0>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057ca:	4b8b      	ldr	r3, [pc, #556]	; (80059f8 <checkAktifCalisma+0xdd4>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d121      	bne.n	8005816 <checkAktifCalisma+0xbf2>
 80057d2:	4b8a      	ldr	r3, [pc, #552]	; (80059fc <checkAktifCalisma+0xdd8>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d003      	beq.n	80057e2 <checkAktifCalisma+0xbbe>
 80057da:	4b88      	ldr	r3, [pc, #544]	; (80059fc <checkAktifCalisma+0xdd8>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d119      	bne.n	8005816 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057e2:	2104      	movs	r1, #4
 80057e4:	4886      	ldr	r0, [pc, #536]	; (8005a00 <checkAktifCalisma+0xddc>)
 80057e6:	f003 fc97 	bl	8009118 <HAL_GPIO_ReadPin>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d003      	beq.n	80057f8 <checkAktifCalisma+0xbd4>
 80057f0:	4b84      	ldr	r3, [pc, #528]	; (8005a04 <checkAktifCalisma+0xde0>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10e      	bne.n	8005816 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057f8:	2102      	movs	r1, #2
 80057fa:	4881      	ldr	r0, [pc, #516]	; (8005a00 <checkAktifCalisma+0xddc>)
 80057fc:	f003 fc8c 	bl	8009118 <HAL_GPIO_ReadPin>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d107      	bne.n	8005816 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005806:	4b80      	ldr	r3, [pc, #512]	; (8005a08 <checkAktifCalisma+0xde4>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800580e:	4b7f      	ldr	r3, [pc, #508]	; (8005a0c <checkAktifCalisma+0xde8>)
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e002      	b.n	800581c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005816:	4b7d      	ldr	r3, [pc, #500]	; (8005a0c <checkAktifCalisma+0xde8>)
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800581c:	4b75      	ldr	r3, [pc, #468]	; (80059f4 <checkAktifCalisma+0xdd0>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <checkAktifCalisma+0xc10>
 8005824:	4b79      	ldr	r3, [pc, #484]	; (8005a0c <checkAktifCalisma+0xde8>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <checkAktifCalisma+0xc10>
 800582c:	4b78      	ldr	r3, [pc, #480]	; (8005a10 <checkAktifCalisma+0xdec>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005834:	2201      	movs	r2, #1
 8005836:	2180      	movs	r1, #128	; 0x80
 8005838:	4876      	ldr	r0, [pc, #472]	; (8005a14 <checkAktifCalisma+0xdf0>)
 800583a:	f003 fc84 	bl	8009146 <HAL_GPIO_WritePin>
 800583e:	e004      	b.n	800584a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	4873      	ldr	r0, [pc, #460]	; (8005a14 <checkAktifCalisma+0xdf0>)
 8005846:	f003 fc7e 	bl	8009146 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800584a:	4b73      	ldr	r3, [pc, #460]	; (8005a18 <checkAktifCalisma+0xdf4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d141      	bne.n	80058d6 <checkAktifCalisma+0xcb2>
 8005852:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <checkAktifCalisma+0xdd8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d003      	beq.n	8005862 <checkAktifCalisma+0xc3e>
 800585a:	4b68      	ldr	r3, [pc, #416]	; (80059fc <checkAktifCalisma+0xdd8>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d139      	bne.n	80058d6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005866:	4866      	ldr	r0, [pc, #408]	; (8005a00 <checkAktifCalisma+0xddc>)
 8005868:	f003 fc56 	bl	8009118 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <checkAktifCalisma+0xc56>
 8005872:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <checkAktifCalisma+0xdf8>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <checkAktifCalisma+0xc6e>
 800587a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800587e:	4868      	ldr	r0, [pc, #416]	; (8005a20 <checkAktifCalisma+0xdfc>)
 8005880:	f003 fc4a 	bl	8009118 <HAL_GPIO_ReadPin>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d125      	bne.n	80058d6 <checkAktifCalisma+0xcb2>
 800588a:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <checkAktifCalisma+0xdf8>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d121      	bne.n	80058d6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005892:	2102      	movs	r1, #2
 8005894:	485a      	ldr	r0, [pc, #360]	; (8005a00 <checkAktifCalisma+0xddc>)
 8005896:	f003 fc3f 	bl	8009118 <HAL_GPIO_ReadPin>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d11a      	bne.n	80058d6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058a0:	2104      	movs	r1, #4
 80058a2:	4857      	ldr	r0, [pc, #348]	; (8005a00 <checkAktifCalisma+0xddc>)
 80058a4:	f003 fc38 	bl	8009118 <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d113      	bne.n	80058d6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80058ae:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <checkAktifCalisma+0xde4>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00f      	beq.n	80058d6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80058b6:	4b5b      	ldr	r3, [pc, #364]	; (8005a24 <checkAktifCalisma+0xe00>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80058c4:	4b58      	ldr	r3, [pc, #352]	; (8005a28 <checkAktifCalisma+0xe04>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058ca:	4b58      	ldr	r3, [pc, #352]	; (8005a2c <checkAktifCalisma+0xe08>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a58      	ldr	r2, [pc, #352]	; (8005a30 <checkAktifCalisma+0xe0c>)
 80058d0:	6013      	str	r3, [r2, #0]
			bekle();
 80058d2:	f7ff f829 	bl	8004928 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80058d6:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <checkAktifCalisma+0xe08>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b55      	ldr	r3, [pc, #340]	; (8005a30 <checkAktifCalisma+0xe0c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	4a54      	ldr	r2, [pc, #336]	; (8005a34 <checkAktifCalisma+0xe10>)
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d20d      	bcs.n	8005904 <checkAktifCalisma+0xce0>
 80058e8:	2102      	movs	r1, #2
 80058ea:	4845      	ldr	r0, [pc, #276]	; (8005a00 <checkAktifCalisma+0xddc>)
 80058ec:	f003 fc14 	bl	8009118 <HAL_GPIO_ReadPin>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d006      	beq.n	8005904 <checkAktifCalisma+0xce0>
 80058f6:	4b44      	ldr	r3, [pc, #272]	; (8005a08 <checkAktifCalisma+0xde4>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f083 0301 	eor.w	r3, r3, #1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005904:	4b48      	ldr	r3, [pc, #288]	; (8005a28 <checkAktifCalisma+0xe04>)
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800590a:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <checkAktifCalisma+0xdf4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d135      	bne.n	800597e <checkAktifCalisma+0xd5a>
 8005912:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <checkAktifCalisma+0xdd8>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d003      	beq.n	8005922 <checkAktifCalisma+0xcfe>
 800591a:	4b38      	ldr	r3, [pc, #224]	; (80059fc <checkAktifCalisma+0xdd8>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d12d      	bne.n	800597e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005926:	4836      	ldr	r0, [pc, #216]	; (8005a00 <checkAktifCalisma+0xddc>)
 8005928:	f003 fbf6 	bl	8009118 <HAL_GPIO_ReadPin>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <checkAktifCalisma+0xd16>
 8005932:	4b3a      	ldr	r3, [pc, #232]	; (8005a1c <checkAktifCalisma+0xdf8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00b      	beq.n	8005952 <checkAktifCalisma+0xd2e>
 800593a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800593e:	4838      	ldr	r0, [pc, #224]	; (8005a20 <checkAktifCalisma+0xdfc>)
 8005940:	f003 fbea 	bl	8009118 <HAL_GPIO_ReadPin>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d119      	bne.n	800597e <checkAktifCalisma+0xd5a>
 800594a:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <checkAktifCalisma+0xdf8>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d115      	bne.n	800597e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005952:	2102      	movs	r1, #2
 8005954:	482a      	ldr	r0, [pc, #168]	; (8005a00 <checkAktifCalisma+0xddc>)
 8005956:	f003 fbdf 	bl	8009118 <HAL_GPIO_ReadPin>
 800595a:	4603      	mov	r3, r0
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10e      	bne.n	800597e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005960:	2104      	movs	r1, #4
 8005962:	4827      	ldr	r0, [pc, #156]	; (8005a00 <checkAktifCalisma+0xddc>)
 8005964:	f003 fbd8 	bl	8009118 <HAL_GPIO_ReadPin>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d107      	bne.n	800597e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800596e:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <checkAktifCalisma+0xde4>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005976:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <checkAktifCalisma+0xe14>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e002      	b.n	8005984 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800597e:	4b2e      	ldr	r3, [pc, #184]	; (8005a38 <checkAktifCalisma+0xe14>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <checkAktifCalisma+0xdf4>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d11d      	bne.n	80059c8 <checkAktifCalisma+0xda4>
 800598c:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <checkAktifCalisma+0xdd8>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d003      	beq.n	800599c <checkAktifCalisma+0xd78>
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <checkAktifCalisma+0xdd8>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d115      	bne.n	80059c8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800599c:	2102      	movs	r1, #2
 800599e:	4818      	ldr	r0, [pc, #96]	; (8005a00 <checkAktifCalisma+0xddc>)
 80059a0:	f003 fbba 	bl	8009118 <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10e      	bne.n	80059c8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059aa:	2104      	movs	r1, #4
 80059ac:	4814      	ldr	r0, [pc, #80]	; (8005a00 <checkAktifCalisma+0xddc>)
 80059ae:	f003 fbb3 	bl	8009118 <HAL_GPIO_ReadPin>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <checkAktifCalisma+0xde4>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80059c0:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <checkAktifCalisma+0xe18>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e002      	b.n	80059ce <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80059c8:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <checkAktifCalisma+0xe18>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80059ce:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <checkAktifCalisma+0xe14>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <checkAktifCalisma+0xdc2>
 80059d6:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <checkAktifCalisma+0xe18>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <checkAktifCalisma+0xdc2>
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <checkAktifCalisma+0xe04>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d02c      	beq.n	8005a40 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059e6:	2201      	movs	r2, #1
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	480a      	ldr	r0, [pc, #40]	; (8005a14 <checkAktifCalisma+0xdf0>)
 80059ec:	f003 fbab 	bl	8009146 <HAL_GPIO_WritePin>
 80059f0:	e02b      	b.n	8005a4a <checkAktifCalisma+0xe26>
 80059f2:	bf00      	nop
 80059f4:	20000238 	.word	0x20000238
 80059f8:	200001fd 	.word	0x200001fd
 80059fc:	200001fc 	.word	0x200001fc
 8005a00:	40011000 	.word	0x40011000
 8005a04:	200001fa 	.word	0x200001fa
 8005a08:	20000236 	.word	0x20000236
 8005a0c:	20000239 	.word	0x20000239
 8005a10:	20000237 	.word	0x20000237
 8005a14:	40010800 	.word	0x40010800
 8005a18:	200001fe 	.word	0x200001fe
 8005a1c:	20000200 	.word	0x20000200
 8005a20:	40010c00 	.word	0x40010c00
 8005a24:	20000223 	.word	0x20000223
 8005a28:	2000023a 	.word	0x2000023a
 8005a2c:	200001d0 	.word	0x200001d0
 8005a30:	200001d4 	.word	0x200001d4
 8005a34:	2000020e 	.word	0x2000020e
 8005a38:	2000023b 	.word	0x2000023b
 8005a3c:	2000023c 	.word	0x2000023c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a40:	2200      	movs	r2, #0
 8005a42:	2140      	movs	r1, #64	; 0x40
 8005a44:	488d      	ldr	r0, [pc, #564]	; (8005c7c <checkAktifCalisma+0x1058>)
 8005a46:	f003 fb7e 	bl	8009146 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005a4a:	4b8d      	ldr	r3, [pc, #564]	; (8005c80 <checkAktifCalisma+0x105c>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <checkAktifCalisma+0xe36>
 8005a52:	4b8b      	ldr	r3, [pc, #556]	; (8005c80 <checkAktifCalisma+0x105c>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d115      	bne.n	8005a86 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	4889      	ldr	r0, [pc, #548]	; (8005c84 <checkAktifCalisma+0x1060>)
 8005a5e:	f003 fb5b 	bl	8009118 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d003      	beq.n	8005a70 <checkAktifCalisma+0xe4c>
 8005a68:	4b87      	ldr	r3, [pc, #540]	; (8005c88 <checkAktifCalisma+0x1064>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a70:	2102      	movs	r1, #2
 8005a72:	4884      	ldr	r0, [pc, #528]	; (8005c84 <checkAktifCalisma+0x1060>)
 8005a74:	f003 fb50 	bl	8009118 <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005a7e:	4b83      	ldr	r3, [pc, #524]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e002      	b.n	8005a8c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005a86:	4b81      	ldr	r3, [pc, #516]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005a8c:	4b7c      	ldr	r3, [pc, #496]	; (8005c80 <checkAktifCalisma+0x105c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d003      	beq.n	8005a9c <checkAktifCalisma+0xe78>
 8005a94:	4b7a      	ldr	r3, [pc, #488]	; (8005c80 <checkAktifCalisma+0x105c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d111      	bne.n	8005ac0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a9c:	2102      	movs	r1, #2
 8005a9e:	4879      	ldr	r0, [pc, #484]	; (8005c84 <checkAktifCalisma+0x1060>)
 8005aa0:	f003 fb3a 	bl	8009118 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10a      	bne.n	8005ac0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005aaa:	2104      	movs	r1, #4
 8005aac:	4875      	ldr	r0, [pc, #468]	; (8005c84 <checkAktifCalisma+0x1060>)
 8005aae:	f003 fb33 	bl	8009118 <HAL_GPIO_ReadPin>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005ab8:	4b75      	ldr	r3, [pc, #468]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ac0:	4b73      	ldr	r3, [pc, #460]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005ac6:	4b71      	ldr	r3, [pc, #452]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005ace:	4b71      	ldr	r3, [pc, #452]	; (8005c94 <checkAktifCalisma+0x1070>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d10b      	bne.n	8005aee <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ada:	486f      	ldr	r0, [pc, #444]	; (8005c98 <checkAktifCalisma+0x1074>)
 8005adc:	f003 fb1c 	bl	8009118 <HAL_GPIO_ReadPin>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005ae6:	4b6d      	ldr	r3, [pc, #436]	; (8005c9c <checkAktifCalisma+0x1078>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e002      	b.n	8005af4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005aee:	4b6b      	ldr	r3, [pc, #428]	; (8005c9c <checkAktifCalisma+0x1078>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005af4:	4b66      	ldr	r3, [pc, #408]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00f      	beq.n	8005b1c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005afc:	4b65      	ldr	r3, [pc, #404]	; (8005c94 <checkAktifCalisma+0x1070>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10b      	bne.n	8005b1c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b08:	4863      	ldr	r0, [pc, #396]	; (8005c98 <checkAktifCalisma+0x1074>)
 8005b0a:	f003 fb05 	bl	8009118 <HAL_GPIO_ReadPin>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d103      	bne.n	8005b1c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005b14:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <checkAktifCalisma+0x107c>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005b1c:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <checkAktifCalisma+0x107c>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b22:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <checkAktifCalisma+0x1080>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d137      	bne.n	8005b9a <checkAktifCalisma+0xf76>
 8005b2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ca8 <checkAktifCalisma+0x1084>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d003      	beq.n	8005b3a <checkAktifCalisma+0xf16>
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <checkAktifCalisma+0x1084>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d12f      	bne.n	8005b9a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b3a:	4b54      	ldr	r3, [pc, #336]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <checkAktifCalisma+0xf26>
 8005b42:	4b53      	ldr	r3, [pc, #332]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d027      	beq.n	8005b9a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b4e:	484d      	ldr	r0, [pc, #308]	; (8005c84 <checkAktifCalisma+0x1060>)
 8005b50:	f003 fae2 	bl	8009118 <HAL_GPIO_ReadPin>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <checkAktifCalisma+0xf3e>
 8005b5a:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <checkAktifCalisma+0x1070>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b62:	4b4e      	ldr	r3, [pc, #312]	; (8005c9c <checkAktifCalisma+0x1078>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <checkAktifCalisma+0xf4e>
 8005b6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <checkAktifCalisma+0x107c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d013      	beq.n	8005b9a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b72:	4b4e      	ldr	r3, [pc, #312]	; (8005cac <checkAktifCalisma+0x1088>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00f      	beq.n	8005b9a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005b7a:	4b4d      	ldr	r3, [pc, #308]	; (8005cb0 <checkAktifCalisma+0x108c>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f083 0301 	eor.w	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005b88:	4b4a      	ldr	r3, [pc, #296]	; (8005cb4 <checkAktifCalisma+0x1090>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b8e:	4b4a      	ldr	r3, [pc, #296]	; (8005cb8 <checkAktifCalisma+0x1094>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <checkAktifCalisma+0x1098>)
 8005b94:	6013      	str	r3, [r2, #0]
			bekle();
 8005b96:	f7fe fec7 	bl	8004928 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005b9a:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <checkAktifCalisma+0x1094>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <checkAktifCalisma+0x1098>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	4a46      	ldr	r2, [pc, #280]	; (8005cc0 <checkAktifCalisma+0x109c>)
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d214      	bcs.n	8005bd6 <checkAktifCalisma+0xfb2>
 8005bac:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f083 0301 	eor.w	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d006      	beq.n	8005bc8 <checkAktifCalisma+0xfa4>
 8005bba:	4b35      	ldr	r3, [pc, #212]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	f083 0301 	eor.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <checkAktifCalisma+0xfb2>
 8005bc8:	4b38      	ldr	r3, [pc, #224]	; (8005cac <checkAktifCalisma+0x1088>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	f083 0301 	eor.w	r3, r3, #1
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <checkAktifCalisma+0x1090>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bdc:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <checkAktifCalisma+0x1080>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d12b      	bne.n	8005c3c <checkAktifCalisma+0x1018>
 8005be4:	4b30      	ldr	r3, [pc, #192]	; (8005ca8 <checkAktifCalisma+0x1084>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d003      	beq.n	8005bf4 <checkAktifCalisma+0xfd0>
 8005bec:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <checkAktifCalisma+0x1084>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d123      	bne.n	8005c3c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005bf4:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <checkAktifCalisma+0xfe0>
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01b      	beq.n	8005c3c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c08:	481e      	ldr	r0, [pc, #120]	; (8005c84 <checkAktifCalisma+0x1060>)
 8005c0a:	f003 fa85 	bl	8009118 <HAL_GPIO_ReadPin>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <checkAktifCalisma+0xff8>
 8005c14:	4b1f      	ldr	r3, [pc, #124]	; (8005c94 <checkAktifCalisma+0x1070>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <checkAktifCalisma+0x1078>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <checkAktifCalisma+0x1008>
 8005c24:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <checkAktifCalisma+0x107c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	; (8005cac <checkAktifCalisma+0x1088>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <checkAktifCalisma+0x10a0>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <checkAktifCalisma+0x10a0>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <checkAktifCalisma+0x1080>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d140      	bne.n	8005ccc <checkAktifCalisma+0x10a8>
 8005c4a:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <checkAktifCalisma+0x1084>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d003      	beq.n	8005c5a <checkAktifCalisma+0x1036>
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <checkAktifCalisma+0x1084>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d138      	bne.n	8005ccc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <checkAktifCalisma+0x1068>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <checkAktifCalisma+0x1046>
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <checkAktifCalisma+0x106c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d030      	beq.n	8005ccc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c6a:	4b10      	ldr	r3, [pc, #64]	; (8005cac <checkAktifCalisma+0x1088>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d02c      	beq.n	8005ccc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <checkAktifCalisma+0x10a4>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e02b      	b.n	8005cd2 <checkAktifCalisma+0x10ae>
 8005c7a:	bf00      	nop
 8005c7c:	40010800 	.word	0x40010800
 8005c80:	20000201 	.word	0x20000201
 8005c84:	40011000 	.word	0x40011000
 8005c88:	200001fa 	.word	0x200001fa
 8005c8c:	20000240 	.word	0x20000240
 8005c90:	20000241 	.word	0x20000241
 8005c94:	20000200 	.word	0x20000200
 8005c98:	40010c00 	.word	0x40010c00
 8005c9c:	20000250 	.word	0x20000250
 8005ca0:	20000251 	.word	0x20000251
 8005ca4:	200001ff 	.word	0x200001ff
 8005ca8:	200001fc 	.word	0x200001fc
 8005cac:	20000236 	.word	0x20000236
 8005cb0:	20000223 	.word	0x20000223
 8005cb4:	2000023d 	.word	0x2000023d
 8005cb8:	200001d0 	.word	0x200001d0
 8005cbc:	200001d4 	.word	0x200001d4
 8005cc0:	2000020f 	.word	0x2000020f
 8005cc4:	2000023e 	.word	0x2000023e
 8005cc8:	2000023f 	.word	0x2000023f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ccc:	4b8b      	ldr	r3, [pc, #556]	; (8005efc <checkAktifCalisma+0x12d8>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005cd2:	4b8b      	ldr	r3, [pc, #556]	; (8005f00 <checkAktifCalisma+0x12dc>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d107      	bne.n	8005cea <checkAktifCalisma+0x10c6>
 8005cda:	4b8a      	ldr	r3, [pc, #552]	; (8005f04 <checkAktifCalisma+0x12e0>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d103      	bne.n	8005cea <checkAktifCalisma+0x10c6>
 8005ce2:	4b86      	ldr	r3, [pc, #536]	; (8005efc <checkAktifCalisma+0x12d8>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005cea:	2201      	movs	r2, #1
 8005cec:	2120      	movs	r1, #32
 8005cee:	4886      	ldr	r0, [pc, #536]	; (8005f08 <checkAktifCalisma+0x12e4>)
 8005cf0:	f003 fa29 	bl	8009146 <HAL_GPIO_WritePin>
 8005cf4:	e004      	b.n	8005d00 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	4883      	ldr	r0, [pc, #524]	; (8005f08 <checkAktifCalisma+0x12e4>)
 8005cfc:	f003 fa23 	bl	8009146 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005d00:	4b82      	ldr	r3, [pc, #520]	; (8005f0c <checkAktifCalisma+0x12e8>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00e      	beq.n	8005d26 <checkAktifCalisma+0x1102>
 8005d08:	2102      	movs	r1, #2
 8005d0a:	4881      	ldr	r0, [pc, #516]	; (8005f10 <checkAktifCalisma+0x12ec>)
 8005d0c:	f003 fa04 	bl	8009118 <HAL_GPIO_ReadPin>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d107      	bne.n	8005d26 <checkAktifCalisma+0x1102>
 8005d16:	4b7f      	ldr	r3, [pc, #508]	; (8005f14 <checkAktifCalisma+0x12f0>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <checkAktifCalisma+0x1102>
 8005d1e:	4b7e      	ldr	r3, [pc, #504]	; (8005f18 <checkAktifCalisma+0x12f4>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d112      	bne.n	8005d4c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005d26:	4b7d      	ldr	r3, [pc, #500]	; (8005f1c <checkAktifCalisma+0x12f8>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d066      	beq.n	8005dfc <checkAktifCalisma+0x11d8>
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4877      	ldr	r0, [pc, #476]	; (8005f10 <checkAktifCalisma+0x12ec>)
 8005d32:	f003 f9f1 	bl	8009118 <HAL_GPIO_ReadPin>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d15f      	bne.n	8005dfc <checkAktifCalisma+0x11d8>
 8005d3c:	4b75      	ldr	r3, [pc, #468]	; (8005f14 <checkAktifCalisma+0x12f0>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05b      	beq.n	8005dfc <checkAktifCalisma+0x11d8>
 8005d44:	4b74      	ldr	r3, [pc, #464]	; (8005f18 <checkAktifCalisma+0x12f4>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d057      	beq.n	8005dfc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005d4c:	4b74      	ldr	r3, [pc, #464]	; (8005f20 <checkAktifCalisma+0x12fc>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	3301      	adds	r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b72      	ldr	r3, [pc, #456]	; (8005f20 <checkAktifCalisma+0x12fc>)
 8005d56:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d58:	4b71      	ldr	r3, [pc, #452]	; (8005f20 <checkAktifCalisma+0x12fc>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b09      	cmp	r3, #9
 8005d5e:	d908      	bls.n	8005d72 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d60:	4b6f      	ldr	r3, [pc, #444]	; (8005f20 <checkAktifCalisma+0x12fc>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d66:	4b6f      	ldr	r3, [pc, #444]	; (8005f24 <checkAktifCalisma+0x1300>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b6d      	ldr	r3, [pc, #436]	; (8005f24 <checkAktifCalisma+0x1300>)
 8005d70:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d72:	4b6c      	ldr	r3, [pc, #432]	; (8005f24 <checkAktifCalisma+0x1300>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	d908      	bls.n	8005d8c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005d7a:	4b6a      	ldr	r3, [pc, #424]	; (8005f24 <checkAktifCalisma+0x1300>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005d80:	4b69      	ldr	r3, [pc, #420]	; (8005f28 <checkAktifCalisma+0x1304>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <checkAktifCalisma+0x1304>)
 8005d8a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005d8c:	4b66      	ldr	r3, [pc, #408]	; (8005f28 <checkAktifCalisma+0x1304>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	d908      	bls.n	8005da6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005d94:	4b64      	ldr	r3, [pc, #400]	; (8005f28 <checkAktifCalisma+0x1304>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005d9a:	4b64      	ldr	r3, [pc, #400]	; (8005f2c <checkAktifCalisma+0x1308>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	4b62      	ldr	r3, [pc, #392]	; (8005f2c <checkAktifCalisma+0x1308>)
 8005da4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005da6:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <checkAktifCalisma+0x1308>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d908      	bls.n	8005dc0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005dae:	4b5f      	ldr	r3, [pc, #380]	; (8005f2c <checkAktifCalisma+0x1308>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005db4:	4b5e      	ldr	r3, [pc, #376]	; (8005f30 <checkAktifCalisma+0x130c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	4b5c      	ldr	r3, [pc, #368]	; (8005f30 <checkAktifCalisma+0x130c>)
 8005dbe:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005dc0:	4b5b      	ldr	r3, [pc, #364]	; (8005f30 <checkAktifCalisma+0x130c>)
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	4b5b      	ldr	r3, [pc, #364]	; (8005f34 <checkAktifCalisma+0x1310>)
 8005dc6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005dca:	4b58      	ldr	r3, [pc, #352]	; (8005f2c <checkAktifCalisma+0x1308>)
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	4b59      	ldr	r3, [pc, #356]	; (8005f34 <checkAktifCalisma+0x1310>)
 8005dd0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005dd2:	4b55      	ldr	r3, [pc, #340]	; (8005f28 <checkAktifCalisma+0x1304>)
 8005dd4:	781a      	ldrb	r2, [r3, #0]
 8005dd6:	4b57      	ldr	r3, [pc, #348]	; (8005f34 <checkAktifCalisma+0x1310>)
 8005dd8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005dda:	4b52      	ldr	r3, [pc, #328]	; (8005f24 <checkAktifCalisma+0x1300>)
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <checkAktifCalisma+0x1310>)
 8005de0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005de2:	4b4f      	ldr	r3, [pc, #316]	; (8005f20 <checkAktifCalisma+0x12fc>)
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	4b53      	ldr	r3, [pc, #332]	; (8005f34 <checkAktifCalisma+0x1310>)
 8005de8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005dea:	4b53      	ldr	r3, [pc, #332]	; (8005f38 <checkAktifCalisma+0x1314>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005df0:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <checkAktifCalisma+0x12e8>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005df6:	4b49      	ldr	r3, [pc, #292]	; (8005f1c <checkAktifCalisma+0x12f8>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e00:	484e      	ldr	r0, [pc, #312]	; (8005f3c <checkAktifCalisma+0x1318>)
 8005e02:	f003 f989 	bl	8009118 <HAL_GPIO_ReadPin>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d016      	beq.n	8005e3a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e10:	484a      	ldr	r0, [pc, #296]	; (8005f3c <checkAktifCalisma+0x1318>)
 8005e12:	f003 f981 	bl	8009118 <HAL_GPIO_ReadPin>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00e      	beq.n	8005e3a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e20:	4846      	ldr	r0, [pc, #280]	; (8005f3c <checkAktifCalisma+0x1318>)
 8005e22:	f003 f979 	bl	8009118 <HAL_GPIO_ReadPin>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d006      	beq.n	8005e3a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	4838      	ldr	r0, [pc, #224]	; (8005f10 <checkAktifCalisma+0x12ec>)
 8005e30:	f003 f972 	bl	8009118 <HAL_GPIO_ReadPin>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005e3a:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <checkAktifCalisma+0x131c>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	e002      	b.n	8005e48 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005e42:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <checkAktifCalisma+0x131c>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005e48:	4b3d      	ldr	r3, [pc, #244]	; (8005f40 <checkAktifCalisma+0x131c>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <checkAktifCalisma+0x125a>
 8005e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e54:	4839      	ldr	r0, [pc, #228]	; (8005f3c <checkAktifCalisma+0x1318>)
 8005e56:	f003 f95f 	bl	8009118 <HAL_GPIO_ReadPin>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10e      	bne.n	8005e7e <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e60:	4b38      	ldr	r3, [pc, #224]	; (8005f44 <checkAktifCalisma+0x1320>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e66:	2001      	movs	r0, #1
 8005e68:	f7fa fd7a 	bl	8000960 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f7fa fd1d 	bl	80008ac <hata2EEPROM>
			convertAndSendData();
 8005e72:	f001 fc1d 	bl	80076b0 <convertAndSendData>
			acilstophatasi=1;
 8005e76:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <checkAktifCalisma+0x1324>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e018      	b.n	8005eb0 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005e7e:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <checkAktifCalisma+0x1324>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d014      	beq.n	8005eb0 <checkAktifCalisma+0x128c>
 8005e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e8a:	482c      	ldr	r0, [pc, #176]	; (8005f3c <checkAktifCalisma+0x1318>)
 8005e8c:	f003 f944 	bl	8009118 <HAL_GPIO_ReadPin>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <checkAktifCalisma+0x128c>
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <checkAktifCalisma+0x131c>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f083 0301 	eor.w	r3, r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <checkAktifCalisma+0x1324>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005eaa:	2001      	movs	r0, #1
 8005eac:	f7fe fce8 	bl	8004880 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005eb0:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <checkAktifCalisma+0x1328>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f083 0301 	eor.w	r3, r3, #1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04e      	beq.n	8005f5c <checkAktifCalisma+0x1338>
 8005ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ec2:	481e      	ldr	r0, [pc, #120]	; (8005f3c <checkAktifCalisma+0x1318>)
 8005ec4:	f003 f928 	bl	8009118 <HAL_GPIO_ReadPin>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <checkAktifCalisma+0x12b2>
 8005ece:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <checkAktifCalisma+0x132c>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d042      	beq.n	8005f5c <checkAktifCalisma+0x1338>
 8005ed6:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <checkAktifCalisma+0x1330>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d13e      	bne.n	8005f5c <checkAktifCalisma+0x1338>
			hataVar=1;
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <checkAktifCalisma+0x1320>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005ee4:	2002      	movs	r0, #2
 8005ee6:	f7fa fd3b 	bl	8000960 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005eea:	2002      	movs	r0, #2
 8005eec:	f7fa fcde 	bl	80008ac <hata2EEPROM>
			convertAndSendData();
 8005ef0:	f001 fbde 	bl	80076b0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005ef4:	4b18      	ldr	r3, [pc, #96]	; (8005f58 <checkAktifCalisma+0x1334>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e047      	b.n	8005f8c <checkAktifCalisma+0x1368>
 8005efc:	2000023f 	.word	0x2000023f
 8005f00:	2000023e 	.word	0x2000023e
 8005f04:	2000023d 	.word	0x2000023d
 8005f08:	40010800 	.word	0x40010800
 8005f0c:	20000233 	.word	0x20000233
 8005f10:	40011000 	.word	0x40011000
 8005f14:	200001fa 	.word	0x200001fa
 8005f18:	20000236 	.word	0x20000236
 8005f1c:	20000234 	.word	0x20000234
 8005f20:	200001f1 	.word	0x200001f1
 8005f24:	200001f2 	.word	0x200001f2
 8005f28:	20000000 	.word	0x20000000
 8005f2c:	20000001 	.word	0x20000001
 8005f30:	200001f3 	.word	0x200001f3
 8005f34:	20000120 	.word	0x20000120
 8005f38:	20000220 	.word	0x20000220
 8005f3c:	40010c00 	.word	0x40010c00
 8005f40:	20000242 	.word	0x20000242
 8005f44:	20000249 	.word	0x20000249
 8005f48:	20000244 	.word	0x20000244
 8005f4c:	2000024b 	.word	0x2000024b
 8005f50:	20000255 	.word	0x20000255
 8005f54:	200001f8 	.word	0x200001f8
 8005f58:	20000245 	.word	0x20000245
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f5c:	4b9b      	ldr	r3, [pc, #620]	; (80061cc <checkAktifCalisma+0x15a8>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <checkAktifCalisma+0x1368>
 8005f64:	4b9a      	ldr	r3, [pc, #616]	; (80061d0 <checkAktifCalisma+0x15ac>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00f      	beq.n	8005f8c <checkAktifCalisma+0x1368>
 8005f6c:	4b99      	ldr	r3, [pc, #612]	; (80061d4 <checkAktifCalisma+0x15b0>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f083 0301 	eor.w	r3, r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005f7a:	4b94      	ldr	r3, [pc, #592]	; (80061cc <checkAktifCalisma+0x15a8>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005f80:	4b95      	ldr	r3, [pc, #596]	; (80061d8 <checkAktifCalisma+0x15b4>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005f86:	2002      	movs	r0, #2
 8005f88:	f7fe fc7a 	bl	8004880 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005f8c:	4b93      	ldr	r3, [pc, #588]	; (80061dc <checkAktifCalisma+0x15b8>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11e      	bne.n	8005fd2 <checkAktifCalisma+0x13ae>
 8005f94:	4b92      	ldr	r3, [pc, #584]	; (80061e0 <checkAktifCalisma+0x15bc>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d11a      	bne.n	8005fd2 <checkAktifCalisma+0x13ae>
 8005f9c:	4b91      	ldr	r3, [pc, #580]	; (80061e4 <checkAktifCalisma+0x15c0>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d016      	beq.n	8005fd2 <checkAktifCalisma+0x13ae>
 8005fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fa8:	488f      	ldr	r0, [pc, #572]	; (80061e8 <checkAktifCalisma+0x15c4>)
 8005faa:	f003 f8b5 	bl	8009118 <HAL_GPIO_ReadPin>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d10e      	bne.n	8005fd2 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005fb4:	4b8d      	ldr	r3, [pc, #564]	; (80061ec <checkAktifCalisma+0x15c8>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005fba:	2003      	movs	r0, #3
 8005fbc:	f7fa fcd0 	bl	8000960 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005fc0:	2003      	movs	r0, #3
 8005fc2:	f7fa fc73 	bl	80008ac <hata2EEPROM>
			convertAndSendData();
 8005fc6:	f001 fb73 	bl	80076b0 <convertAndSendData>
			basinchatasi=1;
 8005fca:	4b89      	ldr	r3, [pc, #548]	; (80061f0 <checkAktifCalisma+0x15cc>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e015      	b.n	8005ffe <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005fd2:	4b87      	ldr	r3, [pc, #540]	; (80061f0 <checkAktifCalisma+0x15cc>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d011      	beq.n	8005ffe <checkAktifCalisma+0x13da>
 8005fda:	4b80      	ldr	r3, [pc, #512]	; (80061dc <checkAktifCalisma+0x15b8>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d10d      	bne.n	8005ffe <checkAktifCalisma+0x13da>
 8005fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fe6:	4883      	ldr	r0, [pc, #524]	; (80061f4 <checkAktifCalisma+0x15d0>)
 8005fe8:	f003 f896 	bl	8009118 <HAL_GPIO_ReadPin>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005ff2:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <checkAktifCalisma+0x15cc>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005ff8:	2003      	movs	r0, #3
 8005ffa:	f7fe fc41 	bl	8004880 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005ffe:	4b7e      	ldr	r3, [pc, #504]	; (80061f8 <checkAktifCalisma+0x15d4>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <checkAktifCalisma+0x13ea>
 8006006:	4b7d      	ldr	r3, [pc, #500]	; (80061fc <checkAktifCalisma+0x15d8>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01e      	beq.n	800604c <checkAktifCalisma+0x1428>
 800600e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006012:	487b      	ldr	r0, [pc, #492]	; (8006200 <checkAktifCalisma+0x15dc>)
 8006014:	f003 f880 	bl	8009118 <HAL_GPIO_ReadPin>
 8006018:	4603      	mov	r3, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d116      	bne.n	800604c <checkAktifCalisma+0x1428>
 800601e:	4b79      	ldr	r3, [pc, #484]	; (8006204 <checkAktifCalisma+0x15e0>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d003      	beq.n	800602e <checkAktifCalisma+0x140a>
 8006026:	4b77      	ldr	r3, [pc, #476]	; (8006204 <checkAktifCalisma+0x15e0>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d10e      	bne.n	800604c <checkAktifCalisma+0x1428>
			hataVar=1;
 800602e:	4b6f      	ldr	r3, [pc, #444]	; (80061ec <checkAktifCalisma+0x15c8>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006034:	2004      	movs	r0, #4
 8006036:	f7fa fc93 	bl	8000960 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800603a:	2004      	movs	r0, #4
 800603c:	f7fa fc36 	bl	80008ac <hata2EEPROM>
			convertAndSendData();
 8006040:	f001 fb36 	bl	80076b0 <convertAndSendData>
			katkapisivicihatasi=1;
 8006044:	4b70      	ldr	r3, [pc, #448]	; (8006208 <checkAktifCalisma+0x15e4>)
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e01f      	b.n	800608c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800604c:	4b6e      	ldr	r3, [pc, #440]	; (8006208 <checkAktifCalisma+0x15e4>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <checkAktifCalisma+0x1468>
 8006054:	4b6d      	ldr	r3, [pc, #436]	; (800620c <checkAktifCalisma+0x15e8>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d017      	beq.n	800608c <checkAktifCalisma+0x1468>
 800605c:	4b66      	ldr	r3, [pc, #408]	; (80061f8 <checkAktifCalisma+0x15d4>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f083 0301 	eor.w	r3, r3, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <checkAktifCalisma+0x1468>
 800606a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800606e:	4864      	ldr	r0, [pc, #400]	; (8006200 <checkAktifCalisma+0x15dc>)
 8006070:	f003 f852 	bl	8009118 <HAL_GPIO_ReadPin>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800607a:	4b63      	ldr	r3, [pc, #396]	; (8006208 <checkAktifCalisma+0x15e4>)
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006080:	4b5e      	ldr	r3, [pc, #376]	; (80061fc <checkAktifCalisma+0x15d8>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006086:	2004      	movs	r0, #4
 8006088:	f7fe fbfa 	bl	8004880 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800608c:	4b5a      	ldr	r3, [pc, #360]	; (80061f8 <checkAktifCalisma+0x15d4>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <checkAktifCalisma+0x1478>
 8006094:	4b5e      	ldr	r3, [pc, #376]	; (8006210 <checkAktifCalisma+0x15ec>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01e      	beq.n	80060da <checkAktifCalisma+0x14b6>
 800609c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060a0:	4857      	ldr	r0, [pc, #348]	; (8006200 <checkAktifCalisma+0x15dc>)
 80060a2:	f003 f839 	bl	8009118 <HAL_GPIO_ReadPin>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d116      	bne.n	80060da <checkAktifCalisma+0x14b6>
 80060ac:	4b55      	ldr	r3, [pc, #340]	; (8006204 <checkAktifCalisma+0x15e0>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d003      	beq.n	80060bc <checkAktifCalisma+0x1498>
 80060b4:	4b53      	ldr	r3, [pc, #332]	; (8006204 <checkAktifCalisma+0x15e0>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d10e      	bne.n	80060da <checkAktifCalisma+0x14b6>
			hataVar=1;
 80060bc:	4b4b      	ldr	r3, [pc, #300]	; (80061ec <checkAktifCalisma+0x15c8>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80060c2:	2005      	movs	r0, #5
 80060c4:	f7fa fc4c 	bl	8000960 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80060c8:	2005      	movs	r0, #5
 80060ca:	f7fa fbef 	bl	80008ac <hata2EEPROM>
			convertAndSendData();
 80060ce:	f001 faef 	bl	80076b0 <convertAndSendData>
			tablakapisivicihatasi=1;
 80060d2:	4b50      	ldr	r3, [pc, #320]	; (8006214 <checkAktifCalisma+0x15f0>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e023      	b.n	8006122 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80060da:	4b4e      	ldr	r3, [pc, #312]	; (8006214 <checkAktifCalisma+0x15f0>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01f      	beq.n	8006122 <checkAktifCalisma+0x14fe>
 80060e2:	4b4a      	ldr	r3, [pc, #296]	; (800620c <checkAktifCalisma+0x15e8>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01b      	beq.n	8006122 <checkAktifCalisma+0x14fe>
 80060ea:	4b43      	ldr	r3, [pc, #268]	; (80061f8 <checkAktifCalisma+0x15d4>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f083 0301 	eor.w	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d014      	beq.n	8006122 <checkAktifCalisma+0x14fe>
 80060f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060fc:	4840      	ldr	r0, [pc, #256]	; (8006200 <checkAktifCalisma+0x15dc>)
 80060fe:	f003 f80b 	bl	8009118 <HAL_GPIO_ReadPin>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10c      	bne.n	8006122 <checkAktifCalisma+0x14fe>
 8006108:	4b40      	ldr	r3, [pc, #256]	; (800620c <checkAktifCalisma+0x15e8>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006110:	4b40      	ldr	r3, [pc, #256]	; (8006214 <checkAktifCalisma+0x15f0>)
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006116:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <checkAktifCalisma+0x15ec>)
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800611c:	2005      	movs	r0, #5
 800611e:	f7fe fbaf 	bl	8004880 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006122:	4b30      	ldr	r3, [pc, #192]	; (80061e4 <checkAktifCalisma+0x15c0>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <checkAktifCalisma+0x1516>
 800612a:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <checkAktifCalisma+0x15b0>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <checkAktifCalisma+0x1516>
 8006132:	4b39      	ldr	r3, [pc, #228]	; (8006218 <checkAktifCalisma+0x15f4>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d016      	beq.n	8006168 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800613a:	4b38      	ldr	r3, [pc, #224]	; (800621c <checkAktifCalisma+0x15f8>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b38      	ldr	r3, [pc, #224]	; (8006220 <checkAktifCalisma+0x15fc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	4a37      	ldr	r2, [pc, #220]	; (8006224 <checkAktifCalisma+0x1600>)
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	4293      	cmp	r3, r2
 800614a:	d30d      	bcc.n	8006168 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <checkAktifCalisma+0x15c8>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006152:	2006      	movs	r0, #6
 8006154:	f7fa fc04 	bl	8000960 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006158:	2006      	movs	r0, #6
 800615a:	f7fa fba7 	bl	80008ac <hata2EEPROM>
			  	convertAndSendData();
 800615e:	f001 faa7 	bl	80076b0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006162:	4b31      	ldr	r3, [pc, #196]	; (8006228 <checkAktifCalisma+0x1604>)
 8006164:	2201      	movs	r2, #1
 8006166:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006168:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <checkAktifCalisma+0x1604>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <checkAktifCalisma+0x1574>
 8006170:	2108      	movs	r1, #8
 8006172:	4823      	ldr	r0, [pc, #140]	; (8006200 <checkAktifCalisma+0x15dc>)
 8006174:	f002 ffd0 	bl	8009118 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00c      	beq.n	8006198 <checkAktifCalisma+0x1574>
 800617e:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <checkAktifCalisma+0x15d4>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f083 0301 	eor.w	r3, r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800618c:	4b26      	ldr	r3, [pc, #152]	; (8006228 <checkAktifCalisma+0x1604>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006192:	2006      	movs	r0, #6
 8006194:	f7fe fb74 	bl	8004880 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <checkAktifCalisma+0x1608>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <checkAktifCalisma+0x1594>
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <checkAktifCalisma+0x15b0>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d107      	bne.n	80061b8 <checkAktifCalisma+0x1594>
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <checkAktifCalisma+0x160c>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <checkAktifCalisma+0x1594>
 80061b0:	4b19      	ldr	r3, [pc, #100]	; (8006218 <checkAktifCalisma+0x15f4>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d03f      	beq.n	8006238 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80061b8:	4b1e      	ldr	r3, [pc, #120]	; (8006234 <checkAktifCalisma+0x1610>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <checkAktifCalisma+0x15d8>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80061c4:	4b12      	ldr	r3, [pc, #72]	; (8006210 <checkAktifCalisma+0x15ec>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e03c      	b.n	8006246 <checkAktifCalisma+0x1622>
 80061cc:	20000245 	.word	0x20000245
 80061d0:	2000024b 	.word	0x2000024b
 80061d4:	2000022c 	.word	0x2000022c
 80061d8:	20000255 	.word	0x20000255
 80061dc:	200001f7 	.word	0x200001f7
 80061e0:	200001fb 	.word	0x200001fb
 80061e4:	20000248 	.word	0x20000248
 80061e8:	40011000 	.word	0x40011000
 80061ec:	20000249 	.word	0x20000249
 80061f0:	20000252 	.word	0x20000252
 80061f4:	40010c00 	.word	0x40010c00
 80061f8:	20000242 	.word	0x20000242
 80061fc:	20000256 	.word	0x20000256
 8006200:	40010800 	.word	0x40010800
 8006204:	200001fc 	.word	0x200001fc
 8006208:	20000253 	.word	0x20000253
 800620c:	20000236 	.word	0x20000236
 8006210:	20000257 	.word	0x20000257
 8006214:	20000254 	.word	0x20000254
 8006218:	2000022b 	.word	0x2000022b
 800621c:	200001d0 	.word	0x200001d0
 8006220:	200001e4 	.word	0x200001e4
 8006224:	2000020c 	.word	0x2000020c
 8006228:	20000243 	.word	0x20000243
 800622c:	20000229 	.word	0x20000229
 8006230:	2000022a 	.word	0x2000022a
 8006234:	2000024a 	.word	0x2000024a
		} else {
			makineCalisiyor=1;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <checkAktifCalisma+0x1690>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800623e:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <checkAktifCalisma+0x1694>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <checkAktifCalisma+0x1698>)
 8006244:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006246:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <checkAktifCalisma+0x169c>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02f      	beq.n	80062ae <checkAktifCalisma+0x168a>
 800624e:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <checkAktifCalisma+0x16a0>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	f083 0301 	eor.w	r3, r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d028      	beq.n	80062ae <checkAktifCalisma+0x168a>
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <checkAktifCalisma+0x16a4>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d021      	beq.n	80062ae <checkAktifCalisma+0x168a>
 800626a:	4b18      	ldr	r3, [pc, #96]	; (80062cc <checkAktifCalisma+0x16a8>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f083 0301 	eor.w	r3, r3, #1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01a      	beq.n	80062ae <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <checkAktifCalisma+0x16ac>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f083 0301 	eor.w	r3, r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d013      	beq.n	80062ae <checkAktifCalisma+0x168a>
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <checkAktifCalisma+0x16b0>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f083 0301 	eor.w	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00c      	beq.n	80062ae <checkAktifCalisma+0x168a>
 8006294:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <checkAktifCalisma+0x16b4>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f083 0301 	eor.w	r3, r3, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <checkAktifCalisma+0x168a>
			hataVar=0;
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <checkAktifCalisma+0x169c>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80062a8:	2007      	movs	r0, #7
 80062aa:	f7fe fae9 	bl	8004880 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	2000024a 	.word	0x2000024a
 80062b8:	200001d0 	.word	0x200001d0
 80062bc:	200001e4 	.word	0x200001e4
 80062c0:	20000249 	.word	0x20000249
 80062c4:	20000244 	.word	0x20000244
 80062c8:	20000245 	.word	0x20000245
 80062cc:	20000252 	.word	0x20000252
 80062d0:	20000253 	.word	0x20000253
 80062d4:	20000254 	.word	0x20000254
 80062d8:	20000243 	.word	0x20000243

080062dc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80062e0:	4b8b      	ldr	r3, [pc, #556]	; (8006510 <checkDemoModCalisma+0x234>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	f040 8229 	bne.w	800673c <checkDemoModCalisma+0x460>
 80062ea:	4b8a      	ldr	r3, [pc, #552]	; (8006514 <checkDemoModCalisma+0x238>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8224 	beq.w	800673c <checkDemoModCalisma+0x460>
 80062f4:	4b88      	ldr	r3, [pc, #544]	; (8006518 <checkDemoModCalisma+0x23c>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 821f 	bne.w	800673c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062fe:	2102      	movs	r1, #2
 8006300:	4886      	ldr	r0, [pc, #536]	; (800651c <checkDemoModCalisma+0x240>)
 8006302:	f002 ff09 	bl	8009118 <HAL_GPIO_ReadPin>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11d      	bne.n	8006348 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 800630c:	4b84      	ldr	r3, [pc, #528]	; (8006520 <checkDemoModCalisma+0x244>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f083 0301 	eor.w	r3, r3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800631a:	4b82      	ldr	r3, [pc, #520]	; (8006524 <checkDemoModCalisma+0x248>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f083 0301 	eor.w	r3, r3, #1
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00f      	beq.n	8006348 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006328:	4b7f      	ldr	r3, [pc, #508]	; (8006528 <checkDemoModCalisma+0x24c>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f083 0301 	eor.w	r3, r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006336:	2201      	movs	r2, #1
 8006338:	2104      	movs	r1, #4
 800633a:	487c      	ldr	r0, [pc, #496]	; (800652c <checkDemoModCalisma+0x250>)
 800633c:	f002 ff03 	bl	8009146 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006340:	4b7b      	ldr	r3, [pc, #492]	; (8006530 <checkDemoModCalisma+0x254>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e00e      	b.n	8006366 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006348:	2102      	movs	r1, #2
 800634a:	4874      	ldr	r0, [pc, #464]	; (800651c <checkDemoModCalisma+0x240>)
 800634c:	f002 fee4 	bl	8009118 <HAL_GPIO_ReadPin>
 8006350:	4603      	mov	r3, r0
 8006352:	2b01      	cmp	r3, #1
 8006354:	d107      	bne.n	8006366 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006356:	2200      	movs	r2, #0
 8006358:	2104      	movs	r1, #4
 800635a:	4874      	ldr	r0, [pc, #464]	; (800652c <checkDemoModCalisma+0x250>)
 800635c:	f002 fef3 	bl	8009146 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006360:	4b73      	ldr	r3, [pc, #460]	; (8006530 <checkDemoModCalisma+0x254>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006366:	4b72      	ldr	r3, [pc, #456]	; (8006530 <checkDemoModCalisma+0x254>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <checkDemoModCalisma+0xaa>
 800636e:	4b6d      	ldr	r3, [pc, #436]	; (8006524 <checkDemoModCalisma+0x248>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d107      	bne.n	8006386 <checkDemoModCalisma+0xaa>
 8006376:	4b6c      	ldr	r3, [pc, #432]	; (8006528 <checkDemoModCalisma+0x24c>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <checkDemoModCalisma+0xaa>
 800637e:	4b68      	ldr	r3, [pc, #416]	; (8006520 <checkDemoModCalisma+0x244>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00c      	beq.n	80063a0 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006386:	2201      	movs	r2, #1
 8006388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800638c:	4867      	ldr	r0, [pc, #412]	; (800652c <checkDemoModCalisma+0x250>)
 800638e:	f002 feda 	bl	8009146 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006392:	2201      	movs	r2, #1
 8006394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006398:	4864      	ldr	r0, [pc, #400]	; (800652c <checkDemoModCalisma+0x250>)
 800639a:	f002 fed4 	bl	8009146 <HAL_GPIO_WritePin>
 800639e:	e00b      	b.n	80063b8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063a6:	4861      	ldr	r0, [pc, #388]	; (800652c <checkDemoModCalisma+0x250>)
 80063a8:	f002 fecd 	bl	8009146 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063b2:	485e      	ldr	r0, [pc, #376]	; (800652c <checkDemoModCalisma+0x250>)
 80063b4:	f002 fec7 	bl	8009146 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063b8:	2102      	movs	r1, #2
 80063ba:	4858      	ldr	r0, [pc, #352]	; (800651c <checkDemoModCalisma+0x240>)
 80063bc:	f002 feac 	bl	8009118 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10d      	bne.n	80063e2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063ca:	4854      	ldr	r0, [pc, #336]	; (800651c <checkDemoModCalisma+0x240>)
 80063cc:	f002 fea4 	bl	8009118 <HAL_GPIO_ReadPin>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80063d6:	4b56      	ldr	r3, [pc, #344]	; (8006530 <checkDemoModCalisma+0x254>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f083 0301 	eor.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063e2:	2102      	movs	r1, #2
 80063e4:	484d      	ldr	r0, [pc, #308]	; (800651c <checkDemoModCalisma+0x240>)
 80063e6:	f002 fe97 	bl	8009118 <HAL_GPIO_ReadPin>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d125      	bne.n	800643c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063f4:	4849      	ldr	r0, [pc, #292]	; (800651c <checkDemoModCalisma+0x240>)
 80063f6:	f002 fe8f 	bl	8009118 <HAL_GPIO_ReadPin>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11d      	bne.n	800643c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <checkDemoModCalisma+0x254>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f083 0301 	eor.w	r3, r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800640e:	4b44      	ldr	r3, [pc, #272]	; (8006520 <checkDemoModCalisma+0x244>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f083 0301 	eor.w	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00f      	beq.n	800643c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800641c:	4b42      	ldr	r3, [pc, #264]	; (8006528 <checkDemoModCalisma+0x24c>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f083 0301 	eor.w	r3, r3, #1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800642a:	2201      	movs	r2, #1
 800642c:	2120      	movs	r1, #32
 800642e:	483b      	ldr	r0, [pc, #236]	; (800651c <checkDemoModCalisma+0x240>)
 8006430:	f002 fe89 	bl	8009146 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006434:	4b3b      	ldr	r3, [pc, #236]	; (8006524 <checkDemoModCalisma+0x248>)
 8006436:	2201      	movs	r2, #1
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e007      	b.n	800644c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800643c:	2200      	movs	r2, #0
 800643e:	2120      	movs	r1, #32
 8006440:	4836      	ldr	r0, [pc, #216]	; (800651c <checkDemoModCalisma+0x240>)
 8006442:	f002 fe80 	bl	8009146 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <checkDemoModCalisma+0x248>)
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800644c:	2102      	movs	r1, #2
 800644e:	4833      	ldr	r0, [pc, #204]	; (800651c <checkDemoModCalisma+0x240>)
 8006450:	f002 fe62 	bl	8009118 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d125      	bne.n	80064a6 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800645a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800645e:	482f      	ldr	r0, [pc, #188]	; (800651c <checkDemoModCalisma+0x240>)
 8006460:	f002 fe5a 	bl	8009118 <HAL_GPIO_ReadPin>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11d      	bne.n	80064a6 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800646a:	4b31      	ldr	r3, [pc, #196]	; (8006530 <checkDemoModCalisma+0x254>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f083 0301 	eor.w	r3, r3, #1
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d016      	beq.n	80064a6 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <checkDemoModCalisma+0x248>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f083 0301 	eor.w	r3, r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00f      	beq.n	80064a6 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006486:	4b26      	ldr	r3, [pc, #152]	; (8006520 <checkDemoModCalisma+0x244>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f083 0301 	eor.w	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006494:	2201      	movs	r2, #1
 8006496:	2110      	movs	r1, #16
 8006498:	4820      	ldr	r0, [pc, #128]	; (800651c <checkDemoModCalisma+0x240>)
 800649a:	f002 fe54 	bl	8009146 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800649e:	4b22      	ldr	r3, [pc, #136]	; (8006528 <checkDemoModCalisma+0x24c>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e007      	b.n	80064b6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80064a6:	2200      	movs	r2, #0
 80064a8:	2110      	movs	r1, #16
 80064aa:	481c      	ldr	r0, [pc, #112]	; (800651c <checkDemoModCalisma+0x240>)
 80064ac:	f002 fe4b 	bl	8009146 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80064b0:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <checkDemoModCalisma+0x24c>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80064b6:	2104      	movs	r1, #4
 80064b8:	4818      	ldr	r0, [pc, #96]	; (800651c <checkDemoModCalisma+0x240>)
 80064ba:	f002 fe2d 	bl	8009118 <HAL_GPIO_ReadPin>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d139      	bne.n	8006538 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80064c4:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <checkDemoModCalisma+0x254>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f083 0301 	eor.w	r3, r3, #1
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d032      	beq.n	8006538 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <checkDemoModCalisma+0x24c>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02b      	beq.n	8006538 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <checkDemoModCalisma+0x248>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d024      	beq.n	8006538 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80064ee:	2201      	movs	r2, #1
 80064f0:	2102      	movs	r1, #2
 80064f2:	480e      	ldr	r0, [pc, #56]	; (800652c <checkDemoModCalisma+0x250>)
 80064f4:	f002 fe27 	bl	8009146 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80064f8:	2201      	movs	r2, #1
 80064fa:	2101      	movs	r1, #1
 80064fc:	480b      	ldr	r0, [pc, #44]	; (800652c <checkDemoModCalisma+0x250>)
 80064fe:	f002 fe22 	bl	8009146 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <checkDemoModCalisma+0x244>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <checkDemoModCalisma+0x258>)
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e027      	b.n	8006560 <checkDemoModCalisma+0x284>
 8006510:	20000212 	.word	0x20000212
 8006514:	20000246 	.word	0x20000246
 8006518:	20000211 	.word	0x20000211
 800651c:	40011000 	.word	0x40011000
 8006520:	2000024d 	.word	0x2000024d
 8006524:	2000024e 	.word	0x2000024e
 8006528:	2000024f 	.word	0x2000024f
 800652c:	40010c00 	.word	0x40010c00
 8006530:	2000024c 	.word	0x2000024c
 8006534:	20000232 	.word	0x20000232
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006538:	2104      	movs	r1, #4
 800653a:	48a0      	ldr	r0, [pc, #640]	; (80067bc <checkDemoModCalisma+0x4e0>)
 800653c:	f002 fdec 	bl	8009118 <HAL_GPIO_ReadPin>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d10c      	bne.n	8006560 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006546:	2200      	movs	r2, #0
 8006548:	2102      	movs	r1, #2
 800654a:	489d      	ldr	r0, [pc, #628]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 800654c:	f002 fdfb 	bl	8009146 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006550:	2200      	movs	r2, #0
 8006552:	2101      	movs	r1, #1
 8006554:	489a      	ldr	r0, [pc, #616]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 8006556:	f002 fdf6 	bl	8009146 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800655a:	4b9a      	ldr	r3, [pc, #616]	; (80067c4 <checkDemoModCalisma+0x4e8>)
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006560:	2104      	movs	r1, #4
 8006562:	4896      	ldr	r0, [pc, #600]	; (80067bc <checkDemoModCalisma+0x4e0>)
 8006564:	f002 fdd8 	bl	8009118 <HAL_GPIO_ReadPin>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d10d      	bne.n	800658a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800656e:	2201      	movs	r2, #1
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	4895      	ldr	r0, [pc, #596]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 8006574:	f002 fde7 	bl	8009146 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006578:	2201      	movs	r2, #1
 800657a:	2120      	movs	r1, #32
 800657c:	4892      	ldr	r0, [pc, #584]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 800657e:	f002 fde2 	bl	8009146 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006582:	4b92      	ldr	r3, [pc, #584]	; (80067cc <checkDemoModCalisma+0x4f0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a92      	ldr	r2, [pc, #584]	; (80067d0 <checkDemoModCalisma+0x4f4>)
 8006588:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800658a:	4b90      	ldr	r3, [pc, #576]	; (80067cc <checkDemoModCalisma+0x4f0>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b90      	ldr	r3, [pc, #576]	; (80067d0 <checkDemoModCalisma+0x4f4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b04      	cmp	r3, #4
 8006596:	d909      	bls.n	80065ac <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	488a      	ldr	r0, [pc, #552]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 800659e:	f002 fdd2 	bl	8009146 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80065a2:	2200      	movs	r2, #0
 80065a4:	2120      	movs	r1, #32
 80065a6:	4888      	ldr	r0, [pc, #544]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 80065a8:	f002 fdcd 	bl	8009146 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80065ac:	2102      	movs	r1, #2
 80065ae:	4883      	ldr	r0, [pc, #524]	; (80067bc <checkDemoModCalisma+0x4e0>)
 80065b0:	f002 fdb2 	bl	8009118 <HAL_GPIO_ReadPin>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d108      	bne.n	80065cc <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80065ba:	2201      	movs	r2, #1
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	4882      	ldr	r0, [pc, #520]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 80065c0:	f002 fdc1 	bl	8009146 <HAL_GPIO_WritePin>
			timer3 = millis;
 80065c4:	4b81      	ldr	r3, [pc, #516]	; (80067cc <checkDemoModCalisma+0x4f0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a81      	ldr	r2, [pc, #516]	; (80067d0 <checkDemoModCalisma+0x4f4>)
 80065ca:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065cc:	4b7f      	ldr	r3, [pc, #508]	; (80067cc <checkDemoModCalisma+0x4f0>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4b7f      	ldr	r3, [pc, #508]	; (80067d0 <checkDemoModCalisma+0x4f4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d904      	bls.n	80065e4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80065da:	2200      	movs	r2, #0
 80065dc:	2140      	movs	r1, #64	; 0x40
 80065de:	487a      	ldr	r0, [pc, #488]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 80065e0:	f002 fdb1 	bl	8009146 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80065e4:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <checkDemoModCalisma+0x4f8>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d058      	beq.n	800669e <checkDemoModCalisma+0x3c2>
 80065ec:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <checkDemoModCalisma+0x4fc>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d054      	beq.n	800669e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80065f4:	4b79      	ldr	r3, [pc, #484]	; (80067dc <checkDemoModCalisma+0x500>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	4b77      	ldr	r3, [pc, #476]	; (80067dc <checkDemoModCalisma+0x500>)
 80065fe:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006600:	4b76      	ldr	r3, [pc, #472]	; (80067dc <checkDemoModCalisma+0x500>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b09      	cmp	r3, #9
 8006606:	d908      	bls.n	800661a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006608:	4b74      	ldr	r3, [pc, #464]	; (80067dc <checkDemoModCalisma+0x500>)
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800660e:	4b74      	ldr	r3, [pc, #464]	; (80067e0 <checkDemoModCalisma+0x504>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	b2da      	uxtb	r2, r3
 8006616:	4b72      	ldr	r3, [pc, #456]	; (80067e0 <checkDemoModCalisma+0x504>)
 8006618:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800661a:	4b71      	ldr	r3, [pc, #452]	; (80067e0 <checkDemoModCalisma+0x504>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b09      	cmp	r3, #9
 8006620:	d908      	bls.n	8006634 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006622:	4b6f      	ldr	r3, [pc, #444]	; (80067e0 <checkDemoModCalisma+0x504>)
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006628:	4b6e      	ldr	r3, [pc, #440]	; (80067e4 <checkDemoModCalisma+0x508>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	4b6c      	ldr	r3, [pc, #432]	; (80067e4 <checkDemoModCalisma+0x508>)
 8006632:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006634:	4b6b      	ldr	r3, [pc, #428]	; (80067e4 <checkDemoModCalisma+0x508>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b09      	cmp	r3, #9
 800663a:	d908      	bls.n	800664e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 800663c:	4b69      	ldr	r3, [pc, #420]	; (80067e4 <checkDemoModCalisma+0x508>)
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006642:	4b69      	ldr	r3, [pc, #420]	; (80067e8 <checkDemoModCalisma+0x50c>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	b2da      	uxtb	r2, r3
 800664a:	4b67      	ldr	r3, [pc, #412]	; (80067e8 <checkDemoModCalisma+0x50c>)
 800664c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800664e:	4b66      	ldr	r3, [pc, #408]	; (80067e8 <checkDemoModCalisma+0x50c>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b09      	cmp	r3, #9
 8006654:	d908      	bls.n	8006668 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006656:	4b64      	ldr	r3, [pc, #400]	; (80067e8 <checkDemoModCalisma+0x50c>)
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800665c:	4b63      	ldr	r3, [pc, #396]	; (80067ec <checkDemoModCalisma+0x510>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	4b61      	ldr	r3, [pc, #388]	; (80067ec <checkDemoModCalisma+0x510>)
 8006666:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006668:	4b60      	ldr	r3, [pc, #384]	; (80067ec <checkDemoModCalisma+0x510>)
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	4b60      	ldr	r3, [pc, #384]	; (80067f0 <checkDemoModCalisma+0x514>)
 800666e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <checkDemoModCalisma+0x50c>)
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	4b5e      	ldr	r3, [pc, #376]	; (80067f0 <checkDemoModCalisma+0x514>)
 8006678:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800667a:	4b5a      	ldr	r3, [pc, #360]	; (80067e4 <checkDemoModCalisma+0x508>)
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	4b5c      	ldr	r3, [pc, #368]	; (80067f0 <checkDemoModCalisma+0x514>)
 8006680:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006682:	4b57      	ldr	r3, [pc, #348]	; (80067e0 <checkDemoModCalisma+0x504>)
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	4b5a      	ldr	r3, [pc, #360]	; (80067f0 <checkDemoModCalisma+0x514>)
 8006688:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800668a:	4b54      	ldr	r3, [pc, #336]	; (80067dc <checkDemoModCalisma+0x500>)
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <checkDemoModCalisma+0x514>)
 8006690:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006692:	4b58      	ldr	r3, [pc, #352]	; (80067f4 <checkDemoModCalisma+0x518>)
 8006694:	2201      	movs	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006698:	4b4f      	ldr	r3, [pc, #316]	; (80067d8 <checkDemoModCalisma+0x4fc>)
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800669e:	4b56      	ldr	r3, [pc, #344]	; (80067f8 <checkDemoModCalisma+0x51c>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 8087 	bne.w	80067b6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80066a8:	4a54      	ldr	r2, [pc, #336]	; (80067fc <checkDemoModCalisma+0x520>)
 80066aa:	2101      	movs	r1, #1
 80066ac:	2002      	movs	r0, #2
 80066ae:	f001 fa0d 	bl	8007acc <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80066b2:	4a53      	ldr	r2, [pc, #332]	; (8006800 <checkDemoModCalisma+0x524>)
 80066b4:	2101      	movs	r1, #1
 80066b6:	2001      	movs	r0, #1
 80066b8:	f001 fa08 	bl	8007acc <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80066bc:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <checkDemoModCalisma+0x510>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	220a      	movs	r2, #10
 80066c2:	4950      	ldr	r1, [pc, #320]	; (8006804 <checkDemoModCalisma+0x528>)
 80066c4:	4618      	mov	r0, r3
 80066c6:	f005 fd53 	bl	800c170 <itoa>
			lcd_print(2,12,snum);
 80066ca:	4a4e      	ldr	r2, [pc, #312]	; (8006804 <checkDemoModCalisma+0x528>)
 80066cc:	210c      	movs	r1, #12
 80066ce:	2002      	movs	r0, #2
 80066d0:	f001 f9fc 	bl	8007acc <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80066d4:	4b44      	ldr	r3, [pc, #272]	; (80067e8 <checkDemoModCalisma+0x50c>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	220a      	movs	r2, #10
 80066da:	494a      	ldr	r1, [pc, #296]	; (8006804 <checkDemoModCalisma+0x528>)
 80066dc:	4618      	mov	r0, r3
 80066de:	f005 fd47 	bl	800c170 <itoa>
			lcd_print(2,13,snum);
 80066e2:	4a48      	ldr	r2, [pc, #288]	; (8006804 <checkDemoModCalisma+0x528>)
 80066e4:	210d      	movs	r1, #13
 80066e6:	2002      	movs	r0, #2
 80066e8:	f001 f9f0 	bl	8007acc <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80066ec:	4b3d      	ldr	r3, [pc, #244]	; (80067e4 <checkDemoModCalisma+0x508>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	220a      	movs	r2, #10
 80066f2:	4944      	ldr	r1, [pc, #272]	; (8006804 <checkDemoModCalisma+0x528>)
 80066f4:	4618      	mov	r0, r3
 80066f6:	f005 fd3b 	bl	800c170 <itoa>
			lcd_print(2,14,snum);
 80066fa:	4a42      	ldr	r2, [pc, #264]	; (8006804 <checkDemoModCalisma+0x528>)
 80066fc:	210e      	movs	r1, #14
 80066fe:	2002      	movs	r0, #2
 8006700:	f001 f9e4 	bl	8007acc <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006704:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <checkDemoModCalisma+0x504>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	220a      	movs	r2, #10
 800670a:	493e      	ldr	r1, [pc, #248]	; (8006804 <checkDemoModCalisma+0x528>)
 800670c:	4618      	mov	r0, r3
 800670e:	f005 fd2f 	bl	800c170 <itoa>
			lcd_print(2,15,snum);
 8006712:	4a3c      	ldr	r2, [pc, #240]	; (8006804 <checkDemoModCalisma+0x528>)
 8006714:	210f      	movs	r1, #15
 8006716:	2002      	movs	r0, #2
 8006718:	f001 f9d8 	bl	8007acc <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800671c:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <checkDemoModCalisma+0x500>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	220a      	movs	r2, #10
 8006722:	4938      	ldr	r1, [pc, #224]	; (8006804 <checkDemoModCalisma+0x528>)
 8006724:	4618      	mov	r0, r3
 8006726:	f005 fd23 	bl	800c170 <itoa>
			lcd_print(2,16,snum);
 800672a:	4a36      	ldr	r2, [pc, #216]	; (8006804 <checkDemoModCalisma+0x528>)
 800672c:	2110      	movs	r1, #16
 800672e:	2002      	movs	r0, #2
 8006730:	f001 f9cc 	bl	8007acc <lcd_print>
			mesajYazildi=1;
 8006734:	4b34      	ldr	r3, [pc, #208]	; (8006808 <checkDemoModCalisma+0x52c>)
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800673a:	e03c      	b.n	80067b6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800673c:	4b33      	ldr	r3, [pc, #204]	; (800680c <checkDemoModCalisma+0x530>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d003      	beq.n	800674c <checkDemoModCalisma+0x470>
 8006744:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <checkDemoModCalisma+0x51c>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d134      	bne.n	80067b6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006752:	481b      	ldr	r0, [pc, #108]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 8006754:	f002 fcf7 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800675e:	4818      	ldr	r0, [pc, #96]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 8006760:	f002 fcf1 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006764:	2200      	movs	r2, #0
 8006766:	2104      	movs	r1, #4
 8006768:	4815      	ldr	r0, [pc, #84]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 800676a:	f002 fcec 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800676e:	2200      	movs	r2, #0
 8006770:	2102      	movs	r1, #2
 8006772:	4813      	ldr	r0, [pc, #76]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 8006774:	f002 fce7 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006778:	2200      	movs	r2, #0
 800677a:	2101      	movs	r1, #1
 800677c:	4810      	ldr	r0, [pc, #64]	; (80067c0 <checkDemoModCalisma+0x4e4>)
 800677e:	f002 fce2 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006782:	2200      	movs	r2, #0
 8006784:	2120      	movs	r1, #32
 8006786:	480d      	ldr	r0, [pc, #52]	; (80067bc <checkDemoModCalisma+0x4e0>)
 8006788:	f002 fcdd 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800678c:	2200      	movs	r2, #0
 800678e:	2110      	movs	r1, #16
 8006790:	480a      	ldr	r0, [pc, #40]	; (80067bc <checkDemoModCalisma+0x4e0>)
 8006792:	f002 fcd8 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	480b      	ldr	r0, [pc, #44]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 800679c:	f002 fcd3 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067a0:	2200      	movs	r2, #0
 80067a2:	2140      	movs	r1, #64	; 0x40
 80067a4:	4808      	ldr	r0, [pc, #32]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 80067a6:	f002 fcce 	bl	8009146 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2120      	movs	r1, #32
 80067ae:	4806      	ldr	r0, [pc, #24]	; (80067c8 <checkDemoModCalisma+0x4ec>)
 80067b0:	f002 fcc9 	bl	8009146 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80067b4:	e7ff      	b.n	80067b6 <checkDemoModCalisma+0x4da>
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40011000 	.word	0x40011000
 80067c0:	40010c00 	.word	0x40010c00
 80067c4:	2000024d 	.word	0x2000024d
 80067c8:	40010800 	.word	0x40010800
 80067cc:	200001d0 	.word	0x200001d0
 80067d0:	200001e0 	.word	0x200001e0
 80067d4:	2000024c 	.word	0x2000024c
 80067d8:	20000232 	.word	0x20000232
 80067dc:	200001f1 	.word	0x200001f1
 80067e0:	200001f2 	.word	0x200001f2
 80067e4:	20000000 	.word	0x20000000
 80067e8:	20000001 	.word	0x20000001
 80067ec:	200001f3 	.word	0x200001f3
 80067f0:	20000120 	.word	0x20000120
 80067f4:	20000220 	.word	0x20000220
 80067f8:	20000211 	.word	0x20000211
 80067fc:	0800d998 	.word	0x0800d998
 8006800:	0800d9a4 	.word	0x0800d9a4
 8006804:	20000190 	.word	0x20000190
 8006808:	20000228 	.word	0x20000228
 800680c:	20000212 	.word	0x20000212

08006810 <mainLoop>:

void mainLoop() {
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006816:	f7fe f923 	bl	8004a60 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800681a:	2101      	movs	r1, #1
 800681c:	48ac      	ldr	r0, [pc, #688]	; (8006ad0 <mainLoop+0x2c0>)
 800681e:	f002 fc7b 	bl	8009118 <HAL_GPIO_ReadPin>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d136      	bne.n	8006896 <mainLoop+0x86>
 8006828:	2108      	movs	r1, #8
 800682a:	48aa      	ldr	r0, [pc, #680]	; (8006ad4 <mainLoop+0x2c4>)
 800682c:	f002 fc74 	bl	8009118 <HAL_GPIO_ReadPin>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d12f      	bne.n	8006896 <mainLoop+0x86>
 8006836:	2102      	movs	r1, #2
 8006838:	48a5      	ldr	r0, [pc, #660]	; (8006ad0 <mainLoop+0x2c0>)
 800683a:	f002 fc6d 	bl	8009118 <HAL_GPIO_ReadPin>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d128      	bne.n	8006896 <mainLoop+0x86>
 8006844:	2104      	movs	r1, #4
 8006846:	48a2      	ldr	r0, [pc, #648]	; (8006ad0 <mainLoop+0x2c0>)
 8006848:	f002 fc66 	bl	8009118 <HAL_GPIO_ReadPin>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d121      	bne.n	8006896 <mainLoop+0x86>
 8006852:	2108      	movs	r1, #8
 8006854:	489e      	ldr	r0, [pc, #632]	; (8006ad0 <mainLoop+0x2c0>)
 8006856:	f002 fc5f 	bl	8009118 <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11a      	bne.n	8006896 <mainLoop+0x86>
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	489c      	ldr	r0, [pc, #624]	; (8006ad4 <mainLoop+0x2c4>)
 8006864:	f002 fc58 	bl	8009118 <HAL_GPIO_ReadPin>
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d113      	bne.n	8006896 <mainLoop+0x86>
 800686e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006872:	4898      	ldr	r0, [pc, #608]	; (8006ad4 <mainLoop+0x2c4>)
 8006874:	f002 fc50 	bl	8009118 <HAL_GPIO_ReadPin>
 8006878:	4603      	mov	r3, r0
 800687a:	2b01      	cmp	r3, #1
 800687c:	d10b      	bne.n	8006896 <mainLoop+0x86>
 800687e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006882:	4894      	ldr	r0, [pc, #592]	; (8006ad4 <mainLoop+0x2c4>)
 8006884:	f002 fc48 	bl	8009118 <HAL_GPIO_ReadPin>
 8006888:	4603      	mov	r3, r0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d103      	bne.n	8006896 <mainLoop+0x86>
			butonKontrol=0;
 800688e:	4b92      	ldr	r3, [pc, #584]	; (8006ad8 <mainLoop+0x2c8>)
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e003      	b.n	800689e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006896:	4b91      	ldr	r3, [pc, #580]	; (8006adc <mainLoop+0x2cc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a91      	ldr	r2, [pc, #580]	; (8006ae0 <mainLoop+0x2d0>)
 800689c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800689e:	4b91      	ldr	r3, [pc, #580]	; (8006ae4 <mainLoop+0x2d4>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d03a      	beq.n	800691c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068a6:	bf00      	nop
 80068a8:	488f      	ldr	r0, [pc, #572]	; (8006ae8 <mainLoop+0x2d8>)
 80068aa:	f003 fa5e 	bl	8009d6a <HAL_I2C_GetError>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d0f9      	beq.n	80068a8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80068b4:	bf00      	nop
 80068b6:	488c      	ldr	r0, [pc, #560]	; (8006ae8 <mainLoop+0x2d8>)
 80068b8:	f003 fa4a 	bl	8009d50 <HAL_I2C_GetState>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d1f9      	bne.n	80068b6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80068c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068c6:	9302      	str	r3, [sp, #8]
 80068c8:	236e      	movs	r3, #110	; 0x6e
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	4b87      	ldr	r3, [pc, #540]	; (8006aec <mainLoop+0x2dc>)
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	236e      	movs	r3, #110	; 0x6e
 80068d2:	2200      	movs	r2, #0
 80068d4:	21a0      	movs	r1, #160	; 0xa0
 80068d6:	4884      	ldr	r0, [pc, #528]	; (8006ae8 <mainLoop+0x2d8>)
 80068d8:	f002 fed8 	bl	800968c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80068dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068e0:	f001 fe4a 	bl	8008578 <HAL_Delay>

		  hafizaYaz=0;
 80068e4:	4b7f      	ldr	r3, [pc, #508]	; (8006ae4 <mainLoop+0x2d4>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80068ea:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <mainLoop+0x2e0>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80068f2:	4a80      	ldr	r2, [pc, #512]	; (8006af4 <mainLoop+0x2e4>)
 80068f4:	2101      	movs	r1, #1
 80068f6:	2002      	movs	r0, #2
 80068f8:	f001 f8e8 	bl	8007acc <lcd_print>
 80068fc:	e008      	b.n	8006910 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80068fe:	4b7c      	ldr	r3, [pc, #496]	; (8006af0 <mainLoop+0x2e0>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d104      	bne.n	8006910 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006906:	4a7c      	ldr	r2, [pc, #496]	; (8006af8 <mainLoop+0x2e8>)
 8006908:	2101      	movs	r1, #1
 800690a:	2002      	movs	r0, #2
 800690c:	f001 f8de 	bl	8007acc <lcd_print>
		  }

		  HAL_Delay(1000);
 8006910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006914:	f001 fe30 	bl	8008578 <HAL_Delay>
		  lcd_clear();
 8006918:	f001 f904 	bl	8007b24 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800691c:	4b77      	ldr	r3, [pc, #476]	; (8006afc <mainLoop+0x2ec>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f083 0301 	eor.w	r3, r3, #1
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d06d      	beq.n	8006a06 <mainLoop+0x1f6>
 800692a:	486f      	ldr	r0, [pc, #444]	; (8006ae8 <mainLoop+0x2d8>)
 800692c:	f003 fa10 	bl	8009d50 <HAL_I2C_GetState>
 8006930:	4603      	mov	r3, r0
 8006932:	2b20      	cmp	r3, #32
 8006934:	d167      	bne.n	8006a06 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006936:	4b72      	ldr	r3, [pc, #456]	; (8006b00 <mainLoop+0x2f0>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d044      	beq.n	80069ce <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006944:	4a6f      	ldr	r2, [pc, #444]	; (8006b04 <mainLoop+0x2f4>)
 8006946:	2101      	movs	r1, #1
 8006948:	2001      	movs	r0, #1
 800694a:	f001 f8bf 	bl	8007acc <lcd_print>
			  if(dilSecim==0) {
 800694e:	4b68      	ldr	r3, [pc, #416]	; (8006af0 <mainLoop+0x2e0>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006956:	4a6c      	ldr	r2, [pc, #432]	; (8006b08 <mainLoop+0x2f8>)
 8006958:	2101      	movs	r1, #1
 800695a:	2002      	movs	r0, #2
 800695c:	f001 f8b6 	bl	8007acc <lcd_print>
 8006960:	e008      	b.n	8006974 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006962:	4b63      	ldr	r3, [pc, #396]	; (8006af0 <mainLoop+0x2e0>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d104      	bne.n	8006974 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800696a:	4a68      	ldr	r2, [pc, #416]	; (8006b0c <mainLoop+0x2fc>)
 800696c:	2101      	movs	r1, #1
 800696e:	2002      	movs	r0, #2
 8006970:	f001 f8ac 	bl	8007acc <lcd_print>
			  }
			  HAL_Delay(1000);
 8006974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006978:	f001 fdfe 	bl	8008578 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800697c:	bf00      	nop
 800697e:	485a      	ldr	r0, [pc, #360]	; (8006ae8 <mainLoop+0x2d8>)
 8006980:	f003 f9f3 	bl	8009d6a <HAL_I2C_GetError>
 8006984:	4603      	mov	r3, r0
 8006986:	2b04      	cmp	r3, #4
 8006988:	d0f9      	beq.n	800697e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800698a:	e003      	b.n	8006994 <mainLoop+0x184>
				  HAL_Delay(1000);
 800698c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006990:	f001 fdf2 	bl	8008578 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006994:	4854      	ldr	r0, [pc, #336]	; (8006ae8 <mainLoop+0x2d8>)
 8006996:	f003 f9db 	bl	8009d50 <HAL_I2C_GetState>
 800699a:	4603      	mov	r3, r0
 800699c:	2b20      	cmp	r3, #32
 800699e:	d1f5      	bne.n	800698c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80069a0:	4b53      	ldr	r3, [pc, #332]	; (8006af0 <mainLoop+0x2e0>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80069a8:	4a59      	ldr	r2, [pc, #356]	; (8006b10 <mainLoop+0x300>)
 80069aa:	2101      	movs	r1, #1
 80069ac:	2002      	movs	r0, #2
 80069ae:	f001 f88d 	bl	8007acc <lcd_print>
 80069b2:	e008      	b.n	80069c6 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80069b4:	4b4e      	ldr	r3, [pc, #312]	; (8006af0 <mainLoop+0x2e0>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d104      	bne.n	80069c6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80069bc:	4a55      	ldr	r2, [pc, #340]	; (8006b14 <mainLoop+0x304>)
 80069be:	2101      	movs	r1, #1
 80069c0:	2002      	movs	r0, #2
 80069c2:	f001 f883 	bl	8007acc <lcd_print>
			  }

			  ilkOkuma=1;
 80069c6:	4b4e      	ldr	r3, [pc, #312]	; (8006b00 <mainLoop+0x2f0>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e014      	b.n	80069f8 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80069ce:	4b48      	ldr	r3, [pc, #288]	; (8006af0 <mainLoop+0x2e0>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80069d6:	4a50      	ldr	r2, [pc, #320]	; (8006b18 <mainLoop+0x308>)
 80069d8:	2101      	movs	r1, #1
 80069da:	2002      	movs	r0, #2
 80069dc:	f001 f876 	bl	8007acc <lcd_print>
 80069e0:	e008      	b.n	80069f4 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80069e2:	4b43      	ldr	r3, [pc, #268]	; (8006af0 <mainLoop+0x2e0>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d104      	bne.n	80069f4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80069ea:	4a4c      	ldr	r2, [pc, #304]	; (8006b1c <mainLoop+0x30c>)
 80069ec:	2101      	movs	r1, #1
 80069ee:	2002      	movs	r0, #2
 80069f0:	f001 f86c 	bl	8007acc <lcd_print>
			  }
			  lcd_clear();
 80069f4:	f001 f896 	bl	8007b24 <lcd_clear>
		  }

		  lcd_clear();
 80069f8:	f001 f894 	bl	8007b24 <lcd_clear>

		  eepromKontrol();
 80069fc:	f7f9 fc1a 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006a00:	4b3e      	ldr	r3, [pc, #248]	; (8006afc <mainLoop+0x2ec>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006a06:	4b46      	ldr	r3, [pc, #280]	; (8006b20 <mainLoop+0x310>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11c      	bne.n	8006a48 <mainLoop+0x238>
 8006a0e:	4b45      	ldr	r3, [pc, #276]	; (8006b24 <mainLoop+0x314>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f083 0301 	eor.w	r3, r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d015      	beq.n	8006a48 <mainLoop+0x238>
 8006a1c:	4b42      	ldr	r3, [pc, #264]	; (8006b28 <mainLoop+0x318>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d111      	bne.n	8006a48 <mainLoop+0x238>
			lcd_clear();
 8006a24:	f001 f87e 	bl	8007b24 <lcd_clear>
			HAL_Delay(10);
 8006a28:	200a      	movs	r0, #10
 8006a2a:	f001 fda5 	bl	8008578 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a2e:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <mainLoop+0x31c>)
 8006a30:	2101      	movs	r1, #1
 8006a32:	2001      	movs	r0, #1
 8006a34:	f001 f84a 	bl	8007acc <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006a38:	4a3d      	ldr	r2, [pc, #244]	; (8006b30 <mainLoop+0x320>)
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	2002      	movs	r0, #2
 8006a3e:	f001 f845 	bl	8007acc <lcd_print>
			mesajYazildi=1;
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <mainLoop+0x314>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006a48:	4b35      	ldr	r3, [pc, #212]	; (8006b20 <mainLoop+0x310>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d112      	bne.n	8006a76 <mainLoop+0x266>
 8006a50:	2102      	movs	r1, #2
 8006a52:	481f      	ldr	r0, [pc, #124]	; (8006ad0 <mainLoop+0x2c0>)
 8006a54:	f002 fb60 	bl	8009118 <HAL_GPIO_ReadPin>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d10b      	bne.n	8006a76 <mainLoop+0x266>
 8006a5e:	2104      	movs	r1, #4
 8006a60:	481b      	ldr	r0, [pc, #108]	; (8006ad0 <mainLoop+0x2c0>)
 8006a62:	f002 fb59 	bl	8009118 <HAL_GPIO_ReadPin>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d104      	bne.n	8006a76 <mainLoop+0x266>
			menuGiris=1;
 8006a6c:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <mainLoop+0x310>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a72:	f001 f857 	bl	8007b24 <lcd_clear>
		}

		if(menuGiris==1) {
 8006a76:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <mainLoop+0x310>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <mainLoop+0x272>
			menu();
 8006a7e:	f7fa fb87 	bl	8001190 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a86:	4813      	ldr	r0, [pc, #76]	; (8006ad4 <mainLoop+0x2c4>)
 8006a88:	f002 fb75 	bl	8009176 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a90:	4828      	ldr	r0, [pc, #160]	; (8006b34 <mainLoop+0x324>)
 8006a92:	f002 fb41 	bl	8009118 <HAL_GPIO_ReadPin>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <mainLoop+0x2a2>
 8006a9c:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <mainLoop+0x328>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f083 0301 	eor.w	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <mainLoop+0x2a2>
			stopVar=1;
 8006aaa:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <mainLoop+0x32c>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	e002      	b.n	8006ab8 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006ab2:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <mainLoop+0x32c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006ab8:	f7fd ffe8 	bl	8004a8c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006abc:	f7fe f81a 	bl	8004af4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ac0:	f7fe f85e 	bl	8004b80 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006ac4:	f7fe f8ae 	bl	8004c24 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ac8:	f7ff fc08 	bl	80062dc <checkDemoModCalisma>
		checkLCDBacklight();
 8006acc:	e6a3      	b.n	8006816 <mainLoop+0x6>
 8006ace:	bf00      	nop
 8006ad0:	40010800 	.word	0x40010800
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	20000223 	.word	0x20000223
 8006adc:	200001d0 	.word	0x200001d0
 8006ae0:	200001ec 	.word	0x200001ec
 8006ae4:	20000220 	.word	0x20000220
 8006ae8:	20000284 	.word	0x20000284
 8006aec:	20000120 	.word	0x20000120
 8006af0:	20000215 	.word	0x20000215
 8006af4:	0800d9b8 	.word	0x0800d9b8
 8006af8:	0800d9cc 	.word	0x0800d9cc
 8006afc:	20000221 	.word	0x20000221
 8006b00:	20000222 	.word	0x20000222
 8006b04:	0800d9e0 	.word	0x0800d9e0
 8006b08:	0800d9f4 	.word	0x0800d9f4
 8006b0c:	0800da08 	.word	0x0800da08
 8006b10:	0800da1c 	.word	0x0800da1c
 8006b14:	0800da30 	.word	0x0800da30
 8006b18:	0800da44 	.word	0x0800da44
 8006b1c:	0800da58 	.word	0x0800da58
 8006b20:	20000211 	.word	0x20000211
 8006b24:	20000228 	.word	0x20000228
 8006b28:	20000212 	.word	0x20000212
 8006b2c:	0800da6c 	.word	0x0800da6c
 8006b30:	0800da80 	.word	0x0800da80
 8006b34:	40010c00 	.word	0x40010c00
 8006b38:	20000249 	.word	0x20000249
 8006b3c:	20000246 	.word	0x20000246

08006b40 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006b46:	2001      	movs	r0, #1
 8006b48:	f001 f81e 	bl	8007b88 <lcd_cursor>

    int cursorPosition = 3;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006b54:	2305      	movs	r3, #5
 8006b56:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006b58:	220c      	movs	r2, #12
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	48a1      	ldr	r0, [pc, #644]	; (8006de4 <takeMachineID+0x2a4>)
 8006b5e:	f005 fc62 	bl	800c426 <memset>
    HAL_Delay(100);
 8006b62:	2064      	movs	r0, #100	; 0x64
 8006b64:	f001 fd08 	bl	8008578 <HAL_Delay>

    printTemplate(1, 0);
 8006b68:	2100      	movs	r1, #0
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f7fa f8aa 	bl	8000cc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006b70:	2108      	movs	r1, #8
 8006b72:	489d      	ldr	r0, [pc, #628]	; (8006de8 <takeMachineID+0x2a8>)
 8006b74:	f002 fad0 	bl	8009118 <HAL_GPIO_ReadPin>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d13a      	bne.n	8006bf4 <takeMachineID+0xb4>
        	HAL_Delay(50);
 8006b7e:	2032      	movs	r0, #50	; 0x32
 8006b80:	f001 fcfa 	bl	8008578 <HAL_Delay>
        	lcd_cursor(0);
 8006b84:	2000      	movs	r0, #0
 8006b86:	f000 ffff 	bl	8007b88 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006b8a:	4b96      	ldr	r3, [pc, #600]	; (8006de4 <takeMachineID+0x2a4>)
 8006b8c:	7adb      	ldrb	r3, [r3, #11]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d110      	bne.n	8006bb4 <takeMachineID+0x74>
        		lcd_clear();
 8006b92:	f000 ffc7 	bl	8007b24 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006b96:	4a95      	ldr	r2, [pc, #596]	; (8006dec <takeMachineID+0x2ac>)
 8006b98:	2101      	movs	r1, #1
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	f000 ff96 	bl	8007acc <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006ba0:	4a93      	ldr	r2, [pc, #588]	; (8006df0 <takeMachineID+0x2b0>)
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	2002      	movs	r0, #2
 8006ba6:	f000 ff91 	bl	8007acc <lcd_print>
        		HAL_Delay(1200);
 8006baa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006bae:	f001 fce3 	bl	8008578 <HAL_Delay>
        		goto mainSection;
 8006bb2:	e7c8      	b.n	8006b46 <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006bb4:	4b8f      	ldr	r3, [pc, #572]	; (8006df4 <takeMachineID+0x2b4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a8f      	ldr	r2, [pc, #572]	; (8006df8 <takeMachineID+0x2b8>)
 8006bba:	4413      	add	r3, r2
 8006bbc:	4a89      	ldr	r2, [pc, #548]	; (8006de4 <takeMachineID+0x2a4>)
 8006bbe:	6810      	ldr	r0, [r2, #0]
 8006bc0:	6851      	ldr	r1, [r2, #4]
 8006bc2:	6892      	ldr	r2, [r2, #8]
 8006bc4:	6018      	str	r0, [r3, #0]
 8006bc6:	6059      	str	r1, [r3, #4]
 8006bc8:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006bca:	20c8      	movs	r0, #200	; 0xc8
 8006bcc:	f001 fcd4 	bl	8008578 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006bd0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bd4:	9302      	str	r3, [sp, #8]
 8006bd6:	236e      	movs	r3, #110	; 0x6e
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	4b87      	ldr	r3, [pc, #540]	; (8006df8 <takeMachineID+0x2b8>)
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	236e      	movs	r3, #110	; 0x6e
 8006be0:	2200      	movs	r2, #0
 8006be2:	21a0      	movs	r1, #160	; 0xa0
 8006be4:	4885      	ldr	r0, [pc, #532]	; (8006dfc <takeMachineID+0x2bc>)
 8006be6:	f002 fd51 	bl	800968c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bee:	f001 fcc3 	bl	8008578 <HAL_Delay>

            break;
 8006bf2:	e0f3      	b.n	8006ddc <takeMachineID+0x29c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	487c      	ldr	r0, [pc, #496]	; (8006de8 <takeMachineID+0x2a8>)
 8006bf8:	f002 fa8e 	bl	8009118 <HAL_GPIO_ReadPin>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d114      	bne.n	8006c2c <takeMachineID+0xec>
        	HAL_Delay(50);
 8006c02:	2032      	movs	r0, #50	; 0x32
 8006c04:	f001 fcb8 	bl	8008578 <HAL_Delay>

        	if(cursorPosition == 7) {
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b07      	cmp	r3, #7
 8006c0c:	d102      	bne.n	8006c14 <takeMachineID+0xd4>
        		cursorPosition = 10;
 8006c0e:	230a      	movs	r3, #10
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e008      	b.n	8006c26 <takeMachineID+0xe6>
        	} else if (cursorPosition == 14) {
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b0e      	cmp	r3, #14
 8006c18:	d102      	bne.n	8006c20 <takeMachineID+0xe0>
                cursorPosition = 3;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e002      	b.n	8006c26 <takeMachineID+0xe6>
            } else {
            	cursorPosition++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(150);
 8006c26:	2096      	movs	r0, #150	; 0x96
 8006c28:	f001 fca6 	bl	8008578 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006c2c:	2108      	movs	r1, #8
 8006c2e:	4874      	ldr	r0, [pc, #464]	; (8006e00 <takeMachineID+0x2c0>)
 8006c30:	f002 fa72 	bl	8009118 <HAL_GPIO_ReadPin>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d114      	bne.n	8006c64 <takeMachineID+0x124>
        	HAL_Delay(50);
 8006c3a:	2032      	movs	r0, #50	; 0x32
 8006c3c:	f001 fc9c 	bl	8008578 <HAL_Delay>

            if (cursorPosition == 3) {
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d102      	bne.n	8006c4c <takeMachineID+0x10c>
                cursorPosition = 14;
 8006c46:	230e      	movs	r3, #14
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e008      	b.n	8006c5e <takeMachineID+0x11e>
            } else if(cursorPosition == 10) {
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b0a      	cmp	r3, #10
 8006c50:	d102      	bne.n	8006c58 <takeMachineID+0x118>
            	cursorPosition = 7;
 8006c52:	2307      	movs	r3, #7
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e002      	b.n	8006c5e <takeMachineID+0x11e>
            } else {
            	cursorPosition--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006c5e:	2096      	movs	r0, #150	; 0x96
 8006c60:	f001 fc8a 	bl	8008578 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006c64:	2102      	movs	r1, #2
 8006c66:	4860      	ldr	r0, [pc, #384]	; (8006de8 <takeMachineID+0x2a8>)
 8006c68:	f002 fa56 	bl	8009118 <HAL_GPIO_ReadPin>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d174      	bne.n	8006d5c <takeMachineID+0x21c>
        	HAL_Delay(50);
 8006c72:	2032      	movs	r0, #50	; 0x32
 8006c74:	f001 fc80 	bl	8008578 <HAL_Delay>

        	if(cursorPosition == 3) {
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d105      	bne.n	8006c8a <takeMachineID+0x14a>
        		machineID[machineIDLoc] = '0';
 8006c7e:	4a59      	ldr	r2, [pc, #356]	; (8006de4 <takeMachineID+0x2a4>)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	2230      	movs	r2, #48	; 0x30
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e04f      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 4) {
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d105      	bne.n	8006c9c <takeMachineID+0x15c>
        		machineID[machineIDLoc] = '1';
 8006c90:	4a54      	ldr	r2, [pc, #336]	; (8006de4 <takeMachineID+0x2a4>)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4413      	add	r3, r2
 8006c96:	2231      	movs	r2, #49	; 0x31
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e046      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 5) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d105      	bne.n	8006cae <takeMachineID+0x16e>
        		machineID[machineIDLoc] = '2';
 8006ca2:	4a50      	ldr	r2, [pc, #320]	; (8006de4 <takeMachineID+0x2a4>)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	2232      	movs	r2, #50	; 0x32
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e03d      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 6) {
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d105      	bne.n	8006cc0 <takeMachineID+0x180>
        		machineID[machineIDLoc] = '3';
 8006cb4:	4a4b      	ldr	r2, [pc, #300]	; (8006de4 <takeMachineID+0x2a4>)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	2233      	movs	r2, #51	; 0x33
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e034      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 7) {
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b07      	cmp	r3, #7
 8006cc4:	d105      	bne.n	8006cd2 <takeMachineID+0x192>
        		machineID[machineIDLoc] = '4';
 8006cc6:	4a47      	ldr	r2, [pc, #284]	; (8006de4 <takeMachineID+0x2a4>)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4413      	add	r3, r2
 8006ccc:	2234      	movs	r2, #52	; 0x34
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e02b      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 10) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b0a      	cmp	r3, #10
 8006cd6:	d105      	bne.n	8006ce4 <takeMachineID+0x1a4>
        		machineID[machineIDLoc] = '5';
 8006cd8:	4a42      	ldr	r2, [pc, #264]	; (8006de4 <takeMachineID+0x2a4>)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	2235      	movs	r2, #53	; 0x35
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e022      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 11) {
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b0b      	cmp	r3, #11
 8006ce8:	d105      	bne.n	8006cf6 <takeMachineID+0x1b6>
        		machineID[machineIDLoc] = '6';
 8006cea:	4a3e      	ldr	r2, [pc, #248]	; (8006de4 <takeMachineID+0x2a4>)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4413      	add	r3, r2
 8006cf0:	2236      	movs	r2, #54	; 0x36
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e019      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 12) {
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	d105      	bne.n	8006d08 <takeMachineID+0x1c8>
        		machineID[machineIDLoc] = '7';
 8006cfc:	4a39      	ldr	r2, [pc, #228]	; (8006de4 <takeMachineID+0x2a4>)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	2237      	movs	r2, #55	; 0x37
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e010      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 13) {
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b0d      	cmp	r3, #13
 8006d0c:	d105      	bne.n	8006d1a <takeMachineID+0x1da>
        		machineID[machineIDLoc] = '8';
 8006d0e:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <takeMachineID+0x2a4>)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4413      	add	r3, r2
 8006d14:	2238      	movs	r2, #56	; 0x38
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	e007      	b.n	8006d2a <takeMachineID+0x1ea>
        	} else if(cursorPosition == 14) {
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b0e      	cmp	r3, #14
 8006d1e:	d104      	bne.n	8006d2a <takeMachineID+0x1ea>
        		machineID[machineIDLoc] = '9';
 8006d20:	4a30      	ldr	r2, [pc, #192]	; (8006de4 <takeMachineID+0x2a4>)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4413      	add	r3, r2
 8006d26:	2239      	movs	r2, #57	; 0x39
 8006d28:	701a      	strb	r2, [r3, #0]
        	}

        	if(machineIDLoc == machineIDCharacterLimit - 1) {
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b0b      	cmp	r3, #11
 8006d2e:	d102      	bne.n	8006d36 <takeMachineID+0x1f6>
        		machineID[machineIDCharacterLimit] = '\0';
 8006d30:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <takeMachineID+0x2a4>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	b2d9      	uxtb	r1, r3
 8006d3a:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <takeMachineID+0x2a4>)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4413      	add	r3, r2
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	2001      	movs	r0, #1
 8006d46:	f000 fed6 	bl	8007af6 <lcd_print_char>

        	writeLoc++;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8006d56:	2096      	movs	r0, #150	; 0x96
 8006d58:	f001 fc0e 	bl	8008578 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	4822      	ldr	r0, [pc, #136]	; (8006de8 <takeMachineID+0x2a8>)
 8006d60:	f002 f9da 	bl	8009118 <HAL_GPIO_ReadPin>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d131      	bne.n	8006dce <takeMachineID+0x28e>
        	HAL_Delay(50);
 8006d6a:	2032      	movs	r0, #50	; 0x32
 8006d6c:	f001 fc04 	bl	8008578 <HAL_Delay>

            if(strlen(machineID) >= 1) {
 8006d70:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <takeMachineID+0x2a4>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d027      	beq.n	8006dc8 <takeMachineID+0x288>

                machineID[machineIDLoc] = '\0';
 8006d78:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <takeMachineID+0x2a4>)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	3304      	adds	r3, #4
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f000 fed3 	bl	8007b38 <lcd_delete_char>
                HAL_Delay(50);
 8006d92:	2032      	movs	r0, #50	; 0x32
 8006d94:	f001 fbf0 	bl	8008578 <HAL_Delay>

                if(writeLoc > 5) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	dd03      	ble.n	8006da6 <takeMachineID+0x266>
                	writeLoc--;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	e004      	b.n	8006db0 <takeMachineID+0x270>
                } else if(writeLoc < 5) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	dc01      	bgt.n	8006db0 <takeMachineID+0x270>
                	writeLoc = 5;
 8006dac:	2305      	movs	r3, #5
 8006dae:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dd03      	ble.n	8006dbe <takeMachineID+0x27e>
                	machineIDLoc--;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	60bb      	str	r3, [r7, #8]
 8006dbc:	e004      	b.n	8006dc8 <takeMachineID+0x288>
                } else if(machineIDLoc < 0) {
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da01      	bge.n	8006dc8 <takeMachineID+0x288>
                	machineIDLoc = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(150);
 8006dc8:	2096      	movs	r0, #150	; 0x96
 8006dca:	f001 fbd5 	bl	8008578 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	2002      	movs	r0, #2
 8006dd6:	f000 fe5a 	bl	8007a8e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006dda:	e6c9      	b.n	8006b70 <takeMachineID+0x30>
    }
}
 8006ddc:	bf00      	nop
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000198 	.word	0x20000198
 8006de8:	40010800 	.word	0x40010800
 8006dec:	0800da94 	.word	0x0800da94
 8006df0:	0800daa8 	.word	0x0800daa8
 8006df4:	20000004 	.word	0x20000004
 8006df8:	20000120 	.word	0x20000120
 8006dfc:	20000284 	.word	0x20000284
 8006e00:	40011000 	.word	0x40011000

08006e04 <takeWifiSSID>:

void takeWifiSSID() {
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b08b      	sub	sp, #44	; 0x2c
 8006e08:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	f000 febc 	bl	8007b88 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006e10:	2214      	movs	r2, #20
 8006e12:	2100      	movs	r1, #0
 8006e14:	48ad      	ldr	r0, [pc, #692]	; (80070cc <takeWifiSSID+0x2c8>)
 8006e16:	f005 fb06 	bl	800c426 <memset>
    HAL_Delay(100);
 8006e1a:	2064      	movs	r0, #100	; 0x64
 8006e1c:	f001 fbac 	bl	8008578 <HAL_Delay>

    int realCharPos = 1;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006e24:	2301      	movs	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006e30:	2307      	movs	r3, #7
 8006e32:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006e34:	2101      	movs	r1, #1
 8006e36:	2002      	movs	r0, #2
 8006e38:	f7f9 ff44 	bl	8000cc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e3c:	2108      	movs	r1, #8
 8006e3e:	48a4      	ldr	r0, [pc, #656]	; (80070d0 <takeWifiSSID+0x2cc>)
 8006e40:	f002 f96a 	bl	8009118 <HAL_GPIO_ReadPin>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d143      	bne.n	8006ed2 <takeWifiSSID+0xce>
        	HAL_Delay(50);
 8006e4a:	2032      	movs	r0, #50	; 0x32
 8006e4c:	f001 fb94 	bl	8008578 <HAL_Delay>
            lcd_cursor(0);
 8006e50:	2000      	movs	r0, #0
 8006e52:	f000 fe99 	bl	8007b88 <lcd_cursor>

            wifiSSID[wifiNameLoc] = '\0';
 8006e56:	4a9d      	ldr	r2, [pc, #628]	; (80070cc <takeWifiSSID+0x2c8>)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
            HAL_Delay(10);
 8006e60:	200a      	movs	r0, #10
 8006e62:	f001 fb89 	bl	8008578 <HAL_Delay>

            if(strlen(wifiSSID) > 20) {
 8006e66:	4899      	ldr	r0, [pc, #612]	; (80070cc <takeWifiSSID+0x2c8>)
 8006e68:	f7f9 f9dc 	bl	8000224 <strlen>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b14      	cmp	r3, #20
 8006e70:	d910      	bls.n	8006e94 <takeWifiSSID+0x90>
                lcd_clear();
 8006e72:	f000 fe57 	bl	8007b24 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006e76:	4a97      	ldr	r2, [pc, #604]	; (80070d4 <takeWifiSSID+0x2d0>)
 8006e78:	2101      	movs	r1, #1
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 fe26 	bl	8007acc <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006e80:	4a95      	ldr	r2, [pc, #596]	; (80070d8 <takeWifiSSID+0x2d4>)
 8006e82:	2101      	movs	r1, #1
 8006e84:	2002      	movs	r0, #2
 8006e86:	f000 fe21 	bl	8007acc <lcd_print>
                HAL_Delay(1200);
 8006e8a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e8e:	f001 fb73 	bl	8008578 <HAL_Delay>
                goto mainSSIDSection;
 8006e92:	e7ba      	b.n	8006e0a <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8006e94:	4b91      	ldr	r3, [pc, #580]	; (80070dc <takeWifiSSID+0x2d8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a91      	ldr	r2, [pc, #580]	; (80070e0 <takeWifiSSID+0x2dc>)
 8006e9a:	189c      	adds	r4, r3, r2
 8006e9c:	488b      	ldr	r0, [pc, #556]	; (80070cc <takeWifiSSID+0x2c8>)
 8006e9e:	f7f9 f9c1 	bl	8000224 <strlen>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4989      	ldr	r1, [pc, #548]	; (80070cc <takeWifiSSID+0x2c8>)
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f005 fb01 	bl	800c4b0 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006eae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006eb2:	9302      	str	r3, [sp, #8]
 8006eb4:	236e      	movs	r3, #110	; 0x6e
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	4b89      	ldr	r3, [pc, #548]	; (80070e0 <takeWifiSSID+0x2dc>)
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	236e      	movs	r3, #110	; 0x6e
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	21a0      	movs	r1, #160	; 0xa0
 8006ec2:	4888      	ldr	r0, [pc, #544]	; (80070e4 <takeWifiSSID+0x2e0>)
 8006ec4:	f002 fbe2 	bl	800968c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ecc:	f001 fb54 	bl	8008578 <HAL_Delay>

            break;
 8006ed0:	e12b      	b.n	800712a <takeWifiSSID+0x326>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	487e      	ldr	r0, [pc, #504]	; (80070d0 <takeWifiSSID+0x2cc>)
 8006ed6:	f002 f91f 	bl	8009118 <HAL_GPIO_ReadPin>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d153      	bne.n	8006f88 <takeWifiSSID+0x184>
        	HAL_Delay(50);
 8006ee0:	2032      	movs	r0, #50	; 0x32
 8006ee2:	f001 fb49 	bl	8008578 <HAL_Delay>

        	realCharPos++;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b50      	cmp	r3, #80	; 0x50
 8006ef0:	dd01      	ble.n	8006ef6 <takeWifiSSID+0xf2>
        		realCharPos = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d13f      	bne.n	8006f7c <takeWifiSSID+0x178>
            	if(page == 1) {
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d109      	bne.n	8006f16 <takeWifiSSID+0x112>
            		cursorPosition = 1;
 8006f02:	2301      	movs	r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
            		page++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	2002      	movs	r0, #2
 8006f10:	f7f9 fed8 	bl	8000cc4 <printTemplate>
 8006f14:	e035      	b.n	8006f82 <takeWifiSSID+0x17e>
            	} else if(page == 2) {
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d109      	bne.n	8006f30 <takeWifiSSID+0x12c>
            		cursorPosition = 1;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	613b      	str	r3, [r7, #16]
            		page++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006f26:	2103      	movs	r1, #3
 8006f28:	2002      	movs	r0, #2
 8006f2a:	f7f9 fecb 	bl	8000cc4 <printTemplate>
 8006f2e:	e028      	b.n	8006f82 <takeWifiSSID+0x17e>
            	} else if(page == 3) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d109      	bne.n	8006f4a <takeWifiSSID+0x146>
            		cursorPosition = 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	613b      	str	r3, [r7, #16]
            		page++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8006f40:	2104      	movs	r1, #4
 8006f42:	2002      	movs	r0, #2
 8006f44:	f7f9 febe 	bl	8000cc4 <printTemplate>
 8006f48:	e01b      	b.n	8006f82 <takeWifiSSID+0x17e>
            	} else if(page == 4) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d109      	bne.n	8006f64 <takeWifiSSID+0x160>
            		cursorPosition = 1;
 8006f50:	2301      	movs	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
            		page++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006f5a:	2105      	movs	r1, #5
 8006f5c:	2002      	movs	r0, #2
 8006f5e:	f7f9 feb1 	bl	8000cc4 <printTemplate>
 8006f62:	e00e      	b.n	8006f82 <takeWifiSSID+0x17e>
            	} else if(page == 5) {
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	d10b      	bne.n	8006f82 <takeWifiSSID+0x17e>
            		cursorPosition = 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006f72:	2101      	movs	r1, #1
 8006f74:	2002      	movs	r0, #2
 8006f76:	f7f9 fea5 	bl	8000cc4 <printTemplate>
 8006f7a:	e002      	b.n	8006f82 <takeWifiSSID+0x17e>
            	}
            } else {
            	cursorPosition++;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8006f82:	2096      	movs	r0, #150	; 0x96
 8006f84:	f001 faf8 	bl	8008578 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f88:	2108      	movs	r1, #8
 8006f8a:	4857      	ldr	r0, [pc, #348]	; (80070e8 <takeWifiSSID+0x2e4>)
 8006f8c:	f002 f8c4 	bl	8009118 <HAL_GPIO_ReadPin>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d14f      	bne.n	8007036 <takeWifiSSID+0x232>
        	HAL_Delay(50);
 8006f96:	2032      	movs	r0, #50	; 0x32
 8006f98:	f001 faee 	bl	8008578 <HAL_Delay>

        	realCharPos--;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc01      	bgt.n	8006fac <takeWifiSSID+0x1a8>
        		realCharPos = 80;
 8006fa8:	2350      	movs	r3, #80	; 0x50
 8006faa:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d13b      	bne.n	800702a <takeWifiSSID+0x226>
            	if(page == 1) {
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d108      	bne.n	8006fca <takeWifiSSID+0x1c6>
            		cursorPosition = 16;
 8006fb8:	2310      	movs	r3, #16
 8006fba:	613b      	str	r3, [r7, #16]
            		page = 5;
 8006fbc:	2305      	movs	r3, #5
 8006fbe:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006fc0:	2105      	movs	r1, #5
 8006fc2:	2002      	movs	r0, #2
 8006fc4:	f7f9 fe7e 	bl	8000cc4 <printTemplate>
 8006fc8:	e032      	b.n	8007030 <takeWifiSSID+0x22c>
            	} else if(page == 2) {
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d108      	bne.n	8006fe2 <takeWifiSSID+0x1de>
            		cursorPosition = 16;
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006fd8:	2101      	movs	r1, #1
 8006fda:	2002      	movs	r0, #2
 8006fdc:	f7f9 fe72 	bl	8000cc4 <printTemplate>
 8006fe0:	e026      	b.n	8007030 <takeWifiSSID+0x22c>
            	} else if(page == 3) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d108      	bne.n	8006ffa <takeWifiSSID+0x1f6>
            		cursorPosition = 16;
 8006fe8:	2310      	movs	r3, #16
 8006fea:	613b      	str	r3, [r7, #16]
            		page = 2;
 8006fec:	2302      	movs	r3, #2
 8006fee:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	2002      	movs	r0, #2
 8006ff4:	f7f9 fe66 	bl	8000cc4 <printTemplate>
 8006ff8:	e01a      	b.n	8007030 <takeWifiSSID+0x22c>
            	} else if(page == 4) {
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d108      	bne.n	8007012 <takeWifiSSID+0x20e>
            		cursorPosition = 16;
 8007000:	2310      	movs	r3, #16
 8007002:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007004:	2303      	movs	r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8007008:	2103      	movs	r1, #3
 800700a:	2002      	movs	r0, #2
 800700c:	f7f9 fe5a 	bl	8000cc4 <printTemplate>
 8007010:	e00e      	b.n	8007030 <takeWifiSSID+0x22c>
            	} else if(page == 5) {
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b05      	cmp	r3, #5
 8007016:	d10b      	bne.n	8007030 <takeWifiSSID+0x22c>
            		cursorPosition = 16;
 8007018:	2310      	movs	r3, #16
 800701a:	613b      	str	r3, [r7, #16]
            		page = 4;
 800701c:	2304      	movs	r3, #4
 800701e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007020:	2104      	movs	r1, #4
 8007022:	2002      	movs	r0, #2
 8007024:	f7f9 fe4e 	bl	8000cc4 <printTemplate>
 8007028:	e002      	b.n	8007030 <takeWifiSSID+0x22c>
            	}
            } else {
            	cursorPosition--;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3b01      	subs	r3, #1
 800702e:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007030:	2096      	movs	r0, #150	; 0x96
 8007032:	f001 faa1 	bl	8008578 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007036:	2102      	movs	r1, #2
 8007038:	4825      	ldr	r0, [pc, #148]	; (80070d0 <takeWifiSSID+0x2cc>)
 800703a:	f002 f86d 	bl	8009118 <HAL_GPIO_ReadPin>
 800703e:	4603      	mov	r3, r0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d121      	bne.n	8007088 <takeWifiSSID+0x284>
        	HAL_Delay(50);
 8007044:	2032      	movs	r0, #50	; 0x32
 8007046:	f001 fa97 	bl	8008578 <HAL_Delay>

            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	3b01      	subs	r3, #1
 800704e:	4618      	mov	r0, r3
 8007050:	f7f9 fb9c 	bl	800078c <getCharFromCursorPosition>
 8007054:	4603      	mov	r3, r0
 8007056:	4619      	mov	r1, r3
 8007058:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <takeWifiSSID+0x2c8>)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4413      	add	r3, r2
 800705e:	460a      	mov	r2, r1
 8007060:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	b2d9      	uxtb	r1, r3
 8007066:	4a19      	ldr	r2, [pc, #100]	; (80070cc <takeWifiSSID+0x2c8>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4413      	add	r3, r2
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	2001      	movs	r0, #1
 8007072:	f000 fd40 	bl	8007af6 <lcd_print_char>

            writeLoc++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3301      	adds	r3, #1
 800707a:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	3301      	adds	r3, #1
 8007080:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 8007082:	2096      	movs	r0, #150	; 0x96
 8007084:	f001 fa78 	bl	8008578 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007088:	2104      	movs	r1, #4
 800708a:	4811      	ldr	r0, [pc, #68]	; (80070d0 <takeWifiSSID+0x2cc>)
 800708c:	f002 f844 	bl	8009118 <HAL_GPIO_ReadPin>
 8007090:	4603      	mov	r3, r0
 8007092:	2b01      	cmp	r3, #1
 8007094:	d142      	bne.n	800711c <takeWifiSSID+0x318>
        	HAL_Delay(50);
 8007096:	2032      	movs	r0, #50	; 0x32
 8007098:	f001 fa6e 	bl	8008578 <HAL_Delay>

        	if(strlen(wifiSSID) >= 1) {
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <takeWifiSSID+0x2c8>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d038      	beq.n	8007116 <takeWifiSSID+0x312>
        		if(writeLoc > 7) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b07      	cmp	r3, #7
 80070a8:	dd03      	ble.n	80070b2 <takeWifiSSID+0x2ae>
        			writeLoc--;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	607b      	str	r3, [r7, #4]
 80070b0:	e004      	b.n	80070bc <takeWifiSSID+0x2b8>
        		} else if(writeLoc < 7) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b06      	cmp	r3, #6
 80070b6:	dc01      	bgt.n	80070bc <takeWifiSSID+0x2b8>
        			writeLoc = 7;
 80070b8:	2307      	movs	r3, #7
 80070ba:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd14      	ble.n	80070ec <takeWifiSSID+0x2e8>
        			wifiNameLoc--;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	e015      	b.n	80070f6 <takeWifiSSID+0x2f2>
 80070ca:	bf00      	nop
 80070cc:	200001a4 	.word	0x200001a4
 80070d0:	40010800 	.word	0x40010800
 80070d4:	0800dabc 	.word	0x0800dabc
 80070d8:	0800dad0 	.word	0x0800dad0
 80070dc:	20000008 	.word	0x20000008
 80070e0:	20000120 	.word	0x20000120
 80070e4:	20000284 	.word	0x20000284
 80070e8:	40011000 	.word	0x40011000
        		} else if(wifiNameLoc < 0) {
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da01      	bge.n	80070f6 <takeWifiSSID+0x2f2>
        			wifiNameLoc = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
        		}

        		wifiSSID[wifiNameLoc] = '\0';
 80070f6:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <takeWifiSSID+0x330>)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4413      	add	r3, r2
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	3306      	adds	r3, #6
 8007106:	b2db      	uxtb	r3, r3
 8007108:	4619      	mov	r1, r3
 800710a:	2001      	movs	r0, #1
 800710c:	f000 fd14 	bl	8007b38 <lcd_delete_char>
        		HAL_Delay(50);
 8007110:	2032      	movs	r0, #50	; 0x32
 8007112:	f001 fa31 	bl	8008578 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007116:	2096      	movs	r0, #150	; 0x96
 8007118:	f001 fa2e 	bl	8008578 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	2002      	movs	r0, #2
 8007124:	f000 fcb3 	bl	8007a8e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007128:	e688      	b.n	8006e3c <takeWifiSSID+0x38>
    }
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	bd90      	pop	{r4, r7, pc}
 8007132:	bf00      	nop
 8007134:	200001a4 	.word	0x200001a4

08007138 <takeWifiPass>:

void takeWifiPass() {
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b08b      	sub	sp, #44	; 0x2c
 800713c:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 800713e:	2001      	movs	r0, #1
 8007140:	f000 fd22 	bl	8007b88 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007144:	2214      	movs	r2, #20
 8007146:	2100      	movs	r1, #0
 8007148:	48ad      	ldr	r0, [pc, #692]	; (8007400 <takeWifiPass+0x2c8>)
 800714a:	f005 f96c 	bl	800c426 <memset>
    HAL_Delay(100);
 800714e:	2064      	movs	r0, #100	; 0x64
 8007150:	f001 fa12 	bl	8008578 <HAL_Delay>

    int realCharPos = 1;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8007158:	2301      	movs	r3, #1
 800715a:	613b      	str	r3, [r7, #16]
    int page = 1;
 800715c:	2301      	movs	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007164:	2307      	movs	r3, #7
 8007166:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007168:	2101      	movs	r1, #1
 800716a:	2003      	movs	r0, #3
 800716c:	f7f9 fdaa 	bl	8000cc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007170:	2108      	movs	r1, #8
 8007172:	48a4      	ldr	r0, [pc, #656]	; (8007404 <takeWifiPass+0x2cc>)
 8007174:	f001 ffd0 	bl	8009118 <HAL_GPIO_ReadPin>
 8007178:	4603      	mov	r3, r0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d143      	bne.n	8007206 <takeWifiPass+0xce>
        	HAL_Delay(50);
 800717e:	2032      	movs	r0, #50	; 0x32
 8007180:	f001 f9fa 	bl	8008578 <HAL_Delay>
            lcd_cursor(0);
 8007184:	2000      	movs	r0, #0
 8007186:	f000 fcff 	bl	8007b88 <lcd_cursor>

            wifiPass[wifiPassLoc] = '\0';
 800718a:	4a9d      	ldr	r2, [pc, #628]	; (8007400 <takeWifiPass+0x2c8>)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4413      	add	r3, r2
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
            HAL_Delay(10);
 8007194:	200a      	movs	r0, #10
 8007196:	f001 f9ef 	bl	8008578 <HAL_Delay>

            if(strlen(wifiPass) > 20) {
 800719a:	4899      	ldr	r0, [pc, #612]	; (8007400 <takeWifiPass+0x2c8>)
 800719c:	f7f9 f842 	bl	8000224 <strlen>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b14      	cmp	r3, #20
 80071a4:	d910      	bls.n	80071c8 <takeWifiPass+0x90>
                lcd_clear();
 80071a6:	f000 fcbd 	bl	8007b24 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80071aa:	4a97      	ldr	r2, [pc, #604]	; (8007408 <takeWifiPass+0x2d0>)
 80071ac:	2101      	movs	r1, #1
 80071ae:	2001      	movs	r0, #1
 80071b0:	f000 fc8c 	bl	8007acc <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80071b4:	4a95      	ldr	r2, [pc, #596]	; (800740c <takeWifiPass+0x2d4>)
 80071b6:	2101      	movs	r1, #1
 80071b8:	2002      	movs	r0, #2
 80071ba:	f000 fc87 	bl	8007acc <lcd_print>
                HAL_Delay(1200);
 80071be:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80071c2:	f001 f9d9 	bl	8008578 <HAL_Delay>
                goto mainPASSSection;
 80071c6:	e7ba      	b.n	800713e <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 80071c8:	4b91      	ldr	r3, [pc, #580]	; (8007410 <takeWifiPass+0x2d8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a91      	ldr	r2, [pc, #580]	; (8007414 <takeWifiPass+0x2dc>)
 80071ce:	189c      	adds	r4, r3, r2
 80071d0:	488b      	ldr	r0, [pc, #556]	; (8007400 <takeWifiPass+0x2c8>)
 80071d2:	f7f9 f827 	bl	8000224 <strlen>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	4989      	ldr	r1, [pc, #548]	; (8007400 <takeWifiPass+0x2c8>)
 80071dc:	4620      	mov	r0, r4
 80071de:	f005 f967 	bl	800c4b0 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071e6:	9302      	str	r3, [sp, #8]
 80071e8:	236e      	movs	r3, #110	; 0x6e
 80071ea:	9301      	str	r3, [sp, #4]
 80071ec:	4b89      	ldr	r3, [pc, #548]	; (8007414 <takeWifiPass+0x2dc>)
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	236e      	movs	r3, #110	; 0x6e
 80071f2:	2200      	movs	r2, #0
 80071f4:	21a0      	movs	r1, #160	; 0xa0
 80071f6:	4888      	ldr	r0, [pc, #544]	; (8007418 <takeWifiPass+0x2e0>)
 80071f8:	f002 fa48 	bl	800968c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80071fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007200:	f001 f9ba 	bl	8008578 <HAL_Delay>

            break;
 8007204:	e12b      	b.n	800745e <takeWifiPass+0x326>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007206:	2101      	movs	r1, #1
 8007208:	487e      	ldr	r0, [pc, #504]	; (8007404 <takeWifiPass+0x2cc>)
 800720a:	f001 ff85 	bl	8009118 <HAL_GPIO_ReadPin>
 800720e:	4603      	mov	r3, r0
 8007210:	2b01      	cmp	r3, #1
 8007212:	d153      	bne.n	80072bc <takeWifiPass+0x184>
        	HAL_Delay(50);
 8007214:	2032      	movs	r0, #50	; 0x32
 8007216:	f001 f9af 	bl	8008578 <HAL_Delay>

        	realCharPos++;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	3301      	adds	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b50      	cmp	r3, #80	; 0x50
 8007224:	dd01      	ble.n	800722a <takeWifiPass+0xf2>
        	    realCharPos = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b10      	cmp	r3, #16
 800722e:	d13f      	bne.n	80072b0 <takeWifiPass+0x178>
            	if(page == 1) {
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d109      	bne.n	800724a <takeWifiPass+0x112>
            		cursorPosition = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	613b      	str	r3, [r7, #16]
            		page++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007240:	2102      	movs	r1, #2
 8007242:	2003      	movs	r0, #3
 8007244:	f7f9 fd3e 	bl	8000cc4 <printTemplate>
 8007248:	e035      	b.n	80072b6 <takeWifiPass+0x17e>
            	} else if(page == 2) {
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d109      	bne.n	8007264 <takeWifiPass+0x12c>
            		cursorPosition = 1;
 8007250:	2301      	movs	r3, #1
 8007252:	613b      	str	r3, [r7, #16]
            		page++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800725a:	2103      	movs	r1, #3
 800725c:	2003      	movs	r0, #3
 800725e:	f7f9 fd31 	bl	8000cc4 <printTemplate>
 8007262:	e028      	b.n	80072b6 <takeWifiPass+0x17e>
            	} else if(page == 3) {
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d109      	bne.n	800727e <takeWifiPass+0x146>
            		cursorPosition = 1;
 800726a:	2301      	movs	r3, #1
 800726c:	613b      	str	r3, [r7, #16]
            		page++;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007274:	2104      	movs	r1, #4
 8007276:	2003      	movs	r0, #3
 8007278:	f7f9 fd24 	bl	8000cc4 <printTemplate>
 800727c:	e01b      	b.n	80072b6 <takeWifiPass+0x17e>
            	} else if(page == 4) {
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b04      	cmp	r3, #4
 8007282:	d109      	bne.n	8007298 <takeWifiPass+0x160>
            		cursorPosition = 1;
 8007284:	2301      	movs	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
            		page++;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 800728e:	2105      	movs	r1, #5
 8007290:	2003      	movs	r0, #3
 8007292:	f7f9 fd17 	bl	8000cc4 <printTemplate>
 8007296:	e00e      	b.n	80072b6 <takeWifiPass+0x17e>
            	} else if(page == 5) {
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b05      	cmp	r3, #5
 800729c:	d10b      	bne.n	80072b6 <takeWifiPass+0x17e>
            		cursorPosition = 1;
 800729e:	2301      	movs	r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
            		page = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80072a6:	2101      	movs	r1, #1
 80072a8:	2003      	movs	r0, #3
 80072aa:	f7f9 fd0b 	bl	8000cc4 <printTemplate>
 80072ae:	e002      	b.n	80072b6 <takeWifiPass+0x17e>
            	}
            } else {
            	cursorPosition++;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	3301      	adds	r3, #1
 80072b4:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80072b6:	2096      	movs	r0, #150	; 0x96
 80072b8:	f001 f95e 	bl	8008578 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80072bc:	2108      	movs	r1, #8
 80072be:	4857      	ldr	r0, [pc, #348]	; (800741c <takeWifiPass+0x2e4>)
 80072c0:	f001 ff2a 	bl	8009118 <HAL_GPIO_ReadPin>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d14f      	bne.n	800736a <takeWifiPass+0x232>
        	HAL_Delay(50);
 80072ca:	2032      	movs	r0, #50	; 0x32
 80072cc:	f001 f954 	bl	8008578 <HAL_Delay>

        	realCharPos--;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc01      	bgt.n	80072e0 <takeWifiPass+0x1a8>
        	    realCharPos = 80;
 80072dc:	2350      	movs	r3, #80	; 0x50
 80072de:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d13b      	bne.n	800735e <takeWifiPass+0x226>
            	if(page == 1) {
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d108      	bne.n	80072fe <takeWifiPass+0x1c6>
            		cursorPosition = 16;
 80072ec:	2310      	movs	r3, #16
 80072ee:	613b      	str	r3, [r7, #16]
            		page = 5;
 80072f0:	2305      	movs	r3, #5
 80072f2:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80072f4:	2105      	movs	r1, #5
 80072f6:	2003      	movs	r0, #3
 80072f8:	f7f9 fce4 	bl	8000cc4 <printTemplate>
 80072fc:	e032      	b.n	8007364 <takeWifiPass+0x22c>
            	} else if(page == 2) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d108      	bne.n	8007316 <takeWifiPass+0x1de>
            		cursorPosition = 16;
 8007304:	2310      	movs	r3, #16
 8007306:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007308:	2301      	movs	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 800730c:	2101      	movs	r1, #1
 800730e:	2003      	movs	r0, #3
 8007310:	f7f9 fcd8 	bl	8000cc4 <printTemplate>
 8007314:	e026      	b.n	8007364 <takeWifiPass+0x22c>
            	} else if(page == 3) {
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d108      	bne.n	800732e <takeWifiPass+0x1f6>
            		cursorPosition = 16;
 800731c:	2310      	movs	r3, #16
 800731e:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007320:	2302      	movs	r3, #2
 8007322:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007324:	2102      	movs	r1, #2
 8007326:	2003      	movs	r0, #3
 8007328:	f7f9 fccc 	bl	8000cc4 <printTemplate>
 800732c:	e01a      	b.n	8007364 <takeWifiPass+0x22c>
            	} else if(page == 4) {
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b04      	cmp	r3, #4
 8007332:	d108      	bne.n	8007346 <takeWifiPass+0x20e>
            		cursorPosition = 16;
 8007334:	2310      	movs	r3, #16
 8007336:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007338:	2303      	movs	r3, #3
 800733a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800733c:	2103      	movs	r1, #3
 800733e:	2003      	movs	r0, #3
 8007340:	f7f9 fcc0 	bl	8000cc4 <printTemplate>
 8007344:	e00e      	b.n	8007364 <takeWifiPass+0x22c>
            	} else if(page == 5) {
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b05      	cmp	r3, #5
 800734a:	d10b      	bne.n	8007364 <takeWifiPass+0x22c>
            		cursorPosition = 16;
 800734c:	2310      	movs	r3, #16
 800734e:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007350:	2304      	movs	r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007354:	2104      	movs	r1, #4
 8007356:	2003      	movs	r0, #3
 8007358:	f7f9 fcb4 	bl	8000cc4 <printTemplate>
 800735c:	e002      	b.n	8007364 <takeWifiPass+0x22c>
            	}
            } else {
            	cursorPosition--;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	3b01      	subs	r3, #1
 8007362:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007364:	2096      	movs	r0, #150	; 0x96
 8007366:	f001 f907 	bl	8008578 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800736a:	2102      	movs	r1, #2
 800736c:	4825      	ldr	r0, [pc, #148]	; (8007404 <takeWifiPass+0x2cc>)
 800736e:	f001 fed3 	bl	8009118 <HAL_GPIO_ReadPin>
 8007372:	4603      	mov	r3, r0
 8007374:	2b01      	cmp	r3, #1
 8007376:	d121      	bne.n	80073bc <takeWifiPass+0x284>
        	HAL_Delay(50);
 8007378:	2032      	movs	r0, #50	; 0x32
 800737a:	f001 f8fd 	bl	8008578 <HAL_Delay>

        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	3b01      	subs	r3, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f7f9 fa02 	bl	800078c <getCharFromCursorPosition>
 8007388:	4603      	mov	r3, r0
 800738a:	4619      	mov	r1, r3
 800738c:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <takeWifiPass+0x2c8>)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	460a      	mov	r2, r1
 8007394:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	b2d9      	uxtb	r1, r3
 800739a:	4a19      	ldr	r2, [pc, #100]	; (8007400 <takeWifiPass+0x2c8>)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4413      	add	r3, r2
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	2001      	movs	r0, #1
 80073a6:	f000 fba6 	bl	8007af6 <lcd_print_char>

            writeLoc++;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3301      	adds	r3, #1
 80073ae:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 80073b6:	2096      	movs	r0, #150	; 0x96
 80073b8:	f001 f8de 	bl	8008578 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073bc:	2104      	movs	r1, #4
 80073be:	4811      	ldr	r0, [pc, #68]	; (8007404 <takeWifiPass+0x2cc>)
 80073c0:	f001 feaa 	bl	8009118 <HAL_GPIO_ReadPin>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d142      	bne.n	8007450 <takeWifiPass+0x318>
        	HAL_Delay(50);
 80073ca:	2032      	movs	r0, #50	; 0x32
 80073cc:	f001 f8d4 	bl	8008578 <HAL_Delay>

            if(strlen(wifiPass) >= 1) {
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <takeWifiPass+0x2c8>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d038      	beq.n	800744a <takeWifiPass+0x312>
            	if(writeLoc > 7) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b07      	cmp	r3, #7
 80073dc:	dd03      	ble.n	80073e6 <takeWifiPass+0x2ae>
            		writeLoc--;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	e004      	b.n	80073f0 <takeWifiPass+0x2b8>
            	} else if(writeLoc < 7) {
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b06      	cmp	r3, #6
 80073ea:	dc01      	bgt.n	80073f0 <takeWifiPass+0x2b8>
            		writeLoc = 7;
 80073ec:	2307      	movs	r3, #7
 80073ee:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd14      	ble.n	8007420 <takeWifiPass+0x2e8>
            		wifiPassLoc--;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	e015      	b.n	800742a <takeWifiPass+0x2f2>
 80073fe:	bf00      	nop
 8007400:	200001b8 	.word	0x200001b8
 8007404:	40010800 	.word	0x40010800
 8007408:	0800dabc 	.word	0x0800dabc
 800740c:	0800dae4 	.word	0x0800dae4
 8007410:	2000000c 	.word	0x2000000c
 8007414:	20000120 	.word	0x20000120
 8007418:	20000284 	.word	0x20000284
 800741c:	40011000 	.word	0x40011000
            	} else if(wifiPassLoc < 0) {
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da01      	bge.n	800742a <takeWifiPass+0x2f2>
            		wifiPassLoc = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	60bb      	str	r3, [r7, #8]
            	}

            	wifiPass[wifiPassLoc] = '\0';
 800742a:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <takeWifiPass+0x330>)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4413      	add	r3, r2
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	3306      	adds	r3, #6
 800743a:	b2db      	uxtb	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	2001      	movs	r0, #1
 8007440:	f000 fb7a 	bl	8007b38 <lcd_delete_char>
            	HAL_Delay(50);
 8007444:	2032      	movs	r0, #50	; 0x32
 8007446:	f001 f897 	bl	8008578 <HAL_Delay>
            }

            HAL_Delay(150);
 800744a:	2096      	movs	r0, #150	; 0x96
 800744c:	f001 f894 	bl	8008578 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	2002      	movs	r0, #2
 8007458:	f000 fb19 	bl	8007a8e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800745c:	e688      	b.n	8007170 <takeWifiPass+0x38>
    }
}
 800745e:	bf00      	nop
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd90      	pop	{r4, r7, pc}
 8007466:	bf00      	nop
 8007468:	200001b8 	.word	0x200001b8

0800746c <mergeData>:

char* mergeData() {
 800746c:	b580      	push	{r7, lr}
 800746e:	b09c      	sub	sp, #112	; 0x70
 8007470:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007472:	2300      	movs	r3, #0
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800747a:	2228      	movs	r2, #40	; 0x28
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f004 ffd1 	bl	800c426 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007484:	4b67      	ldr	r3, [pc, #412]	; (8007624 <mergeData+0x1b8>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	713b      	strb	r3, [r7, #4]
 800748a:	4b67      	ldr	r3, [pc, #412]	; (8007628 <mergeData+0x1bc>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	717b      	strb	r3, [r7, #5]
 8007490:	4b66      	ldr	r3, [pc, #408]	; (800762c <mergeData+0x1c0>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	71bb      	strb	r3, [r7, #6]
 8007496:	4b66      	ldr	r3, [pc, #408]	; (8007630 <mergeData+0x1c4>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
 800749c:	4b65      	ldr	r3, [pc, #404]	; (8007634 <mergeData+0x1c8>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	723b      	strb	r3, [r7, #8]
 80074a2:	4b65      	ldr	r3, [pc, #404]	; (8007638 <mergeData+0x1cc>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	727b      	strb	r3, [r7, #9]
 80074a8:	4b64      	ldr	r3, [pc, #400]	; (800763c <mergeData+0x1d0>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	72bb      	strb	r3, [r7, #10]
 80074ae:	4b64      	ldr	r3, [pc, #400]	; (8007640 <mergeData+0x1d4>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	72fb      	strb	r3, [r7, #11]
 80074b4:	4b63      	ldr	r3, [pc, #396]	; (8007644 <mergeData+0x1d8>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	733b      	strb	r3, [r7, #12]
 80074ba:	4b63      	ldr	r3, [pc, #396]	; (8007648 <mergeData+0x1dc>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	737b      	strb	r3, [r7, #13]
 80074c0:	4b62      	ldr	r3, [pc, #392]	; (800764c <mergeData+0x1e0>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	73bb      	strb	r3, [r7, #14]
 80074c6:	4b62      	ldr	r3, [pc, #392]	; (8007650 <mergeData+0x1e4>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	4b61      	ldr	r3, [pc, #388]	; (8007654 <mergeData+0x1e8>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	743b      	strb	r3, [r7, #16]
 80074d2:	4b61      	ldr	r3, [pc, #388]	; (8007658 <mergeData+0x1ec>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	747b      	strb	r3, [r7, #17]
 80074d8:	4b60      	ldr	r3, [pc, #384]	; (800765c <mergeData+0x1f0>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	74bb      	strb	r3, [r7, #18]
 80074de:	4b60      	ldr	r3, [pc, #384]	; (8007660 <mergeData+0x1f4>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	74fb      	strb	r3, [r7, #19]
 80074e4:	4b5f      	ldr	r3, [pc, #380]	; (8007664 <mergeData+0x1f8>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	753b      	strb	r3, [r7, #20]
 80074ea:	4b5f      	ldr	r3, [pc, #380]	; (8007668 <mergeData+0x1fc>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	757b      	strb	r3, [r7, #21]
 80074f0:	4b5e      	ldr	r3, [pc, #376]	; (800766c <mergeData+0x200>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	75bb      	strb	r3, [r7, #22]
 80074f6:	4b5e      	ldr	r3, [pc, #376]	; (8007670 <mergeData+0x204>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	75fb      	strb	r3, [r7, #23]
 80074fc:	4b5d      	ldr	r3, [pc, #372]	; (8007674 <mergeData+0x208>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	763b      	strb	r3, [r7, #24]
 8007502:	4b5d      	ldr	r3, [pc, #372]	; (8007678 <mergeData+0x20c>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	767b      	strb	r3, [r7, #25]
 8007508:	4b5c      	ldr	r3, [pc, #368]	; (800767c <mergeData+0x210>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	76bb      	strb	r3, [r7, #26]
 800750e:	4b5c      	ldr	r3, [pc, #368]	; (8007680 <mergeData+0x214>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	4b5b      	ldr	r3, [pc, #364]	; (8007684 <mergeData+0x218>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	773b      	strb	r3, [r7, #28]
 800751a:	4b5b      	ldr	r3, [pc, #364]	; (8007688 <mergeData+0x21c>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	777b      	strb	r3, [r7, #29]
 8007520:	4b5a      	ldr	r3, [pc, #360]	; (800768c <mergeData+0x220>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	77bb      	strb	r3, [r7, #30]
 8007526:	4b5a      	ldr	r3, [pc, #360]	; (8007690 <mergeData+0x224>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	4b59      	ldr	r3, [pc, #356]	; (8007694 <mergeData+0x228>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f887 3020 	strb.w	r3, [r7, #32]
 8007534:	4b58      	ldr	r3, [pc, #352]	; (8007698 <mergeData+0x22c>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800753c:	4b57      	ldr	r3, [pc, #348]	; (800769c <mergeData+0x230>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007544:	4b56      	ldr	r3, [pc, #344]	; (80076a0 <mergeData+0x234>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800754c:	4b55      	ldr	r3, [pc, #340]	; (80076a4 <mergeData+0x238>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007554:	4b54      	ldr	r3, [pc, #336]	; (80076a8 <mergeData+0x23c>)
 8007556:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800755a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800755e:	4b52      	ldr	r3, [pc, #328]	; (80076a8 <mergeData+0x23c>)
 8007560:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007568:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <mergeData+0x23c>)
 800756a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800756e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007572:	4b4d      	ldr	r3, [pc, #308]	; (80076a8 <mergeData+0x23c>)
 8007574:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007578:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800757c:	4b4a      	ldr	r3, [pc, #296]	; (80076a8 <mergeData+0x23c>)
 800757e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007582:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007586:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <mergeData+0x23c>)
 8007588:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007590:	4b45      	ldr	r3, [pc, #276]	; (80076a8 <mergeData+0x23c>)
 8007592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800759a:	4b43      	ldr	r3, [pc, #268]	; (80076a8 <mergeData+0x23c>)
 800759c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80075a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80075a4:	4b40      	ldr	r3, [pc, #256]	; (80076a8 <mergeData+0x23c>)
 80075a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80075aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80075ae:	4b3e      	ldr	r3, [pc, #248]	; (80076a8 <mergeData+0x23c>)
 80075b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80075b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80075b8:	2306      	movs	r3, #6
 80075ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075be:	2300      	movs	r3, #0
 80075c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c2:	e015      	b.n	80075f0 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80075c4:	1d3a      	adds	r2, r7, #4
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075d2:	4936      	ldr	r1, [pc, #216]	; (80076ac <mergeData+0x240>)
 80075d4:	4618      	mov	r0, r3
 80075d6:	f004 feb5 	bl	800c344 <siprintf>
	    strcat(combinedString, temp);
 80075da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f004 ff0f 	bl	800c408 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ec:	3301      	adds	r3, #1
 80075ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	2b2b      	cmp	r3, #43	; 0x2b
 80075f4:	d9e6      	bls.n	80075c4 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80075f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7f8 fe12 	bl	8000224 <strlen>
 8007600:	4603      	mov	r3, r0
 8007602:	3301      	adds	r3, #1
 8007604:	4618      	mov	r0, r3
 8007606:	f004 fdb5 	bl	800c174 <malloc>
 800760a:	4603      	mov	r3, r0
 800760c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800760e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007612:	4619      	mov	r1, r3
 8007614:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007616:	f004 ff59 	bl	800c4cc <strcpy>
	return result;
 800761a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800761c:	4618      	mov	r0, r3
 800761e:	3770      	adds	r7, #112	; 0x70
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000203 	.word	0x20000203
 8007628:	200001f5 	.word	0x200001f5
 800762c:	200001f8 	.word	0x200001f8
 8007630:	200001f9 	.word	0x200001f9
 8007634:	200001fa 	.word	0x200001fa
 8007638:	20000201 	.word	0x20000201
 800763c:	200001fb 	.word	0x200001fb
 8007640:	200001fc 	.word	0x200001fc
 8007644:	20000200 	.word	0x20000200
 8007648:	200001fd 	.word	0x200001fd
 800764c:	2000020d 	.word	0x2000020d
 8007650:	200001fe 	.word	0x200001fe
 8007654:	2000020e 	.word	0x2000020e
 8007658:	200001ff 	.word	0x200001ff
 800765c:	2000020f 	.word	0x2000020f
 8007660:	20000202 	.word	0x20000202
 8007664:	20000204 	.word	0x20000204
 8007668:	20000205 	.word	0x20000205
 800766c:	20000206 	.word	0x20000206
 8007670:	20000207 	.word	0x20000207
 8007674:	20000208 	.word	0x20000208
 8007678:	20000209 	.word	0x20000209
 800767c:	2000020a 	.word	0x2000020a
 8007680:	2000020b 	.word	0x2000020b
 8007684:	2000020c 	.word	0x2000020c
 8007688:	20000210 	.word	0x20000210
 800768c:	20000212 	.word	0x20000212
 8007690:	200001f1 	.word	0x200001f1
 8007694:	200001f2 	.word	0x200001f2
 8007698:	20000000 	.word	0x20000000
 800769c:	20000001 	.word	0x20000001
 80076a0:	200001f3 	.word	0x200001f3
 80076a4:	20000215 	.word	0x20000215
 80076a8:	20000120 	.word	0x20000120
 80076ac:	0800daf8 	.word	0x0800daf8

080076b0 <convertAndSendData>:

void convertAndSendData() {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <convertAndSendData+0x70>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80076be:	4a19      	ldr	r2, [pc, #100]	; (8007724 <convertAndSendData+0x74>)
 80076c0:	2101      	movs	r1, #1
 80076c2:	2001      	movs	r0, #1
 80076c4:	f000 fa02 	bl	8007acc <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80076c8:	4a17      	ldr	r2, [pc, #92]	; (8007728 <convertAndSendData+0x78>)
 80076ca:	2101      	movs	r1, #1
 80076cc:	2002      	movs	r0, #2
 80076ce:	f000 f9fd 	bl	8007acc <lcd_print>
 80076d2:	e009      	b.n	80076e8 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <convertAndSendData+0x7c>)
 80076d6:	2101      	movs	r1, #1
 80076d8:	2001      	movs	r0, #1
 80076da:	f000 f9f7 	bl	8007acc <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80076de:	4a14      	ldr	r2, [pc, #80]	; (8007730 <convertAndSendData+0x80>)
 80076e0:	2101      	movs	r1, #1
 80076e2:	2002      	movs	r0, #2
 80076e4:	f000 f9f2 	bl	8007acc <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80076e8:	2300      	movs	r3, #0
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	e00a      	b.n	8007704 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80076ee:	f7ff febd 	bl	800746c <mergeData>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	490f      	ldr	r1, [pc, #60]	; (8007734 <convertAndSendData+0x84>)
 80076f8:	480f      	ldr	r0, [pc, #60]	; (8007738 <convertAndSendData+0x88>)
 80076fa:	f7f9 f871 	bl	80007e0 <sendMachineData>
	for(int i=0; i<2; i++) {
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3301      	adds	r3, #1
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b01      	cmp	r3, #1
 8007708:	ddf1      	ble.n	80076ee <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800770a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800770e:	f000 ff33 	bl	8008578 <HAL_Delay>
	lcd_clear();
 8007712:	f000 fa07 	bl	8007b24 <lcd_clear>
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000215 	.word	0x20000215
 8007724:	0800dafc 	.word	0x0800dafc
 8007728:	0800db10 	.word	0x0800db10
 800772c:	0800db24 	.word	0x0800db24
 8007730:	0800db38 	.word	0x0800db38
 8007734:	20000198 	.word	0x20000198
 8007738:	20000320 	.word	0x20000320

0800773c <iotSetup>:

void iotSetup() {
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007740:	4b12      	ldr	r3, [pc, #72]	; (800778c <iotSetup+0x50>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01f      	beq.n	8007788 <iotSetup+0x4c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007748:	4811      	ldr	r0, [pc, #68]	; (8007790 <iotSetup+0x54>)
 800774a:	f7f8 fd6b 	bl	8000224 <strlen>
 800774e:	4603      	mov	r3, r0
 8007750:	2b0c      	cmp	r3, #12
 8007752:	d001      	beq.n	8007758 <iotSetup+0x1c>
			takeMachineID();
 8007754:	f7ff f9f4 	bl	8006b40 <takeMachineID>
		}
		HAL_Delay(500);
 8007758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800775c:	f000 ff0c 	bl	8008578 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007760:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <iotSetup+0x58>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <iotSetup+0x30>
			takeWifiSSID();
 8007768:	f7ff fb4c 	bl	8006e04 <takeWifiSSID>
		}
		HAL_Delay(500);
 800776c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007770:	f000 ff02 	bl	8008578 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <iotSetup+0x5c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <iotSetup+0x44>
			takeWifiPass();
 800777c:	f7ff fcdc 	bl	8007138 <takeWifiPass>
		}
		HAL_Delay(500);
 8007780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007784:	f000 fef8 	bl	8008578 <HAL_Delay>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007788:	bf00      	nop
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000213 	.word	0x20000213
 8007790:	20000198 	.word	0x20000198
 8007794:	200001a4 	.word	0x200001a4
 8007798:	200001b8 	.word	0x200001b8

0800779c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	f023 030f 	bic.w	r3, r3, #15
 80077ac:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80077b4:	7b7b      	ldrb	r3, [r7, #13]
 80077b6:	f043 030c 	orr.w	r3, r3, #12
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80077be:	7b7b      	ldrb	r3, [r7, #13]
 80077c0:	f043 0308 	orr.w	r3, r3, #8
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80077c8:	7b3b      	ldrb	r3, [r7, #12]
 80077ca:	f043 030c 	orr.w	r3, r3, #12
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80077d2:	7b3b      	ldrb	r3, [r7, #12]
 80077d4:	f043 0308 	orr.w	r3, r3, #8
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80077dc:	bf00      	nop
 80077de:	4825      	ldr	r0, [pc, #148]	; (8007874 <lcd_send_cmd+0xd8>)
 80077e0:	f002 fac3 	bl	8009d6a <HAL_I2C_GetError>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d0f9      	beq.n	80077de <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077ea:	bf00      	nop
 80077ec:	4821      	ldr	r0, [pc, #132]	; (8007874 <lcd_send_cmd+0xd8>)
 80077ee:	f002 faaf 	bl	8009d50 <HAL_I2C_GetState>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d1f9      	bne.n	80077ec <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80077f8:	4b1f      	ldr	r3, [pc, #124]	; (8007878 <lcd_send_cmd+0xdc>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d116      	bne.n	800782e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
 8007804:	e00f      	b.n	8007826 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	3310      	adds	r3, #16
 800780a:	443b      	add	r3, r7
 800780c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	f022 0208 	bic.w	r2, r2, #8
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	3310      	adds	r3, #16
 800781a:	443b      	add	r3, r7
 800781c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	3301      	adds	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d9ec      	bls.n	8007806 <lcd_send_cmd+0x6a>
 800782c:	e015      	b.n	800785a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800782e:	2300      	movs	r3, #0
 8007830:	73bb      	strb	r3, [r7, #14]
 8007832:	e00f      	b.n	8007854 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	3310      	adds	r3, #16
 8007838:	443b      	add	r3, r7
 800783a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	f042 0208 	orr.w	r2, r2, #8
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	3310      	adds	r3, #16
 8007848:	443b      	add	r3, r7
 800784a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	3301      	adds	r3, #1
 8007852:	73bb      	strb	r3, [r7, #14]
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d9ec      	bls.n	8007834 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	2364      	movs	r3, #100	; 0x64
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	2304      	movs	r3, #4
 8007864:	214e      	movs	r1, #78	; 0x4e
 8007866:	4803      	ldr	r0, [pc, #12]	; (8007874 <lcd_send_cmd+0xd8>)
 8007868:	f001 fe12 	bl	8009490 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000284 	.word	0x20000284
 8007878:	20000258 	.word	0x20000258

0800787c <lcd_send_data>:

void lcd_send_data (char data) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af02      	add	r7, sp, #8
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	f023 030f 	bic.w	r3, r3, #15
 800788c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007894:	7b7b      	ldrb	r3, [r7, #13]
 8007896:	f043 030d 	orr.w	r3, r3, #13
 800789a:	b2db      	uxtb	r3, r3
 800789c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800789e:	7b7b      	ldrb	r3, [r7, #13]
 80078a0:	f043 0309 	orr.w	r3, r3, #9
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80078a8:	7b3b      	ldrb	r3, [r7, #12]
 80078aa:	f043 030d 	orr.w	r3, r3, #13
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80078b2:	7b3b      	ldrb	r3, [r7, #12]
 80078b4:	f043 0309 	orr.w	r3, r3, #9
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80078bc:	bf00      	nop
 80078be:	4825      	ldr	r0, [pc, #148]	; (8007954 <lcd_send_data+0xd8>)
 80078c0:	f002 fa53 	bl	8009d6a <HAL_I2C_GetError>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d0f9      	beq.n	80078be <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078ca:	bf00      	nop
 80078cc:	4821      	ldr	r0, [pc, #132]	; (8007954 <lcd_send_data+0xd8>)
 80078ce:	f002 fa3f 	bl	8009d50 <HAL_I2C_GetState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d1f9      	bne.n	80078cc <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80078d8:	4b1f      	ldr	r3, [pc, #124]	; (8007958 <lcd_send_data+0xdc>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d116      	bne.n	800790e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
 80078e4:	e00f      	b.n	8007906 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	3310      	adds	r3, #16
 80078ea:	443b      	add	r3, r7
 80078ec:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	f022 0208 	bic.w	r2, r2, #8
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	3310      	adds	r3, #16
 80078fa:	443b      	add	r3, r7
 80078fc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	3301      	adds	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d9ec      	bls.n	80078e6 <lcd_send_data+0x6a>
 800790c:	e015      	b.n	800793a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800790e:	2300      	movs	r3, #0
 8007910:	73bb      	strb	r3, [r7, #14]
 8007912:	e00f      	b.n	8007934 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	3310      	adds	r3, #16
 8007918:	443b      	add	r3, r7
 800791a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	f042 0208 	orr.w	r2, r2, #8
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	3310      	adds	r3, #16
 8007928:	443b      	add	r3, r7
 800792a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	3301      	adds	r3, #1
 8007932:	73bb      	strb	r3, [r7, #14]
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d9ec      	bls.n	8007914 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800793a:	f107 0208 	add.w	r2, r7, #8
 800793e:	2364      	movs	r3, #100	; 0x64
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2304      	movs	r3, #4
 8007944:	214e      	movs	r1, #78	; 0x4e
 8007946:	4803      	ldr	r0, [pc, #12]	; (8007954 <lcd_send_data+0xd8>)
 8007948:	f001 fda2 	bl	8009490 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000284 	.word	0x20000284
 8007958:	20000258 	.word	0x20000258

0800795c <lcd_send_string>:

void lcd_send_string (char *str) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007964:	e006      	b.n	8007974 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff84 	bl	800787c <lcd_send_data>
	while (*str) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f4      	bne.n	8007966 <lcd_send_string+0xa>
	}
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af02      	add	r7, sp, #8
 800798e:	4603      	mov	r3, r0
 8007990:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	f023 030f 	bic.w	r3, r3, #15
 8007998:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80079a0:	7b7b      	ldrb	r3, [r7, #13]
 80079a2:	f043 030d 	orr.w	r3, r3, #13
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80079aa:	7b7b      	ldrb	r3, [r7, #13]
 80079ac:	f043 0309 	orr.w	r3, r3, #9
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80079b4:	7b3b      	ldrb	r3, [r7, #12]
 80079b6:	f043 030d 	orr.w	r3, r3, #13
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80079be:	7b3b      	ldrb	r3, [r7, #12]
 80079c0:	f043 0309 	orr.w	r3, r3, #9
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079c8:	bf00      	nop
 80079ca:	4825      	ldr	r0, [pc, #148]	; (8007a60 <lcd_send_char+0xd8>)
 80079cc:	f002 f9cd 	bl	8009d6a <HAL_I2C_GetError>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d0f9      	beq.n	80079ca <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079d6:	bf00      	nop
 80079d8:	4821      	ldr	r0, [pc, #132]	; (8007a60 <lcd_send_char+0xd8>)
 80079da:	f002 f9b9 	bl	8009d50 <HAL_I2C_GetState>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d1f9      	bne.n	80079d8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80079e4:	4b1f      	ldr	r3, [pc, #124]	; (8007a64 <lcd_send_char+0xdc>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d116      	bne.n	8007a1a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
 80079f0:	e00f      	b.n	8007a12 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	3310      	adds	r3, #16
 80079f6:	443b      	add	r3, r7
 80079f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	f022 0208 	bic.w	r2, r2, #8
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	3310      	adds	r3, #16
 8007a06:	443b      	add	r3, r7
 8007a08:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d9ec      	bls.n	80079f2 <lcd_send_char+0x6a>
 8007a18:	e015      	b.n	8007a46 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73bb      	strb	r3, [r7, #14]
 8007a1e:	e00f      	b.n	8007a40 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	3310      	adds	r3, #16
 8007a24:	443b      	add	r3, r7
 8007a26:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	f042 0208 	orr.w	r2, r2, #8
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	3310      	adds	r3, #16
 8007a34:	443b      	add	r3, r7
 8007a36:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	73bb      	strb	r3, [r7, #14]
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d9ec      	bls.n	8007a20 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007a46:	f107 0208 	add.w	r2, r7, #8
 8007a4a:	2364      	movs	r3, #100	; 0x64
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	2304      	movs	r3, #4
 8007a50:	214e      	movs	r1, #78	; 0x4e
 8007a52:	4803      	ldr	r0, [pc, #12]	; (8007a60 <lcd_send_char+0xd8>)
 8007a54:	f001 fd1c 	bl	8009490 <HAL_I2C_Master_Transmit>
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000284 	.word	0x20000284
 8007a64:	20000258 	.word	0x20000258

08007a68 <lcd_init>:

void lcd_init (void) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007a6c:	2002      	movs	r0, #2
 8007a6e:	f7ff fe95 	bl	800779c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007a72:	2028      	movs	r0, #40	; 0x28
 8007a74:	f7ff fe92 	bl	800779c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007a78:	200c      	movs	r0, #12
 8007a7a:	f7ff fe8f 	bl	800779c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007a7e:	2080      	movs	r0, #128	; 0x80
 8007a80:	f7ff fe8c 	bl	800779c <lcd_send_cmd>
	lcd_backlight(1);
 8007a84:	2001      	movs	r0, #1
 8007a86:	f000 f86d 	bl	8007b64 <lcd_backlight>
}
 8007a8a:	bf00      	nop
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	4603      	mov	r3, r0
 8007a96:	460a      	mov	r2, r1
 8007a98:	71fb      	strb	r3, [r7, #7]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d106      	bne.n	8007ab2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007aa4:	79bb      	ldrb	r3, [r7, #6]
 8007aa6:	337f      	adds	r3, #127	; 0x7f
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fe76 	bl	800779c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007ab0:	e008      	b.n	8007ac4 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d105      	bne.n	8007ac4 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007ab8:	79bb      	ldrb	r3, [r7, #6]
 8007aba:	3b41      	subs	r3, #65	; 0x41
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fe6c 	bl	800779c <lcd_send_cmd>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	603a      	str	r2, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007adc:	79ba      	ldrb	r2, [r7, #6]
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff ffd3 	bl	8007a8e <lcd_gotoxy>
	lcd_send_string(str);
 8007ae8:	6838      	ldr	r0, [r7, #0]
 8007aea:	f7ff ff37 	bl	800795c <lcd_send_string>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	4603      	mov	r3, r0
 8007afe:	71fb      	strb	r3, [r7, #7]
 8007b00:	460b      	mov	r3, r1
 8007b02:	71bb      	strb	r3, [r7, #6]
 8007b04:	4613      	mov	r3, r2
 8007b06:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007b08:	79ba      	ldrb	r2, [r7, #6]
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ffbd 	bl	8007a8e <lcd_gotoxy>
    lcd_send_char(ch);
 8007b14:	797b      	ldrb	r3, [r7, #5]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff ff36 	bl	8007988 <lcd_send_char>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <lcd_clear>:

void lcd_clear(void) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f7ff fe37 	bl	800779c <lcd_send_cmd>
    HAL_Delay(2);
 8007b2e:	2002      	movs	r0, #2
 8007b30:	f000 fd22 	bl	8008578 <HAL_Delay>
}
 8007b34:	bf00      	nop
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	460a      	mov	r2, r1
 8007b42:	71fb      	strb	r3, [r7, #7]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007b48:	79ba      	ldrb	r2, [r7, #6]
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff ff9d 	bl	8007a8e <lcd_gotoxy>

    lcd_send_char(' ');
 8007b54:	2020      	movs	r0, #32
 8007b56:	f7ff ff17 	bl	8007988 <lcd_send_char>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007b6e:	4a05      	ldr	r2, [pc, #20]	; (8007b84 <lcd_backlight+0x20>)
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007b74:	2000      	movs	r0, #0
 8007b76:	f7ff fe11 	bl	800779c <lcd_send_cmd>
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000258 	.word	0x20000258

08007b88 <lcd_cursor>:

void lcd_cursor(int state) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d106      	bne.n	8007ba4 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007b96:	200e      	movs	r0, #14
 8007b98:	f7ff fe00 	bl	800779c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007b9c:	200f      	movs	r0, #15
 8007b9e:	f7ff fdfd 	bl	800779c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007ba2:	e002      	b.n	8007baa <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007ba4:	200c      	movs	r0, #12
 8007ba6:	f7ff fdf9 	bl	800779c <lcd_send_cmd>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	4a03      	ldr	r2, [pc, #12]	; (8007bd0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007bc4:	6013      	str	r3, [r2, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr
 8007bd0:	200001d0 	.word	0x200001d0

08007bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007bd8:	f000 fc6c 	bl	80084b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007be0:	f000 fcca 	bl	8008578 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007be4:	f000 f89c 	bl	8007d20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007be8:	f000 f9be 	bl	8007f68 <MX_GPIO_Init>
  MX_CAN_Init();
 8007bec:	f000 f8de 	bl	8007dac <MX_CAN_Init>
  MX_I2C1_Init();
 8007bf0:	f000 f910 	bl	8007e14 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007bf4:	f000 f93c 	bl	8007e70 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007bf8:	f000 f98c 	bl	8007f14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	2140      	movs	r1, #64	; 0x40
 8007c00:	483e      	ldr	r0, [pc, #248]	; (8007cfc <main+0x128>)
 8007c02:	f001 faa0 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007c06:	2201      	movs	r2, #1
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	483c      	ldr	r0, [pc, #240]	; (8007cfc <main+0x128>)
 8007c0c:	f001 fa9b 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007c10:	200a      	movs	r0, #10
 8007c12:	f000 fcb1 	bl	8008578 <HAL_Delay>
  lcd_init();
 8007c16:	f7ff ff27 	bl	8007a68 <lcd_init>
  HAL_Delay(10);
 8007c1a:	200a      	movs	r0, #10
 8007c1c:	f000 fcac 	bl	8008578 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007c20:	4837      	ldr	r0, [pc, #220]	; (8007d00 <main+0x12c>)
 8007c22:	f003 f943 	bl	800aeac <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c26:	bf00      	nop
 8007c28:	4836      	ldr	r0, [pc, #216]	; (8007d04 <main+0x130>)
 8007c2a:	f002 f89e 	bl	8009d6a <HAL_I2C_GetError>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d0f9      	beq.n	8007c28 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c34:	bf00      	nop
 8007c36:	4833      	ldr	r0, [pc, #204]	; (8007d04 <main+0x130>)
 8007c38:	f002 f88a 	bl	8009d50 <HAL_I2C_GetState>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d1f9      	bne.n	8007c36 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007c42:	2200      	movs	r2, #0
 8007c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c48:	482c      	ldr	r0, [pc, #176]	; (8007cfc <main+0x128>)
 8007c4a:	f001 fa7c 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c54:	4829      	ldr	r0, [pc, #164]	; (8007cfc <main+0x128>)
 8007c56:	f001 fa76 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2104      	movs	r1, #4
 8007c5e:	4827      	ldr	r0, [pc, #156]	; (8007cfc <main+0x128>)
 8007c60:	f001 fa71 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007c64:	2200      	movs	r2, #0
 8007c66:	2102      	movs	r1, #2
 8007c68:	4824      	ldr	r0, [pc, #144]	; (8007cfc <main+0x128>)
 8007c6a:	f001 fa6c 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2101      	movs	r1, #1
 8007c72:	4822      	ldr	r0, [pc, #136]	; (8007cfc <main+0x128>)
 8007c74:	f001 fa67 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2120      	movs	r1, #32
 8007c7c:	4822      	ldr	r0, [pc, #136]	; (8007d08 <main+0x134>)
 8007c7e:	f001 fa62 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c82:	2200      	movs	r2, #0
 8007c84:	2110      	movs	r1, #16
 8007c86:	4820      	ldr	r0, [pc, #128]	; (8007d08 <main+0x134>)
 8007c88:	f001 fa5d 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	481e      	ldr	r0, [pc, #120]	; (8007d0c <main+0x138>)
 8007c92:	f001 fa58 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007c96:	2200      	movs	r2, #0
 8007c98:	2140      	movs	r1, #64	; 0x40
 8007c9a:	481c      	ldr	r0, [pc, #112]	; (8007d0c <main+0x138>)
 8007c9c:	f001 fa53 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2120      	movs	r1, #32
 8007ca4:	4819      	ldr	r0, [pc, #100]	; (8007d0c <main+0x138>)
 8007ca6:	f001 fa4e 	bl	8009146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2110      	movs	r1, #16
 8007cae:	4817      	ldr	r0, [pc, #92]	; (8007d0c <main+0x138>)
 8007cb0:	f001 fa49 	bl	8009146 <HAL_GPIO_WritePin>

  i2cTest();
 8007cb4:	f7f8 ff58 	bl	8000b68 <i2cTest>
  HAL_Delay(100);
 8007cb8:	2064      	movs	r0, #100	; 0x64
 8007cba:	f000 fc5d 	bl	8008578 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007cbe:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <main+0x13c>)
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	f7ff ff02 	bl	8007acc <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007cc8:	4a12      	ldr	r2, [pc, #72]	; (8007d14 <main+0x140>)
 8007cca:	2101      	movs	r1, #1
 8007ccc:	2002      	movs	r0, #2
 8007cce:	f7ff fefd 	bl	8007acc <lcd_print>
  HAL_Delay(1000);
 8007cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cd6:	f000 fc4f 	bl	8008578 <HAL_Delay>
  lcd_clear();
 8007cda:	f7ff ff23 	bl	8007b24 <lcd_clear>

  eepromKontrol();
 8007cde:	f7f8 faa9 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ce6:	f000 fc47 	bl	8008578 <HAL_Delay>

  backLightTimer = millis;
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <main+0x144>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a0b      	ldr	r2, [pc, #44]	; (8007d1c <main+0x148>)
 8007cf0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007cf2:	f7ff fd23 	bl	800773c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007cf6:	f7fe fd8b 	bl	8006810 <mainLoop>
 8007cfa:	e7fc      	b.n	8007cf6 <main+0x122>
 8007cfc:	40010c00 	.word	0x40010c00
 8007d00:	200002d8 	.word	0x200002d8
 8007d04:	20000284 	.word	0x20000284
 8007d08:	40011000 	.word	0x40011000
 8007d0c:	40010800 	.word	0x40010800
 8007d10:	0800db4c 	.word	0x0800db4c
 8007d14:	0800db60 	.word	0x0800db60
 8007d18:	200001d0 	.word	0x200001d0
 8007d1c:	200001ec 	.word	0x200001ec

08007d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b090      	sub	sp, #64	; 0x40
 8007d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d26:	f107 0318 	add.w	r3, r7, #24
 8007d2a:	2228      	movs	r2, #40	; 0x28
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f004 fb79 	bl	800c426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d34:	1d3b      	adds	r3, r7, #4
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	605a      	str	r2, [r3, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
 8007d3e:	60da      	str	r2, [r3, #12]
 8007d40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d42:	2301      	movs	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d50:	2301      	movs	r3, #1
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d54:	2302      	movs	r3, #2
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007d5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d64:	f107 0318 	add.w	r3, r7, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f002 fc3f 	bl	800a5ec <HAL_RCC_OscConfig>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007d74:	f000 f9a2 	bl	80080bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d78:	230f      	movs	r3, #15
 8007d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007d8e:	1d3b      	adds	r3, r7, #4
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f002 feac 	bl	800aaf0 <HAL_RCC_ClockConfig>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007d9e:	f000 f98d 	bl	80080bc <Error_Handler>
  }
}
 8007da2:	bf00      	nop
 8007da4:	3740      	adds	r7, #64	; 0x40
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007db0:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <MX_CAN_Init+0x60>)
 8007db2:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <MX_CAN_Init+0x64>)
 8007db4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007db6:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <MX_CAN_Init+0x60>)
 8007db8:	2210      	movs	r2, #16
 8007dba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007dc8:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007dda:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <MX_CAN_Init+0x60>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <MX_CAN_Init+0x60>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <MX_CAN_Init+0x60>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007dec:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007df2:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <MX_CAN_Init+0x60>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007df8:	4804      	ldr	r0, [pc, #16]	; (8007e0c <MX_CAN_Init+0x60>)
 8007dfa:	f000 fbe1 	bl	80085c0 <HAL_CAN_Init>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007e04:	f000 f95a 	bl	80080bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007e08:	bf00      	nop
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000025c 	.word	0x2000025c
 8007e10:	40006400 	.word	0x40006400

08007e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007e18:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e1a:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <MX_I2C1_Init+0x54>)
 8007e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e20:	4a12      	ldr	r2, [pc, #72]	; (8007e6c <MX_I2C1_Init+0x58>)
 8007e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e44:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e4a:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e50:	4804      	ldr	r0, [pc, #16]	; (8007e64 <MX_I2C1_Init+0x50>)
 8007e52:	f001 f9a9 	bl	80091a8 <HAL_I2C_Init>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e5c:	f000 f92e 	bl	80080bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007e60:	bf00      	nop
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000284 	.word	0x20000284
 8007e68:	40005400 	.word	0x40005400
 8007e6c:	00061a80 	.word	0x00061a80

08007e70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e76:	f107 0308 	add.w	r3, r7, #8
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	605a      	str	r2, [r3, #4]
 8007e80:	609a      	str	r2, [r3, #8]
 8007e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e84:	463b      	mov	r3, r7
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007e8c:	4b1f      	ldr	r3, [pc, #124]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007e8e:	4a20      	ldr	r2, [pc, #128]	; (8007f10 <MX_TIM1_Init+0xa0>)
 8007e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007e92:	4b1e      	ldr	r3, [pc, #120]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007e94:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007e98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e9a:	4b1c      	ldr	r3, [pc, #112]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007ea0:	4b1a      	ldr	r3, [pc, #104]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007ea2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007eae:	4b17      	ldr	r3, [pc, #92]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eb4:	4b15      	ldr	r3, [pc, #84]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007eba:	4814      	ldr	r0, [pc, #80]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007ebc:	f002 ffa6 	bl	800ae0c <HAL_TIM_Base_Init>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007ec6:	f000 f8f9 	bl	80080bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007ed0:	f107 0308 	add.w	r3, r7, #8
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	480d      	ldr	r0, [pc, #52]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007ed8:	f003 f950 	bl	800b17c <HAL_TIM_ConfigClockSource>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007ee2:	f000 f8eb 	bl	80080bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007eee:	463b      	mov	r3, r7
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4806      	ldr	r0, [pc, #24]	; (8007f0c <MX_TIM1_Init+0x9c>)
 8007ef4:	f003 fb3e 	bl	800b574 <HAL_TIMEx_MasterConfigSynchronization>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007efe:	f000 f8dd 	bl	80080bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007f02:	bf00      	nop
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	200002d8 	.word	0x200002d8
 8007f10:	40012c00 	.word	0x40012c00

08007f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f1a:	4a12      	ldr	r2, [pc, #72]	; (8007f64 <MX_USART1_UART_Init+0x50>)
 8007f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007f26:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f38:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f3a:	220c      	movs	r2, #12
 8007f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f4a:	4805      	ldr	r0, [pc, #20]	; (8007f60 <MX_USART1_UART_Init+0x4c>)
 8007f4c:	f003 fb90 	bl	800b670 <HAL_UART_Init>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f56:	f000 f8b1 	bl	80080bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f5a:	bf00      	nop
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000320 	.word	0x20000320
 8007f64:	40013800 	.word	0x40013800

08007f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f6e:	f107 0310 	add.w	r3, r7, #16
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	605a      	str	r2, [r3, #4]
 8007f78:	609a      	str	r2, [r3, #8]
 8007f7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f7c:	4b4b      	ldr	r3, [pc, #300]	; (80080ac <MX_GPIO_Init+0x144>)
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	4a4a      	ldr	r2, [pc, #296]	; (80080ac <MX_GPIO_Init+0x144>)
 8007f82:	f043 0310 	orr.w	r3, r3, #16
 8007f86:	6193      	str	r3, [r2, #24]
 8007f88:	4b48      	ldr	r3, [pc, #288]	; (80080ac <MX_GPIO_Init+0x144>)
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f94:	4b45      	ldr	r3, [pc, #276]	; (80080ac <MX_GPIO_Init+0x144>)
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	4a44      	ldr	r2, [pc, #272]	; (80080ac <MX_GPIO_Init+0x144>)
 8007f9a:	f043 0320 	orr.w	r3, r3, #32
 8007f9e:	6193      	str	r3, [r2, #24]
 8007fa0:	4b42      	ldr	r3, [pc, #264]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fac:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	4a3e      	ldr	r2, [pc, #248]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	6193      	str	r3, [r2, #24]
 8007fb8:	4b3c      	ldr	r3, [pc, #240]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fc4:	4b39      	ldr	r3, [pc, #228]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	4a38      	ldr	r2, [pc, #224]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fca:	f043 0308 	orr.w	r3, r3, #8
 8007fce:	6193      	str	r3, [r2, #24]
 8007fd0:	4b36      	ldr	r3, [pc, #216]	; (80080ac <MX_GPIO_Init+0x144>)
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007fdc:	2200      	movs	r2, #0
 8007fde:	21f0      	movs	r1, #240	; 0xf0
 8007fe0:	4833      	ldr	r0, [pc, #204]	; (80080b0 <MX_GPIO_Init+0x148>)
 8007fe2:	f001 f8b0 	bl	8009146 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f241 0130 	movw	r1, #4144	; 0x1030
 8007fec:	4831      	ldr	r0, [pc, #196]	; (80080b4 <MX_GPIO_Init+0x14c>)
 8007fee:	f001 f8aa 	bl	8009146 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f640 4107 	movw	r1, #3079	; 0xc07
 8007ff8:	482f      	ldr	r0, [pc, #188]	; (80080b8 <MX_GPIO_Init+0x150>)
 8007ffa:	f001 f8a4 	bl	8009146 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007ffe:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008002:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008008:	2300      	movs	r3, #0
 800800a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800800c:	f107 0310 	add.w	r3, r7, #16
 8008010:	4619      	mov	r1, r3
 8008012:	4828      	ldr	r0, [pc, #160]	; (80080b4 <MX_GPIO_Init+0x14c>)
 8008014:	f000 fe20 	bl	8008c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008018:	f248 130f 	movw	r3, #33039	; 0x810f
 800801c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008026:	f107 0310 	add.w	r3, r7, #16
 800802a:	4619      	mov	r1, r3
 800802c:	4820      	ldr	r0, [pc, #128]	; (80080b0 <MX_GPIO_Init+0x148>)
 800802e:	f000 fe13 	bl	8008c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008032:	23f0      	movs	r3, #240	; 0xf0
 8008034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008036:	2301      	movs	r3, #1
 8008038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800803e:	2302      	movs	r3, #2
 8008040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008042:	f107 0310 	add.w	r3, r7, #16
 8008046:	4619      	mov	r1, r3
 8008048:	4819      	ldr	r0, [pc, #100]	; (80080b0 <MX_GPIO_Init+0x148>)
 800804a:	f000 fe05 	bl	8008c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800804e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008054:	2301      	movs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008058:	2300      	movs	r3, #0
 800805a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800805c:	2302      	movs	r3, #2
 800805e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	4619      	mov	r1, r3
 8008066:	4813      	ldr	r0, [pc, #76]	; (80080b4 <MX_GPIO_Init+0x14c>)
 8008068:	f000 fdf6 	bl	8008c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800806c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008070:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008072:	2301      	movs	r3, #1
 8008074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800807a:	2302      	movs	r3, #2
 800807c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800807e:	f107 0310 	add.w	r3, r7, #16
 8008082:	4619      	mov	r1, r3
 8008084:	480c      	ldr	r0, [pc, #48]	; (80080b8 <MX_GPIO_Init+0x150>)
 8008086:	f000 fde7 	bl	8008c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800808a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800808e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008094:	2300      	movs	r3, #0
 8008096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008098:	f107 0310 	add.w	r3, r7, #16
 800809c:	4619      	mov	r1, r3
 800809e:	4806      	ldr	r0, [pc, #24]	; (80080b8 <MX_GPIO_Init+0x150>)
 80080a0:	f000 fdda 	bl	8008c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80080a4:	bf00      	nop
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40021000 	.word	0x40021000
 80080b0:	40010800 	.word	0x40010800
 80080b4:	40011000 	.word	0x40011000
 80080b8:	40010c00 	.word	0x40010c00

080080bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80080c0:	bf00      	nop
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <HAL_MspInit+0x5c>)
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	4a14      	ldr	r2, [pc, #80]	; (8008124 <HAL_MspInit+0x5c>)
 80080d4:	f043 0301 	orr.w	r3, r3, #1
 80080d8:	6193      	str	r3, [r2, #24]
 80080da:	4b12      	ldr	r3, [pc, #72]	; (8008124 <HAL_MspInit+0x5c>)
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <HAL_MspInit+0x5c>)
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	4a0e      	ldr	r2, [pc, #56]	; (8008124 <HAL_MspInit+0x5c>)
 80080ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f0:	61d3      	str	r3, [r2, #28]
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <HAL_MspInit+0x5c>)
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fa:	607b      	str	r3, [r7, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <HAL_MspInit+0x60>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	4a04      	ldr	r2, [pc, #16]	; (8008128 <HAL_MspInit+0x60>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800811a:	bf00      	nop
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr
 8008124:	40021000 	.word	0x40021000
 8008128:	40010000 	.word	0x40010000

0800812c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008134:	f107 0310 	add.w	r3, r7, #16
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1c      	ldr	r2, [pc, #112]	; (80081b8 <HAL_CAN_MspInit+0x8c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d131      	bne.n	80081b0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <HAL_CAN_MspInit+0x90>)
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	4a1a      	ldr	r2, [pc, #104]	; (80081bc <HAL_CAN_MspInit+0x90>)
 8008152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008156:	61d3      	str	r3, [r2, #28]
 8008158:	4b18      	ldr	r3, [pc, #96]	; (80081bc <HAL_CAN_MspInit+0x90>)
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008164:	4b15      	ldr	r3, [pc, #84]	; (80081bc <HAL_CAN_MspInit+0x90>)
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	4a14      	ldr	r2, [pc, #80]	; (80081bc <HAL_CAN_MspInit+0x90>)
 800816a:	f043 0304 	orr.w	r3, r3, #4
 800816e:	6193      	str	r3, [r2, #24]
 8008170:	4b12      	ldr	r3, [pc, #72]	; (80081bc <HAL_CAN_MspInit+0x90>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	60bb      	str	r3, [r7, #8]
 800817a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800817c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008182:	2300      	movs	r3, #0
 8008184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008186:	2300      	movs	r3, #0
 8008188:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800818a:	f107 0310 	add.w	r3, r7, #16
 800818e:	4619      	mov	r1, r3
 8008190:	480b      	ldr	r0, [pc, #44]	; (80081c0 <HAL_CAN_MspInit+0x94>)
 8008192:	f000 fd61 	bl	8008c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800819a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800819c:	2302      	movs	r3, #2
 800819e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081a0:	2303      	movs	r3, #3
 80081a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081a4:	f107 0310 	add.w	r3, r7, #16
 80081a8:	4619      	mov	r1, r3
 80081aa:	4805      	ldr	r0, [pc, #20]	; (80081c0 <HAL_CAN_MspInit+0x94>)
 80081ac:	f000 fd54 	bl	8008c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80081b0:	bf00      	nop
 80081b2:	3720      	adds	r7, #32
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	40006400 	.word	0x40006400
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40010800 	.word	0x40010800

080081c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a15      	ldr	r2, [pc, #84]	; (8008234 <HAL_I2C_MspInit+0x70>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d123      	bne.n	800822c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081e4:	4b14      	ldr	r3, [pc, #80]	; (8008238 <HAL_I2C_MspInit+0x74>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	4a13      	ldr	r2, [pc, #76]	; (8008238 <HAL_I2C_MspInit+0x74>)
 80081ea:	f043 0308 	orr.w	r3, r3, #8
 80081ee:	6193      	str	r3, [r2, #24]
 80081f0:	4b11      	ldr	r3, [pc, #68]	; (8008238 <HAL_I2C_MspInit+0x74>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	60fb      	str	r3, [r7, #12]
 80081fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081fc:	23c0      	movs	r3, #192	; 0xc0
 80081fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008200:	2312      	movs	r3, #18
 8008202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008204:	2303      	movs	r3, #3
 8008206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008208:	f107 0310 	add.w	r3, r7, #16
 800820c:	4619      	mov	r1, r3
 800820e:	480b      	ldr	r0, [pc, #44]	; (800823c <HAL_I2C_MspInit+0x78>)
 8008210:	f000 fd22 	bl	8008c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008214:	4b08      	ldr	r3, [pc, #32]	; (8008238 <HAL_I2C_MspInit+0x74>)
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	4a07      	ldr	r2, [pc, #28]	; (8008238 <HAL_I2C_MspInit+0x74>)
 800821a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800821e:	61d3      	str	r3, [r2, #28]
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <HAL_I2C_MspInit+0x74>)
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800822c:	bf00      	nop
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40005400 	.word	0x40005400
 8008238:	40021000 	.word	0x40021000
 800823c:	40010c00 	.word	0x40010c00

08008240 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a0a      	ldr	r2, [pc, #40]	; (8008278 <HAL_I2C_MspDeInit+0x38>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d10d      	bne.n	800826e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <HAL_I2C_MspDeInit+0x3c>)
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	4a09      	ldr	r2, [pc, #36]	; (800827c <HAL_I2C_MspDeInit+0x3c>)
 8008258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800825c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800825e:	2140      	movs	r1, #64	; 0x40
 8008260:	4807      	ldr	r0, [pc, #28]	; (8008280 <HAL_I2C_MspDeInit+0x40>)
 8008262:	f000 fe8d 	bl	8008f80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008266:	2180      	movs	r1, #128	; 0x80
 8008268:	4805      	ldr	r0, [pc, #20]	; (8008280 <HAL_I2C_MspDeInit+0x40>)
 800826a:	f000 fe89 	bl	8008f80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40005400 	.word	0x40005400
 800827c:	40021000 	.word	0x40021000
 8008280:	40010c00 	.word	0x40010c00

08008284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0d      	ldr	r2, [pc, #52]	; (80082c8 <HAL_TIM_Base_MspInit+0x44>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d113      	bne.n	80082be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <HAL_TIM_Base_MspInit+0x48>)
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	4a0c      	ldr	r2, [pc, #48]	; (80082cc <HAL_TIM_Base_MspInit+0x48>)
 800829c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80082a0:	6193      	str	r3, [r2, #24]
 80082a2:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <HAL_TIM_Base_MspInit+0x48>)
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	2019      	movs	r0, #25
 80082b4:	f000 fb57 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80082b8:	2019      	movs	r0, #25
 80082ba:	f000 fb70 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40021000 	.word	0x40021000

080082d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d8:	f107 0310 	add.w	r3, r7, #16
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	609a      	str	r2, [r3, #8]
 80082e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a20      	ldr	r2, [pc, #128]	; (800836c <HAL_UART_MspInit+0x9c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d139      	bne.n	8008364 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082f0:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <HAL_UART_MspInit+0xa0>)
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	4a1e      	ldr	r2, [pc, #120]	; (8008370 <HAL_UART_MspInit+0xa0>)
 80082f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082fa:	6193      	str	r3, [r2, #24]
 80082fc:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <HAL_UART_MspInit+0xa0>)
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008308:	4b19      	ldr	r3, [pc, #100]	; (8008370 <HAL_UART_MspInit+0xa0>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	4a18      	ldr	r2, [pc, #96]	; (8008370 <HAL_UART_MspInit+0xa0>)
 800830e:	f043 0304 	orr.w	r3, r3, #4
 8008312:	6193      	str	r3, [r2, #24]
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <HAL_UART_MspInit+0xa0>)
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	60bb      	str	r3, [r7, #8]
 800831e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008326:	2302      	movs	r3, #2
 8008328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800832a:	2303      	movs	r3, #3
 800832c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	4619      	mov	r1, r3
 8008334:	480f      	ldr	r0, [pc, #60]	; (8008374 <HAL_UART_MspInit+0xa4>)
 8008336:	f000 fc8f 	bl	8008c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800833a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	4619      	mov	r1, r3
 800834e:	4809      	ldr	r0, [pc, #36]	; (8008374 <HAL_UART_MspInit+0xa4>)
 8008350:	f000 fc82 	bl	8008c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008354:	2200      	movs	r2, #0
 8008356:	2100      	movs	r1, #0
 8008358:	2025      	movs	r0, #37	; 0x25
 800835a:	f000 fb04 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800835e:	2025      	movs	r0, #37	; 0x25
 8008360:	f000 fb1d 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008364:	bf00      	nop
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40013800 	.word	0x40013800
 8008370:	40021000 	.word	0x40021000
 8008374:	40010800 	.word	0x40010800

08008378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800837c:	e7fe      	b.n	800837c <NMI_Handler+0x4>

0800837e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800837e:	b480      	push	{r7}
 8008380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008382:	e7fe      	b.n	8008382 <HardFault_Handler+0x4>

08008384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008388:	e7fe      	b.n	8008388 <MemManage_Handler+0x4>

0800838a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800838a:	b480      	push	{r7}
 800838c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800838e:	e7fe      	b.n	800838e <BusFault_Handler+0x4>

08008390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008390:	b480      	push	{r7}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008394:	e7fe      	b.n	8008394 <UsageFault_Handler+0x4>

08008396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008396:	b480      	push	{r7}
 8008398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800839a:	bf00      	nop
 800839c:	46bd      	mov	sp, r7
 800839e:	bc80      	pop	{r7}
 80083a0:	4770      	bx	lr

080083a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083a2:	b480      	push	{r7}
 80083a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083a6:	bf00      	nop
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr

080083ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083ae:	b480      	push	{r7}
 80083b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr

080083ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083be:	f000 f8bf 	bl	8008540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083c2:	bf00      	nop
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083cc:	4802      	ldr	r0, [pc, #8]	; (80083d8 <TIM1_UP_IRQHandler+0x10>)
 80083ce:	f002 fdcd 	bl	800af6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80083d2:	bf00      	nop
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200002d8 	.word	0x200002d8

080083dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80083e0:	4802      	ldr	r0, [pc, #8]	; (80083ec <USART1_IRQHandler+0x10>)
 80083e2:	f003 f9cb 	bl	800b77c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80083e6:	bf00      	nop
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000320 	.word	0x20000320

080083f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083f8:	4a14      	ldr	r2, [pc, #80]	; (800844c <_sbrk+0x5c>)
 80083fa:	4b15      	ldr	r3, [pc, #84]	; (8008450 <_sbrk+0x60>)
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008404:	4b13      	ldr	r3, [pc, #76]	; (8008454 <_sbrk+0x64>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <_sbrk+0x64>)
 800840e:	4a12      	ldr	r2, [pc, #72]	; (8008458 <_sbrk+0x68>)
 8008410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <_sbrk+0x64>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	429a      	cmp	r2, r3
 800841e:	d207      	bcs.n	8008430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008420:	f004 f81a 	bl	800c458 <__errno>
 8008424:	4603      	mov	r3, r0
 8008426:	220c      	movs	r2, #12
 8008428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800842e:	e009      	b.n	8008444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <_sbrk+0x64>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <_sbrk+0x64>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	4a05      	ldr	r2, [pc, #20]	; (8008454 <_sbrk+0x64>)
 8008440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	2000c000 	.word	0x2000c000
 8008450:	00000400 	.word	0x00000400
 8008454:	20000368 	.word	0x20000368
 8008458:	200004b8 	.word	0x200004b8

0800845c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008460:	bf00      	nop
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008468:	480c      	ldr	r0, [pc, #48]	; (800849c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800846a:	490d      	ldr	r1, [pc, #52]	; (80084a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800846c:	4a0d      	ldr	r2, [pc, #52]	; (80084a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800846e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008470:	e002      	b.n	8008478 <LoopCopyDataInit>

08008472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008476:	3304      	adds	r3, #4

08008478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800847a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800847c:	d3f9      	bcc.n	8008472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800847e:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008480:	4c0a      	ldr	r4, [pc, #40]	; (80084ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8008482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008484:	e001      	b.n	800848a <LoopFillZerobss>

08008486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008488:	3204      	adds	r2, #4

0800848a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800848a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800848c:	d3fb      	bcc.n	8008486 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800848e:	f7ff ffe5 	bl	800845c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008492:	f003 ffe7 	bl	800c464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008496:	f7ff fb9d 	bl	8007bd4 <main>
  bx lr
 800849a:	4770      	bx	lr
  ldr r0, =_sdata
 800849c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80084a0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80084a4:	0800dc00 	.word	0x0800dc00
  ldr r2, =_sbss
 80084a8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80084ac:	200004b8 	.word	0x200004b8

080084b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80084b0:	e7fe      	b.n	80084b0 <ADC1_2_IRQHandler>
	...

080084b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <HAL_Init+0x28>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a07      	ldr	r2, [pc, #28]	; (80084dc <HAL_Init+0x28>)
 80084be:	f043 0310 	orr.w	r3, r3, #16
 80084c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084c4:	2003      	movs	r0, #3
 80084c6:	f000 fa43 	bl	8008950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084ca:	200f      	movs	r0, #15
 80084cc:	f000 f808 	bl	80084e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084d0:	f7ff fdfa 	bl	80080c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40022000 	.word	0x40022000

080084e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084e8:	4b12      	ldr	r3, [pc, #72]	; (8008534 <HAL_InitTick+0x54>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	4b12      	ldr	r3, [pc, #72]	; (8008538 <HAL_InitTick+0x58>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	4619      	mov	r1, r3
 80084f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fa5b 	bl	80089ba <HAL_SYSTICK_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e00e      	b.n	800852c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b0f      	cmp	r3, #15
 8008512:	d80a      	bhi.n	800852a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008514:	2200      	movs	r2, #0
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800851c:	f000 fa23 	bl	8008966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008520:	4a06      	ldr	r2, [pc, #24]	; (800853c <HAL_InitTick+0x5c>)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200000a8 	.word	0x200000a8
 8008538:	200000b0 	.word	0x200000b0
 800853c:	200000ac 	.word	0x200000ac

08008540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <HAL_IncTick+0x1c>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <HAL_IncTick+0x20>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4413      	add	r3, r2
 8008550:	4a03      	ldr	r2, [pc, #12]	; (8008560 <HAL_IncTick+0x20>)
 8008552:	6013      	str	r3, [r2, #0]
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr
 800855c:	200000b0 	.word	0x200000b0
 8008560:	2000036c 	.word	0x2000036c

08008564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  return uwTick;
 8008568:	4b02      	ldr	r3, [pc, #8]	; (8008574 <HAL_GetTick+0x10>)
 800856a:	681b      	ldr	r3, [r3, #0]
}
 800856c:	4618      	mov	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr
 8008574:	2000036c 	.word	0x2000036c

08008578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008580:	f7ff fff0 	bl	8008564 <HAL_GetTick>
 8008584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008590:	d005      	beq.n	800859e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <HAL_Delay+0x44>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4413      	add	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800859e:	bf00      	nop
 80085a0:	f7ff ffe0 	bl	8008564 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d8f7      	bhi.n	80085a0 <HAL_Delay+0x28>
  {
  }
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200000b0 	.word	0x200000b0

080085c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e0ed      	b.n	80087ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fda4 	bl	800812c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0201 	orr.w	r2, r2, #1
 80085f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085f4:	f7ff ffb6 	bl	8008564 <HAL_GetTick>
 80085f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085fa:	e012      	b.n	8008622 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085fc:	f7ff ffb2 	bl	8008564 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b0a      	cmp	r3, #10
 8008608:	d90b      	bls.n	8008622 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2205      	movs	r2, #5
 800861a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e0c5      	b.n	80087ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0e5      	beq.n	80085fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 0202 	bic.w	r2, r2, #2
 800863e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008640:	f7ff ff90 	bl	8008564 <HAL_GetTick>
 8008644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008646:	e012      	b.n	800866e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008648:	f7ff ff8c 	bl	8008564 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b0a      	cmp	r3, #10
 8008654:	d90b      	bls.n	800866e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2205      	movs	r2, #5
 8008666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e09f      	b.n	80087ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e5      	bne.n	8008648 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	7e1b      	ldrb	r3, [r3, #24]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d108      	bne.n	8008696 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e007      	b.n	80086a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7e5b      	ldrb	r3, [r3, #25]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d108      	bne.n	80086c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e007      	b.n	80086d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7e9b      	ldrb	r3, [r3, #26]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d108      	bne.n	80086ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0220 	orr.w	r2, r2, #32
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e007      	b.n	80086fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0220 	bic.w	r2, r2, #32
 80086f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7edb      	ldrb	r3, [r3, #27]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d108      	bne.n	8008714 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0210 	bic.w	r2, r2, #16
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e007      	b.n	8008724 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0210 	orr.w	r2, r2, #16
 8008722:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	7f1b      	ldrb	r3, [r3, #28]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d108      	bne.n	800873e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0208 	orr.w	r2, r2, #8
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	e007      	b.n	800874e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0208 	bic.w	r2, r2, #8
 800874c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7f5b      	ldrb	r3, [r3, #29]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d108      	bne.n	8008768 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0204 	orr.w	r2, r2, #4
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e007      	b.n	8008778 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0204 	bic.w	r2, r2, #4
 8008776:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	ea42 0103 	orr.w	r1, r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	1e5a      	subs	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <__NVIC_SetPriorityGrouping>:
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087c8:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <__NVIC_SetPriorityGrouping+0x44>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80087d4:	4013      	ands	r3, r2
 80087d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087ea:	4a04      	ldr	r2, [pc, #16]	; (80087fc <__NVIC_SetPriorityGrouping+0x44>)
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	60d3      	str	r3, [r2, #12]
}
 80087f0:	bf00      	nop
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	e000ed00 	.word	0xe000ed00

08008800 <__NVIC_GetPriorityGrouping>:
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008804:	4b04      	ldr	r3, [pc, #16]	; (8008818 <__NVIC_GetPriorityGrouping+0x18>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	0a1b      	lsrs	r3, r3, #8
 800880a:	f003 0307 	and.w	r3, r3, #7
}
 800880e:	4618      	mov	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	e000ed00 	.word	0xe000ed00

0800881c <__NVIC_EnableIRQ>:
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882a:	2b00      	cmp	r3, #0
 800882c:	db0b      	blt.n	8008846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	f003 021f 	and.w	r2, r3, #31
 8008834:	4906      	ldr	r1, [pc, #24]	; (8008850 <__NVIC_EnableIRQ+0x34>)
 8008836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800883a:	095b      	lsrs	r3, r3, #5
 800883c:	2001      	movs	r0, #1
 800883e:	fa00 f202 	lsl.w	r2, r0, r2
 8008842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr
 8008850:	e000e100 	.word	0xe000e100

08008854 <__NVIC_SetPriority>:
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008864:	2b00      	cmp	r3, #0
 8008866:	db0a      	blt.n	800887e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	490c      	ldr	r1, [pc, #48]	; (80088a0 <__NVIC_SetPriority+0x4c>)
 800886e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008872:	0112      	lsls	r2, r2, #4
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	440b      	add	r3, r1
 8008878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800887c:	e00a      	b.n	8008894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	b2da      	uxtb	r2, r3
 8008882:	4908      	ldr	r1, [pc, #32]	; (80088a4 <__NVIC_SetPriority+0x50>)
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	3b04      	subs	r3, #4
 800888c:	0112      	lsls	r2, r2, #4
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	440b      	add	r3, r1
 8008892:	761a      	strb	r2, [r3, #24]
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e100 	.word	0xe000e100
 80088a4:	e000ed00 	.word	0xe000ed00

080088a8 <NVIC_EncodePriority>:
{
 80088a8:	b480      	push	{r7}
 80088aa:	b089      	sub	sp, #36	; 0x24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f1c3 0307 	rsb	r3, r3, #7
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	bf28      	it	cs
 80088c6:	2304      	movcs	r3, #4
 80088c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	3304      	adds	r3, #4
 80088ce:	2b06      	cmp	r3, #6
 80088d0:	d902      	bls.n	80088d8 <NVIC_EncodePriority+0x30>
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	3b03      	subs	r3, #3
 80088d6:	e000      	b.n	80088da <NVIC_EncodePriority+0x32>
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	43da      	mvns	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	401a      	ands	r2, r3
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	43d9      	mvns	r1, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008900:	4313      	orrs	r3, r2
}
 8008902:	4618      	mov	r0, r3
 8008904:	3724      	adds	r7, #36	; 0x24
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr

0800890c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3b01      	subs	r3, #1
 8008918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800891c:	d301      	bcc.n	8008922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800891e:	2301      	movs	r3, #1
 8008920:	e00f      	b.n	8008942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <SysTick_Config+0x40>)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3b01      	subs	r3, #1
 8008928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800892a:	210f      	movs	r1, #15
 800892c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008930:	f7ff ff90 	bl	8008854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <SysTick_Config+0x40>)
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800893a:	4b04      	ldr	r3, [pc, #16]	; (800894c <SysTick_Config+0x40>)
 800893c:	2207      	movs	r2, #7
 800893e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	e000e010 	.word	0xe000e010

08008950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff ff2d 	bl	80087b8 <__NVIC_SetPriorityGrouping>
}
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	4603      	mov	r3, r0
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008978:	f7ff ff42 	bl	8008800 <__NVIC_GetPriorityGrouping>
 800897c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	f7ff ff90 	bl	80088a8 <NVIC_EncodePriority>
 8008988:	4602      	mov	r2, r0
 800898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff ff5f 	bl	8008854 <__NVIC_SetPriority>
}
 8008996:	bf00      	nop
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	4603      	mov	r3, r0
 80089a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff ff35 	bl	800881c <__NVIC_EnableIRQ>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff ffa2 	bl	800890c <SysTick_Config>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d008      	beq.n	80089fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2204      	movs	r2, #4
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e020      	b.n	8008a3e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 020e 	bic.w	r2, r2, #14
 8008a0a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a24:	2101      	movs	r1, #1
 8008a26:	fa01 f202 	lsl.w	r2, r1, r2
 8008a2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d005      	beq.n	8008a6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2204      	movs	r2, #4
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]
 8008a6a:	e0d6      	b.n	8008c1a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 020e 	bic.w	r2, r2, #14
 8008a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0201 	bic.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	4b64      	ldr	r3, [pc, #400]	; (8008c24 <HAL_DMA_Abort_IT+0x1dc>)
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d958      	bls.n	8008b4a <HAL_DMA_Abort_IT+0x102>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a62      	ldr	r2, [pc, #392]	; (8008c28 <HAL_DMA_Abort_IT+0x1e0>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d04f      	beq.n	8008b42 <HAL_DMA_Abort_IT+0xfa>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a61      	ldr	r2, [pc, #388]	; (8008c2c <HAL_DMA_Abort_IT+0x1e4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d048      	beq.n	8008b3e <HAL_DMA_Abort_IT+0xf6>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a5f      	ldr	r2, [pc, #380]	; (8008c30 <HAL_DMA_Abort_IT+0x1e8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d040      	beq.n	8008b38 <HAL_DMA_Abort_IT+0xf0>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a5e      	ldr	r2, [pc, #376]	; (8008c34 <HAL_DMA_Abort_IT+0x1ec>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d038      	beq.n	8008b32 <HAL_DMA_Abort_IT+0xea>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a5c      	ldr	r2, [pc, #368]	; (8008c38 <HAL_DMA_Abort_IT+0x1f0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d030      	beq.n	8008b2c <HAL_DMA_Abort_IT+0xe4>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a5b      	ldr	r2, [pc, #364]	; (8008c3c <HAL_DMA_Abort_IT+0x1f4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d028      	beq.n	8008b26 <HAL_DMA_Abort_IT+0xde>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a52      	ldr	r2, [pc, #328]	; (8008c24 <HAL_DMA_Abort_IT+0x1dc>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d020      	beq.n	8008b20 <HAL_DMA_Abort_IT+0xd8>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a57      	ldr	r2, [pc, #348]	; (8008c40 <HAL_DMA_Abort_IT+0x1f8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d019      	beq.n	8008b1c <HAL_DMA_Abort_IT+0xd4>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a55      	ldr	r2, [pc, #340]	; (8008c44 <HAL_DMA_Abort_IT+0x1fc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d012      	beq.n	8008b18 <HAL_DMA_Abort_IT+0xd0>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a54      	ldr	r2, [pc, #336]	; (8008c48 <HAL_DMA_Abort_IT+0x200>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00a      	beq.n	8008b12 <HAL_DMA_Abort_IT+0xca>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a52      	ldr	r2, [pc, #328]	; (8008c4c <HAL_DMA_Abort_IT+0x204>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d102      	bne.n	8008b0c <HAL_DMA_Abort_IT+0xc4>
 8008b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b0a:	e01b      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b10:	e018      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b16:	e015      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	e013      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e011      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b24:	e00e      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b2a:	e00b      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b30:	e008      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b36:	e005      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b3c:	e002      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b3e:	2310      	movs	r3, #16
 8008b40:	e000      	b.n	8008b44 <HAL_DMA_Abort_IT+0xfc>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4a42      	ldr	r2, [pc, #264]	; (8008c50 <HAL_DMA_Abort_IT+0x208>)
 8008b46:	6053      	str	r3, [r2, #4]
 8008b48:	e057      	b.n	8008bfa <HAL_DMA_Abort_IT+0x1b2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a36      	ldr	r2, [pc, #216]	; (8008c28 <HAL_DMA_Abort_IT+0x1e0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d04f      	beq.n	8008bf4 <HAL_DMA_Abort_IT+0x1ac>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a34      	ldr	r2, [pc, #208]	; (8008c2c <HAL_DMA_Abort_IT+0x1e4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d048      	beq.n	8008bf0 <HAL_DMA_Abort_IT+0x1a8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a33      	ldr	r2, [pc, #204]	; (8008c30 <HAL_DMA_Abort_IT+0x1e8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d040      	beq.n	8008bea <HAL_DMA_Abort_IT+0x1a2>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a31      	ldr	r2, [pc, #196]	; (8008c34 <HAL_DMA_Abort_IT+0x1ec>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d038      	beq.n	8008be4 <HAL_DMA_Abort_IT+0x19c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a30      	ldr	r2, [pc, #192]	; (8008c38 <HAL_DMA_Abort_IT+0x1f0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d030      	beq.n	8008bde <HAL_DMA_Abort_IT+0x196>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a2e      	ldr	r2, [pc, #184]	; (8008c3c <HAL_DMA_Abort_IT+0x1f4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d028      	beq.n	8008bd8 <HAL_DMA_Abort_IT+0x190>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <HAL_DMA_Abort_IT+0x1dc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d020      	beq.n	8008bd2 <HAL_DMA_Abort_IT+0x18a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a2a      	ldr	r2, [pc, #168]	; (8008c40 <HAL_DMA_Abort_IT+0x1f8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d019      	beq.n	8008bce <HAL_DMA_Abort_IT+0x186>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a29      	ldr	r2, [pc, #164]	; (8008c44 <HAL_DMA_Abort_IT+0x1fc>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d012      	beq.n	8008bca <HAL_DMA_Abort_IT+0x182>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a27      	ldr	r2, [pc, #156]	; (8008c48 <HAL_DMA_Abort_IT+0x200>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00a      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x17c>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a26      	ldr	r2, [pc, #152]	; (8008c4c <HAL_DMA_Abort_IT+0x204>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d102      	bne.n	8008bbe <HAL_DMA_Abort_IT+0x176>
 8008bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bbc:	e01b      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bc2:	e018      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bc8:	e015      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bca:	2310      	movs	r3, #16
 8008bcc:	e013      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e011      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bd6:	e00e      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008bdc:	e00b      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008be2:	e008      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008be8:	e005      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bee:	e002      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	e000      	b.n	8008bf6 <HAL_DMA_Abort_IT+0x1ae>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4a17      	ldr	r2, [pc, #92]	; (8008c54 <HAL_DMA_Abort_IT+0x20c>)
 8008bf8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
    } 
  }
  return status;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40020080 	.word	0x40020080
 8008c28:	40020008 	.word	0x40020008
 8008c2c:	4002001c 	.word	0x4002001c
 8008c30:	40020030 	.word	0x40020030
 8008c34:	40020044 	.word	0x40020044
 8008c38:	40020058 	.word	0x40020058
 8008c3c:	4002006c 	.word	0x4002006c
 8008c40:	40020408 	.word	0x40020408
 8008c44:	4002041c 	.word	0x4002041c
 8008c48:	40020430 	.word	0x40020430
 8008c4c:	40020444 	.word	0x40020444
 8008c50:	40020400 	.word	0x40020400
 8008c54:	40020000 	.word	0x40020000

08008c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b08b      	sub	sp, #44	; 0x2c
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c62:	2300      	movs	r3, #0
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008c66:	2300      	movs	r3, #0
 8008c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c6a:	e179      	b.n	8008f60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	f040 8168 	bne.w	8008f5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4a96      	ldr	r2, [pc, #600]	; (8008ee8 <HAL_GPIO_Init+0x290>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d05e      	beq.n	8008d52 <HAL_GPIO_Init+0xfa>
 8008c94:	4a94      	ldr	r2, [pc, #592]	; (8008ee8 <HAL_GPIO_Init+0x290>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d875      	bhi.n	8008d86 <HAL_GPIO_Init+0x12e>
 8008c9a:	4a94      	ldr	r2, [pc, #592]	; (8008eec <HAL_GPIO_Init+0x294>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d058      	beq.n	8008d52 <HAL_GPIO_Init+0xfa>
 8008ca0:	4a92      	ldr	r2, [pc, #584]	; (8008eec <HAL_GPIO_Init+0x294>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d86f      	bhi.n	8008d86 <HAL_GPIO_Init+0x12e>
 8008ca6:	4a92      	ldr	r2, [pc, #584]	; (8008ef0 <HAL_GPIO_Init+0x298>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d052      	beq.n	8008d52 <HAL_GPIO_Init+0xfa>
 8008cac:	4a90      	ldr	r2, [pc, #576]	; (8008ef0 <HAL_GPIO_Init+0x298>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d869      	bhi.n	8008d86 <HAL_GPIO_Init+0x12e>
 8008cb2:	4a90      	ldr	r2, [pc, #576]	; (8008ef4 <HAL_GPIO_Init+0x29c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d04c      	beq.n	8008d52 <HAL_GPIO_Init+0xfa>
 8008cb8:	4a8e      	ldr	r2, [pc, #568]	; (8008ef4 <HAL_GPIO_Init+0x29c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d863      	bhi.n	8008d86 <HAL_GPIO_Init+0x12e>
 8008cbe:	4a8e      	ldr	r2, [pc, #568]	; (8008ef8 <HAL_GPIO_Init+0x2a0>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d046      	beq.n	8008d52 <HAL_GPIO_Init+0xfa>
 8008cc4:	4a8c      	ldr	r2, [pc, #560]	; (8008ef8 <HAL_GPIO_Init+0x2a0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d85d      	bhi.n	8008d86 <HAL_GPIO_Init+0x12e>
 8008cca:	2b12      	cmp	r3, #18
 8008ccc:	d82a      	bhi.n	8008d24 <HAL_GPIO_Init+0xcc>
 8008cce:	2b12      	cmp	r3, #18
 8008cd0:	d859      	bhi.n	8008d86 <HAL_GPIO_Init+0x12e>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <HAL_GPIO_Init+0x80>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008d53 	.word	0x08008d53
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008d3f 	.word	0x08008d3f
 8008ce4:	08008d81 	.word	0x08008d81
 8008ce8:	08008d87 	.word	0x08008d87
 8008cec:	08008d87 	.word	0x08008d87
 8008cf0:	08008d87 	.word	0x08008d87
 8008cf4:	08008d87 	.word	0x08008d87
 8008cf8:	08008d87 	.word	0x08008d87
 8008cfc:	08008d87 	.word	0x08008d87
 8008d00:	08008d87 	.word	0x08008d87
 8008d04:	08008d87 	.word	0x08008d87
 8008d08:	08008d87 	.word	0x08008d87
 8008d0c:	08008d87 	.word	0x08008d87
 8008d10:	08008d87 	.word	0x08008d87
 8008d14:	08008d87 	.word	0x08008d87
 8008d18:	08008d87 	.word	0x08008d87
 8008d1c:	08008d35 	.word	0x08008d35
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	4a75      	ldr	r2, [pc, #468]	; (8008efc <HAL_GPIO_Init+0x2a4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d013      	beq.n	8008d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008d2a:	e02c      	b.n	8008d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	623b      	str	r3, [r7, #32]
          break;
 8008d32:	e029      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	623b      	str	r3, [r7, #32]
          break;
 8008d3c:	e024      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	3308      	adds	r3, #8
 8008d44:	623b      	str	r3, [r7, #32]
          break;
 8008d46:	e01f      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	623b      	str	r3, [r7, #32]
          break;
 8008d50:	e01a      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008d5a:	2304      	movs	r3, #4
 8008d5c:	623b      	str	r3, [r7, #32]
          break;
 8008d5e:	e013      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d105      	bne.n	8008d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d68:	2308      	movs	r3, #8
 8008d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	611a      	str	r2, [r3, #16]
          break;
 8008d72:	e009      	b.n	8008d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d74:	2308      	movs	r3, #8
 8008d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	615a      	str	r2, [r3, #20]
          break;
 8008d7e:	e003      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008d80:	2300      	movs	r3, #0
 8008d82:	623b      	str	r3, [r7, #32]
          break;
 8008d84:	e000      	b.n	8008d88 <HAL_GPIO_Init+0x130>
          break;
 8008d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2bff      	cmp	r3, #255	; 0xff
 8008d8c:	d801      	bhi.n	8008d92 <HAL_GPIO_Init+0x13a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	e001      	b.n	8008d96 <HAL_GPIO_Init+0x13e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3304      	adds	r3, #4
 8008d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2bff      	cmp	r3, #255	; 0xff
 8008d9c:	d802      	bhi.n	8008da4 <HAL_GPIO_Init+0x14c>
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	e002      	b.n	8008daa <HAL_GPIO_Init+0x152>
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	3b08      	subs	r3, #8
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	210f      	movs	r1, #15
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	fa01 f303 	lsl.w	r3, r1, r3
 8008db8:	43db      	mvns	r3, r3
 8008dba:	401a      	ands	r2, r3
 8008dbc:	6a39      	ldr	r1, [r7, #32]
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 80c1 	beq.w	8008f5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008dd8:	4b49      	ldr	r3, [pc, #292]	; (8008f00 <HAL_GPIO_Init+0x2a8>)
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	4a48      	ldr	r2, [pc, #288]	; (8008f00 <HAL_GPIO_Init+0x2a8>)
 8008dde:	f043 0301 	orr.w	r3, r3, #1
 8008de2:	6193      	str	r3, [r2, #24]
 8008de4:	4b46      	ldr	r3, [pc, #280]	; (8008f00 <HAL_GPIO_Init+0x2a8>)
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	60bb      	str	r3, [r7, #8]
 8008dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008df0:	4a44      	ldr	r2, [pc, #272]	; (8008f04 <HAL_GPIO_Init+0x2ac>)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	089b      	lsrs	r3, r3, #2
 8008df6:	3302      	adds	r3, #2
 8008df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	220f      	movs	r2, #15
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a3c      	ldr	r2, [pc, #240]	; (8008f08 <HAL_GPIO_Init+0x2b0>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d01f      	beq.n	8008e5c <HAL_GPIO_Init+0x204>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a3b      	ldr	r2, [pc, #236]	; (8008f0c <HAL_GPIO_Init+0x2b4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d019      	beq.n	8008e58 <HAL_GPIO_Init+0x200>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a3a      	ldr	r2, [pc, #232]	; (8008f10 <HAL_GPIO_Init+0x2b8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d013      	beq.n	8008e54 <HAL_GPIO_Init+0x1fc>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a39      	ldr	r2, [pc, #228]	; (8008f14 <HAL_GPIO_Init+0x2bc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00d      	beq.n	8008e50 <HAL_GPIO_Init+0x1f8>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a38      	ldr	r2, [pc, #224]	; (8008f18 <HAL_GPIO_Init+0x2c0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d007      	beq.n	8008e4c <HAL_GPIO_Init+0x1f4>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a37      	ldr	r2, [pc, #220]	; (8008f1c <HAL_GPIO_Init+0x2c4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d101      	bne.n	8008e48 <HAL_GPIO_Init+0x1f0>
 8008e44:	2305      	movs	r3, #5
 8008e46:	e00a      	b.n	8008e5e <HAL_GPIO_Init+0x206>
 8008e48:	2306      	movs	r3, #6
 8008e4a:	e008      	b.n	8008e5e <HAL_GPIO_Init+0x206>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	e006      	b.n	8008e5e <HAL_GPIO_Init+0x206>
 8008e50:	2303      	movs	r3, #3
 8008e52:	e004      	b.n	8008e5e <HAL_GPIO_Init+0x206>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e002      	b.n	8008e5e <HAL_GPIO_Init+0x206>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e000      	b.n	8008e5e <HAL_GPIO_Init+0x206>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e60:	f002 0203 	and.w	r2, r2, #3
 8008e64:	0092      	lsls	r2, r2, #2
 8008e66:	4093      	lsls	r3, r2
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008e6e:	4925      	ldr	r1, [pc, #148]	; (8008f04 <HAL_GPIO_Init+0x2ac>)
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	089b      	lsrs	r3, r3, #2
 8008e74:	3302      	adds	r3, #2
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d006      	beq.n	8008e96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008e88:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	4924      	ldr	r1, [pc, #144]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	608b      	str	r3, [r1, #8]
 8008e94:	e006      	b.n	8008ea4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008e96:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	4920      	ldr	r1, [pc, #128]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	491a      	ldr	r1, [pc, #104]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60cb      	str	r3, [r1, #12]
 8008ebc:	e006      	b.n	8008ecc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008ebe:	4b18      	ldr	r3, [pc, #96]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	4916      	ldr	r1, [pc, #88]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d025      	beq.n	8008f24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008ed8:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	4910      	ldr	r1, [pc, #64]	; (8008f20 <HAL_GPIO_Init+0x2c8>)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	604b      	str	r3, [r1, #4]
 8008ee4:	e025      	b.n	8008f32 <HAL_GPIO_Init+0x2da>
 8008ee6:	bf00      	nop
 8008ee8:	10320000 	.word	0x10320000
 8008eec:	10310000 	.word	0x10310000
 8008ef0:	10220000 	.word	0x10220000
 8008ef4:	10210000 	.word	0x10210000
 8008ef8:	10120000 	.word	0x10120000
 8008efc:	10110000 	.word	0x10110000
 8008f00:	40021000 	.word	0x40021000
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40010800 	.word	0x40010800
 8008f0c:	40010c00 	.word	0x40010c00
 8008f10:	40011000 	.word	0x40011000
 8008f14:	40011400 	.word	0x40011400
 8008f18:	40011800 	.word	0x40011800
 8008f1c:	40011c00 	.word	0x40011c00
 8008f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008f24:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <HAL_GPIO_Init+0x324>)
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	43db      	mvns	r3, r3
 8008f2c:	4913      	ldr	r1, [pc, #76]	; (8008f7c <HAL_GPIO_Init+0x324>)
 8008f2e:	4013      	ands	r3, r2
 8008f30:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d006      	beq.n	8008f4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <HAL_GPIO_Init+0x324>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	490e      	ldr	r1, [pc, #56]	; (8008f7c <HAL_GPIO_Init+0x324>)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	600b      	str	r3, [r1, #0]
 8008f4a:	e006      	b.n	8008f5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <HAL_GPIO_Init+0x324>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	43db      	mvns	r3, r3
 8008f54:	4909      	ldr	r1, [pc, #36]	; (8008f7c <HAL_GPIO_Init+0x324>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f47f ae7e 	bne.w	8008c6c <HAL_GPIO_Init+0x14>
  }
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	372c      	adds	r7, #44	; 0x2c
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr
 8008f7c:	40010400 	.word	0x40010400

08008f80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b089      	sub	sp, #36	; 0x24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008f8e:	e0a6      	b.n	80090de <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f90:	2201      	movs	r2, #1
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 8099 	beq.w	80090d8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008fa6:	4a54      	ldr	r2, [pc, #336]	; (80090f8 <HAL_GPIO_DeInit+0x178>)
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	089b      	lsrs	r3, r3, #2
 8008fac:	3302      	adds	r3, #2
 8008fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f003 0303 	and.w	r3, r3, #3
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	220f      	movs	r2, #15
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a4c      	ldr	r2, [pc, #304]	; (80090fc <HAL_GPIO_DeInit+0x17c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d01f      	beq.n	8009010 <HAL_GPIO_DeInit+0x90>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a4b      	ldr	r2, [pc, #300]	; (8009100 <HAL_GPIO_DeInit+0x180>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d019      	beq.n	800900c <HAL_GPIO_DeInit+0x8c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a4a      	ldr	r2, [pc, #296]	; (8009104 <HAL_GPIO_DeInit+0x184>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d013      	beq.n	8009008 <HAL_GPIO_DeInit+0x88>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a49      	ldr	r2, [pc, #292]	; (8009108 <HAL_GPIO_DeInit+0x188>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00d      	beq.n	8009004 <HAL_GPIO_DeInit+0x84>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a48      	ldr	r2, [pc, #288]	; (800910c <HAL_GPIO_DeInit+0x18c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d007      	beq.n	8009000 <HAL_GPIO_DeInit+0x80>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a47      	ldr	r2, [pc, #284]	; (8009110 <HAL_GPIO_DeInit+0x190>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d101      	bne.n	8008ffc <HAL_GPIO_DeInit+0x7c>
 8008ff8:	2305      	movs	r3, #5
 8008ffa:	e00a      	b.n	8009012 <HAL_GPIO_DeInit+0x92>
 8008ffc:	2306      	movs	r3, #6
 8008ffe:	e008      	b.n	8009012 <HAL_GPIO_DeInit+0x92>
 8009000:	2304      	movs	r3, #4
 8009002:	e006      	b.n	8009012 <HAL_GPIO_DeInit+0x92>
 8009004:	2303      	movs	r3, #3
 8009006:	e004      	b.n	8009012 <HAL_GPIO_DeInit+0x92>
 8009008:	2302      	movs	r3, #2
 800900a:	e002      	b.n	8009012 <HAL_GPIO_DeInit+0x92>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <HAL_GPIO_DeInit+0x92>
 8009010:	2300      	movs	r3, #0
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	f002 0203 	and.w	r2, r2, #3
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	4093      	lsls	r3, r2
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	429a      	cmp	r2, r3
 8009020:	d132      	bne.n	8009088 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009022:	4b3c      	ldr	r3, [pc, #240]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	43db      	mvns	r3, r3
 800902a:	493a      	ldr	r1, [pc, #232]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 800902c:	4013      	ands	r3, r2
 800902e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009030:	4b38      	ldr	r3, [pc, #224]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	43db      	mvns	r3, r3
 8009038:	4936      	ldr	r1, [pc, #216]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 800903a:	4013      	ands	r3, r2
 800903c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800903e:	4b35      	ldr	r3, [pc, #212]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	43db      	mvns	r3, r3
 8009046:	4933      	ldr	r1, [pc, #204]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 8009048:	4013      	ands	r3, r2
 800904a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800904c:	4b31      	ldr	r3, [pc, #196]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	43db      	mvns	r3, r3
 8009054:	492f      	ldr	r1, [pc, #188]	; (8009114 <HAL_GPIO_DeInit+0x194>)
 8009056:	4013      	ands	r3, r2
 8009058:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	220f      	movs	r2, #15
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800906a:	4a23      	ldr	r2, [pc, #140]	; (80090f8 <HAL_GPIO_DeInit+0x178>)
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	089b      	lsrs	r3, r3, #2
 8009070:	3302      	adds	r3, #2
 8009072:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	43da      	mvns	r2, r3
 800907a:	481f      	ldr	r0, [pc, #124]	; (80090f8 <HAL_GPIO_DeInit+0x178>)
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	089b      	lsrs	r3, r3, #2
 8009080:	400a      	ands	r2, r1
 8009082:	3302      	adds	r3, #2
 8009084:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2bff      	cmp	r3, #255	; 0xff
 800908c:	d801      	bhi.n	8009092 <HAL_GPIO_DeInit+0x112>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	e001      	b.n	8009096 <HAL_GPIO_DeInit+0x116>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3304      	adds	r3, #4
 8009096:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	2bff      	cmp	r3, #255	; 0xff
 800909c:	d802      	bhi.n	80090a4 <HAL_GPIO_DeInit+0x124>
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	e002      	b.n	80090aa <HAL_GPIO_DeInit+0x12a>
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	3b08      	subs	r3, #8
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	210f      	movs	r1, #15
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	fa01 f303 	lsl.w	r3, r1, r3
 80090b8:	43db      	mvns	r3, r3
 80090ba:	401a      	ands	r2, r3
 80090bc:	2104      	movs	r1, #4
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	fa01 f303 	lsl.w	r3, r1, r3
 80090c4:	431a      	orrs	r2, r3
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	43db      	mvns	r3, r3
 80090d2:	401a      	ands	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3301      	adds	r3, #1
 80090dc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f47f af52 	bne.w	8008f90 <HAL_GPIO_DeInit+0x10>
  }
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	3724      	adds	r7, #36	; 0x24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bc80      	pop	{r7}
 80090f6:	4770      	bx	lr
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40010800 	.word	0x40010800
 8009100:	40010c00 	.word	0x40010c00
 8009104:	40011000 	.word	0x40011000
 8009108:	40011400 	.word	0x40011400
 800910c:	40011800 	.word	0x40011800
 8009110:	40011c00 	.word	0x40011c00
 8009114:	40010400 	.word	0x40010400

08009118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	887b      	ldrh	r3, [r7, #2]
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]
 8009134:	e001      	b.n	800913a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr

08009146 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	807b      	strh	r3, [r7, #2]
 8009152:	4613      	mov	r3, r2
 8009154:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009156:	787b      	ldrb	r3, [r7, #1]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800915c:	887a      	ldrh	r2, [r7, #2]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009162:	e003      	b.n	800916c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009164:	887b      	ldrh	r3, [r7, #2]
 8009166:	041a      	lsls	r2, r3, #16
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	611a      	str	r2, [r3, #16]
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	bc80      	pop	{r7}
 8009174:	4770      	bx	lr

08009176 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	460b      	mov	r3, r1
 8009180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009188:	887a      	ldrh	r2, [r7, #2]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4013      	ands	r3, r2
 800918e:	041a      	lsls	r2, r3, #16
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	43d9      	mvns	r1, r3
 8009194:	887b      	ldrh	r3, [r7, #2]
 8009196:	400b      	ands	r3, r1
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	611a      	str	r2, [r3, #16]
}
 800919e:	bf00      	nop
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr

080091a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e12b      	b.n	8009412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fe fff8 	bl	80081c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2224      	movs	r2, #36	; 0x24
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0201 	bic.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800920a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800920c:	f001 fdb8 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 8009210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4a81      	ldr	r2, [pc, #516]	; (800941c <HAL_I2C_Init+0x274>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d807      	bhi.n	800922c <HAL_I2C_Init+0x84>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4a80      	ldr	r2, [pc, #512]	; (8009420 <HAL_I2C_Init+0x278>)
 8009220:	4293      	cmp	r3, r2
 8009222:	bf94      	ite	ls
 8009224:	2301      	movls	r3, #1
 8009226:	2300      	movhi	r3, #0
 8009228:	b2db      	uxtb	r3, r3
 800922a:	e006      	b.n	800923a <HAL_I2C_Init+0x92>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4a7d      	ldr	r2, [pc, #500]	; (8009424 <HAL_I2C_Init+0x27c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	bf94      	ite	ls
 8009234:	2301      	movls	r3, #1
 8009236:	2300      	movhi	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e0e7      	b.n	8009412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4a78      	ldr	r2, [pc, #480]	; (8009428 <HAL_I2C_Init+0x280>)
 8009246:	fba2 2303 	umull	r2, r3, r2, r3
 800924a:	0c9b      	lsrs	r3, r3, #18
 800924c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	430a      	orrs	r2, r1
 8009260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	4a6a      	ldr	r2, [pc, #424]	; (800941c <HAL_I2C_Init+0x274>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d802      	bhi.n	800927c <HAL_I2C_Init+0xd4>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	3301      	adds	r3, #1
 800927a:	e009      	b.n	8009290 <HAL_I2C_Init+0xe8>
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009282:	fb02 f303 	mul.w	r3, r2, r3
 8009286:	4a69      	ldr	r2, [pc, #420]	; (800942c <HAL_I2C_Init+0x284>)
 8009288:	fba2 2303 	umull	r2, r3, r2, r3
 800928c:	099b      	lsrs	r3, r3, #6
 800928e:	3301      	adds	r3, #1
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6812      	ldr	r2, [r2, #0]
 8009294:	430b      	orrs	r3, r1
 8009296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80092a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	495c      	ldr	r1, [pc, #368]	; (800941c <HAL_I2C_Init+0x274>)
 80092ac:	428b      	cmp	r3, r1
 80092ae:	d819      	bhi.n	80092e4 <HAL_I2C_Init+0x13c>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	1e59      	subs	r1, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80092be:	1c59      	adds	r1, r3, #1
 80092c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80092c4:	400b      	ands	r3, r1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <HAL_I2C_Init+0x138>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	1e59      	subs	r1, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80092d8:	3301      	adds	r3, #1
 80092da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092de:	e051      	b.n	8009384 <HAL_I2C_Init+0x1dc>
 80092e0:	2304      	movs	r3, #4
 80092e2:	e04f      	b.n	8009384 <HAL_I2C_Init+0x1dc>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d111      	bne.n	8009310 <HAL_I2C_Init+0x168>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	1e58      	subs	r0, r3, #1
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6859      	ldr	r1, [r3, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	440b      	add	r3, r1
 80092fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80092fe:	3301      	adds	r3, #1
 8009300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009304:	2b00      	cmp	r3, #0
 8009306:	bf0c      	ite	eq
 8009308:	2301      	moveq	r3, #1
 800930a:	2300      	movne	r3, #0
 800930c:	b2db      	uxtb	r3, r3
 800930e:	e012      	b.n	8009336 <HAL_I2C_Init+0x18e>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	1e58      	subs	r0, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6859      	ldr	r1, [r3, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	0099      	lsls	r1, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	fbb0 f3f3 	udiv	r3, r0, r3
 8009326:	3301      	adds	r3, #1
 8009328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800932c:	2b00      	cmp	r3, #0
 800932e:	bf0c      	ite	eq
 8009330:	2301      	moveq	r3, #1
 8009332:	2300      	movne	r3, #0
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <HAL_I2C_Init+0x196>
 800933a:	2301      	movs	r3, #1
 800933c:	e022      	b.n	8009384 <HAL_I2C_Init+0x1dc>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10e      	bne.n	8009364 <HAL_I2C_Init+0x1bc>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	1e58      	subs	r0, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6859      	ldr	r1, [r3, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	440b      	add	r3, r1
 8009354:	fbb0 f3f3 	udiv	r3, r0, r3
 8009358:	3301      	adds	r3, #1
 800935a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800935e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009362:	e00f      	b.n	8009384 <HAL_I2C_Init+0x1dc>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	1e58      	subs	r0, r3, #1
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6859      	ldr	r1, [r3, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	0099      	lsls	r1, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	fbb0 f3f3 	udiv	r3, r0, r3
 800937a:	3301      	adds	r3, #1
 800937c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	6809      	ldr	r1, [r1, #0]
 8009388:	4313      	orrs	r3, r2
 800938a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69da      	ldr	r2, [r3, #28]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80093b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6911      	ldr	r1, [r2, #16]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	68d2      	ldr	r2, [r2, #12]
 80093be:	4311      	orrs	r1, r2
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695a      	ldr	r2, [r3, #20]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0201 	orr.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	000186a0 	.word	0x000186a0
 8009420:	001e847f 	.word	0x001e847f
 8009424:	003d08ff 	.word	0x003d08ff
 8009428:	431bde83 	.word	0x431bde83
 800942c:	10624dd3 	.word	0x10624dd3

08009430 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e021      	b.n	8009486 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2224      	movs	r2, #36	; 0x24
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0201 	bic.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7fe fef0 	bl	8008240 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	461a      	mov	r2, r3
 800949c:	460b      	mov	r3, r1
 800949e:	817b      	strh	r3, [r7, #10]
 80094a0:	4613      	mov	r3, r2
 80094a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094a4:	f7ff f85e 	bl	8008564 <HAL_GetTick>
 80094a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	f040 80e0 	bne.w	8009678 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	2319      	movs	r3, #25
 80094be:	2201      	movs	r2, #1
 80094c0:	4970      	ldr	r1, [pc, #448]	; (8009684 <HAL_I2C_Master_Transmit+0x1f4>)
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fe5c 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80094ce:	2302      	movs	r3, #2
 80094d0:	e0d3      	b.n	800967a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_I2C_Master_Transmit+0x50>
 80094dc:	2302      	movs	r3, #2
 80094de:	e0cc      	b.n	800967a <HAL_I2C_Master_Transmit+0x1ea>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d007      	beq.n	8009506 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0201 	orr.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2221      	movs	r2, #33	; 0x21
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2210      	movs	r2, #16
 8009522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	893a      	ldrh	r2, [r7, #8]
 8009536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953c:	b29a      	uxth	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a50      	ldr	r2, [pc, #320]	; (8009688 <HAL_I2C_Master_Transmit+0x1f8>)
 8009546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009548:	8979      	ldrh	r1, [r7, #10]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	6a3a      	ldr	r2, [r7, #32]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 fc16 	bl	8009d80 <I2C_MasterRequestWrite>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e08d      	b.n	800967a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	613b      	str	r3, [r7, #16]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009574:	e066      	b.n	8009644 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	6a39      	ldr	r1, [r7, #32]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 ff1a 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00d      	beq.n	80095a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	2b04      	cmp	r3, #4
 800958c:	d107      	bne.n	800959e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800959c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e06b      	b.n	800967a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d11b      	bne.n	8009618 <HAL_I2C_Master_Transmit+0x188>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d017      	beq.n	8009618 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	781a      	ldrb	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009610:	3b01      	subs	r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	6a39      	ldr	r1, [r7, #32]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 ff11 	bl	800a444 <I2C_WaitOnBTFFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00d      	beq.n	8009644 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	2b04      	cmp	r3, #4
 800962e:	d107      	bne.n	8009640 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e01a      	b.n	800967a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	2b00      	cmp	r3, #0
 800964a:	d194      	bne.n	8009576 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800965a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2220      	movs	r2, #32
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	e000      	b.n	800967a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009678:	2302      	movs	r3, #2
  }
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	00100002 	.word	0x00100002
 8009688:	ffff0000 	.word	0xffff0000

0800968c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af02      	add	r7, sp, #8
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	4608      	mov	r0, r1
 8009696:	4611      	mov	r1, r2
 8009698:	461a      	mov	r2, r3
 800969a:	4603      	mov	r3, r0
 800969c:	817b      	strh	r3, [r7, #10]
 800969e:	460b      	mov	r3, r1
 80096a0:	813b      	strh	r3, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096a6:	f7fe ff5d 	bl	8008564 <HAL_GetTick>
 80096aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	f040 80d9 	bne.w	800986c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	2319      	movs	r3, #25
 80096c0:	2201      	movs	r2, #1
 80096c2:	496d      	ldr	r1, [pc, #436]	; (8009878 <HAL_I2C_Mem_Write+0x1ec>)
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fd5b 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80096d0:	2302      	movs	r3, #2
 80096d2:	e0cc      	b.n	800986e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <HAL_I2C_Mem_Write+0x56>
 80096de:	2302      	movs	r3, #2
 80096e0:	e0c5      	b.n	800986e <HAL_I2C_Mem_Write+0x1e2>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d007      	beq.n	8009708 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f042 0201 	orr.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2221      	movs	r2, #33	; 0x21
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2240      	movs	r2, #64	; 0x40
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a3a      	ldr	r2, [r7, #32]
 8009732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4a4d      	ldr	r2, [pc, #308]	; (800987c <HAL_I2C_Mem_Write+0x1f0>)
 8009748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800974a:	88f8      	ldrh	r0, [r7, #6]
 800974c:	893a      	ldrh	r2, [r7, #8]
 800974e:	8979      	ldrh	r1, [r7, #10]
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4603      	mov	r3, r0
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fb92 	bl	8009e84 <I2C_RequestMemoryWrite>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d052      	beq.n	800980c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e081      	b.n	800986e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fe20 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	2b04      	cmp	r3, #4
 8009780:	d107      	bne.n	8009792 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e06b      	b.n	800986e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d11b      	bne.n	800980c <HAL_I2C_Mem_Write+0x180>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d017      	beq.n	800980c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1aa      	bne.n	800976a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 fe13 	bl	800a444 <I2C_WaitOnBTFFlagUntilTimeout>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00d      	beq.n	8009840 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	2b04      	cmp	r3, #4
 800982a:	d107      	bne.n	800983c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800983a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e016      	b.n	800986e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	e000      	b.n	800986e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800986c:	2302      	movs	r3, #2
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	00100002 	.word	0x00100002
 800987c:	ffff0000 	.word	0xffff0000

08009880 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	461a      	mov	r2, r3
 800988e:	4603      	mov	r3, r0
 8009890:	817b      	strh	r3, [r7, #10]
 8009892:	460b      	mov	r3, r1
 8009894:	813b      	strh	r3, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800989e:	f7fe fe61 	bl	8008564 <HAL_GetTick>
 80098a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	f040 8244 	bne.w	8009d3a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	2319      	movs	r3, #25
 80098b8:	2201      	movs	r2, #1
 80098ba:	4982      	ldr	r1, [pc, #520]	; (8009ac4 <HAL_I2C_Mem_Read+0x244>)
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 fc5f 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80098c8:	2302      	movs	r3, #2
 80098ca:	e237      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_I2C_Mem_Read+0x5a>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e230      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d007      	beq.n	8009900 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800990e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2222      	movs	r2, #34	; 0x22
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2240      	movs	r2, #64	; 0x40
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009936:	b29a      	uxth	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4a62      	ldr	r2, [pc, #392]	; (8009ac8 <HAL_I2C_Mem_Read+0x248>)
 8009940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009942:	88f8      	ldrh	r0, [r7, #6]
 8009944:	893a      	ldrh	r2, [r7, #8]
 8009946:	8979      	ldrh	r1, [r7, #10]
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	4603      	mov	r3, r0
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fb2c 	bl	8009fb0 <I2C_RequestMemoryRead>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e1ec      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009966:	2b00      	cmp	r3, #0
 8009968:	d113      	bne.n	8009992 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	61fb      	str	r3, [r7, #28]
 800997e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e1c0      	b.n	8009d14 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009996:	2b01      	cmp	r3, #1
 8009998:	d11e      	bne.n	80099d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099aa:	b672      	cpsid	i
}
 80099ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099ae:	2300      	movs	r3, #0
 80099b0:	61bb      	str	r3, [r7, #24]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099d4:	b662      	cpsie	i
}
 80099d6:	e035      	b.n	8009a44 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d11e      	bne.n	8009a1e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099f0:	b672      	cpsid	i
}
 80099f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a1a:	b662      	cpsie	i
}
 8009a1c:	e012      	b.n	8009a44 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a2c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009a44:	e166      	b.n	8009d14 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	f200 811f 	bhi.w	8009c8e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d123      	bne.n	8009aa0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fd39 	bl	800a4d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e167      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a9e:	e139      	b.n	8009d14 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d152      	bne.n	8009b4e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4906      	ldr	r1, [pc, #24]	; (8009acc <HAL_I2C_Mem_Read+0x24c>)
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 fb64 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d008      	beq.n	8009ad0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e13c      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
 8009ac2:	bf00      	nop
 8009ac4:	00100002 	.word	0x00100002
 8009ac8:	ffff0000 	.word	0xffff0000
 8009acc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ad0:	b672      	cpsid	i
}
 8009ad2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b16:	b662      	cpsie	i
}
 8009b18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691a      	ldr	r2, [r3, #16]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	b2d2      	uxtb	r2, r2
 8009b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b4c:	e0e2      	b.n	8009d14 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	2200      	movs	r2, #0
 8009b56:	497b      	ldr	r1, [pc, #492]	; (8009d44 <HAL_I2C_Mem_Read+0x4c4>)
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fb11 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e0e9      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b78:	b672      	cpsid	i
}
 8009b7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009bae:	4b66      	ldr	r3, [pc, #408]	; (8009d48 <HAL_I2C_Mem_Read+0x4c8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	08db      	lsrs	r3, r3, #3
 8009bb4:	4a65      	ldr	r2, [pc, #404]	; (8009d4c <HAL_I2C_Mem_Read+0x4cc>)
 8009bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bba:	0a1a      	lsrs	r2, r3, #8
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	00da      	lsls	r2, r3, #3
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d118      	bne.n	8009c06 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bee:	f043 0220 	orr.w	r2, r3, #32
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009bf6:	b662      	cpsie	i
}
 8009bf8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e09a      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d1d9      	bne.n	8009bc8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c56:	b662      	cpsie	i
}
 8009c58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c8c:	e042      	b.n	8009d14 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 fc1e 	bl	800a4d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e04c      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f003 0304 	and.w	r3, r3, #4
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d118      	bne.n	8009d14 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f47f ae94 	bne.w	8009a46 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009d3a:	2302      	movs	r3, #2
  }
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3728      	adds	r7, #40	; 0x28
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	00010004 	.word	0x00010004
 8009d48:	200000a8 	.word	0x200000a8
 8009d4c:	14f8b589 	.word	0x14f8b589

08009d50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d5e:	b2db      	uxtb	r3, r3
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bc80      	pop	{r7}
 8009d68:	4770      	bx	lr

08009d6a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr

08009d80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d006      	beq.n	8009daa <I2C_MasterRequestWrite+0x2a>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d003      	beq.n	8009daa <I2C_MasterRequestWrite+0x2a>
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009da8:	d108      	bne.n	8009dbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	e00b      	b.n	8009dd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc0:	2b12      	cmp	r3, #18
 8009dc2:	d107      	bne.n	8009dd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f9cd 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00d      	beq.n	8009e08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dfa:	d103      	bne.n	8009e04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e035      	b.n	8009e74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e10:	d108      	bne.n	8009e24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e20:	611a      	str	r2, [r3, #16]
 8009e22:	e01b      	b.n	8009e5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009e24:	897b      	ldrh	r3, [r7, #10]
 8009e26:	11db      	asrs	r3, r3, #7
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 0306 	and.w	r3, r3, #6
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f063 030f 	orn	r3, r3, #15
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	490e      	ldr	r1, [pc, #56]	; (8009e7c <I2C_MasterRequestWrite+0xfc>)
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 fa16 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e010      	b.n	8009e74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e52:	897b      	ldrh	r3, [r7, #10]
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4907      	ldr	r1, [pc, #28]	; (8009e80 <I2C_MasterRequestWrite+0x100>)
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 fa06 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	00010008 	.word	0x00010008
 8009e80:	00010002 	.word	0x00010002

08009e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	4611      	mov	r1, r2
 8009e90:	461a      	mov	r2, r3
 8009e92:	4603      	mov	r3, r0
 8009e94:	817b      	strh	r3, [r7, #10]
 8009e96:	460b      	mov	r3, r1
 8009e98:	813b      	strh	r3, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 f960 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed4:	d103      	bne.n	8009ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e05f      	b.n	8009fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ee2:	897b      	ldrh	r3, [r7, #10]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	6a3a      	ldr	r2, [r7, #32]
 8009ef6:	492d      	ldr	r1, [pc, #180]	; (8009fac <I2C_RequestMemoryWrite+0x128>)
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 f9bb 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e04c      	b.n	8009fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f20:	6a39      	ldr	r1, [r7, #32]
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fa46 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d107      	bne.n	8009f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e02b      	b.n	8009fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d105      	bne.n	8009f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f50:	893b      	ldrh	r3, [r7, #8]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	611a      	str	r2, [r3, #16]
 8009f5a:	e021      	b.n	8009fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f5c:	893b      	ldrh	r3, [r7, #8]
 8009f5e:	0a1b      	lsrs	r3, r3, #8
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	6a39      	ldr	r1, [r7, #32]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fa20 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00d      	beq.n	8009f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d107      	bne.n	8009f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e005      	b.n	8009fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f96:	893b      	ldrh	r3, [r7, #8]
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	00010002 	.word	0x00010002

08009fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af02      	add	r7, sp, #8
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	4608      	mov	r0, r1
 8009fba:	4611      	mov	r1, r2
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	817b      	strh	r3, [r7, #10]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	813b      	strh	r3, [r7, #8]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f8c2 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00d      	beq.n	800a01e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a010:	d103      	bne.n	800a01a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a018:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e0aa      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a01e:	897b      	ldrh	r3, [r7, #10]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	461a      	mov	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a02c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	6a3a      	ldr	r2, [r7, #32]
 800a032:	4952      	ldr	r1, [pc, #328]	; (800a17c <I2C_RequestMemoryRead+0x1cc>)
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 f91d 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e097      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	6a39      	ldr	r1, [r7, #32]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f9a8 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00d      	beq.n	800a086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d107      	bne.n	800a082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e076      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d105      	bne.n	800a098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a08c:	893b      	ldrh	r3, [r7, #8]
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	611a      	str	r2, [r3, #16]
 800a096:	e021      	b.n	800a0dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a098:	893b      	ldrh	r3, [r7, #8]
 800a09a:	0a1b      	lsrs	r3, r3, #8
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a8:	6a39      	ldr	r1, [r7, #32]
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 f982 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00d      	beq.n	800a0d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d107      	bne.n	800a0ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e050      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0d2:	893b      	ldrh	r3, [r7, #8]
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0de:	6a39      	ldr	r1, [r7, #32]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f967 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00d      	beq.n	800a108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d107      	bne.n	800a104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e035      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	2200      	movs	r2, #0
 800a120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f82b 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00d      	beq.n	800a14c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a13a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a13e:	d103      	bne.n	800a148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e013      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a14c:	897b      	ldrh	r3, [r7, #10]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	b2da      	uxtb	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	6a3a      	ldr	r2, [r7, #32]
 800a160:	4906      	ldr	r1, [pc, #24]	; (800a17c <I2C_RequestMemoryRead+0x1cc>)
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 f886 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	00010002 	.word	0x00010002

0800a180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	4613      	mov	r3, r2
 800a18e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a190:	e048      	b.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a198:	d044      	beq.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a19a:	f7fe f9e3 	bl	8008564 <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d302      	bcc.n	800a1b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d139      	bne.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10d      	bne.n	800a1d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	43da      	mvns	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bf0c      	ite	eq
 800a1cc:	2301      	moveq	r3, #1
 800a1ce:	2300      	movne	r3, #0
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	e00c      	b.n	800a1f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	43da      	mvns	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2301      	moveq	r3, #1
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d116      	bne.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	f043 0220 	orr.w	r2, r3, #32
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e023      	b.n	800a26c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d10d      	bne.n	800a24a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	43da      	mvns	r2, r3
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4013      	ands	r3, r2
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bf0c      	ite	eq
 800a240:	2301      	moveq	r3, #1
 800a242:	2300      	movne	r3, #0
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	e00c      	b.n	800a264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	43da      	mvns	r2, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4013      	ands	r3, r2
 800a256:	b29b      	uxth	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	429a      	cmp	r2, r3
 800a268:	d093      	beq.n	800a192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a282:	e071      	b.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a292:	d123      	bne.n	800a2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a2ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c8:	f043 0204 	orr.w	r2, r3, #4
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e067      	b.n	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2e2:	d041      	beq.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e4:	f7fe f93e 	bl	8008564 <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d302      	bcc.n	800a2fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d136      	bne.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	0c1b      	lsrs	r3, r3, #16
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10c      	bne.n	800a31e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	43da      	mvns	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	bf14      	ite	ne
 800a316:	2301      	movne	r3, #1
 800a318:	2300      	moveq	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	e00b      	b.n	800a336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	43da      	mvns	r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	4013      	ands	r3, r2
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	f043 0220 	orr.w	r2, r3, #32
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e021      	b.n	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	0c1b      	lsrs	r3, r3, #16
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d10c      	bne.n	800a38c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	43da      	mvns	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	4013      	ands	r3, r2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	bf14      	ite	ne
 800a384:	2301      	movne	r3, #1
 800a386:	2300      	moveq	r3, #0
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	e00b      	b.n	800a3a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	43da      	mvns	r2, r3
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4013      	ands	r3, r2
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bf14      	ite	ne
 800a39e:	2301      	movne	r3, #1
 800a3a0:	2300      	moveq	r3, #0
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f47f af6d 	bne.w	800a284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3c0:	e034      	b.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 f8e3 	bl	800a58e <I2C_IsAcknowledgeFailed>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e034      	b.n	800a43c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3d8:	d028      	beq.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3da:	f7fe f8c3 	bl	8008564 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d302      	bcc.n	800a3f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d11d      	bne.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fa:	2b80      	cmp	r3, #128	; 0x80
 800a3fc:	d016      	beq.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	f043 0220 	orr.w	r2, r3, #32
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e007      	b.n	800a43c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a436:	2b80      	cmp	r3, #128	; 0x80
 800a438:	d1c3      	bne.n	800a3c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a450:	e034      	b.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 f89b 	bl	800a58e <I2C_IsAcknowledgeFailed>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e034      	b.n	800a4cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a468:	d028      	beq.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a46a:	f7fe f87b 	bl	8008564 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	429a      	cmp	r2, r3
 800a478:	d302      	bcc.n	800a480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11d      	bne.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d016      	beq.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e007      	b.n	800a4cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b04      	cmp	r3, #4
 800a4c8:	d1c3      	bne.n	800a452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a4e0:	e049      	b.n	800a576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	f003 0310 	and.w	r3, r3, #16
 800a4ec:	2b10      	cmp	r3, #16
 800a4ee:	d119      	bne.n	800a524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f06f 0210 	mvn.w	r2, #16
 800a4f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e030      	b.n	800a586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a524:	f7fe f81e 	bl	8008564 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	429a      	cmp	r2, r3
 800a532:	d302      	bcc.n	800a53a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d11d      	bne.n	800a576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a544:	2b40      	cmp	r3, #64	; 0x40
 800a546:	d016      	beq.n	800a576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	f043 0220 	orr.w	r2, r3, #32
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e007      	b.n	800a586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a580:	2b40      	cmp	r3, #64	; 0x40
 800a582:	d1ae      	bne.n	800a4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5a4:	d11b      	bne.n	800a5de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	f043 0204 	orr.w	r2, r3, #4
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bc80      	pop	{r7}
 800a5e8:	4770      	bx	lr
	...

0800a5ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e272      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 8087 	beq.w	800a71a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a60c:	4b92      	ldr	r3, [pc, #584]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	f003 030c 	and.w	r3, r3, #12
 800a614:	2b04      	cmp	r3, #4
 800a616:	d00c      	beq.n	800a632 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a618:	4b8f      	ldr	r3, [pc, #572]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f003 030c 	and.w	r3, r3, #12
 800a620:	2b08      	cmp	r3, #8
 800a622:	d112      	bne.n	800a64a <HAL_RCC_OscConfig+0x5e>
 800a624:	4b8c      	ldr	r3, [pc, #560]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a630:	d10b      	bne.n	800a64a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a632:	4b89      	ldr	r3, [pc, #548]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d06c      	beq.n	800a718 <HAL_RCC_OscConfig+0x12c>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d168      	bne.n	800a718 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e24c      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a652:	d106      	bne.n	800a662 <HAL_RCC_OscConfig+0x76>
 800a654:	4b80      	ldr	r3, [pc, #512]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a7f      	ldr	r2, [pc, #508]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a65a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	e02e      	b.n	800a6c0 <HAL_RCC_OscConfig+0xd4>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10c      	bne.n	800a684 <HAL_RCC_OscConfig+0x98>
 800a66a:	4b7b      	ldr	r3, [pc, #492]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a7a      	ldr	r2, [pc, #488]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	4b78      	ldr	r3, [pc, #480]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a77      	ldr	r2, [pc, #476]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a67c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	e01d      	b.n	800a6c0 <HAL_RCC_OscConfig+0xd4>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a68c:	d10c      	bne.n	800a6a8 <HAL_RCC_OscConfig+0xbc>
 800a68e:	4b72      	ldr	r3, [pc, #456]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a71      	ldr	r2, [pc, #452]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	4b6f      	ldr	r3, [pc, #444]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a6e      	ldr	r2, [pc, #440]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a6a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	e00b      	b.n	800a6c0 <HAL_RCC_OscConfig+0xd4>
 800a6a8:	4b6b      	ldr	r3, [pc, #428]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a6a      	ldr	r2, [pc, #424]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a6ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	4b68      	ldr	r3, [pc, #416]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a67      	ldr	r2, [pc, #412]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a6ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d013      	beq.n	800a6f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6c8:	f7fd ff4c 	bl	8008564 <HAL_GetTick>
 800a6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6d0:	f7fd ff48 	bl	8008564 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b64      	cmp	r3, #100	; 0x64
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e200      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6e2:	4b5d      	ldr	r3, [pc, #372]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0f0      	beq.n	800a6d0 <HAL_RCC_OscConfig+0xe4>
 800a6ee:	e014      	b.n	800a71a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f0:	f7fd ff38 	bl	8008564 <HAL_GetTick>
 800a6f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6f6:	e008      	b.n	800a70a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6f8:	f7fd ff34 	bl	8008564 <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	2b64      	cmp	r3, #100	; 0x64
 800a704:	d901      	bls.n	800a70a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e1ec      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a70a:	4b53      	ldr	r3, [pc, #332]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f0      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x10c>
 800a716:	e000      	b.n	800a71a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d063      	beq.n	800a7ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a726:	4b4c      	ldr	r3, [pc, #304]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f003 030c 	and.w	r3, r3, #12
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00b      	beq.n	800a74a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a732:	4b49      	ldr	r3, [pc, #292]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f003 030c 	and.w	r3, r3, #12
 800a73a:	2b08      	cmp	r3, #8
 800a73c:	d11c      	bne.n	800a778 <HAL_RCC_OscConfig+0x18c>
 800a73e:	4b46      	ldr	r3, [pc, #280]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d116      	bne.n	800a778 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a74a:	4b43      	ldr	r3, [pc, #268]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <HAL_RCC_OscConfig+0x176>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d001      	beq.n	800a762 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e1c0      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a762:	4b3d      	ldr	r3, [pc, #244]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	4939      	ldr	r1, [pc, #228]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a772:	4313      	orrs	r3, r2
 800a774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a776:	e03a      	b.n	800a7ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d020      	beq.n	800a7c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a780:	4b36      	ldr	r3, [pc, #216]	; (800a85c <HAL_RCC_OscConfig+0x270>)
 800a782:	2201      	movs	r2, #1
 800a784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a786:	f7fd feed 	bl	8008564 <HAL_GetTick>
 800a78a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a78c:	e008      	b.n	800a7a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a78e:	f7fd fee9 	bl	8008564 <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d901      	bls.n	800a7a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e1a1      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7a0:	4b2d      	ldr	r3, [pc, #180]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0f0      	beq.n	800a78e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7ac:	4b2a      	ldr	r3, [pc, #168]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	4927      	ldr	r1, [pc, #156]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	600b      	str	r3, [r1, #0]
 800a7c0:	e015      	b.n	800a7ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7c2:	4b26      	ldr	r3, [pc, #152]	; (800a85c <HAL_RCC_OscConfig+0x270>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7c8:	f7fd fecc 	bl	8008564 <HAL_GetTick>
 800a7cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7ce:	e008      	b.n	800a7e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7d0:	f7fd fec8 	bl	8008564 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e180      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7e2:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1f0      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0308 	and.w	r3, r3, #8
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d03a      	beq.n	800a870 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d019      	beq.n	800a836 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a802:	4b17      	ldr	r3, [pc, #92]	; (800a860 <HAL_RCC_OscConfig+0x274>)
 800a804:	2201      	movs	r2, #1
 800a806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a808:	f7fd feac 	bl	8008564 <HAL_GetTick>
 800a80c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a80e:	e008      	b.n	800a822 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a810:	f7fd fea8 	bl	8008564 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d901      	bls.n	800a822 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e160      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a822:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <HAL_RCC_OscConfig+0x26c>)
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0f0      	beq.n	800a810 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a82e:	2001      	movs	r0, #1
 800a830:	f000 face 	bl	800add0 <RCC_Delay>
 800a834:	e01c      	b.n	800a870 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a836:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <HAL_RCC_OscConfig+0x274>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a83c:	f7fd fe92 	bl	8008564 <HAL_GetTick>
 800a840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a842:	e00f      	b.n	800a864 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a844:	f7fd fe8e 	bl	8008564 <HAL_GetTick>
 800a848:	4602      	mov	r2, r0
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d908      	bls.n	800a864 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e146      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
 800a856:	bf00      	nop
 800a858:	40021000 	.word	0x40021000
 800a85c:	42420000 	.word	0x42420000
 800a860:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a864:	4b92      	ldr	r3, [pc, #584]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	f003 0302 	and.w	r3, r3, #2
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e9      	bne.n	800a844 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 80a6 	beq.w	800a9ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a87e:	2300      	movs	r3, #0
 800a880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a882:	4b8b      	ldr	r3, [pc, #556]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10d      	bne.n	800a8aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a88e:	4b88      	ldr	r3, [pc, #544]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	4a87      	ldr	r2, [pc, #540]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a898:	61d3      	str	r3, [r2, #28]
 800a89a:	4b85      	ldr	r3, [pc, #532]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8a2:	60bb      	str	r3, [r7, #8]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8aa:	4b82      	ldr	r3, [pc, #520]	; (800aab4 <HAL_RCC_OscConfig+0x4c8>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d118      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8b6:	4b7f      	ldr	r3, [pc, #508]	; (800aab4 <HAL_RCC_OscConfig+0x4c8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a7e      	ldr	r2, [pc, #504]	; (800aab4 <HAL_RCC_OscConfig+0x4c8>)
 800a8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8c2:	f7fd fe4f 	bl	8008564 <HAL_GetTick>
 800a8c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8c8:	e008      	b.n	800a8dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8ca:	f7fd fe4b 	bl	8008564 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	2b64      	cmp	r3, #100	; 0x64
 800a8d6:	d901      	bls.n	800a8dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e103      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8dc:	4b75      	ldr	r3, [pc, #468]	; (800aab4 <HAL_RCC_OscConfig+0x4c8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d0f0      	beq.n	800a8ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d106      	bne.n	800a8fe <HAL_RCC_OscConfig+0x312>
 800a8f0:	4b6f      	ldr	r3, [pc, #444]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	4a6e      	ldr	r2, [pc, #440]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	6213      	str	r3, [r2, #32]
 800a8fc:	e02d      	b.n	800a95a <HAL_RCC_OscConfig+0x36e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10c      	bne.n	800a920 <HAL_RCC_OscConfig+0x334>
 800a906:	4b6a      	ldr	r3, [pc, #424]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	4a69      	ldr	r2, [pc, #420]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a90c:	f023 0301 	bic.w	r3, r3, #1
 800a910:	6213      	str	r3, [r2, #32]
 800a912:	4b67      	ldr	r3, [pc, #412]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	4a66      	ldr	r2, [pc, #408]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a918:	f023 0304 	bic.w	r3, r3, #4
 800a91c:	6213      	str	r3, [r2, #32]
 800a91e:	e01c      	b.n	800a95a <HAL_RCC_OscConfig+0x36e>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b05      	cmp	r3, #5
 800a926:	d10c      	bne.n	800a942 <HAL_RCC_OscConfig+0x356>
 800a928:	4b61      	ldr	r3, [pc, #388]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	4a60      	ldr	r2, [pc, #384]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a92e:	f043 0304 	orr.w	r3, r3, #4
 800a932:	6213      	str	r3, [r2, #32]
 800a934:	4b5e      	ldr	r3, [pc, #376]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	4a5d      	ldr	r2, [pc, #372]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a93a:	f043 0301 	orr.w	r3, r3, #1
 800a93e:	6213      	str	r3, [r2, #32]
 800a940:	e00b      	b.n	800a95a <HAL_RCC_OscConfig+0x36e>
 800a942:	4b5b      	ldr	r3, [pc, #364]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	4a5a      	ldr	r2, [pc, #360]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a948:	f023 0301 	bic.w	r3, r3, #1
 800a94c:	6213      	str	r3, [r2, #32]
 800a94e:	4b58      	ldr	r3, [pc, #352]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	4a57      	ldr	r2, [pc, #348]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a954:	f023 0304 	bic.w	r3, r3, #4
 800a958:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d015      	beq.n	800a98e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a962:	f7fd fdff 	bl	8008564 <HAL_GetTick>
 800a966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a968:	e00a      	b.n	800a980 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a96a:	f7fd fdfb 	bl	8008564 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	f241 3288 	movw	r2, #5000	; 0x1388
 800a978:	4293      	cmp	r3, r2
 800a97a:	d901      	bls.n	800a980 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e0b1      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a980:	4b4b      	ldr	r3, [pc, #300]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0ee      	beq.n	800a96a <HAL_RCC_OscConfig+0x37e>
 800a98c:	e014      	b.n	800a9b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a98e:	f7fd fde9 	bl	8008564 <HAL_GetTick>
 800a992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a994:	e00a      	b.n	800a9ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a996:	f7fd fde5 	bl	8008564 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e09b      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9ac:	4b40      	ldr	r3, [pc, #256]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1ee      	bne.n	800a996 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d105      	bne.n	800a9ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9be:	4b3c      	ldr	r3, [pc, #240]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a9c0:	69db      	ldr	r3, [r3, #28]
 800a9c2:	4a3b      	ldr	r2, [pc, #236]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a9c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 8087 	beq.w	800aae2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9d4:	4b36      	ldr	r3, [pc, #216]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f003 030c 	and.w	r3, r3, #12
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d061      	beq.n	800aaa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d146      	bne.n	800aa76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9e8:	4b33      	ldr	r3, [pc, #204]	; (800aab8 <HAL_RCC_OscConfig+0x4cc>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ee:	f7fd fdb9 	bl	8008564 <HAL_GetTick>
 800a9f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9f4:	e008      	b.n	800aa08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9f6:	f7fd fdb5 	bl	8008564 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e06d      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa08:	4b29      	ldr	r3, [pc, #164]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1f0      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa1c:	d108      	bne.n	800aa30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aa1e:	4b24      	ldr	r3, [pc, #144]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	4921      	ldr	r1, [pc, #132]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa30:	4b1f      	ldr	r3, [pc, #124]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a19      	ldr	r1, [r3, #32]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	430b      	orrs	r3, r1
 800aa42:	491b      	ldr	r1, [pc, #108]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa48:	4b1b      	ldr	r3, [pc, #108]	; (800aab8 <HAL_RCC_OscConfig+0x4cc>)
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa4e:	f7fd fd89 	bl	8008564 <HAL_GetTick>
 800aa52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa54:	e008      	b.n	800aa68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa56:	f7fd fd85 	bl	8008564 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d901      	bls.n	800aa68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e03d      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0f0      	beq.n	800aa56 <HAL_RCC_OscConfig+0x46a>
 800aa74:	e035      	b.n	800aae2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa76:	4b10      	ldr	r3, [pc, #64]	; (800aab8 <HAL_RCC_OscConfig+0x4cc>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa7c:	f7fd fd72 	bl	8008564 <HAL_GetTick>
 800aa80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa82:	e008      	b.n	800aa96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa84:	f7fd fd6e 	bl	8008564 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d901      	bls.n	800aa96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e026      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa96:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <HAL_RCC_OscConfig+0x4c4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1f0      	bne.n	800aa84 <HAL_RCC_OscConfig+0x498>
 800aaa2:	e01e      	b.n	800aae2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d107      	bne.n	800aabc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e019      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
 800aab0:	40021000 	.word	0x40021000
 800aab4:	40007000 	.word	0x40007000
 800aab8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aabc:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <HAL_RCC_OscConfig+0x500>)
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d106      	bne.n	800aade <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aada:	429a      	cmp	r2, r3
 800aadc:	d001      	beq.n	800aae2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	40021000 	.word	0x40021000

0800aaf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e0d0      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab04:	4b6a      	ldr	r3, [pc, #424]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d910      	bls.n	800ab34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab12:	4b67      	ldr	r3, [pc, #412]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f023 0207 	bic.w	r2, r3, #7
 800ab1a:	4965      	ldr	r1, [pc, #404]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab22:	4b63      	ldr	r3, [pc, #396]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d001      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e0b8      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d020      	beq.n	800ab82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab4c:	4b59      	ldr	r3, [pc, #356]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4a58      	ldr	r2, [pc, #352]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0308 	and.w	r3, r3, #8
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d005      	beq.n	800ab70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab64:	4b53      	ldr	r3, [pc, #332]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	4a52      	ldr	r2, [pc, #328]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ab6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab70:	4b50      	ldr	r3, [pc, #320]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	494d      	ldr	r1, [pc, #308]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d040      	beq.n	800ac10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d107      	bne.n	800aba6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab96:	4b47      	ldr	r3, [pc, #284]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d115      	bne.n	800abce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e07f      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d107      	bne.n	800abbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abae:	4b41      	ldr	r3, [pc, #260]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d109      	bne.n	800abce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e073      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abbe:	4b3d      	ldr	r3, [pc, #244]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e06b      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abce:	4b39      	ldr	r3, [pc, #228]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f023 0203 	bic.w	r2, r3, #3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4936      	ldr	r1, [pc, #216]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800abe0:	f7fd fcc0 	bl	8008564 <HAL_GetTick>
 800abe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abe6:	e00a      	b.n	800abfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abe8:	f7fd fcbc 	bl	8008564 <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e053      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abfe:	4b2d      	ldr	r3, [pc, #180]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f003 020c 	and.w	r2, r3, #12
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d1eb      	bne.n	800abe8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac10:	4b27      	ldr	r3, [pc, #156]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d210      	bcs.n	800ac40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac1e:	4b24      	ldr	r3, [pc, #144]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f023 0207 	bic.w	r2, r3, #7
 800ac26:	4922      	ldr	r1, [pc, #136]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac2e:	4b20      	ldr	r3, [pc, #128]	; (800acb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d001      	beq.n	800ac40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e032      	b.n	800aca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d008      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac4c:	4b19      	ldr	r3, [pc, #100]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	4916      	ldr	r1, [pc, #88]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0308 	and.w	r3, r3, #8
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d009      	beq.n	800ac7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac6a:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	490e      	ldr	r1, [pc, #56]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac7e:	f000 f821 	bl	800acc4 <HAL_RCC_GetSysClockFreq>
 800ac82:	4602      	mov	r2, r0
 800ac84:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	091b      	lsrs	r3, r3, #4
 800ac8a:	f003 030f 	and.w	r3, r3, #15
 800ac8e:	490a      	ldr	r1, [pc, #40]	; (800acb8 <HAL_RCC_ClockConfig+0x1c8>)
 800ac90:	5ccb      	ldrb	r3, [r1, r3]
 800ac92:	fa22 f303 	lsr.w	r3, r2, r3
 800ac96:	4a09      	ldr	r2, [pc, #36]	; (800acbc <HAL_RCC_ClockConfig+0x1cc>)
 800ac98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac9a:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <HAL_RCC_ClockConfig+0x1d0>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fd fc1e 	bl	80084e0 <HAL_InitTick>

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40022000 	.word	0x40022000
 800acb4:	40021000 	.word	0x40021000
 800acb8:	0800db74 	.word	0x0800db74
 800acbc:	200000a8 	.word	0x200000a8
 800acc0:	200000ac 	.word	0x200000ac

0800acc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	2300      	movs	r3, #0
 800acd0:	60bb      	str	r3, [r7, #8]
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	2300      	movs	r3, #0
 800acd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800acde:	4b1e      	ldr	r3, [pc, #120]	; (800ad58 <HAL_RCC_GetSysClockFreq+0x94>)
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f003 030c 	and.w	r3, r3, #12
 800acea:	2b04      	cmp	r3, #4
 800acec:	d002      	beq.n	800acf4 <HAL_RCC_GetSysClockFreq+0x30>
 800acee:	2b08      	cmp	r3, #8
 800acf0:	d003      	beq.n	800acfa <HAL_RCC_GetSysClockFreq+0x36>
 800acf2:	e027      	b.n	800ad44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800acf4:	4b19      	ldr	r3, [pc, #100]	; (800ad5c <HAL_RCC_GetSysClockFreq+0x98>)
 800acf6:	613b      	str	r3, [r7, #16]
      break;
 800acf8:	e027      	b.n	800ad4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	0c9b      	lsrs	r3, r3, #18
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	4a17      	ldr	r2, [pc, #92]	; (800ad60 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ad04:	5cd3      	ldrb	r3, [r2, r3]
 800ad06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d010      	beq.n	800ad34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ad12:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	0c5b      	lsrs	r3, r3, #17
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	4a11      	ldr	r2, [pc, #68]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ad1e:	5cd3      	ldrb	r3, [r2, r3]
 800ad20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a0d      	ldr	r2, [pc, #52]	; (800ad5c <HAL_RCC_GetSysClockFreq+0x98>)
 800ad26:	fb03 f202 	mul.w	r2, r3, r2
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad30:	617b      	str	r3, [r7, #20]
 800ad32:	e004      	b.n	800ad3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a0c      	ldr	r2, [pc, #48]	; (800ad68 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ad38:	fb02 f303 	mul.w	r3, r2, r3
 800ad3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	613b      	str	r3, [r7, #16]
      break;
 800ad42:	e002      	b.n	800ad4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ad44:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <HAL_RCC_GetSysClockFreq+0x98>)
 800ad46:	613b      	str	r3, [r7, #16]
      break;
 800ad48:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad4a:	693b      	ldr	r3, [r7, #16]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	40021000 	.word	0x40021000
 800ad5c:	007a1200 	.word	0x007a1200
 800ad60:	0800db8c 	.word	0x0800db8c
 800ad64:	0800db9c 	.word	0x0800db9c
 800ad68:	003d0900 	.word	0x003d0900

0800ad6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad70:	4b02      	ldr	r3, [pc, #8]	; (800ad7c <HAL_RCC_GetHCLKFreq+0x10>)
 800ad72:	681b      	ldr	r3, [r3, #0]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr
 800ad7c:	200000a8 	.word	0x200000a8

0800ad80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ad84:	f7ff fff2 	bl	800ad6c <HAL_RCC_GetHCLKFreq>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	f003 0307 	and.w	r3, r3, #7
 800ad94:	4903      	ldr	r1, [pc, #12]	; (800ada4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad96:	5ccb      	ldrb	r3, [r1, r3]
 800ad98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	40021000 	.word	0x40021000
 800ada4:	0800db84 	.word	0x0800db84

0800ada8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800adac:	f7ff ffde 	bl	800ad6c <HAL_RCC_GetHCLKFreq>
 800adb0:	4602      	mov	r2, r0
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	0adb      	lsrs	r3, r3, #11
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	4903      	ldr	r1, [pc, #12]	; (800adcc <HAL_RCC_GetPCLK2Freq+0x24>)
 800adbe:	5ccb      	ldrb	r3, [r1, r3]
 800adc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	40021000 	.word	0x40021000
 800adcc:	0800db84 	.word	0x0800db84

0800add0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800add8:	4b0a      	ldr	r3, [pc, #40]	; (800ae04 <RCC_Delay+0x34>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a0a      	ldr	r2, [pc, #40]	; (800ae08 <RCC_Delay+0x38>)
 800adde:	fba2 2303 	umull	r2, r3, r2, r3
 800ade2:	0a5b      	lsrs	r3, r3, #9
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	fb02 f303 	mul.w	r3, r2, r3
 800adea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800adec:	bf00      	nop
  }
  while (Delay --);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	1e5a      	subs	r2, r3, #1
 800adf2:	60fa      	str	r2, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1f9      	bne.n	800adec <RCC_Delay+0x1c>
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bc80      	pop	{r7}
 800ae02:	4770      	bx	lr
 800ae04:	200000a8 	.word	0x200000a8
 800ae08:	10624dd3 	.word	0x10624dd3

0800ae0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e041      	b.n	800aea2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7fd fa26 	bl	8008284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f000 fa82 	bl	800b354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d001      	beq.n	800aec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e044      	b.n	800af4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0201 	orr.w	r2, r2, #1
 800aeda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1d      	ldr	r2, [pc, #116]	; (800af58 <HAL_TIM_Base_Start_IT+0xac>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d018      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x6c>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1c      	ldr	r2, [pc, #112]	; (800af5c <HAL_TIM_Base_Start_IT+0xb0>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d013      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x6c>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef8:	d00e      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x6c>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a18      	ldr	r2, [pc, #96]	; (800af60 <HAL_TIM_Base_Start_IT+0xb4>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d009      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x6c>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a16      	ldr	r2, [pc, #88]	; (800af64 <HAL_TIM_Base_Start_IT+0xb8>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d004      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x6c>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a15      	ldr	r2, [pc, #84]	; (800af68 <HAL_TIM_Base_Start_IT+0xbc>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d111      	bne.n	800af3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 0307 	and.w	r3, r3, #7
 800af22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b06      	cmp	r3, #6
 800af28:	d010      	beq.n	800af4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f042 0201 	orr.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af3a:	e007      	b.n	800af4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f042 0201 	orr.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	bc80      	pop	{r7}
 800af56:	4770      	bx	lr
 800af58:	40012c00 	.word	0x40012c00
 800af5c:	40013400 	.word	0x40013400
 800af60:	40000400 	.word	0x40000400
 800af64:	40000800 	.word	0x40000800
 800af68:	40000c00 	.word	0x40000c00

0800af6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d122      	bne.n	800afc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d11b      	bne.n	800afc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f06f 0202 	mvn.w	r2, #2
 800af98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2201      	movs	r2, #1
 800af9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	f003 0303 	and.w	r3, r3, #3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f9b4 	bl	800b31c <HAL_TIM_IC_CaptureCallback>
 800afb4:	e005      	b.n	800afc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f9a7 	bl	800b30a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f9b6 	bl	800b32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	d122      	bne.n	800b01c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d11b      	bne.n	800b01c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f06f 0204 	mvn.w	r2, #4
 800afec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2202      	movs	r2, #2
 800aff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f98a 	bl	800b31c <HAL_TIM_IC_CaptureCallback>
 800b008:	e005      	b.n	800b016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f97d 	bl	800b30a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f98c 	bl	800b32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	f003 0308 	and.w	r3, r3, #8
 800b026:	2b08      	cmp	r3, #8
 800b028:	d122      	bne.n	800b070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	f003 0308 	and.w	r3, r3, #8
 800b034:	2b08      	cmp	r3, #8
 800b036:	d11b      	bne.n	800b070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f06f 0208 	mvn.w	r2, #8
 800b040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2204      	movs	r2, #4
 800b046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	f003 0303 	and.w	r3, r3, #3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f960 	bl	800b31c <HAL_TIM_IC_CaptureCallback>
 800b05c:	e005      	b.n	800b06a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f953 	bl	800b30a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f962 	bl	800b32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	f003 0310 	and.w	r3, r3, #16
 800b07a:	2b10      	cmp	r3, #16
 800b07c:	d122      	bne.n	800b0c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d11b      	bne.n	800b0c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f06f 0210 	mvn.w	r2, #16
 800b094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2208      	movs	r2, #8
 800b09a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f936 	bl	800b31c <HAL_TIM_IC_CaptureCallback>
 800b0b0:	e005      	b.n	800b0be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f929 	bl	800b30a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f938 	bl	800b32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d10e      	bne.n	800b0f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d107      	bne.n	800b0f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f06f 0201 	mvn.w	r2, #1
 800b0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7fc fd62 	bl	8007bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0fa:	2b80      	cmp	r3, #128	; 0x80
 800b0fc:	d10e      	bne.n	800b11c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b108:	2b80      	cmp	r3, #128	; 0x80
 800b10a:	d107      	bne.n	800b11c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 faa1 	bl	800b65e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b126:	2b40      	cmp	r3, #64	; 0x40
 800b128:	d10e      	bne.n	800b148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b134:	2b40      	cmp	r3, #64	; 0x40
 800b136:	d107      	bne.n	800b148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f8fc 	bl	800b340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	f003 0320 	and.w	r3, r3, #32
 800b152:	2b20      	cmp	r3, #32
 800b154:	d10e      	bne.n	800b174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b20      	cmp	r3, #32
 800b162:	d107      	bne.n	800b174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f06f 0220 	mvn.w	r2, #32
 800b16c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa6c 	bl	800b64c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b190:	2b01      	cmp	r3, #1
 800b192:	d101      	bne.n	800b198 <HAL_TIM_ConfigClockSource+0x1c>
 800b194:	2302      	movs	r3, #2
 800b196:	e0b4      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x186>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b1b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1d0:	d03e      	beq.n	800b250 <HAL_TIM_ConfigClockSource+0xd4>
 800b1d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1d6:	f200 8087 	bhi.w	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1de:	f000 8086 	beq.w	800b2ee <HAL_TIM_ConfigClockSource+0x172>
 800b1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e6:	d87f      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1e8:	2b70      	cmp	r3, #112	; 0x70
 800b1ea:	d01a      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0xa6>
 800b1ec:	2b70      	cmp	r3, #112	; 0x70
 800b1ee:	d87b      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1f0:	2b60      	cmp	r3, #96	; 0x60
 800b1f2:	d050      	beq.n	800b296 <HAL_TIM_ConfigClockSource+0x11a>
 800b1f4:	2b60      	cmp	r3, #96	; 0x60
 800b1f6:	d877      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1f8:	2b50      	cmp	r3, #80	; 0x50
 800b1fa:	d03c      	beq.n	800b276 <HAL_TIM_ConfigClockSource+0xfa>
 800b1fc:	2b50      	cmp	r3, #80	; 0x50
 800b1fe:	d873      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b200:	2b40      	cmp	r3, #64	; 0x40
 800b202:	d058      	beq.n	800b2b6 <HAL_TIM_ConfigClockSource+0x13a>
 800b204:	2b40      	cmp	r3, #64	; 0x40
 800b206:	d86f      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b208:	2b30      	cmp	r3, #48	; 0x30
 800b20a:	d064      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b20c:	2b30      	cmp	r3, #48	; 0x30
 800b20e:	d86b      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b210:	2b20      	cmp	r3, #32
 800b212:	d060      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b214:	2b20      	cmp	r3, #32
 800b216:	d867      	bhi.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d05c      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b21c:	2b10      	cmp	r3, #16
 800b21e:	d05a      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b220:	e062      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b232:	f000 f980 	bl	800b536 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	609a      	str	r2, [r3, #8]
      break;
 800b24e:	e04f      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b260:	f000 f969 	bl	800b536 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b272:	609a      	str	r2, [r3, #8]
      break;
 800b274:	e03c      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b282:	461a      	mov	r2, r3
 800b284:	f000 f8e0 	bl	800b448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2150      	movs	r1, #80	; 0x50
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f937 	bl	800b502 <TIM_ITRx_SetConfig>
      break;
 800b294:	e02c      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f000 f8fe 	bl	800b4a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2160      	movs	r1, #96	; 0x60
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 f927 	bl	800b502 <TIM_ITRx_SetConfig>
      break;
 800b2b4:	e01c      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f000 f8c0 	bl	800b448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2140      	movs	r1, #64	; 0x40
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 f917 	bl	800b502 <TIM_ITRx_SetConfig>
      break;
 800b2d4:	e00c      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f000 f90e 	bl	800b502 <TIM_ITRx_SetConfig>
      break;
 800b2e6:	e003      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ec:	e000      	b.n	800b2f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b2ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b312:	bf00      	nop
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	bc80      	pop	{r7}
 800b31a:	4770      	bx	lr

0800b31c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	bc80      	pop	{r7}
 800b32c:	4770      	bx	lr

0800b32e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bc80      	pop	{r7}
 800b33e:	4770      	bx	lr

0800b340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bc80      	pop	{r7}
 800b350:	4770      	bx	lr
	...

0800b354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a33      	ldr	r2, [pc, #204]	; (800b434 <TIM_Base_SetConfig+0xe0>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d013      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a32      	ldr	r2, [pc, #200]	; (800b438 <TIM_Base_SetConfig+0xe4>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00f      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37a:	d00b      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a2f      	ldr	r2, [pc, #188]	; (800b43c <TIM_Base_SetConfig+0xe8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d007      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a2e      	ldr	r2, [pc, #184]	; (800b440 <TIM_Base_SetConfig+0xec>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d003      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a2d      	ldr	r2, [pc, #180]	; (800b444 <TIM_Base_SetConfig+0xf0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d108      	bne.n	800b3a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a22      	ldr	r2, [pc, #136]	; (800b434 <TIM_Base_SetConfig+0xe0>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d013      	beq.n	800b3d6 <TIM_Base_SetConfig+0x82>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a21      	ldr	r2, [pc, #132]	; (800b438 <TIM_Base_SetConfig+0xe4>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d00f      	beq.n	800b3d6 <TIM_Base_SetConfig+0x82>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3bc:	d00b      	beq.n	800b3d6 <TIM_Base_SetConfig+0x82>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a1e      	ldr	r2, [pc, #120]	; (800b43c <TIM_Base_SetConfig+0xe8>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d007      	beq.n	800b3d6 <TIM_Base_SetConfig+0x82>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a1d      	ldr	r2, [pc, #116]	; (800b440 <TIM_Base_SetConfig+0xec>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d003      	beq.n	800b3d6 <TIM_Base_SetConfig+0x82>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a1c      	ldr	r2, [pc, #112]	; (800b444 <TIM_Base_SetConfig+0xf0>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d108      	bne.n	800b3e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a09      	ldr	r2, [pc, #36]	; (800b434 <TIM_Base_SetConfig+0xe0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_Base_SetConfig+0xc8>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a08      	ldr	r2, [pc, #32]	; (800b438 <TIM_Base_SetConfig+0xe4>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d103      	bne.n	800b424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	691a      	ldr	r2, [r3, #16]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	615a      	str	r2, [r3, #20]
}
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	bc80      	pop	{r7}
 800b432:	4770      	bx	lr
 800b434:	40012c00 	.word	0x40012c00
 800b438:	40013400 	.word	0x40013400
 800b43c:	40000400 	.word	0x40000400
 800b440:	40000800 	.word	0x40000800
 800b444:	40000c00 	.word	0x40000c00

0800b448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 0201 	bic.w	r2, r3, #1
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f023 030a 	bic.w	r3, r3, #10
 800b484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	621a      	str	r2, [r3, #32]
}
 800b49a:	bf00      	nop
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bc80      	pop	{r7}
 800b4a2:	4770      	bx	lr

0800b4a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f023 0210 	bic.w	r2, r3, #16
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b4ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	031b      	lsls	r3, r3, #12
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	621a      	str	r2, [r3, #32]
}
 800b4f8:	bf00      	nop
 800b4fa:	371c      	adds	r7, #28
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr

0800b502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b502:	b480      	push	{r7}
 800b504:	b085      	sub	sp, #20
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4313      	orrs	r3, r2
 800b520:	f043 0307 	orr.w	r3, r3, #7
 800b524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	609a      	str	r2, [r3, #8]
}
 800b52c:	bf00      	nop
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	bc80      	pop	{r7}
 800b534:	4770      	bx	lr

0800b536 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b536:	b480      	push	{r7}
 800b538:	b087      	sub	sp, #28
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b550:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	021a      	lsls	r2, r3, #8
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	431a      	orrs	r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	609a      	str	r2, [r3, #8]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	bc80      	pop	{r7}
 800b572:	4770      	bx	lr

0800b574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b588:	2302      	movs	r3, #2
 800b58a:	e050      	b.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a1b      	ldr	r2, [pc, #108]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d018      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a19      	ldr	r2, [pc, #100]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d013      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e2:	d00e      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a15      	ldr	r2, [pc, #84]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d009      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a14      	ldr	r2, [pc, #80]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d004      	beq.n	800b602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a12      	ldr	r2, [pc, #72]	; (800b648 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d10c      	bne.n	800b61c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	4313      	orrs	r3, r2
 800b612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	bc80      	pop	{r7}
 800b636:	4770      	bx	lr
 800b638:	40012c00 	.word	0x40012c00
 800b63c:	40013400 	.word	0x40013400
 800b640:	40000400 	.word	0x40000400
 800b644:	40000800 	.word	0x40000800
 800b648:	40000c00 	.word	0x40000c00

0800b64c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	bc80      	pop	{r7}
 800b65c:	4770      	bx	lr

0800b65e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bc80      	pop	{r7}
 800b66e:	4770      	bx	lr

0800b670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e042      	b.n	800b708 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7fc fe1a 	bl	80082d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2224      	movs	r2, #36	; 0x24
 800b6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68da      	ldr	r2, [r3, #12]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fcb5 	bl	800c024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	695a      	ldr	r2, [r3, #20]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b6d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68da      	ldr	r2, [r3, #12]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2220      	movs	r2, #32
 800b6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	4613      	mov	r3, r2
 800b71c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b20      	cmp	r3, #32
 800b728:	d121      	bne.n	800b76e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <HAL_UART_Transmit_IT+0x26>
 800b730:	88fb      	ldrh	r3, [r7, #6]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e01a      	b.n	800b770 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	88fa      	ldrh	r2, [r7, #6]
 800b74a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2221      	movs	r2, #33	; 0x21
 800b756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b768:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e000      	b.n	800b770 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b76e:	2302      	movs	r3, #2
  }
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	bc80      	pop	{r7}
 800b778:	4770      	bx	lr
	...

0800b77c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b0ba      	sub	sp, #232	; 0xe8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b2:	f003 030f 	and.w	r3, r3, #15
 800b7b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b7ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10f      	bne.n	800b7e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c6:	f003 0320 	and.w	r3, r3, #32
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <HAL_UART_IRQHandler+0x66>
 800b7ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fb63 	bl	800bea6 <UART_Receive_IT>
      return;
 800b7e0:	e25b      	b.n	800bc9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b7e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 80de 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x22c>
 800b7ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d106      	bne.n	800b806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 80d1 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00b      	beq.n	800b82a <HAL_UART_IRQHandler+0xae>
 800b812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b822:	f043 0201 	orr.w	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00b      	beq.n	800b84e <HAL_UART_IRQHandler+0xd2>
 800b836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b846:	f043 0202 	orr.w	r2, r3, #2
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00b      	beq.n	800b872 <HAL_UART_IRQHandler+0xf6>
 800b85a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	2b00      	cmp	r3, #0
 800b864:	d005      	beq.n	800b872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86a:	f043 0204 	orr.w	r2, r3, #4
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b876:	f003 0308 	and.w	r3, r3, #8
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d011      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x126>
 800b87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	d105      	bne.n	800b896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b88a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89a:	f043 0208 	orr.w	r2, r3, #8
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 81f2 	beq.w	800bc90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b0:	f003 0320 	and.w	r3, r3, #32
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d008      	beq.n	800b8ca <HAL_UART_IRQHandler+0x14e>
 800b8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8bc:	f003 0320 	and.w	r3, r3, #32
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 faee 	bl	800bea6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	bf14      	ite	ne
 800b8d8:	2301      	movne	r3, #1
 800b8da:	2300      	moveq	r3, #0
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e6:	f003 0308 	and.w	r3, r3, #8
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d103      	bne.n	800b8f6 <HAL_UART_IRQHandler+0x17a>
 800b8ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d04f      	beq.n	800b996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f9f8 	bl	800bcec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	d041      	beq.n	800b98e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3314      	adds	r3, #20
 800b910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b918:	e853 3f00 	ldrex	r3, [r3]
 800b91c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3314      	adds	r3, #20
 800b932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b93a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b94e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1d9      	bne.n	800b90a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d013      	beq.n	800b986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b962:	4a7e      	ldr	r2, [pc, #504]	; (800bb5c <HAL_UART_IRQHandler+0x3e0>)
 800b964:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fd f86c 	bl	8008a48 <HAL_DMA_Abort_IT>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d016      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b980:	4610      	mov	r0, r2
 800b982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b984:	e00e      	b.n	800b9a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f99c 	bl	800bcc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b98c:	e00a      	b.n	800b9a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f998 	bl	800bcc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b994:	e006      	b.n	800b9a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f994 	bl	800bcc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b9a2:	e175      	b.n	800bc90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a4:	bf00      	nop
    return;
 800b9a6:	e173      	b.n	800bc90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	f040 814f 	bne.w	800bc50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b6:	f003 0310 	and.w	r3, r3, #16
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 8148 	beq.w	800bc50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b9c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c4:	f003 0310 	and.w	r3, r3, #16
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 8141 	beq.w	800bc50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60bb      	str	r3, [r7, #8]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60bb      	str	r3, [r7, #8]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	60bb      	str	r3, [r7, #8]
 800b9e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80b6 	beq.w	800bb60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 8145 	beq.w	800bc94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba12:	429a      	cmp	r2, r3
 800ba14:	f080 813e 	bcs.w	800bc94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	f000 8088 	beq.w	800bb3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330c      	adds	r3, #12
 800ba32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	330c      	adds	r3, #12
 800ba54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1d9      	bne.n	800ba2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3314      	adds	r3, #20
 800ba7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba82:	e853 3f00 	ldrex	r3, [r3]
 800ba86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba8a:	f023 0301 	bic.w	r3, r3, #1
 800ba8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3314      	adds	r3, #20
 800ba98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800baa0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800baa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800baae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e1      	bne.n	800ba78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	3314      	adds	r3, #20
 800baba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800babe:	e853 3f00 	ldrex	r3, [r3]
 800bac2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3314      	adds	r3, #20
 800bad4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bad8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bada:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e3      	bne.n	800bab4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	330c      	adds	r3, #12
 800bb00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0c:	f023 0310 	bic.w	r3, r3, #16
 800bb10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	330c      	adds	r3, #12
 800bb1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb1e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e3      	bne.n	800bafa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fc ff4b 	bl	80089d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f8bf 	bl	800bcd6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb58:	e09c      	b.n	800bc94 <HAL_UART_IRQHandler+0x518>
 800bb5a:	bf00      	nop
 800bb5c:	0800bdb1 	.word	0x0800bdb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f000 808e 	beq.w	800bc98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bb7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 8089 	beq.w	800bc98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	330c      	adds	r3, #12
 800bb8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	e853 3f00 	ldrex	r3, [r3]
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	330c      	adds	r3, #12
 800bba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbaa:	647a      	str	r2, [r7, #68]	; 0x44
 800bbac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e3      	bne.n	800bb86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3314      	adds	r3, #20
 800bbc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	623b      	str	r3, [r7, #32]
   return(result);
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	f023 0301 	bic.w	r3, r3, #1
 800bbd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3314      	adds	r3, #20
 800bbde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbe2:	633a      	str	r2, [r7, #48]	; 0x30
 800bbe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e3      	bne.n	800bbbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2220      	movs	r2, #32
 800bbfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	330c      	adds	r3, #12
 800bc0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	e853 3f00 	ldrex	r3, [r3]
 800bc12:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 0310 	bic.w	r3, r3, #16
 800bc1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	330c      	adds	r3, #12
 800bc24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc28:	61fa      	str	r2, [r7, #28]
 800bc2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	69b9      	ldr	r1, [r7, #24]
 800bc2e:	69fa      	ldr	r2, [r7, #28]
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	617b      	str	r3, [r7, #20]
   return(result);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e3      	bne.n	800bc04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f844 	bl	800bcd6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc4e:	e023      	b.n	800bc98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d009      	beq.n	800bc70 <HAL_UART_IRQHandler+0x4f4>
 800bc5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f8b5 	bl	800bdd8 <UART_Transmit_IT>
    return;
 800bc6e:	e014      	b.n	800bc9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00e      	beq.n	800bc9a <HAL_UART_IRQHandler+0x51e>
 800bc7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d008      	beq.n	800bc9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f8f4 	bl	800be76 <UART_EndTransmit_IT>
    return;
 800bc8e:	e004      	b.n	800bc9a <HAL_UART_IRQHandler+0x51e>
    return;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <HAL_UART_IRQHandler+0x51e>
      return;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <HAL_UART_IRQHandler+0x51e>
      return;
 800bc98:	bf00      	nop
  }
}
 800bc9a:	37e8      	adds	r7, #232	; 0xe8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bc80      	pop	{r7}
 800bcb0:	4770      	bx	lr

0800bcb2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bc80      	pop	{r7}
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bc80      	pop	{r7}
 800bcd4:	4770      	bx	lr

0800bcd6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b083      	sub	sp, #12
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	460b      	mov	r3, r1
 800bce0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bce2:	bf00      	nop
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bc80      	pop	{r7}
 800bcea:	4770      	bx	lr

0800bcec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b095      	sub	sp, #84	; 0x54
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	330c      	adds	r3, #12
 800bcfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	330c      	adds	r3, #12
 800bd12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd14:	643a      	str	r2, [r7, #64]	; 0x40
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd1c:	e841 2300 	strex	r3, r2, [r1]
 800bd20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e5      	bne.n	800bcf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3314      	adds	r3, #20
 800bd2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	6a3b      	ldr	r3, [r7, #32]
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	f023 0301 	bic.w	r3, r3, #1
 800bd3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3314      	adds	r3, #20
 800bd46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd48:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e5      	bne.n	800bd28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d119      	bne.n	800bd98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	330c      	adds	r3, #12
 800bd6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	e853 3f00 	ldrex	r3, [r3]
 800bd72:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f023 0310 	bic.w	r3, r3, #16
 800bd7a:	647b      	str	r3, [r7, #68]	; 0x44
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	330c      	adds	r3, #12
 800bd82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd84:	61ba      	str	r2, [r7, #24]
 800bd86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6979      	ldr	r1, [r7, #20]
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	613b      	str	r3, [r7, #16]
   return(result);
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e5      	bne.n	800bd64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bda6:	bf00      	nop
 800bda8:	3754      	adds	r7, #84	; 0x54
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bc80      	pop	{r7}
 800bdae:	4770      	bx	lr

0800bdb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f7ff ff7a 	bl	800bcc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdd0:	bf00      	nop
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b21      	cmp	r3, #33	; 0x21
 800bdea:	d13e      	bne.n	800be6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf4:	d114      	bne.n	800be20 <UART_Transmit_IT+0x48>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d110      	bne.n	800be20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	461a      	mov	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	1c9a      	adds	r2, r3, #2
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	621a      	str	r2, [r3, #32]
 800be1e:	e008      	b.n	800be32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	1c59      	adds	r1, r3, #1
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	6211      	str	r1, [r2, #32]
 800be2a:	781a      	ldrb	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be36:	b29b      	uxth	r3, r3
 800be38:	3b01      	subs	r3, #1
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4619      	mov	r1, r3
 800be40:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10f      	bne.n	800be66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68da      	ldr	r2, [r3, #12]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	e000      	b.n	800be6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be6a:	2302      	movs	r3, #2
  }
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	bc80      	pop	{r7}
 800be74:	4770      	bx	lr

0800be76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2220      	movs	r2, #32
 800be92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff ff02 	bl	800bca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b08c      	sub	sp, #48	; 0x30
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b22      	cmp	r3, #34	; 0x22
 800beb8:	f040 80ae 	bne.w	800c018 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec4:	d117      	bne.n	800bef6 <UART_Receive_IT+0x50>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d113      	bne.n	800bef6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beee:	1c9a      	adds	r2, r3, #2
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	629a      	str	r2, [r3, #40]	; 0x28
 800bef4:	e026      	b.n	800bf44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800befc:	2300      	movs	r3, #0
 800befe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf08:	d007      	beq.n	800bf1a <UART_Receive_IT+0x74>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10a      	bne.n	800bf28 <UART_Receive_IT+0x82>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e008      	b.n	800bf3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	4619      	mov	r1, r3
 800bf52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d15d      	bne.n	800c014 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68da      	ldr	r2, [r3, #12]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f022 0220 	bic.w	r2, r2, #32
 800bf66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	695a      	ldr	r2, [r3, #20]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f022 0201 	bic.w	r2, r2, #1
 800bf86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d135      	bne.n	800c00a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f023 0310 	bic.w	r3, r3, #16
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	330c      	adds	r3, #12
 800bfc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc4:	623a      	str	r2, [r7, #32]
 800bfc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	69f9      	ldr	r1, [r7, #28]
 800bfca:	6a3a      	ldr	r2, [r7, #32]
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e5      	bne.n	800bfa4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 0310 	and.w	r3, r3, #16
 800bfe2:	2b10      	cmp	r3, #16
 800bfe4:	d10a      	bne.n	800bffc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	60fb      	str	r3, [r7, #12]
 800bffa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fe67 	bl	800bcd6 <HAL_UARTEx_RxEventCallback>
 800c008:	e002      	b.n	800c010 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff fe51 	bl	800bcb2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	e002      	b.n	800c01a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	e000      	b.n	800c01a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c018:	2302      	movs	r3, #2
  }
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3730      	adds	r7, #48	; 0x30
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689a      	ldr	r2, [r3, #8]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	431a      	orrs	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	4313      	orrs	r3, r2
 800c052:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c05e:	f023 030c 	bic.w	r3, r3, #12
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	6812      	ldr	r2, [r2, #0]
 800c066:	68b9      	ldr	r1, [r7, #8]
 800c068:	430b      	orrs	r3, r1
 800c06a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	699a      	ldr	r2, [r3, #24]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	430a      	orrs	r2, r1
 800c080:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a2c      	ldr	r2, [pc, #176]	; (800c138 <UART_SetConfig+0x114>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d103      	bne.n	800c094 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c08c:	f7fe fe8c 	bl	800ada8 <HAL_RCC_GetPCLK2Freq>
 800c090:	60f8      	str	r0, [r7, #12]
 800c092:	e002      	b.n	800c09a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c094:	f7fe fe74 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 800c098:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009a      	lsls	r2, r3, #2
 800c0a4:	441a      	add	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b0:	4a22      	ldr	r2, [pc, #136]	; (800c13c <UART_SetConfig+0x118>)
 800c0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b6:	095b      	lsrs	r3, r3, #5
 800c0b8:	0119      	lsls	r1, r3, #4
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009a      	lsls	r2, r3, #2
 800c0c4:	441a      	add	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0d0:	4b1a      	ldr	r3, [pc, #104]	; (800c13c <UART_SetConfig+0x118>)
 800c0d2:	fba3 0302 	umull	r0, r3, r3, r2
 800c0d6:	095b      	lsrs	r3, r3, #5
 800c0d8:	2064      	movs	r0, #100	; 0x64
 800c0da:	fb00 f303 	mul.w	r3, r0, r3
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	3332      	adds	r3, #50	; 0x32
 800c0e4:	4a15      	ldr	r2, [pc, #84]	; (800c13c <UART_SetConfig+0x118>)
 800c0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ea:	095b      	lsrs	r3, r3, #5
 800c0ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0f0:	4419      	add	r1, r3
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009a      	lsls	r2, r3, #2
 800c0fc:	441a      	add	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	fbb2 f2f3 	udiv	r2, r2, r3
 800c108:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <UART_SetConfig+0x118>)
 800c10a:	fba3 0302 	umull	r0, r3, r3, r2
 800c10e:	095b      	lsrs	r3, r3, #5
 800c110:	2064      	movs	r0, #100	; 0x64
 800c112:	fb00 f303 	mul.w	r3, r0, r3
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	011b      	lsls	r3, r3, #4
 800c11a:	3332      	adds	r3, #50	; 0x32
 800c11c:	4a07      	ldr	r2, [pc, #28]	; (800c13c <UART_SetConfig+0x118>)
 800c11e:	fba2 2303 	umull	r2, r3, r2, r3
 800c122:	095b      	lsrs	r3, r3, #5
 800c124:	f003 020f 	and.w	r2, r3, #15
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	440a      	add	r2, r1
 800c12e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c130:	bf00      	nop
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	40013800 	.word	0x40013800
 800c13c:	51eb851f 	.word	0x51eb851f

0800c140 <__itoa>:
 800c140:	1e93      	subs	r3, r2, #2
 800c142:	2b22      	cmp	r3, #34	; 0x22
 800c144:	b510      	push	{r4, lr}
 800c146:	460c      	mov	r4, r1
 800c148:	d904      	bls.n	800c154 <__itoa+0x14>
 800c14a:	2300      	movs	r3, #0
 800c14c:	461c      	mov	r4, r3
 800c14e:	700b      	strb	r3, [r1, #0]
 800c150:	4620      	mov	r0, r4
 800c152:	bd10      	pop	{r4, pc}
 800c154:	2a0a      	cmp	r2, #10
 800c156:	d109      	bne.n	800c16c <__itoa+0x2c>
 800c158:	2800      	cmp	r0, #0
 800c15a:	da07      	bge.n	800c16c <__itoa+0x2c>
 800c15c:	232d      	movs	r3, #45	; 0x2d
 800c15e:	700b      	strb	r3, [r1, #0]
 800c160:	2101      	movs	r1, #1
 800c162:	4240      	negs	r0, r0
 800c164:	4421      	add	r1, r4
 800c166:	f000 f90d 	bl	800c384 <__utoa>
 800c16a:	e7f1      	b.n	800c150 <__itoa+0x10>
 800c16c:	2100      	movs	r1, #0
 800c16e:	e7f9      	b.n	800c164 <__itoa+0x24>

0800c170 <itoa>:
 800c170:	f7ff bfe6 	b.w	800c140 <__itoa>

0800c174 <malloc>:
 800c174:	4b02      	ldr	r3, [pc, #8]	; (800c180 <malloc+0xc>)
 800c176:	4601      	mov	r1, r0
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f000 b823 	b.w	800c1c4 <_malloc_r>
 800c17e:	bf00      	nop
 800c180:	20000100 	.word	0x20000100

0800c184 <sbrk_aligned>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	4e0e      	ldr	r6, [pc, #56]	; (800c1c0 <sbrk_aligned+0x3c>)
 800c188:	460c      	mov	r4, r1
 800c18a:	6831      	ldr	r1, [r6, #0]
 800c18c:	4605      	mov	r5, r0
 800c18e:	b911      	cbnz	r1, 800c196 <sbrk_aligned+0x12>
 800c190:	f000 f952 	bl	800c438 <_sbrk_r>
 800c194:	6030      	str	r0, [r6, #0]
 800c196:	4621      	mov	r1, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	f000 f94d 	bl	800c438 <_sbrk_r>
 800c19e:	1c43      	adds	r3, r0, #1
 800c1a0:	d00a      	beq.n	800c1b8 <sbrk_aligned+0x34>
 800c1a2:	1cc4      	adds	r4, r0, #3
 800c1a4:	f024 0403 	bic.w	r4, r4, #3
 800c1a8:	42a0      	cmp	r0, r4
 800c1aa:	d007      	beq.n	800c1bc <sbrk_aligned+0x38>
 800c1ac:	1a21      	subs	r1, r4, r0
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f000 f942 	bl	800c438 <_sbrk_r>
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d101      	bne.n	800c1bc <sbrk_aligned+0x38>
 800c1b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c1bc:	4620      	mov	r0, r4
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	20000374 	.word	0x20000374

0800c1c4 <_malloc_r>:
 800c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	1ccd      	adds	r5, r1, #3
 800c1ca:	f025 0503 	bic.w	r5, r5, #3
 800c1ce:	3508      	adds	r5, #8
 800c1d0:	2d0c      	cmp	r5, #12
 800c1d2:	bf38      	it	cc
 800c1d4:	250c      	movcc	r5, #12
 800c1d6:	2d00      	cmp	r5, #0
 800c1d8:	4607      	mov	r7, r0
 800c1da:	db01      	blt.n	800c1e0 <_malloc_r+0x1c>
 800c1dc:	42a9      	cmp	r1, r5
 800c1de:	d905      	bls.n	800c1ec <_malloc_r+0x28>
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	2600      	movs	r6, #0
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c2c0 <_malloc_r+0xfc>
 800c1f0:	f000 f89c 	bl	800c32c <__malloc_lock>
 800c1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1f8:	461c      	mov	r4, r3
 800c1fa:	bb5c      	cbnz	r4, 800c254 <_malloc_r+0x90>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7ff ffc0 	bl	800c184 <sbrk_aligned>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	4604      	mov	r4, r0
 800c208:	d155      	bne.n	800c2b6 <_malloc_r+0xf2>
 800c20a:	f8d8 4000 	ldr.w	r4, [r8]
 800c20e:	4626      	mov	r6, r4
 800c210:	2e00      	cmp	r6, #0
 800c212:	d145      	bne.n	800c2a0 <_malloc_r+0xdc>
 800c214:	2c00      	cmp	r4, #0
 800c216:	d048      	beq.n	800c2aa <_malloc_r+0xe6>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	4631      	mov	r1, r6
 800c21c:	4638      	mov	r0, r7
 800c21e:	eb04 0903 	add.w	r9, r4, r3
 800c222:	f000 f909 	bl	800c438 <_sbrk_r>
 800c226:	4581      	cmp	r9, r0
 800c228:	d13f      	bne.n	800c2aa <_malloc_r+0xe6>
 800c22a:	6821      	ldr	r1, [r4, #0]
 800c22c:	4638      	mov	r0, r7
 800c22e:	1a6d      	subs	r5, r5, r1
 800c230:	4629      	mov	r1, r5
 800c232:	f7ff ffa7 	bl	800c184 <sbrk_aligned>
 800c236:	3001      	adds	r0, #1
 800c238:	d037      	beq.n	800c2aa <_malloc_r+0xe6>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	442b      	add	r3, r5
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	f8d8 3000 	ldr.w	r3, [r8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d038      	beq.n	800c2ba <_malloc_r+0xf6>
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	42a2      	cmp	r2, r4
 800c24c:	d12b      	bne.n	800c2a6 <_malloc_r+0xe2>
 800c24e:	2200      	movs	r2, #0
 800c250:	605a      	str	r2, [r3, #4]
 800c252:	e00f      	b.n	800c274 <_malloc_r+0xb0>
 800c254:	6822      	ldr	r2, [r4, #0]
 800c256:	1b52      	subs	r2, r2, r5
 800c258:	d41f      	bmi.n	800c29a <_malloc_r+0xd6>
 800c25a:	2a0b      	cmp	r2, #11
 800c25c:	d917      	bls.n	800c28e <_malloc_r+0xca>
 800c25e:	1961      	adds	r1, r4, r5
 800c260:	42a3      	cmp	r3, r4
 800c262:	6025      	str	r5, [r4, #0]
 800c264:	bf18      	it	ne
 800c266:	6059      	strne	r1, [r3, #4]
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	bf08      	it	eq
 800c26c:	f8c8 1000 	streq.w	r1, [r8]
 800c270:	5162      	str	r2, [r4, r5]
 800c272:	604b      	str	r3, [r1, #4]
 800c274:	4638      	mov	r0, r7
 800c276:	f104 060b 	add.w	r6, r4, #11
 800c27a:	f000 f85d 	bl	800c338 <__malloc_unlock>
 800c27e:	f026 0607 	bic.w	r6, r6, #7
 800c282:	1d23      	adds	r3, r4, #4
 800c284:	1af2      	subs	r2, r6, r3
 800c286:	d0ae      	beq.n	800c1e6 <_malloc_r+0x22>
 800c288:	1b9b      	subs	r3, r3, r6
 800c28a:	50a3      	str	r3, [r4, r2]
 800c28c:	e7ab      	b.n	800c1e6 <_malloc_r+0x22>
 800c28e:	42a3      	cmp	r3, r4
 800c290:	6862      	ldr	r2, [r4, #4]
 800c292:	d1dd      	bne.n	800c250 <_malloc_r+0x8c>
 800c294:	f8c8 2000 	str.w	r2, [r8]
 800c298:	e7ec      	b.n	800c274 <_malloc_r+0xb0>
 800c29a:	4623      	mov	r3, r4
 800c29c:	6864      	ldr	r4, [r4, #4]
 800c29e:	e7ac      	b.n	800c1fa <_malloc_r+0x36>
 800c2a0:	4634      	mov	r4, r6
 800c2a2:	6876      	ldr	r6, [r6, #4]
 800c2a4:	e7b4      	b.n	800c210 <_malloc_r+0x4c>
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	e7cc      	b.n	800c244 <_malloc_r+0x80>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	f000 f842 	bl	800c338 <__malloc_unlock>
 800c2b4:	e797      	b.n	800c1e6 <_malloc_r+0x22>
 800c2b6:	6025      	str	r5, [r4, #0]
 800c2b8:	e7dc      	b.n	800c274 <_malloc_r+0xb0>
 800c2ba:	605b      	str	r3, [r3, #4]
 800c2bc:	deff      	udf	#255	; 0xff
 800c2be:	bf00      	nop
 800c2c0:	20000370 	.word	0x20000370

0800c2c4 <sniprintf>:
 800c2c4:	b40c      	push	{r2, r3}
 800c2c6:	b530      	push	{r4, r5, lr}
 800c2c8:	4b17      	ldr	r3, [pc, #92]	; (800c328 <sniprintf+0x64>)
 800c2ca:	1e0c      	subs	r4, r1, #0
 800c2cc:	681d      	ldr	r5, [r3, #0]
 800c2ce:	b09d      	sub	sp, #116	; 0x74
 800c2d0:	da08      	bge.n	800c2e4 <sniprintf+0x20>
 800c2d2:	238b      	movs	r3, #139	; 0x8b
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	b01d      	add	sp, #116	; 0x74
 800c2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2e0:	b002      	add	sp, #8
 800c2e2:	4770      	bx	lr
 800c2e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c2e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c2ec:	bf0c      	ite	eq
 800c2ee:	4623      	moveq	r3, r4
 800c2f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	9307      	str	r3, [sp, #28]
 800c2f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2fc:	9002      	str	r0, [sp, #8]
 800c2fe:	9006      	str	r0, [sp, #24]
 800c300:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c304:	4628      	mov	r0, r5
 800c306:	ab21      	add	r3, sp, #132	; 0x84
 800c308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c30a:	a902      	add	r1, sp, #8
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	f000 f987 	bl	800c620 <_svfiprintf_r>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	bfbc      	itt	lt
 800c316:	238b      	movlt	r3, #139	; 0x8b
 800c318:	602b      	strlt	r3, [r5, #0]
 800c31a:	2c00      	cmp	r4, #0
 800c31c:	d0dd      	beq.n	800c2da <sniprintf+0x16>
 800c31e:	2200      	movs	r2, #0
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	701a      	strb	r2, [r3, #0]
 800c324:	e7d9      	b.n	800c2da <sniprintf+0x16>
 800c326:	bf00      	nop
 800c328:	20000100 	.word	0x20000100

0800c32c <__malloc_lock>:
 800c32c:	4801      	ldr	r0, [pc, #4]	; (800c334 <__malloc_lock+0x8>)
 800c32e:	f000 b8bd 	b.w	800c4ac <__retarget_lock_acquire_recursive>
 800c332:	bf00      	nop
 800c334:	200004b0 	.word	0x200004b0

0800c338 <__malloc_unlock>:
 800c338:	4801      	ldr	r0, [pc, #4]	; (800c340 <__malloc_unlock+0x8>)
 800c33a:	f000 b8b8 	b.w	800c4ae <__retarget_lock_release_recursive>
 800c33e:	bf00      	nop
 800c340:	200004b0 	.word	0x200004b0

0800c344 <siprintf>:
 800c344:	b40e      	push	{r1, r2, r3}
 800c346:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c34a:	b500      	push	{lr}
 800c34c:	b09c      	sub	sp, #112	; 0x70
 800c34e:	ab1d      	add	r3, sp, #116	; 0x74
 800c350:	9002      	str	r0, [sp, #8]
 800c352:	9006      	str	r0, [sp, #24]
 800c354:	9107      	str	r1, [sp, #28]
 800c356:	9104      	str	r1, [sp, #16]
 800c358:	4808      	ldr	r0, [pc, #32]	; (800c37c <siprintf+0x38>)
 800c35a:	4909      	ldr	r1, [pc, #36]	; (800c380 <siprintf+0x3c>)
 800c35c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c360:	9105      	str	r1, [sp, #20]
 800c362:	6800      	ldr	r0, [r0, #0]
 800c364:	a902      	add	r1, sp, #8
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f000 f95a 	bl	800c620 <_svfiprintf_r>
 800c36c:	2200      	movs	r2, #0
 800c36e:	9b02      	ldr	r3, [sp, #8]
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	b01c      	add	sp, #112	; 0x70
 800c374:	f85d eb04 	ldr.w	lr, [sp], #4
 800c378:	b003      	add	sp, #12
 800c37a:	4770      	bx	lr
 800c37c:	20000100 	.word	0x20000100
 800c380:	ffff0208 	.word	0xffff0208

0800c384 <__utoa>:
 800c384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c386:	b08b      	sub	sp, #44	; 0x2c
 800c388:	4605      	mov	r5, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	466e      	mov	r6, sp
 800c38e:	4c1d      	ldr	r4, [pc, #116]	; (800c404 <__utoa+0x80>)
 800c390:	f104 0c20 	add.w	ip, r4, #32
 800c394:	4637      	mov	r7, r6
 800c396:	6820      	ldr	r0, [r4, #0]
 800c398:	6861      	ldr	r1, [r4, #4]
 800c39a:	3408      	adds	r4, #8
 800c39c:	c703      	stmia	r7!, {r0, r1}
 800c39e:	4564      	cmp	r4, ip
 800c3a0:	463e      	mov	r6, r7
 800c3a2:	d1f7      	bne.n	800c394 <__utoa+0x10>
 800c3a4:	7921      	ldrb	r1, [r4, #4]
 800c3a6:	6820      	ldr	r0, [r4, #0]
 800c3a8:	7139      	strb	r1, [r7, #4]
 800c3aa:	1e91      	subs	r1, r2, #2
 800c3ac:	2922      	cmp	r1, #34	; 0x22
 800c3ae:	6038      	str	r0, [r7, #0]
 800c3b0:	f04f 0100 	mov.w	r1, #0
 800c3b4:	d904      	bls.n	800c3c0 <__utoa+0x3c>
 800c3b6:	7019      	strb	r1, [r3, #0]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	b00b      	add	sp, #44	; 0x2c
 800c3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c0:	1e58      	subs	r0, r3, #1
 800c3c2:	4684      	mov	ip, r0
 800c3c4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c3c8:	fb02 5617 	mls	r6, r2, r7, r5
 800c3cc:	3628      	adds	r6, #40	; 0x28
 800c3ce:	446e      	add	r6, sp
 800c3d0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c3da:	462e      	mov	r6, r5
 800c3dc:	42b2      	cmp	r2, r6
 800c3de:	463d      	mov	r5, r7
 800c3e0:	f101 0101 	add.w	r1, r1, #1
 800c3e4:	d9ee      	bls.n	800c3c4 <__utoa+0x40>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	545a      	strb	r2, [r3, r1]
 800c3ea:	1919      	adds	r1, r3, r4
 800c3ec:	1aa5      	subs	r5, r4, r2
 800c3ee:	42aa      	cmp	r2, r5
 800c3f0:	dae3      	bge.n	800c3ba <__utoa+0x36>
 800c3f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c3f6:	780e      	ldrb	r6, [r1, #0]
 800c3f8:	3201      	adds	r2, #1
 800c3fa:	7006      	strb	r6, [r0, #0]
 800c3fc:	f801 5901 	strb.w	r5, [r1], #-1
 800c400:	e7f4      	b.n	800c3ec <__utoa+0x68>
 800c402:	bf00      	nop
 800c404:	0800db9e 	.word	0x0800db9e

0800c408 <strcat>:
 800c408:	4602      	mov	r2, r0
 800c40a:	b510      	push	{r4, lr}
 800c40c:	7814      	ldrb	r4, [r2, #0]
 800c40e:	4613      	mov	r3, r2
 800c410:	3201      	adds	r2, #1
 800c412:	2c00      	cmp	r4, #0
 800c414:	d1fa      	bne.n	800c40c <strcat+0x4>
 800c416:	3b01      	subs	r3, #1
 800c418:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c41c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c420:	2a00      	cmp	r2, #0
 800c422:	d1f9      	bne.n	800c418 <strcat+0x10>
 800c424:	bd10      	pop	{r4, pc}

0800c426 <memset>:
 800c426:	4603      	mov	r3, r0
 800c428:	4402      	add	r2, r0
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d100      	bne.n	800c430 <memset+0xa>
 800c42e:	4770      	bx	lr
 800c430:	f803 1b01 	strb.w	r1, [r3], #1
 800c434:	e7f9      	b.n	800c42a <memset+0x4>
	...

0800c438 <_sbrk_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	2300      	movs	r3, #0
 800c43c:	4d05      	ldr	r5, [pc, #20]	; (800c454 <_sbrk_r+0x1c>)
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7fb ffd4 	bl	80083f0 <_sbrk>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_sbrk_r+0x1a>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_sbrk_r+0x1a>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	200004b4 	.word	0x200004b4

0800c458 <__errno>:
 800c458:	4b01      	ldr	r3, [pc, #4]	; (800c460 <__errno+0x8>)
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	20000100 	.word	0x20000100

0800c464 <__libc_init_array>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	2600      	movs	r6, #0
 800c468:	4d0c      	ldr	r5, [pc, #48]	; (800c49c <__libc_init_array+0x38>)
 800c46a:	4c0d      	ldr	r4, [pc, #52]	; (800c4a0 <__libc_init_array+0x3c>)
 800c46c:	1b64      	subs	r4, r4, r5
 800c46e:	10a4      	asrs	r4, r4, #2
 800c470:	42a6      	cmp	r6, r4
 800c472:	d109      	bne.n	800c488 <__libc_init_array+0x24>
 800c474:	f000 fbc6 	bl	800cc04 <_init>
 800c478:	2600      	movs	r6, #0
 800c47a:	4d0a      	ldr	r5, [pc, #40]	; (800c4a4 <__libc_init_array+0x40>)
 800c47c:	4c0a      	ldr	r4, [pc, #40]	; (800c4a8 <__libc_init_array+0x44>)
 800c47e:	1b64      	subs	r4, r4, r5
 800c480:	10a4      	asrs	r4, r4, #2
 800c482:	42a6      	cmp	r6, r4
 800c484:	d105      	bne.n	800c492 <__libc_init_array+0x2e>
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	f855 3b04 	ldr.w	r3, [r5], #4
 800c48c:	4798      	blx	r3
 800c48e:	3601      	adds	r6, #1
 800c490:	e7ee      	b.n	800c470 <__libc_init_array+0xc>
 800c492:	f855 3b04 	ldr.w	r3, [r5], #4
 800c496:	4798      	blx	r3
 800c498:	3601      	adds	r6, #1
 800c49a:	e7f2      	b.n	800c482 <__libc_init_array+0x1e>
 800c49c:	0800dbf8 	.word	0x0800dbf8
 800c4a0:	0800dbf8 	.word	0x0800dbf8
 800c4a4:	0800dbf8 	.word	0x0800dbf8
 800c4a8:	0800dbfc 	.word	0x0800dbfc

0800c4ac <__retarget_lock_acquire_recursive>:
 800c4ac:	4770      	bx	lr

0800c4ae <__retarget_lock_release_recursive>:
 800c4ae:	4770      	bx	lr

0800c4b0 <memcpy>:
 800c4b0:	440a      	add	r2, r1
 800c4b2:	4291      	cmp	r1, r2
 800c4b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c4b8:	d100      	bne.n	800c4bc <memcpy+0xc>
 800c4ba:	4770      	bx	lr
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4c2:	4291      	cmp	r1, r2
 800c4c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4c8:	d1f9      	bne.n	800c4be <memcpy+0xe>
 800c4ca:	bd10      	pop	{r4, pc}

0800c4cc <strcpy>:
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4d2:	f803 2b01 	strb.w	r2, [r3], #1
 800c4d6:	2a00      	cmp	r2, #0
 800c4d8:	d1f9      	bne.n	800c4ce <strcpy+0x2>
 800c4da:	4770      	bx	lr

0800c4dc <_free_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4605      	mov	r5, r0
 800c4e0:	2900      	cmp	r1, #0
 800c4e2:	d040      	beq.n	800c566 <_free_r+0x8a>
 800c4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4e8:	1f0c      	subs	r4, r1, #4
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	bfb8      	it	lt
 800c4ee:	18e4      	addlt	r4, r4, r3
 800c4f0:	f7ff ff1c 	bl	800c32c <__malloc_lock>
 800c4f4:	4a1c      	ldr	r2, [pc, #112]	; (800c568 <_free_r+0x8c>)
 800c4f6:	6813      	ldr	r3, [r2, #0]
 800c4f8:	b933      	cbnz	r3, 800c508 <_free_r+0x2c>
 800c4fa:	6063      	str	r3, [r4, #4]
 800c4fc:	6014      	str	r4, [r2, #0]
 800c4fe:	4628      	mov	r0, r5
 800c500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c504:	f7ff bf18 	b.w	800c338 <__malloc_unlock>
 800c508:	42a3      	cmp	r3, r4
 800c50a:	d908      	bls.n	800c51e <_free_r+0x42>
 800c50c:	6820      	ldr	r0, [r4, #0]
 800c50e:	1821      	adds	r1, r4, r0
 800c510:	428b      	cmp	r3, r1
 800c512:	bf01      	itttt	eq
 800c514:	6819      	ldreq	r1, [r3, #0]
 800c516:	685b      	ldreq	r3, [r3, #4]
 800c518:	1809      	addeq	r1, r1, r0
 800c51a:	6021      	streq	r1, [r4, #0]
 800c51c:	e7ed      	b.n	800c4fa <_free_r+0x1e>
 800c51e:	461a      	mov	r2, r3
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	b10b      	cbz	r3, 800c528 <_free_r+0x4c>
 800c524:	42a3      	cmp	r3, r4
 800c526:	d9fa      	bls.n	800c51e <_free_r+0x42>
 800c528:	6811      	ldr	r1, [r2, #0]
 800c52a:	1850      	adds	r0, r2, r1
 800c52c:	42a0      	cmp	r0, r4
 800c52e:	d10b      	bne.n	800c548 <_free_r+0x6c>
 800c530:	6820      	ldr	r0, [r4, #0]
 800c532:	4401      	add	r1, r0
 800c534:	1850      	adds	r0, r2, r1
 800c536:	4283      	cmp	r3, r0
 800c538:	6011      	str	r1, [r2, #0]
 800c53a:	d1e0      	bne.n	800c4fe <_free_r+0x22>
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	4408      	add	r0, r1
 800c542:	6010      	str	r0, [r2, #0]
 800c544:	6053      	str	r3, [r2, #4]
 800c546:	e7da      	b.n	800c4fe <_free_r+0x22>
 800c548:	d902      	bls.n	800c550 <_free_r+0x74>
 800c54a:	230c      	movs	r3, #12
 800c54c:	602b      	str	r3, [r5, #0]
 800c54e:	e7d6      	b.n	800c4fe <_free_r+0x22>
 800c550:	6820      	ldr	r0, [r4, #0]
 800c552:	1821      	adds	r1, r4, r0
 800c554:	428b      	cmp	r3, r1
 800c556:	bf01      	itttt	eq
 800c558:	6819      	ldreq	r1, [r3, #0]
 800c55a:	685b      	ldreq	r3, [r3, #4]
 800c55c:	1809      	addeq	r1, r1, r0
 800c55e:	6021      	streq	r1, [r4, #0]
 800c560:	6063      	str	r3, [r4, #4]
 800c562:	6054      	str	r4, [r2, #4]
 800c564:	e7cb      	b.n	800c4fe <_free_r+0x22>
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	20000370 	.word	0x20000370

0800c56c <__ssputs_r>:
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	461f      	mov	r7, r3
 800c572:	688e      	ldr	r6, [r1, #8]
 800c574:	4682      	mov	sl, r0
 800c576:	42be      	cmp	r6, r7
 800c578:	460c      	mov	r4, r1
 800c57a:	4690      	mov	r8, r2
 800c57c:	680b      	ldr	r3, [r1, #0]
 800c57e:	d82c      	bhi.n	800c5da <__ssputs_r+0x6e>
 800c580:	898a      	ldrh	r2, [r1, #12]
 800c582:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c586:	d026      	beq.n	800c5d6 <__ssputs_r+0x6a>
 800c588:	6965      	ldr	r5, [r4, #20]
 800c58a:	6909      	ldr	r1, [r1, #16]
 800c58c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c590:	eba3 0901 	sub.w	r9, r3, r1
 800c594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c598:	1c7b      	adds	r3, r7, #1
 800c59a:	444b      	add	r3, r9
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	429d      	cmp	r5, r3
 800c5a0:	bf38      	it	cc
 800c5a2:	461d      	movcc	r5, r3
 800c5a4:	0553      	lsls	r3, r2, #21
 800c5a6:	d527      	bpl.n	800c5f8 <__ssputs_r+0x8c>
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	f7ff fe0b 	bl	800c1c4 <_malloc_r>
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	b360      	cbz	r0, 800c60c <__ssputs_r+0xa0>
 800c5b2:	464a      	mov	r2, r9
 800c5b4:	6921      	ldr	r1, [r4, #16]
 800c5b6:	f7ff ff7b 	bl	800c4b0 <memcpy>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5c4:	81a3      	strh	r3, [r4, #12]
 800c5c6:	6126      	str	r6, [r4, #16]
 800c5c8:	444e      	add	r6, r9
 800c5ca:	6026      	str	r6, [r4, #0]
 800c5cc:	463e      	mov	r6, r7
 800c5ce:	6165      	str	r5, [r4, #20]
 800c5d0:	eba5 0509 	sub.w	r5, r5, r9
 800c5d4:	60a5      	str	r5, [r4, #8]
 800c5d6:	42be      	cmp	r6, r7
 800c5d8:	d900      	bls.n	800c5dc <__ssputs_r+0x70>
 800c5da:	463e      	mov	r6, r7
 800c5dc:	4632      	mov	r2, r6
 800c5de:	4641      	mov	r1, r8
 800c5e0:	6820      	ldr	r0, [r4, #0]
 800c5e2:	f000 fade 	bl	800cba2 <memmove>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	68a3      	ldr	r3, [r4, #8]
 800c5ea:	1b9b      	subs	r3, r3, r6
 800c5ec:	60a3      	str	r3, [r4, #8]
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	4433      	add	r3, r6
 800c5f2:	6023      	str	r3, [r4, #0]
 800c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f8:	462a      	mov	r2, r5
 800c5fa:	f000 faa3 	bl	800cb44 <_realloc_r>
 800c5fe:	4606      	mov	r6, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	d1e0      	bne.n	800c5c6 <__ssputs_r+0x5a>
 800c604:	4650      	mov	r0, sl
 800c606:	6921      	ldr	r1, [r4, #16]
 800c608:	f7ff ff68 	bl	800c4dc <_free_r>
 800c60c:	230c      	movs	r3, #12
 800c60e:	f8ca 3000 	str.w	r3, [sl]
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c61c:	81a3      	strh	r3, [r4, #12]
 800c61e:	e7e9      	b.n	800c5f4 <__ssputs_r+0x88>

0800c620 <_svfiprintf_r>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	4698      	mov	r8, r3
 800c626:	898b      	ldrh	r3, [r1, #12]
 800c628:	4607      	mov	r7, r0
 800c62a:	061b      	lsls	r3, r3, #24
 800c62c:	460d      	mov	r5, r1
 800c62e:	4614      	mov	r4, r2
 800c630:	b09d      	sub	sp, #116	; 0x74
 800c632:	d50e      	bpl.n	800c652 <_svfiprintf_r+0x32>
 800c634:	690b      	ldr	r3, [r1, #16]
 800c636:	b963      	cbnz	r3, 800c652 <_svfiprintf_r+0x32>
 800c638:	2140      	movs	r1, #64	; 0x40
 800c63a:	f7ff fdc3 	bl	800c1c4 <_malloc_r>
 800c63e:	6028      	str	r0, [r5, #0]
 800c640:	6128      	str	r0, [r5, #16]
 800c642:	b920      	cbnz	r0, 800c64e <_svfiprintf_r+0x2e>
 800c644:	230c      	movs	r3, #12
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c64c:	e0d0      	b.n	800c7f0 <_svfiprintf_r+0x1d0>
 800c64e:	2340      	movs	r3, #64	; 0x40
 800c650:	616b      	str	r3, [r5, #20]
 800c652:	2300      	movs	r3, #0
 800c654:	9309      	str	r3, [sp, #36]	; 0x24
 800c656:	2320      	movs	r3, #32
 800c658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c65c:	2330      	movs	r3, #48	; 0x30
 800c65e:	f04f 0901 	mov.w	r9, #1
 800c662:	f8cd 800c 	str.w	r8, [sp, #12]
 800c666:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c808 <_svfiprintf_r+0x1e8>
 800c66a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c66e:	4623      	mov	r3, r4
 800c670:	469a      	mov	sl, r3
 800c672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c676:	b10a      	cbz	r2, 800c67c <_svfiprintf_r+0x5c>
 800c678:	2a25      	cmp	r2, #37	; 0x25
 800c67a:	d1f9      	bne.n	800c670 <_svfiprintf_r+0x50>
 800c67c:	ebba 0b04 	subs.w	fp, sl, r4
 800c680:	d00b      	beq.n	800c69a <_svfiprintf_r+0x7a>
 800c682:	465b      	mov	r3, fp
 800c684:	4622      	mov	r2, r4
 800c686:	4629      	mov	r1, r5
 800c688:	4638      	mov	r0, r7
 800c68a:	f7ff ff6f 	bl	800c56c <__ssputs_r>
 800c68e:	3001      	adds	r0, #1
 800c690:	f000 80a9 	beq.w	800c7e6 <_svfiprintf_r+0x1c6>
 800c694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c696:	445a      	add	r2, fp
 800c698:	9209      	str	r2, [sp, #36]	; 0x24
 800c69a:	f89a 3000 	ldrb.w	r3, [sl]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 80a1 	beq.w	800c7e6 <_svfiprintf_r+0x1c6>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ae:	f10a 0a01 	add.w	sl, sl, #1
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	9307      	str	r3, [sp, #28]
 800c6b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ba:	931a      	str	r3, [sp, #104]	; 0x68
 800c6bc:	4654      	mov	r4, sl
 800c6be:	2205      	movs	r2, #5
 800c6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c4:	4850      	ldr	r0, [pc, #320]	; (800c808 <_svfiprintf_r+0x1e8>)
 800c6c6:	f000 fa86 	bl	800cbd6 <memchr>
 800c6ca:	9a04      	ldr	r2, [sp, #16]
 800c6cc:	b9d8      	cbnz	r0, 800c706 <_svfiprintf_r+0xe6>
 800c6ce:	06d0      	lsls	r0, r2, #27
 800c6d0:	bf44      	itt	mi
 800c6d2:	2320      	movmi	r3, #32
 800c6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d8:	0711      	lsls	r1, r2, #28
 800c6da:	bf44      	itt	mi
 800c6dc:	232b      	movmi	r3, #43	; 0x2b
 800c6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e8:	d015      	beq.n	800c716 <_svfiprintf_r+0xf6>
 800c6ea:	4654      	mov	r4, sl
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f04f 0c0a 	mov.w	ip, #10
 800c6f2:	9a07      	ldr	r2, [sp, #28]
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6fa:	3b30      	subs	r3, #48	; 0x30
 800c6fc:	2b09      	cmp	r3, #9
 800c6fe:	d94d      	bls.n	800c79c <_svfiprintf_r+0x17c>
 800c700:	b1b0      	cbz	r0, 800c730 <_svfiprintf_r+0x110>
 800c702:	9207      	str	r2, [sp, #28]
 800c704:	e014      	b.n	800c730 <_svfiprintf_r+0x110>
 800c706:	eba0 0308 	sub.w	r3, r0, r8
 800c70a:	fa09 f303 	lsl.w	r3, r9, r3
 800c70e:	4313      	orrs	r3, r2
 800c710:	46a2      	mov	sl, r4
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	e7d2      	b.n	800c6bc <_svfiprintf_r+0x9c>
 800c716:	9b03      	ldr	r3, [sp, #12]
 800c718:	1d19      	adds	r1, r3, #4
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	9103      	str	r1, [sp, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	bfbb      	ittet	lt
 800c722:	425b      	neglt	r3, r3
 800c724:	f042 0202 	orrlt.w	r2, r2, #2
 800c728:	9307      	strge	r3, [sp, #28]
 800c72a:	9307      	strlt	r3, [sp, #28]
 800c72c:	bfb8      	it	lt
 800c72e:	9204      	strlt	r2, [sp, #16]
 800c730:	7823      	ldrb	r3, [r4, #0]
 800c732:	2b2e      	cmp	r3, #46	; 0x2e
 800c734:	d10c      	bne.n	800c750 <_svfiprintf_r+0x130>
 800c736:	7863      	ldrb	r3, [r4, #1]
 800c738:	2b2a      	cmp	r3, #42	; 0x2a
 800c73a:	d134      	bne.n	800c7a6 <_svfiprintf_r+0x186>
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	3402      	adds	r4, #2
 800c740:	1d1a      	adds	r2, r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	9203      	str	r2, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfb8      	it	lt
 800c74a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c74e:	9305      	str	r3, [sp, #20]
 800c750:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c80c <_svfiprintf_r+0x1ec>
 800c754:	2203      	movs	r2, #3
 800c756:	4650      	mov	r0, sl
 800c758:	7821      	ldrb	r1, [r4, #0]
 800c75a:	f000 fa3c 	bl	800cbd6 <memchr>
 800c75e:	b138      	cbz	r0, 800c770 <_svfiprintf_r+0x150>
 800c760:	2240      	movs	r2, #64	; 0x40
 800c762:	9b04      	ldr	r3, [sp, #16]
 800c764:	eba0 000a 	sub.w	r0, r0, sl
 800c768:	4082      	lsls	r2, r0
 800c76a:	4313      	orrs	r3, r2
 800c76c:	3401      	adds	r4, #1
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c774:	2206      	movs	r2, #6
 800c776:	4826      	ldr	r0, [pc, #152]	; (800c810 <_svfiprintf_r+0x1f0>)
 800c778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c77c:	f000 fa2b 	bl	800cbd6 <memchr>
 800c780:	2800      	cmp	r0, #0
 800c782:	d038      	beq.n	800c7f6 <_svfiprintf_r+0x1d6>
 800c784:	4b23      	ldr	r3, [pc, #140]	; (800c814 <_svfiprintf_r+0x1f4>)
 800c786:	bb1b      	cbnz	r3, 800c7d0 <_svfiprintf_r+0x1b0>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	3307      	adds	r3, #7
 800c78c:	f023 0307 	bic.w	r3, r3, #7
 800c790:	3308      	adds	r3, #8
 800c792:	9303      	str	r3, [sp, #12]
 800c794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c796:	4433      	add	r3, r6
 800c798:	9309      	str	r3, [sp, #36]	; 0x24
 800c79a:	e768      	b.n	800c66e <_svfiprintf_r+0x4e>
 800c79c:	460c      	mov	r4, r1
 800c79e:	2001      	movs	r0, #1
 800c7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7a4:	e7a6      	b.n	800c6f4 <_svfiprintf_r+0xd4>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f04f 0c0a 	mov.w	ip, #10
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	9305      	str	r3, [sp, #20]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7b8:	3a30      	subs	r2, #48	; 0x30
 800c7ba:	2a09      	cmp	r2, #9
 800c7bc:	d903      	bls.n	800c7c6 <_svfiprintf_r+0x1a6>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d0c6      	beq.n	800c750 <_svfiprintf_r+0x130>
 800c7c2:	9105      	str	r1, [sp, #20]
 800c7c4:	e7c4      	b.n	800c750 <_svfiprintf_r+0x130>
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ce:	e7f0      	b.n	800c7b2 <_svfiprintf_r+0x192>
 800c7d0:	ab03      	add	r3, sp, #12
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	; (800c818 <_svfiprintf_r+0x1f8>)
 800c7da:	a904      	add	r1, sp, #16
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	1c42      	adds	r2, r0, #1
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	d1d6      	bne.n	800c794 <_svfiprintf_r+0x174>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	065b      	lsls	r3, r3, #25
 800c7ea:	f53f af2d 	bmi.w	800c648 <_svfiprintf_r+0x28>
 800c7ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f0:	b01d      	add	sp, #116	; 0x74
 800c7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f6:	ab03      	add	r3, sp, #12
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	4b06      	ldr	r3, [pc, #24]	; (800c818 <_svfiprintf_r+0x1f8>)
 800c800:	a904      	add	r1, sp, #16
 800c802:	f000 f87d 	bl	800c900 <_printf_i>
 800c806:	e7eb      	b.n	800c7e0 <_svfiprintf_r+0x1c0>
 800c808:	0800dbc3 	.word	0x0800dbc3
 800c80c:	0800dbc9 	.word	0x0800dbc9
 800c810:	0800dbcd 	.word	0x0800dbcd
 800c814:	00000000 	.word	0x00000000
 800c818:	0800c56d 	.word	0x0800c56d

0800c81c <_printf_common>:
 800c81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	4616      	mov	r6, r2
 800c822:	4699      	mov	r9, r3
 800c824:	688a      	ldr	r2, [r1, #8]
 800c826:	690b      	ldr	r3, [r1, #16]
 800c828:	4607      	mov	r7, r0
 800c82a:	4293      	cmp	r3, r2
 800c82c:	bfb8      	it	lt
 800c82e:	4613      	movlt	r3, r2
 800c830:	6033      	str	r3, [r6, #0]
 800c832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c836:	460c      	mov	r4, r1
 800c838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c83c:	b10a      	cbz	r2, 800c842 <_printf_common+0x26>
 800c83e:	3301      	adds	r3, #1
 800c840:	6033      	str	r3, [r6, #0]
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	0699      	lsls	r1, r3, #26
 800c846:	bf42      	ittt	mi
 800c848:	6833      	ldrmi	r3, [r6, #0]
 800c84a:	3302      	addmi	r3, #2
 800c84c:	6033      	strmi	r3, [r6, #0]
 800c84e:	6825      	ldr	r5, [r4, #0]
 800c850:	f015 0506 	ands.w	r5, r5, #6
 800c854:	d106      	bne.n	800c864 <_printf_common+0x48>
 800c856:	f104 0a19 	add.w	sl, r4, #25
 800c85a:	68e3      	ldr	r3, [r4, #12]
 800c85c:	6832      	ldr	r2, [r6, #0]
 800c85e:	1a9b      	subs	r3, r3, r2
 800c860:	42ab      	cmp	r3, r5
 800c862:	dc2b      	bgt.n	800c8bc <_printf_common+0xa0>
 800c864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c868:	1e13      	subs	r3, r2, #0
 800c86a:	6822      	ldr	r2, [r4, #0]
 800c86c:	bf18      	it	ne
 800c86e:	2301      	movne	r3, #1
 800c870:	0692      	lsls	r2, r2, #26
 800c872:	d430      	bmi.n	800c8d6 <_printf_common+0xba>
 800c874:	4649      	mov	r1, r9
 800c876:	4638      	mov	r0, r7
 800c878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c87c:	47c0      	blx	r8
 800c87e:	3001      	adds	r0, #1
 800c880:	d023      	beq.n	800c8ca <_printf_common+0xae>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	6922      	ldr	r2, [r4, #16]
 800c886:	f003 0306 	and.w	r3, r3, #6
 800c88a:	2b04      	cmp	r3, #4
 800c88c:	bf14      	ite	ne
 800c88e:	2500      	movne	r5, #0
 800c890:	6833      	ldreq	r3, [r6, #0]
 800c892:	f04f 0600 	mov.w	r6, #0
 800c896:	bf08      	it	eq
 800c898:	68e5      	ldreq	r5, [r4, #12]
 800c89a:	f104 041a 	add.w	r4, r4, #26
 800c89e:	bf08      	it	eq
 800c8a0:	1aed      	subeq	r5, r5, r3
 800c8a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c8a6:	bf08      	it	eq
 800c8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	bfc4      	itt	gt
 800c8b0:	1a9b      	subgt	r3, r3, r2
 800c8b2:	18ed      	addgt	r5, r5, r3
 800c8b4:	42b5      	cmp	r5, r6
 800c8b6:	d11a      	bne.n	800c8ee <_printf_common+0xd2>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	e008      	b.n	800c8ce <_printf_common+0xb2>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	4652      	mov	r2, sl
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	47c0      	blx	r8
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d103      	bne.n	800c8d2 <_printf_common+0xb6>
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d2:	3501      	adds	r5, #1
 800c8d4:	e7c1      	b.n	800c85a <_printf_common+0x3e>
 800c8d6:	2030      	movs	r0, #48	; 0x30
 800c8d8:	18e1      	adds	r1, r4, r3
 800c8da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8e4:	4422      	add	r2, r4
 800c8e6:	3302      	adds	r3, #2
 800c8e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8ec:	e7c2      	b.n	800c874 <_printf_common+0x58>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	47c0      	blx	r8
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d0e6      	beq.n	800c8ca <_printf_common+0xae>
 800c8fc:	3601      	adds	r6, #1
 800c8fe:	e7d9      	b.n	800c8b4 <_printf_common+0x98>

0800c900 <_printf_i>:
 800c900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c904:	7e0f      	ldrb	r7, [r1, #24]
 800c906:	4691      	mov	r9, r2
 800c908:	2f78      	cmp	r7, #120	; 0x78
 800c90a:	4680      	mov	r8, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	469a      	mov	sl, r3
 800c910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c916:	d807      	bhi.n	800c928 <_printf_i+0x28>
 800c918:	2f62      	cmp	r7, #98	; 0x62
 800c91a:	d80a      	bhi.n	800c932 <_printf_i+0x32>
 800c91c:	2f00      	cmp	r7, #0
 800c91e:	f000 80d5 	beq.w	800cacc <_printf_i+0x1cc>
 800c922:	2f58      	cmp	r7, #88	; 0x58
 800c924:	f000 80c1 	beq.w	800caaa <_printf_i+0x1aa>
 800c928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c92c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c930:	e03a      	b.n	800c9a8 <_printf_i+0xa8>
 800c932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c936:	2b15      	cmp	r3, #21
 800c938:	d8f6      	bhi.n	800c928 <_printf_i+0x28>
 800c93a:	a101      	add	r1, pc, #4	; (adr r1, 800c940 <_printf_i+0x40>)
 800c93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c940:	0800c999 	.word	0x0800c999
 800c944:	0800c9ad 	.word	0x0800c9ad
 800c948:	0800c929 	.word	0x0800c929
 800c94c:	0800c929 	.word	0x0800c929
 800c950:	0800c929 	.word	0x0800c929
 800c954:	0800c929 	.word	0x0800c929
 800c958:	0800c9ad 	.word	0x0800c9ad
 800c95c:	0800c929 	.word	0x0800c929
 800c960:	0800c929 	.word	0x0800c929
 800c964:	0800c929 	.word	0x0800c929
 800c968:	0800c929 	.word	0x0800c929
 800c96c:	0800cab3 	.word	0x0800cab3
 800c970:	0800c9d9 	.word	0x0800c9d9
 800c974:	0800ca6d 	.word	0x0800ca6d
 800c978:	0800c929 	.word	0x0800c929
 800c97c:	0800c929 	.word	0x0800c929
 800c980:	0800cad5 	.word	0x0800cad5
 800c984:	0800c929 	.word	0x0800c929
 800c988:	0800c9d9 	.word	0x0800c9d9
 800c98c:	0800c929 	.word	0x0800c929
 800c990:	0800c929 	.word	0x0800c929
 800c994:	0800ca75 	.word	0x0800ca75
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	1d1a      	adds	r2, r3, #4
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	602a      	str	r2, [r5, #0]
 800c9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e0a0      	b.n	800caee <_printf_i+0x1ee>
 800c9ac:	6820      	ldr	r0, [r4, #0]
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	0607      	lsls	r7, r0, #24
 800c9b2:	f103 0104 	add.w	r1, r3, #4
 800c9b6:	6029      	str	r1, [r5, #0]
 800c9b8:	d501      	bpl.n	800c9be <_printf_i+0xbe>
 800c9ba:	681e      	ldr	r6, [r3, #0]
 800c9bc:	e003      	b.n	800c9c6 <_printf_i+0xc6>
 800c9be:	0646      	lsls	r6, r0, #25
 800c9c0:	d5fb      	bpl.n	800c9ba <_printf_i+0xba>
 800c9c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c9c6:	2e00      	cmp	r6, #0
 800c9c8:	da03      	bge.n	800c9d2 <_printf_i+0xd2>
 800c9ca:	232d      	movs	r3, #45	; 0x2d
 800c9cc:	4276      	negs	r6, r6
 800c9ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9d2:	230a      	movs	r3, #10
 800c9d4:	4859      	ldr	r0, [pc, #356]	; (800cb3c <_printf_i+0x23c>)
 800c9d6:	e012      	b.n	800c9fe <_printf_i+0xfe>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	6820      	ldr	r0, [r4, #0]
 800c9dc:	1d19      	adds	r1, r3, #4
 800c9de:	6029      	str	r1, [r5, #0]
 800c9e0:	0605      	lsls	r5, r0, #24
 800c9e2:	d501      	bpl.n	800c9e8 <_printf_i+0xe8>
 800c9e4:	681e      	ldr	r6, [r3, #0]
 800c9e6:	e002      	b.n	800c9ee <_printf_i+0xee>
 800c9e8:	0641      	lsls	r1, r0, #25
 800c9ea:	d5fb      	bpl.n	800c9e4 <_printf_i+0xe4>
 800c9ec:	881e      	ldrh	r6, [r3, #0]
 800c9ee:	2f6f      	cmp	r7, #111	; 0x6f
 800c9f0:	bf0c      	ite	eq
 800c9f2:	2308      	moveq	r3, #8
 800c9f4:	230a      	movne	r3, #10
 800c9f6:	4851      	ldr	r0, [pc, #324]	; (800cb3c <_printf_i+0x23c>)
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9fe:	6865      	ldr	r5, [r4, #4]
 800ca00:	2d00      	cmp	r5, #0
 800ca02:	bfa8      	it	ge
 800ca04:	6821      	ldrge	r1, [r4, #0]
 800ca06:	60a5      	str	r5, [r4, #8]
 800ca08:	bfa4      	itt	ge
 800ca0a:	f021 0104 	bicge.w	r1, r1, #4
 800ca0e:	6021      	strge	r1, [r4, #0]
 800ca10:	b90e      	cbnz	r6, 800ca16 <_printf_i+0x116>
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	d04b      	beq.n	800caae <_printf_i+0x1ae>
 800ca16:	4615      	mov	r5, r2
 800ca18:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca1c:	fb03 6711 	mls	r7, r3, r1, r6
 800ca20:	5dc7      	ldrb	r7, [r0, r7]
 800ca22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca26:	4637      	mov	r7, r6
 800ca28:	42bb      	cmp	r3, r7
 800ca2a:	460e      	mov	r6, r1
 800ca2c:	d9f4      	bls.n	800ca18 <_printf_i+0x118>
 800ca2e:	2b08      	cmp	r3, #8
 800ca30:	d10b      	bne.n	800ca4a <_printf_i+0x14a>
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	07de      	lsls	r6, r3, #31
 800ca36:	d508      	bpl.n	800ca4a <_printf_i+0x14a>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	6861      	ldr	r1, [r4, #4]
 800ca3c:	4299      	cmp	r1, r3
 800ca3e:	bfde      	ittt	le
 800ca40:	2330      	movle	r3, #48	; 0x30
 800ca42:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ca4a:	1b52      	subs	r2, r2, r5
 800ca4c:	6122      	str	r2, [r4, #16]
 800ca4e:	464b      	mov	r3, r9
 800ca50:	4621      	mov	r1, r4
 800ca52:	4640      	mov	r0, r8
 800ca54:	f8cd a000 	str.w	sl, [sp]
 800ca58:	aa03      	add	r2, sp, #12
 800ca5a:	f7ff fedf 	bl	800c81c <_printf_common>
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d14a      	bne.n	800caf8 <_printf_i+0x1f8>
 800ca62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca66:	b004      	add	sp, #16
 800ca68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	f043 0320 	orr.w	r3, r3, #32
 800ca72:	6023      	str	r3, [r4, #0]
 800ca74:	2778      	movs	r7, #120	; 0x78
 800ca76:	4832      	ldr	r0, [pc, #200]	; (800cb40 <_printf_i+0x240>)
 800ca78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	6829      	ldr	r1, [r5, #0]
 800ca80:	061f      	lsls	r7, r3, #24
 800ca82:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca86:	d402      	bmi.n	800ca8e <_printf_i+0x18e>
 800ca88:	065f      	lsls	r7, r3, #25
 800ca8a:	bf48      	it	mi
 800ca8c:	b2b6      	uxthmi	r6, r6
 800ca8e:	07df      	lsls	r7, r3, #31
 800ca90:	bf48      	it	mi
 800ca92:	f043 0320 	orrmi.w	r3, r3, #32
 800ca96:	6029      	str	r1, [r5, #0]
 800ca98:	bf48      	it	mi
 800ca9a:	6023      	strmi	r3, [r4, #0]
 800ca9c:	b91e      	cbnz	r6, 800caa6 <_printf_i+0x1a6>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	f023 0320 	bic.w	r3, r3, #32
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	2310      	movs	r3, #16
 800caa8:	e7a6      	b.n	800c9f8 <_printf_i+0xf8>
 800caaa:	4824      	ldr	r0, [pc, #144]	; (800cb3c <_printf_i+0x23c>)
 800caac:	e7e4      	b.n	800ca78 <_printf_i+0x178>
 800caae:	4615      	mov	r5, r2
 800cab0:	e7bd      	b.n	800ca2e <_printf_i+0x12e>
 800cab2:	682b      	ldr	r3, [r5, #0]
 800cab4:	6826      	ldr	r6, [r4, #0]
 800cab6:	1d18      	adds	r0, r3, #4
 800cab8:	6961      	ldr	r1, [r4, #20]
 800caba:	6028      	str	r0, [r5, #0]
 800cabc:	0635      	lsls	r5, r6, #24
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	d501      	bpl.n	800cac6 <_printf_i+0x1c6>
 800cac2:	6019      	str	r1, [r3, #0]
 800cac4:	e002      	b.n	800cacc <_printf_i+0x1cc>
 800cac6:	0670      	lsls	r0, r6, #25
 800cac8:	d5fb      	bpl.n	800cac2 <_printf_i+0x1c2>
 800caca:	8019      	strh	r1, [r3, #0]
 800cacc:	2300      	movs	r3, #0
 800cace:	4615      	mov	r5, r2
 800cad0:	6123      	str	r3, [r4, #16]
 800cad2:	e7bc      	b.n	800ca4e <_printf_i+0x14e>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	2100      	movs	r1, #0
 800cad8:	1d1a      	adds	r2, r3, #4
 800cada:	602a      	str	r2, [r5, #0]
 800cadc:	681d      	ldr	r5, [r3, #0]
 800cade:	6862      	ldr	r2, [r4, #4]
 800cae0:	4628      	mov	r0, r5
 800cae2:	f000 f878 	bl	800cbd6 <memchr>
 800cae6:	b108      	cbz	r0, 800caec <_printf_i+0x1ec>
 800cae8:	1b40      	subs	r0, r0, r5
 800caea:	6060      	str	r0, [r4, #4]
 800caec:	6863      	ldr	r3, [r4, #4]
 800caee:	6123      	str	r3, [r4, #16]
 800caf0:	2300      	movs	r3, #0
 800caf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf6:	e7aa      	b.n	800ca4e <_printf_i+0x14e>
 800caf8:	462a      	mov	r2, r5
 800cafa:	4649      	mov	r1, r9
 800cafc:	4640      	mov	r0, r8
 800cafe:	6923      	ldr	r3, [r4, #16]
 800cb00:	47d0      	blx	sl
 800cb02:	3001      	adds	r0, #1
 800cb04:	d0ad      	beq.n	800ca62 <_printf_i+0x162>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	079b      	lsls	r3, r3, #30
 800cb0a:	d413      	bmi.n	800cb34 <_printf_i+0x234>
 800cb0c:	68e0      	ldr	r0, [r4, #12]
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	4298      	cmp	r0, r3
 800cb12:	bfb8      	it	lt
 800cb14:	4618      	movlt	r0, r3
 800cb16:	e7a6      	b.n	800ca66 <_printf_i+0x166>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	4640      	mov	r0, r8
 800cb20:	47d0      	blx	sl
 800cb22:	3001      	adds	r0, #1
 800cb24:	d09d      	beq.n	800ca62 <_printf_i+0x162>
 800cb26:	3501      	adds	r5, #1
 800cb28:	68e3      	ldr	r3, [r4, #12]
 800cb2a:	9903      	ldr	r1, [sp, #12]
 800cb2c:	1a5b      	subs	r3, r3, r1
 800cb2e:	42ab      	cmp	r3, r5
 800cb30:	dcf2      	bgt.n	800cb18 <_printf_i+0x218>
 800cb32:	e7eb      	b.n	800cb0c <_printf_i+0x20c>
 800cb34:	2500      	movs	r5, #0
 800cb36:	f104 0619 	add.w	r6, r4, #25
 800cb3a:	e7f5      	b.n	800cb28 <_printf_i+0x228>
 800cb3c:	0800dbd4 	.word	0x0800dbd4
 800cb40:	0800dbe5 	.word	0x0800dbe5

0800cb44 <_realloc_r>:
 800cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	4680      	mov	r8, r0
 800cb4a:	4614      	mov	r4, r2
 800cb4c:	460e      	mov	r6, r1
 800cb4e:	b921      	cbnz	r1, 800cb5a <_realloc_r+0x16>
 800cb50:	4611      	mov	r1, r2
 800cb52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb56:	f7ff bb35 	b.w	800c1c4 <_malloc_r>
 800cb5a:	b92a      	cbnz	r2, 800cb68 <_realloc_r+0x24>
 800cb5c:	f7ff fcbe 	bl	800c4dc <_free_r>
 800cb60:	4625      	mov	r5, r4
 800cb62:	4628      	mov	r0, r5
 800cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb68:	f000 f843 	bl	800cbf2 <_malloc_usable_size_r>
 800cb6c:	4284      	cmp	r4, r0
 800cb6e:	4607      	mov	r7, r0
 800cb70:	d802      	bhi.n	800cb78 <_realloc_r+0x34>
 800cb72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb76:	d812      	bhi.n	800cb9e <_realloc_r+0x5a>
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	f7ff fb22 	bl	800c1c4 <_malloc_r>
 800cb80:	4605      	mov	r5, r0
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d0ed      	beq.n	800cb62 <_realloc_r+0x1e>
 800cb86:	42bc      	cmp	r4, r7
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4631      	mov	r1, r6
 800cb8c:	bf28      	it	cs
 800cb8e:	463a      	movcs	r2, r7
 800cb90:	f7ff fc8e 	bl	800c4b0 <memcpy>
 800cb94:	4631      	mov	r1, r6
 800cb96:	4640      	mov	r0, r8
 800cb98:	f7ff fca0 	bl	800c4dc <_free_r>
 800cb9c:	e7e1      	b.n	800cb62 <_realloc_r+0x1e>
 800cb9e:	4635      	mov	r5, r6
 800cba0:	e7df      	b.n	800cb62 <_realloc_r+0x1e>

0800cba2 <memmove>:
 800cba2:	4288      	cmp	r0, r1
 800cba4:	b510      	push	{r4, lr}
 800cba6:	eb01 0402 	add.w	r4, r1, r2
 800cbaa:	d902      	bls.n	800cbb2 <memmove+0x10>
 800cbac:	4284      	cmp	r4, r0
 800cbae:	4623      	mov	r3, r4
 800cbb0:	d807      	bhi.n	800cbc2 <memmove+0x20>
 800cbb2:	1e43      	subs	r3, r0, #1
 800cbb4:	42a1      	cmp	r1, r4
 800cbb6:	d008      	beq.n	800cbca <memmove+0x28>
 800cbb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbc0:	e7f8      	b.n	800cbb4 <memmove+0x12>
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	4402      	add	r2, r0
 800cbc6:	428a      	cmp	r2, r1
 800cbc8:	d100      	bne.n	800cbcc <memmove+0x2a>
 800cbca:	bd10      	pop	{r4, pc}
 800cbcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbd4:	e7f7      	b.n	800cbc6 <memmove+0x24>

0800cbd6 <memchr>:
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	b2c9      	uxtb	r1, r1
 800cbdc:	4402      	add	r2, r0
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	d101      	bne.n	800cbe8 <memchr+0x12>
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	e003      	b.n	800cbf0 <memchr+0x1a>
 800cbe8:	7804      	ldrb	r4, [r0, #0]
 800cbea:	3301      	adds	r3, #1
 800cbec:	428c      	cmp	r4, r1
 800cbee:	d1f6      	bne.n	800cbde <memchr+0x8>
 800cbf0:	bd10      	pop	{r4, pc}

0800cbf2 <_malloc_usable_size_r>:
 800cbf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf6:	1f18      	subs	r0, r3, #4
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bfbc      	itt	lt
 800cbfc:	580b      	ldrlt	r3, [r1, r0]
 800cbfe:	18c0      	addlt	r0, r0, r3
 800cc00:	4770      	bx	lr
	...

0800cc04 <_init>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	bf00      	nop
 800cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0a:	bc08      	pop	{r3}
 800cc0c:	469e      	mov	lr, r3
 800cc0e:	4770      	bx	lr

0800cc10 <_fini>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr
