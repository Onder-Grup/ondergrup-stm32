
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb84  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800cd68  0800cd68  0001cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd3c  0800dd3c  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd3c  0800dd3c  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd3c  0800dd3c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd3c  0800dd3c  0001dd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800dd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000110  0800de54  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800de54  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a10  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003389  00000000  00000000  00037b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0003aed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdbb  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c347  00000000  00000000  0005a073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f391  00000000  00000000  000763ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011574b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ec  00000000  00000000  0011579c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cd50 	.word	0x0800cd50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cd50 	.word	0x0800cd50

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fbf6 	bl	8009a40 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa6e 	bl	8008738 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	200003bc 	.word	0x200003bc
 80004c0:	2000020d 	.word	0x2000020d
 80004c4:	20000235 	.word	0x20000235
 80004c8:	20000238 	.word	0x20000238
 80004cc:	20000239 	.word	0x20000239
 80004d0:	2000023a 	.word	0x2000023a
 80004d4:	2000023b 	.word	0x2000023b
 80004d8:	2000023c 	.word	0x2000023c
 80004dc:	2000023d 	.word	0x2000023d
 80004e0:	2000024d 	.word	0x2000024d
 80004e4:	2000023e 	.word	0x2000023e
 80004e8:	2000024e 	.word	0x2000024e
 80004ec:	2000023f 	.word	0x2000023f
 80004f0:	2000024f 	.word	0x2000024f
 80004f4:	20000242 	.word	0x20000242
 80004f8:	20000243 	.word	0x20000243
 80004fc:	20000244 	.word	0x20000244
 8000500:	20000245 	.word	0x20000245
 8000504:	20000246 	.word	0x20000246
 8000508:	20000247 	.word	0x20000247
 800050c:	20000248 	.word	0x20000248
 8000510:	20000249 	.word	0x20000249
 8000514:	2000024a 	.word	0x2000024a
 8000518:	2000024b 	.word	0x2000024b
 800051c:	2000024c 	.word	0x2000024c
 8000520:	20000250 	.word	0x20000250
 8000524:	20000252 	.word	0x20000252
 8000528:	20000230 	.word	0x20000230
 800052c:	20000231 	.word	0x20000231
 8000530:	20000232 	.word	0x20000232
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000233 	.word	0x20000233
 8000540:	20000255 	.word	0x20000255
 8000544:	20000253 	.word	0x20000253
 8000548:	20000241 	.word	0x20000241
 800054c:	20000254 	.word	0x20000254
 8000550:	20000240 	.word	0x20000240
 8000554:	20000256 	.word	0x20000256
 8000558:	20000257 	.word	0x20000257
 800055c:	20000258 	.word	0x20000258
 8000560:	20000259 	.word	0x20000259
 8000564:	2000025a 	.word	0x2000025a
 8000568:	2000025b 	.word	0x2000025b
 800056c:	2000025c 	.word	0x2000025c
 8000570:	2000025d 	.word	0x2000025d
 8000574:	2000025e 	.word	0x2000025e
 8000578:	2000025f 	.word	0x2000025f
 800057c:	2000020c 	.word	0x2000020c
	}

	if(kapi1AcSure>5) {
 8000580:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <eepromKontrol+0x4fc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <eepromKontrol+0x4fc>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <eepromKontrol+0x500>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b67      	ldr	r3, [pc, #412]	; (8000734 <eepromKontrol+0x500>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b66      	ldr	r3, [pc, #408]	; (8000738 <eepromKontrol+0x504>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <eepromKontrol+0x504>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <eepromKontrol+0x508>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <eepromKontrol+0x508>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <eepromKontrol+0x50c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <eepromKontrol+0x50c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <eepromKontrol+0x510>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <eepromKontrol+0x510>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <eepromKontrol+0x514>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <eepromKontrol+0x514>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <eepromKontrol+0x518>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <eepromKontrol+0x518>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <eepromKontrol+0x51c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <eepromKontrol+0x51c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <eepromKontrol+0x520>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <eepromKontrol+0x520>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <eepromKontrol+0x524>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b50      	ldr	r3, [pc, #320]	; (8000758 <eepromKontrol+0x524>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <eepromKontrol+0x528>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <eepromKontrol+0x528>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <eepromKontrol+0x52c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <eepromKontrol+0x52c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <eepromKontrol+0x530>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <eepromKontrol+0x530>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <eepromKontrol+0x534>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <eepromKontrol+0x534>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <eepromKontrol+0x538>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <eepromKontrol+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <eepromKontrol+0x53c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <eepromKontrol+0x53c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <eepromKontrol+0x540>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <eepromKontrol+0x540>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <eepromKontrol+0x544>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <eepromKontrol+0x544>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <eepromKontrol+0x548>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <eepromKontrol+0x548>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <eepromKontrol+0x54c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <eepromKontrol+0x54c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <eepromKontrol+0x550>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <eepromKontrol+0x550>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], 12);
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <eepromKontrol+0x554>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <eepromKontrol+0x558>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <eepromKontrol+0x55c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <eepromKontrol+0x560>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <eepromKontrol+0x558>)
 80006d0:	441a      	add	r2, r3
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <eepromKontrol+0x564>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	6855      	ldr	r5, [r2, #4]
 80006d8:	6894      	ldr	r4, [r2, #8]
 80006da:	68d0      	ldr	r0, [r2, #12]
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	605d      	str	r5, [r3, #4]
 80006e0:	609c      	str	r4, [r3, #8]
 80006e2:	60d8      	str	r0, [r3, #12]
 80006e4:	6911      	ldr	r1, [r2, #16]
 80006e6:	6119      	str	r1, [r3, #16]
	memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <eepromKontrol+0x568>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <eepromKontrol+0x558>)
 80006ee:	441a      	add	r2, r3
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <eepromKontrol+0x56c>)
 80006f2:	6811      	ldr	r1, [r2, #0]
 80006f4:	6855      	ldr	r5, [r2, #4]
 80006f6:	6894      	ldr	r4, [r2, #8]
 80006f8:	68d0      	ldr	r0, [r2, #12]
 80006fa:	6019      	str	r1, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	609c      	str	r4, [r3, #8]
 8000700:	60d8      	str	r0, [r3, #12]
 8000702:	6911      	ldr	r1, [r2, #16]
 8000704:	6119      	str	r1, [r3, #16]
	HAL_Delay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f008 f816 	bl	8008738 <HAL_Delay>
	convertArrays(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f849 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 8000712:	2032      	movs	r0, #50	; 0x32
 8000714:	f008 f810 	bl	8008738 <HAL_Delay>
	convertArrays(2);
 8000718:	2002      	movs	r0, #2
 800071a:	f000 f843 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f008 f80a 	bl	8008738 <HAL_Delay>
	convertArrays(3);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f83d 	bl	80007a4 <convertArrays>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	2000024d 	.word	0x2000024d
 8000734:	2000023e 	.word	0x2000023e
 8000738:	2000024e 	.word	0x2000024e
 800073c:	2000023f 	.word	0x2000023f
 8000740:	20000241 	.word	0x20000241
 8000744:	2000024f 	.word	0x2000024f
 8000748:	20000242 	.word	0x20000242
 800074c:	20000243 	.word	0x20000243
 8000750:	20000244 	.word	0x20000244
 8000754:	20000245 	.word	0x20000245
 8000758:	20000246 	.word	0x20000246
 800075c:	20000247 	.word	0x20000247
 8000760:	20000248 	.word	0x20000248
 8000764:	20000249 	.word	0x20000249
 8000768:	2000024a 	.word	0x2000024a
 800076c:	2000024b 	.word	0x2000024b
 8000770:	2000024c 	.word	0x2000024c
 8000774:	20000250 	.word	0x20000250
 8000778:	20000252 	.word	0x20000252
 800077c:	20000254 	.word	0x20000254
 8000780:	20000255 	.word	0x20000255
 8000784:	20000253 	.word	0x20000253
 8000788:	20000004 	.word	0x20000004
 800078c:	2000012c 	.word	0x2000012c
 8000790:	200001d8 	.word	0x200001d8
 8000794:	20000008 	.word	0x20000008
 8000798:	200001e4 	.word	0x200001e4
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200001f8 	.word	0x200001f8

080007a4 <convertArrays>:

void convertArrays(int state) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d115      	bne.n	80007de <convertArrays+0x3a>
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e00e      	b.n	80007d6 <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <convertArrays+0xac>)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <convertArrays+0xb0>)
 80007c4:	5c99      	ldrb	r1, [r3, r2]
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <convertArrays+0xb4>)
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3301      	adds	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	2b0b      	cmp	r3, #11
 80007da:	dded      	ble.n	80007b8 <convertArrays+0x14>

		for(int i=0; i<arrLength; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 80007dc:	e033      	b.n	8000846 <convertArrays+0xa2>
	} else if(state == 2) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d118      	bne.n	8000816 <convertArrays+0x72>
		int arrLength = sizeof(wifiSSIDInt)/sizeof(wifiSSIDInt[0]);
 80007e4:	2314      	movs	r3, #20
 80007e6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<arrLength; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	e00e      	b.n	800080c <convertArrays+0x68>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <convertArrays+0xb8>)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <convertArrays+0xbc>)
 80007fa:	5c99      	ldrb	r1, [r3, r2]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <convertArrays+0xc0>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3301      	adds	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbec      	blt.n	80007ee <convertArrays+0x4a>
}
 8000814:	e017      	b.n	8000846 <convertArrays+0xa2>
		int arrLength = sizeof(wifiPassInt)/sizeof(wifiPassInt[0]);
 8000816:	2314      	movs	r3, #20
 8000818:	613b      	str	r3, [r7, #16]
		for(int i=0; i<arrLength; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e00e      	b.n	800083e <convertArrays+0x9a>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <convertArrays+0xc4>)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <convertArrays+0xbc>)
 800082c:	5c99      	ldrb	r1, [r3, r2]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <convertArrays+0xc8>)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	429a      	cmp	r2, r3
 8000844:	dbec      	blt.n	8000820 <convertArrays+0x7c>
}
 8000846:	bf00      	nop
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	200001d8 	.word	0x200001d8
 8000854:	20000010 	.word	0x20000010
 8000858:	200001a4 	.word	0x200001a4
 800085c:	200001e4 	.word	0x200001e4
 8000860:	2000001c 	.word	0x2000001c
 8000864:	200001b0 	.word	0x200001b0
 8000868:	200001f8 	.word	0x200001f8
 800086c:	200001c4 	.word	0x200001c4

08000870 <resetEEPROM4Wifi>:

void resetEEPROM4Wifi(int state) {
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d114      	bne.n	80008a8 <resetEEPROM4Wifi+0x38>
		int eepromVal = idStartPos;
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <resetEEPROM4Wifi+0x9c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	e00a      	b.n	80008a0 <resetEEPROM4Wifi+0x30>
			eepromData[eepromVal] = '\0';
 800088a:	4a21      	ldr	r2, [pc, #132]	; (8000910 <resetEEPROM4Wifi+0xa0>)
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	3301      	adds	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	3301      	adds	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	2b0b      	cmp	r3, #11
 80008a4:	ddf1      	ble.n	800088a <resetEEPROM4Wifi+0x1a>
		for(int i=0; i<wifiCharacterLimit; i++) {
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 80008a6:	e02b      	b.n	8000900 <resetEEPROM4Wifi+0x90>
	} else if(state == 2) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d114      	bne.n	80008d8 <resetEEPROM4Wifi+0x68>
		int eepromVal = ssidStartPos;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <resetEEPROM4Wifi+0xa4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	e00a      	b.n	80008d0 <resetEEPROM4Wifi+0x60>
			eepromData[eepromVal] = '\0';
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <resetEEPROM4Wifi+0xa0>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3301      	adds	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b13      	cmp	r3, #19
 80008d4:	ddf1      	ble.n	80008ba <resetEEPROM4Wifi+0x4a>
}
 80008d6:	e013      	b.n	8000900 <resetEEPROM4Wifi+0x90>
		int eepromVal = passStartPos;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <resetEEPROM4Wifi+0xa8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	e00a      	b.n	80008fa <resetEEPROM4Wifi+0x8a>
			eepromData[eepromVal] = '\0';
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <resetEEPROM4Wifi+0xa0>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b13      	cmp	r3, #19
 80008fe:	ddf1      	ble.n	80008e4 <resetEEPROM4Wifi+0x74>
}
 8000900:	bf00      	nop
 8000902:	3724      	adds	r7, #36	; 0x24
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000004 	.word	0x20000004
 8000910:	2000012c 	.word	0x2000012c
 8000914:	20000008 	.word	0x20000008
 8000918:	2000000c 	.word	0x2000000c

0800091c <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b0c6      	sub	sp, #280	; 0x118
 8000920:	af02      	add	r7, sp, #8
 8000922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092a:	6018      	str	r0, [r3, #0]
 800092c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000934:	6019      	str	r1, [r3, #0]
 8000936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800093a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800093e:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000940:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <sendMachineData+0xec>)
 8000942:	4932      	ldr	r1, [pc, #200]	; (8000a0c <sendMachineData+0xf0>)
 8000944:	4832      	ldr	r0, [pc, #200]	; (8000a10 <sendMachineData+0xf4>)
 8000946:	f00b fe1b 	bl	800c580 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800094a:	4831      	ldr	r0, [pc, #196]	; (8000a10 <sendMachineData+0xf4>)
 800094c:	f7ff fc6a 	bl	8000224 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800095c:	492c      	ldr	r1, [pc, #176]	; (8000a10 <sendMachineData+0xf4>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	f00a ffb6 	bl	800b8d0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000964:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000968:	f007 fee6 	bl	8008738 <HAL_Delay>

	sprintf(local_txA,
 800096c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000970:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000974:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000978:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800097c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000980:	4924      	ldr	r1, [pc, #144]	; (8000a14 <sendMachineData+0xf8>)
 8000982:	9100      	str	r1, [sp, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4923      	ldr	r1, [pc, #140]	; (8000a18 <sendMachineData+0xfc>)
 800098a:	f00b fdf9 	bl	800c580 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 800098e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fc46 	bl	8000224 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009a6:	491d      	ldr	r1, [pc, #116]	; (8000a1c <sendMachineData+0x100>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00b fde9 	bl	800c580 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc36 	bl	8000224 <strlen>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	f107 0110 	add.w	r1, r7, #16
 80009c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	f00a ff81 	bl	800b8d0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80009ce:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009d2:	f007 feb1 	bl	8008738 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80009d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fc22 	bl	8000224 <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	f00a ff6d 	bl	800b8d0 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 80009f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009fa:	f007 fe9d 	bl	8008738 <HAL_Delay>
}
 80009fe:	bf00      	nop
 8000a00:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	0800cdb8 	.word	0x0800cdb8
 8000a0c:	0800cdc8 	.word	0x0800cdc8
 8000a10:	20000298 	.word	0x20000298
 8000a14:	0800ce44 	.word	0x0800ce44
 8000a18:	0800cde8 	.word	0x0800cde8
 8000a1c:	0800ce58 	.word	0x0800ce58

08000a20 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af04      	add	r7, sp, #16
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <hata2EEPROM+0xa4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <hata2EEPROM+0xa8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a25      	ldr	r2, [pc, #148]	; (8000acc <hata2EEPROM+0xac>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a3e:	f000 f92b 	bl	8000c98 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a42:	e000      	b.n	8000a46 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a44:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e012      	b.n	8000a72 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <hata2EEPROM+0xa8>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <hata2EEPROM+0xac>)
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d107      	bne.n	8000a6c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <hata2EEPROM+0xa8>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	4919      	ldr	r1, [pc, #100]	; (8000acc <hata2EEPROM+0xac>)
 8000a66:	79fa      	ldrb	r2, [r7, #7]
 8000a68:	54ca      	strb	r2, [r1, r3]
					break;
 8000a6a:	e007      	b.n	8000a7c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <hata2EEPROM+0xa4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbe7      	blt.n	8000a4c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <hata2EEPROM+0xa8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b299      	uxth	r1, r3
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <hata2EEPROM+0xa4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	b298      	uxth	r0, r3
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <hata2EEPROM+0xa8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <hata2EEPROM+0xac>)
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <hata2EEPROM+0xa4>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	b292      	uxth	r2, r2
 8000a96:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a9a:	9402      	str	r4, [sp, #8]
 8000a9c:	9201      	str	r2, [sp, #4]
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	460a      	mov	r2, r1
 8000aa4:	21a0      	movs	r1, #160	; 0xa0
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <hata2EEPROM+0xb0>)
 8000aa8:	f008 fed0 	bl	800984c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab0:	f007 fe42 	bl	8008738 <HAL_Delay>
	eepromKontrol(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fbbd 	bl	8000234 <eepromKontrol>
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000098 	.word	0x20000098
 8000ac8:	2000009c 	.word	0x2000009c
 8000acc:	2000012c 	.word	0x2000012c
 8000ad0:	200003bc 	.word	0x200003bc

08000ad4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d11d      	bne.n	8000b20 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000ae4:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d105      	bne.n	8000af8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000aec:	4a61      	ldr	r2, [pc, #388]	; (8000c74 <hataKoduLcdGoster+0x1a0>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	2001      	movs	r0, #1
 8000af2:	f007 f8cb 	bl	8007c8c <lcd_print>
 8000af6:	e008      	b.n	8000b0a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000af8:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d104      	bne.n	8000b0a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b00:	4a5d      	ldr	r2, [pc, #372]	; (8000c78 <hataKoduLcdGoster+0x1a4>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	2001      	movs	r0, #1
 8000b06:	f007 f8c1 	bl	8007c8c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b0a:	4a5c      	ldr	r2, [pc, #368]	; (8000c7c <hataKoduLcdGoster+0x1a8>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f007 f8bc 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b14:	4a5a      	ldr	r2, [pc, #360]	; (8000c80 <hataKoduLcdGoster+0x1ac>)
 8000b16:	2107      	movs	r1, #7
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f007 f8b7 	bl	8007c8c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b1e:	e0a3      	b.n	8000c68 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d11d      	bne.n	8000b62 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b26:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d105      	bne.n	8000b3a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b2e:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <hataKoduLcdGoster+0x1a0>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	2001      	movs	r0, #1
 8000b34:	f007 f8aa 	bl	8007c8c <lcd_print>
 8000b38:	e008      	b.n	8000b4c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b3a:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d104      	bne.n	8000b4c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b42:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <hataKoduLcdGoster+0x1a4>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	2001      	movs	r0, #1
 8000b48:	f007 f8a0 	bl	8007c8c <lcd_print>
		lcd_print(2, 2, "2");
 8000b4c:	4a4d      	ldr	r2, [pc, #308]	; (8000c84 <hataKoduLcdGoster+0x1b0>)
 8000b4e:	2102      	movs	r1, #2
 8000b50:	2002      	movs	r0, #2
 8000b52:	f007 f89b 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b56:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <hataKoduLcdGoster+0x1ac>)
 8000b58:	2107      	movs	r1, #7
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f007 f896 	bl	8007c8c <lcd_print>
}
 8000b60:	e082      	b.n	8000c68 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d11d      	bne.n	8000ba4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d105      	bne.n	8000b7c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b70:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <hataKoduLcdGoster+0x1a0>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	2001      	movs	r0, #1
 8000b76:	f007 f889 	bl	8007c8c <lcd_print>
 8000b7a:	e008      	b.n	8000b8e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d104      	bne.n	8000b8e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b84:	4a3c      	ldr	r2, [pc, #240]	; (8000c78 <hataKoduLcdGoster+0x1a4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f007 f87f 	bl	8007c8c <lcd_print>
		lcd_print(2, 3, "3");
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	; (8000c88 <hataKoduLcdGoster+0x1b4>)
 8000b90:	2103      	movs	r1, #3
 8000b92:	2002      	movs	r0, #2
 8000b94:	f007 f87a 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b98:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <hataKoduLcdGoster+0x1ac>)
 8000b9a:	2107      	movs	r1, #7
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f007 f875 	bl	8007c8c <lcd_print>
}
 8000ba2:	e061      	b.n	8000c68 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d11d      	bne.n	8000be6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d105      	bne.n	8000bbe <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000bb2:	4a30      	ldr	r2, [pc, #192]	; (8000c74 <hataKoduLcdGoster+0x1a0>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f007 f868 	bl	8007c8c <lcd_print>
 8000bbc:	e008      	b.n	8000bd0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d104      	bne.n	8000bd0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000bc6:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <hataKoduLcdGoster+0x1a4>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f007 f85e 	bl	8007c8c <lcd_print>
		lcd_print(2, 4, "4");
 8000bd0:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <hataKoduLcdGoster+0x1b8>)
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f007 f859 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bda:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <hataKoduLcdGoster+0x1ac>)
 8000bdc:	2107      	movs	r1, #7
 8000bde:	2002      	movs	r0, #2
 8000be0:	f007 f854 	bl	8007c8c <lcd_print>
}
 8000be4:	e040      	b.n	8000c68 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	d11d      	bne.n	8000c28 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <hataKoduLcdGoster+0x1a0>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f007 f847 	bl	8007c8c <lcd_print>
 8000bfe:	e008      	b.n	8000c12 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <hataKoduLcdGoster+0x1a4>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f007 f83d 	bl	8007c8c <lcd_print>
		lcd_print(2, 5, "5");
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <hataKoduLcdGoster+0x1bc>)
 8000c14:	2105      	movs	r1, #5
 8000c16:	2002      	movs	r0, #2
 8000c18:	f007 f838 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c1c:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <hataKoduLcdGoster+0x1ac>)
 8000c1e:	2107      	movs	r1, #7
 8000c20:	2002      	movs	r0, #2
 8000c22:	f007 f833 	bl	8007c8c <lcd_print>
}
 8000c26:	e01f      	b.n	8000c68 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d11c      	bne.n	8000c68 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <hataKoduLcdGoster+0x1a0>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f007 f826 	bl	8007c8c <lcd_print>
 8000c40:	e008      	b.n	8000c54 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <hataKoduLcdGoster+0x19c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d104      	bne.n	8000c54 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <hataKoduLcdGoster+0x1a4>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f007 f81c 	bl	8007c8c <lcd_print>
		lcd_print(2, 6, "6");
 8000c54:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <hataKoduLcdGoster+0x1c0>)
 8000c56:	2106      	movs	r1, #6
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f007 f817 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <hataKoduLcdGoster+0x1ac>)
 8000c60:	2107      	movs	r1, #7
 8000c62:	2002      	movs	r0, #2
 8000c64:	f007 f812 	bl	8007c8c <lcd_print>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000255 	.word	0x20000255
 8000c74:	0800cee4 	.word	0x0800cee4
 8000c78:	0800cef4 	.word	0x0800cef4
 8000c7c:	0800cf04 	.word	0x0800cf04
 8000c80:	0800cf08 	.word	0x0800cf08
 8000c84:	0800cf14 	.word	0x0800cf14
 8000c88:	0800cf18 	.word	0x0800cf18
 8000c8c:	0800cf1c 	.word	0x0800cf1c
 8000c90:	0800cf20 	.word	0x0800cf20
 8000c94:	0800cf24 	.word	0x0800cf24

08000c98 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e009      	b.n	8000cb8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <eepromDataFillWithEmpty+0x38>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <eepromDataFillWithEmpty+0x3c>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <eepromDataFillWithEmpty+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbf0      	blt.n	8000ca4 <eepromDataFillWithEmpty+0xc>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000070 	.word	0x20000070
 8000cd4:	2000012c 	.word	0x2000012c
 8000cd8:	20000098 	.word	0x20000098

08000cdc <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000cee:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <i2cTest+0x154>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <i2cTest+0x154>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000cfe:	484c      	ldr	r0, [pc, #304]	; (8000e30 <i2cTest+0x154>)
 8000d00:	f008 fc76 	bl	80095f0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d04:	23c0      	movs	r3, #192	; 0xc0
 8000d06:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d08:	2311      	movs	r3, #17
 8000d0a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4846      	ldr	r0, [pc, #280]	; (8000e34 <i2cTest+0x158>)
 8000d1a:	f008 f87d 	bl	8008e18 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	4844      	ldr	r0, [pc, #272]	; (8000e34 <i2cTest+0x158>)
 8000d24:	f008 faef 	bl	8009306 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	4841      	ldr	r0, [pc, #260]	; (8000e34 <i2cTest+0x158>)
 8000d2e:	f008 faea 	bl	8009306 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d32:	200a      	movs	r0, #10
 8000d34:	f007 fd00 	bl	8008738 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d38:	bf00      	nop
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	483d      	ldr	r0, [pc, #244]	; (8000e34 <i2cTest+0x158>)
 8000d3e:	f008 facb 	bl	80092d8 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d006      	beq.n	8000d56 <i2cTest+0x7a>
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	483a      	ldr	r0, [pc, #232]	; (8000e34 <i2cTest+0x158>)
 8000d4c:	f008 fac4 	bl	80092d8 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d1f1      	bne.n	8000d3a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	4836      	ldr	r0, [pc, #216]	; (8000e34 <i2cTest+0x158>)
 8000d5c:	f008 fad3 	bl	8009306 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000d60:	200a      	movs	r0, #10
 8000d62:	f007 fce9 	bl	8008738 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d66:	bf00      	nop
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	4832      	ldr	r0, [pc, #200]	; (8000e34 <i2cTest+0x158>)
 8000d6c:	f008 fab4 	bl	80092d8 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d0f8      	beq.n	8000d68 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	482e      	ldr	r0, [pc, #184]	; (8000e34 <i2cTest+0x158>)
 8000d7c:	f008 fac3 	bl	8009306 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d80:	200a      	movs	r0, #10
 8000d82:	f007 fcd9 	bl	8008738 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d86:	bf00      	nop
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	482a      	ldr	r0, [pc, #168]	; (8000e34 <i2cTest+0x158>)
 8000d8c:	f008 faa4 	bl	80092d8 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d0f8      	beq.n	8000d88 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	4826      	ldr	r0, [pc, #152]	; (8000e34 <i2cTest+0x158>)
 8000d9c:	f008 fab3 	bl	8009306 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f007 fcc9 	bl	8008738 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000da6:	bf00      	nop
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	4822      	ldr	r0, [pc, #136]	; (8000e34 <i2cTest+0x158>)
 8000dac:	f008 fa94 	bl	80092d8 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d1f8      	bne.n	8000da8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	481e      	ldr	r0, [pc, #120]	; (8000e34 <i2cTest+0x158>)
 8000dbc:	f008 faa3 	bl	8009306 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f007 fcb9 	bl	8008738 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000dc6:	bf00      	nop
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <i2cTest+0x158>)
 8000dcc:	f008 fa84 	bl	80092d8 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d1f8      	bne.n	8000dc8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd6:	23c0      	movs	r3, #192	; 0xc0
 8000dd8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <i2cTest+0x158>)
 8000dec:	f008 f814 	bl	8008e18 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <i2cTest+0x154>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <i2cTest+0x154>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dfe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <i2cTest+0x154>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <i2cTest+0x154>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e0e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <i2cTest+0x154>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <i2cTest+0x154>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <i2cTest+0x154>)
 8000e22:	f008 faa1 	bl	8009368 <HAL_I2C_Init>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200003bc 	.word	0x200003bc
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e42:	20c8      	movs	r0, #200	; 0xc8
 8000e44:	f007 fc78 	bl	8008738 <HAL_Delay>
	lcd_clear();
 8000e48:	f006 ff4c 	bl	8007ce4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d143      	bne.n	8000eda <printTemplate+0xa2>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d140      	bne.n	8000eda <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000e58:	4a9d      	ldr	r2, [pc, #628]	; (80010d0 <printTemplate+0x298>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f006 ff15 	bl	8007c8c <lcd_print>
		lcd_print(2, 3, "0");
 8000e62:	4a9c      	ldr	r2, [pc, #624]	; (80010d4 <printTemplate+0x29c>)
 8000e64:	2103      	movs	r1, #3
 8000e66:	2002      	movs	r0, #2
 8000e68:	f006 ff10 	bl	8007c8c <lcd_print>
		lcd_print(2, 4, "1");
 8000e6c:	4a9a      	ldr	r2, [pc, #616]	; (80010d8 <printTemplate+0x2a0>)
 8000e6e:	2104      	movs	r1, #4
 8000e70:	2002      	movs	r0, #2
 8000e72:	f006 ff0b 	bl	8007c8c <lcd_print>
		lcd_print(2, 5, "2");
 8000e76:	4a99      	ldr	r2, [pc, #612]	; (80010dc <printTemplate+0x2a4>)
 8000e78:	2105      	movs	r1, #5
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f006 ff06 	bl	8007c8c <lcd_print>
		lcd_print(2, 6, "3");
 8000e80:	4a97      	ldr	r2, [pc, #604]	; (80010e0 <printTemplate+0x2a8>)
 8000e82:	2106      	movs	r1, #6
 8000e84:	2002      	movs	r0, #2
 8000e86:	f006 ff01 	bl	8007c8c <lcd_print>
		lcd_print(2, 7, "4");
 8000e8a:	4a96      	ldr	r2, [pc, #600]	; (80010e4 <printTemplate+0x2ac>)
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f006 fefc 	bl	8007c8c <lcd_print>
		lcd_print(2, 10, "5");
 8000e94:	4a94      	ldr	r2, [pc, #592]	; (80010e8 <printTemplate+0x2b0>)
 8000e96:	210a      	movs	r1, #10
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f006 fef7 	bl	8007c8c <lcd_print>
		lcd_print(2, 11, "6");
 8000e9e:	4a93      	ldr	r2, [pc, #588]	; (80010ec <printTemplate+0x2b4>)
 8000ea0:	210b      	movs	r1, #11
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f006 fef2 	bl	8007c8c <lcd_print>
		lcd_print(2, 12, "7");
 8000ea8:	4a91      	ldr	r2, [pc, #580]	; (80010f0 <printTemplate+0x2b8>)
 8000eaa:	210c      	movs	r1, #12
 8000eac:	2002      	movs	r0, #2
 8000eae:	f006 feed 	bl	8007c8c <lcd_print>
		lcd_print(2, 13, "8");
 8000eb2:	4a90      	ldr	r2, [pc, #576]	; (80010f4 <printTemplate+0x2bc>)
 8000eb4:	210d      	movs	r1, #13
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f006 fee8 	bl	8007c8c <lcd_print>
		lcd_print(2, 14, "9");
 8000ebc:	4a8e      	ldr	r2, [pc, #568]	; (80010f8 <printTemplate+0x2c0>)
 8000ebe:	210e      	movs	r1, #14
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f006 fee3 	bl	8007c8c <lcd_print>
		lcd_print(1, 5, machineID);
 8000ec6:	4a8d      	ldr	r2, [pc, #564]	; (80010fc <printTemplate+0x2c4>)
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f006 fede 	bl	8007c8c <lcd_print>
		lcd_gotoxy(2, 3);
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f006 febb 	bl	8007c4e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000ed8:	e0f5      	b.n	80010c6 <printTemplate+0x28e>
	} else if(type == 2) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d178      	bne.n	8000fd2 <printTemplate+0x19a>
		if(page == 1) {
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d114      	bne.n	8000f10 <printTemplate+0xd8>
			lcd_clear();
 8000ee6:	f006 fefd 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f007 fc24 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ef0:	4a83      	ldr	r2, [pc, #524]	; (8001100 <printTemplate+0x2c8>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f006 fec9 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000efa:	4a82      	ldr	r2, [pc, #520]	; (8001104 <printTemplate+0x2cc>)
 8000efc:	2107      	movs	r1, #7
 8000efe:	2001      	movs	r0, #1
 8000f00:	f006 fec4 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f04:	4a80      	ldr	r2, [pc, #512]	; (8001108 <printTemplate+0x2d0>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f006 febf 	bl	8007c8c <lcd_print>
}
 8000f0e:	e0da      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d114      	bne.n	8000f40 <printTemplate+0x108>
			lcd_clear();
 8000f16:	f006 fee5 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f007 fc0c 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f20:	4a77      	ldr	r2, [pc, #476]	; (8001100 <printTemplate+0x2c8>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	2001      	movs	r0, #1
 8000f26:	f006 feb1 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f2a:	4a76      	ldr	r2, [pc, #472]	; (8001104 <printTemplate+0x2cc>)
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f006 feac 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f34:	4a75      	ldr	r2, [pc, #468]	; (800110c <printTemplate+0x2d4>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f006 fea7 	bl	8007c8c <lcd_print>
}
 8000f3e:	e0c2      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d114      	bne.n	8000f70 <printTemplate+0x138>
			lcd_clear();
 8000f46:	f006 fecd 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f007 fbf4 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f50:	4a6b      	ldr	r2, [pc, #428]	; (8001100 <printTemplate+0x2c8>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2001      	movs	r0, #1
 8000f56:	f006 fe99 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f5a:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <printTemplate+0x2cc>)
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f006 fe94 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f64:	4a6a      	ldr	r2, [pc, #424]	; (8001110 <printTemplate+0x2d8>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f006 fe8f 	bl	8007c8c <lcd_print>
}
 8000f6e:	e0aa      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 4) {
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d114      	bne.n	8000fa0 <printTemplate+0x168>
			lcd_clear();
 8000f76:	f006 feb5 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f007 fbdc 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f80:	4a5f      	ldr	r2, [pc, #380]	; (8001100 <printTemplate+0x2c8>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2001      	movs	r0, #1
 8000f86:	f006 fe81 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	; (8001104 <printTemplate+0x2cc>)
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f006 fe7c 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f94:	4a5f      	ldr	r2, [pc, #380]	; (8001114 <printTemplate+0x2dc>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f006 fe77 	bl	8007c8c <lcd_print>
}
 8000f9e:	e092      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 5) {
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	f040 808f 	bne.w	80010c6 <printTemplate+0x28e>
			lcd_clear();
 8000fa8:	f006 fe9c 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8000fac:	2064      	movs	r0, #100	; 0x64
 8000fae:	f007 fbc3 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fb2:	4a53      	ldr	r2, [pc, #332]	; (8001100 <printTemplate+0x2c8>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f006 fe68 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fbc:	4a51      	ldr	r2, [pc, #324]	; (8001104 <printTemplate+0x2cc>)
 8000fbe:	2107      	movs	r1, #7
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f006 fe63 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000fc6:	4a54      	ldr	r2, [pc, #336]	; (8001118 <printTemplate+0x2e0>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f006 fe5e 	bl	8007c8c <lcd_print>
}
 8000fd0:	e079      	b.n	80010c6 <printTemplate+0x28e>
	} else if(type == 3) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d176      	bne.n	80010c6 <printTemplate+0x28e>
		if(page == 1) {
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d114      	bne.n	8001008 <printTemplate+0x1d0>
			lcd_clear();
 8000fde:	f006 fe81 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f007 fba8 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <printTemplate+0x2e4>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2001      	movs	r0, #1
 8000fee:	f006 fe4d 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ff2:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <printTemplate+0x2e8>)
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f006 fe48 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ffc:	4a42      	ldr	r2, [pc, #264]	; (8001108 <printTemplate+0x2d0>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2002      	movs	r0, #2
 8001002:	f006 fe43 	bl	8007c8c <lcd_print>
}
 8001006:	e05e      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 2) {
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d114      	bne.n	8001038 <printTemplate+0x200>
			lcd_clear();
 800100e:	f006 fe69 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	f007 fb90 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001018:	4a40      	ldr	r2, [pc, #256]	; (800111c <printTemplate+0x2e4>)
 800101a:	2101      	movs	r1, #1
 800101c:	2001      	movs	r0, #1
 800101e:	f006 fe35 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001022:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <printTemplate+0x2e8>)
 8001024:	2107      	movs	r1, #7
 8001026:	2001      	movs	r0, #1
 8001028:	f006 fe30 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800102c:	4a37      	ldr	r2, [pc, #220]	; (800110c <printTemplate+0x2d4>)
 800102e:	2101      	movs	r1, #1
 8001030:	2002      	movs	r0, #2
 8001032:	f006 fe2b 	bl	8007c8c <lcd_print>
}
 8001036:	e046      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 3) {
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d114      	bne.n	8001068 <printTemplate+0x230>
			lcd_clear();
 800103e:	f006 fe51 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f007 fb78 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <printTemplate+0x2e4>)
 800104a:	2101      	movs	r1, #1
 800104c:	2001      	movs	r0, #1
 800104e:	f006 fe1d 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <printTemplate+0x2e8>)
 8001054:	2107      	movs	r1, #7
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fe18 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800105c:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <printTemplate+0x2d8>)
 800105e:	2101      	movs	r1, #1
 8001060:	2002      	movs	r0, #2
 8001062:	f006 fe13 	bl	8007c8c <lcd_print>
}
 8001066:	e02e      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 4) {
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d114      	bne.n	8001098 <printTemplate+0x260>
			lcd_clear();
 800106e:	f006 fe39 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f007 fb60 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001078:	4a28      	ldr	r2, [pc, #160]	; (800111c <printTemplate+0x2e4>)
 800107a:	2101      	movs	r1, #1
 800107c:	2001      	movs	r0, #1
 800107e:	f006 fe05 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <printTemplate+0x2e8>)
 8001084:	2107      	movs	r1, #7
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fe00 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <printTemplate+0x2dc>)
 800108e:	2101      	movs	r1, #1
 8001090:	2002      	movs	r0, #2
 8001092:	f006 fdfb 	bl	8007c8c <lcd_print>
}
 8001096:	e016      	b.n	80010c6 <printTemplate+0x28e>
		} else if(page == 5) {
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b05      	cmp	r3, #5
 800109c:	d113      	bne.n	80010c6 <printTemplate+0x28e>
			lcd_clear();
 800109e:	f006 fe21 	bl	8007ce4 <lcd_clear>
			HAL_Delay(100);
 80010a2:	2064      	movs	r0, #100	; 0x64
 80010a4:	f007 fb48 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <printTemplate+0x2e4>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2001      	movs	r0, #1
 80010ae:	f006 fded 	bl	8007c8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <printTemplate+0x2e8>)
 80010b4:	2107      	movs	r1, #7
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fde8 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80010bc:	4a16      	ldr	r2, [pc, #88]	; (8001118 <printTemplate+0x2e0>)
 80010be:	2101      	movs	r1, #1
 80010c0:	2002      	movs	r0, #2
 80010c2:	f006 fde3 	bl	8007c8c <lcd_print>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0800cf28 	.word	0x0800cf28
 80010d4:	0800cf30 	.word	0x0800cf30
 80010d8:	0800cf34 	.word	0x0800cf34
 80010dc:	0800cf38 	.word	0x0800cf38
 80010e0:	0800cf3c 	.word	0x0800cf3c
 80010e4:	0800cf40 	.word	0x0800cf40
 80010e8:	0800cf44 	.word	0x0800cf44
 80010ec:	0800cf48 	.word	0x0800cf48
 80010f0:	0800cf4c 	.word	0x0800cf4c
 80010f4:	0800cf50 	.word	0x0800cf50
 80010f8:	0800cf54 	.word	0x0800cf54
 80010fc:	200001a4 	.word	0x200001a4
 8001100:	0800cf58 	.word	0x0800cf58
 8001104:	200001b0 	.word	0x200001b0
 8001108:	0800cf60 	.word	0x0800cf60
 800110c:	0800cf74 	.word	0x0800cf74
 8001110:	0800cf88 	.word	0x0800cf88
 8001114:	0800cf9c 	.word	0x0800cf9c
 8001118:	0800cfb0 	.word	0x0800cfb0
 800111c:	0800cfc4 	.word	0x0800cfc4
 8001120:	200001c4 	.word	0x200001c4

08001124 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001128:	f3bf 8f4f 	dsb	sy
}
 800112c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__NVIC_SystemReset+0x24>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001136:	4904      	ldr	r1, [pc, #16]	; (8001148 <__NVIC_SystemReset+0x24>)
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_SystemReset+0x28>)
 800113a:	4313      	orrs	r3, r2
 800113c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800113e:	f3bf 8f4f 	dsb	sy
}
 8001142:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <__NVIC_SystemReset+0x20>
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	05fa0004 	.word	0x05fa0004

08001150 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001156:	2101      	movs	r1, #1
 8001158:	488e      	ldr	r0, [pc, #568]	; (8001394 <menu+0x244>)
 800115a:	f008 f8bd 	bl	80092d8 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	f040 808e 	bne.w	8001282 <menu+0x132>
 8001166:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <menu+0x248>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8086 	beq.w	8001282 <menu+0x132>
		menuSayac = menuSayac+1;
 8001176:	4b89      	ldr	r3, [pc, #548]	; (800139c <menu+0x24c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b87      	ldr	r3, [pc, #540]	; (800139c <menu+0x24c>)
 8001180:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <menu+0x24c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b24      	cmp	r3, #36	; 0x24
 8001188:	d102      	bne.n	8001190 <menu+0x40>
			menuSayac = 1;
 800118a:	4b84      	ldr	r3, [pc, #528]	; (800139c <menu+0x24c>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001190:	4b82      	ldr	r3, [pc, #520]	; (800139c <menu+0x24c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d106      	bne.n	80011a6 <menu+0x56>
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <menu+0x250>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <menu+0x56>
			menuSayac = 21;
 80011a0:	4b7e      	ldr	r3, [pc, #504]	; (800139c <menu+0x24c>)
 80011a2:	2215      	movs	r2, #21
 80011a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <menu+0x24c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d106      	bne.n	80011bc <menu+0x6c>
 80011ae:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <menu+0x254>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <menu+0x6c>
			menuSayac = 16;
 80011b6:	4b79      	ldr	r3, [pc, #484]	; (800139c <menu+0x24c>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80011bc:	4b77      	ldr	r3, [pc, #476]	; (800139c <menu+0x24c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b0d      	cmp	r3, #13
 80011c2:	d106      	bne.n	80011d2 <menu+0x82>
 80011c4:	4b77      	ldr	r3, [pc, #476]	; (80013a4 <menu+0x254>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <menu+0x82>
			menuSayac = 16;
 80011cc:	4b73      	ldr	r3, [pc, #460]	; (800139c <menu+0x24c>)
 80011ce:	2210      	movs	r2, #16
 80011d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80011d2:	4b72      	ldr	r3, [pc, #456]	; (800139c <menu+0x24c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b09      	cmp	r3, #9
 80011d8:	d106      	bne.n	80011e8 <menu+0x98>
 80011da:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <menu+0x254>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d102      	bne.n	80011e8 <menu+0x98>
			menuSayac = 13;
 80011e2:	4b6e      	ldr	r3, [pc, #440]	; (800139c <menu+0x24c>)
 80011e4:	220d      	movs	r2, #13
 80011e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80011e8:	4b6c      	ldr	r3, [pc, #432]	; (800139c <menu+0x24c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b0a      	cmp	r3, #10
 80011ee:	d10a      	bne.n	8001206 <menu+0xb6>
 80011f0:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <menu+0x258>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d003      	beq.n	8001200 <menu+0xb0>
 80011f8:	4b6b      	ldr	r3, [pc, #428]	; (80013a8 <menu+0x258>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d102      	bne.n	8001206 <menu+0xb6>
			menuSayac = 11;
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <menu+0x24c>)
 8001202:	220b      	movs	r2, #11
 8001204:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <menu+0x24c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d10e      	bne.n	800122c <menu+0xdc>
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <menu+0x25c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d003      	beq.n	800121e <menu+0xce>
 8001216:	4b65      	ldr	r3, [pc, #404]	; (80013ac <menu+0x25c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d106      	bne.n	800122c <menu+0xdc>
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <menu+0x254>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <menu+0xdc>
			menuSayac = 16;
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <menu+0x24c>)
 8001228:	2210      	movs	r2, #16
 800122a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <menu+0x24c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	d10e      	bne.n	8001252 <menu+0x102>
 8001234:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <menu+0x25c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d003      	beq.n	8001244 <menu+0xf4>
 800123c:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <menu+0x25c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d106      	bne.n	8001252 <menu+0x102>
 8001244:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <menu+0x254>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d102      	bne.n	8001252 <menu+0x102>
			menuSayac = 13;
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <menu+0x24c>)
 800124e:	220d      	movs	r2, #13
 8001250:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <menu+0x24c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	d106      	bne.n	8001268 <menu+0x118>
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <menu+0x260>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d102      	bne.n	8001268 <menu+0x118>
			menuSayac = 16;
 8001262:	4b4e      	ldr	r3, [pc, #312]	; (800139c <menu+0x24c>)
 8001264:	2210      	movs	r2, #16
 8001266:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <menu+0x24c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b18      	cmp	r3, #24
 800126e:	d106      	bne.n	800127e <menu+0x12e>
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <menu+0x250>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <menu+0x12e>
			menuSayac = 26;
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <menu+0x24c>)
 800127a:	221a      	movs	r2, #26
 800127c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800127e:	f003 fb3d 	bl	80048fc <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001282:	2108      	movs	r1, #8
 8001284:	484b      	ldr	r0, [pc, #300]	; (80013b4 <menu+0x264>)
 8001286:	f008 f827 	bl	80092d8 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	d175      	bne.n	800137c <menu+0x22c>
 8001290:	4b41      	ldr	r3, [pc, #260]	; (8001398 <menu+0x248>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d06e      	beq.n	800137c <menu+0x22c>
		if (menuSayac <= 1) {
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <menu+0x24c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d802      	bhi.n	80012ac <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <menu+0x24c>)
 80012a8:	2224      	movs	r2, #36	; 0x24
 80012aa:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <menu+0x24c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <menu+0x24c>)
 80012b6:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <menu+0x24c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b14      	cmp	r3, #20
 80012be:	d106      	bne.n	80012ce <menu+0x17e>
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <menu+0x250>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <menu+0x17e>
			menuSayac = 17;
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <menu+0x24c>)
 80012ca:	2211      	movs	r2, #17
 80012cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <menu+0x24c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d106      	bne.n	80012e4 <menu+0x194>
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <menu+0x254>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <menu+0x194>
			menuSayac = 7;
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <menu+0x24c>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <menu+0x24c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d106      	bne.n	80012fa <menu+0x1aa>
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <menu+0x254>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d102      	bne.n	80012fa <menu+0x1aa>
			menuSayac = 12;
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <menu+0x24c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <menu+0x24c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d106      	bne.n	8001310 <menu+0x1c0>
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <menu+0x254>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d102      	bne.n	8001310 <menu+0x1c0>
			menuSayac = 8;
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <menu+0x24c>)
 800130c:	2208      	movs	r2, #8
 800130e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <menu+0x24c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b0a      	cmp	r3, #10
 8001316:	d10a      	bne.n	800132e <menu+0x1de>
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <menu+0x258>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d003      	beq.n	8001328 <menu+0x1d8>
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <menu+0x258>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d102      	bne.n	800132e <menu+0x1de>
			menuSayac = 9;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <menu+0x24c>)
 800132a:	2209      	movs	r2, #9
 800132c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <menu+0x24c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d10a      	bne.n	800134c <menu+0x1fc>
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <menu+0x25c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d003      	beq.n	8001346 <menu+0x1f6>
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <menu+0x25c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d102      	bne.n	800134c <menu+0x1fc>
			menuSayac = 11;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <menu+0x24c>)
 8001348:	220b      	movs	r2, #11
 800134a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <menu+0x24c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d106      	bne.n	8001362 <menu+0x212>
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <menu+0x260>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <menu+0x212>
			menuSayac = 14;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <menu+0x24c>)
 800135e:	220e      	movs	r2, #14
 8001360:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <menu+0x24c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b19      	cmp	r3, #25
 8001368:	d106      	bne.n	8001378 <menu+0x228>
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <menu+0x250>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <menu+0x228>
			menuSayac = 23;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <menu+0x24c>)
 8001374:	2217      	movs	r2, #23
 8001376:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001378:	f003 fac0 	bl	80048fc <bekle>
	}

	if (menuSayac == 0) {
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <menu+0x24c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d133      	bne.n	80013ec <menu+0x29c>
		if(dilSecim == 0) {
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <menu+0x268>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d121      	bne.n	80013d0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <menu+0x26c>)
 800138e:	2101      	movs	r1, #1
 8001390:	2001      	movs	r0, #1
 8001392:	e015      	b.n	80013c0 <menu+0x270>
 8001394:	40010800 	.word	0x40010800
 8001398:	20000263 	.word	0x20000263
 800139c:	20000234 	.word	0x20000234
 80013a0:	20000243 	.word	0x20000243
 80013a4:	2000023c 	.word	0x2000023c
 80013a8:	2000023d 	.word	0x2000023d
 80013ac:	2000023e 	.word	0x2000023e
 80013b0:	2000023f 	.word	0x2000023f
 80013b4:	40011000 	.word	0x40011000
 80013b8:	20000255 	.word	0x20000255
 80013bc:	0800cfcc 	.word	0x0800cfcc
 80013c0:	f006 fc64 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80013c4:	4a94      	ldr	r2, [pc, #592]	; (8001618 <menu+0x4c8>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	2002      	movs	r0, #2
 80013ca:	f006 fc5f 	bl	8007c8c <lcd_print>
 80013ce:	e00d      	b.n	80013ec <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <menu+0x4cc>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d109      	bne.n	80013ec <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80013d8:	4a91      	ldr	r2, [pc, #580]	; (8001620 <menu+0x4d0>)
 80013da:	2101      	movs	r1, #1
 80013dc:	2001      	movs	r0, #1
 80013de:	f006 fc55 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80013e2:	4a90      	ldr	r2, [pc, #576]	; (8001624 <menu+0x4d4>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	2002      	movs	r0, #2
 80013e8:	f006 fc50 	bl	8007c8c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80013ec:	4b8e      	ldr	r3, [pc, #568]	; (8001628 <menu+0x4d8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 82b5 	bne.w	8001960 <menu+0x810>
		if(dilSecim == 0) {
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <menu+0x4cc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80013fe:	4a8b      	ldr	r2, [pc, #556]	; (800162c <menu+0x4dc>)
 8001400:	2101      	movs	r1, #1
 8001402:	2001      	movs	r0, #1
 8001404:	f006 fc42 	bl	8007c8c <lcd_print>
 8001408:	e008      	b.n	800141c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800140a:	4b84      	ldr	r3, [pc, #528]	; (800161c <menu+0x4cc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d104      	bne.n	800141c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <menu+0x4e0>)
 8001414:	2101      	movs	r1, #1
 8001416:	2001      	movs	r0, #1
 8001418:	f006 fc38 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800141c:	4b85      	ldr	r3, [pc, #532]	; (8001634 <menu+0x4e4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d123      	bne.n	800146c <menu+0x31c>
			if(dilSecim == 0) {
 8001424:	4b7d      	ldr	r3, [pc, #500]	; (800161c <menu+0x4cc>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800142c:	4a82      	ldr	r2, [pc, #520]	; (8001638 <menu+0x4e8>)
 800142e:	2101      	movs	r1, #1
 8001430:	2002      	movs	r0, #2
 8001432:	f006 fc2b 	bl	8007c8c <lcd_print>
 8001436:	e008      	b.n	800144a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001438:	4b78      	ldr	r3, [pc, #480]	; (800161c <menu+0x4cc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d104      	bne.n	800144a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001440:	4a7e      	ldr	r2, [pc, #504]	; (800163c <menu+0x4ec>)
 8001442:	2101      	movs	r1, #1
 8001444:	2002      	movs	r0, #2
 8001446:	f006 fc21 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800144a:	4a7d      	ldr	r2, [pc, #500]	; (8001640 <menu+0x4f0>)
 800144c:	210f      	movs	r1, #15
 800144e:	2002      	movs	r0, #2
 8001450:	f006 fc1c 	bl	8007c8c <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001454:	4b7b      	ldr	r3, [pc, #492]	; (8001644 <menu+0x4f4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	220a      	movs	r2, #10
 800145a:	497b      	ldr	r1, [pc, #492]	; (8001648 <menu+0x4f8>)
 800145c:	4618      	mov	r0, r3
 800145e:	f00a ff91 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8001462:	4a79      	ldr	r2, [pc, #484]	; (8001648 <menu+0x4f8>)
 8001464:	210e      	movs	r1, #14
 8001466:	2002      	movs	r0, #2
 8001468:	f006 fc10 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800146c:	4b71      	ldr	r3, [pc, #452]	; (8001634 <menu+0x4e4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d123      	bne.n	80014bc <menu+0x36c>
			if(dilSecim == 0) {
 8001474:	4b69      	ldr	r3, [pc, #420]	; (800161c <menu+0x4cc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800147c:	4a73      	ldr	r2, [pc, #460]	; (800164c <menu+0x4fc>)
 800147e:	2101      	movs	r1, #1
 8001480:	2002      	movs	r0, #2
 8001482:	f006 fc03 	bl	8007c8c <lcd_print>
 8001486:	e008      	b.n	800149a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001488:	4b64      	ldr	r3, [pc, #400]	; (800161c <menu+0x4cc>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d104      	bne.n	800149a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001490:	4a6f      	ldr	r2, [pc, #444]	; (8001650 <menu+0x500>)
 8001492:	2101      	movs	r1, #1
 8001494:	2002      	movs	r0, #2
 8001496:	f006 fbf9 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800149a:	4a6e      	ldr	r2, [pc, #440]	; (8001654 <menu+0x504>)
 800149c:	210f      	movs	r1, #15
 800149e:	2002      	movs	r0, #2
 80014a0:	f006 fbf4 	bl	8007c8c <lcd_print>
			itoa(hataKayit2, snum, 10);
 80014a4:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <menu+0x508>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	220a      	movs	r2, #10
 80014aa:	4967      	ldr	r1, [pc, #412]	; (8001648 <menu+0x4f8>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00a ff69 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <menu+0x4f8>)
 80014b4:	210e      	movs	r1, #14
 80014b6:	2002      	movs	r0, #2
 80014b8:	f006 fbe8 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80014bc:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <menu+0x4e4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <menu+0x3bc>
			if(dilSecim == 0) {
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <menu+0x4cc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80014cc:	4a63      	ldr	r2, [pc, #396]	; (800165c <menu+0x50c>)
 80014ce:	2101      	movs	r1, #1
 80014d0:	2002      	movs	r0, #2
 80014d2:	f006 fbdb 	bl	8007c8c <lcd_print>
 80014d6:	e008      	b.n	80014ea <menu+0x39a>
			} else if(dilSecim == 1) {
 80014d8:	4b50      	ldr	r3, [pc, #320]	; (800161c <menu+0x4cc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d104      	bne.n	80014ea <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80014e0:	4a5f      	ldr	r2, [pc, #380]	; (8001660 <menu+0x510>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f006 fbd1 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014ea:	4a5a      	ldr	r2, [pc, #360]	; (8001654 <menu+0x504>)
 80014ec:	210f      	movs	r1, #15
 80014ee:	2002      	movs	r0, #2
 80014f0:	f006 fbcc 	bl	8007c8c <lcd_print>
			itoa(hataKayit3, snum, 10);
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <menu+0x514>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	220a      	movs	r2, #10
 80014fa:	4953      	ldr	r1, [pc, #332]	; (8001648 <menu+0x4f8>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00a ff41 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8001502:	4a51      	ldr	r2, [pc, #324]	; (8001648 <menu+0x4f8>)
 8001504:	210e      	movs	r1, #14
 8001506:	2002      	movs	r0, #2
 8001508:	f006 fbc0 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800150c:	4b49      	ldr	r3, [pc, #292]	; (8001634 <menu+0x4e4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d123      	bne.n	800155c <menu+0x40c>
			if(dilSecim == 0) {
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <menu+0x4cc>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <menu+0x518>)
 800151e:	2101      	movs	r1, #1
 8001520:	2002      	movs	r0, #2
 8001522:	f006 fbb3 	bl	8007c8c <lcd_print>
 8001526:	e008      	b.n	800153a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <menu+0x4cc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d104      	bne.n	800153a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001530:	4a4e      	ldr	r2, [pc, #312]	; (800166c <menu+0x51c>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 fba9 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800153a:	4a46      	ldr	r2, [pc, #280]	; (8001654 <menu+0x504>)
 800153c:	210f      	movs	r1, #15
 800153e:	2002      	movs	r0, #2
 8001540:	f006 fba4 	bl	8007c8c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <menu+0x520>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	220a      	movs	r2, #10
 800154a:	493f      	ldr	r1, [pc, #252]	; (8001648 <menu+0x4f8>)
 800154c:	4618      	mov	r0, r3
 800154e:	f00a ff19 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8001552:	4a3d      	ldr	r2, [pc, #244]	; (8001648 <menu+0x4f8>)
 8001554:	210e      	movs	r1, #14
 8001556:	2002      	movs	r0, #2
 8001558:	f006 fb98 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <menu+0x4e4>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d123      	bne.n	80015ac <menu+0x45c>
			if(dilSecim == 0) {
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <menu+0x4cc>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800156c:	4a41      	ldr	r2, [pc, #260]	; (8001674 <menu+0x524>)
 800156e:	2101      	movs	r1, #1
 8001570:	2002      	movs	r0, #2
 8001572:	f006 fb8b 	bl	8007c8c <lcd_print>
 8001576:	e008      	b.n	800158a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <menu+0x4cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d104      	bne.n	800158a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001580:	4a3d      	ldr	r2, [pc, #244]	; (8001678 <menu+0x528>)
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f006 fb81 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800158a:	4a32      	ldr	r2, [pc, #200]	; (8001654 <menu+0x504>)
 800158c:	210f      	movs	r1, #15
 800158e:	2002      	movs	r0, #2
 8001590:	f006 fb7c 	bl	8007c8c <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <menu+0x52c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	220a      	movs	r2, #10
 800159a:	492b      	ldr	r1, [pc, #172]	; (8001648 <menu+0x4f8>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fef1 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80015a2:	4a29      	ldr	r2, [pc, #164]	; (8001648 <menu+0x4f8>)
 80015a4:	210e      	movs	r1, #14
 80015a6:	2002      	movs	r0, #2
 80015a8:	f006 fb70 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <menu+0x4e4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d123      	bne.n	80015fc <menu+0x4ac>
			if(dilSecim == 0) {
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <menu+0x4cc>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <menu+0x530>)
 80015be:	2101      	movs	r1, #1
 80015c0:	2002      	movs	r0, #2
 80015c2:	f006 fb63 	bl	8007c8c <lcd_print>
 80015c6:	e008      	b.n	80015da <menu+0x48a>
			} else if(dilSecim == 1) {
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <menu+0x4cc>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80015d0:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <menu+0x534>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fb59 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <menu+0x504>)
 80015dc:	210f      	movs	r1, #15
 80015de:	2002      	movs	r0, #2
 80015e0:	f006 fb54 	bl	8007c8c <lcd_print>
			itoa(hataKayit6, snum, 10);
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <menu+0x538>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	220a      	movs	r2, #10
 80015ea:	4917      	ldr	r1, [pc, #92]	; (8001648 <menu+0x4f8>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a fec9 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <menu+0x4f8>)
 80015f4:	210e      	movs	r1, #14
 80015f6:	2002      	movs	r0, #2
 80015f8:	f006 fb48 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <menu+0x4e4>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b06      	cmp	r3, #6
 8001602:	d15f      	bne.n	80016c4 <menu+0x574>
			if(dilSecim == 0) {
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <menu+0x4cc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d141      	bne.n	8001690 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800160c:	4a1f      	ldr	r2, [pc, #124]	; (800168c <menu+0x53c>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f006 fb3b 	bl	8007c8c <lcd_print>
 8001616:	e044      	b.n	80016a2 <menu+0x552>
 8001618:	0800cfe0 	.word	0x0800cfe0
 800161c:	20000255 	.word	0x20000255
 8001620:	0800cff4 	.word	0x0800cff4
 8001624:	0800d008 	.word	0x0800d008
 8001628:	20000234 	.word	0x20000234
 800162c:	0800d01c 	.word	0x0800d01c
 8001630:	0800d030 	.word	0x0800d030
 8001634:	20000236 	.word	0x20000236
 8001638:	0800d044 	.word	0x0800d044
 800163c:	0800d054 	.word	0x0800d054
 8001640:	0800d064 	.word	0x0800d064
 8001644:	20000256 	.word	0x20000256
 8001648:	2000019c 	.word	0x2000019c
 800164c:	0800d068 	.word	0x0800d068
 8001650:	0800d078 	.word	0x0800d078
 8001654:	0800d088 	.word	0x0800d088
 8001658:	20000257 	.word	0x20000257
 800165c:	0800d08c 	.word	0x0800d08c
 8001660:	0800d09c 	.word	0x0800d09c
 8001664:	20000258 	.word	0x20000258
 8001668:	0800d0ac 	.word	0x0800d0ac
 800166c:	0800d0bc 	.word	0x0800d0bc
 8001670:	20000259 	.word	0x20000259
 8001674:	0800d0cc 	.word	0x0800d0cc
 8001678:	0800d0dc 	.word	0x0800d0dc
 800167c:	2000025a 	.word	0x2000025a
 8001680:	0800d0ec 	.word	0x0800d0ec
 8001684:	0800d0fc 	.word	0x0800d0fc
 8001688:	2000025b 	.word	0x2000025b
 800168c:	0800d10c 	.word	0x0800d10c
			} else if(dilSecim == 1) {
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <menu+0x680>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d104      	bne.n	80016a2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <menu+0x684>)
 800169a:	2101      	movs	r1, #1
 800169c:	2002      	movs	r0, #2
 800169e:	f006 faf5 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016a2:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <menu+0x688>)
 80016a4:	210f      	movs	r1, #15
 80016a6:	2002      	movs	r0, #2
 80016a8:	f006 faf0 	bl	8007c8c <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <menu+0x68c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	220a      	movs	r2, #10
 80016b2:	494b      	ldr	r1, [pc, #300]	; (80017e0 <menu+0x690>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a fe65 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <menu+0x690>)
 80016bc:	210e      	movs	r1, #14
 80016be:	2002      	movs	r0, #2
 80016c0:	f006 fae4 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80016c4:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <menu+0x694>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b07      	cmp	r3, #7
 80016ca:	d123      	bne.n	8001714 <menu+0x5c4>
			if(dilSecim == 0) {
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <menu+0x680>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <menu+0x698>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	2002      	movs	r0, #2
 80016da:	f006 fad7 	bl	8007c8c <lcd_print>
 80016de:	e008      	b.n	80016f2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80016e0:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <menu+0x680>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d104      	bne.n	80016f2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80016e8:	4a40      	ldr	r2, [pc, #256]	; (80017ec <menu+0x69c>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	2002      	movs	r0, #2
 80016ee:	f006 facd 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <menu+0x688>)
 80016f4:	210f      	movs	r1, #15
 80016f6:	2002      	movs	r0, #2
 80016f8:	f006 fac8 	bl	8007c8c <lcd_print>
			itoa(hataKayit8, snum, 10);
 80016fc:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <menu+0x6a0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	220a      	movs	r2, #10
 8001702:	4937      	ldr	r1, [pc, #220]	; (80017e0 <menu+0x690>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00a fe3d 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 800170a:	4a35      	ldr	r2, [pc, #212]	; (80017e0 <menu+0x690>)
 800170c:	210e      	movs	r1, #14
 800170e:	2002      	movs	r0, #2
 8001710:	f006 fabc 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <menu+0x694>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d123      	bne.n	8001764 <menu+0x614>
			if(dilSecim == 0) {
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <menu+0x680>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001724:	4a33      	ldr	r2, [pc, #204]	; (80017f4 <menu+0x6a4>)
 8001726:	2101      	movs	r1, #1
 8001728:	2002      	movs	r0, #2
 800172a:	f006 faaf 	bl	8007c8c <lcd_print>
 800172e:	e008      	b.n	8001742 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <menu+0x680>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d104      	bne.n	8001742 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <menu+0x6a8>)
 800173a:	2101      	movs	r1, #1
 800173c:	2002      	movs	r0, #2
 800173e:	f006 faa5 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001742:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <menu+0x688>)
 8001744:	210f      	movs	r1, #15
 8001746:	2002      	movs	r0, #2
 8001748:	f006 faa0 	bl	8007c8c <lcd_print>
			itoa(hataKayit9, snum, 10);
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <menu+0x6ac>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	220a      	movs	r2, #10
 8001752:	4923      	ldr	r1, [pc, #140]	; (80017e0 <menu+0x690>)
 8001754:	4618      	mov	r0, r3
 8001756:	f00a fe15 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <menu+0x690>)
 800175c:	210e      	movs	r1, #14
 800175e:	2002      	movs	r0, #2
 8001760:	f006 fa94 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <menu+0x694>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d123      	bne.n	80017b4 <menu+0x664>
			if(dilSecim == 0) {
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <menu+0x680>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <menu+0x6b0>)
 8001776:	2101      	movs	r1, #1
 8001778:	2002      	movs	r0, #2
 800177a:	f006 fa87 	bl	8007c8c <lcd_print>
 800177e:	e008      	b.n	8001792 <menu+0x642>
			} else if(dilSecim == 1) {
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <menu+0x680>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d104      	bne.n	8001792 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <menu+0x6b4>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f006 fa7d 	bl	8007c8c <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <menu+0x6b8>)
 8001794:	2110      	movs	r1, #16
 8001796:	2002      	movs	r0, #2
 8001798:	f006 fa78 	bl	8007c8c <lcd_print>
			itoa(hataKayit10, snum, 10);
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <menu+0x6bc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	220a      	movs	r2, #10
 80017a2:	490f      	ldr	r1, [pc, #60]	; (80017e0 <menu+0x690>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00a fded 	bl	800c384 <itoa>
			lcd_print(2, 15, snum);
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <menu+0x690>)
 80017ac:	210f      	movs	r1, #15
 80017ae:	2002      	movs	r0, #2
 80017b0:	f006 fa6c 	bl	8007c8c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <menu+0x694>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b0a      	cmp	r3, #10
 80017ba:	d134      	bne.n	8001826 <menu+0x6d6>
			if(dilSecim == 0) {
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <menu+0x680>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d127      	bne.n	8001814 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <menu+0x6c0>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	2002      	movs	r0, #2
 80017ca:	f006 fa5f 	bl	8007c8c <lcd_print>
 80017ce:	e02a      	b.n	8001826 <menu+0x6d6>
 80017d0:	20000255 	.word	0x20000255
 80017d4:	0800d11c 	.word	0x0800d11c
 80017d8:	0800d088 	.word	0x0800d088
 80017dc:	2000025c 	.word	0x2000025c
 80017e0:	2000019c 	.word	0x2000019c
 80017e4:	20000236 	.word	0x20000236
 80017e8:	0800d12c 	.word	0x0800d12c
 80017ec:	0800d13c 	.word	0x0800d13c
 80017f0:	2000025d 	.word	0x2000025d
 80017f4:	0800d14c 	.word	0x0800d14c
 80017f8:	0800d15c 	.word	0x0800d15c
 80017fc:	2000025e 	.word	0x2000025e
 8001800:	0800d16c 	.word	0x0800d16c
 8001804:	0800d17c 	.word	0x0800d17c
 8001808:	0800d18c 	.word	0x0800d18c
 800180c:	2000025f 	.word	0x2000025f
 8001810:	0800d190 	.word	0x0800d190
			} else if(dilSecim == 1) {
 8001814:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <menu+0x8d0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d104      	bne.n	8001826 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 800181c:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <menu+0x8d4>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 fa33 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001826:	2102      	movs	r1, #2
 8001828:	487f      	ldr	r0, [pc, #508]	; (8001a28 <menu+0x8d8>)
 800182a:	f007 fd55 	bl	80092d8 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b01      	cmp	r3, #1
 8001832:	d119      	bne.n	8001868 <menu+0x718>
 8001834:	4b7d      	ldr	r3, [pc, #500]	; (8001a2c <menu+0x8dc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d012      	beq.n	8001868 <menu+0x718>
 8001842:	4b7b      	ldr	r3, [pc, #492]	; (8001a30 <menu+0x8e0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10e      	bne.n	8001868 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800184a:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <menu+0x8e4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <menu+0x8e4>)
 8001854:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001856:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <menu+0x8e4>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b0a      	cmp	r3, #10
 800185c:	d902      	bls.n	8001864 <menu+0x714>
				hataGostermeSirasi = 0;
 800185e:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <menu+0x8e4>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001864:	f003 f84a 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001868:	2104      	movs	r1, #4
 800186a:	486f      	ldr	r0, [pc, #444]	; (8001a28 <menu+0x8d8>)
 800186c:	f007 fd34 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d119      	bne.n	80018aa <menu+0x75a>
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <menu+0x8dc>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d012      	beq.n	80018aa <menu+0x75a>
 8001884:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <menu+0x8e0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10e      	bne.n	80018aa <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800188c:	4b69      	ldr	r3, [pc, #420]	; (8001a34 <menu+0x8e4>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <menu+0x8e4>)
 8001896:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001898:	4b66      	ldr	r3, [pc, #408]	; (8001a34 <menu+0x8e4>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b0b      	cmp	r3, #11
 800189e:	d902      	bls.n	80018a6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 80018a0:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <menu+0x8e4>)
 80018a2:	220a      	movs	r2, #10
 80018a4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018a6:	f003 f829 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018aa:	2108      	movs	r1, #8
 80018ac:	485e      	ldr	r0, [pc, #376]	; (8001a28 <menu+0x8d8>)
 80018ae:	f007 fd13 	bl	80092d8 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d153      	bne.n	8001960 <menu+0x810>
 80018b8:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <menu+0x8dc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d04c      	beq.n	8001960 <menu+0x810>
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <menu+0x8e4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	d148      	bne.n	8001960 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <menu+0x8e8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <menu+0x8ec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <menu+0x8f0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <menu+0x8ec>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <menu+0x8f4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <menu+0x8ec>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <menu+0x8f8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <menu+0x8ec>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <menu+0x8fc>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <menu+0x8ec>)
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001914:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <menu+0x900>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <menu+0x8ec>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001922:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <menu+0x904>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <menu+0x8ec>)
 800192a:	2200      	movs	r2, #0
 800192c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001930:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <menu+0x908>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <menu+0x8ec>)
 8001938:	2200      	movs	r2, #0
 800193a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <menu+0x90c>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <menu+0x8ec>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <menu+0x910>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <menu+0x8ec>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <menu+0x914>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <menu+0x918>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	f040 80fc 	bne.w	8001b62 <menu+0xa12>
		if(dilSecim == 0) {
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <menu+0x8d0>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001972:	4a3e      	ldr	r2, [pc, #248]	; (8001a6c <menu+0x91c>)
 8001974:	2101      	movs	r1, #1
 8001976:	2001      	movs	r0, #1
 8001978:	f006 f988 	bl	8007c8c <lcd_print>
 800197c:	e008      	b.n	8001990 <menu+0x840>
		} else if(dilSecim == 1) {
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <menu+0x8d0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d104      	bne.n	8001990 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001986:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <menu+0x920>)
 8001988:	2101      	movs	r1, #1
 800198a:	2001      	movs	r0, #1
 800198c:	f006 f97e 	bl	8007c8c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <menu+0x8e0>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d003      	beq.n	80019a0 <menu+0x850>
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <menu+0x8e0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d112      	bne.n	80019c6 <menu+0x876>
			if(dilSecim == 0) {
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <menu+0x8d0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80019a8:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <menu+0x924>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	2002      	movs	r0, #2
 80019ae:	f006 f96d 	bl	8007c8c <lcd_print>
 80019b2:	e008      	b.n	80019c6 <menu+0x876>
			} else if(dilSecim == 1) {
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <menu+0x8d0>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d104      	bne.n	80019c6 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80019bc:	4a2e      	ldr	r2, [pc, #184]	; (8001a78 <menu+0x928>)
 80019be:	2101      	movs	r1, #1
 80019c0:	2002      	movs	r0, #2
 80019c2:	f006 f963 	bl	8007c8c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <menu+0x92c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <menu+0x8ac>
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <menu+0x8e0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d112      	bne.n	80019fc <menu+0x8ac>
			if(dilSecim == 0) {
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <menu+0x8d0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <menu+0x930>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	2002      	movs	r0, #2
 80019e4:	f006 f952 	bl	8007c8c <lcd_print>
 80019e8:	e008      	b.n	80019fc <menu+0x8ac>
			} else if(dilSecim == 1) {
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <menu+0x8d0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d104      	bne.n	80019fc <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80019f2:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <menu+0x934>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	2002      	movs	r0, #2
 80019f8:	f006 f948 	bl	8007c8c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <menu+0x92c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d14c      	bne.n	8001a9e <menu+0x94e>
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <menu+0x8e0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d148      	bne.n	8001a9e <menu+0x94e>
			if(dilSecim == 0) {
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <menu+0x8d0>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d13b      	bne.n	8001a8c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <menu+0x938>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f006 f937 	bl	8007c8c <lcd_print>
 8001a1e:	e03e      	b.n	8001a9e <menu+0x94e>
 8001a20:	20000255 	.word	0x20000255
 8001a24:	0800d1a4 	.word	0x0800d1a4
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	20000263 	.word	0x20000263
 8001a30:	20000243 	.word	0x20000243
 8001a34:	20000236 	.word	0x20000236
 8001a38:	20000256 	.word	0x20000256
 8001a3c:	2000012c 	.word	0x2000012c
 8001a40:	20000257 	.word	0x20000257
 8001a44:	20000258 	.word	0x20000258
 8001a48:	20000259 	.word	0x20000259
 8001a4c:	2000025a 	.word	0x2000025a
 8001a50:	2000025b 	.word	0x2000025b
 8001a54:	2000025c 	.word	0x2000025c
 8001a58:	2000025d 	.word	0x2000025d
 8001a5c:	2000025e 	.word	0x2000025e
 8001a60:	2000025f 	.word	0x2000025f
 8001a64:	20000260 	.word	0x20000260
 8001a68:	20000234 	.word	0x20000234
 8001a6c:	0800d1b8 	.word	0x0800d1b8
 8001a70:	0800d1cc 	.word	0x0800d1cc
 8001a74:	0800d1e0 	.word	0x0800d1e0
 8001a78:	0800d1f4 	.word	0x0800d1f4
 8001a7c:	20000235 	.word	0x20000235
 8001a80:	0800d208 	.word	0x0800d208
 8001a84:	0800d218 	.word	0x0800d218
 8001a88:	0800d228 	.word	0x0800d228
			} else if(dilSecim == 1) {
 8001a8c:	4b98      	ldr	r3, [pc, #608]	; (8001cf0 <menu+0xba0>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d104      	bne.n	8001a9e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001a94:	4a97      	ldr	r2, [pc, #604]	; (8001cf4 <menu+0xba4>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f006 f8f7 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4895      	ldr	r0, [pc, #596]	; (8001cf8 <menu+0xba8>)
 8001aa2:	f007 fc19 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d119      	bne.n	8001ae0 <menu+0x990>
 8001aac:	4b93      	ldr	r3, [pc, #588]	; (8001cfc <menu+0xbac>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <menu+0x990>
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <menu+0xbb0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10e      	bne.n	8001ae0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001ac2:	4b90      	ldr	r3, [pc, #576]	; (8001d04 <menu+0xbb4>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b8e      	ldr	r3, [pc, #568]	; (8001d04 <menu+0xbb4>)
 8001acc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ace:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <menu+0xbb4>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d902      	bls.n	8001adc <menu+0x98c>
				calismaSekli = 0;
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <menu+0xbb4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001adc:	f002 ff0e 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4885      	ldr	r0, [pc, #532]	; (8001cf8 <menu+0xba8>)
 8001ae4:	f007 fbf8 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d119      	bne.n	8001b22 <menu+0x9d2>
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <menu+0xbac>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	f083 0301 	eor.w	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <menu+0x9d2>
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <menu+0xbb0>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10e      	bne.n	8001b22 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001b04:	4b7f      	ldr	r3, [pc, #508]	; (8001d04 <menu+0xbb4>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <menu+0xbb4>)
 8001b0e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <menu+0xbb4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <menu+0x9ce>
	    		calismaSekli = 1;
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <menu+0xbb4>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b1e:	f002 feed 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b22:	2108      	movs	r1, #8
 8001b24:	4874      	ldr	r0, [pc, #464]	; (8001cf8 <menu+0xba8>)
 8001b26:	f007 fbd7 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d118      	bne.n	8001b62 <menu+0xa12>
 8001b30:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <menu+0xbac>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d011      	beq.n	8001b62 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b3e:	4b71      	ldr	r3, [pc, #452]	; (8001d04 <menu+0xbb4>)
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <menu+0xbb8>)
 8001b44:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <menu+0xbb4>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d106      	bne.n	8001b5c <menu+0xa0c>
				altLimit = 1;
 8001b4e:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <menu+0xbbc>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <menu+0xbbc>)
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <menu+0xbb8>)
 8001b5a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001b5c:	4b6c      	ldr	r3, [pc, #432]	; (8001d10 <menu+0xbc0>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001b62:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <menu+0xbc4>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	f040 8083 	bne.w	8001c72 <menu+0xb22>
		if(dilSecim == 0) {
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <menu+0xba0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001b74:	4a68      	ldr	r2, [pc, #416]	; (8001d18 <menu+0xbc8>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f006 f887 	bl	8007c8c <lcd_print>
 8001b7e:	e008      	b.n	8001b92 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001b80:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <menu+0xba0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d104      	bne.n	8001b92 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001b88:	4a64      	ldr	r2, [pc, #400]	; (8001d1c <menu+0xbcc>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f006 f87d 	bl	8007c8c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <menu+0xbd0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d113      	bne.n	8001bc2 <menu+0xa72>
			if(dilSecim == 0) {
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <menu+0xba0>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001ba2:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <menu+0xbd4>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f006 f870 	bl	8007c8c <lcd_print>
 8001bac:	e012      	b.n	8001bd4 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <menu+0xba0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10e      	bne.n	8001bd4 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <menu+0xbd8>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f006 f866 	bl	8007c8c <lcd_print>
 8001bc0:	e008      	b.n	8001bd4 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <menu+0xbd0>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d104      	bne.n	8001bd4 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001bca:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <menu+0xbdc>)
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2002      	movs	r0, #2
 8001bd0:	f006 f85c 	bl	8007c8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4848      	ldr	r0, [pc, #288]	; (8001cf8 <menu+0xba8>)
 8001bd8:	f007 fb7e 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d115      	bne.n	8001c0e <menu+0xabe>
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <menu+0xbac>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00e      	beq.n	8001c0e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <menu+0xbd0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <menu+0xbd0>)
 8001bfa:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <menu+0xbd0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d902      	bls.n	8001c0a <menu+0xaba>
				emniyetCercevesi = 0;
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <menu+0xbd0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c0a:	f002 fe77 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4839      	ldr	r0, [pc, #228]	; (8001cf8 <menu+0xba8>)
 8001c12:	f007 fb61 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d115      	bne.n	8001c48 <menu+0xaf8>
 8001c1c:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <menu+0xbac>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00e      	beq.n	8001c48 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <menu+0xbd0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <menu+0xbd0>)
 8001c34:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c36:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <menu+0xbd0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c3e:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <menu+0xbd0>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c44:	f002 fe5a 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c48:	2108      	movs	r1, #8
 8001c4a:	482b      	ldr	r0, [pc, #172]	; (8001cf8 <menu+0xba8>)
 8001c4c:	f007 fb44 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10d      	bne.n	8001c72 <menu+0xb22>
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <menu+0xbac>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <menu+0xbd0>)
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <menu+0xbb8>)
 8001c6a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <menu+0xbc0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <menu+0xbc4>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	f040 80ba 	bne.w	8001df0 <menu+0xca0>
		if(dilSecim == 0) {
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <menu+0xba0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <menu+0xbe0>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f005 ffff 	bl	8007c8c <lcd_print>
 8001c8e:	e008      	b.n	8001ca2 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <menu+0xba0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d104      	bne.n	8001ca2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <menu+0xbe4>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f005 fff5 	bl	8007c8c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <menu+0xbe8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d113      	bne.n	8001cd2 <menu+0xb82>
			if(dilSecim == 0) {
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <menu+0xba0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <menu+0xbd4>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f005 ffe8 	bl	8007c8c <lcd_print>
 8001cbc:	e049      	b.n	8001d52 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <menu+0xba0>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d145      	bne.n	8001d52 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <menu+0xbd8>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f005 ffde 	bl	8007c8c <lcd_print>
 8001cd0:	e03f      	b.n	8001d52 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <menu+0xbe8>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d13b      	bne.n	8001d52 <menu+0xc02>
			if(dilSecim == 0) {
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <menu+0xba0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d12e      	bne.n	8001d40 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <menu+0xbec>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f005 ffd0 	bl	8007c8c <lcd_print>
 8001cec:	e031      	b.n	8001d52 <menu+0xc02>
 8001cee:	bf00      	nop
 8001cf0:	20000255 	.word	0x20000255
 8001cf4:	0800d238 	.word	0x0800d238
 8001cf8:	40010800 	.word	0x40010800
 8001cfc:	20000263 	.word	0x20000263
 8001d00:	20000243 	.word	0x20000243
 8001d04:	20000235 	.word	0x20000235
 8001d08:	2000012c 	.word	0x2000012c
 8001d0c:	2000023a 	.word	0x2000023a
 8001d10:	20000260 	.word	0x20000260
 8001d14:	20000234 	.word	0x20000234
 8001d18:	0800d248 	.word	0x0800d248
 8001d1c:	0800d25c 	.word	0x0800d25c
 8001d20:	20000238 	.word	0x20000238
 8001d24:	0800d270 	.word	0x0800d270
 8001d28:	0800d284 	.word	0x0800d284
 8001d2c:	0800d298 	.word	0x0800d298
 8001d30:	0800d2a8 	.word	0x0800d2a8
 8001d34:	0800d2bc 	.word	0x0800d2bc
 8001d38:	20000239 	.word	0x20000239
 8001d3c:	0800d2d0 	.word	0x0800d2d0
			} else if(dilSecim == 1) {
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <menu+0xe3c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d104      	bne.n	8001d52 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d48:	4a91      	ldr	r2, [pc, #580]	; (8001f90 <menu+0xe40>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f005 ff9d 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d52:	2102      	movs	r1, #2
 8001d54:	488f      	ldr	r0, [pc, #572]	; (8001f94 <menu+0xe44>)
 8001d56:	f007 fabf 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d115      	bne.n	8001d8c <menu+0xc3c>
 8001d60:	4b8d      	ldr	r3, [pc, #564]	; (8001f98 <menu+0xe48>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00e      	beq.n	8001d8c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <menu+0xe4c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <menu+0xe4c>)
 8001d78:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001d7a:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <menu+0xe4c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d902      	bls.n	8001d88 <menu+0xc38>
				yavaslamaLimit = 0;
 8001d82:	4b86      	ldr	r3, [pc, #536]	; (8001f9c <menu+0xe4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d88:	f002 fdb8 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4881      	ldr	r0, [pc, #516]	; (8001f94 <menu+0xe44>)
 8001d90:	f007 faa2 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d115      	bne.n	8001dc6 <menu+0xc76>
 8001d9a:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <menu+0xe48>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	f083 0301 	eor.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00e      	beq.n	8001dc6 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001da8:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <menu+0xe4c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <menu+0xe4c>)
 8001db2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001db4:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <menu+0xe4c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001dbc:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <menu+0xe4c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dc2:	f002 fd9b 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	4872      	ldr	r0, [pc, #456]	; (8001f94 <menu+0xe44>)
 8001dca:	f007 fa85 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10d      	bne.n	8001df0 <menu+0xca0>
 8001dd4:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <menu+0xe48>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001de2:	4b6e      	ldr	r3, [pc, #440]	; (8001f9c <menu+0xe4c>)
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <menu+0xe50>)
 8001de8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001dea:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <menu+0xe54>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001df0:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <menu+0xe58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	f040 80b9 	bne.w	8001f6c <menu+0xe1c>
		if(dilSecim == 0) {
 8001dfa:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <menu+0xe3c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001e02:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <menu+0xe5c>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2001      	movs	r0, #1
 8001e08:	f005 ff40 	bl	8007c8c <lcd_print>
 8001e0c:	e008      	b.n	8001e20 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <menu+0xe3c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001e16:	4a66      	ldr	r2, [pc, #408]	; (8001fb0 <menu+0xe60>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f005 ff36 	bl	8007c8c <lcd_print>
		}

		if(altLimit == 0) {
 8001e20:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <menu+0xe64>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d113      	bne.n	8001e50 <menu+0xd00>
			if(dilSecim == 0) {
 8001e28:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <menu+0xe3c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e30:	4a61      	ldr	r2, [pc, #388]	; (8001fb8 <menu+0xe68>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2002      	movs	r0, #2
 8001e36:	f005 ff29 	bl	8007c8c <lcd_print>
 8001e3a:	e020      	b.n	8001e7e <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <menu+0xe3c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d11c      	bne.n	8001e7e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <menu+0xe6c>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f005 ff1f 	bl	8007c8c <lcd_print>
 8001e4e:	e016      	b.n	8001e7e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <menu+0xe64>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d112      	bne.n	8001e7e <menu+0xd2e>
			if(dilSecim == 0){
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <menu+0xe3c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <menu+0xe70>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	2002      	movs	r0, #2
 8001e66:	f005 ff11 	bl	8007c8c <lcd_print>
 8001e6a:	e008      	b.n	8001e7e <menu+0xd2e>
			} else if(dilSecim == 1){
 8001e6c:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <menu+0xe3c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d104      	bne.n	8001e7e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001e74:	4a46      	ldr	r2, [pc, #280]	; (8001f90 <menu+0xe40>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f005 ff07 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4844      	ldr	r0, [pc, #272]	; (8001f94 <menu+0xe44>)
 8001e82:	f007 fa29 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d119      	bne.n	8001ec0 <menu+0xd70>
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <menu+0xe48>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d012      	beq.n	8001ec0 <menu+0xd70>
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <menu+0xe74>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10e      	bne.n	8001ec0 <menu+0xd70>
			altLimit = altLimit + 1;
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <menu+0xe64>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <menu+0xe64>)
 8001eac:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <menu+0xe64>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d902      	bls.n	8001ebc <menu+0xd6c>
				altLimit = 0;
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <menu+0xe64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ebc:	f002 fd1e 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4834      	ldr	r0, [pc, #208]	; (8001f94 <menu+0xe44>)
 8001ec4:	f007 fa08 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d119      	bne.n	8001f02 <menu+0xdb2>
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <menu+0xe48>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f083 0301 	eor.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d012      	beq.n	8001f02 <menu+0xdb2>
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <menu+0xe74>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <menu+0xe64>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <menu+0xe64>)
 8001eee:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001ef0:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <menu+0xe64>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <menu+0xdae>
		   		altLimit = 1;
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <menu+0xe64>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001efe:	f002 fcfd 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f02:	2108      	movs	r1, #8
 8001f04:	4823      	ldr	r0, [pc, #140]	; (8001f94 <menu+0xe44>)
 8001f06:	f007 f9e7 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d12d      	bne.n	8001f6c <menu+0xe1c>
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <menu+0xe48>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d026      	beq.n	8001f6c <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <menu+0xe64>)
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <menu+0xe50>)
 8001f24:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <menu+0xe64>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d110      	bne.n	8001f50 <menu+0xe00>
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <menu+0xe78>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <menu+0xdee>
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <menu+0xe78>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d108      	bne.n	8001f50 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f3e:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <menu+0xe78>)
 8001f40:	2203      	movs	r2, #3
 8001f42:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <menu+0xe78>)
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <menu+0xe50>)
 8001f4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f4e:	e00a      	b.n	8001f66 <menu+0xe16>
			} else if(altLimit == 0) {
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <menu+0xe64>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <menu+0xe16>
				platformSilindirTipi = 0;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <menu+0xe7c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <menu+0xe7c>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <menu+0xe50>)
 8001f64:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <menu+0xe54>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <menu+0xe58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	f040 80b6 	bne.w	80020e2 <menu+0xf92>
		if(dilSecim == 0) {
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <menu+0xe3c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d12a      	bne.n	8001fd4 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <menu+0xe80>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	2001      	movs	r0, #1
 8001f84:	f005 fe82 	bl	8007c8c <lcd_print>
 8001f88:	e02d      	b.n	8001fe6 <menu+0xe96>
 8001f8a:	bf00      	nop
 8001f8c:	20000255 	.word	0x20000255
 8001f90:	0800d2e4 	.word	0x0800d2e4
 8001f94:	40010800 	.word	0x40010800
 8001f98:	20000263 	.word	0x20000263
 8001f9c:	20000239 	.word	0x20000239
 8001fa0:	2000012c 	.word	0x2000012c
 8001fa4:	20000260 	.word	0x20000260
 8001fa8:	20000234 	.word	0x20000234
 8001fac:	0800d2f8 	.word	0x0800d2f8
 8001fb0:	0800d30c 	.word	0x0800d30c
 8001fb4:	2000023a 	.word	0x2000023a
 8001fb8:	0800d270 	.word	0x0800d270
 8001fbc:	0800d284 	.word	0x0800d284
 8001fc0:	0800d2d0 	.word	0x0800d2d0
 8001fc4:	20000235 	.word	0x20000235
 8001fc8:	20000241 	.word	0x20000241
 8001fcc:	20000247 	.word	0x20000247
 8001fd0:	0800d320 	.word	0x0800d320
		} else if(dilSecim == 1){
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <menu+0x1070>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d104      	bne.n	8001fe6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001fdc:	4a79      	ldr	r2, [pc, #484]	; (80021c4 <menu+0x1074>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f005 fe53 	bl	8007c8c <lcd_print>
		}
		if(basincSalteri == 0){
 8001fe6:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <menu+0x1078>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d113      	bne.n	8002016 <menu+0xec6>
			if(dilSecim == 0) {
 8001fee:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <menu+0x1070>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d105      	bne.n	8002002 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001ff6:	4a75      	ldr	r2, [pc, #468]	; (80021cc <menu+0x107c>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f005 fe46 	bl	8007c8c <lcd_print>
 8002000:	e020      	b.n	8002044 <menu+0xef4>
			} else if(dilSecim == 1){
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <menu+0x1070>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d11c      	bne.n	8002044 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800200a:	4a71      	ldr	r2, [pc, #452]	; (80021d0 <menu+0x1080>)
 800200c:	2101      	movs	r1, #1
 800200e:	2002      	movs	r0, #2
 8002010:	f005 fe3c 	bl	8007c8c <lcd_print>
 8002014:	e016      	b.n	8002044 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002016:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <menu+0x1078>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d112      	bne.n	8002044 <menu+0xef4>
			if(dilSecim == 0) {
 800201e:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <menu+0x1070>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002026:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <menu+0x1084>)
 8002028:	2101      	movs	r1, #1
 800202a:	2002      	movs	r0, #2
 800202c:	f005 fe2e 	bl	8007c8c <lcd_print>
 8002030:	e008      	b.n	8002044 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <menu+0x1070>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d104      	bne.n	8002044 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800203a:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <menu+0x1088>)
 800203c:	2101      	movs	r1, #1
 800203e:	2002      	movs	r0, #2
 8002040:	f005 fe24 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002044:	2102      	movs	r1, #2
 8002046:	4865      	ldr	r0, [pc, #404]	; (80021dc <menu+0x108c>)
 8002048:	f007 f946 	bl	80092d8 <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b01      	cmp	r3, #1
 8002050:	d115      	bne.n	800207e <menu+0xf2e>
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <menu+0x1090>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <menu+0x1078>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <menu+0x1078>)
 800206a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800206c:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <menu+0x1078>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d902      	bls.n	800207a <menu+0xf2a>
				basincSalteri = 0;
 8002074:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <menu+0x1078>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800207a:	f002 fc3f 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800207e:	2104      	movs	r1, #4
 8002080:	4856      	ldr	r0, [pc, #344]	; (80021dc <menu+0x108c>)
 8002082:	f007 f929 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002086:	4603      	mov	r3, r0
 8002088:	2b01      	cmp	r3, #1
 800208a:	d115      	bne.n	80020b8 <menu+0xf68>
 800208c:	4b54      	ldr	r3, [pc, #336]	; (80021e0 <menu+0x1090>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00e      	beq.n	80020b8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <menu+0x1078>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <menu+0x1078>)
 80020a4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <menu+0x1078>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <menu+0xf64>
		   		basincSalteri = 1;
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <menu+0x1078>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020b4:	f002 fc22 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020b8:	2108      	movs	r1, #8
 80020ba:	4848      	ldr	r0, [pc, #288]	; (80021dc <menu+0x108c>)
 80020bc:	f007 f90c 	bl	80092d8 <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10d      	bne.n	80020e2 <menu+0xf92>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <menu+0x1090>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <menu+0x1078>)
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <menu+0x1094>)
 80020da:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80020dc:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <menu+0x1098>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80020e2:	4b42      	ldr	r3, [pc, #264]	; (80021ec <menu+0x109c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	f040 80f5 	bne.w	80022d6 <menu+0x1186>
		if(dilSecim == 0) {
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <menu+0x1070>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80020f4:	4a3e      	ldr	r2, [pc, #248]	; (80021f0 <menu+0x10a0>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	2001      	movs	r0, #1
 80020fa:	f005 fdc7 	bl	8007c8c <lcd_print>
 80020fe:	e008      	b.n	8002112 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <menu+0x1070>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d104      	bne.n	8002112 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002108:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <menu+0x10a4>)
 800210a:	2101      	movs	r1, #1
 800210c:	2001      	movs	r0, #1
 800210e:	f005 fdbd 	bl	8007c8c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <menu+0x10a8>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d113      	bne.n	8002142 <menu+0xff2>
			if(dilSecim == 0) {
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <menu+0x1070>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002122:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <menu+0x107c>)
 8002124:	2101      	movs	r1, #1
 8002126:	2002      	movs	r0, #2
 8002128:	f005 fdb0 	bl	8007c8c <lcd_print>
 800212c:	e079      	b.n	8002222 <menu+0x10d2>
			} else if(dilSecim == 1){
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <menu+0x1070>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d175      	bne.n	8002222 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002136:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <menu+0x1080>)
 8002138:	2101      	movs	r1, #1
 800213a:	2002      	movs	r0, #2
 800213c:	f005 fda6 	bl	8007c8c <lcd_print>
 8002140:	e06f      	b.n	8002222 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <menu+0x10a8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d113      	bne.n	8002172 <menu+0x1022>
			if(dilSecim == 0) {
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <menu+0x1070>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002152:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <menu+0x10ac>)
 8002154:	2101      	movs	r1, #1
 8002156:	2002      	movs	r0, #2
 8002158:	f005 fd98 	bl	8007c8c <lcd_print>
 800215c:	e061      	b.n	8002222 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <menu+0x1070>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d15d      	bne.n	8002222 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002166:	4a26      	ldr	r2, [pc, #152]	; (8002200 <menu+0x10b0>)
 8002168:	2101      	movs	r1, #1
 800216a:	2002      	movs	r0, #2
 800216c:	f005 fd8e 	bl	8007c8c <lcd_print>
 8002170:	e057      	b.n	8002222 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <menu+0x10a8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d113      	bne.n	80021a2 <menu+0x1052>
			if(dilSecim == 0) {
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <menu+0x1070>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002182:	4a20      	ldr	r2, [pc, #128]	; (8002204 <menu+0x10b4>)
 8002184:	2101      	movs	r1, #1
 8002186:	2002      	movs	r0, #2
 8002188:	f005 fd80 	bl	8007c8c <lcd_print>
 800218c:	e049      	b.n	8002222 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <menu+0x1070>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d145      	bne.n	8002222 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <menu+0x10b8>)
 8002198:	2101      	movs	r1, #1
 800219a:	2002      	movs	r0, #2
 800219c:	f005 fd76 	bl	8007c8c <lcd_print>
 80021a0:	e03f      	b.n	8002222 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <menu+0x10a8>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d13b      	bne.n	8002222 <menu+0x10d2>
			if(dilSecim == 0) {
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <menu+0x1070>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12e      	bne.n	8002210 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <menu+0x10bc>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	2002      	movs	r0, #2
 80021b8:	f005 fd68 	bl	8007c8c <lcd_print>
 80021bc:	e031      	b.n	8002222 <menu+0x10d2>
 80021be:	bf00      	nop
 80021c0:	20000255 	.word	0x20000255
 80021c4:	0800d330 	.word	0x0800d330
 80021c8:	2000023b 	.word	0x2000023b
 80021cc:	0800d270 	.word	0x0800d270
 80021d0:	0800d284 	.word	0x0800d284
 80021d4:	0800d2d0 	.word	0x0800d2d0
 80021d8:	0800d2e4 	.word	0x0800d2e4
 80021dc:	40010800 	.word	0x40010800
 80021e0:	20000263 	.word	0x20000263
 80021e4:	2000012c 	.word	0x2000012c
 80021e8:	20000260 	.word	0x20000260
 80021ec:	20000234 	.word	0x20000234
 80021f0:	0800d340 	.word	0x0800d340
 80021f4:	0800d354 	.word	0x0800d354
 80021f8:	2000023c 	.word	0x2000023c
 80021fc:	0800d368 	.word	0x0800d368
 8002200:	0800d37c 	.word	0x0800d37c
 8002204:	0800d390 	.word	0x0800d390
 8002208:	0800d3a4 	.word	0x0800d3a4
 800220c:	0800d3b8 	.word	0x0800d3b8
			} else if(dilSecim == 1){
 8002210:	4b99      	ldr	r3, [pc, #612]	; (8002478 <menu+0x1328>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d104      	bne.n	8002222 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002218:	4a98      	ldr	r2, [pc, #608]	; (800247c <menu+0x132c>)
 800221a:	2101      	movs	r1, #1
 800221c:	2002      	movs	r0, #2
 800221e:	f005 fd35 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002222:	2102      	movs	r1, #2
 8002224:	4896      	ldr	r0, [pc, #600]	; (8002480 <menu+0x1330>)
 8002226:	f007 f857 	bl	80092d8 <HAL_GPIO_ReadPin>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d115      	bne.n	800225c <menu+0x110c>
 8002230:	4b94      	ldr	r3, [pc, #592]	; (8002484 <menu+0x1334>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00e      	beq.n	800225c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800223e:	4b92      	ldr	r3, [pc, #584]	; (8002488 <menu+0x1338>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b90      	ldr	r3, [pc, #576]	; (8002488 <menu+0x1338>)
 8002248:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800224a:	4b8f      	ldr	r3, [pc, #572]	; (8002488 <menu+0x1338>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d902      	bls.n	8002258 <menu+0x1108>
				kapiSecimleri = 0;
 8002252:	4b8d      	ldr	r3, [pc, #564]	; (8002488 <menu+0x1338>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002258:	f002 fb50 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800225c:	2104      	movs	r1, #4
 800225e:	4888      	ldr	r0, [pc, #544]	; (8002480 <menu+0x1330>)
 8002260:	f007 f83a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d115      	bne.n	8002296 <menu+0x1146>
 800226a:	4b86      	ldr	r3, [pc, #536]	; (8002484 <menu+0x1334>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00e      	beq.n	8002296 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002278:	4b83      	ldr	r3, [pc, #524]	; (8002488 <menu+0x1338>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	3b01      	subs	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <menu+0x1338>)
 8002282:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002284:	4b80      	ldr	r3, [pc, #512]	; (8002488 <menu+0x1338>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d902      	bls.n	8002292 <menu+0x1142>
		   		kapiSecimleri = 3;
 800228c:	4b7e      	ldr	r3, [pc, #504]	; (8002488 <menu+0x1338>)
 800228e:	2203      	movs	r2, #3
 8002290:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002292:	f002 fb33 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002296:	2108      	movs	r1, #8
 8002298:	4879      	ldr	r0, [pc, #484]	; (8002480 <menu+0x1330>)
 800229a:	f007 f81d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d118      	bne.n	80022d6 <menu+0x1186>
 80022a4:	4b77      	ldr	r3, [pc, #476]	; (8002484 <menu+0x1334>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d011      	beq.n	80022d6 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <menu+0x1338>)
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b75      	ldr	r3, [pc, #468]	; (800248c <menu+0x133c>)
 80022b8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022ba:	4b73      	ldr	r3, [pc, #460]	; (8002488 <menu+0x1338>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <menu+0x1180>
				altLimit = 1;
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <menu+0x1340>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022c8:	4b71      	ldr	r3, [pc, #452]	; (8002490 <menu+0x1340>)
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <menu+0x133c>)
 80022ce:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80022d0:	4b70      	ldr	r3, [pc, #448]	; (8002494 <menu+0x1344>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80022d6:	4b70      	ldr	r3, [pc, #448]	; (8002498 <menu+0x1348>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	f040 8092 	bne.w	8002404 <menu+0x12b4>
		if(dilSecim == 0) {
 80022e0:	4b65      	ldr	r3, [pc, #404]	; (8002478 <menu+0x1328>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80022e8:	4a6c      	ldr	r2, [pc, #432]	; (800249c <menu+0x134c>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	2001      	movs	r0, #1
 80022ee:	f005 fccd 	bl	8007c8c <lcd_print>
 80022f2:	e008      	b.n	8002306 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80022f4:	4b60      	ldr	r3, [pc, #384]	; (8002478 <menu+0x1328>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80022fc:	4a68      	ldr	r2, [pc, #416]	; (80024a0 <menu+0x1350>)
 80022fe:	2101      	movs	r1, #1
 8002300:	2001      	movs	r0, #1
 8002302:	f005 fcc3 	bl	8007c8c <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002306:	4b67      	ldr	r3, [pc, #412]	; (80024a4 <menu+0x1354>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d113      	bne.n	8002336 <menu+0x11e6>
			if(dilSecim == 0) {
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <menu+0x1328>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002316:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <menu+0x1358>)
 8002318:	2101      	movs	r1, #1
 800231a:	2002      	movs	r0, #2
 800231c:	f005 fcb6 	bl	8007c8c <lcd_print>
 8002320:	e020      	b.n	8002364 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002322:	4b55      	ldr	r3, [pc, #340]	; (8002478 <menu+0x1328>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11c      	bne.n	8002364 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800232a:	4a60      	ldr	r2, [pc, #384]	; (80024ac <menu+0x135c>)
 800232c:	2101      	movs	r1, #1
 800232e:	2002      	movs	r0, #2
 8002330:	f005 fcac 	bl	8007c8c <lcd_print>
 8002334:	e016      	b.n	8002364 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002336:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <menu+0x1354>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d112      	bne.n	8002364 <menu+0x1214>
			if(dilSecim == 0){
 800233e:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <menu+0x1328>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002346:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <menu+0x1360>)
 8002348:	2101      	movs	r1, #1
 800234a:	2002      	movs	r0, #2
 800234c:	f005 fc9e 	bl	8007c8c <lcd_print>
 8002350:	e008      	b.n	8002364 <menu+0x1214>
			} else if(dilSecim == 1){
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <menu+0x1328>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d104      	bne.n	8002364 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <menu+0x1364>)
 800235c:	2101      	movs	r1, #1
 800235e:	2002      	movs	r0, #2
 8002360:	f005 fc94 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002364:	2102      	movs	r1, #2
 8002366:	4846      	ldr	r0, [pc, #280]	; (8002480 <menu+0x1330>)
 8002368:	f006 ffb6 	bl	80092d8 <HAL_GPIO_ReadPin>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d115      	bne.n	800239e <menu+0x124e>
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <menu+0x1334>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002380:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <menu+0x1354>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <menu+0x1354>)
 800238a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800238c:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <menu+0x1354>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d902      	bls.n	800239a <menu+0x124a>
				kapiAcTipi = 0;
 8002394:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <menu+0x1354>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800239a:	f002 faaf 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800239e:	2104      	movs	r1, #4
 80023a0:	4837      	ldr	r0, [pc, #220]	; (8002480 <menu+0x1330>)
 80023a2:	f006 ff99 	bl	80092d8 <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d115      	bne.n	80023d8 <menu+0x1288>
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <menu+0x1334>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00e      	beq.n	80023d8 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <menu+0x1354>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	3b01      	subs	r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <menu+0x1354>)
 80023c4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <menu+0x1354>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <menu+0x1284>
		   		kapiAcTipi = 1;
 80023ce:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <menu+0x1354>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023d4:	f002 fa92 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023d8:	2108      	movs	r1, #8
 80023da:	4829      	ldr	r0, [pc, #164]	; (8002480 <menu+0x1330>)
 80023dc:	f006 ff7c 	bl	80092d8 <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10e      	bne.n	8002404 <menu+0x12b4>
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <menu+0x1334>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <menu+0x1354>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <menu+0x133c>)
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <menu+0x1344>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <menu+0x1348>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b09      	cmp	r3, #9
 800240a:	f040 80b9 	bne.w	8002580 <menu+0x1430>
		if(dilSecim == 0){
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <menu+0x1328>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <menu+0x1368>)
 8002418:	2101      	movs	r1, #1
 800241a:	2001      	movs	r0, #1
 800241c:	f005 fc36 	bl	8007c8c <lcd_print>
 8002420:	e008      	b.n	8002434 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <menu+0x1328>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d104      	bne.n	8002434 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800242a:	4a24      	ldr	r2, [pc, #144]	; (80024bc <menu+0x136c>)
 800242c:	2101      	movs	r1, #1
 800242e:	2001      	movs	r0, #1
 8002430:	f005 fc2c 	bl	8007c8c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <menu+0x1370>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <menu+0x1374>)
 800243e:	2101      	movs	r1, #1
 8002440:	2002      	movs	r0, #2
 8002442:	f005 fc23 	bl	8007c8c <lcd_print>
 8002446:	e04c      	b.n	80024e2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <menu+0x1370>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d13f      	bne.n	80024d0 <menu+0x1380>
			if(dilSecim == 0){
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <menu+0x1328>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <menu+0x1378>)
 800245a:	2101      	movs	r1, #1
 800245c:	2002      	movs	r0, #2
 800245e:	f005 fc15 	bl	8007c8c <lcd_print>
 8002462:	e03e      	b.n	80024e2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <menu+0x1328>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d13a      	bne.n	80024e2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <menu+0x137c>)
 800246e:	2101      	movs	r1, #1
 8002470:	2002      	movs	r0, #2
 8002472:	f005 fc0b 	bl	8007c8c <lcd_print>
 8002476:	e034      	b.n	80024e2 <menu+0x1392>
 8002478:	20000255 	.word	0x20000255
 800247c:	0800d3cc 	.word	0x0800d3cc
 8002480:	40010800 	.word	0x40010800
 8002484:	20000263 	.word	0x20000263
 8002488:	2000023c 	.word	0x2000023c
 800248c:	2000012c 	.word	0x2000012c
 8002490:	2000023a 	.word	0x2000023a
 8002494:	20000260 	.word	0x20000260
 8002498:	20000234 	.word	0x20000234
 800249c:	0800d3e0 	.word	0x0800d3e0
 80024a0:	0800d3f4 	.word	0x0800d3f4
 80024a4:	20000240 	.word	0x20000240
 80024a8:	0800d408 	.word	0x0800d408
 80024ac:	0800d418 	.word	0x0800d418
 80024b0:	0800d428 	.word	0x0800d428
 80024b4:	0800d43c 	.word	0x0800d43c
 80024b8:	0800d450 	.word	0x0800d450
 80024bc:	0800d464 	.word	0x0800d464
 80024c0:	2000023d 	.word	0x2000023d
 80024c4:	0800d478 	.word	0x0800d478
 80024c8:	0800d48c 	.word	0x0800d48c
 80024cc:	0800d49c 	.word	0x0800d49c
			}
		} else if(kapi1Tip == 2) {
 80024d0:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <menu+0x15ac>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d104      	bne.n	80024e2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80024d8:	4a89      	ldr	r2, [pc, #548]	; (8002700 <menu+0x15b0>)
 80024da:	2101      	movs	r1, #1
 80024dc:	2002      	movs	r0, #2
 80024de:	f005 fbd5 	bl	8007c8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e2:	2102      	movs	r1, #2
 80024e4:	4887      	ldr	r0, [pc, #540]	; (8002704 <menu+0x15b4>)
 80024e6:	f006 fef7 	bl	80092d8 <HAL_GPIO_ReadPin>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d115      	bne.n	800251c <menu+0x13cc>
 80024f0:	4b85      	ldr	r3, [pc, #532]	; (8002708 <menu+0x15b8>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f083 0301 	eor.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <menu+0x15ac>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <menu+0x15ac>)
 8002508:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <menu+0x15ac>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <menu+0x13c8>
				kapi1Tip = 0;
 8002512:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <menu+0x15ac>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002518:	f002 f9f0 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800251c:	2104      	movs	r1, #4
 800251e:	4879      	ldr	r0, [pc, #484]	; (8002704 <menu+0x15b4>)
 8002520:	f006 feda 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d115      	bne.n	8002556 <menu+0x1406>
 800252a:	4b77      	ldr	r3, [pc, #476]	; (8002708 <menu+0x15b8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002538:	4b70      	ldr	r3, [pc, #448]	; (80026fc <menu+0x15ac>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	3b01      	subs	r3, #1
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <menu+0x15ac>)
 8002542:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <menu+0x15ac>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d902      	bls.n	8002552 <menu+0x1402>
		   		kapi1Tip = 2;
 800254c:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <menu+0x15ac>)
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002552:	f002 f9d3 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002556:	2108      	movs	r1, #8
 8002558:	486a      	ldr	r0, [pc, #424]	; (8002704 <menu+0x15b4>)
 800255a:	f006 febd 	bl	80092d8 <HAL_GPIO_ReadPin>
 800255e:	4603      	mov	r3, r0
 8002560:	2b01      	cmp	r3, #1
 8002562:	d10d      	bne.n	8002580 <menu+0x1430>
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <menu+0x15b8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <menu+0x15ac>)
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	4b65      	ldr	r3, [pc, #404]	; (800270c <menu+0x15bc>)
 8002578:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800257a:	4b65      	ldr	r3, [pc, #404]	; (8002710 <menu+0x15c0>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002580:	4b64      	ldr	r3, [pc, #400]	; (8002714 <menu+0x15c4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b0a      	cmp	r3, #10
 8002586:	d17f      	bne.n	8002688 <menu+0x1538>
		if(dilSecim == 0) {
 8002588:	4b63      	ldr	r3, [pc, #396]	; (8002718 <menu+0x15c8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002590:	4a62      	ldr	r2, [pc, #392]	; (800271c <menu+0x15cc>)
 8002592:	2101      	movs	r1, #1
 8002594:	2001      	movs	r0, #1
 8002596:	f005 fb79 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800259a:	4a61      	ldr	r2, [pc, #388]	; (8002720 <menu+0x15d0>)
 800259c:	2101      	movs	r1, #1
 800259e:	2002      	movs	r0, #2
 80025a0:	f005 fb74 	bl	8007c8c <lcd_print>
 80025a4:	e00d      	b.n	80025c2 <menu+0x1472>
		} else if(dilSecim == 1) {
 80025a6:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <menu+0x15c8>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d109      	bne.n	80025c2 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80025ae:	4a5d      	ldr	r2, [pc, #372]	; (8002724 <menu+0x15d4>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	2001      	movs	r0, #1
 80025b4:	f005 fb6a 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80025b8:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <menu+0x15d8>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f005 fb65 	bl	8007c8c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <menu+0x15dc>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	220a      	movs	r2, #10
 80025c8:	4959      	ldr	r1, [pc, #356]	; (8002730 <menu+0x15e0>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f009 feda 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <menu+0x15e0>)
 80025d2:	2110      	movs	r1, #16
 80025d4:	2002      	movs	r0, #2
 80025d6:	f005 fb59 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80025da:	2102      	movs	r1, #2
 80025dc:	4849      	ldr	r0, [pc, #292]	; (8002704 <menu+0x15b4>)
 80025de:	f006 fe7b 	bl	80092d8 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d119      	bne.n	800261c <menu+0x14cc>
 80025e8:	4b47      	ldr	r3, [pc, #284]	; (8002708 <menu+0x15b8>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f083 0301 	eor.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <menu+0x14cc>
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <menu+0x15ac>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80025fe:	4b4b      	ldr	r3, [pc, #300]	; (800272c <menu+0x15dc>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <menu+0x15dc>)
 8002608:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800260a:	4b48      	ldr	r3, [pc, #288]	; (800272c <menu+0x15dc>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d902      	bls.n	8002618 <menu+0x14c8>
				kapi1AcSure = 0;
 8002612:	4b46      	ldr	r3, [pc, #280]	; (800272c <menu+0x15dc>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002618:	f002 f970 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800261c:	2104      	movs	r1, #4
 800261e:	4839      	ldr	r0, [pc, #228]	; (8002704 <menu+0x15b4>)
 8002620:	f006 fe5a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002624:	4603      	mov	r3, r0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d119      	bne.n	800265e <menu+0x150e>
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <menu+0x15b8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f083 0301 	eor.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d012      	beq.n	800265e <menu+0x150e>
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <menu+0x15ac>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10e      	bne.n	800265e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <menu+0x15dc>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	3b01      	subs	r3, #1
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <menu+0x15dc>)
 800264a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <menu+0x15dc>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b06      	cmp	r3, #6
 8002652:	d902      	bls.n	800265a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002654:	4b35      	ldr	r3, [pc, #212]	; (800272c <menu+0x15dc>)
 8002656:	2205      	movs	r2, #5
 8002658:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800265a:	f002 f94f 	bl	80048fc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800265e:	2108      	movs	r1, #8
 8002660:	4828      	ldr	r0, [pc, #160]	; (8002704 <menu+0x15b4>)
 8002662:	f006 fe39 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10d      	bne.n	8002688 <menu+0x1538>
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <menu+0x15b8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	f083 0301 	eor.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <menu+0x15dc>)
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <menu+0x15bc>)
 8002680:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002682:	4b23      	ldr	r3, [pc, #140]	; (8002710 <menu+0x15c0>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <menu+0x15c4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b0b      	cmp	r3, #11
 800268e:	f040 80b5 	bne.w	80027fc <menu+0x16ac>
		if(dilSecim == 0) {
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <menu+0x15c8>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800269a:	4a26      	ldr	r2, [pc, #152]	; (8002734 <menu+0x15e4>)
 800269c:	2101      	movs	r1, #1
 800269e:	2001      	movs	r0, #1
 80026a0:	f005 faf4 	bl	8007c8c <lcd_print>
 80026a4:	e008      	b.n	80026b8 <menu+0x1568>
		} else if(dilSecim == 1) {
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <menu+0x15c8>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d104      	bne.n	80026b8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <menu+0x15e8>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	2001      	movs	r0, #1
 80026b4:	f005 faea 	bl	8007c8c <lcd_print>
		}

		if(kapi2Tip == 0) {
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <menu+0x15ec>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <menu+0x15f0>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2002      	movs	r0, #2
 80026c6:	f005 fae1 	bl	8007c8c <lcd_print>
 80026ca:	e048      	b.n	800275e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <menu+0x15ec>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d13b      	bne.n	800274c <menu+0x15fc>
			if(dilSecim == 0) {
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <menu+0x15c8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <menu+0x15f4>)
 80026de:	2101      	movs	r1, #1
 80026e0:	2002      	movs	r0, #2
 80026e2:	f005 fad3 	bl	8007c8c <lcd_print>
 80026e6:	e03a      	b.n	800275e <menu+0x160e>
			} else if(dilSecim == 1) {
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <menu+0x15c8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d136      	bne.n	800275e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <menu+0x15f8>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	2002      	movs	r0, #2
 80026f6:	f005 fac9 	bl	8007c8c <lcd_print>
 80026fa:	e030      	b.n	800275e <menu+0x160e>
 80026fc:	2000023d 	.word	0x2000023d
 8002700:	0800d4b0 	.word	0x0800d4b0
 8002704:	40010800 	.word	0x40010800
 8002708:	20000263 	.word	0x20000263
 800270c:	2000012c 	.word	0x2000012c
 8002710:	20000260 	.word	0x20000260
 8002714:	20000234 	.word	0x20000234
 8002718:	20000255 	.word	0x20000255
 800271c:	0800d4c0 	.word	0x0800d4c0
 8002720:	0800d4d4 	.word	0x0800d4d4
 8002724:	0800d4e4 	.word	0x0800d4e4
 8002728:	0800d4f8 	.word	0x0800d4f8
 800272c:	2000024d 	.word	0x2000024d
 8002730:	2000019c 	.word	0x2000019c
 8002734:	0800d508 	.word	0x0800d508
 8002738:	0800d51c 	.word	0x0800d51c
 800273c:	2000023e 	.word	0x2000023e
 8002740:	0800d478 	.word	0x0800d478
 8002744:	0800d48c 	.word	0x0800d48c
 8002748:	0800d49c 	.word	0x0800d49c
			}
		} else if(kapi2Tip == 2) {
 800274c:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <menu+0x1828>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d104      	bne.n	800275e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002754:	4a89      	ldr	r2, [pc, #548]	; (800297c <menu+0x182c>)
 8002756:	2101      	movs	r1, #1
 8002758:	2002      	movs	r0, #2
 800275a:	f005 fa97 	bl	8007c8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800275e:	2102      	movs	r1, #2
 8002760:	4887      	ldr	r0, [pc, #540]	; (8002980 <menu+0x1830>)
 8002762:	f006 fdb9 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d115      	bne.n	8002798 <menu+0x1648>
 800276c:	4b85      	ldr	r3, [pc, #532]	; (8002984 <menu+0x1834>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800277a:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <menu+0x1828>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <menu+0x1828>)
 8002784:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002786:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <menu+0x1828>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <menu+0x1644>
				kapi2Tip = 0;
 800278e:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <menu+0x1828>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002794:	f002 f8b2 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002798:	2104      	movs	r1, #4
 800279a:	4879      	ldr	r0, [pc, #484]	; (8002980 <menu+0x1830>)
 800279c:	f006 fd9c 	bl	80092d8 <HAL_GPIO_ReadPin>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d115      	bne.n	80027d2 <menu+0x1682>
 80027a6:	4b77      	ldr	r3, [pc, #476]	; (8002984 <menu+0x1834>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80027b4:	4b70      	ldr	r3, [pc, #448]	; (8002978 <menu+0x1828>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b6e      	ldr	r3, [pc, #440]	; (8002978 <menu+0x1828>)
 80027be:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80027c0:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <menu+0x1828>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d902      	bls.n	80027ce <menu+0x167e>
		   		kapi2Tip = 2;
 80027c8:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <menu+0x1828>)
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ce:	f002 f895 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d2:	2108      	movs	r1, #8
 80027d4:	486a      	ldr	r0, [pc, #424]	; (8002980 <menu+0x1830>)
 80027d6:	f006 fd7f 	bl	80092d8 <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10d      	bne.n	80027fc <menu+0x16ac>
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <menu+0x1834>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	f083 0301 	eor.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80027ee:	4b62      	ldr	r3, [pc, #392]	; (8002978 <menu+0x1828>)
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <menu+0x1838>)
 80027f4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <menu+0x183c>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <menu+0x1840>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d17f      	bne.n	8002904 <menu+0x17b4>
		if(dilSecim == 0) {
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <menu+0x1844>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 800280c:	4a62      	ldr	r2, [pc, #392]	; (8002998 <menu+0x1848>)
 800280e:	2101      	movs	r1, #1
 8002810:	2001      	movs	r0, #1
 8002812:	f005 fa3b 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002816:	4a61      	ldr	r2, [pc, #388]	; (800299c <menu+0x184c>)
 8002818:	2101      	movs	r1, #1
 800281a:	2002      	movs	r0, #2
 800281c:	f005 fa36 	bl	8007c8c <lcd_print>
 8002820:	e00d      	b.n	800283e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002822:	4b5c      	ldr	r3, [pc, #368]	; (8002994 <menu+0x1844>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d109      	bne.n	800283e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800282a:	4a5d      	ldr	r2, [pc, #372]	; (80029a0 <menu+0x1850>)
 800282c:	2101      	movs	r1, #1
 800282e:	2001      	movs	r0, #1
 8002830:	f005 fa2c 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002834:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <menu+0x1854>)
 8002836:	2101      	movs	r1, #1
 8002838:	2002      	movs	r0, #2
 800283a:	f005 fa27 	bl	8007c8c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800283e:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <menu+0x1858>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	220a      	movs	r2, #10
 8002844:	4959      	ldr	r1, [pc, #356]	; (80029ac <menu+0x185c>)
 8002846:	4618      	mov	r0, r3
 8002848:	f009 fd9c 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 800284c:	4a57      	ldr	r2, [pc, #348]	; (80029ac <menu+0x185c>)
 800284e:	2110      	movs	r1, #16
 8002850:	2002      	movs	r0, #2
 8002852:	f005 fa1b 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002856:	2102      	movs	r1, #2
 8002858:	4849      	ldr	r0, [pc, #292]	; (8002980 <menu+0x1830>)
 800285a:	f006 fd3d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d119      	bne.n	8002898 <menu+0x1748>
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <menu+0x1834>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <menu+0x1748>
 8002872:	4b41      	ldr	r3, [pc, #260]	; (8002978 <menu+0x1828>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10e      	bne.n	8002898 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800287a:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <menu+0x1858>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <menu+0x1858>)
 8002884:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002886:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <menu+0x1858>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d902      	bls.n	8002894 <menu+0x1744>
				kapi2AcSure = 0;
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <menu+0x1858>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002894:	f002 f832 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002898:	2104      	movs	r1, #4
 800289a:	4839      	ldr	r0, [pc, #228]	; (8002980 <menu+0x1830>)
 800289c:	f006 fd1c 	bl	80092d8 <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d119      	bne.n	80028da <menu+0x178a>
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <menu+0x1834>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <menu+0x178a>
 80028b4:	4b30      	ldr	r3, [pc, #192]	; (8002978 <menu+0x1828>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10e      	bne.n	80028da <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <menu+0x1858>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <menu+0x1858>)
 80028c6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <menu+0x1858>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b06      	cmp	r3, #6
 80028ce:	d902      	bls.n	80028d6 <menu+0x1786>
		   		kapi2AcSure = 5;
 80028d0:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <menu+0x1858>)
 80028d2:	2205      	movs	r2, #5
 80028d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028d6:	f002 f811 	bl	80048fc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028da:	2108      	movs	r1, #8
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <menu+0x1830>)
 80028de:	f006 fcfb 	bl	80092d8 <HAL_GPIO_ReadPin>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10d      	bne.n	8002904 <menu+0x17b4>
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <menu+0x1834>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <menu+0x1858>)
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	4b23      	ldr	r3, [pc, #140]	; (8002988 <menu+0x1838>)
 80028fc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <menu+0x183c>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <menu+0x1840>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b0d      	cmp	r3, #13
 800290a:	f040 80b5 	bne.w	8002a78 <menu+0x1928>
		if(dilSecim == 0) {
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <menu+0x1844>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002916:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <menu+0x1860>)
 8002918:	2101      	movs	r1, #1
 800291a:	2001      	movs	r0, #1
 800291c:	f005 f9b6 	bl	8007c8c <lcd_print>
 8002920:	e008      	b.n	8002934 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <menu+0x1844>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d104      	bne.n	8002934 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <menu+0x1864>)
 800292c:	2101      	movs	r1, #1
 800292e:	2001      	movs	r0, #1
 8002930:	f005 f9ac 	bl	8007c8c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <menu+0x1868>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <menu+0x186c>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f005 f9a3 	bl	8007c8c <lcd_print>
 8002946:	e048      	b.n	80029da <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <menu+0x1868>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d13b      	bne.n	80029c8 <menu+0x1878>
			if(dilSecim == 0) {
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <menu+0x1844>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <menu+0x1870>)
 800295a:	2101      	movs	r1, #1
 800295c:	2002      	movs	r0, #2
 800295e:	f005 f995 	bl	8007c8c <lcd_print>
 8002962:	e03a      	b.n	80029da <menu+0x188a>
			} else if(dilSecim == 1) {
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <menu+0x1844>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d136      	bne.n	80029da <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <menu+0x1874>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f005 f98b 	bl	8007c8c <lcd_print>
 8002976:	e030      	b.n	80029da <menu+0x188a>
 8002978:	2000023e 	.word	0x2000023e
 800297c:	0800d4b0 	.word	0x0800d4b0
 8002980:	40010800 	.word	0x40010800
 8002984:	20000263 	.word	0x20000263
 8002988:	2000012c 	.word	0x2000012c
 800298c:	20000260 	.word	0x20000260
 8002990:	20000234 	.word	0x20000234
 8002994:	20000255 	.word	0x20000255
 8002998:	0800d530 	.word	0x0800d530
 800299c:	0800d4d4 	.word	0x0800d4d4
 80029a0:	0800d544 	.word	0x0800d544
 80029a4:	0800d4f8 	.word	0x0800d4f8
 80029a8:	2000024e 	.word	0x2000024e
 80029ac:	2000019c 	.word	0x2000019c
 80029b0:	0800d558 	.word	0x0800d558
 80029b4:	0800d56c 	.word	0x0800d56c
 80029b8:	2000023f 	.word	0x2000023f
 80029bc:	0800d478 	.word	0x0800d478
 80029c0:	0800d48c 	.word	0x0800d48c
 80029c4:	0800d49c 	.word	0x0800d49c
			}
		} else if(kapitablaTip == 2) {
 80029c8:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <menu+0x19e8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d104      	bne.n	80029da <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 80029d0:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <menu+0x19ec>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	2002      	movs	r0, #2
 80029d6:	f005 f959 	bl	8007c8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029da:	2102      	movs	r1, #2
 80029dc:	4858      	ldr	r0, [pc, #352]	; (8002b40 <menu+0x19f0>)
 80029de:	f006 fc7b 	bl	80092d8 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d115      	bne.n	8002a14 <menu+0x18c4>
 80029e8:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <menu+0x19f4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00e      	beq.n	8002a14 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80029f6:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <menu+0x19e8>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b4e      	ldr	r3, [pc, #312]	; (8002b38 <menu+0x19e8>)
 8002a00:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a02:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <menu+0x19e8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d902      	bls.n	8002a10 <menu+0x18c0>
				kapitablaTip = 0;
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <menu+0x19e8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a10:	f001 ff74 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a14:	2104      	movs	r1, #4
 8002a16:	484a      	ldr	r0, [pc, #296]	; (8002b40 <menu+0x19f0>)
 8002a18:	f006 fc5e 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d115      	bne.n	8002a4e <menu+0x18fe>
 8002a22:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <menu+0x19f4>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f083 0301 	eor.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00e      	beq.n	8002a4e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <menu+0x19e8>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <menu+0x19e8>)
 8002a3a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <menu+0x19e8>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d902      	bls.n	8002a4a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <menu+0x19e8>)
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a4a:	f001 ff57 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a4e:	2108      	movs	r1, #8
 8002a50:	483b      	ldr	r0, [pc, #236]	; (8002b40 <menu+0x19f0>)
 8002a52:	f006 fc41 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10d      	bne.n	8002a78 <menu+0x1928>
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <menu+0x19f4>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f083 0301 	eor.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002a6a:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <menu+0x19e8>)
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <menu+0x19f8>)
 8002a70:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <menu+0x19fc>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <menu+0x1a00>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b0e      	cmp	r3, #14
 8002a7e:	f040 80f2 	bne.w	8002c66 <menu+0x1b16>
		if(dilSecim == 0) {
 8002a82:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <menu+0x1a04>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002a8a:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <menu+0x1a08>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f005 f8fc 	bl	8007c8c <lcd_print>
 8002a94:	e008      	b.n	8002aa8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <menu+0x1a04>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d104      	bne.n	8002aa8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <menu+0x1a0c>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f005 f8f2 	bl	8007c8c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <menu+0x1a10>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <menu+0x1988>
			if(dilSecim == 0){
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <menu+0x1a04>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <menu+0x1a14>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	2002      	movs	r0, #2
 8002abe:	f005 f8e5 	bl	8007c8c <lcd_print>
 8002ac2:	e071      	b.n	8002ba8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <menu+0x1a04>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d16d      	bne.n	8002ba8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <menu+0x1a18>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f005 f8db 	bl	8007c8c <lcd_print>
 8002ad6:	e067      	b.n	8002ba8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <menu+0x1a10>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d112      	bne.n	8002b06 <menu+0x19b6>
			if(dilSecim == 0){
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <menu+0x1a04>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ae8:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <menu+0x1a1c>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	2002      	movs	r0, #2
 8002aee:	f005 f8cd 	bl	8007c8c <lcd_print>
			}
			if(dilSecim == 1){
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <menu+0x1a04>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d156      	bne.n	8002ba8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <menu+0x1a20>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2002      	movs	r0, #2
 8002b00:	f005 f8c4 	bl	8007c8c <lcd_print>
 8002b04:	e050      	b.n	8002ba8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <menu+0x1a10>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d136      	bne.n	8002b7c <menu+0x1a2c>
			if(dilSecim == 0){
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <menu+0x1a04>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <menu+0x1a24>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f005 f8b6 	bl	8007c8c <lcd_print>
 8002b20:	e042      	b.n	8002ba8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <menu+0x1a04>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d13e      	bne.n	8002ba8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <menu+0x1a28>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2002      	movs	r0, #2
 8002b30:	f005 f8ac 	bl	8007c8c <lcd_print>
 8002b34:	e038      	b.n	8002ba8 <menu+0x1a58>
 8002b36:	bf00      	nop
 8002b38:	2000023f 	.word	0x2000023f
 8002b3c:	0800d4b0 	.word	0x0800d4b0
 8002b40:	40010800 	.word	0x40010800
 8002b44:	20000263 	.word	0x20000263
 8002b48:	2000012c 	.word	0x2000012c
 8002b4c:	20000260 	.word	0x20000260
 8002b50:	20000234 	.word	0x20000234
 8002b54:	20000255 	.word	0x20000255
 8002b58:	0800d580 	.word	0x0800d580
 8002b5c:	0800d594 	.word	0x0800d594
 8002b60:	20000241 	.word	0x20000241
 8002b64:	0800d5a8 	.word	0x0800d5a8
 8002b68:	0800d5b8 	.word	0x0800d5b8
 8002b6c:	0800d5c8 	.word	0x0800d5c8
 8002b70:	0800d5d8 	.word	0x0800d5d8
 8002b74:	0800d5e8 	.word	0x0800d5e8
 8002b78:	0800d5fc 	.word	0x0800d5fc
			}
		} else if(kapiTablaAcKonum == 3) {
 8002b7c:	4b9b      	ldr	r3, [pc, #620]	; (8002dec <menu+0x1c9c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d111      	bne.n	8002ba8 <menu+0x1a58>
			if(dilSecim == 0) {
 8002b84:	4b9a      	ldr	r3, [pc, #616]	; (8002df0 <menu+0x1ca0>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002b8c:	4a99      	ldr	r2, [pc, #612]	; (8002df4 <menu+0x1ca4>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	2002      	movs	r0, #2
 8002b92:	f005 f87b 	bl	8007c8c <lcd_print>
			}
			if(dilSecim == 1) {
 8002b96:	4b96      	ldr	r3, [pc, #600]	; (8002df0 <menu+0x1ca0>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d104      	bne.n	8002ba8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002b9e:	4a96      	ldr	r2, [pc, #600]	; (8002df8 <menu+0x1ca8>)
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f005 f872 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4894      	ldr	r0, [pc, #592]	; (8002dfc <menu+0x1cac>)
 8002bac:	f006 fb94 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d115      	bne.n	8002be2 <menu+0x1a92>
 8002bb6:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <menu+0x1cb0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002bc4:	4b89      	ldr	r3, [pc, #548]	; (8002dec <menu+0x1c9c>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b87      	ldr	r3, [pc, #540]	; (8002dec <menu+0x1c9c>)
 8002bce:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002bd0:	4b86      	ldr	r3, [pc, #536]	; (8002dec <menu+0x1c9c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d902      	bls.n	8002bde <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <menu+0x1c9c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bde:	f001 fe8d 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be2:	2104      	movs	r1, #4
 8002be4:	4885      	ldr	r0, [pc, #532]	; (8002dfc <menu+0x1cac>)
 8002be6:	f006 fb77 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d115      	bne.n	8002c1c <menu+0x1acc>
 8002bf0:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <menu+0x1cb0>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002bfe:	4b7b      	ldr	r3, [pc, #492]	; (8002dec <menu+0x1c9c>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b79      	ldr	r3, [pc, #484]	; (8002dec <menu+0x1c9c>)
 8002c08:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c0a:	4b78      	ldr	r3, [pc, #480]	; (8002dec <menu+0x1c9c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d902      	bls.n	8002c18 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <menu+0x1c9c>)
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c18:	f001 fe70 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c1c:	2108      	movs	r1, #8
 8002c1e:	4877      	ldr	r0, [pc, #476]	; (8002dfc <menu+0x1cac>)
 8002c20:	f006 fb5a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d11d      	bne.n	8002c66 <menu+0x1b16>
 8002c2a:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <menu+0x1cb0>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d016      	beq.n	8002c66 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c38:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <menu+0x1c9c>)
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	4b71      	ldr	r3, [pc, #452]	; (8002e04 <menu+0x1cb4>)
 8002c3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c42:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <menu+0x1c9c>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <menu+0x1b02>
 8002c4a:	4b68      	ldr	r3, [pc, #416]	; (8002dec <menu+0x1c9c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d106      	bne.n	8002c60 <menu+0x1b10>
				altLimit = 1;
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <menu+0x1cb8>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <menu+0x1cb8>)
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	4b69      	ldr	r3, [pc, #420]	; (8002e04 <menu+0x1cb4>)
 8002c5e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <menu+0x1cbc>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002c66:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <menu+0x1cc0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	d17f      	bne.n	8002d6e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002c6e:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <menu+0x1ca0>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002c76:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <menu+0x1cc4>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f005 f806 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <menu+0x1cc8>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	2002      	movs	r0, #2
 8002c86:	f005 f801 	bl	8007c8c <lcd_print>
 8002c8a:	e00d      	b.n	8002ca8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002c8c:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <menu+0x1ca0>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d109      	bne.n	8002ca8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002c94:	4a61      	ldr	r2, [pc, #388]	; (8002e1c <menu+0x1ccc>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f004 fff7 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c9e:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <menu+0x1cd0>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f004 fff2 	bl	8007c8c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <menu+0x1cd4>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	220a      	movs	r2, #10
 8002cae:	495e      	ldr	r1, [pc, #376]	; (8002e28 <menu+0x1cd8>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f009 fb67 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <menu+0x1cd8>)
 8002cb8:	2110      	movs	r1, #16
 8002cba:	2002      	movs	r0, #2
 8002cbc:	f004 ffe6 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	484e      	ldr	r0, [pc, #312]	; (8002dfc <menu+0x1cac>)
 8002cc4:	f006 fb08 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d119      	bne.n	8002d02 <menu+0x1bb2>
 8002cce:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <menu+0x1cb0>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f083 0301 	eor.w	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d012      	beq.n	8002d02 <menu+0x1bb2>
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <menu+0x1cdc>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10e      	bne.n	8002d02 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <menu+0x1cd4>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <menu+0x1cd4>)
 8002cee:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <menu+0x1cd4>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d902      	bls.n	8002cfe <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <menu+0x1cd4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cfe:	f001 fdfd 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d02:	2104      	movs	r1, #4
 8002d04:	483d      	ldr	r0, [pc, #244]	; (8002dfc <menu+0x1cac>)
 8002d06:	f006 fae7 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d119      	bne.n	8002d44 <menu+0x1bf4>
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <menu+0x1cb0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <menu+0x1bf4>
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <menu+0x1cdc>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <menu+0x1cd4>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <menu+0x1cd4>)
 8002d30:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d32:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <menu+0x1cd4>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <menu+0x1cd4>)
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d40:	f001 fddc 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d44:	2108      	movs	r1, #8
 8002d46:	482d      	ldr	r0, [pc, #180]	; (8002dfc <menu+0x1cac>)
 8002d48:	f006 fac6 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10d      	bne.n	8002d6e <menu+0x1c1e>
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <menu+0x1cb0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	f083 0301 	eor.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <menu+0x1cd4>)
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <menu+0x1cb4>)
 8002d66:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <menu+0x1cbc>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <menu+0x1cc0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	f040 80bc 	bne.w	8002ef0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <menu+0x1ca0>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002d80:	4a2b      	ldr	r2, [pc, #172]	; (8002e30 <menu+0x1ce0>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	2001      	movs	r0, #1
 8002d86:	f004 ff81 	bl	8007c8c <lcd_print>
 8002d8a:	e008      	b.n	8002d9e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <menu+0x1ca0>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d104      	bne.n	8002d9e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <menu+0x1ce4>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f004 ff77 	bl	8007c8c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <menu+0x1ce8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d113      	bne.n	8002dce <menu+0x1c7e>
			if(dilSecim == 0) {
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <menu+0x1ca0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <menu+0x1ca4>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	2002      	movs	r0, #2
 8002db4:	f004 ff6a 	bl	8007c8c <lcd_print>
 8002db8:	e04b      	b.n	8002e52 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <menu+0x1ca0>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d147      	bne.n	8002e52 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <menu+0x1ca8>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	f004 ff60 	bl	8007c8c <lcd_print>
 8002dcc:	e041      	b.n	8002e52 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <menu+0x1ce8>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d13d      	bne.n	8002e52 <menu+0x1d02>
			if(dilSecim == 0) {
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <menu+0x1ca0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d130      	bne.n	8002e40 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <menu+0x1cec>)
 8002de0:	2101      	movs	r1, #1
 8002de2:	2002      	movs	r0, #2
 8002de4:	f004 ff52 	bl	8007c8c <lcd_print>
 8002de8:	e033      	b.n	8002e52 <menu+0x1d02>
 8002dea:	bf00      	nop
 8002dec:	20000241 	.word	0x20000241
 8002df0:	20000255 	.word	0x20000255
 8002df4:	0800d270 	.word	0x0800d270
 8002df8:	0800d284 	.word	0x0800d284
 8002dfc:	40010800 	.word	0x40010800
 8002e00:	20000263 	.word	0x20000263
 8002e04:	2000012c 	.word	0x2000012c
 8002e08:	2000023a 	.word	0x2000023a
 8002e0c:	20000260 	.word	0x20000260
 8002e10:	20000234 	.word	0x20000234
 8002e14:	0800d610 	.word	0x0800d610
 8002e18:	0800d4d4 	.word	0x0800d4d4
 8002e1c:	0800d624 	.word	0x0800d624
 8002e20:	0800d4f8 	.word	0x0800d4f8
 8002e24:	2000024f 	.word	0x2000024f
 8002e28:	2000019c 	.word	0x2000019c
 8002e2c:	2000023f 	.word	0x2000023f
 8002e30:	0800d638 	.word	0x0800d638
 8002e34:	0800d64c 	.word	0x0800d64c
 8002e38:	20000242 	.word	0x20000242
 8002e3c:	0800d2d0 	.word	0x0800d2d0
			} else if(dilSecim == 1) {
 8002e40:	4b99      	ldr	r3, [pc, #612]	; (80030a8 <menu+0x1f58>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d104      	bne.n	8002e52 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e48:	4a98      	ldr	r2, [pc, #608]	; (80030ac <menu+0x1f5c>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f004 ff1d 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e52:	2102      	movs	r1, #2
 8002e54:	4896      	ldr	r0, [pc, #600]	; (80030b0 <menu+0x1f60>)
 8002e56:	f006 fa3f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d115      	bne.n	8002e8c <menu+0x1d3c>
 8002e60:	4b94      	ldr	r3, [pc, #592]	; (80030b4 <menu+0x1f64>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002e6e:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <menu+0x1f68>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b90      	ldr	r3, [pc, #576]	; (80030b8 <menu+0x1f68>)
 8002e78:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002e7a:	4b8f      	ldr	r3, [pc, #572]	; (80030b8 <menu+0x1f68>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d902      	bls.n	8002e88 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002e82:	4b8d      	ldr	r3, [pc, #564]	; (80030b8 <menu+0x1f68>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e88:	f001 fd38 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	4888      	ldr	r0, [pc, #544]	; (80030b0 <menu+0x1f60>)
 8002e90:	f006 fa22 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d115      	bne.n	8002ec6 <menu+0x1d76>
 8002e9a:	4b86      	ldr	r3, [pc, #536]	; (80030b4 <menu+0x1f64>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ea8:	4b83      	ldr	r3, [pc, #524]	; (80030b8 <menu+0x1f68>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <menu+0x1f68>)
 8002eb2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002eb4:	4b80      	ldr	r3, [pc, #512]	; (80030b8 <menu+0x1f68>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002ebc:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <menu+0x1f68>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ec2:	f001 fd1b 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	4879      	ldr	r0, [pc, #484]	; (80030b0 <menu+0x1f60>)
 8002eca:	f006 fa05 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10d      	bne.n	8002ef0 <menu+0x1da0>
 8002ed4:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <menu+0x1f64>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002ee2:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <menu+0x1f68>)
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	4b75      	ldr	r3, [pc, #468]	; (80030bc <menu+0x1f6c>)
 8002ee8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002eea:	4b75      	ldr	r3, [pc, #468]	; (80030c0 <menu+0x1f70>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002ef0:	4b74      	ldr	r3, [pc, #464]	; (80030c4 <menu+0x1f74>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b11      	cmp	r3, #17
 8002ef6:	f040 80c3 	bne.w	8003080 <menu+0x1f30>
		if(dilSecim == 0) {
 8002efa:	4b6b      	ldr	r3, [pc, #428]	; (80030a8 <menu+0x1f58>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f02:	4a71      	ldr	r2, [pc, #452]	; (80030c8 <menu+0x1f78>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	2001      	movs	r0, #1
 8002f08:	f004 fec0 	bl	8007c8c <lcd_print>
 8002f0c:	e008      	b.n	8002f20 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002f0e:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <menu+0x1f58>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d104      	bne.n	8002f20 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f16:	4a6d      	ldr	r2, [pc, #436]	; (80030cc <menu+0x1f7c>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f004 feb6 	bl	8007c8c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f20:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <menu+0x1f80>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d113      	bne.n	8002f50 <menu+0x1e00>
			if(dilSecim == 0){
 8002f28:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <menu+0x1f58>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f30:	4a68      	ldr	r2, [pc, #416]	; (80030d4 <menu+0x1f84>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	2002      	movs	r0, #2
 8002f36:	f004 fea9 	bl	8007c8c <lcd_print>
 8002f3a:	e038      	b.n	8002fae <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f3c:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <menu+0x1f58>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d134      	bne.n	8002fae <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f44:	4a64      	ldr	r2, [pc, #400]	; (80030d8 <menu+0x1f88>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	2002      	movs	r0, #2
 8002f4a:	f004 fe9f 	bl	8007c8c <lcd_print>
 8002f4e:	e02e      	b.n	8002fae <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f50:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <menu+0x1f80>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d113      	bne.n	8002f80 <menu+0x1e30>
			if(dilSecim == 0){
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <menu+0x1f58>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002f60:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <menu+0x1f8c>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	2002      	movs	r0, #2
 8002f66:	f004 fe91 	bl	8007c8c <lcd_print>
 8002f6a:	e020      	b.n	8002fae <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f6c:	4b4e      	ldr	r3, [pc, #312]	; (80030a8 <menu+0x1f58>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11c      	bne.n	8002fae <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002f74:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <menu+0x1f90>)
 8002f76:	2101      	movs	r1, #1
 8002f78:	2002      	movs	r0, #2
 8002f7a:	f004 fe87 	bl	8007c8c <lcd_print>
 8002f7e:	e016      	b.n	8002fae <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <menu+0x1f80>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d112      	bne.n	8002fae <menu+0x1e5e>
			if(dilSecim == 0) {
 8002f88:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <menu+0x1f58>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002f90:	4a54      	ldr	r2, [pc, #336]	; (80030e4 <menu+0x1f94>)
 8002f92:	2101      	movs	r1, #1
 8002f94:	2002      	movs	r0, #2
 8002f96:	f004 fe79 	bl	8007c8c <lcd_print>
 8002f9a:	e008      	b.n	8002fae <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f9c:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <menu+0x1f58>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d104      	bne.n	8002fae <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002fa4:	4a50      	ldr	r2, [pc, #320]	; (80030e8 <menu+0x1f98>)
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	2002      	movs	r0, #2
 8002faa:	f004 fe6f 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fae:	2102      	movs	r1, #2
 8002fb0:	483f      	ldr	r0, [pc, #252]	; (80030b0 <menu+0x1f60>)
 8002fb2:	f006 f991 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d115      	bne.n	8002fe8 <menu+0x1e98>
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <menu+0x1f64>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <menu+0x1f80>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <menu+0x1f80>)
 8002fd4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <menu+0x1f80>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002fde:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <menu+0x1f80>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fe4:	f001 fc8a 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fe8:	2104      	movs	r1, #4
 8002fea:	4831      	ldr	r0, [pc, #196]	; (80030b0 <menu+0x1f60>)
 8002fec:	f006 f974 	bl	80092d8 <HAL_GPIO_ReadPin>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d115      	bne.n	8003022 <menu+0x1ed2>
 8002ff6:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <menu+0x1f64>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	f083 0301 	eor.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00e      	beq.n	8003022 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <menu+0x1f80>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <menu+0x1f80>)
 800300e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003010:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <menu+0x1f80>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d902      	bls.n	800301e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <menu+0x1f80>)
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800301e:	f001 fc6d 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003022:	2108      	movs	r1, #8
 8003024:	4822      	ldr	r0, [pc, #136]	; (80030b0 <menu+0x1f60>)
 8003026:	f006 f957 	bl	80092d8 <HAL_GPIO_ReadPin>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d127      	bne.n	8003080 <menu+0x1f30>
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <menu+0x1f64>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <menu+0x1f80>)
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <menu+0x1f6c>)
 8003044:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <menu+0x1f80>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d003      	beq.n	8003056 <menu+0x1f06>
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <menu+0x1f80>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d106      	bne.n	8003064 <menu+0x1f14>
				calismaSekli = 0;
 8003056:	4b25      	ldr	r3, [pc, #148]	; (80030ec <menu+0x1f9c>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800305c:	4b23      	ldr	r3, [pc, #140]	; (80030ec <menu+0x1f9c>)
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <menu+0x1f6c>)
 8003062:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <menu+0x1f80>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d106      	bne.n	800307a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800306c:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <menu+0x1fa0>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <menu+0x1fa0>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <menu+0x1f6c>)
 8003078:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <menu+0x1f70>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <menu+0x1f74>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b12      	cmp	r3, #18
 8003086:	f040 80d5 	bne.w	8003234 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <menu+0x1f80>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d13c      	bne.n	800310c <menu+0x1fbc>
			if(dilSecim == 0) {
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <menu+0x1f58>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d12e      	bne.n	80030f8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <menu+0x1fa4>)
 800309c:	2101      	movs	r1, #1
 800309e:	2001      	movs	r0, #1
 80030a0:	f004 fdf4 	bl	8007c8c <lcd_print>
 80030a4:	e048      	b.n	8003138 <menu+0x1fe8>
 80030a6:	bf00      	nop
 80030a8:	20000255 	.word	0x20000255
 80030ac:	0800d2e4 	.word	0x0800d2e4
 80030b0:	40010800 	.word	0x40010800
 80030b4:	20000263 	.word	0x20000263
 80030b8:	20000242 	.word	0x20000242
 80030bc:	2000012c 	.word	0x2000012c
 80030c0:	20000260 	.word	0x20000260
 80030c4:	20000234 	.word	0x20000234
 80030c8:	0800d660 	.word	0x0800d660
 80030cc:	0800d674 	.word	0x0800d674
 80030d0:	20000243 	.word	0x20000243
 80030d4:	0800d688 	.word	0x0800d688
 80030d8:	0800d698 	.word	0x0800d698
 80030dc:	0800d6a8 	.word	0x0800d6a8
 80030e0:	0800d6b8 	.word	0x0800d6b8
 80030e4:	0800d270 	.word	0x0800d270
 80030e8:	0800d284 	.word	0x0800d284
 80030ec:	20000235 	.word	0x20000235
 80030f0:	20000246 	.word	0x20000246
 80030f4:	0800d6c8 	.word	0x0800d6c8
			} else if(dilSecim == 1) {
 80030f8:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <menu+0x2198>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d11b      	bne.n	8003138 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003100:	4a7a      	ldr	r2, [pc, #488]	; (80032ec <menu+0x219c>)
 8003102:	2101      	movs	r1, #1
 8003104:	2001      	movs	r0, #1
 8003106:	f004 fdc1 	bl	8007c8c <lcd_print>
 800310a:	e015      	b.n	8003138 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800310c:	4b78      	ldr	r3, [pc, #480]	; (80032f0 <menu+0x21a0>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d111      	bne.n	8003138 <menu+0x1fe8>
			if(dilSecim == 0){
 8003114:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <menu+0x2198>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800311c:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <menu+0x21a4>)
 800311e:	2101      	movs	r1, #1
 8003120:	2001      	movs	r0, #1
 8003122:	f004 fdb3 	bl	8007c8c <lcd_print>
			}
			if(dilSecim == 1){
 8003126:	4b70      	ldr	r3, [pc, #448]	; (80032e8 <menu+0x2198>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d104      	bne.n	8003138 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800312e:	4a72      	ldr	r2, [pc, #456]	; (80032f8 <menu+0x21a8>)
 8003130:	2101      	movs	r1, #1
 8003132:	2001      	movs	r0, #1
 8003134:	f004 fdaa 	bl	8007c8c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003138:	4b70      	ldr	r3, [pc, #448]	; (80032fc <menu+0x21ac>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d113      	bne.n	8003168 <menu+0x2018>
			if(dilSecim == 0) {
 8003140:	4b69      	ldr	r3, [pc, #420]	; (80032e8 <menu+0x2198>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003148:	4a6d      	ldr	r2, [pc, #436]	; (8003300 <menu+0x21b0>)
 800314a:	2101      	movs	r1, #1
 800314c:	2002      	movs	r0, #2
 800314e:	f004 fd9d 	bl	8007c8c <lcd_print>
 8003152:	e020      	b.n	8003196 <menu+0x2046>
			} else if(dilSecim == 1){
 8003154:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <menu+0x2198>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d11c      	bne.n	8003196 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800315c:	4a69      	ldr	r2, [pc, #420]	; (8003304 <menu+0x21b4>)
 800315e:	2101      	movs	r1, #1
 8003160:	2002      	movs	r0, #2
 8003162:	f004 fd93 	bl	8007c8c <lcd_print>
 8003166:	e016      	b.n	8003196 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003168:	4b64      	ldr	r3, [pc, #400]	; (80032fc <menu+0x21ac>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d112      	bne.n	8003196 <menu+0x2046>
			if(dilSecim == 0){
 8003170:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <menu+0x2198>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003178:	4a63      	ldr	r2, [pc, #396]	; (8003308 <menu+0x21b8>)
 800317a:	2101      	movs	r1, #1
 800317c:	2002      	movs	r0, #2
 800317e:	f004 fd85 	bl	8007c8c <lcd_print>
 8003182:	e008      	b.n	8003196 <menu+0x2046>
			} else if(dilSecim == 1){
 8003184:	4b58      	ldr	r3, [pc, #352]	; (80032e8 <menu+0x2198>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d104      	bne.n	8003196 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800318c:	4a5f      	ldr	r2, [pc, #380]	; (800330c <menu+0x21bc>)
 800318e:	2101      	movs	r1, #1
 8003190:	2002      	movs	r0, #2
 8003192:	f004 fd7b 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003196:	2102      	movs	r1, #2
 8003198:	485d      	ldr	r0, [pc, #372]	; (8003310 <menu+0x21c0>)
 800319a:	f006 f89d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d115      	bne.n	80031d0 <menu+0x2080>
 80031a4:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <menu+0x21c4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80031b2:	4b52      	ldr	r3, [pc, #328]	; (80032fc <menu+0x21ac>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b50      	ldr	r3, [pc, #320]	; (80032fc <menu+0x21ac>)
 80031bc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80031be:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <menu+0x21ac>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d902      	bls.n	80031cc <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80031c6:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <menu+0x21ac>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031cc:	f001 fb96 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d0:	2104      	movs	r1, #4
 80031d2:	484f      	ldr	r0, [pc, #316]	; (8003310 <menu+0x21c0>)
 80031d4:	f006 f880 	bl	80092d8 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d115      	bne.n	800320a <menu+0x20ba>
 80031de:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <menu+0x21c4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <menu+0x21ac>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <menu+0x21ac>)
 80031f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80031f8:	4b40      	ldr	r3, [pc, #256]	; (80032fc <menu+0x21ac>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <menu+0x21ac>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003206:	f001 fb79 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800320a:	2108      	movs	r1, #8
 800320c:	4840      	ldr	r0, [pc, #256]	; (8003310 <menu+0x21c0>)
 800320e:	f006 f863 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10d      	bne.n	8003234 <menu+0x20e4>
 8003218:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <menu+0x21c4>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <menu+0x21ac>)
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <menu+0x21c8>)
 800322c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <menu+0x21cc>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <menu+0x21d0>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b13      	cmp	r3, #19
 800323a:	f040 80d5 	bne.w	80033e8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <menu+0x21a0>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d113      	bne.n	800326e <menu+0x211e>
			if(dilSecim == 0) {
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <menu+0x2198>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800324e:	4a35      	ldr	r2, [pc, #212]	; (8003324 <menu+0x21d4>)
 8003250:	2101      	movs	r1, #1
 8003252:	2001      	movs	r0, #1
 8003254:	f004 fd1a 	bl	8007c8c <lcd_print>
 8003258:	e01f      	b.n	800329a <menu+0x214a>
			} else if(dilSecim == 1) {
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <menu+0x2198>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d11b      	bne.n	800329a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003262:	4a31      	ldr	r2, [pc, #196]	; (8003328 <menu+0x21d8>)
 8003264:	2101      	movs	r1, #1
 8003266:	2001      	movs	r0, #1
 8003268:	f004 fd10 	bl	8007c8c <lcd_print>
 800326c:	e015      	b.n	800329a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <menu+0x21a0>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d111      	bne.n	800329a <menu+0x214a>
			if(dilSecim == 0) {
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <menu+0x2198>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800327e:	4a2b      	ldr	r2, [pc, #172]	; (800332c <menu+0x21dc>)
 8003280:	2101      	movs	r1, #1
 8003282:	2001      	movs	r0, #1
 8003284:	f004 fd02 	bl	8007c8c <lcd_print>
			}
			if(dilSecim == 1) {
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <menu+0x2198>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d104      	bne.n	800329a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <menu+0x21e0>)
 8003292:	2101      	movs	r1, #1
 8003294:	2001      	movs	r0, #1
 8003296:	f004 fcf9 	bl	8007c8c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <menu+0x21e4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d113      	bne.n	80032ca <menu+0x217a>
			if(dilSecim == 0) {
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <menu+0x2198>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80032aa:	4a15      	ldr	r2, [pc, #84]	; (8003300 <menu+0x21b0>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	2002      	movs	r0, #2
 80032b0:	f004 fcec 	bl	8007c8c <lcd_print>
 80032b4:	e049      	b.n	800334a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <menu+0x2198>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d145      	bne.n	800334a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80032be:	4a11      	ldr	r2, [pc, #68]	; (8003304 <menu+0x21b4>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	2002      	movs	r0, #2
 80032c4:	f004 fce2 	bl	8007c8c <lcd_print>
 80032c8:	e03f      	b.n	800334a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <menu+0x21e4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d13b      	bne.n	800334a <menu+0x21fa>
			if(dilSecim == 0) {
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <menu+0x2198>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d12e      	bne.n	8003338 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80032da:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <menu+0x21b8>)
 80032dc:	2101      	movs	r1, #1
 80032de:	2002      	movs	r0, #2
 80032e0:	f004 fcd4 	bl	8007c8c <lcd_print>
 80032e4:	e031      	b.n	800334a <menu+0x21fa>
 80032e6:	bf00      	nop
 80032e8:	20000255 	.word	0x20000255
 80032ec:	0800d6dc 	.word	0x0800d6dc
 80032f0:	20000243 	.word	0x20000243
 80032f4:	0800d6ec 	.word	0x0800d6ec
 80032f8:	0800d700 	.word	0x0800d700
 80032fc:	20000244 	.word	0x20000244
 8003300:	0800d270 	.word	0x0800d270
 8003304:	0800d284 	.word	0x0800d284
 8003308:	0800d2d0 	.word	0x0800d2d0
 800330c:	0800d2e4 	.word	0x0800d2e4
 8003310:	40010800 	.word	0x40010800
 8003314:	20000263 	.word	0x20000263
 8003318:	2000012c 	.word	0x2000012c
 800331c:	20000260 	.word	0x20000260
 8003320:	20000234 	.word	0x20000234
 8003324:	0800d714 	.word	0x0800d714
 8003328:	0800d728 	.word	0x0800d728
 800332c:	0800d73c 	.word	0x0800d73c
 8003330:	0800d750 	.word	0x0800d750
 8003334:	20000245 	.word	0x20000245
			} else if(dilSecim == 1) {
 8003338:	4b90      	ldr	r3, [pc, #576]	; (800357c <menu+0x242c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d104      	bne.n	800334a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003340:	4a8f      	ldr	r2, [pc, #572]	; (8003580 <menu+0x2430>)
 8003342:	2101      	movs	r1, #1
 8003344:	2002      	movs	r0, #2
 8003346:	f004 fca1 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800334a:	2102      	movs	r1, #2
 800334c:	488d      	ldr	r0, [pc, #564]	; (8003584 <menu+0x2434>)
 800334e:	f005 ffc3 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d115      	bne.n	8003384 <menu+0x2234>
 8003358:	4b8b      	ldr	r3, [pc, #556]	; (8003588 <menu+0x2438>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f083 0301 	eor.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00e      	beq.n	8003384 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003366:	4b89      	ldr	r3, [pc, #548]	; (800358c <menu+0x243c>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b87      	ldr	r3, [pc, #540]	; (800358c <menu+0x243c>)
 8003370:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003372:	4b86      	ldr	r3, [pc, #536]	; (800358c <menu+0x243c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d902      	bls.n	8003380 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800337a:	4b84      	ldr	r3, [pc, #528]	; (800358c <menu+0x243c>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003380:	f001 fabc 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003384:	2104      	movs	r1, #4
 8003386:	487f      	ldr	r0, [pc, #508]	; (8003584 <menu+0x2434>)
 8003388:	f005 ffa6 	bl	80092d8 <HAL_GPIO_ReadPin>
 800338c:	4603      	mov	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d115      	bne.n	80033be <menu+0x226e>
 8003392:	4b7d      	ldr	r3, [pc, #500]	; (8003588 <menu+0x2438>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	f083 0301 	eor.w	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80033a0:	4b7a      	ldr	r3, [pc, #488]	; (800358c <menu+0x243c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b78      	ldr	r3, [pc, #480]	; (800358c <menu+0x243c>)
 80033aa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80033ac:	4b77      	ldr	r3, [pc, #476]	; (800358c <menu+0x243c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80033b4:	4b75      	ldr	r3, [pc, #468]	; (800358c <menu+0x243c>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033ba:	f001 fa9f 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033be:	2108      	movs	r1, #8
 80033c0:	4870      	ldr	r0, [pc, #448]	; (8003584 <menu+0x2434>)
 80033c2:	f005 ff89 	bl	80092d8 <HAL_GPIO_ReadPin>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10d      	bne.n	80033e8 <menu+0x2298>
 80033cc:	4b6e      	ldr	r3, [pc, #440]	; (8003588 <menu+0x2438>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80033da:	4b6c      	ldr	r3, [pc, #432]	; (800358c <menu+0x243c>)
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <menu+0x2440>)
 80033e0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80033e2:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <menu+0x2444>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80033e8:	4b6b      	ldr	r3, [pc, #428]	; (8003598 <menu+0x2448>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b14      	cmp	r3, #20
 80033ee:	f040 80b5 	bne.w	800355c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <menu+0x244c>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d113      	bne.n	8003422 <menu+0x22d2>
			if(dilSecim == 0) {
 80033fa:	4b60      	ldr	r3, [pc, #384]	; (800357c <menu+0x242c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003402:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <menu+0x2450>)
 8003404:	2101      	movs	r1, #1
 8003406:	2001      	movs	r0, #1
 8003408:	f004 fc40 	bl	8007c8c <lcd_print>
 800340c:	e020      	b.n	8003450 <menu+0x2300>
			} else if(dilSecim == 1) {
 800340e:	4b5b      	ldr	r3, [pc, #364]	; (800357c <menu+0x242c>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d11c      	bne.n	8003450 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003416:	4a63      	ldr	r2, [pc, #396]	; (80035a4 <menu+0x2454>)
 8003418:	2101      	movs	r1, #1
 800341a:	2001      	movs	r0, #1
 800341c:	f004 fc36 	bl	8007c8c <lcd_print>
 8003420:	e016      	b.n	8003450 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <menu+0x244c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d112      	bne.n	8003450 <menu+0x2300>
			if(dilSecim == 0) {
 800342a:	4b54      	ldr	r3, [pc, #336]	; (800357c <menu+0x242c>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003432:	4a5d      	ldr	r2, [pc, #372]	; (80035a8 <menu+0x2458>)
 8003434:	2101      	movs	r1, #1
 8003436:	2001      	movs	r0, #1
 8003438:	f004 fc28 	bl	8007c8c <lcd_print>
 800343c:	e008      	b.n	8003450 <menu+0x2300>
			} else if(dilSecim == 1) {
 800343e:	4b4f      	ldr	r3, [pc, #316]	; (800357c <menu+0x242c>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d104      	bne.n	8003450 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003446:	4a59      	ldr	r2, [pc, #356]	; (80035ac <menu+0x245c>)
 8003448:	2101      	movs	r1, #1
 800344a:	2001      	movs	r0, #1
 800344c:	f004 fc1e 	bl	8007c8c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003450:	4b57      	ldr	r3, [pc, #348]	; (80035b0 <menu+0x2460>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d113      	bne.n	8003480 <menu+0x2330>
			if(dilSecim == 0) {
 8003458:	4b48      	ldr	r3, [pc, #288]	; (800357c <menu+0x242c>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003460:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <menu+0x2464>)
 8003462:	2101      	movs	r1, #1
 8003464:	2002      	movs	r0, #2
 8003466:	f004 fc11 	bl	8007c8c <lcd_print>
 800346a:	e020      	b.n	80034ae <menu+0x235e>
			} else if(dilSecim == 1) {
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <menu+0x242c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d11c      	bne.n	80034ae <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003474:	4a50      	ldr	r2, [pc, #320]	; (80035b8 <menu+0x2468>)
 8003476:	2101      	movs	r1, #1
 8003478:	2002      	movs	r0, #2
 800347a:	f004 fc07 	bl	8007c8c <lcd_print>
 800347e:	e016      	b.n	80034ae <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003480:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <menu+0x2460>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d112      	bne.n	80034ae <menu+0x235e>
			if(dilSecim == 0) {
 8003488:	4b3c      	ldr	r3, [pc, #240]	; (800357c <menu+0x242c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003490:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <menu+0x246c>)
 8003492:	2101      	movs	r1, #1
 8003494:	2002      	movs	r0, #2
 8003496:	f004 fbf9 	bl	8007c8c <lcd_print>
 800349a:	e008      	b.n	80034ae <menu+0x235e>
			} else if(dilSecim == 1) {
 800349c:	4b37      	ldr	r3, [pc, #220]	; (800357c <menu+0x242c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d104      	bne.n	80034ae <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80034a4:	4a46      	ldr	r2, [pc, #280]	; (80035c0 <menu+0x2470>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	2002      	movs	r0, #2
 80034aa:	f004 fbef 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034ae:	2102      	movs	r1, #2
 80034b0:	4834      	ldr	r0, [pc, #208]	; (8003584 <menu+0x2434>)
 80034b2:	f005 ff11 	bl	80092d8 <HAL_GPIO_ReadPin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d119      	bne.n	80034f0 <menu+0x23a0>
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <menu+0x2438>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d012      	beq.n	80034f0 <menu+0x23a0>
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <menu+0x244c>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d10e      	bne.n	80034f0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <menu+0x2460>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <menu+0x2460>)
 80034dc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80034de:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <menu+0x2460>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d902      	bls.n	80034ec <menu+0x239c>
				devirmeSilindirTipi = 0;
 80034e6:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <menu+0x2460>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034ec:	f001 fa06 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034f0:	2104      	movs	r1, #4
 80034f2:	4824      	ldr	r0, [pc, #144]	; (8003584 <menu+0x2434>)
 80034f4:	f005 fef0 	bl	80092d8 <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d119      	bne.n	8003532 <menu+0x23e2>
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <menu+0x2438>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <menu+0x23e2>
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <menu+0x244c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d10e      	bne.n	8003532 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <menu+0x2460>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	3b01      	subs	r3, #1
 800351a:	b2da      	uxtb	r2, r3
 800351c:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <menu+0x2460>)
 800351e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <menu+0x2460>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003528:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <menu+0x2460>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800352e:	f001 f9e5 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003532:	2108      	movs	r1, #8
 8003534:	4813      	ldr	r0, [pc, #76]	; (8003584 <menu+0x2434>)
 8003536:	f005 fecf 	bl	80092d8 <HAL_GPIO_ReadPin>
 800353a:	4603      	mov	r3, r0
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10d      	bne.n	800355c <menu+0x240c>
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <menu+0x2438>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f083 0301 	eor.w	r3, r3, #1
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <menu+0x2460>)
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <menu+0x2440>)
 8003554:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <menu+0x2444>)
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <menu+0x2448>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b15      	cmp	r3, #21
 8003562:	f040 80c2 	bne.w	80036ea <menu+0x259a>
		if(dilSecim == 0) {
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <menu+0x242c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d12c      	bne.n	80035c8 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <menu+0x2474>)
 8003570:	2101      	movs	r1, #1
 8003572:	2001      	movs	r0, #1
 8003574:	f004 fb8a 	bl	8007c8c <lcd_print>
 8003578:	e02f      	b.n	80035da <menu+0x248a>
 800357a:	bf00      	nop
 800357c:	20000255 	.word	0x20000255
 8003580:	0800d2e4 	.word	0x0800d2e4
 8003584:	40010800 	.word	0x40010800
 8003588:	20000263 	.word	0x20000263
 800358c:	20000245 	.word	0x20000245
 8003590:	2000012c 	.word	0x2000012c
 8003594:	20000260 	.word	0x20000260
 8003598:	20000234 	.word	0x20000234
 800359c:	20000243 	.word	0x20000243
 80035a0:	0800d764 	.word	0x0800d764
 80035a4:	0800d778 	.word	0x0800d778
 80035a8:	0800d78c 	.word	0x0800d78c
 80035ac:	0800d7a0 	.word	0x0800d7a0
 80035b0:	20000246 	.word	0x20000246
 80035b4:	0800d7b4 	.word	0x0800d7b4
 80035b8:	0800d7c8 	.word	0x0800d7c8
 80035bc:	0800d7d8 	.word	0x0800d7d8
 80035c0:	0800d7ec 	.word	0x0800d7ec
 80035c4:	0800d7fc 	.word	0x0800d7fc
		} else if(dilSecim == 1) {
 80035c8:	4b9c      	ldr	r3, [pc, #624]	; (800383c <menu+0x26ec>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d104      	bne.n	80035da <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80035d0:	4a9b      	ldr	r2, [pc, #620]	; (8003840 <menu+0x26f0>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	2001      	movs	r0, #1
 80035d6:	f004 fb59 	bl	8007c8c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80035da:	4b9a      	ldr	r3, [pc, #616]	; (8003844 <menu+0x26f4>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d112      	bne.n	8003608 <menu+0x24b8>
			if(dilSecim == 0) {
 80035e2:	4b96      	ldr	r3, [pc, #600]	; (800383c <menu+0x26ec>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80035ea:	4a97      	ldr	r2, [pc, #604]	; (8003848 <menu+0x26f8>)
 80035ec:	2101      	movs	r1, #1
 80035ee:	2002      	movs	r0, #2
 80035f0:	f004 fb4c 	bl	8007c8c <lcd_print>
			}
			if(dilSecim == 1) {
 80035f4:	4b91      	ldr	r3, [pc, #580]	; (800383c <menu+0x26ec>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d11c      	bne.n	8003636 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80035fc:	4a93      	ldr	r2, [pc, #588]	; (800384c <menu+0x26fc>)
 80035fe:	2101      	movs	r1, #1
 8003600:	2002      	movs	r0, #2
 8003602:	f004 fb43 	bl	8007c8c <lcd_print>
 8003606:	e016      	b.n	8003636 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003608:	4b8e      	ldr	r3, [pc, #568]	; (8003844 <menu+0x26f4>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d112      	bne.n	8003636 <menu+0x24e6>
			if(dilSecim == 0) {
 8003610:	4b8a      	ldr	r3, [pc, #552]	; (800383c <menu+0x26ec>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003618:	4a8d      	ldr	r2, [pc, #564]	; (8003850 <menu+0x2700>)
 800361a:	2101      	movs	r1, #1
 800361c:	2002      	movs	r0, #2
 800361e:	f004 fb35 	bl	8007c8c <lcd_print>
 8003622:	e008      	b.n	8003636 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003624:	4b85      	ldr	r3, [pc, #532]	; (800383c <menu+0x26ec>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d104      	bne.n	8003636 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800362c:	4a89      	ldr	r2, [pc, #548]	; (8003854 <menu+0x2704>)
 800362e:	2101      	movs	r1, #1
 8003630:	2002      	movs	r0, #2
 8003632:	f004 fb2b 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003636:	2102      	movs	r1, #2
 8003638:	4887      	ldr	r0, [pc, #540]	; (8003858 <menu+0x2708>)
 800363a:	f005 fe4d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800363e:	4603      	mov	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d115      	bne.n	8003670 <menu+0x2520>
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <menu+0x270c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f083 0301 	eor.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003652:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <menu+0x26f4>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <menu+0x26f4>)
 800365c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800365e:	4b79      	ldr	r3, [pc, #484]	; (8003844 <menu+0x26f4>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d902      	bls.n	800366c <menu+0x251c>
				platformSilindirTipi = 0;
 8003666:	4b77      	ldr	r3, [pc, #476]	; (8003844 <menu+0x26f4>)
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800366c:	f001 f946 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003670:	2104      	movs	r1, #4
 8003672:	4879      	ldr	r0, [pc, #484]	; (8003858 <menu+0x2708>)
 8003674:	f005 fe30 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d115      	bne.n	80036aa <menu+0x255a>
 800367e:	4b77      	ldr	r3, [pc, #476]	; (800385c <menu+0x270c>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	f083 0301 	eor.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <menu+0x26f4>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	3b01      	subs	r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <menu+0x26f4>)
 8003696:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <menu+0x26f4>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <menu+0x26f4>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036a6:	f001 f929 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036aa:	2108      	movs	r1, #8
 80036ac:	486a      	ldr	r0, [pc, #424]	; (8003858 <menu+0x2708>)
 80036ae:	f005 fe13 	bl	80092d8 <HAL_GPIO_ReadPin>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d118      	bne.n	80036ea <menu+0x259a>
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <menu+0x270c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f083 0301 	eor.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d011      	beq.n	80036ea <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80036c6:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <menu+0x26f4>)
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	4b65      	ldr	r3, [pc, #404]	; (8003860 <menu+0x2710>)
 80036cc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80036ce:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <menu+0x26f4>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d106      	bne.n	80036e4 <menu+0x2594>
				altLimit = 1;
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <menu+0x2714>)
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80036dc:	4b61      	ldr	r3, [pc, #388]	; (8003864 <menu+0x2714>)
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <menu+0x2710>)
 80036e2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80036e4:	4b60      	ldr	r3, [pc, #384]	; (8003868 <menu+0x2718>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80036ea:	4b60      	ldr	r3, [pc, #384]	; (800386c <menu+0x271c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b16      	cmp	r3, #22
 80036f0:	f040 8081 	bne.w	80037f6 <menu+0x26a6>
		if(dilSecim == 0) {
 80036f4:	4b51      	ldr	r3, [pc, #324]	; (800383c <menu+0x26ec>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80036fc:	4a5c      	ldr	r2, [pc, #368]	; (8003870 <menu+0x2720>)
 80036fe:	2101      	movs	r1, #1
 8003700:	2001      	movs	r0, #1
 8003702:	f004 fac3 	bl	8007c8c <lcd_print>
 8003706:	e008      	b.n	800371a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <menu+0x26ec>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d104      	bne.n	800371a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <menu+0x2724>)
 8003712:	2101      	movs	r1, #1
 8003714:	2001      	movs	r0, #1
 8003716:	f004 fab9 	bl	8007c8c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800371a:	4b48      	ldr	r3, [pc, #288]	; (800383c <menu+0x26ec>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003722:	4a55      	ldr	r2, [pc, #340]	; (8003878 <menu+0x2728>)
 8003724:	2101      	movs	r1, #1
 8003726:	2002      	movs	r0, #2
 8003728:	f004 fab0 	bl	8007c8c <lcd_print>
 800372c:	e008      	b.n	8003740 <menu+0x25f0>
			} else if(dilSecim == 1){
 800372e:	4b43      	ldr	r3, [pc, #268]	; (800383c <menu+0x26ec>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d104      	bne.n	8003740 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003736:	4a51      	ldr	r2, [pc, #324]	; (800387c <menu+0x272c>)
 8003738:	2101      	movs	r1, #1
 800373a:	2002      	movs	r0, #2
 800373c:	f004 faa6 	bl	8007c8c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003740:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <menu+0x2730>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	220a      	movs	r2, #10
 8003746:	494f      	ldr	r1, [pc, #316]	; (8003884 <menu+0x2734>)
 8003748:	4618      	mov	r0, r3
 800374a:	f008 fe1b 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 800374e:	4a4d      	ldr	r2, [pc, #308]	; (8003884 <menu+0x2734>)
 8003750:	2110      	movs	r1, #16
 8003752:	2002      	movs	r0, #2
 8003754:	f004 fa9a 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003758:	2102      	movs	r1, #2
 800375a:	483f      	ldr	r0, [pc, #252]	; (8003858 <menu+0x2708>)
 800375c:	f005 fdbc 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d115      	bne.n	8003792 <menu+0x2642>
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <menu+0x270c>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <menu+0x2730>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <menu+0x2730>)
 800377e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003780:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <menu+0x2730>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d902      	bls.n	800378e <menu+0x263e>
				yukariValfTmr = 0;
 8003788:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <menu+0x2730>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800378e:	f001 f8b5 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003792:	2104      	movs	r1, #4
 8003794:	4830      	ldr	r0, [pc, #192]	; (8003858 <menu+0x2708>)
 8003796:	f005 fd9f 	bl	80092d8 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d115      	bne.n	80037cc <menu+0x267c>
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <menu+0x270c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <menu+0x2730>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4b32      	ldr	r3, [pc, #200]	; (8003880 <menu+0x2730>)
 80037b8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80037ba:	4b31      	ldr	r3, [pc, #196]	; (8003880 <menu+0x2730>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d902      	bls.n	80037c8 <menu+0x2678>
		   		yukariValfTmr = 5;
 80037c2:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <menu+0x2730>)
 80037c4:	2205      	movs	r2, #5
 80037c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037c8:	f001 f898 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037cc:	2108      	movs	r1, #8
 80037ce:	4822      	ldr	r0, [pc, #136]	; (8003858 <menu+0x2708>)
 80037d0:	f005 fd82 	bl	80092d8 <HAL_GPIO_ReadPin>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d10d      	bne.n	80037f6 <menu+0x26a6>
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <menu+0x270c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	f083 0301 	eor.w	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <menu+0x2730>)
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <menu+0x2710>)
 80037ee:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <menu+0x2718>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <menu+0x271c>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b17      	cmp	r3, #23
 80037fc:	f040 80ac 	bne.w	8003958 <menu+0x2808>
		if(dilSecim == 0) {
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <menu+0x26ec>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <menu+0x2738>)
 800380a:	2101      	movs	r1, #1
 800380c:	2001      	movs	r0, #1
 800380e:	f004 fa3d 	bl	8007c8c <lcd_print>
 8003812:	e008      	b.n	8003826 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <menu+0x26ec>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d104      	bne.n	8003826 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <menu+0x273c>)
 800381e:	2101      	movs	r1, #1
 8003820:	2001      	movs	r0, #1
 8003822:	f004 fa33 	bl	8007c8c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <menu+0x26ec>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d130      	bne.n	8003890 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <menu+0x2728>)
 8003830:	2101      	movs	r1, #1
 8003832:	2002      	movs	r0, #2
 8003834:	f004 fa2a 	bl	8007c8c <lcd_print>
 8003838:	e033      	b.n	80038a2 <menu+0x2752>
 800383a:	bf00      	nop
 800383c:	20000255 	.word	0x20000255
 8003840:	0800d810 	.word	0x0800d810
 8003844:	20000247 	.word	0x20000247
 8003848:	0800d7b4 	.word	0x0800d7b4
 800384c:	0800d7c8 	.word	0x0800d7c8
 8003850:	0800d7d8 	.word	0x0800d7d8
 8003854:	0800d7ec 	.word	0x0800d7ec
 8003858:	40010800 	.word	0x40010800
 800385c:	20000263 	.word	0x20000263
 8003860:	2000012c 	.word	0x2000012c
 8003864:	2000023a 	.word	0x2000023a
 8003868:	20000260 	.word	0x20000260
 800386c:	20000234 	.word	0x20000234
 8003870:	0800d820 	.word	0x0800d820
 8003874:	0800d834 	.word	0x0800d834
 8003878:	0800d4d4 	.word	0x0800d4d4
 800387c:	0800d848 	.word	0x0800d848
 8003880:	20000248 	.word	0x20000248
 8003884:	2000019c 	.word	0x2000019c
 8003888:	0800d858 	.word	0x0800d858
 800388c:	0800d86c 	.word	0x0800d86c
			} else if(dilSecim == 1) {
 8003890:	4b98      	ldr	r3, [pc, #608]	; (8003af4 <menu+0x29a4>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d104      	bne.n	80038a2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003898:	4a97      	ldr	r2, [pc, #604]	; (8003af8 <menu+0x29a8>)
 800389a:	2101      	movs	r1, #1
 800389c:	2002      	movs	r0, #2
 800389e:	f004 f9f5 	bl	8007c8c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80038a2:	4b96      	ldr	r3, [pc, #600]	; (8003afc <menu+0x29ac>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	220a      	movs	r2, #10
 80038a8:	4995      	ldr	r1, [pc, #596]	; (8003b00 <menu+0x29b0>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f008 fd6a 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 80038b0:	4a93      	ldr	r2, [pc, #588]	; (8003b00 <menu+0x29b0>)
 80038b2:	2110      	movs	r1, #16
 80038b4:	2002      	movs	r0, #2
 80038b6:	f004 f9e9 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ba:	2102      	movs	r1, #2
 80038bc:	4891      	ldr	r0, [pc, #580]	; (8003b04 <menu+0x29b4>)
 80038be:	f005 fd0b 	bl	80092d8 <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d115      	bne.n	80038f4 <menu+0x27a4>
 80038c8:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <menu+0x29b8>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 80038d6:	4b89      	ldr	r3, [pc, #548]	; (8003afc <menu+0x29ac>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4b87      	ldr	r3, [pc, #540]	; (8003afc <menu+0x29ac>)
 80038e0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80038e2:	4b86      	ldr	r3, [pc, #536]	; (8003afc <menu+0x29ac>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d902      	bls.n	80038f0 <menu+0x27a0>
				asagiValfTmr = 0;
 80038ea:	4b84      	ldr	r3, [pc, #528]	; (8003afc <menu+0x29ac>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038f0:	f001 f804 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f4:	2104      	movs	r1, #4
 80038f6:	4883      	ldr	r0, [pc, #524]	; (8003b04 <menu+0x29b4>)
 80038f8:	f005 fcee 	bl	80092d8 <HAL_GPIO_ReadPin>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d115      	bne.n	800392e <menu+0x27de>
 8003902:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <menu+0x29b8>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003910:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <menu+0x29ac>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	3b01      	subs	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b78      	ldr	r3, [pc, #480]	; (8003afc <menu+0x29ac>)
 800391a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800391c:	4b77      	ldr	r3, [pc, #476]	; (8003afc <menu+0x29ac>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d902      	bls.n	800392a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003924:	4b75      	ldr	r3, [pc, #468]	; (8003afc <menu+0x29ac>)
 8003926:	2205      	movs	r2, #5
 8003928:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800392a:	f000 ffe7 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800392e:	2108      	movs	r1, #8
 8003930:	4874      	ldr	r0, [pc, #464]	; (8003b04 <menu+0x29b4>)
 8003932:	f005 fcd1 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003936:	4603      	mov	r3, r0
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10d      	bne.n	8003958 <menu+0x2808>
 800393c:	4b72      	ldr	r3, [pc, #456]	; (8003b08 <menu+0x29b8>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	f083 0301 	eor.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800394a:	4b6c      	ldr	r3, [pc, #432]	; (8003afc <menu+0x29ac>)
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <menu+0x29bc>)
 8003950:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003952:	4b6f      	ldr	r3, [pc, #444]	; (8003b10 <menu+0x29c0>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003958:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <menu+0x29c4>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b18      	cmp	r3, #24
 800395e:	f040 809d 	bne.w	8003a9c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003962:	4b6d      	ldr	r3, [pc, #436]	; (8003b18 <menu+0x29c8>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d113      	bne.n	8003992 <menu+0x2842>
			if(dilSecim == 0) {
 800396a:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <menu+0x29a4>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003972:	4a6a      	ldr	r2, [pc, #424]	; (8003b1c <menu+0x29cc>)
 8003974:	2101      	movs	r1, #1
 8003976:	2001      	movs	r0, #1
 8003978:	f004 f988 	bl	8007c8c <lcd_print>
 800397c:	e020      	b.n	80039c0 <menu+0x2870>
			} else if(dilSecim == 1) {
 800397e:	4b5d      	ldr	r3, [pc, #372]	; (8003af4 <menu+0x29a4>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d11c      	bne.n	80039c0 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003986:	4a66      	ldr	r2, [pc, #408]	; (8003b20 <menu+0x29d0>)
 8003988:	2101      	movs	r1, #1
 800398a:	2001      	movs	r0, #1
 800398c:	f004 f97e 	bl	8007c8c <lcd_print>
 8003990:	e016      	b.n	80039c0 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003992:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <menu+0x29c8>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d112      	bne.n	80039c0 <menu+0x2870>
			if(dilSecim == 0) {
 800399a:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <menu+0x29a4>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80039a2:	4a60      	ldr	r2, [pc, #384]	; (8003b24 <menu+0x29d4>)
 80039a4:	2101      	movs	r1, #1
 80039a6:	2001      	movs	r0, #1
 80039a8:	f004 f970 	bl	8007c8c <lcd_print>
 80039ac:	e008      	b.n	80039c0 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039ae:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <menu+0x29a4>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d104      	bne.n	80039c0 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80039b6:	4a5c      	ldr	r2, [pc, #368]	; (8003b28 <menu+0x29d8>)
 80039b8:	2101      	movs	r1, #1
 80039ba:	2001      	movs	r0, #1
 80039bc:	f004 f966 	bl	8007c8c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80039c0:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <menu+0x29a4>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <menu+0x29dc>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	2002      	movs	r0, #2
 80039ce:	f004 f95d 	bl	8007c8c <lcd_print>
 80039d2:	e008      	b.n	80039e6 <menu+0x2896>
			} else if(dilSecim == 1) {
 80039d4:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <menu+0x29a4>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d104      	bne.n	80039e6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80039dc:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <menu+0x29a8>)
 80039de:	2101      	movs	r1, #1
 80039e0:	2002      	movs	r0, #2
 80039e2:	f004 f953 	bl	8007c8c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80039e6:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <menu+0x29e0>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	220a      	movs	r2, #10
 80039ec:	4944      	ldr	r1, [pc, #272]	; (8003b00 <menu+0x29b0>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f008 fcc8 	bl	800c384 <itoa>
		lcd_print(2, 16, snum);
 80039f4:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <menu+0x29b0>)
 80039f6:	2110      	movs	r1, #16
 80039f8:	2002      	movs	r0, #2
 80039fa:	f004 f947 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039fe:	2102      	movs	r1, #2
 8003a00:	4840      	ldr	r0, [pc, #256]	; (8003b04 <menu+0x29b4>)
 8003a02:	f005 fc69 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d115      	bne.n	8003a38 <menu+0x28e8>
 8003a0c:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <menu+0x29b8>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	f083 0301 	eor.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a1a:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <menu+0x29e0>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <menu+0x29e0>)
 8003a24:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a26:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <menu+0x29e0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d902      	bls.n	8003a34 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <menu+0x29e0>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a34:	f000 ff62 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4832      	ldr	r0, [pc, #200]	; (8003b04 <menu+0x29b4>)
 8003a3c:	f005 fc4c 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d115      	bne.n	8003a72 <menu+0x2922>
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <menu+0x29b8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	f083 0301 	eor.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <menu+0x29e0>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <menu+0x29e0>)
 8003a5e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003a60:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <menu+0x29e0>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d902      	bls.n	8003a6e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003a68:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <menu+0x29e0>)
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a6e:	f000 ff45 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a72:	2108      	movs	r1, #8
 8003a74:	4823      	ldr	r0, [pc, #140]	; (8003b04 <menu+0x29b4>)
 8003a76:	f005 fc2f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10d      	bne.n	8003a9c <menu+0x294c>
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <menu+0x29b8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	f083 0301 	eor.w	r3, r3, #1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003a8e:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <menu+0x29e0>)
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <menu+0x29bc>)
 8003a94:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <menu+0x29c0>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <menu+0x29c4>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b19      	cmp	r3, #25
 8003aa2:	f040 80c4 	bne.w	8003c2e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003aa6:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <menu+0x29c8>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d113      	bne.n	8003ad6 <menu+0x2986>
			if(dilSecim == 0) {
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <menu+0x29a4>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <menu+0x29e4>)
 8003ab8:	2101      	movs	r1, #1
 8003aba:	2001      	movs	r0, #1
 8003abc:	f004 f8e6 	bl	8007c8c <lcd_print>
 8003ac0:	e047      	b.n	8003b52 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <menu+0x29a4>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d143      	bne.n	8003b52 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003aca:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <menu+0x29e8>)
 8003acc:	2101      	movs	r1, #1
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f004 f8dc 	bl	8007c8c <lcd_print>
 8003ad4:	e03d      	b.n	8003b52 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <menu+0x29c8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d139      	bne.n	8003b52 <menu+0x2a02>
			if(dilSecim == 0) {
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <menu+0x29a4>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d12c      	bne.n	8003b40 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ae6:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <menu+0x29ec>)
 8003ae8:	2101      	movs	r1, #1
 8003aea:	2001      	movs	r0, #1
 8003aec:	f004 f8ce 	bl	8007c8c <lcd_print>
 8003af0:	e02f      	b.n	8003b52 <menu+0x2a02>
 8003af2:	bf00      	nop
 8003af4:	20000255 	.word	0x20000255
 8003af8:	0800d848 	.word	0x0800d848
 8003afc:	20000249 	.word	0x20000249
 8003b00:	2000019c 	.word	0x2000019c
 8003b04:	40010800 	.word	0x40010800
 8003b08:	20000263 	.word	0x20000263
 8003b0c:	2000012c 	.word	0x2000012c
 8003b10:	20000260 	.word	0x20000260
 8003b14:	20000234 	.word	0x20000234
 8003b18:	20000243 	.word	0x20000243
 8003b1c:	0800d880 	.word	0x0800d880
 8003b20:	0800d894 	.word	0x0800d894
 8003b24:	0800d8a8 	.word	0x0800d8a8
 8003b28:	0800d8bc 	.word	0x0800d8bc
 8003b2c:	0800d4d4 	.word	0x0800d4d4
 8003b30:	2000024a 	.word	0x2000024a
 8003b34:	0800d8d0 	.word	0x0800d8d0
 8003b38:	0800d8e4 	.word	0x0800d8e4
 8003b3c:	0800d8f8 	.word	0x0800d8f8
			} else if(dilSecim == 1) {
 8003b40:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <menu+0x2bc0>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d104      	bne.n	8003b52 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b48:	4a72      	ldr	r2, [pc, #456]	; (8003d14 <menu+0x2bc4>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f004 f89d 	bl	8007c8c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <menu+0x2bc0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b5a:	4a6f      	ldr	r2, [pc, #444]	; (8003d18 <menu+0x2bc8>)
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	2002      	movs	r0, #2
 8003b60:	f004 f894 	bl	8007c8c <lcd_print>
 8003b64:	e008      	b.n	8003b78 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <menu+0x2bc0>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d104      	bne.n	8003b78 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003b6e:	4a6b      	ldr	r2, [pc, #428]	; (8003d1c <menu+0x2bcc>)
 8003b70:	2101      	movs	r1, #1
 8003b72:	2002      	movs	r0, #2
 8003b74:	f004 f88a 	bl	8007c8c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003b78:	4b69      	ldr	r3, [pc, #420]	; (8003d20 <menu+0x2bd0>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	220a      	movs	r2, #10
 8003b7e:	4969      	ldr	r1, [pc, #420]	; (8003d24 <menu+0x2bd4>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f008 fbff 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 8003b86:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <menu+0x2bd4>)
 8003b88:	2110      	movs	r1, #16
 8003b8a:	2002      	movs	r0, #2
 8003b8c:	f004 f87e 	bl	8007c8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b90:	2102      	movs	r1, #2
 8003b92:	4865      	ldr	r0, [pc, #404]	; (8003d28 <menu+0x2bd8>)
 8003b94:	f005 fba0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d115      	bne.n	8003bca <menu+0x2a7a>
 8003b9e:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <menu+0x2bdc>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	f083 0301 	eor.w	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003bac:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <menu+0x2bd0>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b5a      	ldr	r3, [pc, #360]	; (8003d20 <menu+0x2bd0>)
 8003bb6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <menu+0x2bd0>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d902      	bls.n	8003bc6 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <menu+0x2bd0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bc6:	f000 fe99 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bca:	2104      	movs	r1, #4
 8003bcc:	4856      	ldr	r0, [pc, #344]	; (8003d28 <menu+0x2bd8>)
 8003bce:	f005 fb83 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d115      	bne.n	8003c04 <menu+0x2ab4>
 8003bd8:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <menu+0x2bdc>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	f083 0301 	eor.w	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003be6:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <menu+0x2bd0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <menu+0x2bd0>)
 8003bf0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <menu+0x2bd0>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003bfa:	4b49      	ldr	r3, [pc, #292]	; (8003d20 <menu+0x2bd0>)
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c00:	f000 fe7c 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c04:	2108      	movs	r1, #8
 8003c06:	4848      	ldr	r0, [pc, #288]	; (8003d28 <menu+0x2bd8>)
 8003c08:	f005 fb66 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <menu+0x2ade>
 8003c12:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <menu+0x2bdc>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f083 0301 	eor.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c20:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <menu+0x2bd0>)
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <menu+0x2be0>)
 8003c26:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c28:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <menu+0x2be4>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c2e:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <menu+0x2be8>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b1a      	cmp	r3, #26
 8003c34:	f040 80ec 	bne.w	8003e10 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <menu+0x2bc0>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c40:	4a3e      	ldr	r2, [pc, #248]	; (8003d3c <menu+0x2bec>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	2001      	movs	r0, #1
 8003c46:	f004 f821 	bl	8007c8c <lcd_print>
 8003c4a:	e008      	b.n	8003c5e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003c4c:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <menu+0x2bc0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d104      	bne.n	8003c5e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003c54:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <menu+0x2bf0>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f004 f817 	bl	8007c8c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <menu+0x2bf4>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b63      	cmp	r3, #99	; 0x63
 8003c64:	d91e      	bls.n	8003ca4 <menu+0x2b54>
			if(dilSecim == 0) {
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <menu+0x2bc0>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c6e:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <menu+0x2bc8>)
 8003c70:	2101      	movs	r1, #1
 8003c72:	2002      	movs	r0, #2
 8003c74:	f004 f80a 	bl	8007c8c <lcd_print>
			}
			if(dilSecim == 1) {
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <menu+0x2bc0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d104      	bne.n	8003c8a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003c80:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <menu+0x2bcc>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	2002      	movs	r0, #2
 8003c86:	f004 f801 	bl	8007c8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <menu+0x2bf4>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	220a      	movs	r2, #10
 8003c90:	4924      	ldr	r1, [pc, #144]	; (8003d24 <menu+0x2bd4>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f008 fb76 	bl	800c384 <itoa>
			lcd_print(2,14,snum);
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <menu+0x2bd4>)
 8003c9a:	210e      	movs	r1, #14
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f003 fff5 	bl	8007c8c <lcd_print>
 8003ca2:	e066      	b.n	8003d72 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ca4:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <menu+0x2bf4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b09      	cmp	r3, #9
 8003caa:	d923      	bls.n	8003cf4 <menu+0x2ba4>
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <menu+0x2bf4>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b63      	cmp	r3, #99	; 0x63
 8003cb2:	d81f      	bhi.n	8003cf4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003cb4:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <menu+0x2bc0>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <menu+0x2bc8>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f003 ffe3 	bl	8007c8c <lcd_print>
 8003cc6:	e008      	b.n	8003cda <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <menu+0x2bc0>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d104      	bne.n	8003cda <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003cd0:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <menu+0x2bcc>)
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f003 ffd9 	bl	8007c8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <menu+0x2bf4>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	220a      	movs	r2, #10
 8003ce0:	4910      	ldr	r1, [pc, #64]	; (8003d24 <menu+0x2bd4>)
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f008 fb4e 	bl	800c384 <itoa>
			lcd_print(2, 15, snum);
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <menu+0x2bd4>)
 8003cea:	210f      	movs	r1, #15
 8003cec:	2002      	movs	r0, #2
 8003cee:	f003 ffcd 	bl	8007c8c <lcd_print>
 8003cf2:	e03e      	b.n	8003d72 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <menu+0x2bf4>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b09      	cmp	r3, #9
 8003cfa:	d83a      	bhi.n	8003d72 <menu+0x2c22>
			if(dilSecim == 0) {
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <menu+0x2bc0>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d121      	bne.n	8003d48 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <menu+0x2bc8>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f003 ffbf 	bl	8007c8c <lcd_print>
 8003d0e:	e024      	b.n	8003d5a <menu+0x2c0a>
 8003d10:	20000255 	.word	0x20000255
 8003d14:	0800d90c 	.word	0x0800d90c
 8003d18:	0800d4d4 	.word	0x0800d4d4
 8003d1c:	0800d848 	.word	0x0800d848
 8003d20:	2000024b 	.word	0x2000024b
 8003d24:	2000019c 	.word	0x2000019c
 8003d28:	40010800 	.word	0x40010800
 8003d2c:	20000263 	.word	0x20000263
 8003d30:	2000012c 	.word	0x2000012c
 8003d34:	20000260 	.word	0x20000260
 8003d38:	20000234 	.word	0x20000234
 8003d3c:	0800d920 	.word	0x0800d920
 8003d40:	0800d934 	.word	0x0800d934
 8003d44:	2000024c 	.word	0x2000024c
			} else if(dilSecim == 1) {
 8003d48:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <menu+0x2e38>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d104      	bne.n	8003d5a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003d50:	4a8e      	ldr	r2, [pc, #568]	; (8003f8c <menu+0x2e3c>)
 8003d52:	2101      	movs	r1, #1
 8003d54:	2002      	movs	r0, #2
 8003d56:	f003 ff99 	bl	8007c8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <menu+0x2e40>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	220a      	movs	r2, #10
 8003d60:	498c      	ldr	r1, [pc, #560]	; (8003f94 <menu+0x2e44>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f008 fb0e 	bl	800c384 <itoa>
			lcd_print(2, 16, snum);
 8003d68:	4a8a      	ldr	r2, [pc, #552]	; (8003f94 <menu+0x2e44>)
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f003 ff8d 	bl	8007c8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d72:	2102      	movs	r1, #2
 8003d74:	4888      	ldr	r0, [pc, #544]	; (8003f98 <menu+0x2e48>)
 8003d76:	f005 faaf 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d115      	bne.n	8003dac <menu+0x2c5c>
 8003d80:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <menu+0x2e4c>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00e      	beq.n	8003dac <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003d8e:	4b80      	ldr	r3, [pc, #512]	; (8003f90 <menu+0x2e40>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <menu+0x2e40>)
 8003d98:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <menu+0x2e40>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2bb4      	cmp	r3, #180	; 0xb4
 8003da0:	d902      	bls.n	8003da8 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003da2:	4b7b      	ldr	r3, [pc, #492]	; (8003f90 <menu+0x2e40>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003da8:	f000 fda8 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dac:	2104      	movs	r1, #4
 8003dae:	487a      	ldr	r0, [pc, #488]	; (8003f98 <menu+0x2e48>)
 8003db0:	f005 fa92 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d115      	bne.n	8003de6 <menu+0x2c96>
 8003dba:	4b78      	ldr	r3, [pc, #480]	; (8003f9c <menu+0x2e4c>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	f083 0301 	eor.w	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003dc8:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <menu+0x2e40>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	4b6f      	ldr	r3, [pc, #444]	; (8003f90 <menu+0x2e40>)
 8003dd2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003dd4:	4b6e      	ldr	r3, [pc, #440]	; (8003f90 <menu+0x2e40>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2bb5      	cmp	r3, #181	; 0xb5
 8003dda:	d902      	bls.n	8003de2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <menu+0x2e40>)
 8003dde:	22b4      	movs	r2, #180	; 0xb4
 8003de0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003de2:	f000 fd8b 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003de6:	2108      	movs	r1, #8
 8003de8:	486b      	ldr	r0, [pc, #428]	; (8003f98 <menu+0x2e48>)
 8003dea:	f005 fa75 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d10d      	bne.n	8003e10 <menu+0x2cc0>
 8003df4:	4b69      	ldr	r3, [pc, #420]	; (8003f9c <menu+0x2e4c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	f083 0301 	eor.w	r3, r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d006      	beq.n	8003e10 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <menu+0x2e40>)
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <menu+0x2e50>)
 8003e08:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003e0a:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <menu+0x2e54>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003e10:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <menu+0x2e58>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b1b      	cmp	r3, #27
 8003e16:	f040 8083 	bne.w	8003f20 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e1a:	4a64      	ldr	r2, [pc, #400]	; (8003fac <menu+0x2e5c>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f003 ff34 	bl	8007c8c <lcd_print>

		if(buzzer == 0) {
 8003e24:	4b62      	ldr	r3, [pc, #392]	; (8003fb0 <menu+0x2e60>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d113      	bne.n	8003e54 <menu+0x2d04>
			if(dilSecim == 0) {
 8003e2c:	4b56      	ldr	r3, [pc, #344]	; (8003f88 <menu+0x2e38>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e34:	4a5f      	ldr	r2, [pc, #380]	; (8003fb4 <menu+0x2e64>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	2002      	movs	r0, #2
 8003e3a:	f003 ff27 	bl	8007c8c <lcd_print>
 8003e3e:	e020      	b.n	8003e82 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e40:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <menu+0x2e38>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d11c      	bne.n	8003e82 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e48:	4a5b      	ldr	r2, [pc, #364]	; (8003fb8 <menu+0x2e68>)
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	f003 ff1d 	bl	8007c8c <lcd_print>
 8003e52:	e016      	b.n	8003e82 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003e54:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <menu+0x2e60>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d112      	bne.n	8003e82 <menu+0x2d32>
			if(dilSecim == 0) {
 8003e5c:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <menu+0x2e38>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003e64:	4a55      	ldr	r2, [pc, #340]	; (8003fbc <menu+0x2e6c>)
 8003e66:	2101      	movs	r1, #1
 8003e68:	2002      	movs	r0, #2
 8003e6a:	f003 ff0f 	bl	8007c8c <lcd_print>
 8003e6e:	e008      	b.n	8003e82 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e70:	4b45      	ldr	r3, [pc, #276]	; (8003f88 <menu+0x2e38>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d104      	bne.n	8003e82 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003e78:	4a51      	ldr	r2, [pc, #324]	; (8003fc0 <menu+0x2e70>)
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	f003 ff05 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e82:	2102      	movs	r1, #2
 8003e84:	4844      	ldr	r0, [pc, #272]	; (8003f98 <menu+0x2e48>)
 8003e86:	f005 fa27 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d115      	bne.n	8003ebc <menu+0x2d6c>
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <menu+0x2e4c>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00e      	beq.n	8003ebc <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <menu+0x2e60>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <menu+0x2e60>)
 8003ea8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <menu+0x2e60>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d902      	bls.n	8003eb8 <menu+0x2d68>
				buzzer = 0;
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <menu+0x2e60>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003eb8:	f000 fd20 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	4836      	ldr	r0, [pc, #216]	; (8003f98 <menu+0x2e48>)
 8003ec0:	f005 fa0a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d115      	bne.n	8003ef6 <menu+0x2da6>
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <menu+0x2e4c>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	f083 0301 	eor.w	r3, r3, #1
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <menu+0x2e60>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <menu+0x2e60>)
 8003ee2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003ee4:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <menu+0x2e60>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <menu+0x2da2>
		   		buzzer = 1;
 8003eec:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <menu+0x2e60>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ef2:	f000 fd03 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ef6:	2108      	movs	r1, #8
 8003ef8:	4827      	ldr	r0, [pc, #156]	; (8003f98 <menu+0x2e48>)
 8003efa:	f005 f9ed 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10d      	bne.n	8003f20 <menu+0x2dd0>
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <menu+0x2e4c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f083 0301 	eor.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003f12:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <menu+0x2e60>)
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <menu+0x2e50>)
 8003f18:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <menu+0x2e54>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <menu+0x2e58>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b1c      	cmp	r3, #28
 8003f26:	f040 80ab 	bne.w	8004080 <menu+0x2f30>
		calismaSayModu = 0;
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <menu+0x2e74>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <menu+0x2e78>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	2001      	movs	r0, #1
 8003f36:	f003 fea9 	bl	8007c8c <lcd_print>

		if(demoMode == 0) {
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <menu+0x2e7c>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d113      	bne.n	8003f6a <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <menu+0x2e38>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <menu+0x2e64>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f003 fe9c 	bl	8007c8c <lcd_print>
 8003f54:	e045      	b.n	8003fe2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <menu+0x2e38>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d141      	bne.n	8003fe2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <menu+0x2e68>)
 8003f60:	2101      	movs	r1, #1
 8003f62:	2002      	movs	r0, #2
 8003f64:	f003 fe92 	bl	8007c8c <lcd_print>
 8003f68:	e03b      	b.n	8003fe2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003f6a:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <menu+0x2e7c>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d137      	bne.n	8003fe2 <menu+0x2e92>
			if(dilSecim == 0){
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <menu+0x2e38>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d12a      	bne.n	8003fd0 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003f7a:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <menu+0x2e6c>)
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f003 fe84 	bl	8007c8c <lcd_print>
 8003f84:	e02d      	b.n	8003fe2 <menu+0x2e92>
 8003f86:	bf00      	nop
 8003f88:	20000255 	.word	0x20000255
 8003f8c:	0800d848 	.word	0x0800d848
 8003f90:	2000024c 	.word	0x2000024c
 8003f94:	2000019c 	.word	0x2000019c
 8003f98:	40010800 	.word	0x40010800
 8003f9c:	20000263 	.word	0x20000263
 8003fa0:	2000012c 	.word	0x2000012c
 8003fa4:	20000260 	.word	0x20000260
 8003fa8:	20000234 	.word	0x20000234
 8003fac:	0800d948 	.word	0x0800d948
 8003fb0:	20000250 	.word	0x20000250
 8003fb4:	0800d270 	.word	0x0800d270
 8003fb8:	0800d284 	.word	0x0800d284
 8003fbc:	0800d2d0 	.word	0x0800d2d0
 8003fc0:	0800d2e4 	.word	0x0800d2e4
 8003fc4:	20000254 	.word	0x20000254
 8003fc8:	0800d95c 	.word	0x0800d95c
 8003fcc:	20000252 	.word	0x20000252
			} else if(dilSecim == 1) {
 8003fd0:	4b71      	ldr	r3, [pc, #452]	; (8004198 <menu+0x3048>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d104      	bne.n	8003fe2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003fd8:	4a70      	ldr	r2, [pc, #448]	; (800419c <menu+0x304c>)
 8003fda:	2101      	movs	r1, #1
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f003 fe55 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	486e      	ldr	r0, [pc, #440]	; (80041a0 <menu+0x3050>)
 8003fe6:	f005 f977 	bl	80092d8 <HAL_GPIO_ReadPin>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d115      	bne.n	800401c <menu+0x2ecc>
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <menu+0x3054>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	f083 0301 	eor.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <menu+0x3058>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <menu+0x3058>)
 8004008:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <menu+0x3058>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d902      	bls.n	8004018 <menu+0x2ec8>
				demoMode = 0;
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <menu+0x3058>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004018:	f000 fc70 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800401c:	2104      	movs	r1, #4
 800401e:	4860      	ldr	r0, [pc, #384]	; (80041a0 <menu+0x3050>)
 8004020:	f005 f95a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d115      	bne.n	8004056 <menu+0x2f06>
 800402a:	4b5e      	ldr	r3, [pc, #376]	; (80041a4 <menu+0x3054>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004038:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <menu+0x3058>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	3b01      	subs	r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <menu+0x3058>)
 8004042:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004044:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <menu+0x3058>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <menu+0x2f02>
		   		demoMode = 1;
 800404c:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <menu+0x3058>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004052:	f000 fc53 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004056:	2108      	movs	r1, #8
 8004058:	4851      	ldr	r0, [pc, #324]	; (80041a0 <menu+0x3050>)
 800405a:	f005 f93d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10d      	bne.n	8004080 <menu+0x2f30>
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <menu+0x3054>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004072:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <menu+0x3058>)
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <menu+0x305c>)
 8004078:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800407a:	4b4d      	ldr	r3, [pc, #308]	; (80041b0 <menu+0x3060>)
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004080:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <menu+0x3064>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b1d      	cmp	r3, #29
 8004086:	f040 8132 	bne.w	80042ee <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <menu+0x3068>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d113      	bne.n	80040ba <menu+0x2f6a>
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <menu+0x306c>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <menu+0x2f6a>
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <menu+0x3070>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <menu+0x2f6a>
 80040a2:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <menu+0x3074>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d107      	bne.n	80040ba <menu+0x2f6a>
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <menu+0x3078>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <menu+0x2f6a>
			calismaSayisiYar = 0;
 80040b2:	4b46      	ldr	r3, [pc, #280]	; (80041cc <menu+0x307c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	e002      	b.n	80040c0 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80040ba:	4b44      	ldr	r3, [pc, #272]	; (80041cc <menu+0x307c>)
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80040c0:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <menu+0x3080>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d154      	bne.n	8004172 <menu+0x3022>
			if(dilSecim == 0) {
 80040c8:	4b33      	ldr	r3, [pc, #204]	; (8004198 <menu+0x3048>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80040d0:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <menu+0x3084>)
 80040d2:	2101      	movs	r1, #1
 80040d4:	2001      	movs	r0, #1
 80040d6:	f003 fdd9 	bl	8007c8c <lcd_print>
 80040da:	e008      	b.n	80040ee <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <menu+0x3048>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d104      	bne.n	80040ee <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80040e4:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <menu+0x3088>)
 80040e6:	2101      	movs	r1, #1
 80040e8:	2001      	movs	r0, #1
 80040ea:	f003 fdcf 	bl	8007c8c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80040ee:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <menu+0x3078>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	220a      	movs	r2, #10
 80040f4:	4939      	ldr	r1, [pc, #228]	; (80041dc <menu+0x308c>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f008 f944 	bl	800c384 <itoa>
			lcd_print(2, 12, snum);
 80040fc:	4a37      	ldr	r2, [pc, #220]	; (80041dc <menu+0x308c>)
 80040fe:	210c      	movs	r1, #12
 8004100:	2002      	movs	r0, #2
 8004102:	f003 fdc3 	bl	8007c8c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004106:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <menu+0x3074>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	220a      	movs	r2, #10
 800410c:	4933      	ldr	r1, [pc, #204]	; (80041dc <menu+0x308c>)
 800410e:	4618      	mov	r0, r3
 8004110:	f008 f938 	bl	800c384 <itoa>
			lcd_print(2, 13, snum);
 8004114:	4a31      	ldr	r2, [pc, #196]	; (80041dc <menu+0x308c>)
 8004116:	210d      	movs	r1, #13
 8004118:	2002      	movs	r0, #2
 800411a:	f003 fdb7 	bl	8007c8c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800411e:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <menu+0x3070>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	220a      	movs	r2, #10
 8004124:	492d      	ldr	r1, [pc, #180]	; (80041dc <menu+0x308c>)
 8004126:	4618      	mov	r0, r3
 8004128:	f008 f92c 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 800412c:	4a2b      	ldr	r2, [pc, #172]	; (80041dc <menu+0x308c>)
 800412e:	210e      	movs	r1, #14
 8004130:	2002      	movs	r0, #2
 8004132:	f003 fdab 	bl	8007c8c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004136:	4b21      	ldr	r3, [pc, #132]	; (80041bc <menu+0x306c>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	220a      	movs	r2, #10
 800413c:	4927      	ldr	r1, [pc, #156]	; (80041dc <menu+0x308c>)
 800413e:	4618      	mov	r0, r3
 8004140:	f008 f920 	bl	800c384 <itoa>
			lcd_print(2, 15, snum);
 8004144:	4a25      	ldr	r2, [pc, #148]	; (80041dc <menu+0x308c>)
 8004146:	210f      	movs	r1, #15
 8004148:	2002      	movs	r0, #2
 800414a:	f003 fd9f 	bl	8007c8c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <menu+0x3068>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	220a      	movs	r2, #10
 8004154:	4921      	ldr	r1, [pc, #132]	; (80041dc <menu+0x308c>)
 8004156:	4618      	mov	r0, r3
 8004158:	f008 f914 	bl	800c384 <itoa>
			lcd_print(2, 16, snum);
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <menu+0x308c>)
 800415e:	2110      	movs	r1, #16
 8004160:	2002      	movs	r0, #2
 8004162:	f003 fd93 	bl	8007c8c <lcd_print>

			lcd_print(2, 1, "           ");
 8004166:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <menu+0x3090>)
 8004168:	2101      	movs	r1, #1
 800416a:	2002      	movs	r0, #2
 800416c:	f003 fd8e 	bl	8007c8c <lcd_print>
 8004170:	e048      	b.n	8004204 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <menu+0x3080>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d144      	bne.n	8004204 <menu+0x30b4>
			if(dilSecim == 0) {
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <menu+0x3048>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d132      	bne.n	80041e8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004182:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <menu+0x3084>)
 8004184:	2101      	movs	r1, #1
 8004186:	2001      	movs	r0, #1
 8004188:	f003 fd80 	bl	8007c8c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <menu+0x3094>)
 800418e:	2101      	movs	r1, #1
 8004190:	2002      	movs	r0, #2
 8004192:	f003 fd7b 	bl	8007c8c <lcd_print>
 8004196:	e035      	b.n	8004204 <menu+0x30b4>
 8004198:	20000255 	.word	0x20000255
 800419c:	0800d2e4 	.word	0x0800d2e4
 80041a0:	40010800 	.word	0x40010800
 80041a4:	20000263 	.word	0x20000263
 80041a8:	20000252 	.word	0x20000252
 80041ac:	2000012c 	.word	0x2000012c
 80041b0:	20000260 	.word	0x20000260
 80041b4:	20000234 	.word	0x20000234
 80041b8:	20000231 	.word	0x20000231
 80041bc:	20000232 	.word	0x20000232
 80041c0:	20000000 	.word	0x20000000
 80041c4:	20000001 	.word	0x20000001
 80041c8:	20000233 	.word	0x20000233
 80041cc:	20000275 	.word	0x20000275
 80041d0:	20000254 	.word	0x20000254
 80041d4:	0800d96c 	.word	0x0800d96c
 80041d8:	0800d980 	.word	0x0800d980
 80041dc:	2000019c 	.word	0x2000019c
 80041e0:	0800d994 	.word	0x0800d994
 80041e4:	0800d9a0 	.word	0x0800d9a0
			} else if(dilSecim == 1) {
 80041e8:	4b94      	ldr	r3, [pc, #592]	; (800443c <menu+0x32ec>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d109      	bne.n	8004204 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80041f0:	4a93      	ldr	r2, [pc, #588]	; (8004440 <menu+0x32f0>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	2001      	movs	r0, #1
 80041f6:	f003 fd49 	bl	8007c8c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80041fa:	4a92      	ldr	r2, [pc, #584]	; (8004444 <menu+0x32f4>)
 80041fc:	2101      	movs	r1, #1
 80041fe:	2002      	movs	r0, #2
 8004200:	f003 fd44 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004204:	2102      	movs	r1, #2
 8004206:	4890      	ldr	r0, [pc, #576]	; (8004448 <menu+0x32f8>)
 8004208:	f005 f866 	bl	80092d8 <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d119      	bne.n	8004246 <menu+0x30f6>
 8004212:	4b8e      	ldr	r3, [pc, #568]	; (800444c <menu+0x32fc>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f083 0301 	eor.w	r3, r3, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <menu+0x30f6>
 8004220:	4b8b      	ldr	r3, [pc, #556]	; (8004450 <menu+0x3300>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004228:	4b8a      	ldr	r3, [pc, #552]	; (8004454 <menu+0x3304>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b88      	ldr	r3, [pc, #544]	; (8004454 <menu+0x3304>)
 8004232:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004234:	4b87      	ldr	r3, [pc, #540]	; (8004454 <menu+0x3304>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d902      	bls.n	8004242 <menu+0x30f2>
				calismaSayModu = 0;
 800423c:	4b85      	ldr	r3, [pc, #532]	; (8004454 <menu+0x3304>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004242:	f000 fb5b 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004246:	2104      	movs	r1, #4
 8004248:	487f      	ldr	r0, [pc, #508]	; (8004448 <menu+0x32f8>)
 800424a:	f005 f845 	bl	80092d8 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d119      	bne.n	8004288 <menu+0x3138>
 8004254:	4b7d      	ldr	r3, [pc, #500]	; (800444c <menu+0x32fc>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d012      	beq.n	8004288 <menu+0x3138>
 8004262:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <menu+0x3300>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800426a:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <menu+0x3304>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3b01      	subs	r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b78      	ldr	r3, [pc, #480]	; (8004454 <menu+0x3304>)
 8004274:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004276:	4b77      	ldr	r3, [pc, #476]	; (8004454 <menu+0x3304>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <menu+0x3134>
		   		calismaSayModu = 1;
 800427e:	4b75      	ldr	r3, [pc, #468]	; (8004454 <menu+0x3304>)
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004284:	f000 fb3a 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004288:	2108      	movs	r1, #8
 800428a:	486f      	ldr	r0, [pc, #444]	; (8004448 <menu+0x32f8>)
 800428c:	f005 f824 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d12b      	bne.n	80042ee <menu+0x319e>
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <menu+0x32fc>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	f083 0301 	eor.w	r3, r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d024      	beq.n	80042ee <menu+0x319e>
			eepromData[32] = 0;
 80042a4:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <menu+0x3308>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80042ac:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <menu+0x3308>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80042b2:	4b69      	ldr	r3, [pc, #420]	; (8004458 <menu+0x3308>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80042b8:	4b67      	ldr	r3, [pc, #412]	; (8004458 <menu+0x3308>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80042be:	4b66      	ldr	r3, [pc, #408]	; (8004458 <menu+0x3308>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80042c4:	4b65      	ldr	r3, [pc, #404]	; (800445c <menu+0x330c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80042ca:	4b65      	ldr	r3, [pc, #404]	; (8004460 <menu+0x3310>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80042d0:	4b64      	ldr	r3, [pc, #400]	; (8004464 <menu+0x3314>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80042d6:	4b64      	ldr	r3, [pc, #400]	; (8004468 <menu+0x3318>)
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80042dc:	4b63      	ldr	r3, [pc, #396]	; (800446c <menu+0x331c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <menu+0x3304>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80042e8:	4b61      	ldr	r3, [pc, #388]	; (8004470 <menu+0x3320>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80042ee:	4b61      	ldr	r3, [pc, #388]	; (8004474 <menu+0x3324>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b1e      	cmp	r3, #30
 80042f4:	d16f      	bne.n	80043d6 <menu+0x3286>
		calismaSayModu = 0;
 80042f6:	4b57      	ldr	r3, [pc, #348]	; (8004454 <menu+0x3304>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80042fc:	4b4f      	ldr	r3, [pc, #316]	; (800443c <menu+0x32ec>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004304:	4a5c      	ldr	r2, [pc, #368]	; (8004478 <menu+0x3328>)
 8004306:	2101      	movs	r1, #1
 8004308:	2001      	movs	r0, #1
 800430a:	f003 fcbf 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800430e:	4a5b      	ldr	r2, [pc, #364]	; (800447c <menu+0x332c>)
 8004310:	2101      	movs	r1, #1
 8004312:	2002      	movs	r0, #2
 8004314:	f003 fcba 	bl	8007c8c <lcd_print>
 8004318:	e00d      	b.n	8004336 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800431a:	4b48      	ldr	r3, [pc, #288]	; (800443c <menu+0x32ec>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d109      	bne.n	8004336 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004322:	4a57      	ldr	r2, [pc, #348]	; (8004480 <menu+0x3330>)
 8004324:	2101      	movs	r1, #1
 8004326:	2001      	movs	r0, #1
 8004328:	f003 fcb0 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800432c:	4a55      	ldr	r2, [pc, #340]	; (8004484 <menu+0x3334>)
 800432e:	2101      	movs	r1, #1
 8004330:	2002      	movs	r0, #2
 8004332:	f003 fcab 	bl	8007c8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004336:	2102      	movs	r1, #2
 8004338:	4843      	ldr	r0, [pc, #268]	; (8004448 <menu+0x32f8>)
 800433a:	f004 ffcd 	bl	80092d8 <HAL_GPIO_ReadPin>
 800433e:	4603      	mov	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d115      	bne.n	8004370 <menu+0x3220>
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <menu+0x32fc>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00e      	beq.n	8004370 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004352:	4b3a      	ldr	r3, [pc, #232]	; (800443c <menu+0x32ec>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b38      	ldr	r3, [pc, #224]	; (800443c <menu+0x32ec>)
 800435c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800435e:	4b37      	ldr	r3, [pc, #220]	; (800443c <menu+0x32ec>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d902      	bls.n	800436c <menu+0x321c>
				dilSecim = 0;
 8004366:	4b35      	ldr	r3, [pc, #212]	; (800443c <menu+0x32ec>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800436c:	f000 fac6 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004370:	2104      	movs	r1, #4
 8004372:	4835      	ldr	r0, [pc, #212]	; (8004448 <menu+0x32f8>)
 8004374:	f004 ffb0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d115      	bne.n	80043aa <menu+0x325a>
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <menu+0x32fc>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	f083 0301 	eor.w	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <menu+0x325a>
			dilSecim = dilSecim - 1;
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <menu+0x32ec>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	3b01      	subs	r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <menu+0x32ec>)
 8004396:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <menu+0x32ec>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <menu+0x3256>
		   		dilSecim = 1;
 80043a0:	4b26      	ldr	r3, [pc, #152]	; (800443c <menu+0x32ec>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80043a6:	f000 faa9 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043aa:	2108      	movs	r1, #8
 80043ac:	4826      	ldr	r0, [pc, #152]	; (8004448 <menu+0x32f8>)
 80043ae:	f004 ff93 	bl	80092d8 <HAL_GPIO_ReadPin>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d10e      	bne.n	80043d6 <menu+0x3286>
 80043b8:	4b24      	ldr	r3, [pc, #144]	; (800444c <menu+0x32fc>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	f083 0301 	eor.w	r3, r3, #1
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <menu+0x3286>
			eepromData[33] = dilSecim;
 80043c6:	4b1d      	ldr	r3, [pc, #116]	; (800443c <menu+0x32ec>)
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <menu+0x3308>)
 80043cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <menu+0x3320>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80043d6:	4b27      	ldr	r3, [pc, #156]	; (8004474 <menu+0x3324>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b1f      	cmp	r3, #31
 80043dc:	f040 80b7 	bne.w	800454e <menu+0x33fe>
		calismaSayModu = 0;
 80043e0:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <menu+0x3304>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80043e6:	4a28      	ldr	r2, [pc, #160]	; (8004488 <menu+0x3338>)
 80043e8:	2101      	movs	r1, #1
 80043ea:	2001      	movs	r0, #1
 80043ec:	f003 fc4e 	bl	8007c8c <lcd_print>

		if(iotMode == 0) {
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <menu+0x333c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d113      	bne.n	8004420 <menu+0x32d0>
			if(dilSecim == 0) {
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <menu+0x32ec>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <menu+0x3340>)
 8004402:	2101      	movs	r1, #1
 8004404:	2002      	movs	r0, #2
 8004406:	f003 fc41 	bl	8007c8c <lcd_print>
 800440a:	e050      	b.n	80044ae <menu+0x335e>
			} else if(dilSecim == 1) {
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <menu+0x32ec>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d14c      	bne.n	80044ae <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004414:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <menu+0x3344>)
 8004416:	2101      	movs	r1, #1
 8004418:	2002      	movs	r0, #2
 800441a:	f003 fc37 	bl	8007c8c <lcd_print>
 800441e:	e046      	b.n	80044ae <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <menu+0x333c>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d142      	bne.n	80044ae <menu+0x335e>
			if(dilSecim == 0) {
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <menu+0x32ec>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d135      	bne.n	800449c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004430:	4a19      	ldr	r2, [pc, #100]	; (8004498 <menu+0x3348>)
 8004432:	2101      	movs	r1, #1
 8004434:	2002      	movs	r0, #2
 8004436:	f003 fc29 	bl	8007c8c <lcd_print>
 800443a:	e038      	b.n	80044ae <menu+0x335e>
 800443c:	20000255 	.word	0x20000255
 8004440:	0800d980 	.word	0x0800d980
 8004444:	0800d9b4 	.word	0x0800d9b4
 8004448:	40010800 	.word	0x40010800
 800444c:	20000263 	.word	0x20000263
 8004450:	20000275 	.word	0x20000275
 8004454:	20000254 	.word	0x20000254
 8004458:	2000012c 	.word	0x2000012c
 800445c:	20000233 	.word	0x20000233
 8004460:	20000001 	.word	0x20000001
 8004464:	20000000 	.word	0x20000000
 8004468:	20000232 	.word	0x20000232
 800446c:	20000231 	.word	0x20000231
 8004470:	20000260 	.word	0x20000260
 8004474:	20000234 	.word	0x20000234
 8004478:	0800d9c8 	.word	0x0800d9c8
 800447c:	0800d9dc 	.word	0x0800d9dc
 8004480:	0800d9f0 	.word	0x0800d9f0
 8004484:	0800da04 	.word	0x0800da04
 8004488:	0800da18 	.word	0x0800da18
 800448c:	20000253 	.word	0x20000253
 8004490:	0800d270 	.word	0x0800d270
 8004494:	0800d284 	.word	0x0800d284
 8004498:	0800d2d0 	.word	0x0800d2d0
			} else if(dilSecim == 1) {
 800449c:	4baf      	ldr	r3, [pc, #700]	; (800475c <menu+0x360c>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d104      	bne.n	80044ae <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80044a4:	4aae      	ldr	r2, [pc, #696]	; (8004760 <menu+0x3610>)
 80044a6:	2101      	movs	r1, #1
 80044a8:	2002      	movs	r0, #2
 80044aa:	f003 fbef 	bl	8007c8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ae:	2102      	movs	r1, #2
 80044b0:	48ac      	ldr	r0, [pc, #688]	; (8004764 <menu+0x3614>)
 80044b2:	f004 ff11 	bl	80092d8 <HAL_GPIO_ReadPin>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d115      	bne.n	80044e8 <menu+0x3398>
 80044bc:	4baa      	ldr	r3, [pc, #680]	; (8004768 <menu+0x3618>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	f083 0301 	eor.w	r3, r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <menu+0x3398>
			iotMode = iotMode + 1;
 80044ca:	4ba8      	ldr	r3, [pc, #672]	; (800476c <menu+0x361c>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4ba6      	ldr	r3, [pc, #664]	; (800476c <menu+0x361c>)
 80044d4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80044d6:	4ba5      	ldr	r3, [pc, #660]	; (800476c <menu+0x361c>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d902      	bls.n	80044e4 <menu+0x3394>
				iotMode = 0;
 80044de:	4ba3      	ldr	r3, [pc, #652]	; (800476c <menu+0x361c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044e4:	f000 fa0a 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e8:	2104      	movs	r1, #4
 80044ea:	489e      	ldr	r0, [pc, #632]	; (8004764 <menu+0x3614>)
 80044ec:	f004 fef4 	bl	80092d8 <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d115      	bne.n	8004522 <menu+0x33d2>
 80044f6:	4b9c      	ldr	r3, [pc, #624]	; (8004768 <menu+0x3618>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004504:	4b99      	ldr	r3, [pc, #612]	; (800476c <menu+0x361c>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	3b01      	subs	r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	4b97      	ldr	r3, [pc, #604]	; (800476c <menu+0x361c>)
 800450e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004510:	4b96      	ldr	r3, [pc, #600]	; (800476c <menu+0x361c>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <menu+0x33ce>
		   		iotMode = 1;
 8004518:	4b94      	ldr	r3, [pc, #592]	; (800476c <menu+0x361c>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800451e:	f000 f9ed 	bl	80048fc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004522:	2108      	movs	r1, #8
 8004524:	488f      	ldr	r0, [pc, #572]	; (8004764 <menu+0x3614>)
 8004526:	f004 fed7 	bl	80092d8 <HAL_GPIO_ReadPin>
 800452a:	4603      	mov	r3, r0
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10e      	bne.n	800454e <menu+0x33fe>
 8004530:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <menu+0x3618>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <menu+0x33fe>
			eepromData[48] = iotMode;
 800453e:	4b8b      	ldr	r3, [pc, #556]	; (800476c <menu+0x361c>)
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <menu+0x3620>)
 8004544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004548:	4b8a      	ldr	r3, [pc, #552]	; (8004774 <menu+0x3624>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800454e:	4b8a      	ldr	r3, [pc, #552]	; (8004778 <menu+0x3628>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d150      	bne.n	80045f8 <menu+0x34a8>
		calismaSayModu = 0;
 8004556:	4b89      	ldr	r3, [pc, #548]	; (800477c <menu+0x362c>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800455c:	4b7f      	ldr	r3, [pc, #508]	; (800475c <menu+0x360c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004564:	4a86      	ldr	r2, [pc, #536]	; (8004780 <menu+0x3630>)
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f003 fb8f 	bl	8007c8c <lcd_print>
 800456e:	e004      	b.n	800457a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004570:	4a84      	ldr	r2, [pc, #528]	; (8004784 <menu+0x3634>)
 8004572:	2101      	movs	r1, #1
 8004574:	2001      	movs	r0, #1
 8004576:	f003 fb89 	bl	8007c8c <lcd_print>
		}
		printMachineCredentials(1);
 800457a:	2001      	movs	r0, #1
 800457c:	f003 f93a 	bl	80077f4 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004580:	2102      	movs	r1, #2
 8004582:	4878      	ldr	r0, [pc, #480]	; (8004764 <menu+0x3614>)
 8004584:	f004 fea8 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004588:	4603      	mov	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	d134      	bne.n	80045f8 <menu+0x34a8>
 800458e:	2104      	movs	r1, #4
 8004590:	4874      	ldr	r0, [pc, #464]	; (8004764 <menu+0x3614>)
 8004592:	f004 fea1 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004596:	4603      	mov	r3, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	d12d      	bne.n	80045f8 <menu+0x34a8>
 800459c:	4b72      	ldr	r3, [pc, #456]	; (8004768 <menu+0x3618>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f083 0301 	eor.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d026      	beq.n	80045f8 <menu+0x34a8>
			takeMachineID();
 80045aa:	f002 fab3 	bl	8006b14 <takeMachineID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80045ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80045b2:	9302      	str	r3, [sp, #8]
 80045b4:	236e      	movs	r3, #110	; 0x6e
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	4b6d      	ldr	r3, [pc, #436]	; (8004770 <menu+0x3620>)
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	236e      	movs	r3, #110	; 0x6e
 80045be:	2200      	movs	r2, #0
 80045c0:	21a0      	movs	r1, #160	; 0xa0
 80045c2:	4871      	ldr	r0, [pc, #452]	; (8004788 <menu+0x3638>)
 80045c4:	f005 fa3c 	bl	8009a40 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80045c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045cc:	f004 f8b4 	bl	8008738 <HAL_Delay>
			memcpy(machineIDInt, &eepromData[idStartPos], 12);
 80045d0:	4b6e      	ldr	r3, [pc, #440]	; (800478c <menu+0x363c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a66      	ldr	r2, [pc, #408]	; (8004770 <menu+0x3620>)
 80045d6:	441a      	add	r2, r3
 80045d8:	4b6d      	ldr	r3, [pc, #436]	; (8004790 <menu+0x3640>)
 80045da:	6810      	ldr	r0, [r2, #0]
 80045dc:	6851      	ldr	r1, [r2, #4]
 80045de:	6892      	ldr	r2, [r2, #8]
 80045e0:	6018      	str	r0, [r3, #0]
 80045e2:	6059      	str	r1, [r3, #4]
 80045e4:	609a      	str	r2, [r3, #8]
			convertArrays(1);
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fc f8dc 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 80045ec:	20fa      	movs	r0, #250	; 0xfa
 80045ee:	f004 f8a3 	bl	8008738 <HAL_Delay>
			printMachineCredentials(1);
 80045f2:	2001      	movs	r0, #1
 80045f4:	f003 f8fe 	bl	80077f4 <printMachineCredentials>
		}
	}

	if (menuSayac == 33) {
 80045f8:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <menu+0x3628>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b21      	cmp	r3, #33	; 0x21
 80045fe:	d14a      	bne.n	8004696 <menu+0x3546>
		calismaSayModu = 0;
 8004600:	4b5e      	ldr	r3, [pc, #376]	; (800477c <menu+0x362c>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004606:	4a63      	ldr	r2, [pc, #396]	; (8004794 <menu+0x3644>)
 8004608:	2101      	movs	r1, #1
 800460a:	2001      	movs	r0, #1
 800460c:	f003 fb3e 	bl	8007c8c <lcd_print>
		printMachineCredentials(2);
 8004610:	2002      	movs	r0, #2
 8004612:	f003 f8ef 	bl	80077f4 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004616:	2102      	movs	r1, #2
 8004618:	4852      	ldr	r0, [pc, #328]	; (8004764 <menu+0x3614>)
 800461a:	f004 fe5d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d138      	bne.n	8004696 <menu+0x3546>
 8004624:	2104      	movs	r1, #4
 8004626:	484f      	ldr	r0, [pc, #316]	; (8004764 <menu+0x3614>)
 8004628:	f004 fe56 	bl	80092d8 <HAL_GPIO_ReadPin>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d131      	bne.n	8004696 <menu+0x3546>
 8004632:	4b4d      	ldr	r3, [pc, #308]	; (8004768 <menu+0x3618>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f083 0301 	eor.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02a      	beq.n	8004696 <menu+0x3546>
			takeWifiSSID();
 8004640:	f002 fc02 	bl	8006e48 <takeWifiSSID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004644:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004648:	9302      	str	r3, [sp, #8]
 800464a:	236e      	movs	r3, #110	; 0x6e
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	4b48      	ldr	r3, [pc, #288]	; (8004770 <menu+0x3620>)
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	236e      	movs	r3, #110	; 0x6e
 8004654:	2200      	movs	r2, #0
 8004656:	21a0      	movs	r1, #160	; 0xa0
 8004658:	484b      	ldr	r0, [pc, #300]	; (8004788 <menu+0x3638>)
 800465a:	f005 f9f1 	bl	8009a40 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 800465e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004662:	f004 f869 	bl	8008738 <HAL_Delay>
			memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 8004666:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <menu+0x3648>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a41      	ldr	r2, [pc, #260]	; (8004770 <menu+0x3620>)
 800466c:	441a      	add	r2, r3
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <menu+0x364c>)
 8004670:	6811      	ldr	r1, [r2, #0]
 8004672:	6855      	ldr	r5, [r2, #4]
 8004674:	6894      	ldr	r4, [r2, #8]
 8004676:	68d0      	ldr	r0, [r2, #12]
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	605d      	str	r5, [r3, #4]
 800467c:	609c      	str	r4, [r3, #8]
 800467e:	60d8      	str	r0, [r3, #12]
 8004680:	6911      	ldr	r1, [r2, #16]
 8004682:	6119      	str	r1, [r3, #16]
			convertArrays(2);
 8004684:	2002      	movs	r0, #2
 8004686:	f7fc f88d 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 800468a:	20fa      	movs	r0, #250	; 0xfa
 800468c:	f004 f854 	bl	8008738 <HAL_Delay>
			printMachineCredentials(2);
 8004690:	2002      	movs	r0, #2
 8004692:	f003 f8af 	bl	80077f4 <printMachineCredentials>
		}
	}

	if (menuSayac == 34) {
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <menu+0x3628>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b22      	cmp	r3, #34	; 0x22
 800469c:	d14a      	bne.n	8004734 <menu+0x35e4>
		calismaSayModu = 0;
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <menu+0x362c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80046a4:	4a3e      	ldr	r2, [pc, #248]	; (80047a0 <menu+0x3650>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	2001      	movs	r0, #1
 80046aa:	f003 faef 	bl	8007c8c <lcd_print>
		printMachineCredentials(3);
 80046ae:	2003      	movs	r0, #3
 80046b0:	f003 f8a0 	bl	80077f4 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046b4:	2102      	movs	r1, #2
 80046b6:	482b      	ldr	r0, [pc, #172]	; (8004764 <menu+0x3614>)
 80046b8:	f004 fe0e 	bl	80092d8 <HAL_GPIO_ReadPin>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d138      	bne.n	8004734 <menu+0x35e4>
 80046c2:	2104      	movs	r1, #4
 80046c4:	4827      	ldr	r0, [pc, #156]	; (8004764 <menu+0x3614>)
 80046c6:	f004 fe07 	bl	80092d8 <HAL_GPIO_ReadPin>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d131      	bne.n	8004734 <menu+0x35e4>
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <menu+0x3618>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	f083 0301 	eor.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02a      	beq.n	8004734 <menu+0x35e4>
			takeWifiPass();
 80046de:	f002 fd67 	bl	80071b0 <takeWifiPass>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80046e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	236e      	movs	r3, #110	; 0x6e
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <menu+0x3620>)
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	236e      	movs	r3, #110	; 0x6e
 80046f2:	2200      	movs	r2, #0
 80046f4:	21a0      	movs	r1, #160	; 0xa0
 80046f6:	4824      	ldr	r0, [pc, #144]	; (8004788 <menu+0x3638>)
 80046f8:	f005 f9a2 	bl	8009a40 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80046fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004700:	f004 f81a 	bl	8008738 <HAL_Delay>
			memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <menu+0x3654>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <menu+0x3620>)
 800470a:	441a      	add	r2, r3
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <menu+0x3658>)
 800470e:	6811      	ldr	r1, [r2, #0]
 8004710:	6855      	ldr	r5, [r2, #4]
 8004712:	6894      	ldr	r4, [r2, #8]
 8004714:	68d0      	ldr	r0, [r2, #12]
 8004716:	6019      	str	r1, [r3, #0]
 8004718:	605d      	str	r5, [r3, #4]
 800471a:	609c      	str	r4, [r3, #8]
 800471c:	60d8      	str	r0, [r3, #12]
 800471e:	6911      	ldr	r1, [r2, #16]
 8004720:	6119      	str	r1, [r3, #16]
			convertArrays(3);
 8004722:	2003      	movs	r0, #3
 8004724:	f7fc f83e 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 8004728:	20fa      	movs	r0, #250	; 0xfa
 800472a:	f004 f805 	bl	8008738 <HAL_Delay>
			printMachineCredentials(3);
 800472e:	2003      	movs	r0, #3
 8004730:	f003 f860 	bl	80077f4 <printMachineCredentials>
		}
	}

	if (menuSayac == 35) {
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <menu+0x3628>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b23      	cmp	r3, #35	; 0x23
 800473a:	d17a      	bne.n	8004832 <menu+0x36e2>
		if(dilSecim == 0) {
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <menu+0x360c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d137      	bne.n	80047b4 <menu+0x3664>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <menu+0x365c>)
 8004746:	2101      	movs	r1, #1
 8004748:	2001      	movs	r0, #1
 800474a:	f003 fa9f 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <menu+0x3660>)
 8004750:	2101      	movs	r1, #1
 8004752:	2002      	movs	r0, #2
 8004754:	f003 fa9a 	bl	8007c8c <lcd_print>
 8004758:	e03a      	b.n	80047d0 <menu+0x3680>
 800475a:	bf00      	nop
 800475c:	20000255 	.word	0x20000255
 8004760:	0800d2e4 	.word	0x0800d2e4
 8004764:	40010800 	.word	0x40010800
 8004768:	20000263 	.word	0x20000263
 800476c:	20000253 	.word	0x20000253
 8004770:	2000012c 	.word	0x2000012c
 8004774:	20000260 	.word	0x20000260
 8004778:	20000234 	.word	0x20000234
 800477c:	20000254 	.word	0x20000254
 8004780:	0800da2c 	.word	0x0800da2c
 8004784:	0800da40 	.word	0x0800da40
 8004788:	200003bc 	.word	0x200003bc
 800478c:	20000004 	.word	0x20000004
 8004790:	200001d8 	.word	0x200001d8
 8004794:	0800da54 	.word	0x0800da54
 8004798:	20000008 	.word	0x20000008
 800479c:	200001e4 	.word	0x200001e4
 80047a0:	0800da68 	.word	0x0800da68
 80047a4:	2000000c 	.word	0x2000000c
 80047a8:	200001f8 	.word	0x200001f8
 80047ac:	0800da7c 	.word	0x0800da7c
 80047b0:	0800da90 	.word	0x0800da90
		} else if(dilSecim == 1) {
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <menu+0x36e8>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d109      	bne.n	80047d0 <menu+0x3680>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <menu+0x36ec>)
 80047be:	2101      	movs	r1, #1
 80047c0:	2001      	movs	r0, #1
 80047c2:	f003 fa63 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80047c6:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <menu+0x36f0>)
 80047c8:	2101      	movs	r1, #1
 80047ca:	2002      	movs	r0, #2
 80047cc:	f003 fa5e 	bl	8007c8c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80047d0:	2108      	movs	r1, #8
 80047d2:	481c      	ldr	r0, [pc, #112]	; (8004844 <menu+0x36f4>)
 80047d4:	f004 fd80 	bl	80092d8 <HAL_GPIO_ReadPin>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d129      	bne.n	8004832 <menu+0x36e2>
			menuGiris = 0;
 80047de:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <menu+0x36f8>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80047e4:	bf00      	nop
 80047e6:	4819      	ldr	r0, [pc, #100]	; (800484c <menu+0x36fc>)
 80047e8:	f005 fb9f 	bl	8009f2a <HAL_I2C_GetError>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d0f9      	beq.n	80047e6 <menu+0x3696>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80047f2:	bf00      	nop
 80047f4:	4815      	ldr	r0, [pc, #84]	; (800484c <menu+0x36fc>)
 80047f6:	f005 fb8b 	bl	8009f10 <HAL_I2C_GetState>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d1f9      	bne.n	80047f4 <menu+0x36a4>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004800:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	236e      	movs	r3, #110	; 0x6e
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <menu+0x3700>)
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	236e      	movs	r3, #110	; 0x6e
 8004810:	2200      	movs	r2, #0
 8004812:	21a0      	movs	r1, #160	; 0xa0
 8004814:	480d      	ldr	r0, [pc, #52]	; (800484c <menu+0x36fc>)
 8004816:	f005 f819 	bl	800984c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800481a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800481e:	f003 ff8b 	bl	8008738 <HAL_Delay>

			lcd_clear();
 8004822:	f003 fa5f 	bl	8007ce4 <lcd_clear>
			HAL_Delay(500);
 8004826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800482a:	f003 ff85 	bl	8008738 <HAL_Delay>
			NVIC_SystemReset();
 800482e:	f7fc fc79 	bl	8001124 <__NVIC_SystemReset>
		}
	}
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	bdb0      	pop	{r4, r5, r7, pc}
 8004838:	20000255 	.word	0x20000255
 800483c:	0800daa4 	.word	0x0800daa4
 8004840:	0800dab8 	.word	0x0800dab8
 8004844:	40010800 	.word	0x40010800
 8004848:	20000251 	.word	0x20000251
 800484c:	200003bc 	.word	0x200003bc
 8004850:	2000012c 	.word	0x2000012c

08004854 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004864:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <lcdUpdate+0x9c>)
 8004866:	2101      	movs	r1, #1
 8004868:	2002      	movs	r0, #2
 800486a:	f003 fa0f 	bl	8007c8c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 800486e:	e03b      	b.n	80048e8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d105      	bne.n	8004882 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <lcdUpdate+0x9c>)
 8004878:	2102      	movs	r1, #2
 800487a:	2002      	movs	r0, #2
 800487c:	f003 fa06 	bl	8007c8c <lcd_print>
}
 8004880:	e032      	b.n	80048e8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d105      	bne.n	8004894 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <lcdUpdate+0x9c>)
 800488a:	2103      	movs	r1, #3
 800488c:	2002      	movs	r0, #2
 800488e:	f003 f9fd 	bl	8007c8c <lcd_print>
}
 8004892:	e029      	b.n	80048e8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d105      	bne.n	80048a6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <lcdUpdate+0x9c>)
 800489c:	2104      	movs	r1, #4
 800489e:	2002      	movs	r0, #2
 80048a0:	f003 f9f4 	bl	8007c8c <lcd_print>
}
 80048a4:	e020      	b.n	80048e8 <lcdUpdate+0x94>
	} else if(y==5) {
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	d105      	bne.n	80048b8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80048ac:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <lcdUpdate+0x9c>)
 80048ae:	2105      	movs	r1, #5
 80048b0:	2002      	movs	r0, #2
 80048b2:	f003 f9eb 	bl	8007c8c <lcd_print>
}
 80048b6:	e017      	b.n	80048e8 <lcdUpdate+0x94>
	} else if(y==6) {
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	2b06      	cmp	r3, #6
 80048bc:	d105      	bne.n	80048ca <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80048be:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <lcdUpdate+0x9c>)
 80048c0:	2106      	movs	r1, #6
 80048c2:	2002      	movs	r0, #2
 80048c4:	f003 f9e2 	bl	8007c8c <lcd_print>
}
 80048c8:	e00e      	b.n	80048e8 <lcdUpdate+0x94>
	} else if (y==7) {
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b07      	cmp	r3, #7
 80048ce:	d10b      	bne.n	80048e8 <lcdUpdate+0x94>
		lcd_clear();
 80048d0:	f003 fa08 	bl	8007ce4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 80048d4:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <lcdUpdate+0xa0>)
 80048d6:	2104      	movs	r1, #4
 80048d8:	2001      	movs	r0, #1
 80048da:	f003 f9d7 	bl	8007c8c <lcd_print>
		lcd_print(2, 6, "RUN");
 80048de:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <lcdUpdate+0xa4>)
 80048e0:	2106      	movs	r1, #6
 80048e2:	2002      	movs	r0, #2
 80048e4:	f003 f9d2 	bl	8007c8c <lcd_print>
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	0800dacc 	.word	0x0800dacc
 80048f4:	0800dad0 	.word	0x0800dad0
 80048f8:	0800dad8 	.word	0x0800dad8

080048fc <bekle>:

void bekle() {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	timer1=millis;
 8004900:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <bekle+0x124>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a47      	ldr	r2, [pc, #284]	; (8004a24 <bekle+0x128>)
 8004906:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004908:	e002      	b.n	8004910 <bekle+0x14>
    	butonKontrol = 1;
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <bekle+0x12c>)
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004910:	2101      	movs	r1, #1
 8004912:	4846      	ldr	r0, [pc, #280]	; (8004a2c <bekle+0x130>)
 8004914:	f004 fce0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d109      	bne.n	8004932 <bekle+0x36>
 800491e:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <bekle+0x124>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <bekle+0x128>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d0ef      	beq.n	800490a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800492a:	e002      	b.n	8004932 <bekle+0x36>
    	butonKontrol = 1;
 800492c:	4b3e      	ldr	r3, [pc, #248]	; (8004a28 <bekle+0x12c>)
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004932:	2108      	movs	r1, #8
 8004934:	483e      	ldr	r0, [pc, #248]	; (8004a30 <bekle+0x134>)
 8004936:	f004 fccf 	bl	80092d8 <HAL_GPIO_ReadPin>
 800493a:	4603      	mov	r3, r0
 800493c:	2b01      	cmp	r3, #1
 800493e:	d109      	bne.n	8004954 <bekle+0x58>
 8004940:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <bekle+0x124>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <bekle+0x128>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d0ef      	beq.n	800492c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800494c:	e002      	b.n	8004954 <bekle+0x58>
    	butonKontrol = 1;
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <bekle+0x12c>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004954:	2102      	movs	r1, #2
 8004956:	4835      	ldr	r0, [pc, #212]	; (8004a2c <bekle+0x130>)
 8004958:	f004 fcbe 	bl	80092d8 <HAL_GPIO_ReadPin>
 800495c:	4603      	mov	r3, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	d109      	bne.n	8004976 <bekle+0x7a>
 8004962:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <bekle+0x124>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <bekle+0x128>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d0ef      	beq.n	800494e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800496e:	e002      	b.n	8004976 <bekle+0x7a>
    	butonKontrol = 1;
 8004970:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <bekle+0x12c>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004976:	2104      	movs	r1, #4
 8004978:	482c      	ldr	r0, [pc, #176]	; (8004a2c <bekle+0x130>)
 800497a:	f004 fcad 	bl	80092d8 <HAL_GPIO_ReadPin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d109      	bne.n	8004998 <bekle+0x9c>
 8004984:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <bekle+0x124>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <bekle+0x128>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d0ef      	beq.n	8004970 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004990:	e002      	b.n	8004998 <bekle+0x9c>
    	butonKontrol = 1;
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <bekle+0x12c>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004998:	2108      	movs	r1, #8
 800499a:	4824      	ldr	r0, [pc, #144]	; (8004a2c <bekle+0x130>)
 800499c:	f004 fc9c 	bl	80092d8 <HAL_GPIO_ReadPin>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d109      	bne.n	80049ba <bekle+0xbe>
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <bekle+0x124>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <bekle+0x128>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d0ef      	beq.n	8004992 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049b2:	e002      	b.n	80049ba <bekle+0xbe>
    	butonKontrol = 1;
 80049b4:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <bekle+0x12c>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	481c      	ldr	r0, [pc, #112]	; (8004a30 <bekle+0x134>)
 80049be:	f004 fc8b 	bl	80092d8 <HAL_GPIO_ReadPin>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <bekle+0xe0>
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <bekle+0x124>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <bekle+0x128>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d0ef      	beq.n	80049b4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049d4:	e002      	b.n	80049dc <bekle+0xe0>
    	butonKontrol = 1;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <bekle+0x12c>)
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049e0:	4813      	ldr	r0, [pc, #76]	; (8004a30 <bekle+0x134>)
 80049e2:	f004 fc79 	bl	80092d8 <HAL_GPIO_ReadPin>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <bekle+0x104>
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <bekle+0x124>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <bekle+0x128>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0ee      	beq.n	80049d6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049f8:	e002      	b.n	8004a00 <bekle+0x104>
    	butonKontrol = 1;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <bekle+0x12c>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a04:	480a      	ldr	r0, [pc, #40]	; (8004a30 <bekle+0x134>)
 8004a06:	f004 fc67 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <bekle+0x120>
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <bekle+0x124>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <bekle+0x128>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d0ee      	beq.n	80049fa <bekle+0xfe>
    }

}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000210 	.word	0x20000210
 8004a24:	20000218 	.word	0x20000218
 8004a28:	20000263 	.word	0x20000263
 8004a2c:	40010800 	.word	0x40010800
 8004a30:	40011000 	.word	0x40011000

08004a34 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <checkLCDBacklight+0x24>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <checkLCDBacklight+0x28>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b3b      	cmp	r3, #59	; 0x3b
 8004a44:	d903      	bls.n	8004a4e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a46:	2000      	movs	r0, #0
 8004a48:	f003 f96c 	bl	8007d24 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004a4c:	e002      	b.n	8004a54 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f003 f968 	bl	8007d24 <lcd_backlight>
}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000210 	.word	0x20000210
 8004a5c:	2000022c 	.word	0x2000022c

08004a60 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <checkBasincSalteri+0x54>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <checkBasincSalteri+0x12>
		basincVar=1;
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <checkBasincSalteri+0x58>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <checkBasincSalteri+0x54>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d119      	bne.n	8004aae <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a7e:	480f      	ldr	r0, [pc, #60]	; (8004abc <checkBasincSalteri+0x5c>)
 8004a80:	f004 fc2a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <checkBasincSalteri+0x60>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <checkBasincSalteri+0x64>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d90a      	bls.n	8004aae <checkBasincSalteri+0x4e>
				basincVar=1;
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <checkBasincSalteri+0x58>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004a9e:	e006      	b.n	8004aae <checkBasincSalteri+0x4e>
			timer5=millis;
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <checkBasincSalteri+0x60>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a07      	ldr	r2, [pc, #28]	; (8004ac4 <checkBasincSalteri+0x64>)
 8004aa6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <checkBasincSalteri+0x58>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000023b 	.word	0x2000023b
 8004ab8:	20000237 	.word	0x20000237
 8004abc:	40011000 	.word	0x40011000
 8004ac0:	20000210 	.word	0x20000210
 8004ac4:	20000228 	.word	0x20000228

08004ac8 <checkBasGonder>:

void checkBasGonder() {
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <checkBasGonder+0x74>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d10b      	bne.n	8004aec <checkBasGonder+0x24>
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <checkBasGonder+0x78>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <checkBasGonder+0x24>
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <checkBasGonder+0x7c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <checkBasGonder+0x80>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e009      	b.n	8004b00 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <checkBasGonder+0x78>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f083 0301 	eor.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <checkBasGonder+0x80>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <checkBasGonder+0x74>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10b      	bne.n	8004b20 <checkBasGonder+0x58>
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <checkBasGonder+0x84>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <checkBasGonder+0x58>
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <checkBasGonder+0x7c>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <checkBasGonder+0x88>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004b1e:	e009      	b.n	8004b34 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <checkBasGonder+0x84>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f083 0301 	eor.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <checkBasGonder+0x88>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	20000235 	.word	0x20000235
 8004b40:	20000269 	.word	0x20000269
 8004b44:	20000243 	.word	0x20000243
 8004b48:	20000270 	.word	0x20000270
 8004b4c:	2000026c 	.word	0x2000026c
 8004b50:	20000271 	.word	0x20000271

08004b54 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <checkKapiSecimleri+0x98>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004b60:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004b66:	4b21      	ldr	r3, [pc, #132]	; (8004bec <checkKapiSecimleri+0x98>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10e      	bne.n	8004b8c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b72:	4820      	ldr	r0, [pc, #128]	; (8004bf4 <checkKapiSecimleri+0xa0>)
 8004b74:	f004 fbb0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <checkKapiSecimleri+0x98>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d10e      	bne.n	8004bb2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b98:	4816      	ldr	r0, [pc, #88]	; (8004bf4 <checkKapiSecimleri+0xa0>)
 8004b9a:	f004 fb9d 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004bac:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <checkKapiSecimleri+0x98>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d116      	bne.n	8004be8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bbe:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <checkKapiSecimleri+0xa0>)
 8004bc0:	f004 fb8a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <checkKapiSecimleri+0x8e>
 8004bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bce:	4809      	ldr	r0, [pc, #36]	; (8004bf4 <checkKapiSecimleri+0xa0>)
 8004bd0:	f004 fb82 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004be0:	e002      	b.n	8004be8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004be2:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <checkKapiSecimleri+0x9c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2000023c 	.word	0x2000023c
 8004bf0:	20000287 	.word	0x20000287
 8004bf4:	40010800 	.word	0x40010800

08004bf8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004bfc:	4b62      	ldr	r3, [pc, #392]	; (8004d88 <checkAktifCalisma+0x190>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f041 833e 	bne.w	8006282 <checkAktifCalisma+0x168a>
 8004c06:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <checkAktifCalisma+0x194>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f041 8339 	bne.w	8006282 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004c10:	4b5f      	ldr	r3, [pc, #380]	; (8004d90 <checkAktifCalisma+0x198>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11a      	bne.n	8004c4e <checkAktifCalisma+0x56>
 8004c18:	4b5e      	ldr	r3, [pc, #376]	; (8004d94 <checkAktifCalisma+0x19c>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d116      	bne.n	8004c4e <checkAktifCalisma+0x56>
 8004c20:	4b5d      	ldr	r3, [pc, #372]	; (8004d98 <checkAktifCalisma+0x1a0>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <checkAktifCalisma+0x46>
 8004c28:	4b5c      	ldr	r3, [pc, #368]	; (8004d9c <checkAktifCalisma+0x1a4>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f083 0301 	eor.w	r3, r3, #1
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <checkAktifCalisma+0x46>
 8004c36:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <checkAktifCalisma+0x1a8>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d007      	beq.n	8004c4e <checkAktifCalisma+0x56>
 8004c3e:	4b59      	ldr	r3, [pc, #356]	; (8004da4 <checkAktifCalisma+0x1ac>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <checkAktifCalisma+0x80>
 8004c46:	4b58      	ldr	r3, [pc, #352]	; (8004da8 <checkAktifCalisma+0x1b0>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d114      	bne.n	8004c78 <checkAktifCalisma+0x80>
 8004c4e:	4b57      	ldr	r3, [pc, #348]	; (8004dac <checkAktifCalisma+0x1b4>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <checkAktifCalisma+0x80>
 8004c56:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <checkAktifCalisma+0x1b8>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c64:	4853      	ldr	r0, [pc, #332]	; (8004db4 <checkAktifCalisma+0x1bc>)
 8004c66:	f004 fb4e 	bl	8009306 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004c6a:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <checkAktifCalisma+0x1c0>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004c70:	4b52      	ldr	r3, [pc, #328]	; (8004dbc <checkAktifCalisma+0x1c4>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e008      	b.n	8004c8a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c7e:	484d      	ldr	r0, [pc, #308]	; (8004db4 <checkAktifCalisma+0x1bc>)
 8004c80:	f004 fb41 	bl	8009306 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004c84:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <checkAktifCalisma+0x1c0>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <checkAktifCalisma+0x194>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d160      	bne.n	8004d54 <checkAktifCalisma+0x15c>
 8004c92:	4b46      	ldr	r3, [pc, #280]	; (8004dac <checkAktifCalisma+0x1b4>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d05c      	beq.n	8004d54 <checkAktifCalisma+0x15c>
 8004c9a:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <checkAktifCalisma+0x1b8>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d058      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ca6:	4843      	ldr	r0, [pc, #268]	; (8004db4 <checkAktifCalisma+0x1bc>)
 8004ca8:	f004 fb16 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <checkAktifCalisma+0xc2>
 8004cb2:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <checkAktifCalisma+0x1c8>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04c      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004cba:	2102      	movs	r1, #2
 8004cbc:	4841      	ldr	r0, [pc, #260]	; (8004dc4 <checkAktifCalisma+0x1cc>)
 8004cbe:	f004 fb0b 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d145      	bne.n	8004d54 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004cc8:	4b3f      	ldr	r3, [pc, #252]	; (8004dc8 <checkAktifCalisma+0x1d0>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d041      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cd4:	4837      	ldr	r0, [pc, #220]	; (8004db4 <checkAktifCalisma+0x1bc>)
 8004cd6:	f004 faff 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10e      	bne.n	8004cfe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce4:	4833      	ldr	r0, [pc, #204]	; (8004db4 <checkAktifCalisma+0x1bc>)
 8004ce6:	f004 faf7 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004cf0:	2140      	movs	r1, #64	; 0x40
 8004cf2:	4834      	ldr	r0, [pc, #208]	; (8004dc4 <checkAktifCalisma+0x1cc>)
 8004cf4:	f004 faf0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <checkAktifCalisma+0x10e>
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <checkAktifCalisma+0x198>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d026      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <checkAktifCalisma+0x1a0>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f083 0301 	eor.w	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01f      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <checkAktifCalisma+0x19c>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	f083 0301 	eor.w	r3, r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d018      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004d22:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <checkAktifCalisma+0x1ac>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f083 0301 	eor.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <checkAktifCalisma+0x1d4>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f083 0301 	eor.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <checkAktifCalisma+0x1d8>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	f083 0301 	eor.w	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <checkAktifCalisma+0x198>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <checkAktifCalisma+0x198>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <checkAktifCalisma+0x198>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d03a      	beq.n	8004dd8 <checkAktifCalisma+0x1e0>
 8004d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d66:	4817      	ldr	r0, [pc, #92]	; (8004dc4 <checkAktifCalisma+0x1cc>)
 8004d68:	f004 fab6 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d132      	bne.n	8004dd8 <checkAktifCalisma+0x1e0>
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <checkAktifCalisma+0x1dc>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02e      	beq.n	8004dd8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d80:	480c      	ldr	r0, [pc, #48]	; (8004db4 <checkAktifCalisma+0x1bc>)
 8004d82:	f004 fac0 	bl	8009306 <HAL_GPIO_WritePin>
 8004d86:	e02d      	b.n	8004de4 <checkAktifCalisma+0x1ec>
 8004d88:	20000252 	.word	0x20000252
 8004d8c:	20000251 	.word	0x20000251
 8004d90:	20000269 	.word	0x20000269
 8004d94:	2000026a 	.word	0x2000026a
 8004d98:	2000026c 	.word	0x2000026c
 8004d9c:	20000264 	.word	0x20000264
 8004da0:	20000247 	.word	0x20000247
 8004da4:	2000026b 	.word	0x2000026b
 8004da8:	20000246 	.word	0x20000246
 8004dac:	20000286 	.word	0x20000286
 8004db0:	20000287 	.word	0x20000287
 8004db4:	40010c00 	.word	0x40010c00
 8004db8:	20000288 	.word	0x20000288
 8004dbc:	20000273 	.word	0x20000273
 8004dc0:	20000270 	.word	0x20000270
 8004dc4:	40011000 	.word	0x40011000
 8004dc8:	20000237 	.word	0x20000237
 8004dcc:	2000026e 	.word	0x2000026e
 8004dd0:	2000026f 	.word	0x2000026f
 8004dd4:	20000242 	.word	0x20000242
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dde:	4860      	ldr	r0, [pc, #384]	; (8004f60 <checkAktifCalisma+0x368>)
 8004de0:	f004 fa91 	bl	8009306 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004de4:	4b5f      	ldr	r3, [pc, #380]	; (8004f64 <checkAktifCalisma+0x36c>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d013      	beq.n	8004e14 <checkAktifCalisma+0x21c>
 8004dec:	4b5e      	ldr	r3, [pc, #376]	; (8004f68 <checkAktifCalisma+0x370>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d007      	beq.n	8004e04 <checkAktifCalisma+0x20c>
 8004df4:	4b5c      	ldr	r3, [pc, #368]	; (8004f68 <checkAktifCalisma+0x370>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d003      	beq.n	8004e04 <checkAktifCalisma+0x20c>
 8004dfc:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <checkAktifCalisma+0x374>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d107      	bne.n	8004e14 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004e04:	2201      	movs	r2, #1
 8004e06:	2104      	movs	r1, #4
 8004e08:	4855      	ldr	r0, [pc, #340]	; (8004f60 <checkAktifCalisma+0x368>)
 8004e0a:	f004 fa7c 	bl	8009306 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004e0e:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <checkAktifCalisma+0x378>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004e14:	4b56      	ldr	r3, [pc, #344]	; (8004f70 <checkAktifCalisma+0x378>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02f      	beq.n	8004e7c <checkAktifCalisma+0x284>
 8004e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e20:	484f      	ldr	r0, [pc, #316]	; (8004f60 <checkAktifCalisma+0x368>)
 8004e22:	f004 fa59 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <checkAktifCalisma+0x242>
 8004e2c:	4b51      	ldr	r3, [pc, #324]	; (8004f74 <checkAktifCalisma+0x37c>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f083 0301 	eor.w	r3, r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <checkAktifCalisma+0x250>
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	484e      	ldr	r0, [pc, #312]	; (8004f78 <checkAktifCalisma+0x380>)
 8004e3e:	f004 fa4b 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d119      	bne.n	8004e7c <checkAktifCalisma+0x284>
 8004e48:	4b4c      	ldr	r3, [pc, #304]	; (8004f7c <checkAktifCalisma+0x384>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d015      	beq.n	8004e7c <checkAktifCalisma+0x284>
 8004e50:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <checkAktifCalisma+0x388>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d011      	beq.n	8004e7c <checkAktifCalisma+0x284>
 8004e58:	4b4a      	ldr	r3, [pc, #296]	; (8004f84 <checkAktifCalisma+0x38c>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <checkAktifCalisma+0x284>
 8004e60:	4b49      	ldr	r3, [pc, #292]	; (8004f88 <checkAktifCalisma+0x390>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	f083 0301 	eor.w	r3, r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <checkAktifCalisma+0x284>
			timer2=millis;
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <checkAktifCalisma+0x394>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a47      	ldr	r2, [pc, #284]	; (8004f90 <checkAktifCalisma+0x398>)
 8004e74:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004e76:	4b44      	ldr	r3, [pc, #272]	; (8004f88 <checkAktifCalisma+0x390>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004e7c:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <checkAktifCalisma+0x394>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <checkAktifCalisma+0x398>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	4a43      	ldr	r2, [pc, #268]	; (8004f94 <checkAktifCalisma+0x39c>)
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d303      	bcc.n	8004e96 <checkAktifCalisma+0x29e>
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <checkAktifCalisma+0x390>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d111      	bne.n	8004eba <checkAktifCalisma+0x2c2>
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <checkAktifCalisma+0x384>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	f083 0301 	eor.w	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <checkAktifCalisma+0x2c2>
 8004ea4:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <checkAktifCalisma+0x388>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f083 0301 	eor.w	r3, r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <checkAktifCalisma+0x2c2>
 8004eb2:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <checkAktifCalisma+0x38c>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	4828      	ldr	r0, [pc, #160]	; (8004f60 <checkAktifCalisma+0x368>)
 8004ec0:	f004 fa21 	bl	8009306 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <checkAktifCalisma+0x378>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004eca:	4b2f      	ldr	r3, [pc, #188]	; (8004f88 <checkAktifCalisma+0x390>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004ed0:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <checkAktifCalisma+0x3a0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <checkAktifCalisma+0x3a4>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004ede:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <checkAktifCalisma+0x3a0>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d116      	bne.n	8004f14 <checkAktifCalisma+0x31c>
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <checkAktifCalisma+0x3a8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d112      	bne.n	8004f14 <checkAktifCalisma+0x31c>
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4821      	ldr	r0, [pc, #132]	; (8004f78 <checkAktifCalisma+0x380>)
 8004ef2:	f004 f9f1 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <checkAktifCalisma+0x31c>
 8004efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f00:	4817      	ldr	r0, [pc, #92]	; (8004f60 <checkAktifCalisma+0x368>)
 8004f02:	f004 f9e9 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004f0c:	4b23      	ldr	r3, [pc, #140]	; (8004f9c <checkAktifCalisma+0x3a4>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e011      	b.n	8004f38 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <checkAktifCalisma+0x3a0>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10d      	bne.n	8004f38 <checkAktifCalisma+0x340>
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4816      	ldr	r0, [pc, #88]	; (8004f78 <checkAktifCalisma+0x380>)
 8004f20:	f004 f9da 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d106      	bne.n	8004f38 <checkAktifCalisma+0x340>
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <checkAktifCalisma+0x3a8>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d102      	bne.n	8004f38 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f32:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <checkAktifCalisma+0x3a4>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f38:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <checkAktifCalisma+0x3a0>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d134      	bne.n	8004faa <checkAktifCalisma+0x3b2>
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <checkAktifCalisma+0x3a8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d130      	bne.n	8004faa <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f48:	2101      	movs	r1, #1
 8004f4a:	480b      	ldr	r0, [pc, #44]	; (8004f78 <checkAktifCalisma+0x380>)
 8004f4c:	f004 f9c4 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d126      	bne.n	8004fa4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <checkAktifCalisma+0x3a4>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e025      	b.n	8004faa <checkAktifCalisma+0x3b2>
 8004f5e:	bf00      	nop
 8004f60:	40010c00 	.word	0x40010c00
 8004f64:	20000269 	.word	0x20000269
 8004f68:	20000243 	.word	0x20000243
 8004f6c:	20000247 	.word	0x20000247
 8004f70:	2000026d 	.word	0x2000026d
 8004f74:	20000270 	.word	0x20000270
 8004f78:	40011000 	.word	0x40011000
 8004f7c:	20000286 	.word	0x20000286
 8004f80:	20000287 	.word	0x20000287
 8004f84:	20000237 	.word	0x20000237
 8004f88:	20000265 	.word	0x20000265
 8004f8c:	20000210 	.word	0x20000210
 8004f90:	2000021c 	.word	0x2000021c
 8004f94:	20000248 	.word	0x20000248
 8004f98:	20000238 	.word	0x20000238
 8004f9c:	2000028b 	.word	0x2000028b
 8004fa0:	20000235 	.word	0x20000235
			} else {
				cerceveVar=0;
 8004fa4:	4b7f      	ldr	r3, [pc, #508]	; (80051a4 <checkAktifCalisma+0x5ac>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004faa:	4b7f      	ldr	r3, [pc, #508]	; (80051a8 <checkAktifCalisma+0x5b0>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d17c      	bne.n	80050ac <checkAktifCalisma+0x4b4>
 8004fb2:	4b7e      	ldr	r3, [pc, #504]	; (80051ac <checkAktifCalisma+0x5b4>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d078      	beq.n	80050ac <checkAktifCalisma+0x4b4>
 8004fba:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <checkAktifCalisma+0x5b8>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d074      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fc6:	487b      	ldr	r0, [pc, #492]	; (80051b4 <checkAktifCalisma+0x5bc>)
 8004fc8:	f004 f986 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <checkAktifCalisma+0x3e2>
 8004fd2:	4b79      	ldr	r3, [pc, #484]	; (80051b8 <checkAktifCalisma+0x5c0>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d068      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004fda:	4b72      	ldr	r3, [pc, #456]	; (80051a4 <checkAktifCalisma+0x5ac>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d064      	beq.n	80050ac <checkAktifCalisma+0x4b4>
 8004fe2:	4b76      	ldr	r3, [pc, #472]	; (80051bc <checkAktifCalisma+0x5c4>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f083 0301 	eor.w	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d05d      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	4873      	ldr	r0, [pc, #460]	; (80051c0 <checkAktifCalisma+0x5c8>)
 8004ff4:	f004 f970 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <checkAktifCalisma+0x40e>
 8004ffe:	4b71      	ldr	r3, [pc, #452]	; (80051c4 <checkAktifCalisma+0x5cc>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d152      	bne.n	80050ac <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800500a:	486a      	ldr	r0, [pc, #424]	; (80051b4 <checkAktifCalisma+0x5bc>)
 800500c:	f004 f964 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d10e      	bne.n	8005034 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800501a:	4866      	ldr	r0, [pc, #408]	; (80051b4 <checkAktifCalisma+0x5bc>)
 800501c:	f004 f95c 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d106      	bne.n	8005034 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005026:	2140      	movs	r1, #64	; 0x40
 8005028:	4865      	ldr	r0, [pc, #404]	; (80051c0 <checkAktifCalisma+0x5c8>)
 800502a:	f004 f955 	bl	80092d8 <HAL_GPIO_ReadPin>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d003      	beq.n	800503c <checkAktifCalisma+0x444>
 8005034:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <checkAktifCalisma+0x5d0>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d037      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800503c:	4b63      	ldr	r3, [pc, #396]	; (80051cc <checkAktifCalisma+0x5d4>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f083 0301 	eor.w	r3, r3, #1
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d030      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800504a:	4b61      	ldr	r3, [pc, #388]	; (80051d0 <checkAktifCalisma+0x5d8>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	f083 0301 	eor.w	r3, r3, #1
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d029      	beq.n	80050ac <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005058:	4b5e      	ldr	r3, [pc, #376]	; (80051d4 <checkAktifCalisma+0x5dc>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f083 0301 	eor.w	r3, r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d022      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005066:	4b5c      	ldr	r3, [pc, #368]	; (80051d8 <checkAktifCalisma+0x5e0>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f083 0301 	eor.w	r3, r3, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01b      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <checkAktifCalisma+0x5e4>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f083 0301 	eor.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d014      	beq.n	80050ac <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005082:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <checkAktifCalisma+0x5e8>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f083 0301 	eor.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005090:	2201      	movs	r2, #1
 8005092:	2102      	movs	r1, #2
 8005094:	4847      	ldr	r0, [pc, #284]	; (80051b4 <checkAktifCalisma+0x5bc>)
 8005096:	f004 f936 	bl	8009306 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800509a:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <checkAktifCalisma+0x5d0>)
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80050a0:	4b50      	ldr	r3, [pc, #320]	; (80051e4 <checkAktifCalisma+0x5ec>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80050a6:	4b50      	ldr	r3, [pc, #320]	; (80051e8 <checkAktifCalisma+0x5f0>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80050ac:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <checkAktifCalisma+0x5d0>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d033      	beq.n	800511c <checkAktifCalisma+0x524>
 80050b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050b8:	483e      	ldr	r0, [pc, #248]	; (80051b4 <checkAktifCalisma+0x5bc>)
 80050ba:	f004 f90d 	bl	80092d8 <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <checkAktifCalisma+0x4da>
 80050c4:	4b3c      	ldr	r3, [pc, #240]	; (80051b8 <checkAktifCalisma+0x5c0>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f083 0301 	eor.w	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <checkAktifCalisma+0x4f0>
 80050d2:	2104      	movs	r1, #4
 80050d4:	483a      	ldr	r0, [pc, #232]	; (80051c0 <checkAktifCalisma+0x5c8>)
 80050d6:	f004 f8ff 	bl	80092d8 <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d11d      	bne.n	800511c <checkAktifCalisma+0x524>
 80050e0:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <checkAktifCalisma+0x5cc>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d019      	beq.n	800511c <checkAktifCalisma+0x524>
 80050e8:	4b30      	ldr	r3, [pc, #192]	; (80051ac <checkAktifCalisma+0x5b4>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <checkAktifCalisma+0x524>
 80050f0:	4b2f      	ldr	r3, [pc, #188]	; (80051b0 <checkAktifCalisma+0x5b8>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d011      	beq.n	800511c <checkAktifCalisma+0x524>
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <checkAktifCalisma+0x5ac>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <checkAktifCalisma+0x524>
 8005100:	4b3a      	ldr	r3, [pc, #232]	; (80051ec <checkAktifCalisma+0x5f4>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f083 0301 	eor.w	r3, r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <checkAktifCalisma+0x524>
			timer2=millis;
 800510e:	4b38      	ldr	r3, [pc, #224]	; (80051f0 <checkAktifCalisma+0x5f8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <checkAktifCalisma+0x5fc>)
 8005114:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005116:	4b35      	ldr	r3, [pc, #212]	; (80051ec <checkAktifCalisma+0x5f4>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800511c:	4b34      	ldr	r3, [pc, #208]	; (80051f0 <checkAktifCalisma+0x5f8>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <checkAktifCalisma+0x5fc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	4a34      	ldr	r2, [pc, #208]	; (80051f8 <checkAktifCalisma+0x600>)
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	4293      	cmp	r3, r2
 800512c:	d303      	bcc.n	8005136 <checkAktifCalisma+0x53e>
 800512e:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <checkAktifCalisma+0x5f4>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d114      	bne.n	8005160 <checkAktifCalisma+0x568>
 8005136:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <checkAktifCalisma+0x5b4>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	f083 0301 	eor.w	r3, r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10d      	bne.n	8005160 <checkAktifCalisma+0x568>
 8005144:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <checkAktifCalisma+0x5b8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f083 0301 	eor.w	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <checkAktifCalisma+0x568>
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <checkAktifCalisma+0x5ac>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	f083 0301 	eor.w	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005160:	2200      	movs	r2, #0
 8005162:	2102      	movs	r1, #2
 8005164:	4813      	ldr	r0, [pc, #76]	; (80051b4 <checkAktifCalisma+0x5bc>)
 8005166:	f004 f8ce 	bl	8009306 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800516a:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <checkAktifCalisma+0x5d0>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005170:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <checkAktifCalisma+0x5f4>)
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <checkAktifCalisma+0x5d0>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d040      	beq.n	8005200 <checkAktifCalisma+0x608>
 800517e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005182:	480f      	ldr	r0, [pc, #60]	; (80051c0 <checkAktifCalisma+0x5c8>)
 8005184:	f004 f8a8 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d138      	bne.n	8005200 <checkAktifCalisma+0x608>
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <checkAktifCalisma+0x604>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d034      	beq.n	8005200 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005196:	2201      	movs	r2, #1
 8005198:	2101      	movs	r1, #1
 800519a:	4806      	ldr	r0, [pc, #24]	; (80051b4 <checkAktifCalisma+0x5bc>)
 800519c:	f004 f8b3 	bl	8009306 <HAL_GPIO_WritePin>
 80051a0:	e033      	b.n	800520a <checkAktifCalisma+0x612>
 80051a2:	bf00      	nop
 80051a4:	2000028b 	.word	0x2000028b
 80051a8:	20000251 	.word	0x20000251
 80051ac:	20000286 	.word	0x20000286
 80051b0:	20000287 	.word	0x20000287
 80051b4:	40010c00 	.word	0x40010c00
 80051b8:	20000271 	.word	0x20000271
 80051bc:	20000285 	.word	0x20000285
 80051c0:	40011000 	.word	0x40011000
 80051c4:	2000023a 	.word	0x2000023a
 80051c8:	2000026c 	.word	0x2000026c
 80051cc:	20000269 	.word	0x20000269
 80051d0:	2000026d 	.word	0x2000026d
 80051d4:	2000026a 	.word	0x2000026a
 80051d8:	2000026b 	.word	0x2000026b
 80051dc:	2000026e 	.word	0x2000026e
 80051e0:	2000026f 	.word	0x2000026f
 80051e4:	20000274 	.word	0x20000274
 80051e8:	20000295 	.word	0x20000295
 80051ec:	20000264 	.word	0x20000264
 80051f0:	20000210 	.word	0x20000210
 80051f4:	2000021c 	.word	0x2000021c
 80051f8:	20000249 	.word	0x20000249
 80051fc:	20000239 	.word	0x20000239
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	4836      	ldr	r0, [pc, #216]	; (80052e0 <checkAktifCalisma+0x6e8>)
 8005206:	f004 f87e 	bl	8009306 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <checkAktifCalisma+0x6ec>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 8080 	bne.w	8005314 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <checkAktifCalisma+0x6f0>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d003      	beq.n	8005224 <checkAktifCalisma+0x62c>
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <checkAktifCalisma+0x6f0>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d177      	bne.n	8005314 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005224:	4b31      	ldr	r3, [pc, #196]	; (80052ec <checkAktifCalisma+0x6f4>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d073      	beq.n	8005314 <checkAktifCalisma+0x71c>
 800522c:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <checkAktifCalisma+0x6f8>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d06f      	beq.n	8005314 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005238:	4829      	ldr	r0, [pc, #164]	; (80052e0 <checkAktifCalisma+0x6e8>)
 800523a:	f004 f84d 	bl	80092d8 <HAL_GPIO_ReadPin>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d167      	bne.n	8005314 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005248:	482a      	ldr	r0, [pc, #168]	; (80052f4 <checkAktifCalisma+0x6fc>)
 800524a:	f004 f845 	bl	80092d8 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <checkAktifCalisma+0x664>
 8005254:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <checkAktifCalisma+0x700>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d15b      	bne.n	8005314 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800525c:	2140      	movs	r1, #64	; 0x40
 800525e:	4825      	ldr	r0, [pc, #148]	; (80052f4 <checkAktifCalisma+0x6fc>)
 8005260:	f004 f83a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10f      	bne.n	800528a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800526a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800526e:	481c      	ldr	r0, [pc, #112]	; (80052e0 <checkAktifCalisma+0x6e8>)
 8005270:	f004 f832 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800527a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800527e:	4818      	ldr	r0, [pc, #96]	; (80052e0 <checkAktifCalisma+0x6e8>)
 8005280:	f004 f82a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d003      	beq.n	8005292 <checkAktifCalisma+0x69a>
 800528a:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <checkAktifCalisma+0x704>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d040      	beq.n	8005314 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005292:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <checkAktifCalisma+0x708>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d039      	beq.n	8005314 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <checkAktifCalisma+0x70c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f083 0301 	eor.w	r3, r3, #1
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d032      	beq.n	8005314 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80052ae:	4b16      	ldr	r3, [pc, #88]	; (8005308 <checkAktifCalisma+0x710>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f083 0301 	eor.w	r3, r3, #1
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02b      	beq.n	8005314 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <checkAktifCalisma+0x714>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f083 0301 	eor.w	r3, r3, #1
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d024      	beq.n	8005314 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <checkAktifCalisma+0x718>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	f083 0301 	eor.w	r3, r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01d      	beq.n	8005314 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80052d8:	4b08      	ldr	r3, [pc, #32]	; (80052fc <checkAktifCalisma+0x704>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e01c      	b.n	800531a <checkAktifCalisma+0x722>
 80052e0:	40010c00 	.word	0x40010c00
 80052e4:	20000251 	.word	0x20000251
 80052e8:	20000243 	.word	0x20000243
 80052ec:	20000286 	.word	0x20000286
 80052f0:	20000287 	.word	0x20000287
 80052f4:	40011000 	.word	0x40011000
 80052f8:	20000244 	.word	0x20000244
 80052fc:	2000026a 	.word	0x2000026a
 8005300:	20000269 	.word	0x20000269
 8005304:	2000026d 	.word	0x2000026d
 8005308:	2000026c 	.word	0x2000026c
 800530c:	2000026b 	.word	0x2000026b
 8005310:	2000026f 	.word	0x2000026f
		} else {
			devmotoryukaricalisiyor=0;
 8005314:	4b64      	ldr	r3, [pc, #400]	; (80054a8 <checkAktifCalisma+0x8b0>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800531a:	4b63      	ldr	r3, [pc, #396]	; (80054a8 <checkAktifCalisma+0x8b0>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005322:	2201      	movs	r2, #1
 8005324:	2120      	movs	r1, #32
 8005326:	4861      	ldr	r0, [pc, #388]	; (80054ac <checkAktifCalisma+0x8b4>)
 8005328:	f003 ffed 	bl	8009306 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800532c:	4b60      	ldr	r3, [pc, #384]	; (80054b0 <checkAktifCalisma+0x8b8>)
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005332:	4b5f      	ldr	r3, [pc, #380]	; (80054b0 <checkAktifCalisma+0x8b8>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d025      	beq.n	8005386 <checkAktifCalisma+0x78e>
 800533a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800533e:	485d      	ldr	r0, [pc, #372]	; (80054b4 <checkAktifCalisma+0x8bc>)
 8005340:	f003 ffca 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d007      	beq.n	800535a <checkAktifCalisma+0x762>
 800534a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800534e:	4857      	ldr	r0, [pc, #348]	; (80054ac <checkAktifCalisma+0x8b4>)
 8005350:	f003 ffc2 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005354:	4603      	mov	r3, r0
 8005356:	2b01      	cmp	r3, #1
 8005358:	d115      	bne.n	8005386 <checkAktifCalisma+0x78e>
 800535a:	4b57      	ldr	r3, [pc, #348]	; (80054b8 <checkAktifCalisma+0x8c0>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d011      	beq.n	8005386 <checkAktifCalisma+0x78e>
 8005362:	4b56      	ldr	r3, [pc, #344]	; (80054bc <checkAktifCalisma+0x8c4>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <checkAktifCalisma+0x78e>
 800536a:	4b55      	ldr	r3, [pc, #340]	; (80054c0 <checkAktifCalisma+0x8c8>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f083 0301 	eor.w	r3, r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005378:	4b52      	ldr	r3, [pc, #328]	; (80054c4 <checkAktifCalisma+0x8cc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <checkAktifCalisma+0x8d0>)
 800537e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005380:	4b4f      	ldr	r3, [pc, #316]	; (80054c0 <checkAktifCalisma+0x8c8>)
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005386:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <checkAktifCalisma+0x8cc>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b4f      	ldr	r3, [pc, #316]	; (80054c8 <checkAktifCalisma+0x8d0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	4a4e      	ldr	r2, [pc, #312]	; (80054cc <checkAktifCalisma+0x8d4>)
 8005392:	7812      	ldrb	r2, [r2, #0]
 8005394:	4293      	cmp	r3, r2
 8005396:	d303      	bcc.n	80053a0 <checkAktifCalisma+0x7a8>
 8005398:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <checkAktifCalisma+0x8c8>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10d      	bne.n	80053bc <checkAktifCalisma+0x7c4>
 80053a0:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <checkAktifCalisma+0x8c0>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <checkAktifCalisma+0x7c4>
 80053ae:	4b43      	ldr	r3, [pc, #268]	; (80054bc <checkAktifCalisma+0x8c4>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f083 0301 	eor.w	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80053bc:	2200      	movs	r2, #0
 80053be:	2120      	movs	r1, #32
 80053c0:	483a      	ldr	r0, [pc, #232]	; (80054ac <checkAktifCalisma+0x8b4>)
 80053c2:	f003 ffa0 	bl	8009306 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80053c6:	4b3a      	ldr	r3, [pc, #232]	; (80054b0 <checkAktifCalisma+0x8b8>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80053cc:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <checkAktifCalisma+0x8c8>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80053d2:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <checkAktifCalisma+0x8d8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 8088 	bne.w	80054ec <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053dc:	4b3d      	ldr	r3, [pc, #244]	; (80054d4 <checkAktifCalisma+0x8dc>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d003      	beq.n	80053ec <checkAktifCalisma+0x7f4>
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <checkAktifCalisma+0x8dc>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d17f      	bne.n	80054ec <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80053ec:	4b32      	ldr	r3, [pc, #200]	; (80054b8 <checkAktifCalisma+0x8c0>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d07b      	beq.n	80054ec <checkAktifCalisma+0x8f4>
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <checkAktifCalisma+0x8c4>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d077      	beq.n	80054ec <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	482b      	ldr	r0, [pc, #172]	; (80054ac <checkAktifCalisma+0x8b4>)
 8005400:	f003 ff6a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d170      	bne.n	80054ec <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800540a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800540e:	4827      	ldr	r0, [pc, #156]	; (80054ac <checkAktifCalisma+0x8b4>)
 8005410:	f003 ff62 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <checkAktifCalisma+0x82a>
 800541a:	4b2f      	ldr	r3, [pc, #188]	; (80054d8 <checkAktifCalisma+0x8e0>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d164      	bne.n	80054ec <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005426:	4823      	ldr	r0, [pc, #140]	; (80054b4 <checkAktifCalisma+0x8bc>)
 8005428:	f003 ff56 	bl	80092d8 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10f      	bne.n	8005452 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005436:	481f      	ldr	r0, [pc, #124]	; (80054b4 <checkAktifCalisma+0x8bc>)
 8005438:	f003 ff4e 	bl	80092d8 <HAL_GPIO_ReadPin>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005446:	481b      	ldr	r0, [pc, #108]	; (80054b4 <checkAktifCalisma+0x8bc>)
 8005448:	f003 ff46 	bl	80092d8 <HAL_GPIO_ReadPin>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d003      	beq.n	800545a <checkAktifCalisma+0x862>
 8005452:	4b22      	ldr	r3, [pc, #136]	; (80054dc <checkAktifCalisma+0x8e4>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d048      	beq.n	80054ec <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800545a:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <checkAktifCalisma+0x8e8>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f083 0301 	eor.w	r3, r3, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d041      	beq.n	80054ec <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <checkAktifCalisma+0x8ec>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f083 0301 	eor.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d03a      	beq.n	80054ec <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <checkAktifCalisma+0x8f0>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f083 0301 	eor.w	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d033      	beq.n	80054ec <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <checkAktifCalisma+0x8b8>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02c      	beq.n	80054ec <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <checkAktifCalisma+0x8b0>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d025      	beq.n	80054ec <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <checkAktifCalisma+0x8e4>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e024      	b.n	80054f2 <checkAktifCalisma+0x8fa>
 80054a8:	2000026a 	.word	0x2000026a
 80054ac:	40011000 	.word	0x40011000
 80054b0:	2000026e 	.word	0x2000026e
 80054b4:	40010c00 	.word	0x40010c00
 80054b8:	20000286 	.word	0x20000286
 80054bc:	20000287 	.word	0x20000287
 80054c0:	20000266 	.word	0x20000266
 80054c4:	20000210 	.word	0x20000210
 80054c8:	2000021c 	.word	0x2000021c
 80054cc:	2000024a 	.word	0x2000024a
 80054d0:	20000251 	.word	0x20000251
 80054d4:	20000243 	.word	0x20000243
 80054d8:	20000245 	.word	0x20000245
 80054dc:	2000026b 	.word	0x2000026b
 80054e0:	20000269 	.word	0x20000269
 80054e4:	2000026d 	.word	0x2000026d
 80054e8:	2000026c 	.word	0x2000026c
		} else {
			devmotorasagicalisiyor=0;
 80054ec:	4b96      	ldr	r3, [pc, #600]	; (8005748 <checkAktifCalisma+0xb50>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80054f2:	4b95      	ldr	r3, [pc, #596]	; (8005748 <checkAktifCalisma+0xb50>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80054fa:	2201      	movs	r2, #1
 80054fc:	2110      	movs	r1, #16
 80054fe:	4893      	ldr	r0, [pc, #588]	; (800574c <checkAktifCalisma+0xb54>)
 8005500:	f003 ff01 	bl	8009306 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005504:	4b92      	ldr	r3, [pc, #584]	; (8005750 <checkAktifCalisma+0xb58>)
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800550a:	4b91      	ldr	r3, [pc, #580]	; (8005750 <checkAktifCalisma+0xb58>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d024      	beq.n	800555c <checkAktifCalisma+0x964>
 8005512:	2140      	movs	r1, #64	; 0x40
 8005514:	488d      	ldr	r0, [pc, #564]	; (800574c <checkAktifCalisma+0xb54>)
 8005516:	f003 fedf 	bl	80092d8 <HAL_GPIO_ReadPin>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d007      	beq.n	8005530 <checkAktifCalisma+0x938>
 8005520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005524:	4889      	ldr	r0, [pc, #548]	; (800574c <checkAktifCalisma+0xb54>)
 8005526:	f003 fed7 	bl	80092d8 <HAL_GPIO_ReadPin>
 800552a:	4603      	mov	r3, r0
 800552c:	2b01      	cmp	r3, #1
 800552e:	d115      	bne.n	800555c <checkAktifCalisma+0x964>
 8005530:	4b88      	ldr	r3, [pc, #544]	; (8005754 <checkAktifCalisma+0xb5c>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d011      	beq.n	800555c <checkAktifCalisma+0x964>
 8005538:	4b87      	ldr	r3, [pc, #540]	; (8005758 <checkAktifCalisma+0xb60>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <checkAktifCalisma+0x964>
 8005540:	4b86      	ldr	r3, [pc, #536]	; (800575c <checkAktifCalisma+0xb64>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <checkAktifCalisma+0x964>
			timer2=millis;
 800554e:	4b84      	ldr	r3, [pc, #528]	; (8005760 <checkAktifCalisma+0xb68>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a84      	ldr	r2, [pc, #528]	; (8005764 <checkAktifCalisma+0xb6c>)
 8005554:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005556:	4b81      	ldr	r3, [pc, #516]	; (800575c <checkAktifCalisma+0xb64>)
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800555c:	4b80      	ldr	r3, [pc, #512]	; (8005760 <checkAktifCalisma+0xb68>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b80      	ldr	r3, [pc, #512]	; (8005764 <checkAktifCalisma+0xb6c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	4a80      	ldr	r2, [pc, #512]	; (8005768 <checkAktifCalisma+0xb70>)
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	4293      	cmp	r3, r2
 800556c:	d303      	bcc.n	8005576 <checkAktifCalisma+0x97e>
 800556e:	4b7b      	ldr	r3, [pc, #492]	; (800575c <checkAktifCalisma+0xb64>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <checkAktifCalisma+0x99a>
 8005576:	4b77      	ldr	r3, [pc, #476]	; (8005754 <checkAktifCalisma+0xb5c>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <checkAktifCalisma+0x99a>
 8005584:	4b74      	ldr	r3, [pc, #464]	; (8005758 <checkAktifCalisma+0xb60>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005592:	2200      	movs	r2, #0
 8005594:	2110      	movs	r1, #16
 8005596:	486d      	ldr	r0, [pc, #436]	; (800574c <checkAktifCalisma+0xb54>)
 8005598:	f003 feb5 	bl	8009306 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 800559c:	4b6c      	ldr	r3, [pc, #432]	; (8005750 <checkAktifCalisma+0xb58>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80055a2:	4b6e      	ldr	r3, [pc, #440]	; (800575c <checkAktifCalisma+0xb64>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80055a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055ac:	486f      	ldr	r0, [pc, #444]	; (800576c <checkAktifCalisma+0xb74>)
 80055ae:	f003 fe93 	bl	80092d8 <HAL_GPIO_ReadPin>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d120      	bne.n	80055fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80055b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055bc:	486b      	ldr	r0, [pc, #428]	; (800576c <checkAktifCalisma+0xb74>)
 80055be:	f003 fe8b 	bl	80092d8 <HAL_GPIO_ReadPin>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d118      	bne.n	80055fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80055c8:	2104      	movs	r1, #4
 80055ca:	4868      	ldr	r0, [pc, #416]	; (800576c <checkAktifCalisma+0xb74>)
 80055cc:	f003 fe84 	bl	80092d8 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d111      	bne.n	80055fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80055d6:	2102      	movs	r1, #2
 80055d8:	4864      	ldr	r0, [pc, #400]	; (800576c <checkAktifCalisma+0xb74>)
 80055da:	f003 fe7d 	bl	80092d8 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80055e4:	2101      	movs	r1, #1
 80055e6:	4861      	ldr	r0, [pc, #388]	; (800576c <checkAktifCalisma+0xb74>)
 80055e8:	f003 fe76 	bl	80092d8 <HAL_GPIO_ReadPin>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <checkAktifCalisma+0xa02>
			makineStop=1;
 80055f2:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <checkAktifCalisma+0xb78>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e002      	b.n	8005600 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80055fa:	4b5d      	ldr	r3, [pc, #372]	; (8005770 <checkAktifCalisma+0xb78>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005600:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <checkAktifCalisma+0xb7c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d144      	bne.n	8005692 <checkAktifCalisma+0xa9a>
 8005608:	4b5b      	ldr	r3, [pc, #364]	; (8005778 <checkAktifCalisma+0xb80>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d003      	beq.n	8005618 <checkAktifCalisma+0xa20>
 8005610:	4b59      	ldr	r3, [pc, #356]	; (8005778 <checkAktifCalisma+0xb80>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d13c      	bne.n	8005692 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	484c      	ldr	r0, [pc, #304]	; (800574c <checkAktifCalisma+0xb54>)
 800561c:	f003 fe5c 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <checkAktifCalisma+0xa36>
 8005626:	4b55      	ldr	r3, [pc, #340]	; (800577c <checkAktifCalisma+0xb84>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <checkAktifCalisma+0xa4e>
 800562e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005632:	484e      	ldr	r0, [pc, #312]	; (800576c <checkAktifCalisma+0xb74>)
 8005634:	f003 fe50 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d129      	bne.n	8005692 <checkAktifCalisma+0xa9a>
 800563e:	4b4f      	ldr	r3, [pc, #316]	; (800577c <checkAktifCalisma+0xb84>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d125      	bne.n	8005692 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005646:	2104      	movs	r1, #4
 8005648:	4840      	ldr	r0, [pc, #256]	; (800574c <checkAktifCalisma+0xb54>)
 800564a:	f003 fe45 	bl	80092d8 <HAL_GPIO_ReadPin>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d003      	beq.n	800565c <checkAktifCalisma+0xa64>
 8005654:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <checkAktifCalisma+0xb88>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11a      	bne.n	8005692 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800565c:	2102      	movs	r1, #2
 800565e:	483b      	ldr	r0, [pc, #236]	; (800574c <checkAktifCalisma+0xb54>)
 8005660:	f003 fe3a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d113      	bne.n	8005692 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800566a:	4b46      	ldr	r3, [pc, #280]	; (8005784 <checkAktifCalisma+0xb8c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f083 0301 	eor.w	r3, r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005678:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <checkAktifCalisma+0xb78>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005680:	4b41      	ldr	r3, [pc, #260]	; (8005788 <checkAktifCalisma+0xb90>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <checkAktifCalisma+0xb68>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a40      	ldr	r2, [pc, #256]	; (800578c <checkAktifCalisma+0xb94>)
 800568c:	6013      	str	r3, [r2, #0]
			bekle();
 800568e:	f7ff f935 	bl	80048fc <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005692:	4b33      	ldr	r3, [pc, #204]	; (8005760 <checkAktifCalisma+0xb68>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b3d      	ldr	r3, [pc, #244]	; (800578c <checkAktifCalisma+0xb94>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <checkAktifCalisma+0xb98>)
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d211      	bcs.n	80056c8 <checkAktifCalisma+0xad0>
 80056a4:	2104      	movs	r1, #4
 80056a6:	4829      	ldr	r0, [pc, #164]	; (800574c <checkAktifCalisma+0xb54>)
 80056a8:	f003 fe16 	bl	80092d8 <HAL_GPIO_ReadPin>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <checkAktifCalisma+0xad0>
 80056b2:	4b33      	ldr	r3, [pc, #204]	; (8005780 <checkAktifCalisma+0xb88>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <checkAktifCalisma+0xad0>
 80056ba:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <checkAktifCalisma+0xb78>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f083 0301 	eor.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80056c8:	4b2f      	ldr	r3, [pc, #188]	; (8005788 <checkAktifCalisma+0xb90>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <checkAktifCalisma+0xb7c>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d160      	bne.n	8005798 <checkAktifCalisma+0xba0>
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <checkAktifCalisma+0xb80>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d003      	beq.n	80056e6 <checkAktifCalisma+0xaee>
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <checkAktifCalisma+0xb80>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d158      	bne.n	8005798 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80056e6:	2104      	movs	r1, #4
 80056e8:	4818      	ldr	r0, [pc, #96]	; (800574c <checkAktifCalisma+0xb54>)
 80056ea:	f003 fdf5 	bl	80092d8 <HAL_GPIO_ReadPin>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d003      	beq.n	80056fc <checkAktifCalisma+0xb04>
 80056f4:	4b22      	ldr	r3, [pc, #136]	; (8005780 <checkAktifCalisma+0xb88>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d14d      	bne.n	8005798 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056fc:	2102      	movs	r1, #2
 80056fe:	4813      	ldr	r0, [pc, #76]	; (800574c <checkAktifCalisma+0xb54>)
 8005700:	f003 fdea 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d146      	bne.n	8005798 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800570a:	2180      	movs	r1, #128	; 0x80
 800570c:	480f      	ldr	r0, [pc, #60]	; (800574c <checkAktifCalisma+0xb54>)
 800570e:	f003 fde3 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d103      	bne.n	8005720 <checkAktifCalisma+0xb28>
 8005718:	4b18      	ldr	r3, [pc, #96]	; (800577c <checkAktifCalisma+0xb84>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <checkAktifCalisma+0xb40>
 8005720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005724:	4811      	ldr	r0, [pc, #68]	; (800576c <checkAktifCalisma+0xb74>)
 8005726:	f003 fdd7 	bl	80092d8 <HAL_GPIO_ReadPin>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d133      	bne.n	8005798 <checkAktifCalisma+0xba0>
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <checkAktifCalisma+0xb84>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d12f      	bne.n	8005798 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <checkAktifCalisma+0xb78>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02b      	beq.n	8005798 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005740:	4b14      	ldr	r3, [pc, #80]	; (8005794 <checkAktifCalisma+0xb9c>)
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e02a      	b.n	800579e <checkAktifCalisma+0xba6>
 8005748:	2000026b 	.word	0x2000026b
 800574c:	40011000 	.word	0x40011000
 8005750:	2000026f 	.word	0x2000026f
 8005754:	20000286 	.word	0x20000286
 8005758:	20000287 	.word	0x20000287
 800575c:	20000267 	.word	0x20000267
 8005760:	20000210 	.word	0x20000210
 8005764:	2000021c 	.word	0x2000021c
 8005768:	2000024a 	.word	0x2000024a
 800576c:	40010c00 	.word	0x40010c00
 8005770:	20000276 	.word	0x20000276
 8005774:	2000023d 	.word	0x2000023d
 8005778:	2000023c 	.word	0x2000023c
 800577c:	20000240 	.word	0x20000240
 8005780:	2000023a 	.word	0x2000023a
 8005784:	20000263 	.word	0x20000263
 8005788:	20000277 	.word	0x20000277
 800578c:	20000214 	.word	0x20000214
 8005790:	2000024d 	.word	0x2000024d
 8005794:	20000278 	.word	0x20000278
		} else {
			kapi1butonkontrol=0;
 8005798:	4b8b      	ldr	r3, [pc, #556]	; (80059c8 <checkAktifCalisma+0xdd0>)
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800579e:	4b8b      	ldr	r3, [pc, #556]	; (80059cc <checkAktifCalisma+0xdd4>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d121      	bne.n	80057ea <checkAktifCalisma+0xbf2>
 80057a6:	4b8a      	ldr	r3, [pc, #552]	; (80059d0 <checkAktifCalisma+0xdd8>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d003      	beq.n	80057b6 <checkAktifCalisma+0xbbe>
 80057ae:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <checkAktifCalisma+0xdd8>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d119      	bne.n	80057ea <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057b6:	2104      	movs	r1, #4
 80057b8:	4886      	ldr	r0, [pc, #536]	; (80059d4 <checkAktifCalisma+0xddc>)
 80057ba:	f003 fd8d 	bl	80092d8 <HAL_GPIO_ReadPin>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d003      	beq.n	80057cc <checkAktifCalisma+0xbd4>
 80057c4:	4b84      	ldr	r3, [pc, #528]	; (80059d8 <checkAktifCalisma+0xde0>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10e      	bne.n	80057ea <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057cc:	2102      	movs	r1, #2
 80057ce:	4881      	ldr	r0, [pc, #516]	; (80059d4 <checkAktifCalisma+0xddc>)
 80057d0:	f003 fd82 	bl	80092d8 <HAL_GPIO_ReadPin>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d107      	bne.n	80057ea <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80057da:	4b80      	ldr	r3, [pc, #512]	; (80059dc <checkAktifCalisma+0xde4>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80057e2:	4b7f      	ldr	r3, [pc, #508]	; (80059e0 <checkAktifCalisma+0xde8>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e002      	b.n	80057f0 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80057ea:	4b7d      	ldr	r3, [pc, #500]	; (80059e0 <checkAktifCalisma+0xde8>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80057f0:	4b75      	ldr	r3, [pc, #468]	; (80059c8 <checkAktifCalisma+0xdd0>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d107      	bne.n	8005808 <checkAktifCalisma+0xc10>
 80057f8:	4b79      	ldr	r3, [pc, #484]	; (80059e0 <checkAktifCalisma+0xde8>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <checkAktifCalisma+0xc10>
 8005800:	4b78      	ldr	r3, [pc, #480]	; (80059e4 <checkAktifCalisma+0xdec>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005808:	2201      	movs	r2, #1
 800580a:	2180      	movs	r1, #128	; 0x80
 800580c:	4876      	ldr	r0, [pc, #472]	; (80059e8 <checkAktifCalisma+0xdf0>)
 800580e:	f003 fd7a 	bl	8009306 <HAL_GPIO_WritePin>
 8005812:	e004      	b.n	800581e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005814:	2200      	movs	r2, #0
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	4873      	ldr	r0, [pc, #460]	; (80059e8 <checkAktifCalisma+0xdf0>)
 800581a:	f003 fd74 	bl	8009306 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800581e:	4b73      	ldr	r3, [pc, #460]	; (80059ec <checkAktifCalisma+0xdf4>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d141      	bne.n	80058aa <checkAktifCalisma+0xcb2>
 8005826:	4b6a      	ldr	r3, [pc, #424]	; (80059d0 <checkAktifCalisma+0xdd8>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d003      	beq.n	8005836 <checkAktifCalisma+0xc3e>
 800582e:	4b68      	ldr	r3, [pc, #416]	; (80059d0 <checkAktifCalisma+0xdd8>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d139      	bne.n	80058aa <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800583a:	4866      	ldr	r0, [pc, #408]	; (80059d4 <checkAktifCalisma+0xddc>)
 800583c:	f003 fd4c 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <checkAktifCalisma+0xc56>
 8005846:	4b6a      	ldr	r3, [pc, #424]	; (80059f0 <checkAktifCalisma+0xdf8>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <checkAktifCalisma+0xc6e>
 800584e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005852:	4868      	ldr	r0, [pc, #416]	; (80059f4 <checkAktifCalisma+0xdfc>)
 8005854:	f003 fd40 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d125      	bne.n	80058aa <checkAktifCalisma+0xcb2>
 800585e:	4b64      	ldr	r3, [pc, #400]	; (80059f0 <checkAktifCalisma+0xdf8>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d121      	bne.n	80058aa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005866:	2102      	movs	r1, #2
 8005868:	485a      	ldr	r0, [pc, #360]	; (80059d4 <checkAktifCalisma+0xddc>)
 800586a:	f003 fd35 	bl	80092d8 <HAL_GPIO_ReadPin>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d11a      	bne.n	80058aa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005874:	2104      	movs	r1, #4
 8005876:	4857      	ldr	r0, [pc, #348]	; (80059d4 <checkAktifCalisma+0xddc>)
 8005878:	f003 fd2e 	bl	80092d8 <HAL_GPIO_ReadPin>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d113      	bne.n	80058aa <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005882:	4b56      	ldr	r3, [pc, #344]	; (80059dc <checkAktifCalisma+0xde4>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00f      	beq.n	80058aa <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800588a:	4b5b      	ldr	r3, [pc, #364]	; (80059f8 <checkAktifCalisma+0xe00>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f083 0301 	eor.w	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005898:	4b58      	ldr	r3, [pc, #352]	; (80059fc <checkAktifCalisma+0xe04>)
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800589e:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <checkAktifCalisma+0xe08>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <checkAktifCalisma+0xe0c>)
 80058a4:	6013      	str	r3, [r2, #0]
			bekle();
 80058a6:	f7ff f829 	bl	80048fc <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80058aa:	4b55      	ldr	r3, [pc, #340]	; (8005a00 <checkAktifCalisma+0xe08>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b55      	ldr	r3, [pc, #340]	; (8005a04 <checkAktifCalisma+0xe0c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	4a54      	ldr	r2, [pc, #336]	; (8005a08 <checkAktifCalisma+0xe10>)
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d20d      	bcs.n	80058d8 <checkAktifCalisma+0xce0>
 80058bc:	2102      	movs	r1, #2
 80058be:	4845      	ldr	r0, [pc, #276]	; (80059d4 <checkAktifCalisma+0xddc>)
 80058c0:	f003 fd0a 	bl	80092d8 <HAL_GPIO_ReadPin>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d006      	beq.n	80058d8 <checkAktifCalisma+0xce0>
 80058ca:	4b44      	ldr	r3, [pc, #272]	; (80059dc <checkAktifCalisma+0xde4>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f083 0301 	eor.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80058d8:	4b48      	ldr	r3, [pc, #288]	; (80059fc <checkAktifCalisma+0xe04>)
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058de:	4b43      	ldr	r3, [pc, #268]	; (80059ec <checkAktifCalisma+0xdf4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d135      	bne.n	8005952 <checkAktifCalisma+0xd5a>
 80058e6:	4b3a      	ldr	r3, [pc, #232]	; (80059d0 <checkAktifCalisma+0xdd8>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d003      	beq.n	80058f6 <checkAktifCalisma+0xcfe>
 80058ee:	4b38      	ldr	r3, [pc, #224]	; (80059d0 <checkAktifCalisma+0xdd8>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d12d      	bne.n	8005952 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058fa:	4836      	ldr	r0, [pc, #216]	; (80059d4 <checkAktifCalisma+0xddc>)
 80058fc:	f003 fcec 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <checkAktifCalisma+0xd16>
 8005906:	4b3a      	ldr	r3, [pc, #232]	; (80059f0 <checkAktifCalisma+0xdf8>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <checkAktifCalisma+0xd2e>
 800590e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005912:	4838      	ldr	r0, [pc, #224]	; (80059f4 <checkAktifCalisma+0xdfc>)
 8005914:	f003 fce0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d119      	bne.n	8005952 <checkAktifCalisma+0xd5a>
 800591e:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <checkAktifCalisma+0xdf8>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d115      	bne.n	8005952 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005926:	2102      	movs	r1, #2
 8005928:	482a      	ldr	r0, [pc, #168]	; (80059d4 <checkAktifCalisma+0xddc>)
 800592a:	f003 fcd5 	bl	80092d8 <HAL_GPIO_ReadPin>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d10e      	bne.n	8005952 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005934:	2104      	movs	r1, #4
 8005936:	4827      	ldr	r0, [pc, #156]	; (80059d4 <checkAktifCalisma+0xddc>)
 8005938:	f003 fcce 	bl	80092d8 <HAL_GPIO_ReadPin>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005942:	4b26      	ldr	r3, [pc, #152]	; (80059dc <checkAktifCalisma+0xde4>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800594a:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <checkAktifCalisma+0xe14>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e002      	b.n	8005958 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005952:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <checkAktifCalisma+0xe14>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005958:	4b24      	ldr	r3, [pc, #144]	; (80059ec <checkAktifCalisma+0xdf4>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d11d      	bne.n	800599c <checkAktifCalisma+0xda4>
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <checkAktifCalisma+0xdd8>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d003      	beq.n	8005970 <checkAktifCalisma+0xd78>
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <checkAktifCalisma+0xdd8>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d115      	bne.n	800599c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005970:	2102      	movs	r1, #2
 8005972:	4818      	ldr	r0, [pc, #96]	; (80059d4 <checkAktifCalisma+0xddc>)
 8005974:	f003 fcb0 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10e      	bne.n	800599c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800597e:	2104      	movs	r1, #4
 8005980:	4814      	ldr	r0, [pc, #80]	; (80059d4 <checkAktifCalisma+0xddc>)
 8005982:	f003 fca9 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <checkAktifCalisma+0xde4>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005994:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <checkAktifCalisma+0xe18>)
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e002      	b.n	80059a2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 800599c:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <checkAktifCalisma+0xe18>)
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80059a2:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <checkAktifCalisma+0xe14>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <checkAktifCalisma+0xdc2>
 80059aa:	4b19      	ldr	r3, [pc, #100]	; (8005a10 <checkAktifCalisma+0xe18>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <checkAktifCalisma+0xdc2>
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <checkAktifCalisma+0xe04>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02c      	beq.n	8005a14 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059ba:	2201      	movs	r2, #1
 80059bc:	2140      	movs	r1, #64	; 0x40
 80059be:	480a      	ldr	r0, [pc, #40]	; (80059e8 <checkAktifCalisma+0xdf0>)
 80059c0:	f003 fca1 	bl	8009306 <HAL_GPIO_WritePin>
 80059c4:	e02b      	b.n	8005a1e <checkAktifCalisma+0xe26>
 80059c6:	bf00      	nop
 80059c8:	20000278 	.word	0x20000278
 80059cc:	2000023d 	.word	0x2000023d
 80059d0:	2000023c 	.word	0x2000023c
 80059d4:	40011000 	.word	0x40011000
 80059d8:	2000023a 	.word	0x2000023a
 80059dc:	20000276 	.word	0x20000276
 80059e0:	20000279 	.word	0x20000279
 80059e4:	20000277 	.word	0x20000277
 80059e8:	40010800 	.word	0x40010800
 80059ec:	2000023e 	.word	0x2000023e
 80059f0:	20000240 	.word	0x20000240
 80059f4:	40010c00 	.word	0x40010c00
 80059f8:	20000263 	.word	0x20000263
 80059fc:	2000027a 	.word	0x2000027a
 8005a00:	20000210 	.word	0x20000210
 8005a04:	20000214 	.word	0x20000214
 8005a08:	2000024e 	.word	0x2000024e
 8005a0c:	2000027b 	.word	0x2000027b
 8005a10:	2000027c 	.word	0x2000027c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a14:	2200      	movs	r2, #0
 8005a16:	2140      	movs	r1, #64	; 0x40
 8005a18:	488d      	ldr	r0, [pc, #564]	; (8005c50 <checkAktifCalisma+0x1058>)
 8005a1a:	f003 fc74 	bl	8009306 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <checkAktifCalisma+0x105c>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <checkAktifCalisma+0xe36>
 8005a26:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <checkAktifCalisma+0x105c>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d115      	bne.n	8005a5a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4889      	ldr	r0, [pc, #548]	; (8005c58 <checkAktifCalisma+0x1060>)
 8005a32:	f003 fc51 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d003      	beq.n	8005a44 <checkAktifCalisma+0xe4c>
 8005a3c:	4b87      	ldr	r3, [pc, #540]	; (8005c5c <checkAktifCalisma+0x1064>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a44:	2102      	movs	r1, #2
 8005a46:	4884      	ldr	r0, [pc, #528]	; (8005c58 <checkAktifCalisma+0x1060>)
 8005a48:	f003 fc46 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005a52:	4b83      	ldr	r3, [pc, #524]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e002      	b.n	8005a60 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005a5a:	4b81      	ldr	r3, [pc, #516]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005a60:	4b7c      	ldr	r3, [pc, #496]	; (8005c54 <checkAktifCalisma+0x105c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d003      	beq.n	8005a70 <checkAktifCalisma+0xe78>
 8005a68:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <checkAktifCalisma+0x105c>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d111      	bne.n	8005a94 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a70:	2102      	movs	r1, #2
 8005a72:	4879      	ldr	r0, [pc, #484]	; (8005c58 <checkAktifCalisma+0x1060>)
 8005a74:	f003 fc30 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d10a      	bne.n	8005a94 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4875      	ldr	r0, [pc, #468]	; (8005c58 <checkAktifCalisma+0x1060>)
 8005a82:	f003 fc29 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005a8c:	4b75      	ldr	r3, [pc, #468]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e002      	b.n	8005a9a <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005a94:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005a9a:	4b71      	ldr	r3, [pc, #452]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005aa2:	4b71      	ldr	r3, [pc, #452]	; (8005c68 <checkAktifCalisma+0x1070>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10b      	bne.n	8005ac2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aae:	486f      	ldr	r0, [pc, #444]	; (8005c6c <checkAktifCalisma+0x1074>)
 8005ab0:	f003 fc12 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005aba:	4b6d      	ldr	r3, [pc, #436]	; (8005c70 <checkAktifCalisma+0x1078>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	e002      	b.n	8005ac8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005ac2:	4b6b      	ldr	r3, [pc, #428]	; (8005c70 <checkAktifCalisma+0x1078>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005ac8:	4b66      	ldr	r3, [pc, #408]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00f      	beq.n	8005af0 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005ad0:	4b65      	ldr	r3, [pc, #404]	; (8005c68 <checkAktifCalisma+0x1070>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10b      	bne.n	8005af0 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005adc:	4863      	ldr	r0, [pc, #396]	; (8005c6c <checkAktifCalisma+0x1074>)
 8005ade:	f003 fbfb 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ae8:	4b62      	ldr	r3, [pc, #392]	; (8005c74 <checkAktifCalisma+0x107c>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005af0:	4b60      	ldr	r3, [pc, #384]	; (8005c74 <checkAktifCalisma+0x107c>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005af6:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <checkAktifCalisma+0x1080>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d137      	bne.n	8005b6e <checkAktifCalisma+0xf76>
 8005afe:	4b5f      	ldr	r3, [pc, #380]	; (8005c7c <checkAktifCalisma+0x1084>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d003      	beq.n	8005b0e <checkAktifCalisma+0xf16>
 8005b06:	4b5d      	ldr	r3, [pc, #372]	; (8005c7c <checkAktifCalisma+0x1084>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d12f      	bne.n	8005b6e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b0e:	4b54      	ldr	r3, [pc, #336]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <checkAktifCalisma+0xf26>
 8005b16:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d027      	beq.n	8005b6e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b22:	484d      	ldr	r0, [pc, #308]	; (8005c58 <checkAktifCalisma+0x1060>)
 8005b24:	f003 fbd8 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <checkAktifCalisma+0xf3e>
 8005b2e:	4b4e      	ldr	r3, [pc, #312]	; (8005c68 <checkAktifCalisma+0x1070>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b36:	4b4e      	ldr	r3, [pc, #312]	; (8005c70 <checkAktifCalisma+0x1078>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <checkAktifCalisma+0xf4e>
 8005b3e:	4b4d      	ldr	r3, [pc, #308]	; (8005c74 <checkAktifCalisma+0x107c>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d013      	beq.n	8005b6e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b46:	4b4e      	ldr	r3, [pc, #312]	; (8005c80 <checkAktifCalisma+0x1088>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00f      	beq.n	8005b6e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005b4e:	4b4d      	ldr	r3, [pc, #308]	; (8005c84 <checkAktifCalisma+0x108c>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f083 0301 	eor.w	r3, r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005b5c:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <checkAktifCalisma+0x1090>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b62:	4b4a      	ldr	r3, [pc, #296]	; (8005c8c <checkAktifCalisma+0x1094>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a4a      	ldr	r2, [pc, #296]	; (8005c90 <checkAktifCalisma+0x1098>)
 8005b68:	6013      	str	r3, [r2, #0]
			bekle();
 8005b6a:	f7fe fec7 	bl	80048fc <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <checkAktifCalisma+0x1094>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <checkAktifCalisma+0x1098>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	4a46      	ldr	r2, [pc, #280]	; (8005c94 <checkAktifCalisma+0x109c>)
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d214      	bcs.n	8005baa <checkAktifCalisma+0xfb2>
 8005b80:	4b37      	ldr	r3, [pc, #220]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f083 0301 	eor.w	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d006      	beq.n	8005b9c <checkAktifCalisma+0xfa4>
 8005b8e:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f083 0301 	eor.w	r3, r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <checkAktifCalisma+0xfb2>
 8005b9c:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <checkAktifCalisma+0x1088>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f083 0301 	eor.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005baa:	4b37      	ldr	r3, [pc, #220]	; (8005c88 <checkAktifCalisma+0x1090>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bb0:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <checkAktifCalisma+0x1080>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d12b      	bne.n	8005c10 <checkAktifCalisma+0x1018>
 8005bb8:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <checkAktifCalisma+0x1084>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d003      	beq.n	8005bc8 <checkAktifCalisma+0xfd0>
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <checkAktifCalisma+0x1084>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d123      	bne.n	8005c10 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d103      	bne.n	8005bd8 <checkAktifCalisma+0xfe0>
 8005bd0:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bdc:	481e      	ldr	r0, [pc, #120]	; (8005c58 <checkAktifCalisma+0x1060>)
 8005bde:	f003 fb7b 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <checkAktifCalisma+0xff8>
 8005be8:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <checkAktifCalisma+0x1070>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	; (8005c70 <checkAktifCalisma+0x1078>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d103      	bne.n	8005c00 <checkAktifCalisma+0x1008>
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <checkAktifCalisma+0x107c>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <checkAktifCalisma+0x1088>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005c08:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <checkAktifCalisma+0x10a0>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005c10:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <checkAktifCalisma+0x10a0>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <checkAktifCalisma+0x1080>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d140      	bne.n	8005ca0 <checkAktifCalisma+0x10a8>
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <checkAktifCalisma+0x1084>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d003      	beq.n	8005c2e <checkAktifCalisma+0x1036>
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <checkAktifCalisma+0x1084>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d138      	bne.n	8005ca0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <checkAktifCalisma+0x1068>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <checkAktifCalisma+0x1046>
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <checkAktifCalisma+0x106c>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d030      	beq.n	8005ca0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <checkAktifCalisma+0x1088>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d02c      	beq.n	8005ca0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c46:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <checkAktifCalisma+0x10a4>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e02b      	b.n	8005ca6 <checkAktifCalisma+0x10ae>
 8005c4e:	bf00      	nop
 8005c50:	40010800 	.word	0x40010800
 8005c54:	20000241 	.word	0x20000241
 8005c58:	40011000 	.word	0x40011000
 8005c5c:	2000023a 	.word	0x2000023a
 8005c60:	20000280 	.word	0x20000280
 8005c64:	20000281 	.word	0x20000281
 8005c68:	20000240 	.word	0x20000240
 8005c6c:	40010c00 	.word	0x40010c00
 8005c70:	20000290 	.word	0x20000290
 8005c74:	20000291 	.word	0x20000291
 8005c78:	2000023f 	.word	0x2000023f
 8005c7c:	2000023c 	.word	0x2000023c
 8005c80:	20000276 	.word	0x20000276
 8005c84:	20000263 	.word	0x20000263
 8005c88:	2000027d 	.word	0x2000027d
 8005c8c:	20000210 	.word	0x20000210
 8005c90:	20000214 	.word	0x20000214
 8005c94:	2000024f 	.word	0x2000024f
 8005c98:	2000027e 	.word	0x2000027e
 8005c9c:	2000027f 	.word	0x2000027f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ca0:	4b8b      	ldr	r3, [pc, #556]	; (8005ed0 <checkAktifCalisma+0x12d8>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ca6:	4b8b      	ldr	r3, [pc, #556]	; (8005ed4 <checkAktifCalisma+0x12dc>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d107      	bne.n	8005cbe <checkAktifCalisma+0x10c6>
 8005cae:	4b8a      	ldr	r3, [pc, #552]	; (8005ed8 <checkAktifCalisma+0x12e0>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <checkAktifCalisma+0x10c6>
 8005cb6:	4b86      	ldr	r3, [pc, #536]	; (8005ed0 <checkAktifCalisma+0x12d8>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	4886      	ldr	r0, [pc, #536]	; (8005edc <checkAktifCalisma+0x12e4>)
 8005cc4:	f003 fb1f 	bl	8009306 <HAL_GPIO_WritePin>
 8005cc8:	e004      	b.n	8005cd4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2120      	movs	r1, #32
 8005cce:	4883      	ldr	r0, [pc, #524]	; (8005edc <checkAktifCalisma+0x12e4>)
 8005cd0:	f003 fb19 	bl	8009306 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005cd4:	4b82      	ldr	r3, [pc, #520]	; (8005ee0 <checkAktifCalisma+0x12e8>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00e      	beq.n	8005cfa <checkAktifCalisma+0x1102>
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4881      	ldr	r0, [pc, #516]	; (8005ee4 <checkAktifCalisma+0x12ec>)
 8005ce0:	f003 fafa 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d107      	bne.n	8005cfa <checkAktifCalisma+0x1102>
 8005cea:	4b7f      	ldr	r3, [pc, #508]	; (8005ee8 <checkAktifCalisma+0x12f0>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <checkAktifCalisma+0x1102>
 8005cf2:	4b7e      	ldr	r3, [pc, #504]	; (8005eec <checkAktifCalisma+0x12f4>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d112      	bne.n	8005d20 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005cfa:	4b7d      	ldr	r3, [pc, #500]	; (8005ef0 <checkAktifCalisma+0x12f8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d066      	beq.n	8005dd0 <checkAktifCalisma+0x11d8>
 8005d02:	2104      	movs	r1, #4
 8005d04:	4877      	ldr	r0, [pc, #476]	; (8005ee4 <checkAktifCalisma+0x12ec>)
 8005d06:	f003 fae7 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d15f      	bne.n	8005dd0 <checkAktifCalisma+0x11d8>
 8005d10:	4b75      	ldr	r3, [pc, #468]	; (8005ee8 <checkAktifCalisma+0x12f0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05b      	beq.n	8005dd0 <checkAktifCalisma+0x11d8>
 8005d18:	4b74      	ldr	r3, [pc, #464]	; (8005eec <checkAktifCalisma+0x12f4>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d057      	beq.n	8005dd0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005d20:	4b74      	ldr	r3, [pc, #464]	; (8005ef4 <checkAktifCalisma+0x12fc>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b72      	ldr	r3, [pc, #456]	; (8005ef4 <checkAktifCalisma+0x12fc>)
 8005d2a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d2c:	4b71      	ldr	r3, [pc, #452]	; (8005ef4 <checkAktifCalisma+0x12fc>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	d908      	bls.n	8005d46 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d34:	4b6f      	ldr	r3, [pc, #444]	; (8005ef4 <checkAktifCalisma+0x12fc>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d3a:	4b6f      	ldr	r3, [pc, #444]	; (8005ef8 <checkAktifCalisma+0x1300>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4b6d      	ldr	r3, [pc, #436]	; (8005ef8 <checkAktifCalisma+0x1300>)
 8005d44:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d46:	4b6c      	ldr	r3, [pc, #432]	; (8005ef8 <checkAktifCalisma+0x1300>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d908      	bls.n	8005d60 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005d4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ef8 <checkAktifCalisma+0x1300>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005d54:	4b69      	ldr	r3, [pc, #420]	; (8005efc <checkAktifCalisma+0x1304>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b67      	ldr	r3, [pc, #412]	; (8005efc <checkAktifCalisma+0x1304>)
 8005d5e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005d60:	4b66      	ldr	r3, [pc, #408]	; (8005efc <checkAktifCalisma+0x1304>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b09      	cmp	r3, #9
 8005d66:	d908      	bls.n	8005d7a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005d68:	4b64      	ldr	r3, [pc, #400]	; (8005efc <checkAktifCalisma+0x1304>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005d6e:	4b64      	ldr	r3, [pc, #400]	; (8005f00 <checkAktifCalisma+0x1308>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4b62      	ldr	r3, [pc, #392]	; (8005f00 <checkAktifCalisma+0x1308>)
 8005d78:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005d7a:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <checkAktifCalisma+0x1308>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d908      	bls.n	8005d94 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005d82:	4b5f      	ldr	r3, [pc, #380]	; (8005f00 <checkAktifCalisma+0x1308>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005d88:	4b5e      	ldr	r3, [pc, #376]	; (8005f04 <checkAktifCalisma+0x130c>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	4b5c      	ldr	r3, [pc, #368]	; (8005f04 <checkAktifCalisma+0x130c>)
 8005d92:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005d94:	4b5b      	ldr	r3, [pc, #364]	; (8005f04 <checkAktifCalisma+0x130c>)
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	4b5b      	ldr	r3, [pc, #364]	; (8005f08 <checkAktifCalisma+0x1310>)
 8005d9a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005d9e:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <checkAktifCalisma+0x1308>)
 8005da0:	781a      	ldrb	r2, [r3, #0]
 8005da2:	4b59      	ldr	r3, [pc, #356]	; (8005f08 <checkAktifCalisma+0x1310>)
 8005da4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005da6:	4b55      	ldr	r3, [pc, #340]	; (8005efc <checkAktifCalisma+0x1304>)
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	4b57      	ldr	r3, [pc, #348]	; (8005f08 <checkAktifCalisma+0x1310>)
 8005dac:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005dae:	4b52      	ldr	r3, [pc, #328]	; (8005ef8 <checkAktifCalisma+0x1300>)
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	4b55      	ldr	r3, [pc, #340]	; (8005f08 <checkAktifCalisma+0x1310>)
 8005db4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005db6:	4b4f      	ldr	r3, [pc, #316]	; (8005ef4 <checkAktifCalisma+0x12fc>)
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	4b53      	ldr	r3, [pc, #332]	; (8005f08 <checkAktifCalisma+0x1310>)
 8005dbc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005dbe:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <checkAktifCalisma+0x1314>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005dc4:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <checkAktifCalisma+0x12e8>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005dca:	4b49      	ldr	r3, [pc, #292]	; (8005ef0 <checkAktifCalisma+0x12f8>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dd4:	484e      	ldr	r0, [pc, #312]	; (8005f10 <checkAktifCalisma+0x1318>)
 8005dd6:	f003 fa7f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d016      	beq.n	8005e0e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005de4:	484a      	ldr	r0, [pc, #296]	; (8005f10 <checkAktifCalisma+0x1318>)
 8005de6:	f003 fa77 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00e      	beq.n	8005e0e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df4:	4846      	ldr	r0, [pc, #280]	; (8005f10 <checkAktifCalisma+0x1318>)
 8005df6:	f003 fa6f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e00:	2140      	movs	r1, #64	; 0x40
 8005e02:	4838      	ldr	r0, [pc, #224]	; (8005ee4 <checkAktifCalisma+0x12ec>)
 8005e04:	f003 fa68 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005e0e:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <checkAktifCalisma+0x131c>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e002      	b.n	8005e1c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005e16:	4b3f      	ldr	r3, [pc, #252]	; (8005f14 <checkAktifCalisma+0x131c>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005e1c:	4b3d      	ldr	r3, [pc, #244]	; (8005f14 <checkAktifCalisma+0x131c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d016      	beq.n	8005e52 <checkAktifCalisma+0x125a>
 8005e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e28:	4839      	ldr	r0, [pc, #228]	; (8005f10 <checkAktifCalisma+0x1318>)
 8005e2a:	f003 fa55 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10e      	bne.n	8005e52 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e34:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <checkAktifCalisma+0x1320>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	f7fa fe4a 	bl	8000ad4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e40:	2001      	movs	r0, #1
 8005e42:	f7fa fded 	bl	8000a20 <hata2EEPROM>
			convertAndSendData();
 8005e46:	f001 fc73 	bl	8007730 <convertAndSendData>
			acilstophatasi=1;
 8005e4a:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <checkAktifCalisma+0x1324>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e018      	b.n	8005e84 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005e52:	4b32      	ldr	r3, [pc, #200]	; (8005f1c <checkAktifCalisma+0x1324>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d014      	beq.n	8005e84 <checkAktifCalisma+0x128c>
 8005e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e5e:	482c      	ldr	r0, [pc, #176]	; (8005f10 <checkAktifCalisma+0x1318>)
 8005e60:	f003 fa3a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10c      	bne.n	8005e84 <checkAktifCalisma+0x128c>
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	; (8005f14 <checkAktifCalisma+0x131c>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f083 0301 	eor.w	r3, r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <checkAktifCalisma+0x1324>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f7fe fce8 	bl	8004854 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005e84:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <checkAktifCalisma+0x1328>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f083 0301 	eor.w	r3, r3, #1
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04e      	beq.n	8005f30 <checkAktifCalisma+0x1338>
 8005e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e96:	481e      	ldr	r0, [pc, #120]	; (8005f10 <checkAktifCalisma+0x1318>)
 8005e98:	f003 fa1e 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <checkAktifCalisma+0x12b2>
 8005ea2:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <checkAktifCalisma+0x132c>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d042      	beq.n	8005f30 <checkAktifCalisma+0x1338>
 8005eaa:	4b1f      	ldr	r3, [pc, #124]	; (8005f28 <checkAktifCalisma+0x1330>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d13e      	bne.n	8005f30 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005eb2:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <checkAktifCalisma+0x1320>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f7fa fe0b 	bl	8000ad4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005ebe:	2002      	movs	r0, #2
 8005ec0:	f7fa fdae 	bl	8000a20 <hata2EEPROM>
			convertAndSendData();
 8005ec4:	f001 fc34 	bl	8007730 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005ec8:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <checkAktifCalisma+0x1334>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e047      	b.n	8005f60 <checkAktifCalisma+0x1368>
 8005ed0:	2000027f 	.word	0x2000027f
 8005ed4:	2000027e 	.word	0x2000027e
 8005ed8:	2000027d 	.word	0x2000027d
 8005edc:	40010800 	.word	0x40010800
 8005ee0:	20000273 	.word	0x20000273
 8005ee4:	40011000 	.word	0x40011000
 8005ee8:	2000023a 	.word	0x2000023a
 8005eec:	20000276 	.word	0x20000276
 8005ef0:	20000274 	.word	0x20000274
 8005ef4:	20000231 	.word	0x20000231
 8005ef8:	20000232 	.word	0x20000232
 8005efc:	20000000 	.word	0x20000000
 8005f00:	20000001 	.word	0x20000001
 8005f04:	20000233 	.word	0x20000233
 8005f08:	2000012c 	.word	0x2000012c
 8005f0c:	20000260 	.word	0x20000260
 8005f10:	40010c00 	.word	0x40010c00
 8005f14:	20000282 	.word	0x20000282
 8005f18:	20000289 	.word	0x20000289
 8005f1c:	20000284 	.word	0x20000284
 8005f20:	2000028b 	.word	0x2000028b
 8005f24:	20000295 	.word	0x20000295
 8005f28:	20000238 	.word	0x20000238
 8005f2c:	20000285 	.word	0x20000285
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f30:	4b9b      	ldr	r3, [pc, #620]	; (80061a0 <checkAktifCalisma+0x15a8>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <checkAktifCalisma+0x1368>
 8005f38:	4b9a      	ldr	r3, [pc, #616]	; (80061a4 <checkAktifCalisma+0x15ac>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00f      	beq.n	8005f60 <checkAktifCalisma+0x1368>
 8005f40:	4b99      	ldr	r3, [pc, #612]	; (80061a8 <checkAktifCalisma+0x15b0>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f083 0301 	eor.w	r3, r3, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005f4e:	4b94      	ldr	r3, [pc, #592]	; (80061a0 <checkAktifCalisma+0x15a8>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005f54:	4b95      	ldr	r3, [pc, #596]	; (80061ac <checkAktifCalisma+0x15b4>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005f5a:	2002      	movs	r0, #2
 8005f5c:	f7fe fc7a 	bl	8004854 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005f60:	4b93      	ldr	r3, [pc, #588]	; (80061b0 <checkAktifCalisma+0x15b8>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11e      	bne.n	8005fa6 <checkAktifCalisma+0x13ae>
 8005f68:	4b92      	ldr	r3, [pc, #584]	; (80061b4 <checkAktifCalisma+0x15bc>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d11a      	bne.n	8005fa6 <checkAktifCalisma+0x13ae>
 8005f70:	4b91      	ldr	r3, [pc, #580]	; (80061b8 <checkAktifCalisma+0x15c0>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d016      	beq.n	8005fa6 <checkAktifCalisma+0x13ae>
 8005f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f7c:	488f      	ldr	r0, [pc, #572]	; (80061bc <checkAktifCalisma+0x15c4>)
 8005f7e:	f003 f9ab 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10e      	bne.n	8005fa6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005f88:	4b8d      	ldr	r3, [pc, #564]	; (80061c0 <checkAktifCalisma+0x15c8>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005f8e:	2003      	movs	r0, #3
 8005f90:	f7fa fda0 	bl	8000ad4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005f94:	2003      	movs	r0, #3
 8005f96:	f7fa fd43 	bl	8000a20 <hata2EEPROM>
			convertAndSendData();
 8005f9a:	f001 fbc9 	bl	8007730 <convertAndSendData>
			basinchatasi=1;
 8005f9e:	4b89      	ldr	r3, [pc, #548]	; (80061c4 <checkAktifCalisma+0x15cc>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	e015      	b.n	8005fd2 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005fa6:	4b87      	ldr	r3, [pc, #540]	; (80061c4 <checkAktifCalisma+0x15cc>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d011      	beq.n	8005fd2 <checkAktifCalisma+0x13da>
 8005fae:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <checkAktifCalisma+0x15b8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10d      	bne.n	8005fd2 <checkAktifCalisma+0x13da>
 8005fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fba:	4883      	ldr	r0, [pc, #524]	; (80061c8 <checkAktifCalisma+0x15d0>)
 8005fbc:	f003 f98c 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d105      	bne.n	8005fd2 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005fc6:	4b7f      	ldr	r3, [pc, #508]	; (80061c4 <checkAktifCalisma+0x15cc>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f7fe fc41 	bl	8004854 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005fd2:	4b7e      	ldr	r3, [pc, #504]	; (80061cc <checkAktifCalisma+0x15d4>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d103      	bne.n	8005fe2 <checkAktifCalisma+0x13ea>
 8005fda:	4b7d      	ldr	r3, [pc, #500]	; (80061d0 <checkAktifCalisma+0x15d8>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01e      	beq.n	8006020 <checkAktifCalisma+0x1428>
 8005fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fe6:	487b      	ldr	r0, [pc, #492]	; (80061d4 <checkAktifCalisma+0x15dc>)
 8005fe8:	f003 f976 	bl	80092d8 <HAL_GPIO_ReadPin>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d116      	bne.n	8006020 <checkAktifCalisma+0x1428>
 8005ff2:	4b79      	ldr	r3, [pc, #484]	; (80061d8 <checkAktifCalisma+0x15e0>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d003      	beq.n	8006002 <checkAktifCalisma+0x140a>
 8005ffa:	4b77      	ldr	r3, [pc, #476]	; (80061d8 <checkAktifCalisma+0x15e0>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d10e      	bne.n	8006020 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006002:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <checkAktifCalisma+0x15c8>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006008:	2004      	movs	r0, #4
 800600a:	f7fa fd63 	bl	8000ad4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800600e:	2004      	movs	r0, #4
 8006010:	f7fa fd06 	bl	8000a20 <hata2EEPROM>
			convertAndSendData();
 8006014:	f001 fb8c 	bl	8007730 <convertAndSendData>
			katkapisivicihatasi=1;
 8006018:	4b70      	ldr	r3, [pc, #448]	; (80061dc <checkAktifCalisma+0x15e4>)
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e01f      	b.n	8006060 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006020:	4b6e      	ldr	r3, [pc, #440]	; (80061dc <checkAktifCalisma+0x15e4>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <checkAktifCalisma+0x1468>
 8006028:	4b6d      	ldr	r3, [pc, #436]	; (80061e0 <checkAktifCalisma+0x15e8>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d017      	beq.n	8006060 <checkAktifCalisma+0x1468>
 8006030:	4b66      	ldr	r3, [pc, #408]	; (80061cc <checkAktifCalisma+0x15d4>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f083 0301 	eor.w	r3, r3, #1
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d010      	beq.n	8006060 <checkAktifCalisma+0x1468>
 800603e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006042:	4864      	ldr	r0, [pc, #400]	; (80061d4 <checkAktifCalisma+0x15dc>)
 8006044:	f003 f948 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d108      	bne.n	8006060 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800604e:	4b63      	ldr	r3, [pc, #396]	; (80061dc <checkAktifCalisma+0x15e4>)
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006054:	4b5e      	ldr	r3, [pc, #376]	; (80061d0 <checkAktifCalisma+0x15d8>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800605a:	2004      	movs	r0, #4
 800605c:	f7fe fbfa 	bl	8004854 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006060:	4b5a      	ldr	r3, [pc, #360]	; (80061cc <checkAktifCalisma+0x15d4>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <checkAktifCalisma+0x1478>
 8006068:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <checkAktifCalisma+0x15ec>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01e      	beq.n	80060ae <checkAktifCalisma+0x14b6>
 8006070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006074:	4857      	ldr	r0, [pc, #348]	; (80061d4 <checkAktifCalisma+0x15dc>)
 8006076:	f003 f92f 	bl	80092d8 <HAL_GPIO_ReadPin>
 800607a:	4603      	mov	r3, r0
 800607c:	2b01      	cmp	r3, #1
 800607e:	d116      	bne.n	80060ae <checkAktifCalisma+0x14b6>
 8006080:	4b55      	ldr	r3, [pc, #340]	; (80061d8 <checkAktifCalisma+0x15e0>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d003      	beq.n	8006090 <checkAktifCalisma+0x1498>
 8006088:	4b53      	ldr	r3, [pc, #332]	; (80061d8 <checkAktifCalisma+0x15e0>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d10e      	bne.n	80060ae <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <checkAktifCalisma+0x15c8>)
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006096:	2005      	movs	r0, #5
 8006098:	f7fa fd1c 	bl	8000ad4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 800609c:	2005      	movs	r0, #5
 800609e:	f7fa fcbf 	bl	8000a20 <hata2EEPROM>
			convertAndSendData();
 80060a2:	f001 fb45 	bl	8007730 <convertAndSendData>
			tablakapisivicihatasi=1;
 80060a6:	4b50      	ldr	r3, [pc, #320]	; (80061e8 <checkAktifCalisma+0x15f0>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e023      	b.n	80060f6 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80060ae:	4b4e      	ldr	r3, [pc, #312]	; (80061e8 <checkAktifCalisma+0x15f0>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01f      	beq.n	80060f6 <checkAktifCalisma+0x14fe>
 80060b6:	4b4a      	ldr	r3, [pc, #296]	; (80061e0 <checkAktifCalisma+0x15e8>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01b      	beq.n	80060f6 <checkAktifCalisma+0x14fe>
 80060be:	4b43      	ldr	r3, [pc, #268]	; (80061cc <checkAktifCalisma+0x15d4>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f083 0301 	eor.w	r3, r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d014      	beq.n	80060f6 <checkAktifCalisma+0x14fe>
 80060cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060d0:	4840      	ldr	r0, [pc, #256]	; (80061d4 <checkAktifCalisma+0x15dc>)
 80060d2:	f003 f901 	bl	80092d8 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10c      	bne.n	80060f6 <checkAktifCalisma+0x14fe>
 80060dc:	4b40      	ldr	r3, [pc, #256]	; (80061e0 <checkAktifCalisma+0x15e8>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80060e4:	4b40      	ldr	r3, [pc, #256]	; (80061e8 <checkAktifCalisma+0x15f0>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80060ea:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <checkAktifCalisma+0x15ec>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80060f0:	2005      	movs	r0, #5
 80060f2:	f7fe fbaf 	bl	8004854 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80060f6:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <checkAktifCalisma+0x15c0>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d107      	bne.n	800610e <checkAktifCalisma+0x1516>
 80060fe:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <checkAktifCalisma+0x15b0>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <checkAktifCalisma+0x1516>
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <checkAktifCalisma+0x15f4>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d016      	beq.n	800613c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800610e:	4b38      	ldr	r3, [pc, #224]	; (80061f0 <checkAktifCalisma+0x15f8>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <checkAktifCalisma+0x15fc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	4a37      	ldr	r2, [pc, #220]	; (80061f8 <checkAktifCalisma+0x1600>)
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	4293      	cmp	r3, r2
 800611e:	d30d      	bcc.n	800613c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <checkAktifCalisma+0x15c8>)
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006126:	2006      	movs	r0, #6
 8006128:	f7fa fcd4 	bl	8000ad4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800612c:	2006      	movs	r0, #6
 800612e:	f7fa fc77 	bl	8000a20 <hata2EEPROM>
			  	convertAndSendData();
 8006132:	f001 fafd 	bl	8007730 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006136:	4b31      	ldr	r3, [pc, #196]	; (80061fc <checkAktifCalisma+0x1604>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800613c:	4b2f      	ldr	r3, [pc, #188]	; (80061fc <checkAktifCalisma+0x1604>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d013      	beq.n	800616c <checkAktifCalisma+0x1574>
 8006144:	2108      	movs	r1, #8
 8006146:	4823      	ldr	r0, [pc, #140]	; (80061d4 <checkAktifCalisma+0x15dc>)
 8006148:	f003 f8c6 	bl	80092d8 <HAL_GPIO_ReadPin>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <checkAktifCalisma+0x1574>
 8006152:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <checkAktifCalisma+0x15d4>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f083 0301 	eor.w	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006160:	4b26      	ldr	r3, [pc, #152]	; (80061fc <checkAktifCalisma+0x1604>)
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006166:	2006      	movs	r0, #6
 8006168:	f7fe fb74 	bl	8004854 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800616c:	4b24      	ldr	r3, [pc, #144]	; (8006200 <checkAktifCalisma+0x1608>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <checkAktifCalisma+0x1594>
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <checkAktifCalisma+0x15b0>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <checkAktifCalisma+0x1594>
 800617c:	4b21      	ldr	r3, [pc, #132]	; (8006204 <checkAktifCalisma+0x160c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <checkAktifCalisma+0x1594>
 8006184:	4b19      	ldr	r3, [pc, #100]	; (80061ec <checkAktifCalisma+0x15f4>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d03f      	beq.n	800620c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <checkAktifCalisma+0x1610>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <checkAktifCalisma+0x15d8>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <checkAktifCalisma+0x15ec>)
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e03c      	b.n	800621a <checkAktifCalisma+0x1622>
 80061a0:	20000285 	.word	0x20000285
 80061a4:	2000028b 	.word	0x2000028b
 80061a8:	2000026c 	.word	0x2000026c
 80061ac:	20000295 	.word	0x20000295
 80061b0:	20000237 	.word	0x20000237
 80061b4:	2000023b 	.word	0x2000023b
 80061b8:	20000288 	.word	0x20000288
 80061bc:	40011000 	.word	0x40011000
 80061c0:	20000289 	.word	0x20000289
 80061c4:	20000292 	.word	0x20000292
 80061c8:	40010c00 	.word	0x40010c00
 80061cc:	20000282 	.word	0x20000282
 80061d0:	20000296 	.word	0x20000296
 80061d4:	40010800 	.word	0x40010800
 80061d8:	2000023c 	.word	0x2000023c
 80061dc:	20000293 	.word	0x20000293
 80061e0:	20000276 	.word	0x20000276
 80061e4:	20000297 	.word	0x20000297
 80061e8:	20000294 	.word	0x20000294
 80061ec:	2000026b 	.word	0x2000026b
 80061f0:	20000210 	.word	0x20000210
 80061f4:	20000224 	.word	0x20000224
 80061f8:	2000024c 	.word	0x2000024c
 80061fc:	20000283 	.word	0x20000283
 8006200:	20000269 	.word	0x20000269
 8006204:	2000026a 	.word	0x2000026a
 8006208:	2000028a 	.word	0x2000028a
		} else {
			makineCalisiyor=1;
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <checkAktifCalisma+0x1690>)
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006212:	4b1e      	ldr	r3, [pc, #120]	; (800628c <checkAktifCalisma+0x1694>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <checkAktifCalisma+0x1698>)
 8006218:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <checkAktifCalisma+0x169c>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d02f      	beq.n	8006282 <checkAktifCalisma+0x168a>
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <checkAktifCalisma+0x16a0>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	f083 0301 	eor.w	r3, r3, #1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d028      	beq.n	8006282 <checkAktifCalisma+0x168a>
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <checkAktifCalisma+0x16a4>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f083 0301 	eor.w	r3, r3, #1
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d021      	beq.n	8006282 <checkAktifCalisma+0x168a>
 800623e:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <checkAktifCalisma+0x16a8>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f083 0301 	eor.w	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01a      	beq.n	8006282 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800624c:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <checkAktifCalisma+0x16ac>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f083 0301 	eor.w	r3, r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d013      	beq.n	8006282 <checkAktifCalisma+0x168a>
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <checkAktifCalisma+0x16b0>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f083 0301 	eor.w	r3, r3, #1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00c      	beq.n	8006282 <checkAktifCalisma+0x168a>
 8006268:	4b10      	ldr	r3, [pc, #64]	; (80062ac <checkAktifCalisma+0x16b4>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	f083 0301 	eor.w	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006276:	4b07      	ldr	r3, [pc, #28]	; (8006294 <checkAktifCalisma+0x169c>)
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800627c:	2007      	movs	r0, #7
 800627e:	f7fe fae9 	bl	8004854 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000028a 	.word	0x2000028a
 800628c:	20000210 	.word	0x20000210
 8006290:	20000224 	.word	0x20000224
 8006294:	20000289 	.word	0x20000289
 8006298:	20000284 	.word	0x20000284
 800629c:	20000285 	.word	0x20000285
 80062a0:	20000292 	.word	0x20000292
 80062a4:	20000293 	.word	0x20000293
 80062a8:	20000294 	.word	0x20000294
 80062ac:	20000283 	.word	0x20000283

080062b0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80062b4:	4b8b      	ldr	r3, [pc, #556]	; (80064e4 <checkDemoModCalisma+0x234>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	f040 8229 	bne.w	8006710 <checkDemoModCalisma+0x460>
 80062be:	4b8a      	ldr	r3, [pc, #552]	; (80064e8 <checkDemoModCalisma+0x238>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8224 	beq.w	8006710 <checkDemoModCalisma+0x460>
 80062c8:	4b88      	ldr	r3, [pc, #544]	; (80064ec <checkDemoModCalisma+0x23c>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 821f 	bne.w	8006710 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062d2:	2102      	movs	r1, #2
 80062d4:	4886      	ldr	r0, [pc, #536]	; (80064f0 <checkDemoModCalisma+0x240>)
 80062d6:	f002 ffff 	bl	80092d8 <HAL_GPIO_ReadPin>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d11d      	bne.n	800631c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80062e0:	4b84      	ldr	r3, [pc, #528]	; (80064f4 <checkDemoModCalisma+0x244>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f083 0301 	eor.w	r3, r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80062ee:	4b82      	ldr	r3, [pc, #520]	; (80064f8 <checkDemoModCalisma+0x248>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f083 0301 	eor.w	r3, r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00f      	beq.n	800631c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80062fc:	4b7f      	ldr	r3, [pc, #508]	; (80064fc <checkDemoModCalisma+0x24c>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f083 0301 	eor.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800630a:	2201      	movs	r2, #1
 800630c:	2104      	movs	r1, #4
 800630e:	487c      	ldr	r0, [pc, #496]	; (8006500 <checkDemoModCalisma+0x250>)
 8006310:	f002 fff9 	bl	8009306 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006314:	4b7b      	ldr	r3, [pc, #492]	; (8006504 <checkDemoModCalisma+0x254>)
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e00e      	b.n	800633a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800631c:	2102      	movs	r1, #2
 800631e:	4874      	ldr	r0, [pc, #464]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006320:	f002 ffda 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d107      	bne.n	800633a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800632a:	2200      	movs	r2, #0
 800632c:	2104      	movs	r1, #4
 800632e:	4874      	ldr	r0, [pc, #464]	; (8006500 <checkDemoModCalisma+0x250>)
 8006330:	f002 ffe9 	bl	8009306 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006334:	4b73      	ldr	r3, [pc, #460]	; (8006504 <checkDemoModCalisma+0x254>)
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800633a:	4b72      	ldr	r3, [pc, #456]	; (8006504 <checkDemoModCalisma+0x254>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <checkDemoModCalisma+0xaa>
 8006342:	4b6d      	ldr	r3, [pc, #436]	; (80064f8 <checkDemoModCalisma+0x248>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <checkDemoModCalisma+0xaa>
 800634a:	4b6c      	ldr	r3, [pc, #432]	; (80064fc <checkDemoModCalisma+0x24c>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <checkDemoModCalisma+0xaa>
 8006352:	4b68      	ldr	r3, [pc, #416]	; (80064f4 <checkDemoModCalisma+0x244>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800635a:	2201      	movs	r2, #1
 800635c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006360:	4867      	ldr	r0, [pc, #412]	; (8006500 <checkDemoModCalisma+0x250>)
 8006362:	f002 ffd0 	bl	8009306 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006366:	2201      	movs	r2, #1
 8006368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800636c:	4864      	ldr	r0, [pc, #400]	; (8006500 <checkDemoModCalisma+0x250>)
 800636e:	f002 ffca 	bl	8009306 <HAL_GPIO_WritePin>
 8006372:	e00b      	b.n	800638c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006374:	2200      	movs	r2, #0
 8006376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800637a:	4861      	ldr	r0, [pc, #388]	; (8006500 <checkDemoModCalisma+0x250>)
 800637c:	f002 ffc3 	bl	8009306 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006380:	2200      	movs	r2, #0
 8006382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006386:	485e      	ldr	r0, [pc, #376]	; (8006500 <checkDemoModCalisma+0x250>)
 8006388:	f002 ffbd 	bl	8009306 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800638c:	2102      	movs	r1, #2
 800638e:	4858      	ldr	r0, [pc, #352]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006390:	f002 ffa2 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d10d      	bne.n	80063b6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800639a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800639e:	4854      	ldr	r0, [pc, #336]	; (80064f0 <checkDemoModCalisma+0x240>)
 80063a0:	f002 ff9a 	bl	80092d8 <HAL_GPIO_ReadPin>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80063aa:	4b56      	ldr	r3, [pc, #344]	; (8006504 <checkDemoModCalisma+0x254>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f083 0301 	eor.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063b6:	2102      	movs	r1, #2
 80063b8:	484d      	ldr	r0, [pc, #308]	; (80064f0 <checkDemoModCalisma+0x240>)
 80063ba:	f002 ff8d 	bl	80092d8 <HAL_GPIO_ReadPin>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d125      	bne.n	8006410 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063c8:	4849      	ldr	r0, [pc, #292]	; (80064f0 <checkDemoModCalisma+0x240>)
 80063ca:	f002 ff85 	bl	80092d8 <HAL_GPIO_ReadPin>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11d      	bne.n	8006410 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80063d4:	4b4b      	ldr	r3, [pc, #300]	; (8006504 <checkDemoModCalisma+0x254>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f083 0301 	eor.w	r3, r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80063e2:	4b44      	ldr	r3, [pc, #272]	; (80064f4 <checkDemoModCalisma+0x244>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f083 0301 	eor.w	r3, r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00f      	beq.n	8006410 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80063f0:	4b42      	ldr	r3, [pc, #264]	; (80064fc <checkDemoModCalisma+0x24c>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f083 0301 	eor.w	r3, r3, #1
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80063fe:	2201      	movs	r2, #1
 8006400:	2120      	movs	r1, #32
 8006402:	483b      	ldr	r0, [pc, #236]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006404:	f002 ff7f 	bl	8009306 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006408:	4b3b      	ldr	r3, [pc, #236]	; (80064f8 <checkDemoModCalisma+0x248>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e007      	b.n	8006420 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006410:	2200      	movs	r2, #0
 8006412:	2120      	movs	r1, #32
 8006414:	4836      	ldr	r0, [pc, #216]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006416:	f002 ff76 	bl	8009306 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800641a:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <checkDemoModCalisma+0x248>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006420:	2102      	movs	r1, #2
 8006422:	4833      	ldr	r0, [pc, #204]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006424:	f002 ff58 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006428:	4603      	mov	r3, r0
 800642a:	2b01      	cmp	r3, #1
 800642c:	d125      	bne.n	800647a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800642e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006432:	482f      	ldr	r0, [pc, #188]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006434:	f002 ff50 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d11d      	bne.n	800647a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800643e:	4b31      	ldr	r3, [pc, #196]	; (8006504 <checkDemoModCalisma+0x254>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f083 0301 	eor.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800644c:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <checkDemoModCalisma+0x248>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f083 0301 	eor.w	r3, r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <checkDemoModCalisma+0x244>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f083 0301 	eor.w	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006468:	2201      	movs	r2, #1
 800646a:	2110      	movs	r1, #16
 800646c:	4820      	ldr	r0, [pc, #128]	; (80064f0 <checkDemoModCalisma+0x240>)
 800646e:	f002 ff4a 	bl	8009306 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006472:	4b22      	ldr	r3, [pc, #136]	; (80064fc <checkDemoModCalisma+0x24c>)
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e007      	b.n	800648a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800647a:	2200      	movs	r2, #0
 800647c:	2110      	movs	r1, #16
 800647e:	481c      	ldr	r0, [pc, #112]	; (80064f0 <checkDemoModCalisma+0x240>)
 8006480:	f002 ff41 	bl	8009306 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006484:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <checkDemoModCalisma+0x24c>)
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800648a:	2104      	movs	r1, #4
 800648c:	4818      	ldr	r0, [pc, #96]	; (80064f0 <checkDemoModCalisma+0x240>)
 800648e:	f002 ff23 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d139      	bne.n	800650c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006498:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <checkDemoModCalisma+0x254>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f083 0301 	eor.w	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d032      	beq.n	800650c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80064a6:	4b15      	ldr	r3, [pc, #84]	; (80064fc <checkDemoModCalisma+0x24c>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f083 0301 	eor.w	r3, r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d02b      	beq.n	800650c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <checkDemoModCalisma+0x248>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d024      	beq.n	800650c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80064c2:	2201      	movs	r2, #1
 80064c4:	2102      	movs	r1, #2
 80064c6:	480e      	ldr	r0, [pc, #56]	; (8006500 <checkDemoModCalisma+0x250>)
 80064c8:	f002 ff1d 	bl	8009306 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80064cc:	2201      	movs	r2, #1
 80064ce:	2101      	movs	r1, #1
 80064d0:	480b      	ldr	r0, [pc, #44]	; (8006500 <checkDemoModCalisma+0x250>)
 80064d2:	f002 ff18 	bl	8009306 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <checkDemoModCalisma+0x244>)
 80064d8:	2201      	movs	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <checkDemoModCalisma+0x258>)
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e027      	b.n	8006534 <checkDemoModCalisma+0x284>
 80064e4:	20000252 	.word	0x20000252
 80064e8:	20000286 	.word	0x20000286
 80064ec:	20000251 	.word	0x20000251
 80064f0:	40011000 	.word	0x40011000
 80064f4:	2000028d 	.word	0x2000028d
 80064f8:	2000028e 	.word	0x2000028e
 80064fc:	2000028f 	.word	0x2000028f
 8006500:	40010c00 	.word	0x40010c00
 8006504:	2000028c 	.word	0x2000028c
 8006508:	20000272 	.word	0x20000272
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800650c:	2104      	movs	r1, #4
 800650e:	48a0      	ldr	r0, [pc, #640]	; (8006790 <checkDemoModCalisma+0x4e0>)
 8006510:	f002 fee2 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d10c      	bne.n	8006534 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800651a:	2200      	movs	r2, #0
 800651c:	2102      	movs	r1, #2
 800651e:	489d      	ldr	r0, [pc, #628]	; (8006794 <checkDemoModCalisma+0x4e4>)
 8006520:	f002 fef1 	bl	8009306 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006524:	2200      	movs	r2, #0
 8006526:	2101      	movs	r1, #1
 8006528:	489a      	ldr	r0, [pc, #616]	; (8006794 <checkDemoModCalisma+0x4e4>)
 800652a:	f002 feec 	bl	8009306 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800652e:	4b9a      	ldr	r3, [pc, #616]	; (8006798 <checkDemoModCalisma+0x4e8>)
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006534:	2104      	movs	r1, #4
 8006536:	4896      	ldr	r0, [pc, #600]	; (8006790 <checkDemoModCalisma+0x4e0>)
 8006538:	f002 fece 	bl	80092d8 <HAL_GPIO_ReadPin>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10d      	bne.n	800655e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006542:	2201      	movs	r2, #1
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	4895      	ldr	r0, [pc, #596]	; (800679c <checkDemoModCalisma+0x4ec>)
 8006548:	f002 fedd 	bl	8009306 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800654c:	2201      	movs	r2, #1
 800654e:	2120      	movs	r1, #32
 8006550:	4892      	ldr	r0, [pc, #584]	; (800679c <checkDemoModCalisma+0x4ec>)
 8006552:	f002 fed8 	bl	8009306 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006556:	4b92      	ldr	r3, [pc, #584]	; (80067a0 <checkDemoModCalisma+0x4f0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a92      	ldr	r2, [pc, #584]	; (80067a4 <checkDemoModCalisma+0x4f4>)
 800655c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800655e:	4b90      	ldr	r3, [pc, #576]	; (80067a0 <checkDemoModCalisma+0x4f0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b90      	ldr	r3, [pc, #576]	; (80067a4 <checkDemoModCalisma+0x4f4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b04      	cmp	r3, #4
 800656a:	d909      	bls.n	8006580 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800656c:	2200      	movs	r2, #0
 800656e:	2180      	movs	r1, #128	; 0x80
 8006570:	488a      	ldr	r0, [pc, #552]	; (800679c <checkDemoModCalisma+0x4ec>)
 8006572:	f002 fec8 	bl	8009306 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006576:	2200      	movs	r2, #0
 8006578:	2120      	movs	r1, #32
 800657a:	4888      	ldr	r0, [pc, #544]	; (800679c <checkDemoModCalisma+0x4ec>)
 800657c:	f002 fec3 	bl	8009306 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006580:	2102      	movs	r1, #2
 8006582:	4883      	ldr	r0, [pc, #524]	; (8006790 <checkDemoModCalisma+0x4e0>)
 8006584:	f002 fea8 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006588:	4603      	mov	r3, r0
 800658a:	2b01      	cmp	r3, #1
 800658c:	d108      	bne.n	80065a0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800658e:	2201      	movs	r2, #1
 8006590:	2140      	movs	r1, #64	; 0x40
 8006592:	4882      	ldr	r0, [pc, #520]	; (800679c <checkDemoModCalisma+0x4ec>)
 8006594:	f002 feb7 	bl	8009306 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006598:	4b81      	ldr	r3, [pc, #516]	; (80067a0 <checkDemoModCalisma+0x4f0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a81      	ldr	r2, [pc, #516]	; (80067a4 <checkDemoModCalisma+0x4f4>)
 800659e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065a0:	4b7f      	ldr	r3, [pc, #508]	; (80067a0 <checkDemoModCalisma+0x4f0>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b7f      	ldr	r3, [pc, #508]	; (80067a4 <checkDemoModCalisma+0x4f4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d904      	bls.n	80065b8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	2140      	movs	r1, #64	; 0x40
 80065b2:	487a      	ldr	r0, [pc, #488]	; (800679c <checkDemoModCalisma+0x4ec>)
 80065b4:	f002 fea7 	bl	8009306 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80065b8:	4b7b      	ldr	r3, [pc, #492]	; (80067a8 <checkDemoModCalisma+0x4f8>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d058      	beq.n	8006672 <checkDemoModCalisma+0x3c2>
 80065c0:	4b7a      	ldr	r3, [pc, #488]	; (80067ac <checkDemoModCalisma+0x4fc>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d054      	beq.n	8006672 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80065c8:	4b79      	ldr	r3, [pc, #484]	; (80067b0 <checkDemoModCalisma+0x500>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	4b77      	ldr	r3, [pc, #476]	; (80067b0 <checkDemoModCalisma+0x500>)
 80065d2:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80065d4:	4b76      	ldr	r3, [pc, #472]	; (80067b0 <checkDemoModCalisma+0x500>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b09      	cmp	r3, #9
 80065da:	d908      	bls.n	80065ee <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80065dc:	4b74      	ldr	r3, [pc, #464]	; (80067b0 <checkDemoModCalisma+0x500>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80065e2:	4b74      	ldr	r3, [pc, #464]	; (80067b4 <checkDemoModCalisma+0x504>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b72      	ldr	r3, [pc, #456]	; (80067b4 <checkDemoModCalisma+0x504>)
 80065ec:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80065ee:	4b71      	ldr	r3, [pc, #452]	; (80067b4 <checkDemoModCalisma+0x504>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b09      	cmp	r3, #9
 80065f4:	d908      	bls.n	8006608 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80065f6:	4b6f      	ldr	r3, [pc, #444]	; (80067b4 <checkDemoModCalisma+0x504>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80065fc:	4b6e      	ldr	r3, [pc, #440]	; (80067b8 <checkDemoModCalisma+0x508>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	b2da      	uxtb	r2, r3
 8006604:	4b6c      	ldr	r3, [pc, #432]	; (80067b8 <checkDemoModCalisma+0x508>)
 8006606:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006608:	4b6b      	ldr	r3, [pc, #428]	; (80067b8 <checkDemoModCalisma+0x508>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b09      	cmp	r3, #9
 800660e:	d908      	bls.n	8006622 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006610:	4b69      	ldr	r3, [pc, #420]	; (80067b8 <checkDemoModCalisma+0x508>)
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006616:	4b69      	ldr	r3, [pc, #420]	; (80067bc <checkDemoModCalisma+0x50c>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	4b67      	ldr	r3, [pc, #412]	; (80067bc <checkDemoModCalisma+0x50c>)
 8006620:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006622:	4b66      	ldr	r3, [pc, #408]	; (80067bc <checkDemoModCalisma+0x50c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b09      	cmp	r3, #9
 8006628:	d908      	bls.n	800663c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800662a:	4b64      	ldr	r3, [pc, #400]	; (80067bc <checkDemoModCalisma+0x50c>)
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006630:	4b63      	ldr	r3, [pc, #396]	; (80067c0 <checkDemoModCalisma+0x510>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4b61      	ldr	r3, [pc, #388]	; (80067c0 <checkDemoModCalisma+0x510>)
 800663a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <checkDemoModCalisma+0x510>)
 800663e:	781a      	ldrb	r2, [r3, #0]
 8006640:	4b60      	ldr	r3, [pc, #384]	; (80067c4 <checkDemoModCalisma+0x514>)
 8006642:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006646:	4b5d      	ldr	r3, [pc, #372]	; (80067bc <checkDemoModCalisma+0x50c>)
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	4b5e      	ldr	r3, [pc, #376]	; (80067c4 <checkDemoModCalisma+0x514>)
 800664c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800664e:	4b5a      	ldr	r3, [pc, #360]	; (80067b8 <checkDemoModCalisma+0x508>)
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	4b5c      	ldr	r3, [pc, #368]	; (80067c4 <checkDemoModCalisma+0x514>)
 8006654:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006656:	4b57      	ldr	r3, [pc, #348]	; (80067b4 <checkDemoModCalisma+0x504>)
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	4b5a      	ldr	r3, [pc, #360]	; (80067c4 <checkDemoModCalisma+0x514>)
 800665c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800665e:	4b54      	ldr	r3, [pc, #336]	; (80067b0 <checkDemoModCalisma+0x500>)
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	4b58      	ldr	r3, [pc, #352]	; (80067c4 <checkDemoModCalisma+0x514>)
 8006664:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006666:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <checkDemoModCalisma+0x518>)
 8006668:	2201      	movs	r2, #1
 800666a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800666c:	4b4f      	ldr	r3, [pc, #316]	; (80067ac <checkDemoModCalisma+0x4fc>)
 800666e:	2200      	movs	r2, #0
 8006670:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006672:	4b56      	ldr	r3, [pc, #344]	; (80067cc <checkDemoModCalisma+0x51c>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f040 8087 	bne.w	800678a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800667c:	4a54      	ldr	r2, [pc, #336]	; (80067d0 <checkDemoModCalisma+0x520>)
 800667e:	2101      	movs	r1, #1
 8006680:	2002      	movs	r0, #2
 8006682:	f001 fb03 	bl	8007c8c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006686:	4a53      	ldr	r2, [pc, #332]	; (80067d4 <checkDemoModCalisma+0x524>)
 8006688:	2101      	movs	r1, #1
 800668a:	2001      	movs	r0, #1
 800668c:	f001 fafe 	bl	8007c8c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006690:	4b4b      	ldr	r3, [pc, #300]	; (80067c0 <checkDemoModCalisma+0x510>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	220a      	movs	r2, #10
 8006696:	4950      	ldr	r1, [pc, #320]	; (80067d8 <checkDemoModCalisma+0x528>)
 8006698:	4618      	mov	r0, r3
 800669a:	f005 fe73 	bl	800c384 <itoa>
			lcd_print(2,12,snum);
 800669e:	4a4e      	ldr	r2, [pc, #312]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066a0:	210c      	movs	r1, #12
 80066a2:	2002      	movs	r0, #2
 80066a4:	f001 faf2 	bl	8007c8c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80066a8:	4b44      	ldr	r3, [pc, #272]	; (80067bc <checkDemoModCalisma+0x50c>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	220a      	movs	r2, #10
 80066ae:	494a      	ldr	r1, [pc, #296]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066b0:	4618      	mov	r0, r3
 80066b2:	f005 fe67 	bl	800c384 <itoa>
			lcd_print(2,13,snum);
 80066b6:	4a48      	ldr	r2, [pc, #288]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066b8:	210d      	movs	r1, #13
 80066ba:	2002      	movs	r0, #2
 80066bc:	f001 fae6 	bl	8007c8c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80066c0:	4b3d      	ldr	r3, [pc, #244]	; (80067b8 <checkDemoModCalisma+0x508>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	220a      	movs	r2, #10
 80066c6:	4944      	ldr	r1, [pc, #272]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066c8:	4618      	mov	r0, r3
 80066ca:	f005 fe5b 	bl	800c384 <itoa>
			lcd_print(2,14,snum);
 80066ce:	4a42      	ldr	r2, [pc, #264]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066d0:	210e      	movs	r1, #14
 80066d2:	2002      	movs	r0, #2
 80066d4:	f001 fada 	bl	8007c8c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80066d8:	4b36      	ldr	r3, [pc, #216]	; (80067b4 <checkDemoModCalisma+0x504>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	220a      	movs	r2, #10
 80066de:	493e      	ldr	r1, [pc, #248]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066e0:	4618      	mov	r0, r3
 80066e2:	f005 fe4f 	bl	800c384 <itoa>
			lcd_print(2,15,snum);
 80066e6:	4a3c      	ldr	r2, [pc, #240]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066e8:	210f      	movs	r1, #15
 80066ea:	2002      	movs	r0, #2
 80066ec:	f001 face 	bl	8007c8c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80066f0:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <checkDemoModCalisma+0x500>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	220a      	movs	r2, #10
 80066f6:	4938      	ldr	r1, [pc, #224]	; (80067d8 <checkDemoModCalisma+0x528>)
 80066f8:	4618      	mov	r0, r3
 80066fa:	f005 fe43 	bl	800c384 <itoa>
			lcd_print(2,16,snum);
 80066fe:	4a36      	ldr	r2, [pc, #216]	; (80067d8 <checkDemoModCalisma+0x528>)
 8006700:	2110      	movs	r1, #16
 8006702:	2002      	movs	r0, #2
 8006704:	f001 fac2 	bl	8007c8c <lcd_print>
			mesajYazildi=1;
 8006708:	4b34      	ldr	r3, [pc, #208]	; (80067dc <checkDemoModCalisma+0x52c>)
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800670e:	e03c      	b.n	800678a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006710:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <checkDemoModCalisma+0x530>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d003      	beq.n	8006720 <checkDemoModCalisma+0x470>
 8006718:	4b2c      	ldr	r3, [pc, #176]	; (80067cc <checkDemoModCalisma+0x51c>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d134      	bne.n	800678a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006726:	481b      	ldr	r0, [pc, #108]	; (8006794 <checkDemoModCalisma+0x4e4>)
 8006728:	f002 fded 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800672c:	2200      	movs	r2, #0
 800672e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006732:	4818      	ldr	r0, [pc, #96]	; (8006794 <checkDemoModCalisma+0x4e4>)
 8006734:	f002 fde7 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006738:	2200      	movs	r2, #0
 800673a:	2104      	movs	r1, #4
 800673c:	4815      	ldr	r0, [pc, #84]	; (8006794 <checkDemoModCalisma+0x4e4>)
 800673e:	f002 fde2 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006742:	2200      	movs	r2, #0
 8006744:	2102      	movs	r1, #2
 8006746:	4813      	ldr	r0, [pc, #76]	; (8006794 <checkDemoModCalisma+0x4e4>)
 8006748:	f002 fddd 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800674c:	2200      	movs	r2, #0
 800674e:	2101      	movs	r1, #1
 8006750:	4810      	ldr	r0, [pc, #64]	; (8006794 <checkDemoModCalisma+0x4e4>)
 8006752:	f002 fdd8 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006756:	2200      	movs	r2, #0
 8006758:	2120      	movs	r1, #32
 800675a:	480d      	ldr	r0, [pc, #52]	; (8006790 <checkDemoModCalisma+0x4e0>)
 800675c:	f002 fdd3 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006760:	2200      	movs	r2, #0
 8006762:	2110      	movs	r1, #16
 8006764:	480a      	ldr	r0, [pc, #40]	; (8006790 <checkDemoModCalisma+0x4e0>)
 8006766:	f002 fdce 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800676a:	2200      	movs	r2, #0
 800676c:	2180      	movs	r1, #128	; 0x80
 800676e:	480b      	ldr	r0, [pc, #44]	; (800679c <checkDemoModCalisma+0x4ec>)
 8006770:	f002 fdc9 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006774:	2200      	movs	r2, #0
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	4808      	ldr	r0, [pc, #32]	; (800679c <checkDemoModCalisma+0x4ec>)
 800677a:	f002 fdc4 	bl	8009306 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800677e:	2200      	movs	r2, #0
 8006780:	2120      	movs	r1, #32
 8006782:	4806      	ldr	r0, [pc, #24]	; (800679c <checkDemoModCalisma+0x4ec>)
 8006784:	f002 fdbf 	bl	8009306 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006788:	e7ff      	b.n	800678a <checkDemoModCalisma+0x4da>
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40011000 	.word	0x40011000
 8006794:	40010c00 	.word	0x40010c00
 8006798:	2000028d 	.word	0x2000028d
 800679c:	40010800 	.word	0x40010800
 80067a0:	20000210 	.word	0x20000210
 80067a4:	20000220 	.word	0x20000220
 80067a8:	2000028c 	.word	0x2000028c
 80067ac:	20000272 	.word	0x20000272
 80067b0:	20000231 	.word	0x20000231
 80067b4:	20000232 	.word	0x20000232
 80067b8:	20000000 	.word	0x20000000
 80067bc:	20000001 	.word	0x20000001
 80067c0:	20000233 	.word	0x20000233
 80067c4:	2000012c 	.word	0x2000012c
 80067c8:	20000260 	.word	0x20000260
 80067cc:	20000251 	.word	0x20000251
 80067d0:	0800dadc 	.word	0x0800dadc
 80067d4:	0800dae8 	.word	0x0800dae8
 80067d8:	2000019c 	.word	0x2000019c
 80067dc:	20000268 	.word	0x20000268
 80067e0:	20000252 	.word	0x20000252

080067e4 <mainLoop>:

void mainLoop() {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80067ea:	f7fe f923 	bl	8004a34 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80067ee:	2101      	movs	r1, #1
 80067f0:	48ac      	ldr	r0, [pc, #688]	; (8006aa4 <mainLoop+0x2c0>)
 80067f2:	f002 fd71 	bl	80092d8 <HAL_GPIO_ReadPin>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d136      	bne.n	800686a <mainLoop+0x86>
 80067fc:	2108      	movs	r1, #8
 80067fe:	48aa      	ldr	r0, [pc, #680]	; (8006aa8 <mainLoop+0x2c4>)
 8006800:	f002 fd6a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d12f      	bne.n	800686a <mainLoop+0x86>
 800680a:	2102      	movs	r1, #2
 800680c:	48a5      	ldr	r0, [pc, #660]	; (8006aa4 <mainLoop+0x2c0>)
 800680e:	f002 fd63 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d128      	bne.n	800686a <mainLoop+0x86>
 8006818:	2104      	movs	r1, #4
 800681a:	48a2      	ldr	r0, [pc, #648]	; (8006aa4 <mainLoop+0x2c0>)
 800681c:	f002 fd5c 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d121      	bne.n	800686a <mainLoop+0x86>
 8006826:	2108      	movs	r1, #8
 8006828:	489e      	ldr	r0, [pc, #632]	; (8006aa4 <mainLoop+0x2c0>)
 800682a:	f002 fd55 	bl	80092d8 <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11a      	bne.n	800686a <mainLoop+0x86>
 8006834:	2180      	movs	r1, #128	; 0x80
 8006836:	489c      	ldr	r0, [pc, #624]	; (8006aa8 <mainLoop+0x2c4>)
 8006838:	f002 fd4e 	bl	80092d8 <HAL_GPIO_ReadPin>
 800683c:	4603      	mov	r3, r0
 800683e:	2b01      	cmp	r3, #1
 8006840:	d113      	bne.n	800686a <mainLoop+0x86>
 8006842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006846:	4898      	ldr	r0, [pc, #608]	; (8006aa8 <mainLoop+0x2c4>)
 8006848:	f002 fd46 	bl	80092d8 <HAL_GPIO_ReadPin>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d10b      	bne.n	800686a <mainLoop+0x86>
 8006852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006856:	4894      	ldr	r0, [pc, #592]	; (8006aa8 <mainLoop+0x2c4>)
 8006858:	f002 fd3e 	bl	80092d8 <HAL_GPIO_ReadPin>
 800685c:	4603      	mov	r3, r0
 800685e:	2b01      	cmp	r3, #1
 8006860:	d103      	bne.n	800686a <mainLoop+0x86>
			butonKontrol=0;
 8006862:	4b92      	ldr	r3, [pc, #584]	; (8006aac <mainLoop+0x2c8>)
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e003      	b.n	8006872 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800686a:	4b91      	ldr	r3, [pc, #580]	; (8006ab0 <mainLoop+0x2cc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a91      	ldr	r2, [pc, #580]	; (8006ab4 <mainLoop+0x2d0>)
 8006870:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006872:	4b91      	ldr	r3, [pc, #580]	; (8006ab8 <mainLoop+0x2d4>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d03a      	beq.n	80068f0 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800687a:	bf00      	nop
 800687c:	488f      	ldr	r0, [pc, #572]	; (8006abc <mainLoop+0x2d8>)
 800687e:	f003 fb54 	bl	8009f2a <HAL_I2C_GetError>
 8006882:	4603      	mov	r3, r0
 8006884:	2b04      	cmp	r3, #4
 8006886:	d0f9      	beq.n	800687c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006888:	bf00      	nop
 800688a:	488c      	ldr	r0, [pc, #560]	; (8006abc <mainLoop+0x2d8>)
 800688c:	f003 fb40 	bl	8009f10 <HAL_I2C_GetState>
 8006890:	4603      	mov	r3, r0
 8006892:	2b20      	cmp	r3, #32
 8006894:	d1f9      	bne.n	800688a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006896:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	236e      	movs	r3, #110	; 0x6e
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	4b87      	ldr	r3, [pc, #540]	; (8006ac0 <mainLoop+0x2dc>)
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	236e      	movs	r3, #110	; 0x6e
 80068a6:	2200      	movs	r2, #0
 80068a8:	21a0      	movs	r1, #160	; 0xa0
 80068aa:	4884      	ldr	r0, [pc, #528]	; (8006abc <mainLoop+0x2d8>)
 80068ac:	f002 ffce 	bl	800984c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80068b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068b4:	f001 ff40 	bl	8008738 <HAL_Delay>

		  hafizaYaz=0;
 80068b8:	4b7f      	ldr	r3, [pc, #508]	; (8006ab8 <mainLoop+0x2d4>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80068be:	4b81      	ldr	r3, [pc, #516]	; (8006ac4 <mainLoop+0x2e0>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80068c6:	4a80      	ldr	r2, [pc, #512]	; (8006ac8 <mainLoop+0x2e4>)
 80068c8:	2101      	movs	r1, #1
 80068ca:	2002      	movs	r0, #2
 80068cc:	f001 f9de 	bl	8007c8c <lcd_print>
 80068d0:	e008      	b.n	80068e4 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80068d2:	4b7c      	ldr	r3, [pc, #496]	; (8006ac4 <mainLoop+0x2e0>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d104      	bne.n	80068e4 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80068da:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <mainLoop+0x2e8>)
 80068dc:	2101      	movs	r1, #1
 80068de:	2002      	movs	r0, #2
 80068e0:	f001 f9d4 	bl	8007c8c <lcd_print>
		  }

		  HAL_Delay(1000);
 80068e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068e8:	f001 ff26 	bl	8008738 <HAL_Delay>
		  lcd_clear();
 80068ec:	f001 f9fa 	bl	8007ce4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80068f0:	4b77      	ldr	r3, [pc, #476]	; (8006ad0 <mainLoop+0x2ec>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f083 0301 	eor.w	r3, r3, #1
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d06d      	beq.n	80069da <mainLoop+0x1f6>
 80068fe:	486f      	ldr	r0, [pc, #444]	; (8006abc <mainLoop+0x2d8>)
 8006900:	f003 fb06 	bl	8009f10 <HAL_I2C_GetState>
 8006904:	4603      	mov	r3, r0
 8006906:	2b20      	cmp	r3, #32
 8006908:	d167      	bne.n	80069da <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 800690a:	4b72      	ldr	r3, [pc, #456]	; (8006ad4 <mainLoop+0x2f0>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	f083 0301 	eor.w	r3, r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d044      	beq.n	80069a2 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006918:	4a6f      	ldr	r2, [pc, #444]	; (8006ad8 <mainLoop+0x2f4>)
 800691a:	2101      	movs	r1, #1
 800691c:	2001      	movs	r0, #1
 800691e:	f001 f9b5 	bl	8007c8c <lcd_print>
			  if(dilSecim==0) {
 8006922:	4b68      	ldr	r3, [pc, #416]	; (8006ac4 <mainLoop+0x2e0>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800692a:	4a6c      	ldr	r2, [pc, #432]	; (8006adc <mainLoop+0x2f8>)
 800692c:	2101      	movs	r1, #1
 800692e:	2002      	movs	r0, #2
 8006930:	f001 f9ac 	bl	8007c8c <lcd_print>
 8006934:	e008      	b.n	8006948 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006936:	4b63      	ldr	r3, [pc, #396]	; (8006ac4 <mainLoop+0x2e0>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d104      	bne.n	8006948 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800693e:	4a68      	ldr	r2, [pc, #416]	; (8006ae0 <mainLoop+0x2fc>)
 8006940:	2101      	movs	r1, #1
 8006942:	2002      	movs	r0, #2
 8006944:	f001 f9a2 	bl	8007c8c <lcd_print>
			  }
			  HAL_Delay(1000);
 8006948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800694c:	f001 fef4 	bl	8008738 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006950:	bf00      	nop
 8006952:	485a      	ldr	r0, [pc, #360]	; (8006abc <mainLoop+0x2d8>)
 8006954:	f003 fae9 	bl	8009f2a <HAL_I2C_GetError>
 8006958:	4603      	mov	r3, r0
 800695a:	2b04      	cmp	r3, #4
 800695c:	d0f9      	beq.n	8006952 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800695e:	e003      	b.n	8006968 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006964:	f001 fee8 	bl	8008738 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006968:	4854      	ldr	r0, [pc, #336]	; (8006abc <mainLoop+0x2d8>)
 800696a:	f003 fad1 	bl	8009f10 <HAL_I2C_GetState>
 800696e:	4603      	mov	r3, r0
 8006970:	2b20      	cmp	r3, #32
 8006972:	d1f5      	bne.n	8006960 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006974:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <mainLoop+0x2e0>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 800697c:	4a59      	ldr	r2, [pc, #356]	; (8006ae4 <mainLoop+0x300>)
 800697e:	2101      	movs	r1, #1
 8006980:	2002      	movs	r0, #2
 8006982:	f001 f983 	bl	8007c8c <lcd_print>
 8006986:	e008      	b.n	800699a <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006988:	4b4e      	ldr	r3, [pc, #312]	; (8006ac4 <mainLoop+0x2e0>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d104      	bne.n	800699a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006990:	4a55      	ldr	r2, [pc, #340]	; (8006ae8 <mainLoop+0x304>)
 8006992:	2101      	movs	r1, #1
 8006994:	2002      	movs	r0, #2
 8006996:	f001 f979 	bl	8007c8c <lcd_print>
			  }

			  ilkOkuma=1;
 800699a:	4b4e      	ldr	r3, [pc, #312]	; (8006ad4 <mainLoop+0x2f0>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	e014      	b.n	80069cc <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80069a2:	4b48      	ldr	r3, [pc, #288]	; (8006ac4 <mainLoop+0x2e0>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80069aa:	4a50      	ldr	r2, [pc, #320]	; (8006aec <mainLoop+0x308>)
 80069ac:	2101      	movs	r1, #1
 80069ae:	2002      	movs	r0, #2
 80069b0:	f001 f96c 	bl	8007c8c <lcd_print>
 80069b4:	e008      	b.n	80069c8 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80069b6:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <mainLoop+0x2e0>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d104      	bne.n	80069c8 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80069be:	4a4c      	ldr	r2, [pc, #304]	; (8006af0 <mainLoop+0x30c>)
 80069c0:	2101      	movs	r1, #1
 80069c2:	2002      	movs	r0, #2
 80069c4:	f001 f962 	bl	8007c8c <lcd_print>
			  }
			  lcd_clear();
 80069c8:	f001 f98c 	bl	8007ce4 <lcd_clear>
		  }

		  lcd_clear();
 80069cc:	f001 f98a 	bl	8007ce4 <lcd_clear>

		  eepromKontrol();
 80069d0:	f7f9 fc30 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80069d4:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <mainLoop+0x2ec>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80069da:	4b46      	ldr	r3, [pc, #280]	; (8006af4 <mainLoop+0x310>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d11c      	bne.n	8006a1c <mainLoop+0x238>
 80069e2:	4b45      	ldr	r3, [pc, #276]	; (8006af8 <mainLoop+0x314>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f083 0301 	eor.w	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d015      	beq.n	8006a1c <mainLoop+0x238>
 80069f0:	4b42      	ldr	r3, [pc, #264]	; (8006afc <mainLoop+0x318>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d111      	bne.n	8006a1c <mainLoop+0x238>
			lcd_clear();
 80069f8:	f001 f974 	bl	8007ce4 <lcd_clear>
			HAL_Delay(10);
 80069fc:	200a      	movs	r0, #10
 80069fe:	f001 fe9b 	bl	8008738 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a02:	4a3f      	ldr	r2, [pc, #252]	; (8006b00 <mainLoop+0x31c>)
 8006a04:	2101      	movs	r1, #1
 8006a06:	2001      	movs	r0, #1
 8006a08:	f001 f940 	bl	8007c8c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006a0c:	4a3d      	ldr	r2, [pc, #244]	; (8006b04 <mainLoop+0x320>)
 8006a0e:	2101      	movs	r1, #1
 8006a10:	2002      	movs	r0, #2
 8006a12:	f001 f93b 	bl	8007c8c <lcd_print>
			mesajYazildi=1;
 8006a16:	4b38      	ldr	r3, [pc, #224]	; (8006af8 <mainLoop+0x314>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <mainLoop+0x310>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d112      	bne.n	8006a4a <mainLoop+0x266>
 8006a24:	2102      	movs	r1, #2
 8006a26:	481f      	ldr	r0, [pc, #124]	; (8006aa4 <mainLoop+0x2c0>)
 8006a28:	f002 fc56 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10b      	bne.n	8006a4a <mainLoop+0x266>
 8006a32:	2104      	movs	r1, #4
 8006a34:	481b      	ldr	r0, [pc, #108]	; (8006aa4 <mainLoop+0x2c0>)
 8006a36:	f002 fc4f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d104      	bne.n	8006a4a <mainLoop+0x266>
			menuGiris=1;
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <mainLoop+0x310>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a46:	f001 f94d 	bl	8007ce4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006a4a:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <mainLoop+0x310>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <mainLoop+0x272>
			menu();
 8006a52:	f7fa fb7d 	bl	8001150 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a5a:	4813      	ldr	r0, [pc, #76]	; (8006aa8 <mainLoop+0x2c4>)
 8006a5c:	f002 fc6b 	bl	8009336 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a64:	4828      	ldr	r0, [pc, #160]	; (8006b08 <mainLoop+0x324>)
 8006a66:	f002 fc37 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <mainLoop+0x2a2>
 8006a70:	4b26      	ldr	r3, [pc, #152]	; (8006b0c <mainLoop+0x328>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f083 0301 	eor.w	r3, r3, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <mainLoop+0x2a2>
			stopVar=1;
 8006a7e:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <mainLoop+0x32c>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e002      	b.n	8006a8c <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006a86:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <mainLoop+0x32c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006a8c:	f7fd ffe8 	bl	8004a60 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006a90:	f7fe f81a 	bl	8004ac8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006a94:	f7fe f85e 	bl	8004b54 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006a98:	f7fe f8ae 	bl	8004bf8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006a9c:	f7ff fc08 	bl	80062b0 <checkDemoModCalisma>
		checkLCDBacklight();
 8006aa0:	e6a3      	b.n	80067ea <mainLoop+0x6>
 8006aa2:	bf00      	nop
 8006aa4:	40010800 	.word	0x40010800
 8006aa8:	40011000 	.word	0x40011000
 8006aac:	20000263 	.word	0x20000263
 8006ab0:	20000210 	.word	0x20000210
 8006ab4:	2000022c 	.word	0x2000022c
 8006ab8:	20000260 	.word	0x20000260
 8006abc:	200003bc 	.word	0x200003bc
 8006ac0:	2000012c 	.word	0x2000012c
 8006ac4:	20000255 	.word	0x20000255
 8006ac8:	0800dafc 	.word	0x0800dafc
 8006acc:	0800db10 	.word	0x0800db10
 8006ad0:	20000261 	.word	0x20000261
 8006ad4:	20000262 	.word	0x20000262
 8006ad8:	0800db24 	.word	0x0800db24
 8006adc:	0800db38 	.word	0x0800db38
 8006ae0:	0800db4c 	.word	0x0800db4c
 8006ae4:	0800db60 	.word	0x0800db60
 8006ae8:	0800db74 	.word	0x0800db74
 8006aec:	0800db88 	.word	0x0800db88
 8006af0:	0800db9c 	.word	0x0800db9c
 8006af4:	20000251 	.word	0x20000251
 8006af8:	20000268 	.word	0x20000268
 8006afc:	20000252 	.word	0x20000252
 8006b00:	0800dbb0 	.word	0x0800dbb0
 8006b04:	0800dbc4 	.word	0x0800dbc4
 8006b08:	40010c00 	.word	0x40010c00
 8006b0c:	20000289 	.word	0x20000289
 8006b10:	20000286 	.word	0x20000286

08006b14 <takeMachineID>:
#include "GlobalVariables.h"
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	f001 f914 	bl	8007d48 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006b20:	2305      	movs	r3, #5
 8006b22:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006b24:	2303      	movs	r3, #3
 8006b26:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006b28:	2300      	movs	r3, #0
 8006b2a:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006b2c:	4ba4      	ldr	r3, [pc, #656]	; (8006dc0 <takeMachineID+0x2ac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006b32:	220c      	movs	r2, #12
 8006b34:	2100      	movs	r1, #0
 8006b36:	48a3      	ldr	r0, [pc, #652]	; (8006dc4 <takeMachineID+0x2b0>)
 8006b38:	f005 fc2e 	bl	800c398 <memset>
    memset(machineIDInt, 0, sizeof(machineIDInt));
 8006b3c:	220c      	movs	r2, #12
 8006b3e:	2100      	movs	r1, #0
 8006b40:	48a1      	ldr	r0, [pc, #644]	; (8006dc8 <takeMachineID+0x2b4>)
 8006b42:	f005 fc29 	bl	800c398 <memset>
    resetEEPROM4Wifi(1);
 8006b46:	2001      	movs	r0, #1
 8006b48:	f7f9 fe92 	bl	8000870 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006b4c:	2064      	movs	r0, #100	; 0x64
 8006b4e:	f001 fdf3 	bl	8008738 <HAL_Delay>

    printTemplate(1, 0);
 8006b52:	2100      	movs	r1, #0
 8006b54:	2001      	movs	r0, #1
 8006b56:	f7fa f96f 	bl	8000e38 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006b5a:	2108      	movs	r1, #8
 8006b5c:	489b      	ldr	r0, [pc, #620]	; (8006dcc <takeMachineID+0x2b8>)
 8006b5e:	f002 fbbb 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d12b      	bne.n	8006bc0 <takeMachineID+0xac>
        	lcd_cursor(0);
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f001 f8ed 	bl	8007d48 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006b6e:	4895      	ldr	r0, [pc, #596]	; (8006dc4 <takeMachineID+0x2b0>)
 8006b70:	f7f9 fb58 	bl	8000224 <strlen>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b0c      	cmp	r3, #12
 8006b78:	d010      	beq.n	8006b9c <takeMachineID+0x88>
        		lcd_clear();
 8006b7a:	f001 f8b3 	bl	8007ce4 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006b7e:	4a94      	ldr	r2, [pc, #592]	; (8006dd0 <takeMachineID+0x2bc>)
 8006b80:	2101      	movs	r1, #1
 8006b82:	2001      	movs	r0, #1
 8006b84:	f001 f882 	bl	8007c8c <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006b88:	4a92      	ldr	r2, [pc, #584]	; (8006dd4 <takeMachineID+0x2c0>)
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	2002      	movs	r0, #2
 8006b8e:	f001 f87d 	bl	8007c8c <lcd_print>
        		HAL_Delay(1200);
 8006b92:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006b96:	f001 fdcf 	bl	8008738 <HAL_Delay>
        		goto mainSection;
 8006b9a:	e7be      	b.n	8006b1a <takeMachineID+0x6>
        	}

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b9c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	236e      	movs	r3, #110	; 0x6e
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	4b8c      	ldr	r3, [pc, #560]	; (8006dd8 <takeMachineID+0x2c4>)
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	236e      	movs	r3, #110	; 0x6e
 8006bac:	2200      	movs	r2, #0
 8006bae:	21a0      	movs	r1, #160	; 0xa0
 8006bb0:	488a      	ldr	r0, [pc, #552]	; (8006ddc <takeMachineID+0x2c8>)
 8006bb2:	f002 fe4b 	bl	800984c <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bba:	f001 fdbd 	bl	8008738 <HAL_Delay>

            break;
 8006bbe:	e13d      	b.n	8006e3c <takeMachineID+0x328>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4882      	ldr	r0, [pc, #520]	; (8006dcc <takeMachineID+0x2b8>)
 8006bc4:	f002 fb88 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d111      	bne.n	8006bf2 <takeMachineID+0xde>
        	if(cursorPosition == 7) {
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b07      	cmp	r3, #7
 8006bd2:	d102      	bne.n	8006bda <takeMachineID+0xc6>
        		cursorPosition = 10;
 8006bd4:	230a      	movs	r3, #10
 8006bd6:	60bb      	str	r3, [r7, #8]
 8006bd8:	e008      	b.n	8006bec <takeMachineID+0xd8>
        	} else if (cursorPosition == 14) {
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b0e      	cmp	r3, #14
 8006bde:	d102      	bne.n	8006be6 <takeMachineID+0xd2>
                cursorPosition = 3;
 8006be0:	2303      	movs	r3, #3
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	e002      	b.n	8006bec <takeMachineID+0xd8>
            } else {
            	cursorPosition++;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006bec:	2096      	movs	r0, #150	; 0x96
 8006bee:	f001 fda3 	bl	8008738 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006bf2:	2108      	movs	r1, #8
 8006bf4:	487a      	ldr	r0, [pc, #488]	; (8006de0 <takeMachineID+0x2cc>)
 8006bf6:	f002 fb6f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d111      	bne.n	8006c24 <takeMachineID+0x110>
            if (cursorPosition == 3) {
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d102      	bne.n	8006c0c <takeMachineID+0xf8>
                cursorPosition = 14;
 8006c06:	230e      	movs	r3, #14
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	e008      	b.n	8006c1e <takeMachineID+0x10a>
            } else if(cursorPosition == 10) {
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b0a      	cmp	r3, #10
 8006c10:	d102      	bne.n	8006c18 <takeMachineID+0x104>
            	cursorPosition = 7;
 8006c12:	2307      	movs	r3, #7
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	e002      	b.n	8006c1e <takeMachineID+0x10a>
            } else {
            	cursorPosition--;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006c1e:	2096      	movs	r0, #150	; 0x96
 8006c20:	f001 fd8a 	bl	8008738 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006c24:	2102      	movs	r1, #2
 8006c26:	4869      	ldr	r0, [pc, #420]	; (8006dcc <takeMachineID+0x2b8>)
 8006c28:	f002 fb56 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	f040 80aa 	bne.w	8006d88 <takeMachineID+0x274>
        	if(cursorPosition == 3) {
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d10a      	bne.n	8006c50 <takeMachineID+0x13c>
        		machineID[arrayPos] = '0';
 8006c3a:	4a62      	ldr	r2, [pc, #392]	; (8006dc4 <takeMachineID+0x2b0>)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4413      	add	r3, r2
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006c44:	4a64      	ldr	r2, [pc, #400]	; (8006dd8 <takeMachineID+0x2c4>)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	4413      	add	r3, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e07c      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 4) {
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d10a      	bne.n	8006c6c <takeMachineID+0x158>
        		machineID[arrayPos] = '1';
 8006c56:	4a5b      	ldr	r2, [pc, #364]	; (8006dc4 <takeMachineID+0x2b0>)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	2231      	movs	r2, #49	; 0x31
 8006c5e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006c60:	4a5d      	ldr	r2, [pc, #372]	; (8006dd8 <takeMachineID+0x2c4>)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	2201      	movs	r2, #1
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e06e      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 5) {
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d10a      	bne.n	8006c88 <takeMachineID+0x174>
        		machineID[arrayPos] = '2';
 8006c72:	4a54      	ldr	r2, [pc, #336]	; (8006dc4 <takeMachineID+0x2b0>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	2232      	movs	r2, #50	; 0x32
 8006c7a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006c7c:	4a56      	ldr	r2, [pc, #344]	; (8006dd8 <takeMachineID+0x2c4>)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	4413      	add	r3, r2
 8006c82:	2202      	movs	r2, #2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e060      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 6) {
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b06      	cmp	r3, #6
 8006c8c:	d10a      	bne.n	8006ca4 <takeMachineID+0x190>
        		machineID[arrayPos] = '3';
 8006c8e:	4a4d      	ldr	r2, [pc, #308]	; (8006dc4 <takeMachineID+0x2b0>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	2233      	movs	r2, #51	; 0x33
 8006c96:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006c98:	4a4f      	ldr	r2, [pc, #316]	; (8006dd8 <takeMachineID+0x2c4>)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e052      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 7) {
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d10a      	bne.n	8006cc0 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '4';
 8006caa:	4a46      	ldr	r2, [pc, #280]	; (8006dc4 <takeMachineID+0x2b0>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	2234      	movs	r2, #52	; 0x34
 8006cb2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006cb4:	4a48      	ldr	r2, [pc, #288]	; (8006dd8 <takeMachineID+0x2c4>)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	4413      	add	r3, r2
 8006cba:	2204      	movs	r2, #4
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e044      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 10) {
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b0a      	cmp	r3, #10
 8006cc4:	d10a      	bne.n	8006cdc <takeMachineID+0x1c8>
        		machineID[arrayPos] = '5';
 8006cc6:	4a3f      	ldr	r2, [pc, #252]	; (8006dc4 <takeMachineID+0x2b0>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4413      	add	r3, r2
 8006ccc:	2235      	movs	r2, #53	; 0x35
 8006cce:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006cd0:	4a41      	ldr	r2, [pc, #260]	; (8006dd8 <takeMachineID+0x2c4>)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	e036      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 11) {
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b0b      	cmp	r3, #11
 8006ce0:	d10a      	bne.n	8006cf8 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '6';
 8006ce2:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <takeMachineID+0x2b0>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	2236      	movs	r2, #54	; 0x36
 8006cea:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006cec:	4a3a      	ldr	r2, [pc, #232]	; (8006dd8 <takeMachineID+0x2c4>)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	2206      	movs	r2, #6
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e028      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 12) {
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b0c      	cmp	r3, #12
 8006cfc:	d10a      	bne.n	8006d14 <takeMachineID+0x200>
        		machineID[arrayPos] = '7';
 8006cfe:	4a31      	ldr	r2, [pc, #196]	; (8006dc4 <takeMachineID+0x2b0>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	2237      	movs	r2, #55	; 0x37
 8006d06:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006d08:	4a33      	ldr	r2, [pc, #204]	; (8006dd8 <takeMachineID+0x2c4>)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	2207      	movs	r2, #7
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e01a      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 13) {
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b0d      	cmp	r3, #13
 8006d18:	d10a      	bne.n	8006d30 <takeMachineID+0x21c>
        		machineID[arrayPos] = '8';
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <takeMachineID+0x2b0>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4413      	add	r3, r2
 8006d20:	2238      	movs	r2, #56	; 0x38
 8006d22:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006d24:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <takeMachineID+0x2c4>)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	4413      	add	r3, r2
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e00c      	b.n	8006d4a <takeMachineID+0x236>
        	} else if(cursorPosition == 14) {
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b0e      	cmp	r3, #14
 8006d34:	d109      	bne.n	8006d4a <takeMachineID+0x236>
        		machineID[arrayPos] = '9';
 8006d36:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <takeMachineID+0x2b0>)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	2239      	movs	r2, #57	; 0x39
 8006d3e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006d40:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <takeMachineID+0x2c4>)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	2209      	movs	r2, #9
 8006d48:	701a      	strb	r2, [r3, #0]
        	}

        	if(arrayPos == machineIDCharacterLimit - 1) {
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b0b      	cmp	r3, #11
 8006d4e:	d105      	bne.n	8006d5c <takeMachineID+0x248>
        		machineID[machineIDCharacterLimit] = '\0';
 8006d50:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <takeMachineID+0x2b0>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	731a      	strb	r2, [r3, #12]
        		machineIDInt[machineIDCharacterLimit] = '\0';
 8006d56:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <takeMachineID+0x2b4>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	b2d9      	uxtb	r1, r3
 8006d60:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <takeMachineID+0x2b0>)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4413      	add	r3, r2
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f000 ffa3 	bl	8007cb6 <lcd_print_char>

        	writeLoc++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006d82:	2096      	movs	r0, #150	; 0x96
 8006d84:	f001 fcd8 	bl	8008738 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006d88:	2104      	movs	r1, #4
 8006d8a:	4810      	ldr	r0, [pc, #64]	; (8006dcc <takeMachineID+0x2b8>)
 8006d8c:	f002 faa4 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d14b      	bne.n	8006e2e <takeMachineID+0x31a>
            if(strlen(machineID) >= 1) {
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <takeMachineID+0x2b0>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d044      	beq.n	8006e28 <takeMachineID+0x314>
                machineID[arrayPos] = '\0';
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <takeMachineID+0x2b0>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006da8:	4a0b      	ldr	r2, [pc, #44]	; (8006dd8 <takeMachineID+0x2c4>)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	dd15      	ble.n	8006de4 <takeMachineID+0x2d0>
                	writeLoc--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e016      	b.n	8006dee <takeMachineID+0x2da>
 8006dc0:	20000004 	.word	0x20000004
 8006dc4:	200001a4 	.word	0x200001a4
 8006dc8:	200001d8 	.word	0x200001d8
 8006dcc:	40010800 	.word	0x40010800
 8006dd0:	0800dbd8 	.word	0x0800dbd8
 8006dd4:	0800dbec 	.word	0x0800dbec
 8006dd8:	2000012c 	.word	0x2000012c
 8006ddc:	200003bc 	.word	0x200003bc
 8006de0:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	dc01      	bgt.n	8006dee <takeMachineID+0x2da>
                	writeLoc = 5;
 8006dea:	2305      	movs	r3, #5
 8006dec:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dd06      	ble.n	8006e02 <takeMachineID+0x2ee>
                	arrayPos--;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	e007      	b.n	8006e12 <takeMachineID+0x2fe>
                } else if(arrayPos < 0) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da04      	bge.n	8006e12 <takeMachineID+0x2fe>
                	arrayPos = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <takeMachineID+0x330>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	3304      	adds	r3, #4
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f000 ff6b 	bl	8007cf8 <lcd_delete_char>
                HAL_Delay(50);
 8006e22:	2032      	movs	r0, #50	; 0x32
 8006e24:	f001 fc88 	bl	8008738 <HAL_Delay>
            }

            HAL_Delay(150);
 8006e28:	2096      	movs	r0, #150	; 0x96
 8006e2a:	f001 fc85 	bl	8008738 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	2002      	movs	r0, #2
 8006e36:	f000 ff0a 	bl	8007c4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e3a:	e68e      	b.n	8006b5a <takeMachineID+0x46>
    }
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000004 	.word	0x20000004

08006e48 <takeWifiSSID>:

void takeWifiSSID() {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006e4e:	2001      	movs	r0, #1
 8006e50:	f000 ff7a 	bl	8007d48 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID)); //wifiSSID Sıfırlanıyor.
 8006e54:	2214      	movs	r2, #20
 8006e56:	2100      	movs	r1, #0
 8006e58:	4877      	ldr	r0, [pc, #476]	; (8007038 <takeWifiSSID+0x1f0>)
 8006e5a:	f005 fa9d 	bl	800c398 <memset>
    memset(wifiSSIDInt, 0, sizeof(wifiSSIDInt)); //wifiSSID Sıfırlanıyor.
 8006e5e:	2214      	movs	r2, #20
 8006e60:	2100      	movs	r1, #0
 8006e62:	4876      	ldr	r0, [pc, #472]	; (800703c <takeWifiSSID+0x1f4>)
 8006e64:	f005 fa98 	bl	800c398 <memset>
    resetEEPROM4Wifi(2);
 8006e68:	2002      	movs	r0, #2
 8006e6a:	f7f9 fd01 	bl	8000870 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006e6e:	2064      	movs	r0, #100	; 0x64
 8006e70:	f001 fc62 	bl	8008738 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006e74:	2301      	movs	r3, #1
 8006e76:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006e78:	2307      	movs	r3, #7
 8006e7a:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006e80:	2300      	movs	r3, #0
 8006e82:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006e84:	4b6e      	ldr	r3, [pc, #440]	; (8007040 <takeWifiSSID+0x1f8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	f7f9 ffd3 	bl	8000e38 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e92:	2108      	movs	r1, #8
 8006e94:	486b      	ldr	r0, [pc, #428]	; (8007044 <takeWifiSSID+0x1fc>)
 8006e96:	f002 fa1f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d12b      	bne.n	8006ef8 <takeWifiSSID+0xb0>
            lcd_cursor(0);
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f000 ff51 	bl	8007d48 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006ea6:	4864      	ldr	r0, [pc, #400]	; (8007038 <takeWifiSSID+0x1f0>)
 8006ea8:	f7f9 f9bc 	bl	8000224 <strlen>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b14      	cmp	r3, #20
 8006eb0:	d910      	bls.n	8006ed4 <takeWifiSSID+0x8c>
                lcd_clear();
 8006eb2:	f000 ff17 	bl	8007ce4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006eb6:	4a64      	ldr	r2, [pc, #400]	; (8007048 <takeWifiSSID+0x200>)
 8006eb8:	2101      	movs	r1, #1
 8006eba:	2001      	movs	r0, #1
 8006ebc:	f000 fee6 	bl	8007c8c <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006ec0:	4a62      	ldr	r2, [pc, #392]	; (800704c <takeWifiSSID+0x204>)
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	2002      	movs	r0, #2
 8006ec6:	f000 fee1 	bl	8007c8c <lcd_print>
                HAL_Delay(1250);
 8006eca:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006ece:	f001 fc33 	bl	8008738 <HAL_Delay>
                goto mainSSIDSection;
 8006ed2:	e7bc      	b.n	8006e4e <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ed4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	236e      	movs	r3, #110	; 0x6e
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	4b5c      	ldr	r3, [pc, #368]	; (8007050 <takeWifiSSID+0x208>)
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	236e      	movs	r3, #110	; 0x6e
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	21a0      	movs	r1, #160	; 0xa0
 8006ee8:	485a      	ldr	r0, [pc, #360]	; (8007054 <takeWifiSSID+0x20c>)
 8006eea:	f002 fcaf 	bl	800984c <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8006eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ef2:	f001 fc21 	bl	8008738 <HAL_Delay>

            break;
 8006ef6:	e14b      	b.n	8007190 <takeWifiSSID+0x348>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4852      	ldr	r0, [pc, #328]	; (8007044 <takeWifiSSID+0x1fc>)
 8006efc:	f002 f9ec 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d14d      	bne.n	8006fa2 <takeWifiSSID+0x15a>
        	if(cursorPosition > 80) {
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b50      	cmp	r3, #80	; 0x50
 8006f0a:	dd01      	ble.n	8006f10 <takeWifiSSID+0xc8>
        		cursorPosition = 1;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d13f      	bne.n	8006f96 <takeWifiSSID+0x14e>
            	if(page == 1) {
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d109      	bne.n	8006f30 <takeWifiSSID+0xe8>
            		cursorPosition = 1;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	3301      	adds	r3, #1
 8006f24:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006f26:	2102      	movs	r1, #2
 8006f28:	2002      	movs	r0, #2
 8006f2a:	f7f9 ff85 	bl	8000e38 <printTemplate>
 8006f2e:	e035      	b.n	8006f9c <takeWifiSSID+0x154>
            	} else if(page == 2) {
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d109      	bne.n	8006f4a <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006f40:	2103      	movs	r1, #3
 8006f42:	2002      	movs	r0, #2
 8006f44:	f7f9 ff78 	bl	8000e38 <printTemplate>
 8006f48:	e028      	b.n	8006f9c <takeWifiSSID+0x154>
            	} else if(page == 3) {
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d109      	bne.n	8006f64 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8006f50:	2301      	movs	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	3301      	adds	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	2002      	movs	r0, #2
 8006f5e:	f7f9 ff6b 	bl	8000e38 <printTemplate>
 8006f62:	e01b      	b.n	8006f9c <takeWifiSSID+0x154>
            	} else if(page == 4) {
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d109      	bne.n	8006f7e <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	3301      	adds	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006f74:	2105      	movs	r1, #5
 8006f76:	2002      	movs	r0, #2
 8006f78:	f7f9 ff5e 	bl	8000e38 <printTemplate>
 8006f7c:	e00e      	b.n	8006f9c <takeWifiSSID+0x154>
            	} else if(page == 5) {
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d10b      	bne.n	8006f9c <takeWifiSSID+0x154>
            		cursorPosition = 1;
 8006f84:	2301      	movs	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	2002      	movs	r0, #2
 8006f90:	f7f9 ff52 	bl	8000e38 <printTemplate>
 8006f94:	e002      	b.n	8006f9c <takeWifiSSID+0x154>
            	}
            } else {
            	cursorPosition++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006f9c:	2096      	movs	r0, #150	; 0x96
 8006f9e:	f001 fbcb 	bl	8008738 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006fa2:	2108      	movs	r1, #8
 8006fa4:	482c      	ldr	r0, [pc, #176]	; (8007058 <takeWifiSSID+0x210>)
 8006fa6:	f002 f997 	bl	80092d8 <HAL_GPIO_ReadPin>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d15b      	bne.n	8007068 <takeWifiSSID+0x220>
        	if(cursorPosition < 1) {
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dc01      	bgt.n	8006fba <takeWifiSSID+0x172>
        		cursorPosition = 80;
 8006fb6:	2350      	movs	r3, #80	; 0x50
 8006fb8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d14d      	bne.n	800705c <takeWifiSSID+0x214>
            	if(page == 1) {
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d108      	bne.n	8006fd8 <takeWifiSSID+0x190>
            		cursorPosition = 16;
 8006fc6:	2310      	movs	r3, #16
 8006fc8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8006fca:	2305      	movs	r3, #5
 8006fcc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006fce:	2105      	movs	r1, #5
 8006fd0:	2002      	movs	r0, #2
 8006fd2:	f7f9 ff31 	bl	8000e38 <printTemplate>
 8006fd6:	e044      	b.n	8007062 <takeWifiSSID+0x21a>
            	} else if(page == 2) {
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d108      	bne.n	8006ff0 <takeWifiSSID+0x1a8>
            		cursorPosition = 16;
 8006fde:	2310      	movs	r3, #16
 8006fe0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	2002      	movs	r0, #2
 8006fea:	f7f9 ff25 	bl	8000e38 <printTemplate>
 8006fee:	e038      	b.n	8007062 <takeWifiSSID+0x21a>
            	} else if(page == 3) {
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d108      	bne.n	8007008 <takeWifiSSID+0x1c0>
            		cursorPosition = 16;
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006ffe:	2102      	movs	r1, #2
 8007000:	2002      	movs	r0, #2
 8007002:	f7f9 ff19 	bl	8000e38 <printTemplate>
 8007006:	e02c      	b.n	8007062 <takeWifiSSID+0x21a>
            	} else if(page == 4) {
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d108      	bne.n	8007020 <takeWifiSSID+0x1d8>
            		cursorPosition = 16;
 800700e:	2310      	movs	r3, #16
 8007010:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007012:	2303      	movs	r3, #3
 8007014:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007016:	2103      	movs	r1, #3
 8007018:	2002      	movs	r0, #2
 800701a:	f7f9 ff0d 	bl	8000e38 <printTemplate>
 800701e:	e020      	b.n	8007062 <takeWifiSSID+0x21a>
            	} else if(page == 5) {
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b05      	cmp	r3, #5
 8007024:	d11d      	bne.n	8007062 <takeWifiSSID+0x21a>
            		cursorPosition = 16;
 8007026:	2310      	movs	r3, #16
 8007028:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800702a:	2304      	movs	r3, #4
 800702c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800702e:	2104      	movs	r1, #4
 8007030:	2002      	movs	r0, #2
 8007032:	f7f9 ff01 	bl	8000e38 <printTemplate>
 8007036:	e014      	b.n	8007062 <takeWifiSSID+0x21a>
 8007038:	200001b0 	.word	0x200001b0
 800703c:	200001e4 	.word	0x200001e4
 8007040:	20000008 	.word	0x20000008
 8007044:	40010800 	.word	0x40010800
 8007048:	0800dc00 	.word	0x0800dc00
 800704c:	0800dc14 	.word	0x0800dc14
 8007050:	2000012c 	.word	0x2000012c
 8007054:	200003bc 	.word	0x200003bc
 8007058:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3b01      	subs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007062:	2096      	movs	r0, #150	; 0x96
 8007064:	f001 fb68 	bl	8008738 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007068:	2102      	movs	r1, #2
 800706a:	484b      	ldr	r0, [pc, #300]	; (8007198 <takeWifiSSID+0x350>)
 800706c:	f002 f934 	bl	80092d8 <HAL_GPIO_ReadPin>
 8007070:	4603      	mov	r3, r0
 8007072:	2b01      	cmp	r3, #1
 8007074:	d13f      	bne.n	80070f6 <takeWifiSSID+0x2ae>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b01      	subs	r3, #1
 800707a:	4a48      	ldr	r2, [pc, #288]	; (800719c <takeWifiSSID+0x354>)
 800707c:	5cd1      	ldrb	r1, [r2, r3]
 800707e:	4a48      	ldr	r2, [pc, #288]	; (80071a0 <takeWifiSSID+0x358>)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4413      	add	r3, r2
 8007084:	460a      	mov	r2, r1
 8007086:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b2d9      	uxtb	r1, r3
 8007090:	4a44      	ldr	r2, [pc, #272]	; (80071a4 <takeWifiSSID+0x35c>)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4413      	add	r3, r2
 8007096:	460a      	mov	r2, r1
 8007098:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b2d9      	uxtb	r1, r3
 80070a2:	4a41      	ldr	r2, [pc, #260]	; (80071a8 <takeWifiSSID+0x360>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4413      	add	r3, r2
 80070a8:	460a      	mov	r2, r1
 80070aa:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	b2d9      	uxtb	r1, r3
 80070b0:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <takeWifiSSID+0x358>)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4413      	add	r3, r2
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	2001      	movs	r0, #1
 80070bc:	f000 fdfb 	bl	8007cb6 <lcd_print_char>

            writeLoc++;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3301      	adds	r3, #1
 80070c4:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3301      	adds	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]

            wifiSSID[arrayPosition] = '\0';
 80070d2:	4a33      	ldr	r2, [pc, #204]	; (80071a0 <takeWifiSSID+0x358>)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4413      	add	r3, r2
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 80070dc:	4a31      	ldr	r2, [pc, #196]	; (80071a4 <takeWifiSSID+0x35c>)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80070e6:	4a30      	ldr	r2, [pc, #192]	; (80071a8 <takeWifiSSID+0x360>)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80070f0:	2096      	movs	r0, #150	; 0x96
 80070f2:	f001 fb21 	bl	8008738 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80070f6:	2104      	movs	r1, #4
 80070f8:	4827      	ldr	r0, [pc, #156]	; (8007198 <takeWifiSSID+0x350>)
 80070fa:	f002 f8ed 	bl	80092d8 <HAL_GPIO_ReadPin>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d13e      	bne.n	8007182 <takeWifiSSID+0x33a>
        	if(strlen(wifiSSID) >= 1) {
 8007104:	4b26      	ldr	r3, [pc, #152]	; (80071a0 <takeWifiSSID+0x358>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d037      	beq.n	800717c <takeWifiSSID+0x334>
        		wifiSSID[arrayPosition] = '\0';
 800710c:	4a24      	ldr	r2, [pc, #144]	; (80071a0 <takeWifiSSID+0x358>)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4413      	add	r3, r2
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 8007116:	4a23      	ldr	r2, [pc, #140]	; (80071a4 <takeWifiSSID+0x35c>)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4413      	add	r3, r2
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007120:	4a21      	ldr	r2, [pc, #132]	; (80071a8 <takeWifiSSID+0x360>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b07      	cmp	r3, #7
 800712e:	dd03      	ble.n	8007138 <takeWifiSSID+0x2f0>
        			writeLoc--;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	3b01      	subs	r3, #1
 8007134:	613b      	str	r3, [r7, #16]
 8007136:	e004      	b.n	8007142 <takeWifiSSID+0x2fa>
        		} else if(writeLoc < 7) {
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b06      	cmp	r3, #6
 800713c:	dc01      	bgt.n	8007142 <takeWifiSSID+0x2fa>
        			writeLoc = 7;
 800713e:	2307      	movs	r3, #7
 8007140:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd06      	ble.n	8007156 <takeWifiSSID+0x30e>
        			arrayPosition--;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3b01      	subs	r3, #1
 800714c:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3b01      	subs	r3, #1
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	e007      	b.n	8007166 <takeWifiSSID+0x31e>
        		} else if(arrayPosition < 0) {
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	da04      	bge.n	8007166 <takeWifiSSID+0x31e>
        			arrayPosition = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <takeWifiSSID+0x364>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	3306      	adds	r3, #6
 800716c:	b2db      	uxtb	r3, r3
 800716e:	4619      	mov	r1, r3
 8007170:	2001      	movs	r0, #1
 8007172:	f000 fdc1 	bl	8007cf8 <lcd_delete_char>
        		HAL_Delay(50);
 8007176:	2032      	movs	r0, #50	; 0x32
 8007178:	f001 fade 	bl	8008738 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800717c:	2096      	movs	r0, #150	; 0x96
 800717e:	f001 fadb 	bl	8008738 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	4619      	mov	r1, r3
 8007188:	2002      	movs	r0, #2
 800718a:	f000 fd60 	bl	8007c4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800718e:	e680      	b.n	8006e92 <takeWifiSSID+0x4a>
    }
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40010800 	.word	0x40010800
 800719c:	2000001c 	.word	0x2000001c
 80071a0:	200001b0 	.word	0x200001b0
 80071a4:	200001e4 	.word	0x200001e4
 80071a8:	2000012c 	.word	0x2000012c
 80071ac:	20000008 	.word	0x20000008

080071b0 <takeWifiPass>:

void takeWifiPass() {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	; 0x28
 80071b4:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 80071b6:	2001      	movs	r0, #1
 80071b8:	f000 fdc6 	bl	8007d48 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 80071bc:	2214      	movs	r2, #20
 80071be:	2100      	movs	r1, #0
 80071c0:	4877      	ldr	r0, [pc, #476]	; (80073a0 <takeWifiPass+0x1f0>)
 80071c2:	f005 f8e9 	bl	800c398 <memset>
    memset(wifiPassInt, 0, sizeof(wifiPassInt));
 80071c6:	2214      	movs	r2, #20
 80071c8:	2100      	movs	r1, #0
 80071ca:	4876      	ldr	r0, [pc, #472]	; (80073a4 <takeWifiPass+0x1f4>)
 80071cc:	f005 f8e4 	bl	800c398 <memset>
    resetEEPROM4Wifi(3);
 80071d0:	2003      	movs	r0, #3
 80071d2:	f7f9 fb4d 	bl	8000870 <resetEEPROM4Wifi>
    HAL_Delay(100);
 80071d6:	2064      	movs	r0, #100	; 0x64
 80071d8:	f001 faae 	bl	8008738 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 80071e0:	2307      	movs	r3, #7
 80071e2:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 80071e4:	2301      	movs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 80071e8:	2300      	movs	r3, #0
 80071ea:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 80071ec:	4b6e      	ldr	r3, [pc, #440]	; (80073a8 <takeWifiPass+0x1f8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80071f2:	2101      	movs	r1, #1
 80071f4:	2003      	movs	r0, #3
 80071f6:	f7f9 fe1f 	bl	8000e38 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80071fa:	2108      	movs	r1, #8
 80071fc:	486b      	ldr	r0, [pc, #428]	; (80073ac <takeWifiPass+0x1fc>)
 80071fe:	f002 f86b 	bl	80092d8 <HAL_GPIO_ReadPin>
 8007202:	4603      	mov	r3, r0
 8007204:	2b01      	cmp	r3, #1
 8007206:	d12b      	bne.n	8007260 <takeWifiPass+0xb0>
            lcd_cursor(0);
 8007208:	2000      	movs	r0, #0
 800720a:	f000 fd9d 	bl	8007d48 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800720e:	4864      	ldr	r0, [pc, #400]	; (80073a0 <takeWifiPass+0x1f0>)
 8007210:	f7f9 f808 	bl	8000224 <strlen>
 8007214:	4603      	mov	r3, r0
 8007216:	2b14      	cmp	r3, #20
 8007218:	d910      	bls.n	800723c <takeWifiPass+0x8c>
                lcd_clear();
 800721a:	f000 fd63 	bl	8007ce4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800721e:	4a64      	ldr	r2, [pc, #400]	; (80073b0 <takeWifiPass+0x200>)
 8007220:	2101      	movs	r1, #1
 8007222:	2001      	movs	r0, #1
 8007224:	f000 fd32 	bl	8007c8c <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007228:	4a62      	ldr	r2, [pc, #392]	; (80073b4 <takeWifiPass+0x204>)
 800722a:	2101      	movs	r1, #1
 800722c:	2002      	movs	r0, #2
 800722e:	f000 fd2d 	bl	8007c8c <lcd_print>
                HAL_Delay(1200);
 8007232:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007236:	f001 fa7f 	bl	8008738 <HAL_Delay>
                goto mainPASSSection;
 800723a:	e7bc      	b.n	80071b6 <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800723c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	236e      	movs	r3, #110	; 0x6e
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	4b5c      	ldr	r3, [pc, #368]	; (80073b8 <takeWifiPass+0x208>)
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	236e      	movs	r3, #110	; 0x6e
 800724c:	2200      	movs	r2, #0
 800724e:	21a0      	movs	r1, #160	; 0xa0
 8007250:	485a      	ldr	r0, [pc, #360]	; (80073bc <takeWifiPass+0x20c>)
 8007252:	f002 fafb 	bl	800984c <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8007256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800725a:	f001 fa6d 	bl	8008738 <HAL_Delay>

            break;
 800725e:	e136      	b.n	80074ce <takeWifiPass+0x31e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007260:	2101      	movs	r1, #1
 8007262:	4852      	ldr	r0, [pc, #328]	; (80073ac <takeWifiPass+0x1fc>)
 8007264:	f002 f838 	bl	80092d8 <HAL_GPIO_ReadPin>
 8007268:	4603      	mov	r3, r0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d14d      	bne.n	800730a <takeWifiPass+0x15a>
        	if(cursorPosition > 80) {
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b50      	cmp	r3, #80	; 0x50
 8007272:	dd01      	ble.n	8007278 <takeWifiPass+0xc8>
        	    cursorPosition = 1;
 8007274:	2301      	movs	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b10      	cmp	r3, #16
 800727c:	d13f      	bne.n	80072fe <takeWifiPass+0x14e>
            	if(page == 1) {
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d109      	bne.n	8007298 <takeWifiPass+0xe8>
            		cursorPosition = 1;
 8007284:	2301      	movs	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
            		page++;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3301      	adds	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800728e:	2102      	movs	r1, #2
 8007290:	2003      	movs	r0, #3
 8007292:	f7f9 fdd1 	bl	8000e38 <printTemplate>
 8007296:	e035      	b.n	8007304 <takeWifiPass+0x154>
            	} else if(page == 2) {
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d109      	bne.n	80072b2 <takeWifiPass+0x102>
            		cursorPosition = 1;
 800729e:	2301      	movs	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
            		page++;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	3301      	adds	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80072a8:	2103      	movs	r1, #3
 80072aa:	2003      	movs	r0, #3
 80072ac:	f7f9 fdc4 	bl	8000e38 <printTemplate>
 80072b0:	e028      	b.n	8007304 <takeWifiPass+0x154>
            	} else if(page == 3) {
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d109      	bne.n	80072cc <takeWifiPass+0x11c>
            		cursorPosition = 1;
 80072b8:	2301      	movs	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
            		page++;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3301      	adds	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80072c2:	2104      	movs	r1, #4
 80072c4:	2003      	movs	r0, #3
 80072c6:	f7f9 fdb7 	bl	8000e38 <printTemplate>
 80072ca:	e01b      	b.n	8007304 <takeWifiPass+0x154>
            	} else if(page == 4) {
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d109      	bne.n	80072e6 <takeWifiPass+0x136>
            		cursorPosition = 1;
 80072d2:	2301      	movs	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
            		page++;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	3301      	adds	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80072dc:	2105      	movs	r1, #5
 80072de:	2003      	movs	r0, #3
 80072e0:	f7f9 fdaa 	bl	8000e38 <printTemplate>
 80072e4:	e00e      	b.n	8007304 <takeWifiPass+0x154>
            	} else if(page == 5) {
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	d10b      	bne.n	8007304 <takeWifiPass+0x154>
            		cursorPosition = 1;
 80072ec:	2301      	movs	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80072f4:	2101      	movs	r1, #1
 80072f6:	2003      	movs	r0, #3
 80072f8:	f7f9 fd9e 	bl	8000e38 <printTemplate>
 80072fc:	e002      	b.n	8007304 <takeWifiPass+0x154>
            	}
            } else {
            	cursorPosition++;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3301      	adds	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007304:	2096      	movs	r0, #150	; 0x96
 8007306:	f001 fa17 	bl	8008738 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800730a:	2108      	movs	r1, #8
 800730c:	482c      	ldr	r0, [pc, #176]	; (80073c0 <takeWifiPass+0x210>)
 800730e:	f001 ffe3 	bl	80092d8 <HAL_GPIO_ReadPin>
 8007312:	4603      	mov	r3, r0
 8007314:	2b01      	cmp	r3, #1
 8007316:	d15b      	bne.n	80073d0 <takeWifiPass+0x220>
        	if(cursorPosition < 1) {
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc01      	bgt.n	8007322 <takeWifiPass+0x172>
        	    cursorPosition = 80;
 800731e:	2350      	movs	r3, #80	; 0x50
 8007320:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d14d      	bne.n	80073c4 <takeWifiPass+0x214>
            	if(page == 1) {
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d108      	bne.n	8007340 <takeWifiPass+0x190>
            		cursorPosition = 16;
 800732e:	2310      	movs	r3, #16
 8007330:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007332:	2305      	movs	r3, #5
 8007334:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007336:	2105      	movs	r1, #5
 8007338:	2003      	movs	r0, #3
 800733a:	f7f9 fd7d 	bl	8000e38 <printTemplate>
 800733e:	e044      	b.n	80073ca <takeWifiPass+0x21a>
            	} else if(page == 2) {
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d108      	bne.n	8007358 <takeWifiPass+0x1a8>
            		cursorPosition = 16;
 8007346:	2310      	movs	r3, #16
 8007348:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800734e:	2101      	movs	r1, #1
 8007350:	2003      	movs	r0, #3
 8007352:	f7f9 fd71 	bl	8000e38 <printTemplate>
 8007356:	e038      	b.n	80073ca <takeWifiPass+0x21a>
            	} else if(page == 3) {
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d108      	bne.n	8007370 <takeWifiPass+0x1c0>
            		cursorPosition = 16;
 800735e:	2310      	movs	r3, #16
 8007360:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007362:	2302      	movs	r3, #2
 8007364:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007366:	2102      	movs	r1, #2
 8007368:	2003      	movs	r0, #3
 800736a:	f7f9 fd65 	bl	8000e38 <printTemplate>
 800736e:	e02c      	b.n	80073ca <takeWifiPass+0x21a>
            	} else if(page == 4) {
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d108      	bne.n	8007388 <takeWifiPass+0x1d8>
            		cursorPosition = 16;
 8007376:	2310      	movs	r3, #16
 8007378:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800737a:	2303      	movs	r3, #3
 800737c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800737e:	2103      	movs	r1, #3
 8007380:	2003      	movs	r0, #3
 8007382:	f7f9 fd59 	bl	8000e38 <printTemplate>
 8007386:	e020      	b.n	80073ca <takeWifiPass+0x21a>
            	} else if(page == 5) {
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b05      	cmp	r3, #5
 800738c:	d11d      	bne.n	80073ca <takeWifiPass+0x21a>
            		cursorPosition = 16;
 800738e:	2310      	movs	r3, #16
 8007390:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007392:	2304      	movs	r3, #4
 8007394:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007396:	2104      	movs	r1, #4
 8007398:	2003      	movs	r0, #3
 800739a:	f7f9 fd4d 	bl	8000e38 <printTemplate>
 800739e:	e014      	b.n	80073ca <takeWifiPass+0x21a>
 80073a0:	200001c4 	.word	0x200001c4
 80073a4:	200001f8 	.word	0x200001f8
 80073a8:	2000000c 	.word	0x2000000c
 80073ac:	40010800 	.word	0x40010800
 80073b0:	0800dc00 	.word	0x0800dc00
 80073b4:	0800dc28 	.word	0x0800dc28
 80073b8:	2000012c 	.word	0x2000012c
 80073bc:	200003bc 	.word	0x200003bc
 80073c0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80073ca:	2096      	movs	r0, #150	; 0x96
 80073cc:	f001 f9b4 	bl	8008738 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80073d0:	2102      	movs	r1, #2
 80073d2:	4841      	ldr	r0, [pc, #260]	; (80074d8 <takeWifiPass+0x328>)
 80073d4:	f001 ff80 	bl	80092d8 <HAL_GPIO_ReadPin>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d13f      	bne.n	800745e <takeWifiPass+0x2ae>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	4a3e      	ldr	r2, [pc, #248]	; (80074dc <takeWifiPass+0x32c>)
 80073e4:	5cd1      	ldrb	r1, [r2, r3]
 80073e6:	4a3e      	ldr	r2, [pc, #248]	; (80074e0 <takeWifiPass+0x330>)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4413      	add	r3, r2
 80073ec:	460a      	mov	r2, r1
 80073ee:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b2d9      	uxtb	r1, r3
 80073f8:	4a3a      	ldr	r2, [pc, #232]	; (80074e4 <takeWifiPass+0x334>)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	4413      	add	r3, r2
 80073fe:	460a      	mov	r2, r1
 8007400:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b2d9      	uxtb	r1, r3
 800740a:	4a37      	ldr	r2, [pc, #220]	; (80074e8 <takeWifiPass+0x338>)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	460a      	mov	r2, r1
 8007412:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	b2d9      	uxtb	r1, r3
 8007418:	4a31      	ldr	r2, [pc, #196]	; (80074e0 <takeWifiPass+0x330>)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	2001      	movs	r0, #1
 8007424:	f000 fc47 	bl	8007cb6 <lcd_print_char>

            writeLoc++;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3301      	adds	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
            arrayPos++;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3301      	adds	r3, #1
 8007432:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3301      	adds	r3, #1
 8007438:	607b      	str	r3, [r7, #4]

            wifiPass[arrayPos] = '\0';
 800743a:	4a29      	ldr	r2, [pc, #164]	; (80074e0 <takeWifiPass+0x330>)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4413      	add	r3, r2
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
            wifiPassInt[arrayPos] = '\0';
 8007444:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <takeWifiPass+0x334>)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4413      	add	r3, r2
 800744a:	2200      	movs	r2, #0
 800744c:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 800744e:	4a26      	ldr	r2, [pc, #152]	; (80074e8 <takeWifiPass+0x338>)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007458:	2096      	movs	r0, #150	; 0x96
 800745a:	f001 f96d 	bl	8008738 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800745e:	2104      	movs	r1, #4
 8007460:	481d      	ldr	r0, [pc, #116]	; (80074d8 <takeWifiPass+0x328>)
 8007462:	f001 ff39 	bl	80092d8 <HAL_GPIO_ReadPin>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d129      	bne.n	80074c0 <takeWifiPass+0x310>
            if(strlen(wifiPass) >= 1) {
 800746c:	4b1c      	ldr	r3, [pc, #112]	; (80074e0 <takeWifiPass+0x330>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d022      	beq.n	80074ba <takeWifiPass+0x30a>
            	wifiPass[arrayPos] = '\0';
 8007474:	4a1a      	ldr	r2, [pc, #104]	; (80074e0 <takeWifiPass+0x330>)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4413      	add	r3, r2
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 800747e:	4a19      	ldr	r2, [pc, #100]	; (80074e4 <takeWifiPass+0x334>)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4413      	add	r3, r2
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <takeWifiPass+0x338>)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3b01      	subs	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3b01      	subs	r3, #1
 800749c:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	3306      	adds	r3, #6
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	2001      	movs	r0, #1
 80074b0:	f000 fc22 	bl	8007cf8 <lcd_delete_char>
            	HAL_Delay(50);
 80074b4:	2032      	movs	r0, #50	; 0x32
 80074b6:	f001 f93f 	bl	8008738 <HAL_Delay>
            }

            HAL_Delay(150);
 80074ba:	2096      	movs	r0, #150	; 0x96
 80074bc:	f001 f93c 	bl	8008738 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	4619      	mov	r1, r3
 80074c6:	2002      	movs	r0, #2
 80074c8:	f000 fbc1 	bl	8007c4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80074cc:	e695      	b.n	80071fa <takeWifiPass+0x4a>
    }
}
 80074ce:	bf00      	nop
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	40010800 	.word	0x40010800
 80074dc:	2000001c 	.word	0x2000001c
 80074e0:	200001c4 	.word	0x200001c4
 80074e4:	200001f8 	.word	0x200001f8
 80074e8:	2000012c 	.word	0x2000012c

080074ec <mergeData>:

char* mergeData() {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b09c      	sub	sp, #112	; 0x70
 80074f0:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80074f2:	2300      	movs	r3, #0
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80074fa:	2228      	movs	r2, #40	; 0x28
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f004 ff4a 	bl	800c398 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007504:	4b67      	ldr	r3, [pc, #412]	; (80076a4 <mergeData+0x1b8>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	713b      	strb	r3, [r7, #4]
 800750a:	4b67      	ldr	r3, [pc, #412]	; (80076a8 <mergeData+0x1bc>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	717b      	strb	r3, [r7, #5]
 8007510:	4b66      	ldr	r3, [pc, #408]	; (80076ac <mergeData+0x1c0>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	71bb      	strb	r3, [r7, #6]
 8007516:	4b66      	ldr	r3, [pc, #408]	; (80076b0 <mergeData+0x1c4>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	71fb      	strb	r3, [r7, #7]
 800751c:	4b65      	ldr	r3, [pc, #404]	; (80076b4 <mergeData+0x1c8>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	723b      	strb	r3, [r7, #8]
 8007522:	4b65      	ldr	r3, [pc, #404]	; (80076b8 <mergeData+0x1cc>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	727b      	strb	r3, [r7, #9]
 8007528:	4b64      	ldr	r3, [pc, #400]	; (80076bc <mergeData+0x1d0>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	72bb      	strb	r3, [r7, #10]
 800752e:	4b64      	ldr	r3, [pc, #400]	; (80076c0 <mergeData+0x1d4>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	72fb      	strb	r3, [r7, #11]
 8007534:	4b63      	ldr	r3, [pc, #396]	; (80076c4 <mergeData+0x1d8>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	733b      	strb	r3, [r7, #12]
 800753a:	4b63      	ldr	r3, [pc, #396]	; (80076c8 <mergeData+0x1dc>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	737b      	strb	r3, [r7, #13]
 8007540:	4b62      	ldr	r3, [pc, #392]	; (80076cc <mergeData+0x1e0>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	73bb      	strb	r3, [r7, #14]
 8007546:	4b62      	ldr	r3, [pc, #392]	; (80076d0 <mergeData+0x1e4>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	73fb      	strb	r3, [r7, #15]
 800754c:	4b61      	ldr	r3, [pc, #388]	; (80076d4 <mergeData+0x1e8>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	743b      	strb	r3, [r7, #16]
 8007552:	4b61      	ldr	r3, [pc, #388]	; (80076d8 <mergeData+0x1ec>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	747b      	strb	r3, [r7, #17]
 8007558:	4b60      	ldr	r3, [pc, #384]	; (80076dc <mergeData+0x1f0>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	74bb      	strb	r3, [r7, #18]
 800755e:	4b60      	ldr	r3, [pc, #384]	; (80076e0 <mergeData+0x1f4>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	74fb      	strb	r3, [r7, #19]
 8007564:	4b5f      	ldr	r3, [pc, #380]	; (80076e4 <mergeData+0x1f8>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	753b      	strb	r3, [r7, #20]
 800756a:	4b5f      	ldr	r3, [pc, #380]	; (80076e8 <mergeData+0x1fc>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	757b      	strb	r3, [r7, #21]
 8007570:	4b5e      	ldr	r3, [pc, #376]	; (80076ec <mergeData+0x200>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	75bb      	strb	r3, [r7, #22]
 8007576:	4b5e      	ldr	r3, [pc, #376]	; (80076f0 <mergeData+0x204>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	75fb      	strb	r3, [r7, #23]
 800757c:	4b5d      	ldr	r3, [pc, #372]	; (80076f4 <mergeData+0x208>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	763b      	strb	r3, [r7, #24]
 8007582:	4b5d      	ldr	r3, [pc, #372]	; (80076f8 <mergeData+0x20c>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	767b      	strb	r3, [r7, #25]
 8007588:	4b5c      	ldr	r3, [pc, #368]	; (80076fc <mergeData+0x210>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	76bb      	strb	r3, [r7, #26]
 800758e:	4b5c      	ldr	r3, [pc, #368]	; (8007700 <mergeData+0x214>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	76fb      	strb	r3, [r7, #27]
 8007594:	4b5b      	ldr	r3, [pc, #364]	; (8007704 <mergeData+0x218>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	773b      	strb	r3, [r7, #28]
 800759a:	4b5b      	ldr	r3, [pc, #364]	; (8007708 <mergeData+0x21c>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	777b      	strb	r3, [r7, #29]
 80075a0:	4b5a      	ldr	r3, [pc, #360]	; (800770c <mergeData+0x220>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	77bb      	strb	r3, [r7, #30]
 80075a6:	4b5a      	ldr	r3, [pc, #360]	; (8007710 <mergeData+0x224>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	4b59      	ldr	r3, [pc, #356]	; (8007714 <mergeData+0x228>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f887 3020 	strb.w	r3, [r7, #32]
 80075b4:	4b58      	ldr	r3, [pc, #352]	; (8007718 <mergeData+0x22c>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80075bc:	4b57      	ldr	r3, [pc, #348]	; (800771c <mergeData+0x230>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075c4:	4b56      	ldr	r3, [pc, #344]	; (8007720 <mergeData+0x234>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075cc:	4b55      	ldr	r3, [pc, #340]	; (8007724 <mergeData+0x238>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80075d4:	4b54      	ldr	r3, [pc, #336]	; (8007728 <mergeData+0x23c>)
 80075d6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80075da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80075de:	4b52      	ldr	r3, [pc, #328]	; (8007728 <mergeData+0x23c>)
 80075e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80075e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80075e8:	4b4f      	ldr	r3, [pc, #316]	; (8007728 <mergeData+0x23c>)
 80075ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80075ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80075f2:	4b4d      	ldr	r3, [pc, #308]	; (8007728 <mergeData+0x23c>)
 80075f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80075f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80075fc:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <mergeData+0x23c>)
 80075fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007602:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007606:	4b48      	ldr	r3, [pc, #288]	; (8007728 <mergeData+0x23c>)
 8007608:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800760c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007610:	4b45      	ldr	r3, [pc, #276]	; (8007728 <mergeData+0x23c>)
 8007612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800761a:	4b43      	ldr	r3, [pc, #268]	; (8007728 <mergeData+0x23c>)
 800761c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007620:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007624:	4b40      	ldr	r3, [pc, #256]	; (8007728 <mergeData+0x23c>)
 8007626:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800762a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800762e:	4b3e      	ldr	r3, [pc, #248]	; (8007728 <mergeData+0x23c>)
 8007630:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007634:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007638:	2306      	movs	r3, #6
 800763a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800763e:	2300      	movs	r3, #0
 8007640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007642:	e015      	b.n	8007670 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007644:	1d3a      	adds	r2, r7, #4
 8007646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007648:	4413      	add	r3, r2
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007652:	4936      	ldr	r1, [pc, #216]	; (800772c <mergeData+0x240>)
 8007654:	4618      	mov	r0, r3
 8007656:	f004 ff93 	bl	800c580 <siprintf>
	    strcat(combinedString, temp);
 800765a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800765e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f004 ffab 	bl	800c5c0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800766a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766c:	3301      	adds	r3, #1
 800766e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007672:	2b2b      	cmp	r3, #43	; 0x2b
 8007674:	d9e6      	bls.n	8007644 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007676:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800767a:	4618      	mov	r0, r3
 800767c:	f7f8 fdd2 	bl	8000224 <strlen>
 8007680:	4603      	mov	r3, r0
 8007682:	3301      	adds	r3, #1
 8007684:	4618      	mov	r0, r3
 8007686:	f004 fe7f 	bl	800c388 <malloc>
 800768a:	4603      	mov	r3, r0
 800768c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800768e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007692:	4619      	mov	r1, r3
 8007694:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007696:	f004 ffa2 	bl	800c5de <strcpy>
	return result;
 800769a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800769c:	4618      	mov	r0, r3
 800769e:	3770      	adds	r7, #112	; 0x70
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000243 	.word	0x20000243
 80076a8:	20000235 	.word	0x20000235
 80076ac:	20000238 	.word	0x20000238
 80076b0:	20000239 	.word	0x20000239
 80076b4:	2000023a 	.word	0x2000023a
 80076b8:	20000241 	.word	0x20000241
 80076bc:	2000023b 	.word	0x2000023b
 80076c0:	2000023c 	.word	0x2000023c
 80076c4:	20000240 	.word	0x20000240
 80076c8:	2000023d 	.word	0x2000023d
 80076cc:	2000024d 	.word	0x2000024d
 80076d0:	2000023e 	.word	0x2000023e
 80076d4:	2000024e 	.word	0x2000024e
 80076d8:	2000023f 	.word	0x2000023f
 80076dc:	2000024f 	.word	0x2000024f
 80076e0:	20000242 	.word	0x20000242
 80076e4:	20000244 	.word	0x20000244
 80076e8:	20000245 	.word	0x20000245
 80076ec:	20000246 	.word	0x20000246
 80076f0:	20000247 	.word	0x20000247
 80076f4:	20000248 	.word	0x20000248
 80076f8:	20000249 	.word	0x20000249
 80076fc:	2000024a 	.word	0x2000024a
 8007700:	2000024b 	.word	0x2000024b
 8007704:	2000024c 	.word	0x2000024c
 8007708:	20000250 	.word	0x20000250
 800770c:	20000252 	.word	0x20000252
 8007710:	20000231 	.word	0x20000231
 8007714:	20000232 	.word	0x20000232
 8007718:	20000000 	.word	0x20000000
 800771c:	20000001 	.word	0x20000001
 8007720:	20000233 	.word	0x20000233
 8007724:	20000255 	.word	0x20000255
 8007728:	2000012c 	.word	0x2000012c
 800772c:	0800dc3c 	.word	0x0800dc3c

08007730 <convertAndSendData>:

void convertAndSendData() {
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007734:	4b14      	ldr	r3, [pc, #80]	; (8007788 <convertAndSendData+0x58>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <convertAndSendData+0x5c>)
 800773e:	2101      	movs	r1, #1
 8007740:	2001      	movs	r0, #1
 8007742:	f000 faa3 	bl	8007c8c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007746:	4a12      	ldr	r2, [pc, #72]	; (8007790 <convertAndSendData+0x60>)
 8007748:	2101      	movs	r1, #1
 800774a:	2002      	movs	r0, #2
 800774c:	f000 fa9e 	bl	8007c8c <lcd_print>
 8007750:	e009      	b.n	8007766 <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <convertAndSendData+0x64>)
 8007754:	2101      	movs	r1, #1
 8007756:	2001      	movs	r0, #1
 8007758:	f000 fa98 	bl	8007c8c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 800775c:	4a0e      	ldr	r2, [pc, #56]	; (8007798 <convertAndSendData+0x68>)
 800775e:	2101      	movs	r1, #1
 8007760:	2002      	movs	r0, #2
 8007762:	f000 fa93 	bl	8007c8c <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 8007766:	f7ff fec1 	bl	80074ec <mergeData>
 800776a:	4603      	mov	r3, r0
 800776c:	461a      	mov	r2, r3
 800776e:	490b      	ldr	r1, [pc, #44]	; (800779c <convertAndSendData+0x6c>)
 8007770:	480b      	ldr	r0, [pc, #44]	; (80077a0 <convertAndSendData+0x70>)
 8007772:	f7f9 f8d3 	bl	800091c <sendMachineData>

	HAL_Delay(500);
 8007776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800777a:	f000 ffdd 	bl	8008738 <HAL_Delay>
	lcd_clear();
 800777e:	f000 fab1 	bl	8007ce4 <lcd_clear>
}
 8007782:	bf00      	nop
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000255 	.word	0x20000255
 800778c:	0800dc40 	.word	0x0800dc40
 8007790:	0800dc54 	.word	0x0800dc54
 8007794:	0800dc68 	.word	0x0800dc68
 8007798:	0800dc7c 	.word	0x0800dc7c
 800779c:	200001a4 	.word	0x200001a4
 80077a0:	20000458 	.word	0x20000458

080077a4 <iotSetup>:

void iotSetup() {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80077a8:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <iotSetup+0x40>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d017      	beq.n	80077e0 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 80077b0:	480d      	ldr	r0, [pc, #52]	; (80077e8 <iotSetup+0x44>)
 80077b2:	f7f8 fd37 	bl	8000224 <strlen>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b0c      	cmp	r3, #12
 80077ba:	d001      	beq.n	80077c0 <iotSetup+0x1c>
			takeMachineID();
 80077bc:	f7ff f9aa 	bl	8006b14 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80077c0:	480a      	ldr	r0, [pc, #40]	; (80077ec <iotSetup+0x48>)
 80077c2:	f7f8 fd2f 	bl	8000224 <strlen>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d801      	bhi.n	80077d0 <iotSetup+0x2c>
			takeWifiSSID();
 80077cc:	f7ff fb3c 	bl	8006e48 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80077d0:	4807      	ldr	r0, [pc, #28]	; (80077f0 <iotSetup+0x4c>)
 80077d2:	f7f8 fd27 	bl	8000224 <strlen>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d801      	bhi.n	80077e0 <iotSetup+0x3c>
			takeWifiPass();
 80077dc:	f7ff fce8 	bl	80071b0 <takeWifiPass>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 80077e0:	bf00      	nop
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000253 	.word	0x20000253
 80077e8:	200001a4 	.word	0x200001a4
 80077ec:	200001b0 	.word	0x200001b0
 80077f0:	200001c4 	.word	0x200001c4

080077f4 <printMachineCredentials>:

void printMachineCredentials(int state) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08c      	sub	sp, #48	; 0x30
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d11f      	bne.n	8007842 <printMachineCredentials+0x4e>
		int idLength = strlen(machineID);
 8007802:	4853      	ldr	r0, [pc, #332]	; (8007950 <printMachineCredentials+0x15c>)
 8007804:	f7f8 fd0e 	bl	8000224 <strlen>
 8007808:	4603      	mov	r3, r0
 800780a:	62fb      	str	r3, [r7, #44]	; 0x2c

		lcd_print(2, 1, machineID);
 800780c:	4a50      	ldr	r2, [pc, #320]	; (8007950 <printMachineCredentials+0x15c>)
 800780e:	2101      	movs	r1, #1
 8007810:	2002      	movs	r0, #2
 8007812:	f000 fa3b 	bl	8007c8c <lcd_print>
		for(int i=0; i<16-idLength; i++) {
 8007816:	2300      	movs	r3, #0
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
 800781a:	e00b      	b.n	8007834 <printMachineCredentials+0x40>
			lcd_delete_char(2, idLength);
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	2002      	movs	r0, #2
 8007824:	f000 fa68 	bl	8007cf8 <lcd_delete_char>
			idLength++;
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	3301      	adds	r3, #1
 800782c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0; i<16-idLength; i++) {
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	3301      	adds	r3, #1
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	f1c3 0310 	rsb	r3, r3, #16
 800783a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783c:	429a      	cmp	r2, r3
 800783e:	dbed      	blt.n	800781c <printMachineCredentials+0x28>
				lcd_print_char(2, lcdVal, wifiPass[i]);
				lcdVal++;
			}
		}
	}
}
 8007840:	e081      	b.n	8007946 <printMachineCredentials+0x152>
	} else if(state == 2) {
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d13f      	bne.n	80078c8 <printMachineCredentials+0xd4>
		int ssidLength = strlen(wifiSSID);
 8007848:	4842      	ldr	r0, [pc, #264]	; (8007954 <printMachineCredentials+0x160>)
 800784a:	f7f8 fceb 	bl	8000224 <strlen>
 800784e:	4603      	mov	r3, r0
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
		if(ssidLength == 16) {
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	2b10      	cmp	r3, #16
 8007856:	d105      	bne.n	8007864 <printMachineCredentials+0x70>
			lcd_print(2, 1, wifiSSID);
 8007858:	4a3e      	ldr	r2, [pc, #248]	; (8007954 <printMachineCredentials+0x160>)
 800785a:	2101      	movs	r1, #1
 800785c:	2002      	movs	r0, #2
 800785e:	f000 fa15 	bl	8007c8c <lcd_print>
}
 8007862:	e070      	b.n	8007946 <printMachineCredentials+0x152>
		} else if(ssidLength < 16) {
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	2b0f      	cmp	r3, #15
 8007868:	dc15      	bgt.n	8007896 <printMachineCredentials+0xa2>
			for(int i=0; i<16-ssidLength; i++) {
 800786a:	2300      	movs	r3, #0
 800786c:	623b      	str	r3, [r7, #32]
 800786e:	e00b      	b.n	8007888 <printMachineCredentials+0x94>
				lcd_delete_char(2, ssidLength);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	b2db      	uxtb	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	2002      	movs	r0, #2
 8007878:	f000 fa3e 	bl	8007cf8 <lcd_delete_char>
				ssidLength++;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	3301      	adds	r3, #1
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i=0; i<16-ssidLength; i++) {
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	3301      	adds	r3, #1
 8007886:	623b      	str	r3, [r7, #32]
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	f1c3 0310 	rsb	r3, r3, #16
 800788e:	6a3a      	ldr	r2, [r7, #32]
 8007890:	429a      	cmp	r2, r3
 8007892:	dbed      	blt.n	8007870 <printMachineCredentials+0x7c>
}
 8007894:	e057      	b.n	8007946 <printMachineCredentials+0x152>
			int lcdVal = 1;
 8007896:	2301      	movs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	e00f      	b.n	80078c0 <printMachineCredentials+0xcc>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	b2d9      	uxtb	r1, r3
 80078a4:	4a2b      	ldr	r2, [pc, #172]	; (8007954 <printMachineCredentials+0x160>)
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	4413      	add	r3, r2
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	2002      	movs	r0, #2
 80078b0:	f000 fa01 	bl	8007cb6 <lcd_print_char>
				lcdVal++;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3301      	adds	r3, #1
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	ddec      	ble.n	80078a0 <printMachineCredentials+0xac>
}
 80078c6:	e03e      	b.n	8007946 <printMachineCredentials+0x152>
		int passLength = strlen(wifiPass);
 80078c8:	4823      	ldr	r0, [pc, #140]	; (8007958 <printMachineCredentials+0x164>)
 80078ca:	f7f8 fcab 	bl	8000224 <strlen>
 80078ce:	4603      	mov	r3, r0
 80078d0:	617b      	str	r3, [r7, #20]
		if(passLength == 16) {
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d105      	bne.n	80078e4 <printMachineCredentials+0xf0>
			lcd_print(2, 1, wifiPass);
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <printMachineCredentials+0x164>)
 80078da:	2101      	movs	r1, #1
 80078dc:	2002      	movs	r0, #2
 80078de:	f000 f9d5 	bl	8007c8c <lcd_print>
}
 80078e2:	e030      	b.n	8007946 <printMachineCredentials+0x152>
		} else if(passLength < 16) {
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	dc15      	bgt.n	8007916 <printMachineCredentials+0x122>
			for(int i=0; i<16-passLength; i++) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	e00b      	b.n	8007908 <printMachineCredentials+0x114>
				lcd_delete_char(2, passLength);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	2002      	movs	r0, #2
 80078f8:	f000 f9fe 	bl	8007cf8 <lcd_delete_char>
				passLength++;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3301      	adds	r3, #1
 8007900:	617b      	str	r3, [r7, #20]
			for(int i=0; i<16-passLength; i++) {
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3301      	adds	r3, #1
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f1c3 0310 	rsb	r3, r3, #16
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	429a      	cmp	r2, r3
 8007912:	dbed      	blt.n	80078f0 <printMachineCredentials+0xfc>
}
 8007914:	e017      	b.n	8007946 <printMachineCredentials+0x152>
			int lcdVal = 1;
 8007916:	2301      	movs	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
 800791e:	e00f      	b.n	8007940 <printMachineCredentials+0x14c>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	b2d9      	uxtb	r1, r3
 8007924:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <printMachineCredentials+0x164>)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4413      	add	r3, r2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	2002      	movs	r0, #2
 8007930:	f000 f9c1 	bl	8007cb6 <lcd_print_char>
				lcdVal++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3301      	adds	r3, #1
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b0f      	cmp	r3, #15
 8007944:	ddec      	ble.n	8007920 <printMachineCredentials+0x12c>
}
 8007946:	bf00      	nop
 8007948:	3730      	adds	r7, #48	; 0x30
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	200001a4 	.word	0x200001a4
 8007954:	200001b0 	.word	0x200001b0
 8007958:	200001c4 	.word	0x200001c4

0800795c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af02      	add	r7, sp, #8
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	f023 030f 	bic.w	r3, r3, #15
 800796c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007974:	7b7b      	ldrb	r3, [r7, #13]
 8007976:	f043 030c 	orr.w	r3, r3, #12
 800797a:	b2db      	uxtb	r3, r3
 800797c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800797e:	7b7b      	ldrb	r3, [r7, #13]
 8007980:	f043 0308 	orr.w	r3, r3, #8
 8007984:	b2db      	uxtb	r3, r3
 8007986:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007988:	7b3b      	ldrb	r3, [r7, #12]
 800798a:	f043 030c 	orr.w	r3, r3, #12
 800798e:	b2db      	uxtb	r3, r3
 8007990:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007992:	7b3b      	ldrb	r3, [r7, #12]
 8007994:	f043 0308 	orr.w	r3, r3, #8
 8007998:	b2db      	uxtb	r3, r3
 800799a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800799c:	bf00      	nop
 800799e:	4825      	ldr	r0, [pc, #148]	; (8007a34 <lcd_send_cmd+0xd8>)
 80079a0:	f002 fac3 	bl	8009f2a <HAL_I2C_GetError>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d0f9      	beq.n	800799e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079aa:	bf00      	nop
 80079ac:	4821      	ldr	r0, [pc, #132]	; (8007a34 <lcd_send_cmd+0xd8>)
 80079ae:	f002 faaf 	bl	8009f10 <HAL_I2C_GetState>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d1f9      	bne.n	80079ac <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079b8:	4b1f      	ldr	r3, [pc, #124]	; (8007a38 <lcd_send_cmd+0xdc>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d116      	bne.n	80079ee <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	e00f      	b.n	80079e6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	3310      	adds	r3, #16
 80079ca:	443b      	add	r3, r7
 80079cc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	f022 0208 	bic.w	r2, r2, #8
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	3310      	adds	r3, #16
 80079da:	443b      	add	r3, r7
 80079dc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	3301      	adds	r3, #1
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d9ec      	bls.n	80079c6 <lcd_send_cmd+0x6a>
 80079ec:	e015      	b.n	8007a1a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80079ee:	2300      	movs	r3, #0
 80079f0:	73bb      	strb	r3, [r7, #14]
 80079f2:	e00f      	b.n	8007a14 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	3310      	adds	r3, #16
 80079f8:	443b      	add	r3, r7
 80079fa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	3310      	adds	r3, #16
 8007a08:	443b      	add	r3, r7
 8007a0a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	3301      	adds	r3, #1
 8007a12:	73bb      	strb	r3, [r7, #14]
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d9ec      	bls.n	80079f4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a1a:	f107 0208 	add.w	r2, r7, #8
 8007a1e:	2364      	movs	r3, #100	; 0x64
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	2304      	movs	r3, #4
 8007a24:	214e      	movs	r1, #78	; 0x4e
 8007a26:	4803      	ldr	r0, [pc, #12]	; (8007a34 <lcd_send_cmd+0xd8>)
 8007a28:	f001 fe12 	bl	8009650 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200003bc 	.word	0x200003bc
 8007a38:	20000392 	.word	0x20000392

08007a3c <lcd_send_data>:

void lcd_send_data (char data) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	4603      	mov	r3, r0
 8007a44:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	f023 030f 	bic.w	r3, r3, #15
 8007a4c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007a54:	7b7b      	ldrb	r3, [r7, #13]
 8007a56:	f043 030d 	orr.w	r3, r3, #13
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007a5e:	7b7b      	ldrb	r3, [r7, #13]
 8007a60:	f043 0309 	orr.w	r3, r3, #9
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007a68:	7b3b      	ldrb	r3, [r7, #12]
 8007a6a:	f043 030d 	orr.w	r3, r3, #13
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007a72:	7b3b      	ldrb	r3, [r7, #12]
 8007a74:	f043 0309 	orr.w	r3, r3, #9
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a7c:	bf00      	nop
 8007a7e:	4825      	ldr	r0, [pc, #148]	; (8007b14 <lcd_send_data+0xd8>)
 8007a80:	f002 fa53 	bl	8009f2a <HAL_I2C_GetError>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d0f9      	beq.n	8007a7e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a8a:	bf00      	nop
 8007a8c:	4821      	ldr	r0, [pc, #132]	; (8007b14 <lcd_send_data+0xd8>)
 8007a8e:	f002 fa3f 	bl	8009f10 <HAL_I2C_GetState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d1f9      	bne.n	8007a8c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a98:	4b1f      	ldr	r3, [pc, #124]	; (8007b18 <lcd_send_data+0xdc>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d116      	bne.n	8007ace <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e00f      	b.n	8007ac6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	3310      	adds	r3, #16
 8007aaa:	443b      	add	r3, r7
 8007aac:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	f022 0208 	bic.w	r2, r2, #8
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	3310      	adds	r3, #16
 8007aba:	443b      	add	r3, r7
 8007abc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	73fb      	strb	r3, [r7, #15]
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d9ec      	bls.n	8007aa6 <lcd_send_data+0x6a>
 8007acc:	e015      	b.n	8007afa <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73bb      	strb	r3, [r7, #14]
 8007ad2:	e00f      	b.n	8007af4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	3310      	adds	r3, #16
 8007ad8:	443b      	add	r3, r7
 8007ada:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	f042 0208 	orr.w	r2, r2, #8
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	3310      	adds	r3, #16
 8007ae8:	443b      	add	r3, r7
 8007aea:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	3301      	adds	r3, #1
 8007af2:	73bb      	strb	r3, [r7, #14]
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d9ec      	bls.n	8007ad4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007afa:	f107 0208 	add.w	r2, r7, #8
 8007afe:	2364      	movs	r3, #100	; 0x64
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	2304      	movs	r3, #4
 8007b04:	214e      	movs	r1, #78	; 0x4e
 8007b06:	4803      	ldr	r0, [pc, #12]	; (8007b14 <lcd_send_data+0xd8>)
 8007b08:	f001 fda2 	bl	8009650 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	200003bc 	.word	0x200003bc
 8007b18:	20000392 	.word	0x20000392

08007b1c <lcd_send_string>:

void lcd_send_string (char *str) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007b24:	e006      	b.n	8007b34 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff ff84 	bl	8007a3c <lcd_send_data>
	while (*str) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f4      	bne.n	8007b26 <lcd_send_string+0xa>
	}
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	f023 030f 	bic.w	r3, r3, #15
 8007b58:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007b60:	7b7b      	ldrb	r3, [r7, #13]
 8007b62:	f043 030d 	orr.w	r3, r3, #13
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007b6a:	7b7b      	ldrb	r3, [r7, #13]
 8007b6c:	f043 0309 	orr.w	r3, r3, #9
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007b74:	7b3b      	ldrb	r3, [r7, #12]
 8007b76:	f043 030d 	orr.w	r3, r3, #13
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007b7e:	7b3b      	ldrb	r3, [r7, #12]
 8007b80:	f043 0309 	orr.w	r3, r3, #9
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b88:	bf00      	nop
 8007b8a:	4825      	ldr	r0, [pc, #148]	; (8007c20 <lcd_send_char+0xd8>)
 8007b8c:	f002 f9cd 	bl	8009f2a <HAL_I2C_GetError>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d0f9      	beq.n	8007b8a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b96:	bf00      	nop
 8007b98:	4821      	ldr	r0, [pc, #132]	; (8007c20 <lcd_send_char+0xd8>)
 8007b9a:	f002 f9b9 	bl	8009f10 <HAL_I2C_GetState>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d1f9      	bne.n	8007b98 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007ba4:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <lcd_send_char+0xdc>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d116      	bne.n	8007bda <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
 8007bb0:	e00f      	b.n	8007bd2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	3310      	adds	r3, #16
 8007bb6:	443b      	add	r3, r7
 8007bb8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	f022 0208 	bic.w	r2, r2, #8
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	443b      	add	r3, r7
 8007bc8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d9ec      	bls.n	8007bb2 <lcd_send_char+0x6a>
 8007bd8:	e015      	b.n	8007c06 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73bb      	strb	r3, [r7, #14]
 8007bde:	e00f      	b.n	8007c00 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	3310      	adds	r3, #16
 8007be4:	443b      	add	r3, r7
 8007be6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	f042 0208 	orr.w	r2, r2, #8
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	3310      	adds	r3, #16
 8007bf4:	443b      	add	r3, r7
 8007bf6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	73bb      	strb	r3, [r7, #14]
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d9ec      	bls.n	8007be0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	2364      	movs	r3, #100	; 0x64
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	2304      	movs	r3, #4
 8007c10:	214e      	movs	r1, #78	; 0x4e
 8007c12:	4803      	ldr	r0, [pc, #12]	; (8007c20 <lcd_send_char+0xd8>)
 8007c14:	f001 fd1c 	bl	8009650 <HAL_I2C_Master_Transmit>
}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	200003bc 	.word	0x200003bc
 8007c24:	20000392 	.word	0x20000392

08007c28 <lcd_init>:

void lcd_init (void) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007c2c:	2002      	movs	r0, #2
 8007c2e:	f7ff fe95 	bl	800795c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007c32:	2028      	movs	r0, #40	; 0x28
 8007c34:	f7ff fe92 	bl	800795c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007c38:	200c      	movs	r0, #12
 8007c3a:	f7ff fe8f 	bl	800795c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007c3e:	2080      	movs	r0, #128	; 0x80
 8007c40:	f7ff fe8c 	bl	800795c <lcd_send_cmd>
	lcd_backlight(1);
 8007c44:	2001      	movs	r0, #1
 8007c46:	f000 f86d 	bl	8007d24 <lcd_backlight>
}
 8007c4a:	bf00      	nop
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	4603      	mov	r3, r0
 8007c56:	460a      	mov	r2, r1
 8007c58:	71fb      	strb	r3, [r7, #7]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d106      	bne.n	8007c72 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007c64:	79bb      	ldrb	r3, [r7, #6]
 8007c66:	337f      	adds	r3, #127	; 0x7f
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fe76 	bl	800795c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007c70:	e008      	b.n	8007c84 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d105      	bne.n	8007c84 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007c78:	79bb      	ldrb	r3, [r7, #6]
 8007c7a:	3b41      	subs	r3, #65	; 0x41
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fe6c 	bl	800795c <lcd_send_cmd>
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	603a      	str	r2, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007c9c:	79ba      	ldrb	r2, [r7, #6]
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffd3 	bl	8007c4e <lcd_gotoxy>
	lcd_send_string(str);
 8007ca8:	6838      	ldr	r0, [r7, #0]
 8007caa:	f7ff ff37 	bl	8007b1c <lcd_send_string>
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	71fb      	strb	r3, [r7, #7]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	71bb      	strb	r3, [r7, #6]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007cc8:	79ba      	ldrb	r2, [r7, #6]
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff ffbd 	bl	8007c4e <lcd_gotoxy>
    lcd_send_char(ch);
 8007cd4:	797b      	ldrb	r3, [r7, #5]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff ff36 	bl	8007b48 <lcd_send_char>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <lcd_clear>:

void lcd_clear(void) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7ff fe37 	bl	800795c <lcd_send_cmd>
    HAL_Delay(2);
 8007cee:	2002      	movs	r0, #2
 8007cf0:	f000 fd22 	bl	8008738 <HAL_Delay>
}
 8007cf4:	bf00      	nop
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	460a      	mov	r2, r1
 8007d02:	71fb      	strb	r3, [r7, #7]
 8007d04:	4613      	mov	r3, r2
 8007d06:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007d08:	79ba      	ldrb	r2, [r7, #6]
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff ff9d 	bl	8007c4e <lcd_gotoxy>

    lcd_send_char(' ');
 8007d14:	2020      	movs	r0, #32
 8007d16:	f7ff ff17 	bl	8007b48 <lcd_send_char>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007d2e:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <lcd_backlight+0x20>)
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7ff fe11 	bl	800795c <lcd_send_cmd>
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000392 	.word	0x20000392

08007d48 <lcd_cursor>:

void lcd_cursor(int state) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d106      	bne.n	8007d64 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007d56:	200e      	movs	r0, #14
 8007d58:	f7ff fe00 	bl	800795c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007d5c:	200f      	movs	r0, #15
 8007d5e:	f7ff fdfd 	bl	800795c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007d62:	e002      	b.n	8007d6a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007d64:	200c      	movs	r0, #12
 8007d66:	f7ff fdf9 	bl	800795c <lcd_send_cmd>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007d7c:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	4a03      	ldr	r2, [pc, #12]	; (8007d90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d84:	6013      	str	r3, [r2, #0]
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr
 8007d90:	20000210 	.word	0x20000210

08007d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d98:	f000 fc6c 	bl	8008674 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007d9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007da0:	f000 fcca 	bl	8008738 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007da4:	f000 f89c 	bl	8007ee0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007da8:	f000 f9be 	bl	8008128 <MX_GPIO_Init>
  MX_CAN_Init();
 8007dac:	f000 f8de 	bl	8007f6c <MX_CAN_Init>
  MX_I2C1_Init();
 8007db0:	f000 f910 	bl	8007fd4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007db4:	f000 f93c 	bl	8008030 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007db8:	f000 f98c 	bl	80080d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	2140      	movs	r1, #64	; 0x40
 8007dc0:	483e      	ldr	r0, [pc, #248]	; (8007ebc <main+0x128>)
 8007dc2:	f001 faa0 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	483c      	ldr	r0, [pc, #240]	; (8007ebc <main+0x128>)
 8007dcc:	f001 fa9b 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007dd0:	200a      	movs	r0, #10
 8007dd2:	f000 fcb1 	bl	8008738 <HAL_Delay>
  lcd_init();
 8007dd6:	f7ff ff27 	bl	8007c28 <lcd_init>
  HAL_Delay(10);
 8007dda:	200a      	movs	r0, #10
 8007ddc:	f000 fcac 	bl	8008738 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007de0:	4837      	ldr	r0, [pc, #220]	; (8007ec0 <main+0x12c>)
 8007de2:	f003 f943 	bl	800b06c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007de6:	bf00      	nop
 8007de8:	4836      	ldr	r0, [pc, #216]	; (8007ec4 <main+0x130>)
 8007dea:	f002 f89e 	bl	8009f2a <HAL_I2C_GetError>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d0f9      	beq.n	8007de8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007df4:	bf00      	nop
 8007df6:	4833      	ldr	r0, [pc, #204]	; (8007ec4 <main+0x130>)
 8007df8:	f002 f88a 	bl	8009f10 <HAL_I2C_GetState>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d1f9      	bne.n	8007df6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e02:	2200      	movs	r2, #0
 8007e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e08:	482c      	ldr	r0, [pc, #176]	; (8007ebc <main+0x128>)
 8007e0a:	f001 fa7c 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e14:	4829      	ldr	r0, [pc, #164]	; (8007ebc <main+0x128>)
 8007e16:	f001 fa76 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	4827      	ldr	r0, [pc, #156]	; (8007ebc <main+0x128>)
 8007e20:	f001 fa71 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e24:	2200      	movs	r2, #0
 8007e26:	2102      	movs	r1, #2
 8007e28:	4824      	ldr	r0, [pc, #144]	; (8007ebc <main+0x128>)
 8007e2a:	f001 fa6c 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2101      	movs	r1, #1
 8007e32:	4822      	ldr	r0, [pc, #136]	; (8007ebc <main+0x128>)
 8007e34:	f001 fa67 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2120      	movs	r1, #32
 8007e3c:	4822      	ldr	r0, [pc, #136]	; (8007ec8 <main+0x134>)
 8007e3e:	f001 fa62 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2110      	movs	r1, #16
 8007e46:	4820      	ldr	r0, [pc, #128]	; (8007ec8 <main+0x134>)
 8007e48:	f001 fa5d 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	481e      	ldr	r0, [pc, #120]	; (8007ecc <main+0x138>)
 8007e52:	f001 fa58 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	481c      	ldr	r0, [pc, #112]	; (8007ecc <main+0x138>)
 8007e5c:	f001 fa53 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	2120      	movs	r1, #32
 8007e64:	4819      	ldr	r0, [pc, #100]	; (8007ecc <main+0x138>)
 8007e66:	f001 fa4e 	bl	8009306 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2110      	movs	r1, #16
 8007e6e:	4817      	ldr	r0, [pc, #92]	; (8007ecc <main+0x138>)
 8007e70:	f001 fa49 	bl	8009306 <HAL_GPIO_WritePin>

  i2cTest();
 8007e74:	f7f8 ff32 	bl	8000cdc <i2cTest>
  HAL_Delay(100);
 8007e78:	2064      	movs	r0, #100	; 0x64
 8007e7a:	f000 fc5d 	bl	8008738 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007e7e:	4a14      	ldr	r2, [pc, #80]	; (8007ed0 <main+0x13c>)
 8007e80:	2101      	movs	r1, #1
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7ff ff02 	bl	8007c8c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007e88:	4a12      	ldr	r2, [pc, #72]	; (8007ed4 <main+0x140>)
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	2002      	movs	r0, #2
 8007e8e:	f7ff fefd 	bl	8007c8c <lcd_print>
  HAL_Delay(1000);
 8007e92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e96:	f000 fc4f 	bl	8008738 <HAL_Delay>
  lcd_clear();
 8007e9a:	f7ff ff23 	bl	8007ce4 <lcd_clear>

  eepromKontrol();
 8007e9e:	f7f8 f9c9 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007ea2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ea6:	f000 fc47 	bl	8008738 <HAL_Delay>

  backLightTimer = millis;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <main+0x144>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <main+0x148>)
 8007eb0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007eb2:	f7ff fc77 	bl	80077a4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007eb6:	f7fe fc95 	bl	80067e4 <mainLoop>
 8007eba:	e7fc      	b.n	8007eb6 <main+0x122>
 8007ebc:	40010c00 	.word	0x40010c00
 8007ec0:	20000410 	.word	0x20000410
 8007ec4:	200003bc 	.word	0x200003bc
 8007ec8:	40011000 	.word	0x40011000
 8007ecc:	40010800 	.word	0x40010800
 8007ed0:	0800dc90 	.word	0x0800dc90
 8007ed4:	0800dca4 	.word	0x0800dca4
 8007ed8:	20000210 	.word	0x20000210
 8007edc:	2000022c 	.word	0x2000022c

08007ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b090      	sub	sp, #64	; 0x40
 8007ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ee6:	f107 0318 	add.w	r3, r7, #24
 8007eea:	2228      	movs	r2, #40	; 0x28
 8007eec:	2100      	movs	r1, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f004 fa52 	bl	800c398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ef4:	1d3b      	adds	r3, r7, #4
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	605a      	str	r2, [r3, #4]
 8007efc:	609a      	str	r2, [r3, #8]
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f10:	2301      	movs	r3, #1
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f14:	2302      	movs	r3, #2
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f24:	f107 0318 	add.w	r3, r7, #24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f002 fc3f 	bl	800a7ac <HAL_RCC_OscConfig>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f34:	f000 f9a2 	bl	800827c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f38:	230f      	movs	r3, #15
 8007f3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f4e:	1d3b      	adds	r3, r7, #4
 8007f50:	2102      	movs	r1, #2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 feac 	bl	800acb0 <HAL_RCC_ClockConfig>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007f5e:	f000 f98d 	bl	800827c <Error_Handler>
  }
}
 8007f62:	bf00      	nop
 8007f64:	3740      	adds	r7, #64	; 0x40
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007f70:	4b16      	ldr	r3, [pc, #88]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f72:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <MX_CAN_Init+0x64>)
 8007f74:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f78:	2210      	movs	r2, #16
 8007f7a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007f7c:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f88:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007f94:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <MX_CAN_Init+0x60>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <MX_CAN_Init+0x60>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <MX_CAN_Init+0x60>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <MX_CAN_Init+0x60>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <MX_CAN_Init+0x60>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007fb8:	4804      	ldr	r0, [pc, #16]	; (8007fcc <MX_CAN_Init+0x60>)
 8007fba:	f000 fbe1 	bl	8008780 <HAL_CAN_Init>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007fc4:	f000 f95a 	bl	800827c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007fc8:	bf00      	nop
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20000394 	.word	0x20000394
 8007fd0:	40006400 	.word	0x40006400

08007fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007fd8:	4b12      	ldr	r3, [pc, #72]	; (8008024 <MX_I2C1_Init+0x50>)
 8007fda:	4a13      	ldr	r2, [pc, #76]	; (8008028 <MX_I2C1_Init+0x54>)
 8007fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <MX_I2C1_Init+0x50>)
 8007fe0:	4a12      	ldr	r2, [pc, #72]	; (800802c <MX_I2C1_Init+0x58>)
 8007fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <MX_I2C1_Init+0x50>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007fea:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <MX_I2C1_Init+0x50>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <MX_I2C1_Init+0x50>)
 8007ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <MX_I2C1_Init+0x50>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007ffe:	4b09      	ldr	r3, [pc, #36]	; (8008024 <MX_I2C1_Init+0x50>)
 8008000:	2200      	movs	r2, #0
 8008002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <MX_I2C1_Init+0x50>)
 8008006:	2200      	movs	r2, #0
 8008008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <MX_I2C1_Init+0x50>)
 800800c:	2200      	movs	r2, #0
 800800e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008010:	4804      	ldr	r0, [pc, #16]	; (8008024 <MX_I2C1_Init+0x50>)
 8008012:	f001 f9a9 	bl	8009368 <HAL_I2C_Init>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800801c:	f000 f92e 	bl	800827c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008020:	bf00      	nop
 8008022:	bd80      	pop	{r7, pc}
 8008024:	200003bc 	.word	0x200003bc
 8008028:	40005400 	.word	0x40005400
 800802c:	00061a80 	.word	0x00061a80

08008030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008036:	f107 0308 	add.w	r3, r7, #8
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	605a      	str	r2, [r3, #4]
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008044:	463b      	mov	r3, r7
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800804c:	4b1f      	ldr	r3, [pc, #124]	; (80080cc <MX_TIM1_Init+0x9c>)
 800804e:	4a20      	ldr	r2, [pc, #128]	; (80080d0 <MX_TIM1_Init+0xa0>)
 8008050:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008052:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <MX_TIM1_Init+0x9c>)
 8008054:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008058:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <MX_TIM1_Init+0x9c>)
 800805c:	2200      	movs	r2, #0
 800805e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008060:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <MX_TIM1_Init+0x9c>)
 8008062:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008066:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008068:	4b18      	ldr	r3, [pc, #96]	; (80080cc <MX_TIM1_Init+0x9c>)
 800806a:	2200      	movs	r2, #0
 800806c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800806e:	4b17      	ldr	r3, [pc, #92]	; (80080cc <MX_TIM1_Init+0x9c>)
 8008070:	2200      	movs	r2, #0
 8008072:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008074:	4b15      	ldr	r3, [pc, #84]	; (80080cc <MX_TIM1_Init+0x9c>)
 8008076:	2200      	movs	r2, #0
 8008078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800807a:	4814      	ldr	r0, [pc, #80]	; (80080cc <MX_TIM1_Init+0x9c>)
 800807c:	f002 ffa6 	bl	800afcc <HAL_TIM_Base_Init>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008086:	f000 f8f9 	bl	800827c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800808a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800808e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008090:	f107 0308 	add.w	r3, r7, #8
 8008094:	4619      	mov	r1, r3
 8008096:	480d      	ldr	r0, [pc, #52]	; (80080cc <MX_TIM1_Init+0x9c>)
 8008098:	f003 f950 	bl	800b33c <HAL_TIM_ConfigClockSource>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080a2:	f000 f8eb 	bl	800827c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080a6:	2300      	movs	r3, #0
 80080a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080ae:	463b      	mov	r3, r7
 80080b0:	4619      	mov	r1, r3
 80080b2:	4806      	ldr	r0, [pc, #24]	; (80080cc <MX_TIM1_Init+0x9c>)
 80080b4:	f003 fb3e 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080be:	f000 f8dd 	bl	800827c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80080c2:	bf00      	nop
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000410 	.word	0x20000410
 80080d0:	40012c00 	.word	0x40012c00

080080d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80080d8:	4b11      	ldr	r3, [pc, #68]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 80080da:	4a12      	ldr	r2, [pc, #72]	; (8008124 <MX_USART1_UART_Init+0x50>)
 80080dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080de:	4b10      	ldr	r3, [pc, #64]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 80080e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080e6:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080ec:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080f2:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80080f8:	4b09      	ldr	r3, [pc, #36]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 80080fa:	220c      	movs	r2, #12
 80080fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080fe:	4b08      	ldr	r3, [pc, #32]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 8008100:	2200      	movs	r2, #0
 8008102:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 8008106:	2200      	movs	r2, #0
 8008108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800810a:	4805      	ldr	r0, [pc, #20]	; (8008120 <MX_USART1_UART_Init+0x4c>)
 800810c:	f003 fb90 	bl	800b830 <HAL_UART_Init>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008116:	f000 f8b1 	bl	800827c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800811a:	bf00      	nop
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000458 	.word	0x20000458
 8008124:	40013800 	.word	0x40013800

08008128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800812e:	f107 0310 	add.w	r3, r7, #16
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	605a      	str	r2, [r3, #4]
 8008138:	609a      	str	r2, [r3, #8]
 800813a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800813c:	4b4b      	ldr	r3, [pc, #300]	; (800826c <MX_GPIO_Init+0x144>)
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	4a4a      	ldr	r2, [pc, #296]	; (800826c <MX_GPIO_Init+0x144>)
 8008142:	f043 0310 	orr.w	r3, r3, #16
 8008146:	6193      	str	r3, [r2, #24]
 8008148:	4b48      	ldr	r3, [pc, #288]	; (800826c <MX_GPIO_Init+0x144>)
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008154:	4b45      	ldr	r3, [pc, #276]	; (800826c <MX_GPIO_Init+0x144>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	4a44      	ldr	r2, [pc, #272]	; (800826c <MX_GPIO_Init+0x144>)
 800815a:	f043 0320 	orr.w	r3, r3, #32
 800815e:	6193      	str	r3, [r2, #24]
 8008160:	4b42      	ldr	r3, [pc, #264]	; (800826c <MX_GPIO_Init+0x144>)
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800816c:	4b3f      	ldr	r3, [pc, #252]	; (800826c <MX_GPIO_Init+0x144>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	4a3e      	ldr	r2, [pc, #248]	; (800826c <MX_GPIO_Init+0x144>)
 8008172:	f043 0304 	orr.w	r3, r3, #4
 8008176:	6193      	str	r3, [r2, #24]
 8008178:	4b3c      	ldr	r3, [pc, #240]	; (800826c <MX_GPIO_Init+0x144>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008184:	4b39      	ldr	r3, [pc, #228]	; (800826c <MX_GPIO_Init+0x144>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	4a38      	ldr	r2, [pc, #224]	; (800826c <MX_GPIO_Init+0x144>)
 800818a:	f043 0308 	orr.w	r3, r3, #8
 800818e:	6193      	str	r3, [r2, #24]
 8008190:	4b36      	ldr	r3, [pc, #216]	; (800826c <MX_GPIO_Init+0x144>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800819c:	2200      	movs	r2, #0
 800819e:	21f0      	movs	r1, #240	; 0xf0
 80081a0:	4833      	ldr	r0, [pc, #204]	; (8008270 <MX_GPIO_Init+0x148>)
 80081a2:	f001 f8b0 	bl	8009306 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081a6:	2200      	movs	r2, #0
 80081a8:	f241 0130 	movw	r1, #4144	; 0x1030
 80081ac:	4831      	ldr	r0, [pc, #196]	; (8008274 <MX_GPIO_Init+0x14c>)
 80081ae:	f001 f8aa 	bl	8009306 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081b2:	2200      	movs	r2, #0
 80081b4:	f640 4107 	movw	r1, #3079	; 0xc07
 80081b8:	482f      	ldr	r0, [pc, #188]	; (8008278 <MX_GPIO_Init+0x150>)
 80081ba:	f001 f8a4 	bl	8009306 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80081be:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80081c2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	4619      	mov	r1, r3
 80081d2:	4828      	ldr	r0, [pc, #160]	; (8008274 <MX_GPIO_Init+0x14c>)
 80081d4:	f000 fe20 	bl	8008e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80081d8:	f248 130f 	movw	r3, #33039	; 0x810f
 80081dc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e6:	f107 0310 	add.w	r3, r7, #16
 80081ea:	4619      	mov	r1, r3
 80081ec:	4820      	ldr	r0, [pc, #128]	; (8008270 <MX_GPIO_Init+0x148>)
 80081ee:	f000 fe13 	bl	8008e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80081f2:	23f0      	movs	r3, #240	; 0xf0
 80081f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081f6:	2301      	movs	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081fe:	2302      	movs	r3, #2
 8008200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	4619      	mov	r1, r3
 8008208:	4819      	ldr	r0, [pc, #100]	; (8008270 <MX_GPIO_Init+0x148>)
 800820a:	f000 fe05 	bl	8008e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800820e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008214:	2301      	movs	r3, #1
 8008216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008218:	2300      	movs	r3, #0
 800821a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800821c:	2302      	movs	r3, #2
 800821e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	4619      	mov	r1, r3
 8008226:	4813      	ldr	r0, [pc, #76]	; (8008274 <MX_GPIO_Init+0x14c>)
 8008228:	f000 fdf6 	bl	8008e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800822c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008230:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008232:	2301      	movs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800823a:	2302      	movs	r3, #2
 800823c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800823e:	f107 0310 	add.w	r3, r7, #16
 8008242:	4619      	mov	r1, r3
 8008244:	480c      	ldr	r0, [pc, #48]	; (8008278 <MX_GPIO_Init+0x150>)
 8008246:	f000 fde7 	bl	8008e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800824a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800824e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008254:	2300      	movs	r3, #0
 8008256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	4619      	mov	r1, r3
 800825e:	4806      	ldr	r0, [pc, #24]	; (8008278 <MX_GPIO_Init+0x150>)
 8008260:	f000 fdda 	bl	8008e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008264:	bf00      	nop
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40021000 	.word	0x40021000
 8008270:	40010800 	.word	0x40010800
 8008274:	40011000 	.word	0x40011000
 8008278:	40010c00 	.word	0x40010c00

0800827c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008280:	bf00      	nop
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr

08008288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800828e:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <HAL_MspInit+0x5c>)
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	4a14      	ldr	r2, [pc, #80]	; (80082e4 <HAL_MspInit+0x5c>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	6193      	str	r3, [r2, #24]
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <HAL_MspInit+0x5c>)
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	60bb      	str	r3, [r7, #8]
 80082a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <HAL_MspInit+0x5c>)
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <HAL_MspInit+0x5c>)
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b0:	61d3      	str	r3, [r2, #28]
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <HAL_MspInit+0x5c>)
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ba:	607b      	str	r3, [r7, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082be:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <HAL_MspInit+0x60>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	4a04      	ldr	r2, [pc, #16]	; (80082e8 <HAL_MspInit+0x60>)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr
 80082e4:	40021000 	.word	0x40021000
 80082e8:	40010000 	.word	0x40010000

080082ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f4:	f107 0310 	add.w	r3, r7, #16
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1c      	ldr	r2, [pc, #112]	; (8008378 <HAL_CAN_MspInit+0x8c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d131      	bne.n	8008370 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800830c:	4b1b      	ldr	r3, [pc, #108]	; (800837c <HAL_CAN_MspInit+0x90>)
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	4a1a      	ldr	r2, [pc, #104]	; (800837c <HAL_CAN_MspInit+0x90>)
 8008312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008316:	61d3      	str	r3, [r2, #28]
 8008318:	4b18      	ldr	r3, [pc, #96]	; (800837c <HAL_CAN_MspInit+0x90>)
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008324:	4b15      	ldr	r3, [pc, #84]	; (800837c <HAL_CAN_MspInit+0x90>)
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	4a14      	ldr	r2, [pc, #80]	; (800837c <HAL_CAN_MspInit+0x90>)
 800832a:	f043 0304 	orr.w	r3, r3, #4
 800832e:	6193      	str	r3, [r2, #24]
 8008330:	4b12      	ldr	r3, [pc, #72]	; (800837c <HAL_CAN_MspInit+0x90>)
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800833c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800834a:	f107 0310 	add.w	r3, r7, #16
 800834e:	4619      	mov	r1, r3
 8008350:	480b      	ldr	r0, [pc, #44]	; (8008380 <HAL_CAN_MspInit+0x94>)
 8008352:	f000 fd61 	bl	8008e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800835a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800835c:	2302      	movs	r3, #2
 800835e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008360:	2303      	movs	r3, #3
 8008362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008364:	f107 0310 	add.w	r3, r7, #16
 8008368:	4619      	mov	r1, r3
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <HAL_CAN_MspInit+0x94>)
 800836c:	f000 fd54 	bl	8008e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008370:	bf00      	nop
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40006400 	.word	0x40006400
 800837c:	40021000 	.word	0x40021000
 8008380:	40010800 	.word	0x40010800

08008384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800838c:	f107 0310 	add.w	r3, r7, #16
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	605a      	str	r2, [r3, #4]
 8008396:	609a      	str	r2, [r3, #8]
 8008398:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <HAL_I2C_MspInit+0x70>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d123      	bne.n	80083ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a4:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <HAL_I2C_MspInit+0x74>)
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	4a13      	ldr	r2, [pc, #76]	; (80083f8 <HAL_I2C_MspInit+0x74>)
 80083aa:	f043 0308 	orr.w	r3, r3, #8
 80083ae:	6193      	str	r3, [r2, #24]
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <HAL_I2C_MspInit+0x74>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083bc:	23c0      	movs	r3, #192	; 0xc0
 80083be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083c0:	2312      	movs	r3, #18
 80083c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083c4:	2303      	movs	r3, #3
 80083c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c8:	f107 0310 	add.w	r3, r7, #16
 80083cc:	4619      	mov	r1, r3
 80083ce:	480b      	ldr	r0, [pc, #44]	; (80083fc <HAL_I2C_MspInit+0x78>)
 80083d0:	f000 fd22 	bl	8008e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083d4:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <HAL_I2C_MspInit+0x74>)
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	4a07      	ldr	r2, [pc, #28]	; (80083f8 <HAL_I2C_MspInit+0x74>)
 80083da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083de:	61d3      	str	r3, [r2, #28]
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <HAL_I2C_MspInit+0x74>)
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083e8:	60bb      	str	r3, [r7, #8]
 80083ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80083ec:	bf00      	nop
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40005400 	.word	0x40005400
 80083f8:	40021000 	.word	0x40021000
 80083fc:	40010c00 	.word	0x40010c00

08008400 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <HAL_I2C_MspDeInit+0x38>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d10d      	bne.n	800842e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008412:	4b0a      	ldr	r3, [pc, #40]	; (800843c <HAL_I2C_MspDeInit+0x3c>)
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	4a09      	ldr	r2, [pc, #36]	; (800843c <HAL_I2C_MspDeInit+0x3c>)
 8008418:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800841c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800841e:	2140      	movs	r1, #64	; 0x40
 8008420:	4807      	ldr	r0, [pc, #28]	; (8008440 <HAL_I2C_MspDeInit+0x40>)
 8008422:	f000 fe8d 	bl	8009140 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008426:	2180      	movs	r1, #128	; 0x80
 8008428:	4805      	ldr	r0, [pc, #20]	; (8008440 <HAL_I2C_MspDeInit+0x40>)
 800842a:	f000 fe89 	bl	8009140 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	40005400 	.word	0x40005400
 800843c:	40021000 	.word	0x40021000
 8008440:	40010c00 	.word	0x40010c00

08008444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <HAL_TIM_Base_MspInit+0x44>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <HAL_TIM_Base_MspInit+0x48>)
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	4a0c      	ldr	r2, [pc, #48]	; (800848c <HAL_TIM_Base_MspInit+0x48>)
 800845c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008460:	6193      	str	r3, [r2, #24]
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_TIM_Base_MspInit+0x48>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800846e:	2200      	movs	r2, #0
 8008470:	2100      	movs	r1, #0
 8008472:	2019      	movs	r0, #25
 8008474:	f000 fb57 	bl	8008b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008478:	2019      	movs	r0, #25
 800847a:	f000 fb70 	bl	8008b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40012c00 	.word	0x40012c00
 800848c:	40021000 	.word	0x40021000

08008490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008498:	f107 0310 	add.w	r3, r7, #16
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a20      	ldr	r2, [pc, #128]	; (800852c <HAL_UART_MspInit+0x9c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d139      	bne.n	8008524 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084b0:	4b1f      	ldr	r3, [pc, #124]	; (8008530 <HAL_UART_MspInit+0xa0>)
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <HAL_UART_MspInit+0xa0>)
 80084b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084ba:	6193      	str	r3, [r2, #24]
 80084bc:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <HAL_UART_MspInit+0xa0>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084c8:	4b19      	ldr	r3, [pc, #100]	; (8008530 <HAL_UART_MspInit+0xa0>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	4a18      	ldr	r2, [pc, #96]	; (8008530 <HAL_UART_MspInit+0xa0>)
 80084ce:	f043 0304 	orr.w	r3, r3, #4
 80084d2:	6193      	str	r3, [r2, #24]
 80084d4:	4b16      	ldr	r3, [pc, #88]	; (8008530 <HAL_UART_MspInit+0xa0>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e6:	2302      	movs	r3, #2
 80084e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084ea:	2303      	movs	r3, #3
 80084ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ee:	f107 0310 	add.w	r3, r7, #16
 80084f2:	4619      	mov	r1, r3
 80084f4:	480f      	ldr	r0, [pc, #60]	; (8008534 <HAL_UART_MspInit+0xa4>)
 80084f6:	f000 fc8f 	bl	8008e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80084fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008508:	f107 0310 	add.w	r3, r7, #16
 800850c:	4619      	mov	r1, r3
 800850e:	4809      	ldr	r0, [pc, #36]	; (8008534 <HAL_UART_MspInit+0xa4>)
 8008510:	f000 fc82 	bl	8008e18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	2025      	movs	r0, #37	; 0x25
 800851a:	f000 fb04 	bl	8008b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800851e:	2025      	movs	r0, #37	; 0x25
 8008520:	f000 fb1d 	bl	8008b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008524:	bf00      	nop
 8008526:	3720      	adds	r7, #32
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40013800 	.word	0x40013800
 8008530:	40021000 	.word	0x40021000
 8008534:	40010800 	.word	0x40010800

08008538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800853c:	e7fe      	b.n	800853c <NMI_Handler+0x4>

0800853e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800853e:	b480      	push	{r7}
 8008540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008542:	e7fe      	b.n	8008542 <HardFault_Handler+0x4>

08008544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008548:	e7fe      	b.n	8008548 <MemManage_Handler+0x4>

0800854a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800854e:	e7fe      	b.n	800854e <BusFault_Handler+0x4>

08008550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008554:	e7fe      	b.n	8008554 <UsageFault_Handler+0x4>

08008556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008556:	b480      	push	{r7}
 8008558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800855a:	bf00      	nop
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008562:	b480      	push	{r7}
 8008564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008566:	bf00      	nop
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800856e:	b480      	push	{r7}
 8008570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008572:	bf00      	nop
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800857e:	f000 f8bf 	bl	8008700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008582:	bf00      	nop
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800858c:	4802      	ldr	r0, [pc, #8]	; (8008598 <TIM1_UP_IRQHandler+0x10>)
 800858e:	f002 fdcd 	bl	800b12c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008592:	bf00      	nop
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000410 	.word	0x20000410

0800859c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085a0:	4802      	ldr	r0, [pc, #8]	; (80085ac <USART1_IRQHandler+0x10>)
 80085a2:	f003 f9cb 	bl	800b93c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085a6:	bf00      	nop
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000458 	.word	0x20000458

080085b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085b8:	4a14      	ldr	r2, [pc, #80]	; (800860c <_sbrk+0x5c>)
 80085ba:	4b15      	ldr	r3, [pc, #84]	; (8008610 <_sbrk+0x60>)
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085c4:	4b13      	ldr	r3, [pc, #76]	; (8008614 <_sbrk+0x64>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <_sbrk+0x64>)
 80085ce:	4a12      	ldr	r2, [pc, #72]	; (8008618 <_sbrk+0x68>)
 80085d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <_sbrk+0x64>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4413      	add	r3, r2
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d207      	bcs.n	80085f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085e0:	f003 fe8e 	bl	800c300 <__errno>
 80085e4:	4603      	mov	r3, r0
 80085e6:	220c      	movs	r2, #12
 80085e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	e009      	b.n	8008604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <_sbrk+0x64>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <_sbrk+0x64>)
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4413      	add	r3, r2
 80085fe:	4a05      	ldr	r2, [pc, #20]	; (8008614 <_sbrk+0x64>)
 8008600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008602:	68fb      	ldr	r3, [r7, #12]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	2000c000 	.word	0x2000c000
 8008610:	00000400 	.word	0x00000400
 8008614:	200004a0 	.word	0x200004a0
 8008618:	200004b8 	.word	0x200004b8

0800861c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008620:	bf00      	nop
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008628:	480c      	ldr	r0, [pc, #48]	; (800865c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800862a:	490d      	ldr	r1, [pc, #52]	; (8008660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800862c:	4a0d      	ldr	r2, [pc, #52]	; (8008664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800862e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008630:	e002      	b.n	8008638 <LoopCopyDataInit>

08008632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008636:	3304      	adds	r3, #4

08008638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800863a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800863c:	d3f9      	bcc.n	8008632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800863e:	4a0a      	ldr	r2, [pc, #40]	; (8008668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008640:	4c0a      	ldr	r4, [pc, #40]	; (800866c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008644:	e001      	b.n	800864a <LoopFillZerobss>

08008646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008648:	3204      	adds	r2, #4

0800864a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800864a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800864c:	d3fb      	bcc.n	8008646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800864e:	f7ff ffe5 	bl	800861c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008652:	f003 fe5b 	bl	800c30c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008656:	f7ff fb9d 	bl	8007d94 <main>
  bx lr
 800865a:	4770      	bx	lr
  ldr r0, =_sdata
 800865c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008660:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008664:	0800dd44 	.word	0x0800dd44
  ldr r2, =_sbss
 8008668:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800866c:	200004b8 	.word	0x200004b8

08008670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008670:	e7fe      	b.n	8008670 <ADC1_2_IRQHandler>
	...

08008674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008678:	4b08      	ldr	r3, [pc, #32]	; (800869c <HAL_Init+0x28>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a07      	ldr	r2, [pc, #28]	; (800869c <HAL_Init+0x28>)
 800867e:	f043 0310 	orr.w	r3, r3, #16
 8008682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008684:	2003      	movs	r0, #3
 8008686:	f000 fa43 	bl	8008b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800868a:	200f      	movs	r0, #15
 800868c:	f000 f808 	bl	80086a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008690:	f7ff fdfa 	bl	8008288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40022000 	.word	0x40022000

080086a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086a8:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <HAL_InitTick+0x54>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <HAL_InitTick+0x58>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fa5b 	bl	8008b7a <HAL_SYSTICK_Config>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e00e      	b.n	80086ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b0f      	cmp	r3, #15
 80086d2:	d80a      	bhi.n	80086ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086d4:	2200      	movs	r2, #0
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	f000 fa23 	bl	8008b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086e0:	4a06      	ldr	r2, [pc, #24]	; (80086fc <HAL_InitTick+0x5c>)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	e000      	b.n	80086ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200000a0 	.word	0x200000a0
 80086f8:	200000a8 	.word	0x200000a8
 80086fc:	200000a4 	.word	0x200000a4

08008700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <HAL_IncTick+0x1c>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <HAL_IncTick+0x20>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4413      	add	r3, r2
 8008710:	4a03      	ldr	r2, [pc, #12]	; (8008720 <HAL_IncTick+0x20>)
 8008712:	6013      	str	r3, [r2, #0]
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr
 800871c:	200000a8 	.word	0x200000a8
 8008720:	200004a4 	.word	0x200004a4

08008724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  return uwTick;
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <HAL_GetTick+0x10>)
 800872a:	681b      	ldr	r3, [r3, #0]
}
 800872c:	4618      	mov	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	bc80      	pop	{r7}
 8008732:	4770      	bx	lr
 8008734:	200004a4 	.word	0x200004a4

08008738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008740:	f7ff fff0 	bl	8008724 <HAL_GetTick>
 8008744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d005      	beq.n	800875e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008752:	4b0a      	ldr	r3, [pc, #40]	; (800877c <HAL_Delay+0x44>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800875e:	bf00      	nop
 8008760:	f7ff ffe0 	bl	8008724 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	429a      	cmp	r2, r3
 800876e:	d8f7      	bhi.n	8008760 <HAL_Delay+0x28>
  {
  }
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200000a8 	.word	0x200000a8

08008780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e0ed      	b.n	800896e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff fda4 	bl	80082ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087b4:	f7ff ffb6 	bl	8008724 <HAL_GetTick>
 80087b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087ba:	e012      	b.n	80087e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087bc:	f7ff ffb2 	bl	8008724 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b0a      	cmp	r3, #10
 80087c8:	d90b      	bls.n	80087e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2205      	movs	r2, #5
 80087da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0c5      	b.n	800896e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0e5      	beq.n	80087bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0202 	bic.w	r2, r2, #2
 80087fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008800:	f7ff ff90 	bl	8008724 <HAL_GetTick>
 8008804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008806:	e012      	b.n	800882e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008808:	f7ff ff8c 	bl	8008724 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b0a      	cmp	r3, #10
 8008814:	d90b      	bls.n	800882e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2205      	movs	r2, #5
 8008826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e09f      	b.n	800896e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e5      	bne.n	8008808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7e1b      	ldrb	r3, [r3, #24]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d108      	bne.n	8008856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e007      	b.n	8008866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7e5b      	ldrb	r3, [r3, #25]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d108      	bne.n	8008880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e007      	b.n	8008890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800888e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7e9b      	ldrb	r3, [r3, #26]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d108      	bne.n	80088aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0220 	orr.w	r2, r2, #32
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	e007      	b.n	80088ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0220 	bic.w	r2, r2, #32
 80088b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7edb      	ldrb	r3, [r3, #27]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d108      	bne.n	80088d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0210 	bic.w	r2, r2, #16
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e007      	b.n	80088e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0210 	orr.w	r2, r2, #16
 80088e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7f1b      	ldrb	r3, [r3, #28]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d108      	bne.n	80088fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0208 	orr.w	r2, r2, #8
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	e007      	b.n	800890e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0208 	bic.w	r2, r2, #8
 800890c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7f5b      	ldrb	r3, [r3, #29]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d108      	bne.n	8008928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 0204 	orr.w	r2, r2, #4
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e007      	b.n	8008938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0204 	bic.w	r2, r2, #4
 8008936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	ea42 0103 	orr.w	r1, r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	1e5a      	subs	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <__NVIC_SetPriorityGrouping>:
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008988:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <__NVIC_SetPriorityGrouping+0x44>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008994:	4013      	ands	r3, r2
 8008996:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089aa:	4a04      	ldr	r2, [pc, #16]	; (80089bc <__NVIC_SetPriorityGrouping+0x44>)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	60d3      	str	r3, [r2, #12]
}
 80089b0:	bf00      	nop
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	e000ed00 	.word	0xe000ed00

080089c0 <__NVIC_GetPriorityGrouping>:
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089c4:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <__NVIC_GetPriorityGrouping+0x18>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	0a1b      	lsrs	r3, r3, #8
 80089ca:	f003 0307 	and.w	r3, r3, #7
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	e000ed00 	.word	0xe000ed00

080089dc <__NVIC_EnableIRQ>:
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	db0b      	blt.n	8008a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	f003 021f 	and.w	r2, r3, #31
 80089f4:	4906      	ldr	r1, [pc, #24]	; (8008a10 <__NVIC_EnableIRQ+0x34>)
 80089f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	2001      	movs	r0, #1
 80089fe:	fa00 f202 	lsl.w	r2, r0, r2
 8008a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr
 8008a10:	e000e100 	.word	0xe000e100

08008a14 <__NVIC_SetPriority>:
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	db0a      	blt.n	8008a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	490c      	ldr	r1, [pc, #48]	; (8008a60 <__NVIC_SetPriority+0x4c>)
 8008a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a32:	0112      	lsls	r2, r2, #4
 8008a34:	b2d2      	uxtb	r2, r2
 8008a36:	440b      	add	r3, r1
 8008a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a3c:	e00a      	b.n	8008a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	4908      	ldr	r1, [pc, #32]	; (8008a64 <__NVIC_SetPriority+0x50>)
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	3b04      	subs	r3, #4
 8008a4c:	0112      	lsls	r2, r2, #4
 8008a4e:	b2d2      	uxtb	r2, r2
 8008a50:	440b      	add	r3, r1
 8008a52:	761a      	strb	r2, [r3, #24]
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000e100 	.word	0xe000e100
 8008a64:	e000ed00 	.word	0xe000ed00

08008a68 <NVIC_EncodePriority>:
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f1c3 0307 	rsb	r3, r3, #7
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	bf28      	it	cs
 8008a86:	2304      	movcs	r3, #4
 8008a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	2b06      	cmp	r3, #6
 8008a90:	d902      	bls.n	8008a98 <NVIC_EncodePriority+0x30>
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3b03      	subs	r3, #3
 8008a96:	e000      	b.n	8008a9a <NVIC_EncodePriority+0x32>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	43da      	mvns	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	401a      	ands	r2, r3
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aba:	43d9      	mvns	r1, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ac0:	4313      	orrs	r3, r2
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3724      	adds	r7, #36	; 0x24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr

08008acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008adc:	d301      	bcc.n	8008ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e00f      	b.n	8008b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ae2:	4a0a      	ldr	r2, [pc, #40]	; (8008b0c <SysTick_Config+0x40>)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008aea:	210f      	movs	r1, #15
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	f7ff ff90 	bl	8008a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <SysTick_Config+0x40>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008afa:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <SysTick_Config+0x40>)
 8008afc:	2207      	movs	r2, #7
 8008afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	e000e010 	.word	0xe000e010

08008b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff ff2d 	bl	8008978 <__NVIC_SetPriorityGrouping>
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	607a      	str	r2, [r7, #4]
 8008b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b38:	f7ff ff42 	bl	80089c0 <__NVIC_GetPriorityGrouping>
 8008b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	68b9      	ldr	r1, [r7, #8]
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff ff90 	bl	8008a68 <NVIC_EncodePriority>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff ff5f 	bl	8008a14 <__NVIC_SetPriority>
}
 8008b56:	bf00      	nop
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	4603      	mov	r3, r0
 8008b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff ff35 	bl	80089dc <__NVIC_EnableIRQ>
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff ffa2 	bl	8008acc <SysTick_Config>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d008      	beq.n	8008bbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2204      	movs	r2, #4
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e020      	b.n	8008bfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 020e 	bic.w	r2, r2, #14
 8008bca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0201 	bic.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f202 	lsl.w	r2, r1, r2
 8008bea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr

08008c08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d005      	beq.n	8008c2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2204      	movs	r2, #4
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	73fb      	strb	r3, [r7, #15]
 8008c2a:	e0d6      	b.n	8008dda <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 020e 	bic.w	r2, r2, #14
 8008c3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0201 	bic.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	4b64      	ldr	r3, [pc, #400]	; (8008de4 <HAL_DMA_Abort_IT+0x1dc>)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d958      	bls.n	8008d0a <HAL_DMA_Abort_IT+0x102>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a62      	ldr	r2, [pc, #392]	; (8008de8 <HAL_DMA_Abort_IT+0x1e0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d04f      	beq.n	8008d02 <HAL_DMA_Abort_IT+0xfa>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a61      	ldr	r2, [pc, #388]	; (8008dec <HAL_DMA_Abort_IT+0x1e4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d048      	beq.n	8008cfe <HAL_DMA_Abort_IT+0xf6>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a5f      	ldr	r2, [pc, #380]	; (8008df0 <HAL_DMA_Abort_IT+0x1e8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d040      	beq.n	8008cf8 <HAL_DMA_Abort_IT+0xf0>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a5e      	ldr	r2, [pc, #376]	; (8008df4 <HAL_DMA_Abort_IT+0x1ec>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d038      	beq.n	8008cf2 <HAL_DMA_Abort_IT+0xea>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a5c      	ldr	r2, [pc, #368]	; (8008df8 <HAL_DMA_Abort_IT+0x1f0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d030      	beq.n	8008cec <HAL_DMA_Abort_IT+0xe4>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a5b      	ldr	r2, [pc, #364]	; (8008dfc <HAL_DMA_Abort_IT+0x1f4>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d028      	beq.n	8008ce6 <HAL_DMA_Abort_IT+0xde>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a52      	ldr	r2, [pc, #328]	; (8008de4 <HAL_DMA_Abort_IT+0x1dc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d020      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0xd8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a57      	ldr	r2, [pc, #348]	; (8008e00 <HAL_DMA_Abort_IT+0x1f8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d019      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xd4>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a55      	ldr	r2, [pc, #340]	; (8008e04 <HAL_DMA_Abort_IT+0x1fc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d012      	beq.n	8008cd8 <HAL_DMA_Abort_IT+0xd0>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a54      	ldr	r2, [pc, #336]	; (8008e08 <HAL_DMA_Abort_IT+0x200>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00a      	beq.n	8008cd2 <HAL_DMA_Abort_IT+0xca>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a52      	ldr	r2, [pc, #328]	; (8008e0c <HAL_DMA_Abort_IT+0x204>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d102      	bne.n	8008ccc <HAL_DMA_Abort_IT+0xc4>
 8008cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cca:	e01b      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cd0:	e018      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd6:	e015      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	e013      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e011      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ce4:	e00e      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008ce6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cea:	e00b      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cf0:	e008      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf6:	e005      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cfc:	e002      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008cfe:	2310      	movs	r3, #16
 8008d00:	e000      	b.n	8008d04 <HAL_DMA_Abort_IT+0xfc>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4a42      	ldr	r2, [pc, #264]	; (8008e10 <HAL_DMA_Abort_IT+0x208>)
 8008d06:	6053      	str	r3, [r2, #4]
 8008d08:	e057      	b.n	8008dba <HAL_DMA_Abort_IT+0x1b2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a36      	ldr	r2, [pc, #216]	; (8008de8 <HAL_DMA_Abort_IT+0x1e0>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d04f      	beq.n	8008db4 <HAL_DMA_Abort_IT+0x1ac>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a34      	ldr	r2, [pc, #208]	; (8008dec <HAL_DMA_Abort_IT+0x1e4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d048      	beq.n	8008db0 <HAL_DMA_Abort_IT+0x1a8>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a33      	ldr	r2, [pc, #204]	; (8008df0 <HAL_DMA_Abort_IT+0x1e8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d040      	beq.n	8008daa <HAL_DMA_Abort_IT+0x1a2>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a31      	ldr	r2, [pc, #196]	; (8008df4 <HAL_DMA_Abort_IT+0x1ec>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d038      	beq.n	8008da4 <HAL_DMA_Abort_IT+0x19c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a30      	ldr	r2, [pc, #192]	; (8008df8 <HAL_DMA_Abort_IT+0x1f0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d030      	beq.n	8008d9e <HAL_DMA_Abort_IT+0x196>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a2e      	ldr	r2, [pc, #184]	; (8008dfc <HAL_DMA_Abort_IT+0x1f4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d028      	beq.n	8008d98 <HAL_DMA_Abort_IT+0x190>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a26      	ldr	r2, [pc, #152]	; (8008de4 <HAL_DMA_Abort_IT+0x1dc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d020      	beq.n	8008d92 <HAL_DMA_Abort_IT+0x18a>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a2a      	ldr	r2, [pc, #168]	; (8008e00 <HAL_DMA_Abort_IT+0x1f8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d019      	beq.n	8008d8e <HAL_DMA_Abort_IT+0x186>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a29      	ldr	r2, [pc, #164]	; (8008e04 <HAL_DMA_Abort_IT+0x1fc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d012      	beq.n	8008d8a <HAL_DMA_Abort_IT+0x182>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a27      	ldr	r2, [pc, #156]	; (8008e08 <HAL_DMA_Abort_IT+0x200>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00a      	beq.n	8008d84 <HAL_DMA_Abort_IT+0x17c>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a26      	ldr	r2, [pc, #152]	; (8008e0c <HAL_DMA_Abort_IT+0x204>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d102      	bne.n	8008d7e <HAL_DMA_Abort_IT+0x176>
 8008d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7c:	e01b      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d82:	e018      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d88:	e015      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d8a:	2310      	movs	r3, #16
 8008d8c:	e013      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e011      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d96:	e00e      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d9c:	e00b      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008da2:	e008      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da8:	e005      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dae:	e002      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008db0:	2310      	movs	r3, #16
 8008db2:	e000      	b.n	8008db6 <HAL_DMA_Abort_IT+0x1ae>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <HAL_DMA_Abort_IT+0x20c>)
 8008db8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
    } 
  }
  return status;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40020080 	.word	0x40020080
 8008de8:	40020008 	.word	0x40020008
 8008dec:	4002001c 	.word	0x4002001c
 8008df0:	40020030 	.word	0x40020030
 8008df4:	40020044 	.word	0x40020044
 8008df8:	40020058 	.word	0x40020058
 8008dfc:	4002006c 	.word	0x4002006c
 8008e00:	40020408 	.word	0x40020408
 8008e04:	4002041c 	.word	0x4002041c
 8008e08:	40020430 	.word	0x40020430
 8008e0c:	40020444 	.word	0x40020444
 8008e10:	40020400 	.word	0x40020400
 8008e14:	40020000 	.word	0x40020000

08008e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b08b      	sub	sp, #44	; 0x2c
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e22:	2300      	movs	r3, #0
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e26:	2300      	movs	r3, #0
 8008e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e2a:	e179      	b.n	8009120 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	f040 8168 	bne.w	800911a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4a96      	ldr	r2, [pc, #600]	; (80090a8 <HAL_GPIO_Init+0x290>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d05e      	beq.n	8008f12 <HAL_GPIO_Init+0xfa>
 8008e54:	4a94      	ldr	r2, [pc, #592]	; (80090a8 <HAL_GPIO_Init+0x290>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d875      	bhi.n	8008f46 <HAL_GPIO_Init+0x12e>
 8008e5a:	4a94      	ldr	r2, [pc, #592]	; (80090ac <HAL_GPIO_Init+0x294>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d058      	beq.n	8008f12 <HAL_GPIO_Init+0xfa>
 8008e60:	4a92      	ldr	r2, [pc, #584]	; (80090ac <HAL_GPIO_Init+0x294>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d86f      	bhi.n	8008f46 <HAL_GPIO_Init+0x12e>
 8008e66:	4a92      	ldr	r2, [pc, #584]	; (80090b0 <HAL_GPIO_Init+0x298>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d052      	beq.n	8008f12 <HAL_GPIO_Init+0xfa>
 8008e6c:	4a90      	ldr	r2, [pc, #576]	; (80090b0 <HAL_GPIO_Init+0x298>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d869      	bhi.n	8008f46 <HAL_GPIO_Init+0x12e>
 8008e72:	4a90      	ldr	r2, [pc, #576]	; (80090b4 <HAL_GPIO_Init+0x29c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d04c      	beq.n	8008f12 <HAL_GPIO_Init+0xfa>
 8008e78:	4a8e      	ldr	r2, [pc, #568]	; (80090b4 <HAL_GPIO_Init+0x29c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d863      	bhi.n	8008f46 <HAL_GPIO_Init+0x12e>
 8008e7e:	4a8e      	ldr	r2, [pc, #568]	; (80090b8 <HAL_GPIO_Init+0x2a0>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d046      	beq.n	8008f12 <HAL_GPIO_Init+0xfa>
 8008e84:	4a8c      	ldr	r2, [pc, #560]	; (80090b8 <HAL_GPIO_Init+0x2a0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d85d      	bhi.n	8008f46 <HAL_GPIO_Init+0x12e>
 8008e8a:	2b12      	cmp	r3, #18
 8008e8c:	d82a      	bhi.n	8008ee4 <HAL_GPIO_Init+0xcc>
 8008e8e:	2b12      	cmp	r3, #18
 8008e90:	d859      	bhi.n	8008f46 <HAL_GPIO_Init+0x12e>
 8008e92:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <HAL_GPIO_Init+0x80>)
 8008e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e98:	08008f13 	.word	0x08008f13
 8008e9c:	08008eed 	.word	0x08008eed
 8008ea0:	08008eff 	.word	0x08008eff
 8008ea4:	08008f41 	.word	0x08008f41
 8008ea8:	08008f47 	.word	0x08008f47
 8008eac:	08008f47 	.word	0x08008f47
 8008eb0:	08008f47 	.word	0x08008f47
 8008eb4:	08008f47 	.word	0x08008f47
 8008eb8:	08008f47 	.word	0x08008f47
 8008ebc:	08008f47 	.word	0x08008f47
 8008ec0:	08008f47 	.word	0x08008f47
 8008ec4:	08008f47 	.word	0x08008f47
 8008ec8:	08008f47 	.word	0x08008f47
 8008ecc:	08008f47 	.word	0x08008f47
 8008ed0:	08008f47 	.word	0x08008f47
 8008ed4:	08008f47 	.word	0x08008f47
 8008ed8:	08008f47 	.word	0x08008f47
 8008edc:	08008ef5 	.word	0x08008ef5
 8008ee0:	08008f09 	.word	0x08008f09
 8008ee4:	4a75      	ldr	r2, [pc, #468]	; (80090bc <HAL_GPIO_Init+0x2a4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d013      	beq.n	8008f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008eea:	e02c      	b.n	8008f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	623b      	str	r3, [r7, #32]
          break;
 8008ef2:	e029      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	623b      	str	r3, [r7, #32]
          break;
 8008efc:	e024      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	3308      	adds	r3, #8
 8008f04:	623b      	str	r3, [r7, #32]
          break;
 8008f06:	e01f      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	623b      	str	r3, [r7, #32]
          break;
 8008f10:	e01a      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d102      	bne.n	8008f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f1a:	2304      	movs	r3, #4
 8008f1c:	623b      	str	r3, [r7, #32]
          break;
 8008f1e:	e013      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d105      	bne.n	8008f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f28:	2308      	movs	r3, #8
 8008f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	611a      	str	r2, [r3, #16]
          break;
 8008f32:	e009      	b.n	8008f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f34:	2308      	movs	r3, #8
 8008f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	615a      	str	r2, [r3, #20]
          break;
 8008f3e:	e003      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f40:	2300      	movs	r3, #0
 8008f42:	623b      	str	r3, [r7, #32]
          break;
 8008f44:	e000      	b.n	8008f48 <HAL_GPIO_Init+0x130>
          break;
 8008f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	2bff      	cmp	r3, #255	; 0xff
 8008f4c:	d801      	bhi.n	8008f52 <HAL_GPIO_Init+0x13a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	e001      	b.n	8008f56 <HAL_GPIO_Init+0x13e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3304      	adds	r3, #4
 8008f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	2bff      	cmp	r3, #255	; 0xff
 8008f5c:	d802      	bhi.n	8008f64 <HAL_GPIO_Init+0x14c>
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	e002      	b.n	8008f6a <HAL_GPIO_Init+0x152>
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	3b08      	subs	r3, #8
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	210f      	movs	r1, #15
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	fa01 f303 	lsl.w	r3, r1, r3
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	401a      	ands	r2, r3
 8008f7c:	6a39      	ldr	r1, [r7, #32]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	fa01 f303 	lsl.w	r3, r1, r3
 8008f84:	431a      	orrs	r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 80c1 	beq.w	800911a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008f98:	4b49      	ldr	r3, [pc, #292]	; (80090c0 <HAL_GPIO_Init+0x2a8>)
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	4a48      	ldr	r2, [pc, #288]	; (80090c0 <HAL_GPIO_Init+0x2a8>)
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	6193      	str	r3, [r2, #24]
 8008fa4:	4b46      	ldr	r3, [pc, #280]	; (80090c0 <HAL_GPIO_Init+0x2a8>)
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	60bb      	str	r3, [r7, #8]
 8008fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008fb0:	4a44      	ldr	r2, [pc, #272]	; (80090c4 <HAL_GPIO_Init+0x2ac>)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	089b      	lsrs	r3, r3, #2
 8008fb6:	3302      	adds	r3, #2
 8008fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	220f      	movs	r2, #15
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a3c      	ldr	r2, [pc, #240]	; (80090c8 <HAL_GPIO_Init+0x2b0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d01f      	beq.n	800901c <HAL_GPIO_Init+0x204>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a3b      	ldr	r2, [pc, #236]	; (80090cc <HAL_GPIO_Init+0x2b4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d019      	beq.n	8009018 <HAL_GPIO_Init+0x200>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a3a      	ldr	r2, [pc, #232]	; (80090d0 <HAL_GPIO_Init+0x2b8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d013      	beq.n	8009014 <HAL_GPIO_Init+0x1fc>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a39      	ldr	r2, [pc, #228]	; (80090d4 <HAL_GPIO_Init+0x2bc>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d00d      	beq.n	8009010 <HAL_GPIO_Init+0x1f8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a38      	ldr	r2, [pc, #224]	; (80090d8 <HAL_GPIO_Init+0x2c0>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d007      	beq.n	800900c <HAL_GPIO_Init+0x1f4>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a37      	ldr	r2, [pc, #220]	; (80090dc <HAL_GPIO_Init+0x2c4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d101      	bne.n	8009008 <HAL_GPIO_Init+0x1f0>
 8009004:	2305      	movs	r3, #5
 8009006:	e00a      	b.n	800901e <HAL_GPIO_Init+0x206>
 8009008:	2306      	movs	r3, #6
 800900a:	e008      	b.n	800901e <HAL_GPIO_Init+0x206>
 800900c:	2304      	movs	r3, #4
 800900e:	e006      	b.n	800901e <HAL_GPIO_Init+0x206>
 8009010:	2303      	movs	r3, #3
 8009012:	e004      	b.n	800901e <HAL_GPIO_Init+0x206>
 8009014:	2302      	movs	r3, #2
 8009016:	e002      	b.n	800901e <HAL_GPIO_Init+0x206>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <HAL_GPIO_Init+0x206>
 800901c:	2300      	movs	r3, #0
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	f002 0203 	and.w	r2, r2, #3
 8009024:	0092      	lsls	r2, r2, #2
 8009026:	4093      	lsls	r3, r2
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800902e:	4925      	ldr	r1, [pc, #148]	; (80090c4 <HAL_GPIO_Init+0x2ac>)
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	089b      	lsrs	r3, r3, #2
 8009034:	3302      	adds	r3, #2
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d006      	beq.n	8009056 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	4924      	ldr	r1, [pc, #144]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	4313      	orrs	r3, r2
 8009052:	608b      	str	r3, [r1, #8]
 8009054:	e006      	b.n	8009064 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009056:	4b22      	ldr	r3, [pc, #136]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	43db      	mvns	r3, r3
 800905e:	4920      	ldr	r1, [pc, #128]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 8009060:	4013      	ands	r3, r2
 8009062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d006      	beq.n	800907e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009070:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	491a      	ldr	r1, [pc, #104]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	4313      	orrs	r3, r2
 800907a:	60cb      	str	r3, [r1, #12]
 800907c:	e006      	b.n	800908c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	43db      	mvns	r3, r3
 8009086:	4916      	ldr	r1, [pc, #88]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 8009088:	4013      	ands	r3, r2
 800908a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d025      	beq.n	80090e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009098:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4910      	ldr	r1, [pc, #64]	; (80090e0 <HAL_GPIO_Init+0x2c8>)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	604b      	str	r3, [r1, #4]
 80090a4:	e025      	b.n	80090f2 <HAL_GPIO_Init+0x2da>
 80090a6:	bf00      	nop
 80090a8:	10320000 	.word	0x10320000
 80090ac:	10310000 	.word	0x10310000
 80090b0:	10220000 	.word	0x10220000
 80090b4:	10210000 	.word	0x10210000
 80090b8:	10120000 	.word	0x10120000
 80090bc:	10110000 	.word	0x10110000
 80090c0:	40021000 	.word	0x40021000
 80090c4:	40010000 	.word	0x40010000
 80090c8:	40010800 	.word	0x40010800
 80090cc:	40010c00 	.word	0x40010c00
 80090d0:	40011000 	.word	0x40011000
 80090d4:	40011400 	.word	0x40011400
 80090d8:	40011800 	.word	0x40011800
 80090dc:	40011c00 	.word	0x40011c00
 80090e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80090e4:	4b15      	ldr	r3, [pc, #84]	; (800913c <HAL_GPIO_Init+0x324>)
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	43db      	mvns	r3, r3
 80090ec:	4913      	ldr	r1, [pc, #76]	; (800913c <HAL_GPIO_Init+0x324>)
 80090ee:	4013      	ands	r3, r2
 80090f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d006      	beq.n	800910c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <HAL_GPIO_Init+0x324>)
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	490e      	ldr	r1, [pc, #56]	; (800913c <HAL_GPIO_Init+0x324>)
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	4313      	orrs	r3, r2
 8009108:	600b      	str	r3, [r1, #0]
 800910a:	e006      	b.n	800911a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800910c:	4b0b      	ldr	r3, [pc, #44]	; (800913c <HAL_GPIO_Init+0x324>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	43db      	mvns	r3, r3
 8009114:	4909      	ldr	r1, [pc, #36]	; (800913c <HAL_GPIO_Init+0x324>)
 8009116:	4013      	ands	r3, r2
 8009118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	3301      	adds	r3, #1
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	fa22 f303 	lsr.w	r3, r2, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	f47f ae7e 	bne.w	8008e2c <HAL_GPIO_Init+0x14>
  }
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	372c      	adds	r7, #44	; 0x2c
 8009136:	46bd      	mov	sp, r7
 8009138:	bc80      	pop	{r7}
 800913a:	4770      	bx	lr
 800913c:	40010400 	.word	0x40010400

08009140 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009140:	b480      	push	{r7}
 8009142:	b089      	sub	sp, #36	; 0x24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800914e:	e0a6      	b.n	800929e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009150:	2201      	movs	r2, #1
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	fa02 f303 	lsl.w	r3, r2, r3
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	4013      	ands	r3, r2
 800915c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8099 	beq.w	8009298 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009166:	4a54      	ldr	r2, [pc, #336]	; (80092b8 <HAL_GPIO_DeInit+0x178>)
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	089b      	lsrs	r3, r3, #2
 800916c:	3302      	adds	r3, #2
 800916e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009172:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	220f      	movs	r2, #15
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4013      	ands	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a4c      	ldr	r2, [pc, #304]	; (80092bc <HAL_GPIO_DeInit+0x17c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d01f      	beq.n	80091d0 <HAL_GPIO_DeInit+0x90>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a4b      	ldr	r2, [pc, #300]	; (80092c0 <HAL_GPIO_DeInit+0x180>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d019      	beq.n	80091cc <HAL_GPIO_DeInit+0x8c>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a4a      	ldr	r2, [pc, #296]	; (80092c4 <HAL_GPIO_DeInit+0x184>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d013      	beq.n	80091c8 <HAL_GPIO_DeInit+0x88>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a49      	ldr	r2, [pc, #292]	; (80092c8 <HAL_GPIO_DeInit+0x188>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d00d      	beq.n	80091c4 <HAL_GPIO_DeInit+0x84>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a48      	ldr	r2, [pc, #288]	; (80092cc <HAL_GPIO_DeInit+0x18c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d007      	beq.n	80091c0 <HAL_GPIO_DeInit+0x80>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a47      	ldr	r2, [pc, #284]	; (80092d0 <HAL_GPIO_DeInit+0x190>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d101      	bne.n	80091bc <HAL_GPIO_DeInit+0x7c>
 80091b8:	2305      	movs	r3, #5
 80091ba:	e00a      	b.n	80091d2 <HAL_GPIO_DeInit+0x92>
 80091bc:	2306      	movs	r3, #6
 80091be:	e008      	b.n	80091d2 <HAL_GPIO_DeInit+0x92>
 80091c0:	2304      	movs	r3, #4
 80091c2:	e006      	b.n	80091d2 <HAL_GPIO_DeInit+0x92>
 80091c4:	2303      	movs	r3, #3
 80091c6:	e004      	b.n	80091d2 <HAL_GPIO_DeInit+0x92>
 80091c8:	2302      	movs	r3, #2
 80091ca:	e002      	b.n	80091d2 <HAL_GPIO_DeInit+0x92>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <HAL_GPIO_DeInit+0x92>
 80091d0:	2300      	movs	r3, #0
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	f002 0203 	and.w	r2, r2, #3
 80091d8:	0092      	lsls	r2, r2, #2
 80091da:	4093      	lsls	r3, r2
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d132      	bne.n	8009248 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80091e2:	4b3c      	ldr	r3, [pc, #240]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	43db      	mvns	r3, r3
 80091ea:	493a      	ldr	r1, [pc, #232]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80091f0:	4b38      	ldr	r3, [pc, #224]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	43db      	mvns	r3, r3
 80091f8:	4936      	ldr	r1, [pc, #216]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80091fe:	4b35      	ldr	r3, [pc, #212]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	43db      	mvns	r3, r3
 8009206:	4933      	ldr	r1, [pc, #204]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 8009208:	4013      	ands	r3, r2
 800920a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800920c:	4b31      	ldr	r3, [pc, #196]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	43db      	mvns	r3, r3
 8009214:	492f      	ldr	r1, [pc, #188]	; (80092d4 <HAL_GPIO_DeInit+0x194>)
 8009216:	4013      	ands	r3, r2
 8009218:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	220f      	movs	r2, #15
 8009224:	fa02 f303 	lsl.w	r3, r2, r3
 8009228:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800922a:	4a23      	ldr	r2, [pc, #140]	; (80092b8 <HAL_GPIO_DeInit+0x178>)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	089b      	lsrs	r3, r3, #2
 8009230:	3302      	adds	r3, #2
 8009232:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	43da      	mvns	r2, r3
 800923a:	481f      	ldr	r0, [pc, #124]	; (80092b8 <HAL_GPIO_DeInit+0x178>)
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	089b      	lsrs	r3, r3, #2
 8009240:	400a      	ands	r2, r1
 8009242:	3302      	adds	r3, #2
 8009244:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	2bff      	cmp	r3, #255	; 0xff
 800924c:	d801      	bhi.n	8009252 <HAL_GPIO_DeInit+0x112>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	e001      	b.n	8009256 <HAL_GPIO_DeInit+0x116>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3304      	adds	r3, #4
 8009256:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	2bff      	cmp	r3, #255	; 0xff
 800925c:	d802      	bhi.n	8009264 <HAL_GPIO_DeInit+0x124>
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	e002      	b.n	800926a <HAL_GPIO_DeInit+0x12a>
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	3b08      	subs	r3, #8
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	210f      	movs	r1, #15
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	fa01 f303 	lsl.w	r3, r1, r3
 8009278:	43db      	mvns	r3, r3
 800927a:	401a      	ands	r2, r3
 800927c:	2104      	movs	r1, #4
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	fa01 f303 	lsl.w	r3, r1, r3
 8009284:	431a      	orrs	r2, r3
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	43db      	mvns	r3, r3
 8009292:	401a      	ands	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	3301      	adds	r3, #1
 800929c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	fa22 f303 	lsr.w	r3, r2, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f47f af52 	bne.w	8009150 <HAL_GPIO_DeInit+0x10>
  }
}
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
 80092b0:	3724      	adds	r7, #36	; 0x24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40010800 	.word	0x40010800
 80092c0:	40010c00 	.word	0x40010c00
 80092c4:	40011000 	.word	0x40011000
 80092c8:	40011400 	.word	0x40011400
 80092cc:	40011800 	.word	0x40011800
 80092d0:	40011c00 	.word	0x40011c00
 80092d4:	40010400 	.word	0x40010400

080092d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	887b      	ldrh	r3, [r7, #2]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e001      	b.n	80092fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr

08009306 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	807b      	strh	r3, [r7, #2]
 8009312:	4613      	mov	r3, r2
 8009314:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009316:	787b      	ldrb	r3, [r7, #1]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800931c:	887a      	ldrh	r2, [r7, #2]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009322:	e003      	b.n	800932c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009324:	887b      	ldrh	r3, [r7, #2]
 8009326:	041a      	lsls	r2, r3, #16
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	611a      	str	r2, [r3, #16]
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr

08009336 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009336:	b480      	push	{r7}
 8009338:	b085      	sub	sp, #20
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009348:	887a      	ldrh	r2, [r7, #2]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4013      	ands	r3, r2
 800934e:	041a      	lsls	r2, r3, #16
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	43d9      	mvns	r1, r3
 8009354:	887b      	ldrh	r3, [r7, #2]
 8009356:	400b      	ands	r3, r1
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	611a      	str	r2, [r3, #16]
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr

08009368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e12b      	b.n	80095d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7fe fff8 	bl	8008384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2224      	movs	r2, #36	; 0x24
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0201 	bic.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093cc:	f001 fdb8 	bl	800af40 <HAL_RCC_GetPCLK1Freq>
 80093d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	4a81      	ldr	r2, [pc, #516]	; (80095dc <HAL_I2C_Init+0x274>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d807      	bhi.n	80093ec <HAL_I2C_Init+0x84>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4a80      	ldr	r2, [pc, #512]	; (80095e0 <HAL_I2C_Init+0x278>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bf94      	ite	ls
 80093e4:	2301      	movls	r3, #1
 80093e6:	2300      	movhi	r3, #0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	e006      	b.n	80093fa <HAL_I2C_Init+0x92>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4a7d      	ldr	r2, [pc, #500]	; (80095e4 <HAL_I2C_Init+0x27c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	bf94      	ite	ls
 80093f4:	2301      	movls	r3, #1
 80093f6:	2300      	movhi	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e0e7      	b.n	80095d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a78      	ldr	r2, [pc, #480]	; (80095e8 <HAL_I2C_Init+0x280>)
 8009406:	fba2 2303 	umull	r2, r3, r2, r3
 800940a:	0c9b      	lsrs	r3, r3, #18
 800940c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	4a6a      	ldr	r2, [pc, #424]	; (80095dc <HAL_I2C_Init+0x274>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d802      	bhi.n	800943c <HAL_I2C_Init+0xd4>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	3301      	adds	r3, #1
 800943a:	e009      	b.n	8009450 <HAL_I2C_Init+0xe8>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009442:	fb02 f303 	mul.w	r3, r2, r3
 8009446:	4a69      	ldr	r2, [pc, #420]	; (80095ec <HAL_I2C_Init+0x284>)
 8009448:	fba2 2303 	umull	r2, r3, r2, r3
 800944c:	099b      	lsrs	r3, r3, #6
 800944e:	3301      	adds	r3, #1
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6812      	ldr	r2, [r2, #0]
 8009454:	430b      	orrs	r3, r1
 8009456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	495c      	ldr	r1, [pc, #368]	; (80095dc <HAL_I2C_Init+0x274>)
 800946c:	428b      	cmp	r3, r1
 800946e:	d819      	bhi.n	80094a4 <HAL_I2C_Init+0x13c>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	1e59      	subs	r1, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	fbb1 f3f3 	udiv	r3, r1, r3
 800947e:	1c59      	adds	r1, r3, #1
 8009480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009484:	400b      	ands	r3, r1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <HAL_I2C_Init+0x138>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	1e59      	subs	r1, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	fbb1 f3f3 	udiv	r3, r1, r3
 8009498:	3301      	adds	r3, #1
 800949a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800949e:	e051      	b.n	8009544 <HAL_I2C_Init+0x1dc>
 80094a0:	2304      	movs	r3, #4
 80094a2:	e04f      	b.n	8009544 <HAL_I2C_Init+0x1dc>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d111      	bne.n	80094d0 <HAL_I2C_Init+0x168>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	1e58      	subs	r0, r3, #1
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6859      	ldr	r1, [r3, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	440b      	add	r3, r1
 80094ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80094be:	3301      	adds	r3, #1
 80094c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf0c      	ite	eq
 80094c8:	2301      	moveq	r3, #1
 80094ca:	2300      	movne	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	e012      	b.n	80094f6 <HAL_I2C_Init+0x18e>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	1e58      	subs	r0, r3, #1
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6859      	ldr	r1, [r3, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	0099      	lsls	r1, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80094e6:	3301      	adds	r3, #1
 80094e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bf0c      	ite	eq
 80094f0:	2301      	moveq	r3, #1
 80094f2:	2300      	movne	r3, #0
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_I2C_Init+0x196>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e022      	b.n	8009544 <HAL_I2C_Init+0x1dc>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10e      	bne.n	8009524 <HAL_I2C_Init+0x1bc>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1e58      	subs	r0, r3, #1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6859      	ldr	r1, [r3, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	440b      	add	r3, r1
 8009514:	fbb0 f3f3 	udiv	r3, r0, r3
 8009518:	3301      	adds	r3, #1
 800951a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009522:	e00f      	b.n	8009544 <HAL_I2C_Init+0x1dc>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	1e58      	subs	r0, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6859      	ldr	r1, [r3, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	0099      	lsls	r1, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	fbb0 f3f3 	udiv	r3, r0, r3
 800953a:	3301      	adds	r3, #1
 800953c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	6809      	ldr	r1, [r1, #0]
 8009548:	4313      	orrs	r3, r2
 800954a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6911      	ldr	r1, [r2, #16]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	68d2      	ldr	r2, [r2, #12]
 800957e:	4311      	orrs	r1, r2
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	430b      	orrs	r3, r1
 8009586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	695a      	ldr	r2, [r3, #20]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0201 	orr.w	r2, r2, #1
 80095b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	000186a0 	.word	0x000186a0
 80095e0:	001e847f 	.word	0x001e847f
 80095e4:	003d08ff 	.word	0x003d08ff
 80095e8:	431bde83 	.word	0x431bde83
 80095ec:	10624dd3 	.word	0x10624dd3

080095f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e021      	b.n	8009646 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2224      	movs	r2, #36	; 0x24
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7fe fef0 	bl	8008400 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af02      	add	r7, sp, #8
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	607a      	str	r2, [r7, #4]
 800965a:	461a      	mov	r2, r3
 800965c:	460b      	mov	r3, r1
 800965e:	817b      	strh	r3, [r7, #10]
 8009660:	4613      	mov	r3, r2
 8009662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009664:	f7ff f85e 	bl	8008724 <HAL_GetTick>
 8009668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b20      	cmp	r3, #32
 8009674:	f040 80e0 	bne.w	8009838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	2319      	movs	r3, #25
 800967e:	2201      	movs	r2, #1
 8009680:	4970      	ldr	r1, [pc, #448]	; (8009844 <HAL_I2C_Master_Transmit+0x1f4>)
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fe5c 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800968e:	2302      	movs	r3, #2
 8009690:	e0d3      	b.n	800983a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_I2C_Master_Transmit+0x50>
 800969c:	2302      	movs	r3, #2
 800969e:	e0cc      	b.n	800983a <HAL_I2C_Master_Transmit+0x1ea>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d007      	beq.n	80096c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0201 	orr.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2221      	movs	r2, #33	; 0x21
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2210      	movs	r2, #16
 80096e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	893a      	ldrh	r2, [r7, #8]
 80096f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4a50      	ldr	r2, [pc, #320]	; (8009848 <HAL_I2C_Master_Transmit+0x1f8>)
 8009706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009708:	8979      	ldrh	r1, [r7, #10]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	6a3a      	ldr	r2, [r7, #32]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fc16 	bl	8009f40 <I2C_MasterRequestWrite>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e08d      	b.n	800983a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	613b      	str	r3, [r7, #16]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009734:	e066      	b.n	8009804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	6a39      	ldr	r1, [r7, #32]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 ff1a 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00d      	beq.n	8009762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974a:	2b04      	cmp	r3, #4
 800974c:	d107      	bne.n	800975e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800975c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e06b      	b.n	800983a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	781a      	ldrb	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b04      	cmp	r3, #4
 800979e:	d11b      	bne.n	80097d8 <HAL_I2C_Master_Transmit+0x188>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d017      	beq.n	80097d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	781a      	ldrb	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	6a39      	ldr	r1, [r7, #32]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 ff11 	bl	800a604 <I2C_WaitOnBTFFlagUntilTimeout>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00d      	beq.n	8009804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d107      	bne.n	8009800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e01a      	b.n	800983a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009808:	2b00      	cmp	r3, #0
 800980a:	d194      	bne.n	8009736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800981a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2220      	movs	r2, #32
 8009820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	e000      	b.n	800983a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009838:	2302      	movs	r3, #2
  }
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	00100002 	.word	0x00100002
 8009848:	ffff0000 	.word	0xffff0000

0800984c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	461a      	mov	r2, r3
 800985a:	4603      	mov	r3, r0
 800985c:	817b      	strh	r3, [r7, #10]
 800985e:	460b      	mov	r3, r1
 8009860:	813b      	strh	r3, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009866:	f7fe ff5d 	bl	8008724 <HAL_GetTick>
 800986a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b20      	cmp	r3, #32
 8009876:	f040 80d9 	bne.w	8009a2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	2319      	movs	r3, #25
 8009880:	2201      	movs	r2, #1
 8009882:	496d      	ldr	r1, [pc, #436]	; (8009a38 <HAL_I2C_Mem_Write+0x1ec>)
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fd5b 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009890:	2302      	movs	r3, #2
 8009892:	e0cc      	b.n	8009a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_I2C_Mem_Write+0x56>
 800989e:	2302      	movs	r3, #2
 80098a0:	e0c5      	b.n	8009a2e <HAL_I2C_Mem_Write+0x1e2>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d007      	beq.n	80098c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f042 0201 	orr.w	r2, r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2221      	movs	r2, #33	; 0x21
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2240      	movs	r2, #64	; 0x40
 80098e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a3a      	ldr	r2, [r7, #32]
 80098f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80098f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098fe:	b29a      	uxth	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4a4d      	ldr	r2, [pc, #308]	; (8009a3c <HAL_I2C_Mem_Write+0x1f0>)
 8009908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800990a:	88f8      	ldrh	r0, [r7, #6]
 800990c:	893a      	ldrh	r2, [r7, #8]
 800990e:	8979      	ldrh	r1, [r7, #10]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4603      	mov	r3, r0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fb92 	bl	800a044 <I2C_RequestMemoryWrite>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d052      	beq.n	80099cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e081      	b.n	8009a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 fe20 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	2b04      	cmp	r3, #4
 8009940:	d107      	bne.n	8009952 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e06b      	b.n	8009a2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b04      	cmp	r3, #4
 8009992:	d11b      	bne.n	80099cc <HAL_I2C_Mem_Write+0x180>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	d017      	beq.n	80099cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	781a      	ldrb	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1aa      	bne.n	800992a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fe13 	bl	800a604 <I2C_WaitOnBTFFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00d      	beq.n	8009a00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d107      	bne.n	80099fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e016      	b.n	8009a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e000      	b.n	8009a2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a2c:	2302      	movs	r3, #2
  }
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	00100002 	.word	0x00100002
 8009a3c:	ffff0000 	.word	0xffff0000

08009a40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08c      	sub	sp, #48	; 0x30
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	4608      	mov	r0, r1
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4603      	mov	r3, r0
 8009a50:	817b      	strh	r3, [r7, #10]
 8009a52:	460b      	mov	r3, r1
 8009a54:	813b      	strh	r3, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a5e:	f7fe fe61 	bl	8008724 <HAL_GetTick>
 8009a62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	f040 8244 	bne.w	8009efa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	2319      	movs	r3, #25
 8009a78:	2201      	movs	r2, #1
 8009a7a:	4982      	ldr	r1, [pc, #520]	; (8009c84 <HAL_I2C_Mem_Read+0x244>)
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 fc5f 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e237      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_I2C_Mem_Read+0x5a>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e230      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d007      	beq.n	8009ac0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2222      	movs	r2, #34	; 0x22
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2240      	movs	r2, #64	; 0x40
 8009adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4a62      	ldr	r2, [pc, #392]	; (8009c88 <HAL_I2C_Mem_Read+0x248>)
 8009b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b02:	88f8      	ldrh	r0, [r7, #6]
 8009b04:	893a      	ldrh	r2, [r7, #8]
 8009b06:	8979      	ldrh	r1, [r7, #10]
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	4603      	mov	r3, r0
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fb2c 	bl	800a170 <I2C_RequestMemoryRead>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e1ec      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d113      	bne.n	8009b52 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61fb      	str	r3, [r7, #28]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	61fb      	str	r3, [r7, #28]
 8009b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e1c0      	b.n	8009ed4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d11e      	bne.n	8009b98 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b6a:	b672      	cpsid	i
}
 8009b6c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	61bb      	str	r3, [r7, #24]
 8009b82:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b94:	b662      	cpsie	i
}
 8009b96:	e035      	b.n	8009c04 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d11e      	bne.n	8009bde <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bb0:	b672      	cpsid	i
}
 8009bb2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009bda:	b662      	cpsie	i
}
 8009bdc:	e012      	b.n	8009c04 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c04:	e166      	b.n	8009ed4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	f200 811f 	bhi.w	8009e4e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d123      	bne.n	8009c60 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fd39 	bl	800a694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e167      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	691a      	ldr	r2, [r3, #16]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c5e:	e139      	b.n	8009ed4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d152      	bne.n	8009d0e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4906      	ldr	r1, [pc, #24]	; (8009c8c <HAL_I2C_Mem_Read+0x24c>)
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 fb64 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d008      	beq.n	8009c90 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e13c      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
 8009c82:	bf00      	nop
 8009c84:	00100002 	.word	0x00100002
 8009c88:	ffff0000 	.word	0xffff0000
 8009c8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009c90:	b672      	cpsid	i
}
 8009c92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	691a      	ldr	r2, [r3, #16]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009cd6:	b662      	cpsie	i
}
 8009cd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	b2d2      	uxtb	r2, r2
 8009ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d0c:	e0e2      	b.n	8009ed4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	2200      	movs	r2, #0
 8009d16:	497b      	ldr	r1, [pc, #492]	; (8009f04 <HAL_I2C_Mem_Read+0x4c4>)
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f000 fb11 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0e9      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d38:	b672      	cpsid	i
}
 8009d3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691a      	ldr	r2, [r3, #16]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d6e:	4b66      	ldr	r3, [pc, #408]	; (8009f08 <HAL_I2C_Mem_Read+0x4c8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	08db      	lsrs	r3, r3, #3
 8009d74:	4a65      	ldr	r2, [pc, #404]	; (8009f0c <HAL_I2C_Mem_Read+0x4cc>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	0a1a      	lsrs	r2, r3, #8
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	00da      	lsls	r2, r3, #3
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d118      	bne.n	8009dc6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009db6:	b662      	cpsie	i
}
 8009db8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e09a      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d1d9      	bne.n	8009d88 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691a      	ldr	r2, [r3, #16]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	b2d2      	uxtb	r2, r2
 8009df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e00:	3b01      	subs	r3, #1
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e16:	b662      	cpsie	i
}
 8009e18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	b2d2      	uxtb	r2, r2
 8009e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e4c:	e042      	b.n	8009ed4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 fc1e 	bl	800a694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e04c      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	b2d2      	uxtb	r2, r2
 8009e6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	f003 0304 	and.w	r3, r3, #4
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d118      	bne.n	8009ed4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f47f ae94 	bne.w	8009c06 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e000      	b.n	8009efc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009efa:	2302      	movs	r3, #2
  }
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3728      	adds	r7, #40	; 0x28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	00010004 	.word	0x00010004
 8009f08:	200000a0 	.word	0x200000a0
 8009f0c:	14f8b589 	.word	0x14f8b589

08009f10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1e:	b2db      	uxtb	r3, r3
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr

08009f2a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bc80      	pop	{r7}
 8009f3e:	4770      	bx	lr

08009f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d006      	beq.n	8009f6a <I2C_MasterRequestWrite+0x2a>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d003      	beq.n	8009f6a <I2C_MasterRequestWrite+0x2a>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f68:	d108      	bne.n	8009f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e00b      	b.n	8009f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	2b12      	cmp	r3, #18
 8009f82:	d107      	bne.n	8009f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f9cd 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00d      	beq.n	8009fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	d103      	bne.n	8009fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e035      	b.n	800a034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd0:	d108      	bne.n	8009fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fd2:	897b      	ldrh	r3, [r7, #10]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fe0:	611a      	str	r2, [r3, #16]
 8009fe2:	e01b      	b.n	800a01c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fe4:	897b      	ldrh	r3, [r7, #10]
 8009fe6:	11db      	asrs	r3, r3, #7
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	f003 0306 	and.w	r3, r3, #6
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f063 030f 	orn	r3, r3, #15
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	490e      	ldr	r1, [pc, #56]	; (800a03c <I2C_MasterRequestWrite+0xfc>)
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fa16 	bl	800a434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e010      	b.n	800a034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a012:	897b      	ldrh	r3, [r7, #10]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4907      	ldr	r1, [pc, #28]	; (800a040 <I2C_MasterRequestWrite+0x100>)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fa06 	bl	800a434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	00010008 	.word	0x00010008
 800a040:	00010002 	.word	0x00010002

0800a044 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	461a      	mov	r2, r3
 800a052:	4603      	mov	r3, r0
 800a054:	817b      	strh	r3, [r7, #10]
 800a056:	460b      	mov	r3, r1
 800a058:	813b      	strh	r3, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a06c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	2200      	movs	r2, #0
 800a076:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 f960 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00d      	beq.n	800a0a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a094:	d103      	bne.n	800a09e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a09c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e05f      	b.n	800a162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0a2:	897b      	ldrh	r3, [r7, #10]
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	6a3a      	ldr	r2, [r7, #32]
 800a0b6:	492d      	ldr	r1, [pc, #180]	; (800a16c <I2C_RequestMemoryWrite+0x128>)
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f9bb 	bl	800a434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e04c      	b.n	800a162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e0:	6a39      	ldr	r1, [r7, #32]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fa46 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d107      	bne.n	800a106 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e02b      	b.n	800a162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a10a:	88fb      	ldrh	r3, [r7, #6]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d105      	bne.n	800a11c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a110:	893b      	ldrh	r3, [r7, #8]
 800a112:	b2da      	uxtb	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	611a      	str	r2, [r3, #16]
 800a11a:	e021      	b.n	800a160 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a11c:	893b      	ldrh	r3, [r7, #8]
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	b29b      	uxth	r3, r3
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12c:	6a39      	ldr	r1, [r7, #32]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 fa20 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d107      	bne.n	800a152 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e005      	b.n	800a162 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a156:	893b      	ldrh	r3, [r7, #8]
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	00010002 	.word	0x00010002

0800a170 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	4603      	mov	r3, r0
 800a180:	817b      	strh	r3, [r7, #10]
 800a182:	460b      	mov	r3, r1
 800a184:	813b      	strh	r3, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a198:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 f8c2 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d0:	d103      	bne.n	800a1da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e0aa      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1de:	897b      	ldrh	r3, [r7, #10]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	6a3a      	ldr	r2, [r7, #32]
 800a1f2:	4952      	ldr	r1, [pc, #328]	; (800a33c <I2C_RequestMemoryRead+0x1cc>)
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 f91d 	bl	800a434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e097      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a21a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21c:	6a39      	ldr	r1, [r7, #32]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 f9a8 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00d      	beq.n	800a246 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d107      	bne.n	800a242 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e076      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d105      	bne.n	800a258 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a24c:	893b      	ldrh	r3, [r7, #8]
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	611a      	str	r2, [r3, #16]
 800a256:	e021      	b.n	800a29c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a258:	893b      	ldrh	r3, [r7, #8]
 800a25a:	0a1b      	lsrs	r3, r3, #8
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a268:	6a39      	ldr	r1, [r7, #32]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f982 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00d      	beq.n	800a292 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d107      	bne.n	800a28e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a28c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e050      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a292:	893b      	ldrh	r3, [r7, #8]
 800a294:	b2da      	uxtb	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29e:	6a39      	ldr	r1, [r7, #32]
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f967 	bl	800a574 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00d      	beq.n	800a2c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	d107      	bne.n	800a2c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e035      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f82b 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00d      	beq.n	800a30c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fe:	d103      	bne.n	800a308 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e013      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a30c:	897b      	ldrh	r3, [r7, #10]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	f043 0301 	orr.w	r3, r3, #1
 800a314:	b2da      	uxtb	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	6a3a      	ldr	r2, [r7, #32]
 800a320:	4906      	ldr	r1, [pc, #24]	; (800a33c <I2C_RequestMemoryRead+0x1cc>)
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f000 f886 	bl	800a434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	00010002 	.word	0x00010002

0800a340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a350:	e048      	b.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d044      	beq.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a35a:	f7fe f9e3 	bl	8008724 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d302      	bcc.n	800a370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d139      	bne.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	0c1b      	lsrs	r3, r3, #16
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b01      	cmp	r3, #1
 800a378:	d10d      	bne.n	800a396 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	43da      	mvns	r2, r3
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4013      	ands	r3, r2
 800a386:	b29b      	uxth	r3, r3
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bf0c      	ite	eq
 800a38c:	2301      	moveq	r3, #1
 800a38e:	2300      	movne	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	461a      	mov	r2, r3
 800a394:	e00c      	b.n	800a3b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	43da      	mvns	r2, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bf0c      	ite	eq
 800a3a8:	2301      	moveq	r3, #1
 800a3aa:	2300      	movne	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d116      	bne.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	f043 0220 	orr.w	r2, r3, #32
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e023      	b.n	800a42c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	0c1b      	lsrs	r3, r3, #16
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d10d      	bne.n	800a40a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	43da      	mvns	r2, r3
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	bf0c      	ite	eq
 800a400:	2301      	moveq	r3, #1
 800a402:	2300      	movne	r3, #0
 800a404:	b2db      	uxtb	r3, r3
 800a406:	461a      	mov	r2, r3
 800a408:	e00c      	b.n	800a424 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	43da      	mvns	r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4013      	ands	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bf0c      	ite	eq
 800a41c:	2301      	moveq	r3, #1
 800a41e:	2300      	movne	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	429a      	cmp	r2, r3
 800a428:	d093      	beq.n	800a352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a442:	e071      	b.n	800a528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a44e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a452:	d123      	bne.n	800a49c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a462:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a46c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a488:	f043 0204 	orr.w	r2, r3, #4
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e067      	b.n	800a56c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a2:	d041      	beq.n	800a528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4a4:	f7fe f93e 	bl	8008724 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d302      	bcc.n	800a4ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d136      	bne.n	800a528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	0c1b      	lsrs	r3, r3, #16
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d10c      	bne.n	800a4de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	43da      	mvns	r2, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bf14      	ite	ne
 800a4d6:	2301      	movne	r3, #1
 800a4d8:	2300      	moveq	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	e00b      	b.n	800a4f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	43da      	mvns	r2, r3
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bf14      	ite	ne
 800a4f0:	2301      	movne	r3, #1
 800a4f2:	2300      	moveq	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d016      	beq.n	800a528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a514:	f043 0220 	orr.w	r2, r3, #32
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e021      	b.n	800a56c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d10c      	bne.n	800a54c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	43da      	mvns	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	4013      	ands	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	bf14      	ite	ne
 800a544:	2301      	movne	r3, #1
 800a546:	2300      	moveq	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	e00b      	b.n	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	43da      	mvns	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bf14      	ite	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	2300      	moveq	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	f47f af6d 	bne.w	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a580:	e034      	b.n	800a5ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 f8e3 	bl	800a74e <I2C_IsAcknowledgeFailed>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e034      	b.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d028      	beq.n	800a5ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59a:	f7fe f8c3 	bl	8008724 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d302      	bcc.n	800a5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11d      	bne.n	800a5ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ba:	2b80      	cmp	r3, #128	; 0x80
 800a5bc:	d016      	beq.n	800a5ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	f043 0220 	orr.w	r2, r3, #32
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e007      	b.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f6:	2b80      	cmp	r3, #128	; 0x80
 800a5f8:	d1c3      	bne.n	800a582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a610:	e034      	b.n	800a67c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f89b 	bl	800a74e <I2C_IsAcknowledgeFailed>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e034      	b.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d028      	beq.n	800a67c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7fe f87b 	bl	8008724 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d11d      	bne.n	800a67c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d016      	beq.n	800a67c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2220      	movs	r2, #32
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	f043 0220 	orr.w	r2, r3, #32
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e007      	b.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b04      	cmp	r3, #4
 800a688:	d1c3      	bne.n	800a612 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6a0:	e049      	b.n	800a736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	f003 0310 	and.w	r3, r3, #16
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d119      	bne.n	800a6e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0210 	mvn.w	r2, #16
 800a6b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e030      	b.n	800a746 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6e4:	f7fe f81e 	bl	8008724 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d302      	bcc.n	800a6fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d11d      	bne.n	800a736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a704:	2b40      	cmp	r3, #64	; 0x40
 800a706:	d016      	beq.n	800a736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2220      	movs	r2, #32
 800a712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	f043 0220 	orr.w	r2, r3, #32
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e007      	b.n	800a746 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b40      	cmp	r3, #64	; 0x40
 800a742:	d1ae      	bne.n	800a6a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a764:	d11b      	bne.n	800a79e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a76e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2220      	movs	r2, #32
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	f043 0204 	orr.w	r2, r3, #4
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr
	...

0800a7ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e272      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8087 	beq.w	800a8da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7cc:	4b92      	ldr	r3, [pc, #584]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f003 030c 	and.w	r3, r3, #12
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d00c      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a7d8:	4b8f      	ldr	r3, [pc, #572]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f003 030c 	and.w	r3, r3, #12
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d112      	bne.n	800a80a <HAL_RCC_OscConfig+0x5e>
 800a7e4:	4b8c      	ldr	r3, [pc, #560]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f0:	d10b      	bne.n	800a80a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7f2:	4b89      	ldr	r3, [pc, #548]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d06c      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x12c>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d168      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e24c      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a812:	d106      	bne.n	800a822 <HAL_RCC_OscConfig+0x76>
 800a814:	4b80      	ldr	r3, [pc, #512]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a7f      	ldr	r2, [pc, #508]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a81a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	e02e      	b.n	800a880 <HAL_RCC_OscConfig+0xd4>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10c      	bne.n	800a844 <HAL_RCC_OscConfig+0x98>
 800a82a:	4b7b      	ldr	r3, [pc, #492]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a7a      	ldr	r2, [pc, #488]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	4b78      	ldr	r3, [pc, #480]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a77      	ldr	r2, [pc, #476]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a83c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	e01d      	b.n	800a880 <HAL_RCC_OscConfig+0xd4>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a84c:	d10c      	bne.n	800a868 <HAL_RCC_OscConfig+0xbc>
 800a84e:	4b72      	ldr	r3, [pc, #456]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a71      	ldr	r2, [pc, #452]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	4b6f      	ldr	r3, [pc, #444]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a6e      	ldr	r2, [pc, #440]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	e00b      	b.n	800a880 <HAL_RCC_OscConfig+0xd4>
 800a868:	4b6b      	ldr	r3, [pc, #428]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a6a      	ldr	r2, [pc, #424]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a86e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	4b68      	ldr	r3, [pc, #416]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a67      	ldr	r2, [pc, #412]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a87a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a87e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d013      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a888:	f7fd ff4c 	bl	8008724 <HAL_GetTick>
 800a88c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a88e:	e008      	b.n	800a8a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a890:	f7fd ff48 	bl	8008724 <HAL_GetTick>
 800a894:	4602      	mov	r2, r0
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	2b64      	cmp	r3, #100	; 0x64
 800a89c:	d901      	bls.n	800a8a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e200      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8a2:	4b5d      	ldr	r3, [pc, #372]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0f0      	beq.n	800a890 <HAL_RCC_OscConfig+0xe4>
 800a8ae:	e014      	b.n	800a8da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8b0:	f7fd ff38 	bl	8008724 <HAL_GetTick>
 800a8b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8b6:	e008      	b.n	800a8ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8b8:	f7fd ff34 	bl	8008724 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b64      	cmp	r3, #100	; 0x64
 800a8c4:	d901      	bls.n	800a8ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e1ec      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8ca:	4b53      	ldr	r3, [pc, #332]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1f0      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x10c>
 800a8d6:	e000      	b.n	800a8da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d063      	beq.n	800a9ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a8e6:	4b4c      	ldr	r3, [pc, #304]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f003 030c 	and.w	r3, r3, #12
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00b      	beq.n	800a90a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a8f2:	4b49      	ldr	r3, [pc, #292]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f003 030c 	and.w	r3, r3, #12
 800a8fa:	2b08      	cmp	r3, #8
 800a8fc:	d11c      	bne.n	800a938 <HAL_RCC_OscConfig+0x18c>
 800a8fe:	4b46      	ldr	r3, [pc, #280]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d116      	bne.n	800a938 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a90a:	4b43      	ldr	r3, [pc, #268]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <HAL_RCC_OscConfig+0x176>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d001      	beq.n	800a922 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e1c0      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a922:	4b3d      	ldr	r3, [pc, #244]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	4939      	ldr	r1, [pc, #228]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a932:	4313      	orrs	r3, r2
 800a934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a936:	e03a      	b.n	800a9ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d020      	beq.n	800a982 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a940:	4b36      	ldr	r3, [pc, #216]	; (800aa1c <HAL_RCC_OscConfig+0x270>)
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a946:	f7fd feed 	bl	8008724 <HAL_GetTick>
 800a94a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a94e:	f7fd fee9 	bl	8008724 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e1a1      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a960:	4b2d      	ldr	r3, [pc, #180]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a96c:	4b2a      	ldr	r3, [pc, #168]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	4927      	ldr	r1, [pc, #156]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	600b      	str	r3, [r1, #0]
 800a980:	e015      	b.n	800a9ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a982:	4b26      	ldr	r3, [pc, #152]	; (800aa1c <HAL_RCC_OscConfig+0x270>)
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a988:	f7fd fecc 	bl	8008724 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a990:	f7fd fec8 	bl	8008724 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e180      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9a2:	4b1d      	ldr	r3, [pc, #116]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d03a      	beq.n	800aa30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d019      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9c2:	4b17      	ldr	r3, [pc, #92]	; (800aa20 <HAL_RCC_OscConfig+0x274>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9c8:	f7fd feac 	bl	8008724 <HAL_GetTick>
 800a9cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9d0:	f7fd fea8 	bl	8008724 <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e160      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <HAL_RCC_OscConfig+0x26c>)
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0f0      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	f000 face 	bl	800af90 <RCC_Delay>
 800a9f4:	e01c      	b.n	800aa30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <HAL_RCC_OscConfig+0x274>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9fc:	f7fd fe92 	bl	8008724 <HAL_GetTick>
 800aa00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa02:	e00f      	b.n	800aa24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa04:	f7fd fe8e 	bl	8008724 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d908      	bls.n	800aa24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e146      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
 800aa16:	bf00      	nop
 800aa18:	40021000 	.word	0x40021000
 800aa1c:	42420000 	.word	0x42420000
 800aa20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa24:	4b92      	ldr	r3, [pc, #584]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e9      	bne.n	800aa04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 80a6 	beq.w	800ab8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa42:	4b8b      	ldr	r3, [pc, #556]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10d      	bne.n	800aa6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa4e:	4b88      	ldr	r3, [pc, #544]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	4a87      	ldr	r2, [pc, #540]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aa54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa58:	61d3      	str	r3, [r2, #28]
 800aa5a:	4b85      	ldr	r3, [pc, #532]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa62:	60bb      	str	r3, [r7, #8]
 800aa64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa6a:	4b82      	ldr	r3, [pc, #520]	; (800ac74 <HAL_RCC_OscConfig+0x4c8>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d118      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa76:	4b7f      	ldr	r3, [pc, #508]	; (800ac74 <HAL_RCC_OscConfig+0x4c8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a7e      	ldr	r2, [pc, #504]	; (800ac74 <HAL_RCC_OscConfig+0x4c8>)
 800aa7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa82:	f7fd fe4f 	bl	8008724 <HAL_GetTick>
 800aa86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa88:	e008      	b.n	800aa9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa8a:	f7fd fe4b 	bl	8008724 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b64      	cmp	r3, #100	; 0x64
 800aa96:	d901      	bls.n	800aa9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e103      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa9c:	4b75      	ldr	r3, [pc, #468]	; (800ac74 <HAL_RCC_OscConfig+0x4c8>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0f0      	beq.n	800aa8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d106      	bne.n	800aabe <HAL_RCC_OscConfig+0x312>
 800aab0:	4b6f      	ldr	r3, [pc, #444]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	4a6e      	ldr	r2, [pc, #440]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aab6:	f043 0301 	orr.w	r3, r3, #1
 800aaba:	6213      	str	r3, [r2, #32]
 800aabc:	e02d      	b.n	800ab1a <HAL_RCC_OscConfig+0x36e>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10c      	bne.n	800aae0 <HAL_RCC_OscConfig+0x334>
 800aac6:	4b6a      	ldr	r3, [pc, #424]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	4a69      	ldr	r2, [pc, #420]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aacc:	f023 0301 	bic.w	r3, r3, #1
 800aad0:	6213      	str	r3, [r2, #32]
 800aad2:	4b67      	ldr	r3, [pc, #412]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	4a66      	ldr	r2, [pc, #408]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aad8:	f023 0304 	bic.w	r3, r3, #4
 800aadc:	6213      	str	r3, [r2, #32]
 800aade:	e01c      	b.n	800ab1a <HAL_RCC_OscConfig+0x36e>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b05      	cmp	r3, #5
 800aae6:	d10c      	bne.n	800ab02 <HAL_RCC_OscConfig+0x356>
 800aae8:	4b61      	ldr	r3, [pc, #388]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	4a60      	ldr	r2, [pc, #384]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aaee:	f043 0304 	orr.w	r3, r3, #4
 800aaf2:	6213      	str	r3, [r2, #32]
 800aaf4:	4b5e      	ldr	r3, [pc, #376]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	4a5d      	ldr	r2, [pc, #372]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800aafa:	f043 0301 	orr.w	r3, r3, #1
 800aafe:	6213      	str	r3, [r2, #32]
 800ab00:	e00b      	b.n	800ab1a <HAL_RCC_OscConfig+0x36e>
 800ab02:	4b5b      	ldr	r3, [pc, #364]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	4a5a      	ldr	r2, [pc, #360]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab08:	f023 0301 	bic.w	r3, r3, #1
 800ab0c:	6213      	str	r3, [r2, #32]
 800ab0e:	4b58      	ldr	r3, [pc, #352]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	4a57      	ldr	r2, [pc, #348]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab14:	f023 0304 	bic.w	r3, r3, #4
 800ab18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d015      	beq.n	800ab4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab22:	f7fd fdff 	bl	8008724 <HAL_GetTick>
 800ab26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab28:	e00a      	b.n	800ab40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab2a:	f7fd fdfb 	bl	8008724 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d901      	bls.n	800ab40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e0b1      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab40:	4b4b      	ldr	r3, [pc, #300]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0ee      	beq.n	800ab2a <HAL_RCC_OscConfig+0x37e>
 800ab4c:	e014      	b.n	800ab78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab4e:	f7fd fde9 	bl	8008724 <HAL_GetTick>
 800ab52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab54:	e00a      	b.n	800ab6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab56:	f7fd fde5 	bl	8008724 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d901      	bls.n	800ab6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e09b      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab6c:	4b40      	ldr	r3, [pc, #256]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1ee      	bne.n	800ab56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d105      	bne.n	800ab8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab7e:	4b3c      	ldr	r3, [pc, #240]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	4a3b      	ldr	r2, [pc, #236]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 8087 	beq.w	800aca2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab94:	4b36      	ldr	r3, [pc, #216]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f003 030c 	and.w	r3, r3, #12
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	d061      	beq.n	800ac64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d146      	bne.n	800ac36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aba8:	4b33      	ldr	r3, [pc, #204]	; (800ac78 <HAL_RCC_OscConfig+0x4cc>)
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abae:	f7fd fdb9 	bl	8008724 <HAL_GetTick>
 800abb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abb4:	e008      	b.n	800abc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abb6:	f7fd fdb5 	bl	8008724 <HAL_GetTick>
 800abba:	4602      	mov	r2, r0
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e06d      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abc8:	4b29      	ldr	r3, [pc, #164]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1f0      	bne.n	800abb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abdc:	d108      	bne.n	800abf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abde:	4b24      	ldr	r3, [pc, #144]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	4921      	ldr	r1, [pc, #132]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800abec:	4313      	orrs	r3, r2
 800abee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abf0:	4b1f      	ldr	r3, [pc, #124]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a19      	ldr	r1, [r3, #32]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	430b      	orrs	r3, r1
 800ac02:	491b      	ldr	r1, [pc, #108]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac08:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <HAL_RCC_OscConfig+0x4cc>)
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac0e:	f7fd fd89 	bl	8008724 <HAL_GetTick>
 800ac12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac14:	e008      	b.n	800ac28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac16:	f7fd fd85 	bl	8008724 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d901      	bls.n	800ac28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e03d      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac28:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0f0      	beq.n	800ac16 <HAL_RCC_OscConfig+0x46a>
 800ac34:	e035      	b.n	800aca2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac36:	4b10      	ldr	r3, [pc, #64]	; (800ac78 <HAL_RCC_OscConfig+0x4cc>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac3c:	f7fd fd72 	bl	8008724 <HAL_GetTick>
 800ac40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac42:	e008      	b.n	800ac56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac44:	f7fd fd6e 	bl	8008724 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e026      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac56:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <HAL_RCC_OscConfig+0x4c4>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1f0      	bne.n	800ac44 <HAL_RCC_OscConfig+0x498>
 800ac62:	e01e      	b.n	800aca2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d107      	bne.n	800ac7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e019      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
 800ac70:	40021000 	.word	0x40021000
 800ac74:	40007000 	.word	0x40007000
 800ac78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ac7c:	4b0b      	ldr	r3, [pc, #44]	; (800acac <HAL_RCC_OscConfig+0x500>)
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d106      	bne.n	800ac9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d001      	beq.n	800aca2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	40021000 	.word	0x40021000

0800acb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e0d0      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acc4:	4b6a      	ldr	r3, [pc, #424]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0307 	and.w	r3, r3, #7
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d910      	bls.n	800acf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acd2:	4b67      	ldr	r3, [pc, #412]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f023 0207 	bic.w	r2, r3, #7
 800acda:	4965      	ldr	r1, [pc, #404]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	4313      	orrs	r3, r2
 800ace0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ace2:	4b63      	ldr	r3, [pc, #396]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	429a      	cmp	r2, r3
 800acee:	d001      	beq.n	800acf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e0b8      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0302 	and.w	r3, r3, #2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d020      	beq.n	800ad42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad0c:	4b59      	ldr	r3, [pc, #356]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a58      	ldr	r2, [pc, #352]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0308 	and.w	r3, r3, #8
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad24:	4b53      	ldr	r3, [pc, #332]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	4a52      	ldr	r2, [pc, #328]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad30:	4b50      	ldr	r3, [pc, #320]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	494d      	ldr	r1, [pc, #308]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d040      	beq.n	800add0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d107      	bne.n	800ad66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad56:	4b47      	ldr	r3, [pc, #284]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d115      	bne.n	800ad8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e07f      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d107      	bne.n	800ad7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad6e:	4b41      	ldr	r3, [pc, #260]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d109      	bne.n	800ad8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e073      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad7e:	4b3d      	ldr	r3, [pc, #244]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0302 	and.w	r3, r3, #2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e06b      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad8e:	4b39      	ldr	r3, [pc, #228]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f023 0203 	bic.w	r2, r3, #3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	4936      	ldr	r1, [pc, #216]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ada0:	f7fd fcc0 	bl	8008724 <HAL_GetTick>
 800ada4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ada6:	e00a      	b.n	800adbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ada8:	f7fd fcbc 	bl	8008724 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d901      	bls.n	800adbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e053      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adbe:	4b2d      	ldr	r3, [pc, #180]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f003 020c 	and.w	r2, r3, #12
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	429a      	cmp	r2, r3
 800adce:	d1eb      	bne.n	800ada8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800add0:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d210      	bcs.n	800ae00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adde:	4b24      	ldr	r3, [pc, #144]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f023 0207 	bic.w	r2, r3, #7
 800ade6:	4922      	ldr	r1, [pc, #136]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	4313      	orrs	r3, r2
 800adec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adee:	4b20      	ldr	r3, [pc, #128]	; (800ae70 <HAL_RCC_ClockConfig+0x1c0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0307 	and.w	r3, r3, #7
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d001      	beq.n	800ae00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e032      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae0c:	4b19      	ldr	r3, [pc, #100]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	4916      	ldr	r1, [pc, #88]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d009      	beq.n	800ae3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae2a:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	490e      	ldr	r1, [pc, #56]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae3e:	f000 f821 	bl	800ae84 <HAL_RCC_GetSysClockFreq>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	091b      	lsrs	r3, r3, #4
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	490a      	ldr	r1, [pc, #40]	; (800ae78 <HAL_RCC_ClockConfig+0x1c8>)
 800ae50:	5ccb      	ldrb	r3, [r1, r3]
 800ae52:	fa22 f303 	lsr.w	r3, r2, r3
 800ae56:	4a09      	ldr	r2, [pc, #36]	; (800ae7c <HAL_RCC_ClockConfig+0x1cc>)
 800ae58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae5a:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <HAL_RCC_ClockConfig+0x1d0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fd fc1e 	bl	80086a0 <HAL_InitTick>

  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	40022000 	.word	0x40022000
 800ae74:	40021000 	.word	0x40021000
 800ae78:	0800dcb8 	.word	0x0800dcb8
 800ae7c:	200000a0 	.word	0x200000a0
 800ae80:	200000a4 	.word	0x200000a4

0800ae84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60bb      	str	r3, [r7, #8]
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
 800ae96:	2300      	movs	r3, #0
 800ae98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ae9e:	4b1e      	ldr	r3, [pc, #120]	; (800af18 <HAL_RCC_GetSysClockFreq+0x94>)
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f003 030c 	and.w	r3, r3, #12
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	d002      	beq.n	800aeb4 <HAL_RCC_GetSysClockFreq+0x30>
 800aeae:	2b08      	cmp	r3, #8
 800aeb0:	d003      	beq.n	800aeba <HAL_RCC_GetSysClockFreq+0x36>
 800aeb2:	e027      	b.n	800af04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aeb4:	4b19      	ldr	r3, [pc, #100]	; (800af1c <HAL_RCC_GetSysClockFreq+0x98>)
 800aeb6:	613b      	str	r3, [r7, #16]
      break;
 800aeb8:	e027      	b.n	800af0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	0c9b      	lsrs	r3, r3, #18
 800aebe:	f003 030f 	and.w	r3, r3, #15
 800aec2:	4a17      	ldr	r2, [pc, #92]	; (800af20 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aec4:	5cd3      	ldrb	r3, [r2, r3]
 800aec6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d010      	beq.n	800aef4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aed2:	4b11      	ldr	r3, [pc, #68]	; (800af18 <HAL_RCC_GetSysClockFreq+0x94>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	0c5b      	lsrs	r3, r3, #17
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	4a11      	ldr	r2, [pc, #68]	; (800af24 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aede:	5cd3      	ldrb	r3, [r2, r3]
 800aee0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a0d      	ldr	r2, [pc, #52]	; (800af1c <HAL_RCC_GetSysClockFreq+0x98>)
 800aee6:	fb03 f202 	mul.w	r2, r3, r2
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	e004      	b.n	800aefe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a0c      	ldr	r2, [pc, #48]	; (800af28 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aef8:	fb02 f303 	mul.w	r3, r2, r3
 800aefc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	613b      	str	r3, [r7, #16]
      break;
 800af02:	e002      	b.n	800af0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <HAL_RCC_GetSysClockFreq+0x98>)
 800af06:	613b      	str	r3, [r7, #16]
      break;
 800af08:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af0a:	693b      	ldr	r3, [r7, #16]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	371c      	adds	r7, #28
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	40021000 	.word	0x40021000
 800af1c:	007a1200 	.word	0x007a1200
 800af20:	0800dcd0 	.word	0x0800dcd0
 800af24:	0800dce0 	.word	0x0800dce0
 800af28:	003d0900 	.word	0x003d0900

0800af2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af30:	4b02      	ldr	r3, [pc, #8]	; (800af3c <HAL_RCC_GetHCLKFreq+0x10>)
 800af32:	681b      	ldr	r3, [r3, #0]
}
 800af34:	4618      	mov	r0, r3
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr
 800af3c:	200000a0 	.word	0x200000a0

0800af40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af44:	f7ff fff2 	bl	800af2c <HAL_RCC_GetHCLKFreq>
 800af48:	4602      	mov	r2, r0
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	0a1b      	lsrs	r3, r3, #8
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	4903      	ldr	r1, [pc, #12]	; (800af64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af56:	5ccb      	ldrb	r3, [r1, r3]
 800af58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	40021000 	.word	0x40021000
 800af64:	0800dcc8 	.word	0x0800dcc8

0800af68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af6c:	f7ff ffde 	bl	800af2c <HAL_RCC_GetHCLKFreq>
 800af70:	4602      	mov	r2, r0
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	0adb      	lsrs	r3, r3, #11
 800af78:	f003 0307 	and.w	r3, r3, #7
 800af7c:	4903      	ldr	r1, [pc, #12]	; (800af8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800af7e:	5ccb      	ldrb	r3, [r1, r3]
 800af80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af84:	4618      	mov	r0, r3
 800af86:	bd80      	pop	{r7, pc}
 800af88:	40021000 	.word	0x40021000
 800af8c:	0800dcc8 	.word	0x0800dcc8

0800af90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <RCC_Delay+0x34>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a0a      	ldr	r2, [pc, #40]	; (800afc8 <RCC_Delay+0x38>)
 800af9e:	fba2 2303 	umull	r2, r3, r2, r3
 800afa2:	0a5b      	lsrs	r3, r3, #9
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	fb02 f303 	mul.w	r3, r2, r3
 800afaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800afac:	bf00      	nop
  }
  while (Delay --);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1e5a      	subs	r2, r3, #1
 800afb2:	60fa      	str	r2, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1f9      	bne.n	800afac <RCC_Delay+0x1c>
}
 800afb8:	bf00      	nop
 800afba:	bf00      	nop
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr
 800afc4:	200000a0 	.word	0x200000a0
 800afc8:	10624dd3 	.word	0x10624dd3

0800afcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e041      	b.n	800b062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7fd fa26 	bl	8008444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3304      	adds	r3, #4
 800b008:	4619      	mov	r1, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	f000 fa82 	bl	800b514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d001      	beq.n	800b084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e044      	b.n	800b10e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2202      	movs	r2, #2
 800b088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68da      	ldr	r2, [r3, #12]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f042 0201 	orr.w	r2, r2, #1
 800b09a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <HAL_TIM_Base_Start_IT+0xac>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d018      	beq.n	800b0d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a1c      	ldr	r2, [pc, #112]	; (800b11c <HAL_TIM_Base_Start_IT+0xb0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d013      	beq.n	800b0d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b8:	d00e      	beq.n	800b0d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a18      	ldr	r2, [pc, #96]	; (800b120 <HAL_TIM_Base_Start_IT+0xb4>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d009      	beq.n	800b0d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a16      	ldr	r2, [pc, #88]	; (800b124 <HAL_TIM_Base_Start_IT+0xb8>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d004      	beq.n	800b0d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a15      	ldr	r2, [pc, #84]	; (800b128 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d111      	bne.n	800b0fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2b06      	cmp	r3, #6
 800b0e8:	d010      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fa:	e007      	b.n	800b10c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	bc80      	pop	{r7}
 800b116:	4770      	bx	lr
 800b118:	40012c00 	.word	0x40012c00
 800b11c:	40013400 	.word	0x40013400
 800b120:	40000400 	.word	0x40000400
 800b124:	40000800 	.word	0x40000800
 800b128:	40000c00 	.word	0x40000c00

0800b12c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d122      	bne.n	800b188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d11b      	bne.n	800b188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f06f 0202 	mvn.w	r2, #2
 800b158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f9b4 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800b174:	e005      	b.n	800b182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9a7 	bl	800b4ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f9b6 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	f003 0304 	and.w	r3, r3, #4
 800b192:	2b04      	cmp	r3, #4
 800b194:	d122      	bne.n	800b1dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f003 0304 	and.w	r3, r3, #4
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d11b      	bne.n	800b1dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f06f 0204 	mvn.w	r2, #4
 800b1ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f98a 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800b1c8:	e005      	b.n	800b1d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f97d 	bl	800b4ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f98c 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	f003 0308 	and.w	r3, r3, #8
 800b1e6:	2b08      	cmp	r3, #8
 800b1e8:	d122      	bne.n	800b230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f003 0308 	and.w	r3, r3, #8
 800b1f4:	2b08      	cmp	r3, #8
 800b1f6:	d11b      	bne.n	800b230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f06f 0208 	mvn.w	r2, #8
 800b200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2204      	movs	r2, #4
 800b206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	f003 0303 	and.w	r3, r3, #3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f960 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800b21c:	e005      	b.n	800b22a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f953 	bl	800b4ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f962 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	f003 0310 	and.w	r3, r3, #16
 800b23a:	2b10      	cmp	r3, #16
 800b23c:	d122      	bne.n	800b284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f003 0310 	and.w	r3, r3, #16
 800b248:	2b10      	cmp	r3, #16
 800b24a:	d11b      	bne.n	800b284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f06f 0210 	mvn.w	r2, #16
 800b254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2208      	movs	r2, #8
 800b25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b266:	2b00      	cmp	r3, #0
 800b268:	d003      	beq.n	800b272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f936 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800b270:	e005      	b.n	800b27e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f929 	bl	800b4ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f938 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d10e      	bne.n	800b2b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d107      	bne.n	800b2b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f06f 0201 	mvn.w	r2, #1
 800b2a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7fc fd62 	bl	8007d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ba:	2b80      	cmp	r3, #128	; 0x80
 800b2bc:	d10e      	bne.n	800b2dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c8:	2b80      	cmp	r3, #128	; 0x80
 800b2ca:	d107      	bne.n	800b2dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 faa1 	bl	800b81e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e6:	2b40      	cmp	r3, #64	; 0x40
 800b2e8:	d10e      	bne.n	800b308 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d107      	bne.n	800b308 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f8fc 	bl	800b500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	f003 0320 	and.w	r3, r3, #32
 800b312:	2b20      	cmp	r3, #32
 800b314:	d10e      	bne.n	800b334 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f003 0320 	and.w	r3, r3, #32
 800b320:	2b20      	cmp	r3, #32
 800b322:	d107      	bne.n	800b334 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f06f 0220 	mvn.w	r2, #32
 800b32c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa6c 	bl	800b80c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b350:	2b01      	cmp	r3, #1
 800b352:	d101      	bne.n	800b358 <HAL_TIM_ConfigClockSource+0x1c>
 800b354:	2302      	movs	r3, #2
 800b356:	e0b4      	b.n	800b4c2 <HAL_TIM_ConfigClockSource+0x186>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b37e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b390:	d03e      	beq.n	800b410 <HAL_TIM_ConfigClockSource+0xd4>
 800b392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b396:	f200 8087 	bhi.w	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b39e:	f000 8086 	beq.w	800b4ae <HAL_TIM_ConfigClockSource+0x172>
 800b3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a6:	d87f      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a8:	2b70      	cmp	r3, #112	; 0x70
 800b3aa:	d01a      	beq.n	800b3e2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3ac:	2b70      	cmp	r3, #112	; 0x70
 800b3ae:	d87b      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b0:	2b60      	cmp	r3, #96	; 0x60
 800b3b2:	d050      	beq.n	800b456 <HAL_TIM_ConfigClockSource+0x11a>
 800b3b4:	2b60      	cmp	r3, #96	; 0x60
 800b3b6:	d877      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b8:	2b50      	cmp	r3, #80	; 0x50
 800b3ba:	d03c      	beq.n	800b436 <HAL_TIM_ConfigClockSource+0xfa>
 800b3bc:	2b50      	cmp	r3, #80	; 0x50
 800b3be:	d873      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c0:	2b40      	cmp	r3, #64	; 0x40
 800b3c2:	d058      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x13a>
 800b3c4:	2b40      	cmp	r3, #64	; 0x40
 800b3c6:	d86f      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c8:	2b30      	cmp	r3, #48	; 0x30
 800b3ca:	d064      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x15a>
 800b3cc:	2b30      	cmp	r3, #48	; 0x30
 800b3ce:	d86b      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d060      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x15a>
 800b3d4:	2b20      	cmp	r3, #32
 800b3d6:	d867      	bhi.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d05c      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x15a>
 800b3dc:	2b10      	cmp	r3, #16
 800b3de:	d05a      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x15a>
 800b3e0:	e062      	b.n	800b4a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6818      	ldr	r0, [r3, #0]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	6899      	ldr	r1, [r3, #8]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f000 f980 	bl	800b6f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	609a      	str	r2, [r3, #8]
      break;
 800b40e:	e04f      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6818      	ldr	r0, [r3, #0]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	6899      	ldr	r1, [r3, #8]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f000 f969 	bl	800b6f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b432:	609a      	str	r2, [r3, #8]
      break;
 800b434:	e03c      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	6859      	ldr	r1, [r3, #4]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	461a      	mov	r2, r3
 800b444:	f000 f8e0 	bl	800b608 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2150      	movs	r1, #80	; 0x50
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 f937 	bl	800b6c2 <TIM_ITRx_SetConfig>
      break;
 800b454:	e02c      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	6859      	ldr	r1, [r3, #4]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	461a      	mov	r2, r3
 800b464:	f000 f8fe 	bl	800b664 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2160      	movs	r1, #96	; 0x60
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 f927 	bl	800b6c2 <TIM_ITRx_SetConfig>
      break;
 800b474:	e01c      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	6859      	ldr	r1, [r3, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	461a      	mov	r2, r3
 800b484:	f000 f8c0 	bl	800b608 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2140      	movs	r1, #64	; 0x40
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 f917 	bl	800b6c2 <TIM_ITRx_SetConfig>
      break;
 800b494:	e00c      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	f000 f90e 	bl	800b6c2 <TIM_ITRx_SetConfig>
      break;
 800b4a6:	e003      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ac:	e000      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b083      	sub	sp, #12
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4d2:	bf00      	nop
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bc80      	pop	{r7}
 800b4da:	4770      	bx	lr

0800b4dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bc80      	pop	{r7}
 800b4ec:	4770      	bx	lr

0800b4ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4f6:	bf00      	nop
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bc80      	pop	{r7}
 800b510:	4770      	bx	lr
	...

0800b514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a33      	ldr	r2, [pc, #204]	; (800b5f4 <TIM_Base_SetConfig+0xe0>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d013      	beq.n	800b554 <TIM_Base_SetConfig+0x40>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a32      	ldr	r2, [pc, #200]	; (800b5f8 <TIM_Base_SetConfig+0xe4>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d00f      	beq.n	800b554 <TIM_Base_SetConfig+0x40>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b53a:	d00b      	beq.n	800b554 <TIM_Base_SetConfig+0x40>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a2f      	ldr	r2, [pc, #188]	; (800b5fc <TIM_Base_SetConfig+0xe8>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d007      	beq.n	800b554 <TIM_Base_SetConfig+0x40>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a2e      	ldr	r2, [pc, #184]	; (800b600 <TIM_Base_SetConfig+0xec>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d003      	beq.n	800b554 <TIM_Base_SetConfig+0x40>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <TIM_Base_SetConfig+0xf0>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d108      	bne.n	800b566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b55a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a22      	ldr	r2, [pc, #136]	; (800b5f4 <TIM_Base_SetConfig+0xe0>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d013      	beq.n	800b596 <TIM_Base_SetConfig+0x82>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a21      	ldr	r2, [pc, #132]	; (800b5f8 <TIM_Base_SetConfig+0xe4>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d00f      	beq.n	800b596 <TIM_Base_SetConfig+0x82>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b57c:	d00b      	beq.n	800b596 <TIM_Base_SetConfig+0x82>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <TIM_Base_SetConfig+0xe8>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d007      	beq.n	800b596 <TIM_Base_SetConfig+0x82>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a1d      	ldr	r2, [pc, #116]	; (800b600 <TIM_Base_SetConfig+0xec>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d003      	beq.n	800b596 <TIM_Base_SetConfig+0x82>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a1c      	ldr	r2, [pc, #112]	; (800b604 <TIM_Base_SetConfig+0xf0>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d108      	bne.n	800b5a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a09      	ldr	r2, [pc, #36]	; (800b5f4 <TIM_Base_SetConfig+0xe0>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_Base_SetConfig+0xc8>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a08      	ldr	r2, [pc, #32]	; (800b5f8 <TIM_Base_SetConfig+0xe4>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d103      	bne.n	800b5e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	691a      	ldr	r2, [r3, #16]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	615a      	str	r2, [r3, #20]
}
 800b5ea:	bf00      	nop
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bc80      	pop	{r7}
 800b5f2:	4770      	bx	lr
 800b5f4:	40012c00 	.word	0x40012c00
 800b5f8:	40013400 	.word	0x40013400
 800b5fc:	40000400 	.word	0x40000400
 800b600:	40000800 	.word	0x40000800
 800b604:	40000c00 	.word	0x40000c00

0800b608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f023 0201 	bic.w	r2, r3, #1
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	011b      	lsls	r3, r3, #4
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f023 030a 	bic.w	r3, r3, #10
 800b644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	621a      	str	r2, [r3, #32]
}
 800b65a:	bf00      	nop
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	bc80      	pop	{r7}
 800b662:	4770      	bx	lr

0800b664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	f023 0210 	bic.w	r2, r3, #16
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b68e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	031b      	lsls	r3, r3, #12
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	4313      	orrs	r3, r2
 800b698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	621a      	str	r2, [r3, #32]
}
 800b6b8:	bf00      	nop
 800b6ba:	371c      	adds	r7, #28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr

0800b6c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	f043 0307 	orr.w	r3, r3, #7
 800b6e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	609a      	str	r2, [r3, #8]
}
 800b6ec:	bf00      	nop
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bc80      	pop	{r7}
 800b6f4:	4770      	bx	lr

0800b6f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b087      	sub	sp, #28
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	60b9      	str	r1, [r7, #8]
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b710:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	021a      	lsls	r2, r3, #8
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	431a      	orrs	r2, r3
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	609a      	str	r2, [r3, #8]
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	bc80      	pop	{r7}
 800b732:	4770      	bx	lr

0800b734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b744:	2b01      	cmp	r3, #1
 800b746:	d101      	bne.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b748:	2302      	movs	r3, #2
 800b74a:	e050      	b.n	800b7ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2202      	movs	r2, #2
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a1b      	ldr	r2, [pc, #108]	; (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d018      	beq.n	800b7c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a19      	ldr	r2, [pc, #100]	; (800b7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d013      	beq.n	800b7c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a2:	d00e      	beq.n	800b7c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a15      	ldr	r2, [pc, #84]	; (800b800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d009      	beq.n	800b7c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a14      	ldr	r2, [pc, #80]	; (800b804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d004      	beq.n	800b7c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a12      	ldr	r2, [pc, #72]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d10c      	bne.n	800b7dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc80      	pop	{r7}
 800b7f6:	4770      	bx	lr
 800b7f8:	40012c00 	.word	0x40012c00
 800b7fc:	40013400 	.word	0x40013400
 800b800:	40000400 	.word	0x40000400
 800b804:	40000800 	.word	0x40000800
 800b808:	40000c00 	.word	0x40000c00

0800b80c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	bc80      	pop	{r7}
 800b81c:	4770      	bx	lr

0800b81e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b81e:	b480      	push	{r7}
 800b820:	b083      	sub	sp, #12
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bc80      	pop	{r7}
 800b82e:	4770      	bx	lr

0800b830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e042      	b.n	800b8c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7fc fe1a 	bl	8008490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2224      	movs	r2, #36	; 0x24
 800b860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fcb5 	bl	800c1e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	691a      	ldr	r2, [r3, #16]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	695a      	ldr	r2, [r3, #20]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68da      	ldr	r2, [r3, #12]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d121      	bne.n	800b92e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <HAL_UART_Transmit_IT+0x26>
 800b8f0:	88fb      	ldrh	r3, [r7, #6]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e01a      	b.n	800b930 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	88fa      	ldrh	r2, [r7, #6]
 800b904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	88fa      	ldrh	r2, [r7, #6]
 800b90a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2221      	movs	r2, #33	; 0x21
 800b916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68da      	ldr	r2, [r3, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b928:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e000      	b.n	800b930 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b92e:	2302      	movs	r3, #2
  }
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	bc80      	pop	{r7}
 800b938:	4770      	bx	lr
	...

0800b93c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b0ba      	sub	sp, #232	; 0xe8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b962:	2300      	movs	r3, #0
 800b964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b968:	2300      	movs	r3, #0
 800b96a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b972:	f003 030f 	and.w	r3, r3, #15
 800b976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b97a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10f      	bne.n	800b9a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b986:	f003 0320 	and.w	r3, r3, #32
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d009      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x66>
 800b98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fb63 	bl	800c066 <UART_Receive_IT>
      return;
 800b9a0:	e25b      	b.n	800be5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 80de 	beq.w	800bb68 <HAL_UART_IRQHandler+0x22c>
 800b9ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 80d1 	beq.w	800bb68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00b      	beq.n	800b9ea <HAL_UART_IRQHandler+0xae>
 800b9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d005      	beq.n	800b9ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e2:	f043 0201 	orr.w	r2, r3, #1
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <HAL_UART_IRQHandler+0xd2>
 800b9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9fa:	f003 0301 	and.w	r3, r3, #1
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d005      	beq.n	800ba0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	f043 0202 	orr.w	r2, r3, #2
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba12:	f003 0302 	and.w	r3, r3, #2
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00b      	beq.n	800ba32 <HAL_UART_IRQHandler+0xf6>
 800ba1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d005      	beq.n	800ba32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2a:	f043 0204 	orr.w	r2, r3, #4
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba36:	f003 0308 	and.w	r3, r3, #8
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d011      	beq.n	800ba62 <HAL_UART_IRQHandler+0x126>
 800ba3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba42:	f003 0320 	and.w	r3, r3, #32
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d105      	bne.n	800ba56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d005      	beq.n	800ba62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5a:	f043 0208 	orr.w	r2, r3, #8
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 81f2 	beq.w	800be50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba70:	f003 0320 	and.w	r3, r3, #32
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d008      	beq.n	800ba8a <HAL_UART_IRQHandler+0x14e>
 800ba78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba7c:	f003 0320 	and.w	r3, r3, #32
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 faee 	bl	800c066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	bf14      	ite	ne
 800ba98:	2301      	movne	r3, #1
 800ba9a:	2300      	moveq	r3, #0
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa6:	f003 0308 	and.w	r3, r3, #8
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d103      	bne.n	800bab6 <HAL_UART_IRQHandler+0x17a>
 800baae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d04f      	beq.n	800bb56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f9f8 	bl	800beac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	695b      	ldr	r3, [r3, #20]
 800bac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d041      	beq.n	800bb4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3314      	adds	r3, #20
 800bad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bad8:	e853 3f00 	ldrex	r3, [r3]
 800badc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3314      	adds	r3, #20
 800baf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800baf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bafa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb06:	e841 2300 	strex	r3, r2, [r1]
 800bb0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1d9      	bne.n	800baca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d013      	beq.n	800bb46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb22:	4a7e      	ldr	r2, [pc, #504]	; (800bd1c <HAL_UART_IRQHandler+0x3e0>)
 800bb24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fd f86c 	bl	8008c08 <HAL_DMA_Abort_IT>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d016      	beq.n	800bb64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb40:	4610      	mov	r0, r2
 800bb42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb44:	e00e      	b.n	800bb64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f99c 	bl	800be84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4c:	e00a      	b.n	800bb64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f998 	bl	800be84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb54:	e006      	b.n	800bb64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f994 	bl	800be84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb62:	e175      	b.n	800be50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb64:	bf00      	nop
    return;
 800bb66:	e173      	b.n	800be50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	f040 814f 	bne.w	800be10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb76:	f003 0310 	and.w	r3, r3, #16
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 8148 	beq.w	800be10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb84:	f003 0310 	and.w	r3, r3, #16
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 8141 	beq.w	800be10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60bb      	str	r3, [r7, #8]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	60bb      	str	r3, [r7, #8]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	60bb      	str	r3, [r7, #8]
 800bba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 80b6 	beq.w	800bd20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8145 	beq.w	800be54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	f080 813e 	bcs.w	800be54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	2b20      	cmp	r3, #32
 800bbe8:	f000 8088 	beq.w	800bcfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	330c      	adds	r3, #12
 800bbf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	330c      	adds	r3, #12
 800bc14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc28:	e841 2300 	strex	r3, r2, [r1]
 800bc2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1d9      	bne.n	800bbec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	3314      	adds	r3, #20
 800bc3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc42:	e853 3f00 	ldrex	r3, [r3]
 800bc46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3314      	adds	r3, #20
 800bc58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc68:	e841 2300 	strex	r3, r2, [r1]
 800bc6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1e1      	bne.n	800bc38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	3314      	adds	r3, #20
 800bc7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3314      	adds	r3, #20
 800bc94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc98:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bca0:	e841 2300 	strex	r3, r2, [r1]
 800bca4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1e3      	bne.n	800bc74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	330c      	adds	r3, #12
 800bcc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc4:	e853 3f00 	ldrex	r3, [r3]
 800bcc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bccc:	f023 0310 	bic.w	r3, r3, #16
 800bcd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	330c      	adds	r3, #12
 800bcda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bcde:	65ba      	str	r2, [r7, #88]	; 0x58
 800bce0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bce6:	e841 2300 	strex	r3, r2, [r1]
 800bcea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1e3      	bne.n	800bcba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fc ff4b 	bl	8008b92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2202      	movs	r2, #2
 800bd00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f8bf 	bl	800be96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd18:	e09c      	b.n	800be54 <HAL_UART_IRQHandler+0x518>
 800bd1a:	bf00      	nop
 800bd1c:	0800bf71 	.word	0x0800bf71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 808e 	beq.w	800be58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 8089 	beq.w	800be58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	e853 3f00 	ldrex	r3, [r3]
 800bd54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	330c      	adds	r3, #12
 800bd66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd6a:	647a      	str	r2, [r7, #68]	; 0x44
 800bd6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd72:	e841 2300 	strex	r3, r2, [r1]
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e3      	bne.n	800bd46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	3314      	adds	r3, #20
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd8e:	6a3b      	ldr	r3, [r7, #32]
 800bd90:	f023 0301 	bic.w	r3, r3, #1
 800bd94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3314      	adds	r3, #20
 800bd9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bda2:	633a      	str	r2, [r7, #48]	; 0x30
 800bda4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e3      	bne.n	800bd7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	330c      	adds	r3, #12
 800bdca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0310 	bic.w	r3, r3, #16
 800bdda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	330c      	adds	r3, #12
 800bde4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bde8:	61fa      	str	r2, [r7, #28]
 800bdea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdec:	69b9      	ldr	r1, [r7, #24]
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	e841 2300 	strex	r3, r2, [r1]
 800bdf4:	617b      	str	r3, [r7, #20]
   return(result);
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1e3      	bne.n	800bdc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2202      	movs	r2, #2
 800be00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 f844 	bl	800be96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be0e:	e023      	b.n	800be58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d009      	beq.n	800be30 <HAL_UART_IRQHandler+0x4f4>
 800be1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 f8b5 	bl	800bf98 <UART_Transmit_IT>
    return;
 800be2e:	e014      	b.n	800be5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00e      	beq.n	800be5a <HAL_UART_IRQHandler+0x51e>
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b00      	cmp	r3, #0
 800be46:	d008      	beq.n	800be5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f8f4 	bl	800c036 <UART_EndTransmit_IT>
    return;
 800be4e:	e004      	b.n	800be5a <HAL_UART_IRQHandler+0x51e>
    return;
 800be50:	bf00      	nop
 800be52:	e002      	b.n	800be5a <HAL_UART_IRQHandler+0x51e>
      return;
 800be54:	bf00      	nop
 800be56:	e000      	b.n	800be5a <HAL_UART_IRQHandler+0x51e>
      return;
 800be58:	bf00      	nop
  }
}
 800be5a:	37e8      	adds	r7, #232	; 0xe8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bc80      	pop	{r7}
 800be70:	4770      	bx	lr

0800be72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be7a:	bf00      	nop
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	bc80      	pop	{r7}
 800be82:	4770      	bx	lr

0800be84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr

0800be96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be96:	b480      	push	{r7}
 800be98:	b083      	sub	sp, #12
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	460b      	mov	r3, r1
 800bea0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bea2:	bf00      	nop
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bc80      	pop	{r7}
 800beaa:	4770      	bx	lr

0800beac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800beac:	b480      	push	{r7}
 800beae:	b095      	sub	sp, #84	; 0x54
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	330c      	adds	r3, #12
 800beba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	e853 3f00 	ldrex	r3, [r3]
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	330c      	adds	r3, #12
 800bed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bed4:	643a      	str	r2, [r7, #64]	; 0x40
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800beda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bedc:	e841 2300 	strex	r3, r2, [r1]
 800bee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1e5      	bne.n	800beb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3314      	adds	r3, #20
 800beee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	e853 3f00 	ldrex	r3, [r3]
 800bef6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3314      	adds	r3, #20
 800bf06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e5      	bne.n	800bee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d119      	bne.n	800bf58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	330c      	adds	r3, #12
 800bf2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	e853 3f00 	ldrex	r3, [r3]
 800bf32:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	f023 0310 	bic.w	r3, r3, #16
 800bf3a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	330c      	adds	r3, #12
 800bf42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf44:	61ba      	str	r2, [r7, #24]
 800bf46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	6979      	ldr	r1, [r7, #20]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	613b      	str	r3, [r7, #16]
   return(result);
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e5      	bne.n	800bf24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf66:	bf00      	nop
 800bf68:	3754      	adds	r7, #84	; 0x54
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bc80      	pop	{r7}
 800bf6e:	4770      	bx	lr

0800bf70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff ff7a 	bl	800be84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf90:	bf00      	nop
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b21      	cmp	r3, #33	; 0x21
 800bfaa:	d13e      	bne.n	800c02a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb4:	d114      	bne.n	800bfe0 <UART_Transmit_IT+0x48>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d110      	bne.n	800bfe0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	1c9a      	adds	r2, r3, #2
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	621a      	str	r2, [r3, #32]
 800bfde:	e008      	b.n	800bff2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	1c59      	adds	r1, r3, #1
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	6211      	str	r1, [r2, #32]
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	3b01      	subs	r3, #1
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	4619      	mov	r1, r3
 800c000:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10f      	bne.n	800c026 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68da      	ldr	r2, [r3, #12]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c014:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c024:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	e000      	b.n	800c02c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c02a:	2302      	movs	r3, #2
  }
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr

0800c036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b082      	sub	sp, #8
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c04c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2220      	movs	r2, #32
 800c052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7ff ff02 	bl	800be60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b08c      	sub	sp, #48	; 0x30
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b22      	cmp	r3, #34	; 0x22
 800c078:	f040 80ae 	bne.w	800c1d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c084:	d117      	bne.n	800c0b6 <UART_Receive_IT+0x50>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d113      	bne.n	800c0b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c08e:	2300      	movs	r3, #0
 800c090:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c096:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ae:	1c9a      	adds	r2, r3, #2
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	629a      	str	r2, [r3, #40]	; 0x28
 800c0b4:	e026      	b.n	800c104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c8:	d007      	beq.n	800c0da <UART_Receive_IT+0x74>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10a      	bne.n	800c0e8 <UART_Receive_IT+0x82>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	e008      	b.n	800c0fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c108:	b29b      	uxth	r3, r3
 800c10a:	3b01      	subs	r3, #1
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	4619      	mov	r1, r3
 800c112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c114:	2b00      	cmp	r3, #0
 800c116:	d15d      	bne.n	800c1d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f022 0220 	bic.w	r2, r2, #32
 800c126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68da      	ldr	r2, [r3, #12]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	695a      	ldr	r2, [r3, #20]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f022 0201 	bic.w	r2, r2, #1
 800c146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2220      	movs	r2, #32
 800c14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d135      	bne.n	800c1ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	330c      	adds	r3, #12
 800c16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	e853 3f00 	ldrex	r3, [r3]
 800c172:	613b      	str	r3, [r7, #16]
   return(result);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f023 0310 	bic.w	r3, r3, #16
 800c17a:	627b      	str	r3, [r7, #36]	; 0x24
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	330c      	adds	r3, #12
 800c182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c184:	623a      	str	r2, [r7, #32]
 800c186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c188:	69f9      	ldr	r1, [r7, #28]
 800c18a:	6a3a      	ldr	r2, [r7, #32]
 800c18c:	e841 2300 	strex	r3, r2, [r1]
 800c190:	61bb      	str	r3, [r7, #24]
   return(result);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e5      	bne.n	800c164 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0310 	and.w	r3, r3, #16
 800c1a2:	2b10      	cmp	r3, #16
 800c1a4:	d10a      	bne.n	800c1bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60fb      	str	r3, [r7, #12]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff fe67 	bl	800be96 <HAL_UARTEx_RxEventCallback>
 800c1c8:	e002      	b.n	800c1d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fe51 	bl	800be72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e002      	b.n	800c1da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e000      	b.n	800c1da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c1d8:	2302      	movs	r3, #2
  }
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3730      	adds	r7, #48	; 0x30
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	430a      	orrs	r2, r1
 800c200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	431a      	orrs	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	4313      	orrs	r3, r2
 800c212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c21e:	f023 030c 	bic.w	r3, r3, #12
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6812      	ldr	r2, [r2, #0]
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	430b      	orrs	r3, r1
 800c22a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	699a      	ldr	r2, [r3, #24]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	430a      	orrs	r2, r1
 800c240:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a2c      	ldr	r2, [pc, #176]	; (800c2f8 <UART_SetConfig+0x114>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d103      	bne.n	800c254 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c24c:	f7fe fe8c 	bl	800af68 <HAL_RCC_GetPCLK2Freq>
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	e002      	b.n	800c25a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c254:	f7fe fe74 	bl	800af40 <HAL_RCC_GetPCLK1Freq>
 800c258:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	009a      	lsls	r2, r3, #2
 800c264:	441a      	add	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c270:	4a22      	ldr	r2, [pc, #136]	; (800c2fc <UART_SetConfig+0x118>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	095b      	lsrs	r3, r3, #5
 800c278:	0119      	lsls	r1, r3, #4
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	4613      	mov	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	009a      	lsls	r2, r3, #2
 800c284:	441a      	add	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c290:	4b1a      	ldr	r3, [pc, #104]	; (800c2fc <UART_SetConfig+0x118>)
 800c292:	fba3 0302 	umull	r0, r3, r3, r2
 800c296:	095b      	lsrs	r3, r3, #5
 800c298:	2064      	movs	r0, #100	; 0x64
 800c29a:	fb00 f303 	mul.w	r3, r0, r3
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	011b      	lsls	r3, r3, #4
 800c2a2:	3332      	adds	r3, #50	; 0x32
 800c2a4:	4a15      	ldr	r2, [pc, #84]	; (800c2fc <UART_SetConfig+0x118>)
 800c2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2b0:	4419      	add	r1, r3
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	009a      	lsls	r2, r3, #2
 800c2bc:	441a      	add	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2c8:	4b0c      	ldr	r3, [pc, #48]	; (800c2fc <UART_SetConfig+0x118>)
 800c2ca:	fba3 0302 	umull	r0, r3, r3, r2
 800c2ce:	095b      	lsrs	r3, r3, #5
 800c2d0:	2064      	movs	r0, #100	; 0x64
 800c2d2:	fb00 f303 	mul.w	r3, r0, r3
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	011b      	lsls	r3, r3, #4
 800c2da:	3332      	adds	r3, #50	; 0x32
 800c2dc:	4a07      	ldr	r2, [pc, #28]	; (800c2fc <UART_SetConfig+0x118>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	095b      	lsrs	r3, r3, #5
 800c2e4:	f003 020f 	and.w	r2, r3, #15
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c2f0:	bf00      	nop
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	40013800 	.word	0x40013800
 800c2fc:	51eb851f 	.word	0x51eb851f

0800c300 <__errno>:
 800c300:	4b01      	ldr	r3, [pc, #4]	; (800c308 <__errno+0x8>)
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	200000ac 	.word	0x200000ac

0800c30c <__libc_init_array>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	2600      	movs	r6, #0
 800c310:	4d0c      	ldr	r5, [pc, #48]	; (800c344 <__libc_init_array+0x38>)
 800c312:	4c0d      	ldr	r4, [pc, #52]	; (800c348 <__libc_init_array+0x3c>)
 800c314:	1b64      	subs	r4, r4, r5
 800c316:	10a4      	asrs	r4, r4, #2
 800c318:	42a6      	cmp	r6, r4
 800c31a:	d109      	bne.n	800c330 <__libc_init_array+0x24>
 800c31c:	f000 fd18 	bl	800cd50 <_init>
 800c320:	2600      	movs	r6, #0
 800c322:	4d0a      	ldr	r5, [pc, #40]	; (800c34c <__libc_init_array+0x40>)
 800c324:	4c0a      	ldr	r4, [pc, #40]	; (800c350 <__libc_init_array+0x44>)
 800c326:	1b64      	subs	r4, r4, r5
 800c328:	10a4      	asrs	r4, r4, #2
 800c32a:	42a6      	cmp	r6, r4
 800c32c:	d105      	bne.n	800c33a <__libc_init_array+0x2e>
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	f855 3b04 	ldr.w	r3, [r5], #4
 800c334:	4798      	blx	r3
 800c336:	3601      	adds	r6, #1
 800c338:	e7ee      	b.n	800c318 <__libc_init_array+0xc>
 800c33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c33e:	4798      	blx	r3
 800c340:	3601      	adds	r6, #1
 800c342:	e7f2      	b.n	800c32a <__libc_init_array+0x1e>
 800c344:	0800dd3c 	.word	0x0800dd3c
 800c348:	0800dd3c 	.word	0x0800dd3c
 800c34c:	0800dd3c 	.word	0x0800dd3c
 800c350:	0800dd40 	.word	0x0800dd40

0800c354 <__itoa>:
 800c354:	1e93      	subs	r3, r2, #2
 800c356:	2b22      	cmp	r3, #34	; 0x22
 800c358:	b510      	push	{r4, lr}
 800c35a:	460c      	mov	r4, r1
 800c35c:	d904      	bls.n	800c368 <__itoa+0x14>
 800c35e:	2300      	movs	r3, #0
 800c360:	461c      	mov	r4, r3
 800c362:	700b      	strb	r3, [r1, #0]
 800c364:	4620      	mov	r0, r4
 800c366:	bd10      	pop	{r4, pc}
 800c368:	2a0a      	cmp	r2, #10
 800c36a:	d109      	bne.n	800c380 <__itoa+0x2c>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	da07      	bge.n	800c380 <__itoa+0x2c>
 800c370:	232d      	movs	r3, #45	; 0x2d
 800c372:	700b      	strb	r3, [r1, #0]
 800c374:	2101      	movs	r1, #1
 800c376:	4240      	negs	r0, r0
 800c378:	4421      	add	r1, r4
 800c37a:	f000 f939 	bl	800c5f0 <__utoa>
 800c37e:	e7f1      	b.n	800c364 <__itoa+0x10>
 800c380:	2100      	movs	r1, #0
 800c382:	e7f9      	b.n	800c378 <__itoa+0x24>

0800c384 <itoa>:
 800c384:	f7ff bfe6 	b.w	800c354 <__itoa>

0800c388 <malloc>:
 800c388:	4b02      	ldr	r3, [pc, #8]	; (800c394 <malloc+0xc>)
 800c38a:	4601      	mov	r1, r0
 800c38c:	6818      	ldr	r0, [r3, #0]
 800c38e:	f000 b873 	b.w	800c478 <_malloc_r>
 800c392:	bf00      	nop
 800c394:	200000ac 	.word	0x200000ac

0800c398 <memset>:
 800c398:	4603      	mov	r3, r0
 800c39a:	4402      	add	r2, r0
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d100      	bne.n	800c3a2 <memset+0xa>
 800c3a0:	4770      	bx	lr
 800c3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3a6:	e7f9      	b.n	800c39c <memset+0x4>

0800c3a8 <_free_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	d040      	beq.n	800c432 <_free_r+0x8a>
 800c3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3b4:	1f0c      	subs	r4, r1, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfb8      	it	lt
 800c3ba:	18e4      	addlt	r4, r4, r3
 800c3bc:	f000 f95a 	bl	800c674 <__malloc_lock>
 800c3c0:	4a1c      	ldr	r2, [pc, #112]	; (800c434 <_free_r+0x8c>)
 800c3c2:	6813      	ldr	r3, [r2, #0]
 800c3c4:	b933      	cbnz	r3, 800c3d4 <_free_r+0x2c>
 800c3c6:	6063      	str	r3, [r4, #4]
 800c3c8:	6014      	str	r4, [r2, #0]
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d0:	f000 b956 	b.w	800c680 <__malloc_unlock>
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	d908      	bls.n	800c3ea <_free_r+0x42>
 800c3d8:	6820      	ldr	r0, [r4, #0]
 800c3da:	1821      	adds	r1, r4, r0
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	bf01      	itttt	eq
 800c3e0:	6819      	ldreq	r1, [r3, #0]
 800c3e2:	685b      	ldreq	r3, [r3, #4]
 800c3e4:	1809      	addeq	r1, r1, r0
 800c3e6:	6021      	streq	r1, [r4, #0]
 800c3e8:	e7ed      	b.n	800c3c6 <_free_r+0x1e>
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	b10b      	cbz	r3, 800c3f4 <_free_r+0x4c>
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	d9fa      	bls.n	800c3ea <_free_r+0x42>
 800c3f4:	6811      	ldr	r1, [r2, #0]
 800c3f6:	1850      	adds	r0, r2, r1
 800c3f8:	42a0      	cmp	r0, r4
 800c3fa:	d10b      	bne.n	800c414 <_free_r+0x6c>
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	4401      	add	r1, r0
 800c400:	1850      	adds	r0, r2, r1
 800c402:	4283      	cmp	r3, r0
 800c404:	6011      	str	r1, [r2, #0]
 800c406:	d1e0      	bne.n	800c3ca <_free_r+0x22>
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	4401      	add	r1, r0
 800c40e:	6011      	str	r1, [r2, #0]
 800c410:	6053      	str	r3, [r2, #4]
 800c412:	e7da      	b.n	800c3ca <_free_r+0x22>
 800c414:	d902      	bls.n	800c41c <_free_r+0x74>
 800c416:	230c      	movs	r3, #12
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	e7d6      	b.n	800c3ca <_free_r+0x22>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	1821      	adds	r1, r4, r0
 800c420:	428b      	cmp	r3, r1
 800c422:	bf01      	itttt	eq
 800c424:	6819      	ldreq	r1, [r3, #0]
 800c426:	685b      	ldreq	r3, [r3, #4]
 800c428:	1809      	addeq	r1, r1, r0
 800c42a:	6021      	streq	r1, [r4, #0]
 800c42c:	6063      	str	r3, [r4, #4]
 800c42e:	6054      	str	r4, [r2, #4]
 800c430:	e7cb      	b.n	800c3ca <_free_r+0x22>
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	200004a8 	.word	0x200004a8

0800c438 <sbrk_aligned>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	4e0e      	ldr	r6, [pc, #56]	; (800c474 <sbrk_aligned+0x3c>)
 800c43c:	460c      	mov	r4, r1
 800c43e:	6831      	ldr	r1, [r6, #0]
 800c440:	4605      	mov	r5, r0
 800c442:	b911      	cbnz	r1, 800c44a <sbrk_aligned+0x12>
 800c444:	f000 f88c 	bl	800c560 <_sbrk_r>
 800c448:	6030      	str	r0, [r6, #0]
 800c44a:	4621      	mov	r1, r4
 800c44c:	4628      	mov	r0, r5
 800c44e:	f000 f887 	bl	800c560 <_sbrk_r>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d00a      	beq.n	800c46c <sbrk_aligned+0x34>
 800c456:	1cc4      	adds	r4, r0, #3
 800c458:	f024 0403 	bic.w	r4, r4, #3
 800c45c:	42a0      	cmp	r0, r4
 800c45e:	d007      	beq.n	800c470 <sbrk_aligned+0x38>
 800c460:	1a21      	subs	r1, r4, r0
 800c462:	4628      	mov	r0, r5
 800c464:	f000 f87c 	bl	800c560 <_sbrk_r>
 800c468:	3001      	adds	r0, #1
 800c46a:	d101      	bne.n	800c470 <sbrk_aligned+0x38>
 800c46c:	f04f 34ff 	mov.w	r4, #4294967295
 800c470:	4620      	mov	r0, r4
 800c472:	bd70      	pop	{r4, r5, r6, pc}
 800c474:	200004ac 	.word	0x200004ac

0800c478 <_malloc_r>:
 800c478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47c:	1ccd      	adds	r5, r1, #3
 800c47e:	f025 0503 	bic.w	r5, r5, #3
 800c482:	3508      	adds	r5, #8
 800c484:	2d0c      	cmp	r5, #12
 800c486:	bf38      	it	cc
 800c488:	250c      	movcc	r5, #12
 800c48a:	2d00      	cmp	r5, #0
 800c48c:	4607      	mov	r7, r0
 800c48e:	db01      	blt.n	800c494 <_malloc_r+0x1c>
 800c490:	42a9      	cmp	r1, r5
 800c492:	d905      	bls.n	800c4a0 <_malloc_r+0x28>
 800c494:	230c      	movs	r3, #12
 800c496:	2600      	movs	r6, #0
 800c498:	603b      	str	r3, [r7, #0]
 800c49a:	4630      	mov	r0, r6
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a0:	4e2e      	ldr	r6, [pc, #184]	; (800c55c <_malloc_r+0xe4>)
 800c4a2:	f000 f8e7 	bl	800c674 <__malloc_lock>
 800c4a6:	6833      	ldr	r3, [r6, #0]
 800c4a8:	461c      	mov	r4, r3
 800c4aa:	bb34      	cbnz	r4, 800c4fa <_malloc_r+0x82>
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f7ff ffc2 	bl	800c438 <sbrk_aligned>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	d14d      	bne.n	800c556 <_malloc_r+0xde>
 800c4ba:	6834      	ldr	r4, [r6, #0]
 800c4bc:	4626      	mov	r6, r4
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d140      	bne.n	800c544 <_malloc_r+0xcc>
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	eb04 0803 	add.w	r8, r4, r3
 800c4cc:	f000 f848 	bl	800c560 <_sbrk_r>
 800c4d0:	4580      	cmp	r8, r0
 800c4d2:	d13a      	bne.n	800c54a <_malloc_r+0xd2>
 800c4d4:	6821      	ldr	r1, [r4, #0]
 800c4d6:	3503      	adds	r5, #3
 800c4d8:	1a6d      	subs	r5, r5, r1
 800c4da:	f025 0503 	bic.w	r5, r5, #3
 800c4de:	3508      	adds	r5, #8
 800c4e0:	2d0c      	cmp	r5, #12
 800c4e2:	bf38      	it	cc
 800c4e4:	250c      	movcc	r5, #12
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7ff ffa5 	bl	800c438 <sbrk_aligned>
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	d02b      	beq.n	800c54a <_malloc_r+0xd2>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	442b      	add	r3, r5
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	e00e      	b.n	800c518 <_malloc_r+0xa0>
 800c4fa:	6822      	ldr	r2, [r4, #0]
 800c4fc:	1b52      	subs	r2, r2, r5
 800c4fe:	d41e      	bmi.n	800c53e <_malloc_r+0xc6>
 800c500:	2a0b      	cmp	r2, #11
 800c502:	d916      	bls.n	800c532 <_malloc_r+0xba>
 800c504:	1961      	adds	r1, r4, r5
 800c506:	42a3      	cmp	r3, r4
 800c508:	6025      	str	r5, [r4, #0]
 800c50a:	bf18      	it	ne
 800c50c:	6059      	strne	r1, [r3, #4]
 800c50e:	6863      	ldr	r3, [r4, #4]
 800c510:	bf08      	it	eq
 800c512:	6031      	streq	r1, [r6, #0]
 800c514:	5162      	str	r2, [r4, r5]
 800c516:	604b      	str	r3, [r1, #4]
 800c518:	4638      	mov	r0, r7
 800c51a:	f104 060b 	add.w	r6, r4, #11
 800c51e:	f000 f8af 	bl	800c680 <__malloc_unlock>
 800c522:	f026 0607 	bic.w	r6, r6, #7
 800c526:	1d23      	adds	r3, r4, #4
 800c528:	1af2      	subs	r2, r6, r3
 800c52a:	d0b6      	beq.n	800c49a <_malloc_r+0x22>
 800c52c:	1b9b      	subs	r3, r3, r6
 800c52e:	50a3      	str	r3, [r4, r2]
 800c530:	e7b3      	b.n	800c49a <_malloc_r+0x22>
 800c532:	6862      	ldr	r2, [r4, #4]
 800c534:	42a3      	cmp	r3, r4
 800c536:	bf0c      	ite	eq
 800c538:	6032      	streq	r2, [r6, #0]
 800c53a:	605a      	strne	r2, [r3, #4]
 800c53c:	e7ec      	b.n	800c518 <_malloc_r+0xa0>
 800c53e:	4623      	mov	r3, r4
 800c540:	6864      	ldr	r4, [r4, #4]
 800c542:	e7b2      	b.n	800c4aa <_malloc_r+0x32>
 800c544:	4634      	mov	r4, r6
 800c546:	6876      	ldr	r6, [r6, #4]
 800c548:	e7b9      	b.n	800c4be <_malloc_r+0x46>
 800c54a:	230c      	movs	r3, #12
 800c54c:	4638      	mov	r0, r7
 800c54e:	603b      	str	r3, [r7, #0]
 800c550:	f000 f896 	bl	800c680 <__malloc_unlock>
 800c554:	e7a1      	b.n	800c49a <_malloc_r+0x22>
 800c556:	6025      	str	r5, [r4, #0]
 800c558:	e7de      	b.n	800c518 <_malloc_r+0xa0>
 800c55a:	bf00      	nop
 800c55c:	200004a8 	.word	0x200004a8

0800c560 <_sbrk_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	2300      	movs	r3, #0
 800c564:	4d05      	ldr	r5, [pc, #20]	; (800c57c <_sbrk_r+0x1c>)
 800c566:	4604      	mov	r4, r0
 800c568:	4608      	mov	r0, r1
 800c56a:	602b      	str	r3, [r5, #0]
 800c56c:	f7fc f820 	bl	80085b0 <_sbrk>
 800c570:	1c43      	adds	r3, r0, #1
 800c572:	d102      	bne.n	800c57a <_sbrk_r+0x1a>
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	b103      	cbz	r3, 800c57a <_sbrk_r+0x1a>
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	200004b0 	.word	0x200004b0

0800c580 <siprintf>:
 800c580:	b40e      	push	{r1, r2, r3}
 800c582:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c586:	b500      	push	{lr}
 800c588:	b09c      	sub	sp, #112	; 0x70
 800c58a:	ab1d      	add	r3, sp, #116	; 0x74
 800c58c:	9002      	str	r0, [sp, #8]
 800c58e:	9006      	str	r0, [sp, #24]
 800c590:	9107      	str	r1, [sp, #28]
 800c592:	9104      	str	r1, [sp, #16]
 800c594:	4808      	ldr	r0, [pc, #32]	; (800c5b8 <siprintf+0x38>)
 800c596:	4909      	ldr	r1, [pc, #36]	; (800c5bc <siprintf+0x3c>)
 800c598:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59c:	9105      	str	r1, [sp, #20]
 800c59e:	6800      	ldr	r0, [r0, #0]
 800c5a0:	a902      	add	r1, sp, #8
 800c5a2:	9301      	str	r3, [sp, #4]
 800c5a4:	f000 f8ce 	bl	800c744 <_svfiprintf_r>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	9b02      	ldr	r3, [sp, #8]
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	b01c      	add	sp, #112	; 0x70
 800c5b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b4:	b003      	add	sp, #12
 800c5b6:	4770      	bx	lr
 800c5b8:	200000ac 	.word	0x200000ac
 800c5bc:	ffff0208 	.word	0xffff0208

0800c5c0 <strcat>:
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	b510      	push	{r4, lr}
 800c5c4:	7814      	ldrb	r4, [r2, #0]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	3201      	adds	r2, #1
 800c5ca:	2c00      	cmp	r4, #0
 800c5cc:	d1fa      	bne.n	800c5c4 <strcat+0x4>
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d1f9      	bne.n	800c5d0 <strcat+0x10>
 800c5dc:	bd10      	pop	{r4, pc}

0800c5de <strcpy>:
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5e4:	f803 2b01 	strb.w	r2, [r3], #1
 800c5e8:	2a00      	cmp	r2, #0
 800c5ea:	d1f9      	bne.n	800c5e0 <strcpy+0x2>
 800c5ec:	4770      	bx	lr
	...

0800c5f0 <__utoa>:
 800c5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f2:	b08b      	sub	sp, #44	; 0x2c
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	466e      	mov	r6, sp
 800c5fa:	4c1d      	ldr	r4, [pc, #116]	; (800c670 <__utoa+0x80>)
 800c5fc:	f104 0c20 	add.w	ip, r4, #32
 800c600:	4637      	mov	r7, r6
 800c602:	6820      	ldr	r0, [r4, #0]
 800c604:	6861      	ldr	r1, [r4, #4]
 800c606:	3408      	adds	r4, #8
 800c608:	c703      	stmia	r7!, {r0, r1}
 800c60a:	4564      	cmp	r4, ip
 800c60c:	463e      	mov	r6, r7
 800c60e:	d1f7      	bne.n	800c600 <__utoa+0x10>
 800c610:	7921      	ldrb	r1, [r4, #4]
 800c612:	6820      	ldr	r0, [r4, #0]
 800c614:	7139      	strb	r1, [r7, #4]
 800c616:	1e91      	subs	r1, r2, #2
 800c618:	2922      	cmp	r1, #34	; 0x22
 800c61a:	6038      	str	r0, [r7, #0]
 800c61c:	f04f 0100 	mov.w	r1, #0
 800c620:	d904      	bls.n	800c62c <__utoa+0x3c>
 800c622:	7019      	strb	r1, [r3, #0]
 800c624:	460b      	mov	r3, r1
 800c626:	4618      	mov	r0, r3
 800c628:	b00b      	add	sp, #44	; 0x2c
 800c62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62c:	1e58      	subs	r0, r3, #1
 800c62e:	4684      	mov	ip, r0
 800c630:	fbb5 f7f2 	udiv	r7, r5, r2
 800c634:	fb02 5617 	mls	r6, r2, r7, r5
 800c638:	3628      	adds	r6, #40	; 0x28
 800c63a:	446e      	add	r6, sp
 800c63c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c640:	460c      	mov	r4, r1
 800c642:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c646:	462e      	mov	r6, r5
 800c648:	42b2      	cmp	r2, r6
 800c64a:	463d      	mov	r5, r7
 800c64c:	f101 0101 	add.w	r1, r1, #1
 800c650:	d9ee      	bls.n	800c630 <__utoa+0x40>
 800c652:	2200      	movs	r2, #0
 800c654:	545a      	strb	r2, [r3, r1]
 800c656:	1919      	adds	r1, r3, r4
 800c658:	1aa5      	subs	r5, r4, r2
 800c65a:	42aa      	cmp	r2, r5
 800c65c:	dae3      	bge.n	800c626 <__utoa+0x36>
 800c65e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c662:	780e      	ldrb	r6, [r1, #0]
 800c664:	3201      	adds	r2, #1
 800c666:	7006      	strb	r6, [r0, #0]
 800c668:	f801 5901 	strb.w	r5, [r1], #-1
 800c66c:	e7f4      	b.n	800c658 <__utoa+0x68>
 800c66e:	bf00      	nop
 800c670:	0800dce2 	.word	0x0800dce2

0800c674 <__malloc_lock>:
 800c674:	4801      	ldr	r0, [pc, #4]	; (800c67c <__malloc_lock+0x8>)
 800c676:	f000 bafb 	b.w	800cc70 <__retarget_lock_acquire_recursive>
 800c67a:	bf00      	nop
 800c67c:	200004b4 	.word	0x200004b4

0800c680 <__malloc_unlock>:
 800c680:	4801      	ldr	r0, [pc, #4]	; (800c688 <__malloc_unlock+0x8>)
 800c682:	f000 baf6 	b.w	800cc72 <__retarget_lock_release_recursive>
 800c686:	bf00      	nop
 800c688:	200004b4 	.word	0x200004b4

0800c68c <__ssputs_r>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	688e      	ldr	r6, [r1, #8]
 800c692:	4682      	mov	sl, r0
 800c694:	429e      	cmp	r6, r3
 800c696:	460c      	mov	r4, r1
 800c698:	4690      	mov	r8, r2
 800c69a:	461f      	mov	r7, r3
 800c69c:	d838      	bhi.n	800c710 <__ssputs_r+0x84>
 800c69e:	898a      	ldrh	r2, [r1, #12]
 800c6a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6a4:	d032      	beq.n	800c70c <__ssputs_r+0x80>
 800c6a6:	6825      	ldr	r5, [r4, #0]
 800c6a8:	6909      	ldr	r1, [r1, #16]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	eba5 0901 	sub.w	r9, r5, r1
 800c6b0:	6965      	ldr	r5, [r4, #20]
 800c6b2:	444b      	add	r3, r9
 800c6b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6bc:	106d      	asrs	r5, r5, #1
 800c6be:	429d      	cmp	r5, r3
 800c6c0:	bf38      	it	cc
 800c6c2:	461d      	movcc	r5, r3
 800c6c4:	0553      	lsls	r3, r2, #21
 800c6c6:	d531      	bpl.n	800c72c <__ssputs_r+0xa0>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f7ff fed5 	bl	800c478 <_malloc_r>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	b950      	cbnz	r0, 800c6e8 <__ssputs_r+0x5c>
 800c6d2:	230c      	movs	r3, #12
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	f8ca 3000 	str.w	r3, [sl]
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e8:	464a      	mov	r2, r9
 800c6ea:	6921      	ldr	r1, [r4, #16]
 800c6ec:	f000 fad0 	bl	800cc90 <memcpy>
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	6126      	str	r6, [r4, #16]
 800c6fe:	444e      	add	r6, r9
 800c700:	6026      	str	r6, [r4, #0]
 800c702:	463e      	mov	r6, r7
 800c704:	6165      	str	r5, [r4, #20]
 800c706:	eba5 0509 	sub.w	r5, r5, r9
 800c70a:	60a5      	str	r5, [r4, #8]
 800c70c:	42be      	cmp	r6, r7
 800c70e:	d900      	bls.n	800c712 <__ssputs_r+0x86>
 800c710:	463e      	mov	r6, r7
 800c712:	4632      	mov	r2, r6
 800c714:	4641      	mov	r1, r8
 800c716:	6820      	ldr	r0, [r4, #0]
 800c718:	f000 fac8 	bl	800ccac <memmove>
 800c71c:	68a3      	ldr	r3, [r4, #8]
 800c71e:	2000      	movs	r0, #0
 800c720:	1b9b      	subs	r3, r3, r6
 800c722:	60a3      	str	r3, [r4, #8]
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	4433      	add	r3, r6
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	e7db      	b.n	800c6e4 <__ssputs_r+0x58>
 800c72c:	462a      	mov	r2, r5
 800c72e:	f000 fad7 	bl	800cce0 <_realloc_r>
 800c732:	4606      	mov	r6, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	d1e1      	bne.n	800c6fc <__ssputs_r+0x70>
 800c738:	4650      	mov	r0, sl
 800c73a:	6921      	ldr	r1, [r4, #16]
 800c73c:	f7ff fe34 	bl	800c3a8 <_free_r>
 800c740:	e7c7      	b.n	800c6d2 <__ssputs_r+0x46>
	...

0800c744 <_svfiprintf_r>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	4698      	mov	r8, r3
 800c74a:	898b      	ldrh	r3, [r1, #12]
 800c74c:	4607      	mov	r7, r0
 800c74e:	061b      	lsls	r3, r3, #24
 800c750:	460d      	mov	r5, r1
 800c752:	4614      	mov	r4, r2
 800c754:	b09d      	sub	sp, #116	; 0x74
 800c756:	d50e      	bpl.n	800c776 <_svfiprintf_r+0x32>
 800c758:	690b      	ldr	r3, [r1, #16]
 800c75a:	b963      	cbnz	r3, 800c776 <_svfiprintf_r+0x32>
 800c75c:	2140      	movs	r1, #64	; 0x40
 800c75e:	f7ff fe8b 	bl	800c478 <_malloc_r>
 800c762:	6028      	str	r0, [r5, #0]
 800c764:	6128      	str	r0, [r5, #16]
 800c766:	b920      	cbnz	r0, 800c772 <_svfiprintf_r+0x2e>
 800c768:	230c      	movs	r3, #12
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295
 800c770:	e0d1      	b.n	800c916 <_svfiprintf_r+0x1d2>
 800c772:	2340      	movs	r3, #64	; 0x40
 800c774:	616b      	str	r3, [r5, #20]
 800c776:	2300      	movs	r3, #0
 800c778:	9309      	str	r3, [sp, #36]	; 0x24
 800c77a:	2320      	movs	r3, #32
 800c77c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c780:	2330      	movs	r3, #48	; 0x30
 800c782:	f04f 0901 	mov.w	r9, #1
 800c786:	f8cd 800c 	str.w	r8, [sp, #12]
 800c78a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c930 <_svfiprintf_r+0x1ec>
 800c78e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c792:	4623      	mov	r3, r4
 800c794:	469a      	mov	sl, r3
 800c796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c79a:	b10a      	cbz	r2, 800c7a0 <_svfiprintf_r+0x5c>
 800c79c:	2a25      	cmp	r2, #37	; 0x25
 800c79e:	d1f9      	bne.n	800c794 <_svfiprintf_r+0x50>
 800c7a0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a4:	d00b      	beq.n	800c7be <_svfiprintf_r+0x7a>
 800c7a6:	465b      	mov	r3, fp
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f7ff ff6d 	bl	800c68c <__ssputs_r>
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	f000 80aa 	beq.w	800c90c <_svfiprintf_r+0x1c8>
 800c7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ba:	445a      	add	r2, fp
 800c7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7be:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 80a2 	beq.w	800c90c <_svfiprintf_r+0x1c8>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d2:	f10a 0a01 	add.w	sl, sl, #1
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	9307      	str	r3, [sp, #28]
 800c7da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7de:	931a      	str	r3, [sp, #104]	; 0x68
 800c7e0:	4654      	mov	r4, sl
 800c7e2:	2205      	movs	r2, #5
 800c7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e8:	4851      	ldr	r0, [pc, #324]	; (800c930 <_svfiprintf_r+0x1ec>)
 800c7ea:	f000 fa43 	bl	800cc74 <memchr>
 800c7ee:	9a04      	ldr	r2, [sp, #16]
 800c7f0:	b9d8      	cbnz	r0, 800c82a <_svfiprintf_r+0xe6>
 800c7f2:	06d0      	lsls	r0, r2, #27
 800c7f4:	bf44      	itt	mi
 800c7f6:	2320      	movmi	r3, #32
 800c7f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7fc:	0711      	lsls	r1, r2, #28
 800c7fe:	bf44      	itt	mi
 800c800:	232b      	movmi	r3, #43	; 0x2b
 800c802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c806:	f89a 3000 	ldrb.w	r3, [sl]
 800c80a:	2b2a      	cmp	r3, #42	; 0x2a
 800c80c:	d015      	beq.n	800c83a <_svfiprintf_r+0xf6>
 800c80e:	4654      	mov	r4, sl
 800c810:	2000      	movs	r0, #0
 800c812:	f04f 0c0a 	mov.w	ip, #10
 800c816:	9a07      	ldr	r2, [sp, #28]
 800c818:	4621      	mov	r1, r4
 800c81a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c81e:	3b30      	subs	r3, #48	; 0x30
 800c820:	2b09      	cmp	r3, #9
 800c822:	d94e      	bls.n	800c8c2 <_svfiprintf_r+0x17e>
 800c824:	b1b0      	cbz	r0, 800c854 <_svfiprintf_r+0x110>
 800c826:	9207      	str	r2, [sp, #28]
 800c828:	e014      	b.n	800c854 <_svfiprintf_r+0x110>
 800c82a:	eba0 0308 	sub.w	r3, r0, r8
 800c82e:	fa09 f303 	lsl.w	r3, r9, r3
 800c832:	4313      	orrs	r3, r2
 800c834:	46a2      	mov	sl, r4
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	e7d2      	b.n	800c7e0 <_svfiprintf_r+0x9c>
 800c83a:	9b03      	ldr	r3, [sp, #12]
 800c83c:	1d19      	adds	r1, r3, #4
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	9103      	str	r1, [sp, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfbb      	ittet	lt
 800c846:	425b      	neglt	r3, r3
 800c848:	f042 0202 	orrlt.w	r2, r2, #2
 800c84c:	9307      	strge	r3, [sp, #28]
 800c84e:	9307      	strlt	r3, [sp, #28]
 800c850:	bfb8      	it	lt
 800c852:	9204      	strlt	r2, [sp, #16]
 800c854:	7823      	ldrb	r3, [r4, #0]
 800c856:	2b2e      	cmp	r3, #46	; 0x2e
 800c858:	d10c      	bne.n	800c874 <_svfiprintf_r+0x130>
 800c85a:	7863      	ldrb	r3, [r4, #1]
 800c85c:	2b2a      	cmp	r3, #42	; 0x2a
 800c85e:	d135      	bne.n	800c8cc <_svfiprintf_r+0x188>
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	3402      	adds	r4, #2
 800c864:	1d1a      	adds	r2, r3, #4
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	9203      	str	r2, [sp, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	bfb8      	it	lt
 800c86e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c934 <_svfiprintf_r+0x1f0>
 800c878:	2203      	movs	r2, #3
 800c87a:	4650      	mov	r0, sl
 800c87c:	7821      	ldrb	r1, [r4, #0]
 800c87e:	f000 f9f9 	bl	800cc74 <memchr>
 800c882:	b140      	cbz	r0, 800c896 <_svfiprintf_r+0x152>
 800c884:	2340      	movs	r3, #64	; 0x40
 800c886:	eba0 000a 	sub.w	r0, r0, sl
 800c88a:	fa03 f000 	lsl.w	r0, r3, r0
 800c88e:	9b04      	ldr	r3, [sp, #16]
 800c890:	3401      	adds	r4, #1
 800c892:	4303      	orrs	r3, r0
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89a:	2206      	movs	r2, #6
 800c89c:	4826      	ldr	r0, [pc, #152]	; (800c938 <_svfiprintf_r+0x1f4>)
 800c89e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8a2:	f000 f9e7 	bl	800cc74 <memchr>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d038      	beq.n	800c91c <_svfiprintf_r+0x1d8>
 800c8aa:	4b24      	ldr	r3, [pc, #144]	; (800c93c <_svfiprintf_r+0x1f8>)
 800c8ac:	bb1b      	cbnz	r3, 800c8f6 <_svfiprintf_r+0x1b2>
 800c8ae:	9b03      	ldr	r3, [sp, #12]
 800c8b0:	3307      	adds	r3, #7
 800c8b2:	f023 0307 	bic.w	r3, r3, #7
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	9303      	str	r3, [sp, #12]
 800c8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8bc:	4433      	add	r3, r6
 800c8be:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c0:	e767      	b.n	800c792 <_svfiprintf_r+0x4e>
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8ca:	e7a5      	b.n	800c818 <_svfiprintf_r+0xd4>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f04f 0c0a 	mov.w	ip, #10
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	3401      	adds	r4, #1
 800c8d6:	9305      	str	r3, [sp, #20]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8de:	3a30      	subs	r2, #48	; 0x30
 800c8e0:	2a09      	cmp	r2, #9
 800c8e2:	d903      	bls.n	800c8ec <_svfiprintf_r+0x1a8>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0c5      	beq.n	800c874 <_svfiprintf_r+0x130>
 800c8e8:	9105      	str	r1, [sp, #20]
 800c8ea:	e7c3      	b.n	800c874 <_svfiprintf_r+0x130>
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f4:	e7f0      	b.n	800c8d8 <_svfiprintf_r+0x194>
 800c8f6:	ab03      	add	r3, sp, #12
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	4b10      	ldr	r3, [pc, #64]	; (800c940 <_svfiprintf_r+0x1fc>)
 800c900:	a904      	add	r1, sp, #16
 800c902:	f3af 8000 	nop.w
 800c906:	1c42      	adds	r2, r0, #1
 800c908:	4606      	mov	r6, r0
 800c90a:	d1d6      	bne.n	800c8ba <_svfiprintf_r+0x176>
 800c90c:	89ab      	ldrh	r3, [r5, #12]
 800c90e:	065b      	lsls	r3, r3, #25
 800c910:	f53f af2c 	bmi.w	800c76c <_svfiprintf_r+0x28>
 800c914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c916:	b01d      	add	sp, #116	; 0x74
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	ab03      	add	r3, sp, #12
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	462a      	mov	r2, r5
 800c922:	4638      	mov	r0, r7
 800c924:	4b06      	ldr	r3, [pc, #24]	; (800c940 <_svfiprintf_r+0x1fc>)
 800c926:	a904      	add	r1, sp, #16
 800c928:	f000 f87c 	bl	800ca24 <_printf_i>
 800c92c:	e7eb      	b.n	800c906 <_svfiprintf_r+0x1c2>
 800c92e:	bf00      	nop
 800c930:	0800dd07 	.word	0x0800dd07
 800c934:	0800dd0d 	.word	0x0800dd0d
 800c938:	0800dd11 	.word	0x0800dd11
 800c93c:	00000000 	.word	0x00000000
 800c940:	0800c68d 	.word	0x0800c68d

0800c944 <_printf_common>:
 800c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c948:	4616      	mov	r6, r2
 800c94a:	4699      	mov	r9, r3
 800c94c:	688a      	ldr	r2, [r1, #8]
 800c94e:	690b      	ldr	r3, [r1, #16]
 800c950:	4607      	mov	r7, r0
 800c952:	4293      	cmp	r3, r2
 800c954:	bfb8      	it	lt
 800c956:	4613      	movlt	r3, r2
 800c958:	6033      	str	r3, [r6, #0]
 800c95a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c95e:	460c      	mov	r4, r1
 800c960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c964:	b10a      	cbz	r2, 800c96a <_printf_common+0x26>
 800c966:	3301      	adds	r3, #1
 800c968:	6033      	str	r3, [r6, #0]
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	0699      	lsls	r1, r3, #26
 800c96e:	bf42      	ittt	mi
 800c970:	6833      	ldrmi	r3, [r6, #0]
 800c972:	3302      	addmi	r3, #2
 800c974:	6033      	strmi	r3, [r6, #0]
 800c976:	6825      	ldr	r5, [r4, #0]
 800c978:	f015 0506 	ands.w	r5, r5, #6
 800c97c:	d106      	bne.n	800c98c <_printf_common+0x48>
 800c97e:	f104 0a19 	add.w	sl, r4, #25
 800c982:	68e3      	ldr	r3, [r4, #12]
 800c984:	6832      	ldr	r2, [r6, #0]
 800c986:	1a9b      	subs	r3, r3, r2
 800c988:	42ab      	cmp	r3, r5
 800c98a:	dc28      	bgt.n	800c9de <_printf_common+0x9a>
 800c98c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c990:	1e13      	subs	r3, r2, #0
 800c992:	6822      	ldr	r2, [r4, #0]
 800c994:	bf18      	it	ne
 800c996:	2301      	movne	r3, #1
 800c998:	0692      	lsls	r2, r2, #26
 800c99a:	d42d      	bmi.n	800c9f8 <_printf_common+0xb4>
 800c99c:	4649      	mov	r1, r9
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9a4:	47c0      	blx	r8
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d020      	beq.n	800c9ec <_printf_common+0xa8>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	68e5      	ldr	r5, [r4, #12]
 800c9ae:	f003 0306 	and.w	r3, r3, #6
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	bf18      	it	ne
 800c9b6:	2500      	movne	r5, #0
 800c9b8:	6832      	ldr	r2, [r6, #0]
 800c9ba:	f04f 0600 	mov.w	r6, #0
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	bf08      	it	eq
 800c9c2:	1aad      	subeq	r5, r5, r2
 800c9c4:	6922      	ldr	r2, [r4, #16]
 800c9c6:	bf08      	it	eq
 800c9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bfc4      	itt	gt
 800c9d0:	1a9b      	subgt	r3, r3, r2
 800c9d2:	18ed      	addgt	r5, r5, r3
 800c9d4:	341a      	adds	r4, #26
 800c9d6:	42b5      	cmp	r5, r6
 800c9d8:	d11a      	bne.n	800ca10 <_printf_common+0xcc>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	e008      	b.n	800c9f0 <_printf_common+0xac>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	47c0      	blx	r8
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d103      	bne.n	800c9f4 <_printf_common+0xb0>
 800c9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	e7c4      	b.n	800c982 <_printf_common+0x3e>
 800c9f8:	2030      	movs	r0, #48	; 0x30
 800c9fa:	18e1      	adds	r1, r4, r3
 800c9fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca06:	4422      	add	r2, r4
 800ca08:	3302      	adds	r3, #2
 800ca0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca0e:	e7c5      	b.n	800c99c <_printf_common+0x58>
 800ca10:	2301      	movs	r3, #1
 800ca12:	4622      	mov	r2, r4
 800ca14:	4649      	mov	r1, r9
 800ca16:	4638      	mov	r0, r7
 800ca18:	47c0      	blx	r8
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d0e6      	beq.n	800c9ec <_printf_common+0xa8>
 800ca1e:	3601      	adds	r6, #1
 800ca20:	e7d9      	b.n	800c9d6 <_printf_common+0x92>
	...

0800ca24 <_printf_i>:
 800ca24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	7e0f      	ldrb	r7, [r1, #24]
 800ca2a:	4691      	mov	r9, r2
 800ca2c:	2f78      	cmp	r7, #120	; 0x78
 800ca2e:	4680      	mov	r8, r0
 800ca30:	460c      	mov	r4, r1
 800ca32:	469a      	mov	sl, r3
 800ca34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca3a:	d807      	bhi.n	800ca4c <_printf_i+0x28>
 800ca3c:	2f62      	cmp	r7, #98	; 0x62
 800ca3e:	d80a      	bhi.n	800ca56 <_printf_i+0x32>
 800ca40:	2f00      	cmp	r7, #0
 800ca42:	f000 80d9 	beq.w	800cbf8 <_printf_i+0x1d4>
 800ca46:	2f58      	cmp	r7, #88	; 0x58
 800ca48:	f000 80a4 	beq.w	800cb94 <_printf_i+0x170>
 800ca4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca54:	e03a      	b.n	800cacc <_printf_i+0xa8>
 800ca56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca5a:	2b15      	cmp	r3, #21
 800ca5c:	d8f6      	bhi.n	800ca4c <_printf_i+0x28>
 800ca5e:	a101      	add	r1, pc, #4	; (adr r1, 800ca64 <_printf_i+0x40>)
 800ca60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca64:	0800cabd 	.word	0x0800cabd
 800ca68:	0800cad1 	.word	0x0800cad1
 800ca6c:	0800ca4d 	.word	0x0800ca4d
 800ca70:	0800ca4d 	.word	0x0800ca4d
 800ca74:	0800ca4d 	.word	0x0800ca4d
 800ca78:	0800ca4d 	.word	0x0800ca4d
 800ca7c:	0800cad1 	.word	0x0800cad1
 800ca80:	0800ca4d 	.word	0x0800ca4d
 800ca84:	0800ca4d 	.word	0x0800ca4d
 800ca88:	0800ca4d 	.word	0x0800ca4d
 800ca8c:	0800ca4d 	.word	0x0800ca4d
 800ca90:	0800cbdf 	.word	0x0800cbdf
 800ca94:	0800cb01 	.word	0x0800cb01
 800ca98:	0800cbc1 	.word	0x0800cbc1
 800ca9c:	0800ca4d 	.word	0x0800ca4d
 800caa0:	0800ca4d 	.word	0x0800ca4d
 800caa4:	0800cc01 	.word	0x0800cc01
 800caa8:	0800ca4d 	.word	0x0800ca4d
 800caac:	0800cb01 	.word	0x0800cb01
 800cab0:	0800ca4d 	.word	0x0800ca4d
 800cab4:	0800ca4d 	.word	0x0800ca4d
 800cab8:	0800cbc9 	.word	0x0800cbc9
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	1d1a      	adds	r2, r3, #4
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	602a      	str	r2, [r5, #0]
 800cac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cacc:	2301      	movs	r3, #1
 800cace:	e0a4      	b.n	800cc1a <_printf_i+0x1f6>
 800cad0:	6820      	ldr	r0, [r4, #0]
 800cad2:	6829      	ldr	r1, [r5, #0]
 800cad4:	0606      	lsls	r6, r0, #24
 800cad6:	f101 0304 	add.w	r3, r1, #4
 800cada:	d50a      	bpl.n	800caf2 <_printf_i+0xce>
 800cadc:	680e      	ldr	r6, [r1, #0]
 800cade:	602b      	str	r3, [r5, #0]
 800cae0:	2e00      	cmp	r6, #0
 800cae2:	da03      	bge.n	800caec <_printf_i+0xc8>
 800cae4:	232d      	movs	r3, #45	; 0x2d
 800cae6:	4276      	negs	r6, r6
 800cae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caec:	230a      	movs	r3, #10
 800caee:	485e      	ldr	r0, [pc, #376]	; (800cc68 <_printf_i+0x244>)
 800caf0:	e019      	b.n	800cb26 <_printf_i+0x102>
 800caf2:	680e      	ldr	r6, [r1, #0]
 800caf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	bf18      	it	ne
 800cafc:	b236      	sxthne	r6, r6
 800cafe:	e7ef      	b.n	800cae0 <_printf_i+0xbc>
 800cb00:	682b      	ldr	r3, [r5, #0]
 800cb02:	6820      	ldr	r0, [r4, #0]
 800cb04:	1d19      	adds	r1, r3, #4
 800cb06:	6029      	str	r1, [r5, #0]
 800cb08:	0601      	lsls	r1, r0, #24
 800cb0a:	d501      	bpl.n	800cb10 <_printf_i+0xec>
 800cb0c:	681e      	ldr	r6, [r3, #0]
 800cb0e:	e002      	b.n	800cb16 <_printf_i+0xf2>
 800cb10:	0646      	lsls	r6, r0, #25
 800cb12:	d5fb      	bpl.n	800cb0c <_printf_i+0xe8>
 800cb14:	881e      	ldrh	r6, [r3, #0]
 800cb16:	2f6f      	cmp	r7, #111	; 0x6f
 800cb18:	bf0c      	ite	eq
 800cb1a:	2308      	moveq	r3, #8
 800cb1c:	230a      	movne	r3, #10
 800cb1e:	4852      	ldr	r0, [pc, #328]	; (800cc68 <_printf_i+0x244>)
 800cb20:	2100      	movs	r1, #0
 800cb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb26:	6865      	ldr	r5, [r4, #4]
 800cb28:	2d00      	cmp	r5, #0
 800cb2a:	bfa8      	it	ge
 800cb2c:	6821      	ldrge	r1, [r4, #0]
 800cb2e:	60a5      	str	r5, [r4, #8]
 800cb30:	bfa4      	itt	ge
 800cb32:	f021 0104 	bicge.w	r1, r1, #4
 800cb36:	6021      	strge	r1, [r4, #0]
 800cb38:	b90e      	cbnz	r6, 800cb3e <_printf_i+0x11a>
 800cb3a:	2d00      	cmp	r5, #0
 800cb3c:	d04d      	beq.n	800cbda <_printf_i+0x1b6>
 800cb3e:	4615      	mov	r5, r2
 800cb40:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb44:	fb03 6711 	mls	r7, r3, r1, r6
 800cb48:	5dc7      	ldrb	r7, [r0, r7]
 800cb4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb4e:	4637      	mov	r7, r6
 800cb50:	42bb      	cmp	r3, r7
 800cb52:	460e      	mov	r6, r1
 800cb54:	d9f4      	bls.n	800cb40 <_printf_i+0x11c>
 800cb56:	2b08      	cmp	r3, #8
 800cb58:	d10b      	bne.n	800cb72 <_printf_i+0x14e>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	07de      	lsls	r6, r3, #31
 800cb5e:	d508      	bpl.n	800cb72 <_printf_i+0x14e>
 800cb60:	6923      	ldr	r3, [r4, #16]
 800cb62:	6861      	ldr	r1, [r4, #4]
 800cb64:	4299      	cmp	r1, r3
 800cb66:	bfde      	ittt	le
 800cb68:	2330      	movle	r3, #48	; 0x30
 800cb6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb72:	1b52      	subs	r2, r2, r5
 800cb74:	6122      	str	r2, [r4, #16]
 800cb76:	464b      	mov	r3, r9
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	f8cd a000 	str.w	sl, [sp]
 800cb80:	aa03      	add	r2, sp, #12
 800cb82:	f7ff fedf 	bl	800c944 <_printf_common>
 800cb86:	3001      	adds	r0, #1
 800cb88:	d14c      	bne.n	800cc24 <_printf_i+0x200>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	b004      	add	sp, #16
 800cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb94:	4834      	ldr	r0, [pc, #208]	; (800cc68 <_printf_i+0x244>)
 800cb96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb9a:	6829      	ldr	r1, [r5, #0]
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cba2:	6029      	str	r1, [r5, #0]
 800cba4:	061d      	lsls	r5, r3, #24
 800cba6:	d514      	bpl.n	800cbd2 <_printf_i+0x1ae>
 800cba8:	07df      	lsls	r7, r3, #31
 800cbaa:	bf44      	itt	mi
 800cbac:	f043 0320 	orrmi.w	r3, r3, #32
 800cbb0:	6023      	strmi	r3, [r4, #0]
 800cbb2:	b91e      	cbnz	r6, 800cbbc <_printf_i+0x198>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	f023 0320 	bic.w	r3, r3, #32
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	2310      	movs	r3, #16
 800cbbe:	e7af      	b.n	800cb20 <_printf_i+0xfc>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	f043 0320 	orr.w	r3, r3, #32
 800cbc6:	6023      	str	r3, [r4, #0]
 800cbc8:	2378      	movs	r3, #120	; 0x78
 800cbca:	4828      	ldr	r0, [pc, #160]	; (800cc6c <_printf_i+0x248>)
 800cbcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbd0:	e7e3      	b.n	800cb9a <_printf_i+0x176>
 800cbd2:	0659      	lsls	r1, r3, #25
 800cbd4:	bf48      	it	mi
 800cbd6:	b2b6      	uxthmi	r6, r6
 800cbd8:	e7e6      	b.n	800cba8 <_printf_i+0x184>
 800cbda:	4615      	mov	r5, r2
 800cbdc:	e7bb      	b.n	800cb56 <_printf_i+0x132>
 800cbde:	682b      	ldr	r3, [r5, #0]
 800cbe0:	6826      	ldr	r6, [r4, #0]
 800cbe2:	1d18      	adds	r0, r3, #4
 800cbe4:	6961      	ldr	r1, [r4, #20]
 800cbe6:	6028      	str	r0, [r5, #0]
 800cbe8:	0635      	lsls	r5, r6, #24
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	d501      	bpl.n	800cbf2 <_printf_i+0x1ce>
 800cbee:	6019      	str	r1, [r3, #0]
 800cbf0:	e002      	b.n	800cbf8 <_printf_i+0x1d4>
 800cbf2:	0670      	lsls	r0, r6, #25
 800cbf4:	d5fb      	bpl.n	800cbee <_printf_i+0x1ca>
 800cbf6:	8019      	strh	r1, [r3, #0]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4615      	mov	r5, r2
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	e7ba      	b.n	800cb76 <_printf_i+0x152>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	2100      	movs	r1, #0
 800cc04:	1d1a      	adds	r2, r3, #4
 800cc06:	602a      	str	r2, [r5, #0]
 800cc08:	681d      	ldr	r5, [r3, #0]
 800cc0a:	6862      	ldr	r2, [r4, #4]
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f000 f831 	bl	800cc74 <memchr>
 800cc12:	b108      	cbz	r0, 800cc18 <_printf_i+0x1f4>
 800cc14:	1b40      	subs	r0, r0, r5
 800cc16:	6060      	str	r0, [r4, #4]
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	6123      	str	r3, [r4, #16]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc22:	e7a8      	b.n	800cb76 <_printf_i+0x152>
 800cc24:	462a      	mov	r2, r5
 800cc26:	4649      	mov	r1, r9
 800cc28:	4640      	mov	r0, r8
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	47d0      	blx	sl
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d0ab      	beq.n	800cb8a <_printf_i+0x166>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	079b      	lsls	r3, r3, #30
 800cc36:	d413      	bmi.n	800cc60 <_printf_i+0x23c>
 800cc38:	68e0      	ldr	r0, [r4, #12]
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	4298      	cmp	r0, r3
 800cc3e:	bfb8      	it	lt
 800cc40:	4618      	movlt	r0, r3
 800cc42:	e7a4      	b.n	800cb8e <_printf_i+0x16a>
 800cc44:	2301      	movs	r3, #1
 800cc46:	4632      	mov	r2, r6
 800cc48:	4649      	mov	r1, r9
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	47d0      	blx	sl
 800cc4e:	3001      	adds	r0, #1
 800cc50:	d09b      	beq.n	800cb8a <_printf_i+0x166>
 800cc52:	3501      	adds	r5, #1
 800cc54:	68e3      	ldr	r3, [r4, #12]
 800cc56:	9903      	ldr	r1, [sp, #12]
 800cc58:	1a5b      	subs	r3, r3, r1
 800cc5a:	42ab      	cmp	r3, r5
 800cc5c:	dcf2      	bgt.n	800cc44 <_printf_i+0x220>
 800cc5e:	e7eb      	b.n	800cc38 <_printf_i+0x214>
 800cc60:	2500      	movs	r5, #0
 800cc62:	f104 0619 	add.w	r6, r4, #25
 800cc66:	e7f5      	b.n	800cc54 <_printf_i+0x230>
 800cc68:	0800dd18 	.word	0x0800dd18
 800cc6c:	0800dd29 	.word	0x0800dd29

0800cc70 <__retarget_lock_acquire_recursive>:
 800cc70:	4770      	bx	lr

0800cc72 <__retarget_lock_release_recursive>:
 800cc72:	4770      	bx	lr

0800cc74 <memchr>:
 800cc74:	4603      	mov	r3, r0
 800cc76:	b510      	push	{r4, lr}
 800cc78:	b2c9      	uxtb	r1, r1
 800cc7a:	4402      	add	r2, r0
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	4618      	mov	r0, r3
 800cc80:	d101      	bne.n	800cc86 <memchr+0x12>
 800cc82:	2000      	movs	r0, #0
 800cc84:	e003      	b.n	800cc8e <memchr+0x1a>
 800cc86:	7804      	ldrb	r4, [r0, #0]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	428c      	cmp	r4, r1
 800cc8c:	d1f6      	bne.n	800cc7c <memchr+0x8>
 800cc8e:	bd10      	pop	{r4, pc}

0800cc90 <memcpy>:
 800cc90:	440a      	add	r2, r1
 800cc92:	4291      	cmp	r1, r2
 800cc94:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc98:	d100      	bne.n	800cc9c <memcpy+0xc>
 800cc9a:	4770      	bx	lr
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cca2:	4291      	cmp	r1, r2
 800cca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cca8:	d1f9      	bne.n	800cc9e <memcpy+0xe>
 800ccaa:	bd10      	pop	{r4, pc}

0800ccac <memmove>:
 800ccac:	4288      	cmp	r0, r1
 800ccae:	b510      	push	{r4, lr}
 800ccb0:	eb01 0402 	add.w	r4, r1, r2
 800ccb4:	d902      	bls.n	800ccbc <memmove+0x10>
 800ccb6:	4284      	cmp	r4, r0
 800ccb8:	4623      	mov	r3, r4
 800ccba:	d807      	bhi.n	800cccc <memmove+0x20>
 800ccbc:	1e43      	subs	r3, r0, #1
 800ccbe:	42a1      	cmp	r1, r4
 800ccc0:	d008      	beq.n	800ccd4 <memmove+0x28>
 800ccc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccca:	e7f8      	b.n	800ccbe <memmove+0x12>
 800cccc:	4601      	mov	r1, r0
 800ccce:	4402      	add	r2, r0
 800ccd0:	428a      	cmp	r2, r1
 800ccd2:	d100      	bne.n	800ccd6 <memmove+0x2a>
 800ccd4:	bd10      	pop	{r4, pc}
 800ccd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccde:	e7f7      	b.n	800ccd0 <memmove+0x24>

0800cce0 <_realloc_r>:
 800cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce4:	4680      	mov	r8, r0
 800cce6:	4614      	mov	r4, r2
 800cce8:	460e      	mov	r6, r1
 800ccea:	b921      	cbnz	r1, 800ccf6 <_realloc_r+0x16>
 800ccec:	4611      	mov	r1, r2
 800ccee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf2:	f7ff bbc1 	b.w	800c478 <_malloc_r>
 800ccf6:	b92a      	cbnz	r2, 800cd04 <_realloc_r+0x24>
 800ccf8:	f7ff fb56 	bl	800c3a8 <_free_r>
 800ccfc:	4625      	mov	r5, r4
 800ccfe:	4628      	mov	r0, r5
 800cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd04:	f000 f81b 	bl	800cd3e <_malloc_usable_size_r>
 800cd08:	4284      	cmp	r4, r0
 800cd0a:	4607      	mov	r7, r0
 800cd0c:	d802      	bhi.n	800cd14 <_realloc_r+0x34>
 800cd0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd12:	d812      	bhi.n	800cd3a <_realloc_r+0x5a>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4640      	mov	r0, r8
 800cd18:	f7ff fbae 	bl	800c478 <_malloc_r>
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d0ed      	beq.n	800ccfe <_realloc_r+0x1e>
 800cd22:	42bc      	cmp	r4, r7
 800cd24:	4622      	mov	r2, r4
 800cd26:	4631      	mov	r1, r6
 800cd28:	bf28      	it	cs
 800cd2a:	463a      	movcs	r2, r7
 800cd2c:	f7ff ffb0 	bl	800cc90 <memcpy>
 800cd30:	4631      	mov	r1, r6
 800cd32:	4640      	mov	r0, r8
 800cd34:	f7ff fb38 	bl	800c3a8 <_free_r>
 800cd38:	e7e1      	b.n	800ccfe <_realloc_r+0x1e>
 800cd3a:	4635      	mov	r5, r6
 800cd3c:	e7df      	b.n	800ccfe <_realloc_r+0x1e>

0800cd3e <_malloc_usable_size_r>:
 800cd3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd42:	1f18      	subs	r0, r3, #4
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfbc      	itt	lt
 800cd48:	580b      	ldrlt	r3, [r1, r0]
 800cd4a:	18c0      	addlt	r0, r0, r3
 800cd4c:	4770      	bx	lr
	...

0800cd50 <_init>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	bf00      	nop
 800cd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd56:	bc08      	pop	{r3}
 800cd58:	469e      	mov	lr, r3
 800cd5a:	4770      	bx	lr

0800cd5c <_fini>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	bf00      	nop
 800cd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd62:	bc08      	pop	{r3}
 800cd64:	469e      	mov	lr, r3
 800cd66:	4770      	bx	lr
