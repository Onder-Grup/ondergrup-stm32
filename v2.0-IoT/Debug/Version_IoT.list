
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8e4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800dac8  0800dac8  0000eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de28  0800de28  0000ffd4  2**0
                  CONTENTS
  4 .ARM          00000008  0800de28  0800de28  0000ee28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de30  0800de30  0000ffd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de30  0800de30  0000ee30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de34  0800de34  0000ee34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd4  20000000  0800de38  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba4  20000fd4  0800ee0c  0000ffd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  0800ee0c  00010b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ffd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d4f  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003613  00000000  00000000  00028d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb6  00000000  00000000  0002d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  0002e506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c943  00000000  00000000  0004adaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0489  00000000  00000000  000676ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107b76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  00107bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd4 	.word	0x20000fd4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800dab0 	.word	0x0800dab0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd8 	.word	0x20000fd8
 8000220:	0800dab0 	.word	0x0800dab0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a fa90 	bl	800a774 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f009 f908 	bl	800946c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000ff0 	.word	0x20000ff0
 80004bc:	20001944 	.word	0x20001944
 80004c0:	2000109d 	.word	0x2000109d
 80004c4:	200010c9 	.word	0x200010c9
 80004c8:	200010cc 	.word	0x200010cc
 80004cc:	200010cd 	.word	0x200010cd
 80004d0:	200010ce 	.word	0x200010ce
 80004d4:	200010cf 	.word	0x200010cf
 80004d8:	200010d0 	.word	0x200010d0
 80004dc:	200010d1 	.word	0x200010d1
 80004e0:	200010e1 	.word	0x200010e1
 80004e4:	200010d2 	.word	0x200010d2
 80004e8:	200010e2 	.word	0x200010e2
 80004ec:	200010d3 	.word	0x200010d3
 80004f0:	200010e3 	.word	0x200010e3
 80004f4:	200010d6 	.word	0x200010d6
 80004f8:	200010d7 	.word	0x200010d7
 80004fc:	200010d8 	.word	0x200010d8
 8000500:	200010d9 	.word	0x200010d9
 8000504:	200010da 	.word	0x200010da
 8000508:	200010db 	.word	0x200010db
 800050c:	200010dc 	.word	0x200010dc
 8000510:	200010dd 	.word	0x200010dd
 8000514:	200010de 	.word	0x200010de
 8000518:	200010df 	.word	0x200010df
 800051c:	200010e0 	.word	0x200010e0
 8000520:	200010e4 	.word	0x200010e4
 8000524:	200010e6 	.word	0x200010e6
 8000528:	200010c4 	.word	0x200010c4
 800052c:	200010c5 	.word	0x200010c5
 8000530:	200010c6 	.word	0x200010c6
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200010c7 	.word	0x200010c7
 8000540:	200010e9 	.word	0x200010e9
 8000544:	200010e7 	.word	0x200010e7
 8000548:	200010d5 	.word	0x200010d5
 800054c:	200010e8 	.word	0x200010e8
 8000550:	200010d4 	.word	0x200010d4
 8000554:	200010ea 	.word	0x200010ea
 8000558:	200010eb 	.word	0x200010eb
 800055c:	200010ec 	.word	0x200010ec
 8000560:	200010ed 	.word	0x200010ed
 8000564:	200010ee 	.word	0x200010ee
 8000568:	200010ef 	.word	0x200010ef
 800056c:	200010f0 	.word	0x200010f0
 8000570:	200010f1 	.word	0x200010f1
 8000574:	200010f2 	.word	0x200010f2
 8000578:	200010f3 	.word	0x200010f3
 800057c:	2000109c 	.word	0x2000109c
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 fed6 	bl	800946c <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 fed0 	bl	800946c <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 feca 	bl	800946c <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fc4b 	bl	8005f78 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010e1 	.word	0x200010e1
 80006ec:	200010d2 	.word	0x200010d2
 80006f0:	200010e2 	.word	0x200010e2
 80006f4:	200010d3 	.word	0x200010d3
 80006f8:	200010d5 	.word	0x200010d5
 80006fc:	200010e3 	.word	0x200010e3
 8000700:	200010d6 	.word	0x200010d6
 8000704:	200010d7 	.word	0x200010d7
 8000708:	200010d8 	.word	0x200010d8
 800070c:	200010d9 	.word	0x200010d9
 8000710:	200010da 	.word	0x200010da
 8000714:	200010db 	.word	0x200010db
 8000718:	200010dc 	.word	0x200010dc
 800071c:	200010dd 	.word	0x200010dd
 8000720:	200010de 	.word	0x200010de
 8000724:	200010df 	.word	0x200010df
 8000728:	200010e0 	.word	0x200010e0
 800072c:	200010e4 	.word	0x200010e4
 8000730:	200010e6 	.word	0x200010e6
 8000734:	200010e8 	.word	0x200010e8
 8000738:	200010e9 	.word	0x200010e9
 800073c:	200010e7 	.word	0x200010e7

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000ff0 	.word	0x20000ff0
 8000828:	20000010 	.word	0x20000010
 800082c:	20001068 	.word	0x20001068
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20001074 	.word	0x20001074
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20001088 	.word	0x20001088

08000844 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800084a:	af04      	add	r7, sp, #16
 800084c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000850:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000854:	6020      	str	r0, [r4, #0]
 8000856:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800085a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800085e:	6001      	str	r1, [r0, #0]
 8000860:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000864:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800086e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000872:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000874:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000878:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800087c:	f107 0014 	add.w	r0, r7, #20
 8000880:	220c      	movs	r2, #12
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	f00c fd17 	bl	800d2b6 <strncpy>
	subMachineID[12] = '\0';
 8000888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800088c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000890:	2200      	movs	r2, #0
 8000892:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <sendMachineData+0x128>)
 8000896:	4936      	ldr	r1, [pc, #216]	@ (8000970 <sendMachineData+0x12c>)
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <sendMachineData+0x130>)
 800089a:	f00c fc9b 	bl	800d1d4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4835      	ldr	r0, [pc, #212]	@ (8000974 <sendMachineData+0x130>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ac:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <sendMachineData+0x130>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00b fea6 	bl	800c604 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008bc:	f008 fdd6 	bl	800946c <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c8:	f107 0114 	add.w	r1, r7, #20
 80008cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <sendMachineData+0x134>)
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008de:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <sendMachineData+0x138>)
 80008ec:	f00c fc72 	bl	800d1d4 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000908:	491d      	ldr	r1, [pc, #116]	@ (8000980 <sendMachineData+0x13c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f00c fc62 	bl	800d1d4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f00b fe6a 	bl	800c604 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000930:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000934:	f008 fd9a 	bl	800946c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc71 	bl	8000224 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800094a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800094e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f00b fe56 	bl	800c604 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f008 fd86 	bl	800946c <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0800db18 	.word	0x0800db18
 8000970:	0800db28 	.word	0x0800db28
 8000974:	2000112c 	.word	0x2000112c
 8000978:	0800dbbc 	.word	0x0800dbbc
 800097c:	0800db48 	.word	0x0800db48
 8000980:	0800dbd0 	.word	0x0800dbd0

08000984 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <hata2EEPROM+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <hata2EEPROM+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <hata2EEPROM+0xa8>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009a2:	f000 f8d1 	bl	8000b48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009a6:	e000      	b.n	80009aa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e012      	b.n	80009d6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	54ca      	strb	r2, [r1, r3]
					break;
 80009ce:	e007      	b.n	80009e0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbe7      	blt.n	80009b0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009fe:	9402      	str	r4, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	21a0      	movs	r1, #160	@ 0xa0
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <hata2EEPROM+0xac>)
 8000a0c:	f009 fdb8 	bl	800a580 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f008 fd2a 	bl	800946c <HAL_Delay>
	eepromKontrol();
 8000a18:	f7ff fc0c 	bl	8000234 <eepromKontrol>
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000098 	.word	0x20000098
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000ff0 	.word	0x20000ff0
 8000a30:	20001944 	.word	0x20001944

08000a34 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10f      	bne.n	8000a64 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000a44:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f007 ffb5 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, "1");
 8000a4e:	4a37      	ldr	r2, [pc, #220]	@ (8000b2c <hataKoduLcdGoster+0xf8>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	2002      	movs	r0, #2
 8000a54:	f007 ffb0 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a5a:	2107      	movs	r1, #7
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f007 ffab 	bl	80089b8 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a62:	e05d      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10f      	bne.n	8000a8a <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f007 ffa2 	bl	80089b8 <lcd_print>
		lcd_print(2, 2, "2");
 8000a74:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <hataKoduLcdGoster+0x100>)
 8000a76:	2102      	movs	r1, #2
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f007 ff9d 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a80:	2107      	movs	r1, #7
 8000a82:	2002      	movs	r0, #2
 8000a84:	f007 ff98 	bl	80089b8 <lcd_print>
}
 8000a88:	e04a      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d10f      	bne.n	8000ab0 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2001      	movs	r0, #1
 8000a96:	f007 ff8f 	bl	80089b8 <lcd_print>
		lcd_print(2, 3, "3");
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <hataKoduLcdGoster+0x104>)
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f007 ff8a 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f007 ff85 	bl	80089b8 <lcd_print>
}
 8000aae:	e037      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d10f      	bne.n	8000ad6 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f007 ff7c 	bl	80089b8 <lcd_print>
		lcd_print(2, 4, "4");
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <hataKoduLcdGoster+0x108>)
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 ff77 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f007 ff72 	bl	80089b8 <lcd_print>
}
 8000ad4:	e024      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d10f      	bne.n	8000afc <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f007 ff69 	bl	80089b8 <lcd_print>
		lcd_print(2, 5, "5");
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <hataKoduLcdGoster+0x10c>)
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2002      	movs	r0, #2
 8000aec:	f007 ff64 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f007 ff5f 	bl	80089b8 <lcd_print>
}
 8000afa:	e011      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d10e      	bne.n	8000b20 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 ff56 	bl	80089b8 <lcd_print>
		lcd_print(2, 6, "6");
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <hataKoduLcdGoster+0x110>)
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2002      	movs	r0, #2
 8000b12:	f007 ff51 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f007 ff4c 	bl	80089b8 <lcd_print>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200018b8 	.word	0x200018b8
 8000b2c:	0800dc44 	.word	0x0800dc44
 8000b30:	0800dc48 	.word	0x0800dc48
 8000b34:	0800dc54 	.word	0x0800dc54
 8000b38:	0800dc58 	.word	0x0800dc58
 8000b3c:	0800dc5c 	.word	0x0800dc5c
 8000b40:	0800dc60 	.word	0x0800dc60
 8000b44:	0800dc64 	.word	0x0800dc64

08000b48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e009      	b.n	8000b68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <eepromDataFillWithEmpty+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <eepromDataFillWithEmpty+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <eepromDataFillWithEmpty+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000070 	.word	0x20000070
 8000b84:	20000ff0 	.word	0x20000ff0
 8000b88:	20000098 	.word	0x20000098

08000b8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ce0 <i2cTest+0x154>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce0 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bae:	484c      	ldr	r0, [pc, #304]	@ (8000ce0 <i2cTest+0x154>)
 8000bb0:	f009 fbb8 	bl	800a324 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	@ 0xc0
 8000bb6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4846      	ldr	r0, [pc, #280]	@ (8000ce4 <i2cTest+0x158>)
 8000bca:	f008 ffbf 	bl	8009b4c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4844      	ldr	r0, [pc, #272]	@ (8000ce4 <i2cTest+0x158>)
 8000bd4:	f009 fa31 	bl	800a03a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4841      	ldr	r0, [pc, #260]	@ (8000ce4 <i2cTest+0x158>)
 8000bde:	f009 fa2c 	bl	800a03a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f008 fc42 	bl	800946c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000be8:	bf00      	nop
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	483d      	ldr	r0, [pc, #244]	@ (8000ce4 <i2cTest+0x158>)
 8000bee:	f009 fa0d 	bl	800a00c <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <i2cTest+0x7a>
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	483a      	ldr	r0, [pc, #232]	@ (8000ce4 <i2cTest+0x158>)
 8000bfc:	f009 fa06 	bl	800a00c <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f1      	bne.n	8000bea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <i2cTest+0x158>)
 8000c0c:	f009 fa15 	bl	800a03a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f008 fc2b 	bl	800946c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c16:	bf00      	nop
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	4832      	ldr	r0, [pc, #200]	@ (8000ce4 <i2cTest+0x158>)
 8000c1c:	f009 f9f6 	bl	800a00c <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0f8      	beq.n	8000c18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	@ 0x40
 8000c2a:	482e      	ldr	r0, [pc, #184]	@ (8000ce4 <i2cTest+0x158>)
 8000c2c:	f009 fa05 	bl	800a03a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f008 fc1b 	bl	800946c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c36:	bf00      	nop
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <i2cTest+0x158>)
 8000c3c:	f009 f9e6 	bl	800a00c <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f8      	beq.n	8000c38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <i2cTest+0x158>)
 8000c4c:	f009 f9f5 	bl	800a03a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f008 fc0b 	bl	800946c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c56:	bf00      	nop
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <i2cTest+0x158>)
 8000c5c:	f009 f9d6 	bl	800a00c <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1f8      	bne.n	8000c58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <i2cTest+0x158>)
 8000c6c:	f009 f9e5 	bl	800a03a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f008 fbfb 	bl	800946c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <i2cTest+0x158>)
 8000c7c:	f009 f9c6 	bl	800a00c <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f8      	bne.n	8000c78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	@ 0xc0
 8000c88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <i2cTest+0x158>)
 8000c9c:	f008 ff56 	bl	8009b4c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <i2cTest+0x154>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <i2cTest+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <i2cTest+0x154>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cbe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <i2cTest+0x154>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <i2cTest+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <i2cTest+0x154>)
 8000cd2:	f009 f9e3 	bl	800a09c <HAL_I2C_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001944 	.word	0x20001944
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cf2:	20c8      	movs	r0, #200	@ 0xc8
 8000cf4:	f008 fbba 	bl	800946c <HAL_Delay>
	lcd_clear();
 8000cf8:	f007 fe8a 	bl	8008a10 <lcd_clear>
	if(type == 1 && page == 0) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13e      	bne.n	8000d80 <printTemplate+0x98>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d13b      	bne.n	8000d80 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000d08:	4a9a      	ldr	r2, [pc, #616]	@ (8000f74 <printTemplate+0x28c>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f007 fe53 	bl	80089b8 <lcd_print>
		lcd_print(2, 3, "0");
 8000d12:	4a99      	ldr	r2, [pc, #612]	@ (8000f78 <printTemplate+0x290>)
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 fe4e 	bl	80089b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000d1c:	4a97      	ldr	r2, [pc, #604]	@ (8000f7c <printTemplate+0x294>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 fe49 	bl	80089b8 <lcd_print>
		lcd_print(2, 5, "2");
 8000d26:	4a96      	ldr	r2, [pc, #600]	@ (8000f80 <printTemplate+0x298>)
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f007 fe44 	bl	80089b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000d30:	4a94      	ldr	r2, [pc, #592]	@ (8000f84 <printTemplate+0x29c>)
 8000d32:	2106      	movs	r1, #6
 8000d34:	2002      	movs	r0, #2
 8000d36:	f007 fe3f 	bl	80089b8 <lcd_print>
		lcd_print(2, 7, "4");
 8000d3a:	4a93      	ldr	r2, [pc, #588]	@ (8000f88 <printTemplate+0x2a0>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 fe3a 	bl	80089b8 <lcd_print>
		lcd_print(2, 10, "5");
 8000d44:	4a91      	ldr	r2, [pc, #580]	@ (8000f8c <printTemplate+0x2a4>)
 8000d46:	210a      	movs	r1, #10
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f007 fe35 	bl	80089b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000d4e:	4a90      	ldr	r2, [pc, #576]	@ (8000f90 <printTemplate+0x2a8>)
 8000d50:	210b      	movs	r1, #11
 8000d52:	2002      	movs	r0, #2
 8000d54:	f007 fe30 	bl	80089b8 <lcd_print>
		lcd_print(2, 12, "7");
 8000d58:	4a8e      	ldr	r2, [pc, #568]	@ (8000f94 <printTemplate+0x2ac>)
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f007 fe2b 	bl	80089b8 <lcd_print>
		lcd_print(2, 13, "8");
 8000d62:	4a8d      	ldr	r2, [pc, #564]	@ (8000f98 <printTemplate+0x2b0>)
 8000d64:	210d      	movs	r1, #13
 8000d66:	2002      	movs	r0, #2
 8000d68:	f007 fe26 	bl	80089b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000d6c:	4a8b      	ldr	r2, [pc, #556]	@ (8000f9c <printTemplate+0x2b4>)
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fe21 	bl	80089b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d76:	2103      	movs	r1, #3
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f007 fdfe 	bl	800897a <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000d7e:	e0f5      	b.n	8000f6c <printTemplate+0x284>
	} else if(type == 2) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d178      	bne.n	8000e78 <printTemplate+0x190>
		if(page == 1) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d114      	bne.n	8000db6 <printTemplate+0xce>
			lcd_clear();
 8000d8c:	f007 fe40 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f008 fb6b 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d96:	4a82      	ldr	r2, [pc, #520]	@ (8000fa0 <printTemplate+0x2b8>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f007 fe0c 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000da0:	4a80      	ldr	r2, [pc, #512]	@ (8000fa4 <printTemplate+0x2bc>)
 8000da2:	2107      	movs	r1, #7
 8000da4:	2001      	movs	r0, #1
 8000da6:	f007 fe07 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000daa:	4a7f      	ldr	r2, [pc, #508]	@ (8000fa8 <printTemplate+0x2c0>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	2002      	movs	r0, #2
 8000db0:	f007 fe02 	bl	80089b8 <lcd_print>
}
 8000db4:	e0da      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 2) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d114      	bne.n	8000de6 <printTemplate+0xfe>
			lcd_clear();
 8000dbc:	f007 fe28 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000dc0:	2064      	movs	r0, #100	@ 0x64
 8000dc2:	f008 fb53 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dc6:	4a79      	ldr	r2, [pc, #484]	@ (8000fac <printTemplate+0x2c4>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f007 fdf4 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dd0:	4a74      	ldr	r2, [pc, #464]	@ (8000fa4 <printTemplate+0x2bc>)
 8000dd2:	2107      	movs	r1, #7
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f007 fdef 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dda:	4a75      	ldr	r2, [pc, #468]	@ (8000fb0 <printTemplate+0x2c8>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2002      	movs	r0, #2
 8000de0:	f007 fdea 	bl	80089b8 <lcd_print>
}
 8000de4:	e0c2      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 3) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d114      	bne.n	8000e16 <printTemplate+0x12e>
			lcd_clear();
 8000dec:	f007 fe10 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f008 fb3b 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000df6:	4a6a      	ldr	r2, [pc, #424]	@ (8000fa0 <printTemplate+0x2b8>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f007 fddc 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e00:	4a68      	ldr	r2, [pc, #416]	@ (8000fa4 <printTemplate+0x2bc>)
 8000e02:	2107      	movs	r1, #7
 8000e04:	2001      	movs	r0, #1
 8000e06:	f007 fdd7 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fb4 <printTemplate+0x2cc>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f007 fdd2 	bl	80089b8 <lcd_print>
}
 8000e14:	e0aa      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 4) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d114      	bne.n	8000e46 <printTemplate+0x15e>
			lcd_clear();
 8000e1c:	f007 fdf8 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	@ 0x64
 8000e22:	f008 fb23 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e26:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa0 <printTemplate+0x2b8>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f007 fdc4 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e30:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa4 <printTemplate+0x2bc>)
 8000e32:	2107      	movs	r1, #7
 8000e34:	2001      	movs	r0, #1
 8000e36:	f007 fdbf 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb8 <printTemplate+0x2d0>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f007 fdba 	bl	80089b8 <lcd_print>
}
 8000e44:	e092      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 5) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	f040 808f 	bne.w	8000f6c <printTemplate+0x284>
			lcd_clear();
 8000e4e:	f007 fddf 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000e52:	2064      	movs	r0, #100	@ 0x64
 8000e54:	f008 fb0a 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e58:	4a51      	ldr	r2, [pc, #324]	@ (8000fa0 <printTemplate+0x2b8>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f007 fdab 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e62:	4a50      	ldr	r2, [pc, #320]	@ (8000fa4 <printTemplate+0x2bc>)
 8000e64:	2107      	movs	r1, #7
 8000e66:	2001      	movs	r0, #1
 8000e68:	f007 fda6 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e6c:	4a53      	ldr	r2, [pc, #332]	@ (8000fbc <printTemplate+0x2d4>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2002      	movs	r0, #2
 8000e72:	f007 fda1 	bl	80089b8 <lcd_print>
}
 8000e76:	e079      	b.n	8000f6c <printTemplate+0x284>
	} else if(type == 3) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d176      	bne.n	8000f6c <printTemplate+0x284>
		if(page == 1) {
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d114      	bne.n	8000eae <printTemplate+0x1c6>
			lcd_clear();
 8000e84:	f007 fdc4 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000e88:	2064      	movs	r0, #100	@ 0x64
 8000e8a:	f008 faef 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <printTemplate+0x2d8>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	2001      	movs	r0, #1
 8000e94:	f007 fd90 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e98:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc4 <printTemplate+0x2dc>)
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f007 fd8b 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ea2:	4a41      	ldr	r2, [pc, #260]	@ (8000fa8 <printTemplate+0x2c0>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f007 fd86 	bl	80089b8 <lcd_print>
}
 8000eac:	e05e      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 2) {
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d114      	bne.n	8000ede <printTemplate+0x1f6>
			lcd_clear();
 8000eb4:	f007 fdac 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000eb8:	2064      	movs	r0, #100	@ 0x64
 8000eba:	f008 fad7 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ebe:	4a40      	ldr	r2, [pc, #256]	@ (8000fc0 <printTemplate+0x2d8>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f007 fd78 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8000fc4 <printTemplate+0x2dc>)
 8000eca:	2107      	movs	r1, #7
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f007 fd73 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ed2:	4a37      	ldr	r2, [pc, #220]	@ (8000fb0 <printTemplate+0x2c8>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f007 fd6e 	bl	80089b8 <lcd_print>
}
 8000edc:	e046      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 3) {
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d114      	bne.n	8000f0e <printTemplate+0x226>
			lcd_clear();
 8000ee4:	f007 fd94 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f008 fabf 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000eee:	4a34      	ldr	r2, [pc, #208]	@ (8000fc0 <printTemplate+0x2d8>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f007 fd60 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ef8:	4a32      	ldr	r2, [pc, #200]	@ (8000fc4 <printTemplate+0x2dc>)
 8000efa:	2107      	movs	r1, #7
 8000efc:	2001      	movs	r0, #1
 8000efe:	f007 fd5b 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000f02:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb4 <printTemplate+0x2cc>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2002      	movs	r0, #2
 8000f08:	f007 fd56 	bl	80089b8 <lcd_print>
}
 8000f0c:	e02e      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 4) {
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d114      	bne.n	8000f3e <printTemplate+0x256>
			lcd_clear();
 8000f14:	f007 fd7c 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f008 faa7 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f1e:	4a28      	ldr	r2, [pc, #160]	@ (8000fc0 <printTemplate+0x2d8>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	2001      	movs	r0, #1
 8000f24:	f007 fd48 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f28:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <printTemplate+0x2dc>)
 8000f2a:	2107      	movs	r1, #7
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f007 fd43 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f32:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <printTemplate+0x2d0>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	2002      	movs	r0, #2
 8000f38:	f007 fd3e 	bl	80089b8 <lcd_print>
}
 8000f3c:	e016      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 5) {
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d113      	bne.n	8000f6c <printTemplate+0x284>
			lcd_clear();
 8000f44:	f007 fd64 	bl	8008a10 <lcd_clear>
			HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f008 fa8f 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <printTemplate+0x2d8>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	2001      	movs	r0, #1
 8000f54:	f007 fd30 	bl	80089b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <printTemplate+0x2dc>)
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f007 fd2b 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f62:	4a16      	ldr	r2, [pc, #88]	@ (8000fbc <printTemplate+0x2d4>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	2002      	movs	r0, #2
 8000f68:	f007 fd26 	bl	80089b8 <lcd_print>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	0800dc68 	.word	0x0800dc68
 8000f78:	0800dc70 	.word	0x0800dc70
 8000f7c:	0800dc74 	.word	0x0800dc74
 8000f80:	0800dc78 	.word	0x0800dc78
 8000f84:	0800dc7c 	.word	0x0800dc7c
 8000f88:	0800dc80 	.word	0x0800dc80
 8000f8c:	0800dc84 	.word	0x0800dc84
 8000f90:	0800dc88 	.word	0x0800dc88
 8000f94:	0800dc8c 	.word	0x0800dc8c
 8000f98:	0800dc90 	.word	0x0800dc90
 8000f9c:	0800dc94 	.word	0x0800dc94
 8000fa0:	0800dc98 	.word	0x0800dc98
 8000fa4:	20001074 	.word	0x20001074
 8000fa8:	0800dcac 	.word	0x0800dcac
 8000fac:	0800dcc0 	.word	0x0800dcc0
 8000fb0:	0800dcc8 	.word	0x0800dcc8
 8000fb4:	0800dcdc 	.word	0x0800dcdc
 8000fb8:	0800dcf0 	.word	0x0800dcf0
 8000fbc:	0800dd04 	.word	0x0800dd04
 8000fc0:	0800dd18 	.word	0x0800dd18
 8000fc4:	20001088 	.word	0x20001088

08000fc8 <checkSlideVal>:

int checkSlideVal(int state) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d111      	bne.n	8000ffa <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4813      	ldr	r0, [pc, #76]	@ (8001028 <checkSlideVal+0x60>)
 8000fda:	f009 f817 	bl	800a00c <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <checkSlideVal+0x20>
			return 34;
 8000fe4:	2322      	movs	r3, #34	@ 0x22
 8000fe6:	e01b      	b.n	8001020 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <checkSlideVal+0x64>)
 8000fec:	f009 f80e 	bl	800a00c <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d113      	bne.n	800101e <checkSlideVal+0x56>
			return 32;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	e012      	b.n	8001020 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	480a      	ldr	r0, [pc, #40]	@ (8001028 <checkSlideVal+0x60>)
 8000ffe:	f009 f805 	bl	800a00c <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <checkSlideVal+0x44>
			return 35;
 8001008:	2323      	movs	r3, #35	@ 0x23
 800100a:	e009      	b.n	8001020 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800100c:	2108      	movs	r1, #8
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <checkSlideVal+0x64>)
 8001010:	f008 fffc 	bl	800a00c <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <checkSlideVal+0x56>
			return 33;
 800101a:	2321      	movs	r3, #33	@ 0x21
 800101c:	e000      	b.n	8001020 <checkSlideVal+0x58>
		}
	}
	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010800 	.word	0x40010800
 800102c:	40011000 	.word	0x40011000

08001030 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff f8f0 	bl	8000224 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 800104c:	e0aa      	b.n	80011a4 <slideText+0x174>
		if(checkSlideVal(state) > 0) {
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f7ff ffba 	bl	8000fc8 <checkSlideVal>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd07      	ble.n	800106a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f7ff ffb4 	bl	8000fc8 <checkSlideVal>
 8001060:	4603      	mov	r3, r0
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b54      	ldr	r3, [pc, #336]	@ (80011b8 <slideText+0x188>)
 8001066:	701a      	strb	r2, [r3, #0]
			break;
 8001068:	e0a2      	b.n	80011b0 <slideText+0x180>
		}
		checkEditMode();
 800106a:	f000 f927 	bl	80012bc <checkEditMode>
		if(editMode == 1) {
 800106e:	4b53      	ldr	r3, [pc, #332]	@ (80011bc <slideText+0x18c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	f000 809b 	beq.w	80011ae <slideText+0x17e>
			break;
		}

		for(int z=0; z < uzunluk; z++) {
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
 800107c:	e08b      	b.n	8001196 <slideText+0x166>
			if(checkSlideVal(state) > 0) {
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f7ff ffa2 	bl	8000fc8 <checkSlideVal>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	dd09      	ble.n	800109e <slideText+0x6e>
				menuSayac = checkSlideVal(state);
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f7ff ff9c 	bl	8000fc8 <checkSlideVal>
 8001090:	4603      	mov	r3, r0
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <slideText+0x188>)
 8001096:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 800109c:	e082      	b.n	80011a4 <slideText+0x174>
			}
			checkEditMode();
 800109e:	f000 f90d 	bl	80012bc <checkEditMode>
			if(editMode == 1) {
 80010a2:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <slideText+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d07b      	beq.n	80011a2 <slideText+0x172>
				break;
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	4413      	add	r3, r2
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e02f      	b.n	8001114 <slideText+0xe4>
				if(checkSlideVal(state) > 0) {
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f7ff ff87 	bl	8000fc8 <checkSlideVal>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd0b      	ble.n	80010d8 <slideText+0xa8>
					menuSayac = checkSlideVal(state);
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f7ff ff81 	bl	8000fc8 <checkSlideVal>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <slideText+0x188>)
 80010cc:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80010d6:	e025      	b.n	8001124 <slideText+0xf4>
				}
				checkEditMode();
 80010d8:	f000 f8f0 	bl	80012bc <checkEditMode>
				if(editMode == 1) {
 80010dc:	4b37      	ldr	r3, [pc, #220]	@ (80011bc <slideText+0x18c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d01e      	beq.n	8001122 <slideText+0xf2>
					break;
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b2d8      	uxtb	r0, r3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	f007 fc6d 	bl	80089e2 <lcd_print_char>
				HAL_Delay(30);
 8001108:	201e      	movs	r0, #30
 800110a:	f008 f9af 	bl	800946c <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	7dfa      	ldrb	r2, [r7, #23]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4413      	add	r3, r2
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbc9      	blt.n	80010b4 <slideText+0x84>
 8001120:	e000      	b.n	8001124 <slideText+0xf4>
					break;
 8001122:	bf00      	nop
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	3b01      	subs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	e029      	b.n	8001180 <slideText+0x150>
				if(checkSlideVal(state) > 0) {
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff ff4b 	bl	8000fc8 <checkSlideVal>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	dd0b      	ble.n	8001150 <slideText+0x120>
					menuSayac = checkSlideVal(state);
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f7ff ff45 	bl	8000fc8 <checkSlideVal>
 800113e:	4603      	mov	r3, r0
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <slideText+0x188>)
 8001144:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800114e:	e01f      	b.n	8001190 <slideText+0x160>
				}
				checkEditMode();
 8001150:	f000 f8b4 	bl	80012bc <checkEditMode>
				if(editMode == 1) {
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <slideText+0x18c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d018      	beq.n	800118e <slideText+0x15e>
					break;
				}
			    if(j >= startPos) {
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	429a      	cmp	r2, r3
 8001162:	db0a      	blt.n	800117a <slideText+0x14a>
			    	lcd_print_char(startLine, j, ' ');
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	b2d1      	uxtb	r1, r2
 800116c:	2220      	movs	r2, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f007 fc37 	bl	80089e2 <lcd_print_char>
			    	HAL_Delay(30);
 8001174:	201e      	movs	r0, #30
 8001176:	f008 f979 	bl	800946c <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	3b01      	subs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	7dfa      	ldrb	r2, [r7, #23]
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	429a      	cmp	r2, r3
 800118a:	dacf      	bge.n	800112c <slideText+0xfc>
 800118c:	e000      	b.n	8001190 <slideText+0x160>
					break;
 800118e:	bf00      	nop
		for(int z=0; z < uzunluk; z++) {
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	3301      	adds	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	429a      	cmp	r2, r3
 800119c:	f6ff af6f 	blt.w	800107e <slideText+0x4e>
 80011a0:	e000      	b.n	80011a4 <slideText+0x174>
				break;
 80011a2:	bf00      	nop
	while(mainLoopVal == 1) {
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	f43f af51 	beq.w	800104e <slideText+0x1e>
			    }
			}
		}
	}
}
 80011ac:	e000      	b.n	80011b0 <slideText+0x180>
			break;
 80011ae:	bf00      	nop
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200010c8 	.word	0x200010c8
 80011bc:	200010c0 	.word	0x200010c0

080011c0 <printCredentials>:

void printCredentials(int type) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10f      	bne.n	80011ee <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 80011ce:	4a33      	ldr	r2, [pc, #204]	@ (800129c <printCredentials+0xdc>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	2001      	movs	r0, #1
 80011d4:	f007 fbf0 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, machineID);
 80011d8:	4a31      	ldr	r2, [pc, #196]	@ (80012a0 <printCredentials+0xe0>)
 80011da:	2101      	movs	r1, #1
 80011dc:	2002      	movs	r0, #2
 80011de:	f007 fbeb 	bl	80089b8 <lcd_print>
		lcd_print(2, 13, "    ");
 80011e2:	4a30      	ldr	r2, [pc, #192]	@ (80012a4 <printCredentials+0xe4>)
 80011e4:	210d      	movs	r1, #13
 80011e6:	2002      	movs	r0, #2
 80011e8:	f007 fbe6 	bl	80089b8 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80011ec:	e051      	b.n	8001292 <printCredentials+0xd2>
	} else if(type == 2) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d127      	bne.n	8001244 <printCredentials+0x84>
		int ssidLength = strlen(wifiSSID);
 80011f4:	482c      	ldr	r0, [pc, #176]	@ (80012a8 <printCredentials+0xe8>)
 80011f6:	f7ff f815 	bl	8000224 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80011fe:	4a2b      	ldr	r2, [pc, #172]	@ (80012ac <printCredentials+0xec>)
 8001200:	2101      	movs	r1, #1
 8001202:	2001      	movs	r0, #1
 8001204:	f007 fbd8 	bl	80089b8 <lcd_print>
		if(ssidLength == 16) {
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d105      	bne.n	800121a <printCredentials+0x5a>
			lcd_print(2, 1, wifiSSID);
 800120e:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <printCredentials+0xe8>)
 8001210:	2101      	movs	r1, #1
 8001212:	2002      	movs	r0, #2
 8001214:	f007 fbd0 	bl	80089b8 <lcd_print>
}
 8001218:	e03b      	b.n	8001292 <printCredentials+0xd2>
		} else if(ssidLength < 16) {
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	dc0a      	bgt.n	8001236 <printCredentials+0x76>
			lcd_print(2, 1, "                ");
 8001220:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <printCredentials+0xf0>)
 8001222:	2101      	movs	r1, #1
 8001224:	2002      	movs	r0, #2
 8001226:	f007 fbc7 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <printCredentials+0xe8>)
 800122c:	2101      	movs	r1, #1
 800122e:	2002      	movs	r0, #2
 8001230:	f007 fbc2 	bl	80089b8 <lcd_print>
}
 8001234:	e02d      	b.n	8001292 <printCredentials+0xd2>
			slideText(wifiSSID, 1, 2, 0);
 8001236:	2300      	movs	r3, #0
 8001238:	2202      	movs	r2, #2
 800123a:	2101      	movs	r1, #1
 800123c:	481a      	ldr	r0, [pc, #104]	@ (80012a8 <printCredentials+0xe8>)
 800123e:	f7ff fef7 	bl	8001030 <slideText>
}
 8001242:	e026      	b.n	8001292 <printCredentials+0xd2>
		int passLength = strlen(wifiPass);
 8001244:	481b      	ldr	r0, [pc, #108]	@ (80012b4 <printCredentials+0xf4>)
 8001246:	f7fe ffed 	bl	8000224 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800124e:	4a1a      	ldr	r2, [pc, #104]	@ (80012b8 <printCredentials+0xf8>)
 8001250:	2101      	movs	r1, #1
 8001252:	2001      	movs	r0, #1
 8001254:	f007 fbb0 	bl	80089b8 <lcd_print>
		if(passLength == 16) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b10      	cmp	r3, #16
 800125c:	d105      	bne.n	800126a <printCredentials+0xaa>
			lcd_print(2, 1, wifiPass);
 800125e:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <printCredentials+0xf4>)
 8001260:	2101      	movs	r1, #1
 8001262:	2002      	movs	r0, #2
 8001264:	f007 fba8 	bl	80089b8 <lcd_print>
}
 8001268:	e013      	b.n	8001292 <printCredentials+0xd2>
		} else if(passLength < 16) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	dc0a      	bgt.n	8001286 <printCredentials+0xc6>
			lcd_print(2, 1, "                ");
 8001270:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <printCredentials+0xf0>)
 8001272:	2101      	movs	r1, #1
 8001274:	2002      	movs	r0, #2
 8001276:	f007 fb9f 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <printCredentials+0xf4>)
 800127c:	2101      	movs	r1, #1
 800127e:	2002      	movs	r0, #2
 8001280:	f007 fb9a 	bl	80089b8 <lcd_print>
}
 8001284:	e005      	b.n	8001292 <printCredentials+0xd2>
			slideText(wifiPass, 1, 2, 1);
 8001286:	2301      	movs	r3, #1
 8001288:	2202      	movs	r2, #2
 800128a:	2101      	movs	r1, #1
 800128c:	4809      	ldr	r0, [pc, #36]	@ (80012b4 <printCredentials+0xf4>)
 800128e:	f7ff fecf 	bl	8001030 <slideText>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200018cc 	.word	0x200018cc
 80012a0:	20001068 	.word	0x20001068
 80012a4:	0800dd2c 	.word	0x0800dd2c
 80012a8:	20001074 	.word	0x20001074
 80012ac:	0800dd34 	.word	0x0800dd34
 80012b0:	0800dd48 	.word	0x0800dd48
 80012b4:	20001088 	.word	0x20001088
 80012b8:	0800dd5c 	.word	0x0800dd5c

080012bc <checkEditMode>:

void checkEditMode(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)) {
 80012c0:	2102      	movs	r1, #2
 80012c2:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <checkEditMode+0x2c>)
 80012c4:	f008 fea2 	bl	800a00c <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d109      	bne.n	80012e2 <checkEditMode+0x26>
 80012ce:	2104      	movs	r1, #4
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <checkEditMode+0x2c>)
 80012d2:	f008 fe9b 	bl	800a00c <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <checkEditMode+0x26>
		editMode = 1;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <checkEditMode+0x30>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
	}
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40010800 	.word	0x40010800
 80012ec:	200010c0 	.word	0x200010c0

080012f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f4:	f3bf 8f4f 	dsb	sy
}
 80012f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <__NVIC_SystemReset+0x24>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001302:	4904      	ldr	r1, [pc, #16]	@ (8001314 <__NVIC_SystemReset+0x24>)
 8001304:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <__NVIC_SystemReset+0x28>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800130a:	f3bf 8f4f 	dsb	sy
}
 800130e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <__NVIC_SystemReset+0x20>
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	05fa0004 	.word	0x05fa0004

0800131c <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001322:	2101      	movs	r1, #1
 8001324:	488e      	ldr	r0, [pc, #568]	@ (8001560 <menu+0x244>)
 8001326:	f008 fe71 	bl	800a00c <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	f040 8099 	bne.w	8001464 <menu+0x148>
 8001332:	4b8c      	ldr	r3, [pc, #560]	@ (8001564 <menu+0x248>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	f083 0301 	eor.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8091 	beq.w	8001464 <menu+0x148>
		menuSayac = menuSayac+1;
 8001342:	4b89      	ldr	r3, [pc, #548]	@ (8001568 <menu+0x24c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b87      	ldr	r3, [pc, #540]	@ (8001568 <menu+0x24c>)
 800134c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800134e:	4b86      	ldr	r3, [pc, #536]	@ (8001568 <menu+0x24c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b24      	cmp	r3, #36	@ 0x24
 8001354:	d102      	bne.n	800135c <menu+0x40>
			menuSayac = 1;
 8001356:	4b84      	ldr	r3, [pc, #528]	@ (8001568 <menu+0x24c>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800135c:	4b82      	ldr	r3, [pc, #520]	@ (8001568 <menu+0x24c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b12      	cmp	r3, #18
 8001362:	d106      	bne.n	8001372 <menu+0x56>
 8001364:	4b81      	ldr	r3, [pc, #516]	@ (800156c <menu+0x250>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <menu+0x56>
			menuSayac = 21;
 800136c:	4b7e      	ldr	r3, [pc, #504]	@ (8001568 <menu+0x24c>)
 800136e:	2215      	movs	r2, #21
 8001370:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001372:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <menu+0x24c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d106      	bne.n	8001388 <menu+0x6c>
 800137a:	4b7d      	ldr	r3, [pc, #500]	@ (8001570 <menu+0x254>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <menu+0x6c>
			menuSayac = 16;
 8001382:	4b79      	ldr	r3, [pc, #484]	@ (8001568 <menu+0x24c>)
 8001384:	2210      	movs	r2, #16
 8001386:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001388:	4b77      	ldr	r3, [pc, #476]	@ (8001568 <menu+0x24c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b0d      	cmp	r3, #13
 800138e:	d106      	bne.n	800139e <menu+0x82>
 8001390:	4b77      	ldr	r3, [pc, #476]	@ (8001570 <menu+0x254>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <menu+0x82>
			menuSayac = 16;
 8001398:	4b73      	ldr	r3, [pc, #460]	@ (8001568 <menu+0x24c>)
 800139a:	2210      	movs	r2, #16
 800139c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800139e:	4b72      	ldr	r3, [pc, #456]	@ (8001568 <menu+0x24c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b09      	cmp	r3, #9
 80013a4:	d106      	bne.n	80013b4 <menu+0x98>
 80013a6:	4b72      	ldr	r3, [pc, #456]	@ (8001570 <menu+0x254>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d102      	bne.n	80013b4 <menu+0x98>
			menuSayac = 13;
 80013ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001568 <menu+0x24c>)
 80013b0:	220d      	movs	r2, #13
 80013b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001568 <menu+0x24c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b0a      	cmp	r3, #10
 80013ba:	d10a      	bne.n	80013d2 <menu+0xb6>
 80013bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001574 <menu+0x258>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d003      	beq.n	80013cc <menu+0xb0>
 80013c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001574 <menu+0x258>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d102      	bne.n	80013d2 <menu+0xb6>
			menuSayac = 11;
 80013cc:	4b66      	ldr	r3, [pc, #408]	@ (8001568 <menu+0x24c>)
 80013ce:	220b      	movs	r2, #11
 80013d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013d2:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <menu+0x24c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	d10e      	bne.n	80013f8 <menu+0xdc>
 80013da:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <menu+0x25c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <menu+0xce>
 80013e2:	4b65      	ldr	r3, [pc, #404]	@ (8001578 <menu+0x25c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d106      	bne.n	80013f8 <menu+0xdc>
 80013ea:	4b61      	ldr	r3, [pc, #388]	@ (8001570 <menu+0x254>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <menu+0xdc>
			menuSayac = 16;
 80013f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001568 <menu+0x24c>)
 80013f4:	2210      	movs	r2, #16
 80013f6:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001568 <menu+0x24c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d10e      	bne.n	800141e <menu+0x102>
 8001400:	4b5d      	ldr	r3, [pc, #372]	@ (8001578 <menu+0x25c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d003      	beq.n	8001410 <menu+0xf4>
 8001408:	4b5b      	ldr	r3, [pc, #364]	@ (8001578 <menu+0x25c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d106      	bne.n	800141e <menu+0x102>
 8001410:	4b57      	ldr	r3, [pc, #348]	@ (8001570 <menu+0x254>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d102      	bne.n	800141e <menu+0x102>
			menuSayac = 13;
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <menu+0x24c>)
 800141a:	220d      	movs	r2, #13
 800141c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800141e:	4b52      	ldr	r3, [pc, #328]	@ (8001568 <menu+0x24c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d106      	bne.n	8001434 <menu+0x118>
 8001426:	4b55      	ldr	r3, [pc, #340]	@ (800157c <menu+0x260>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <menu+0x118>
			menuSayac = 16;
 800142e:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <menu+0x24c>)
 8001430:	2210      	movs	r2, #16
 8001432:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001434:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <menu+0x24c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b18      	cmp	r3, #24
 800143a:	d106      	bne.n	800144a <menu+0x12e>
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <menu+0x250>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <menu+0x12e>
			menuSayac = 26;
 8001444:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <menu+0x24c>)
 8001446:	221a      	movs	r2, #26
 8001448:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800144a:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <menu+0x24c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b21      	cmp	r3, #33	@ 0x21
 8001450:	d106      	bne.n	8001460 <menu+0x144>
 8001452:	4b4b      	ldr	r3, [pc, #300]	@ (8001580 <menu+0x264>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <menu+0x144>
			menuSayac = 35;
 800145a:	4b43      	ldr	r3, [pc, #268]	@ (8001568 <menu+0x24c>)
 800145c:	2223      	movs	r2, #35	@ 0x23
 800145e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001460:	f002 fc9a 	bl	8003d98 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001464:	2108      	movs	r1, #8
 8001466:	4847      	ldr	r0, [pc, #284]	@ (8001584 <menu+0x268>)
 8001468:	f008 fdd0 	bl	800a00c <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	f040 8097 	bne.w	80015a2 <menu+0x286>
 8001474:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <menu+0x248>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f083 0301 	eor.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 808f 	beq.w	80015a2 <menu+0x286>
		if (menuSayac <= 1) {
 8001484:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <menu+0x24c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d802      	bhi.n	8001492 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800148c:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <menu+0x24c>)
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001492:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <menu+0x24c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <menu+0x24c>)
 800149c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800149e:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <menu+0x24c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b14      	cmp	r3, #20
 80014a4:	d106      	bne.n	80014b4 <menu+0x198>
 80014a6:	4b31      	ldr	r3, [pc, #196]	@ (800156c <menu+0x250>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <menu+0x198>
			menuSayac = 17;
 80014ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <menu+0x24c>)
 80014b0:	2211      	movs	r2, #17
 80014b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <menu+0x24c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d106      	bne.n	80014ca <menu+0x1ae>
 80014bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <menu+0x254>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <menu+0x1ae>
			menuSayac = 7;
 80014c4:	4b28      	ldr	r3, [pc, #160]	@ (8001568 <menu+0x24c>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014ca:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <menu+0x24c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d106      	bne.n	80014e0 <menu+0x1c4>
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <menu+0x254>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <menu+0x1c4>
			menuSayac = 12;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <menu+0x24c>)
 80014dc:	220c      	movs	r2, #12
 80014de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d106      	bne.n	80014f6 <menu+0x1da>
 80014e8:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <menu+0x254>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d102      	bne.n	80014f6 <menu+0x1da>
			menuSayac = 8;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <menu+0x24c>)
 80014f2:	2208      	movs	r2, #8
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <menu+0x24c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d10a      	bne.n	8001514 <menu+0x1f8>
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <menu+0x258>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d003      	beq.n	800150e <menu+0x1f2>
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <menu+0x258>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d102      	bne.n	8001514 <menu+0x1f8>
			menuSayac = 9;
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <menu+0x24c>)
 8001510:	2209      	movs	r2, #9
 8001512:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <menu+0x24c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d10a      	bne.n	8001532 <menu+0x216>
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <menu+0x25c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <menu+0x210>
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <menu+0x25c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d102      	bne.n	8001532 <menu+0x216>
			menuSayac = 11;
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <menu+0x24c>)
 800152e:	220b      	movs	r2, #11
 8001530:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <menu+0x24c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d106      	bne.n	8001548 <menu+0x22c>
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <menu+0x260>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <menu+0x22c>
			menuSayac = 14;
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <menu+0x24c>)
 8001544:	220e      	movs	r2, #14
 8001546:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <menu+0x24c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b19      	cmp	r3, #25
 800154e:	d11b      	bne.n	8001588 <menu+0x26c>
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <menu+0x250>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d117      	bne.n	8001588 <menu+0x26c>
			menuSayac = 23;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <menu+0x24c>)
 800155a:	2217      	movs	r2, #23
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e013      	b.n	8001588 <menu+0x26c>
 8001560:	40010800 	.word	0x40010800
 8001564:	200010f7 	.word	0x200010f7
 8001568:	200010c8 	.word	0x200010c8
 800156c:	200010d7 	.word	0x200010d7
 8001570:	200010d0 	.word	0x200010d0
 8001574:	200010d1 	.word	0x200010d1
 8001578:	200010d2 	.word	0x200010d2
 800157c:	200010d3 	.word	0x200010d3
 8001580:	200010e7 	.word	0x200010e7
 8001584:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001588:	4bb0      	ldr	r3, [pc, #704]	@ (800184c <menu+0x530>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b22      	cmp	r3, #34	@ 0x22
 800158e:	d106      	bne.n	800159e <menu+0x282>
 8001590:	4baf      	ldr	r3, [pc, #700]	@ (8001850 <menu+0x534>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <menu+0x282>
			menuSayac = 32;
 8001598:	4bac      	ldr	r3, [pc, #688]	@ (800184c <menu+0x530>)
 800159a:	2220      	movs	r2, #32
 800159c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800159e:	f002 fbfb 	bl	8003d98 <bekle>
	}

	if (menuSayac == 0) {
 80015a2:	4baa      	ldr	r3, [pc, #680]	@ (800184c <menu+0x530>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80015aa:	4aaa      	ldr	r2, [pc, #680]	@ (8001854 <menu+0x538>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	2001      	movs	r0, #1
 80015b0:	f007 fa02 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80015b4:	4aa8      	ldr	r2, [pc, #672]	@ (8001858 <menu+0x53c>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	2002      	movs	r0, #2
 80015ba:	f007 f9fd 	bl	80089b8 <lcd_print>
	}

	if (menuSayac == 1) {
 80015be:	4ba3      	ldr	r3, [pc, #652]	@ (800184c <menu+0x530>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	f040 81f4 	bne.w	80019b0 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 80015c8:	4aa4      	ldr	r2, [pc, #656]	@ (800185c <menu+0x540>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	2001      	movs	r0, #1
 80015ce:	f007 f9f3 	bl	80089b8 <lcd_print>

		if(hataGostermeSirasi == 0) {
 80015d2:	4ba3      	ldr	r3, [pc, #652]	@ (8001860 <menu+0x544>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 80015da:	4aa2      	ldr	r2, [pc, #648]	@ (8001864 <menu+0x548>)
 80015dc:	2101      	movs	r1, #1
 80015de:	2002      	movs	r0, #2
 80015e0:	f007 f9ea 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "   ");
 80015e4:	4aa0      	ldr	r2, [pc, #640]	@ (8001868 <menu+0x54c>)
 80015e6:	210f      	movs	r1, #15
 80015e8:	2002      	movs	r0, #2
 80015ea:	f007 f9e5 	bl	80089b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80015ee:	4b9f      	ldr	r3, [pc, #636]	@ (800186c <menu+0x550>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	220a      	movs	r2, #10
 80015f4:	499e      	ldr	r1, [pc, #632]	@ (8001870 <menu+0x554>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00b fd34 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 80015fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001870 <menu+0x554>)
 80015fe:	210e      	movs	r1, #14
 8001600:	2002      	movs	r0, #2
 8001602:	f007 f9d9 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001606:	4b96      	ldr	r3, [pc, #600]	@ (8001860 <menu+0x544>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d115      	bne.n	800163a <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800160e:	4a99      	ldr	r2, [pc, #612]	@ (8001874 <menu+0x558>)
 8001610:	2101      	movs	r1, #1
 8001612:	2002      	movs	r0, #2
 8001614:	f007 f9d0 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001618:	4a97      	ldr	r2, [pc, #604]	@ (8001878 <menu+0x55c>)
 800161a:	210f      	movs	r1, #15
 800161c:	2002      	movs	r0, #2
 800161e:	f007 f9cb 	bl	80089b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001622:	4b96      	ldr	r3, [pc, #600]	@ (800187c <menu+0x560>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	220a      	movs	r2, #10
 8001628:	4991      	ldr	r1, [pc, #580]	@ (8001870 <menu+0x554>)
 800162a:	4618      	mov	r0, r3
 800162c:	f00b fd1a 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8001630:	4a8f      	ldr	r2, [pc, #572]	@ (8001870 <menu+0x554>)
 8001632:	210e      	movs	r1, #14
 8001634:	2002      	movs	r0, #2
 8001636:	f007 f9bf 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800163a:	4b89      	ldr	r3, [pc, #548]	@ (8001860 <menu+0x544>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d115      	bne.n	800166e <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001642:	4a8f      	ldr	r2, [pc, #572]	@ (8001880 <menu+0x564>)
 8001644:	2101      	movs	r1, #1
 8001646:	2002      	movs	r0, #2
 8001648:	f007 f9b6 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 800164c:	4a8a      	ldr	r2, [pc, #552]	@ (8001878 <menu+0x55c>)
 800164e:	210f      	movs	r1, #15
 8001650:	2002      	movs	r0, #2
 8001652:	f007 f9b1 	bl	80089b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001656:	4b8b      	ldr	r3, [pc, #556]	@ (8001884 <menu+0x568>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	220a      	movs	r2, #10
 800165c:	4984      	ldr	r1, [pc, #528]	@ (8001870 <menu+0x554>)
 800165e:	4618      	mov	r0, r3
 8001660:	f00b fd00 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8001664:	4a82      	ldr	r2, [pc, #520]	@ (8001870 <menu+0x554>)
 8001666:	210e      	movs	r1, #14
 8001668:	2002      	movs	r0, #2
 800166a:	f007 f9a5 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800166e:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <menu+0x544>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d115      	bne.n	80016a2 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001676:	4a84      	ldr	r2, [pc, #528]	@ (8001888 <menu+0x56c>)
 8001678:	2101      	movs	r1, #1
 800167a:	2002      	movs	r0, #2
 800167c:	f007 f99c 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001680:	4a7d      	ldr	r2, [pc, #500]	@ (8001878 <menu+0x55c>)
 8001682:	210f      	movs	r1, #15
 8001684:	2002      	movs	r0, #2
 8001686:	f007 f997 	bl	80089b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800168a:	4b80      	ldr	r3, [pc, #512]	@ (800188c <menu+0x570>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	220a      	movs	r2, #10
 8001690:	4977      	ldr	r1, [pc, #476]	@ (8001870 <menu+0x554>)
 8001692:	4618      	mov	r0, r3
 8001694:	f00b fce6 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8001698:	4a75      	ldr	r2, [pc, #468]	@ (8001870 <menu+0x554>)
 800169a:	210e      	movs	r1, #14
 800169c:	2002      	movs	r0, #2
 800169e:	f007 f98b 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001860 <menu+0x544>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d115      	bne.n	80016d6 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80016aa:	4a79      	ldr	r2, [pc, #484]	@ (8001890 <menu+0x574>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	2002      	movs	r0, #2
 80016b0:	f007 f982 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 80016b4:	4a70      	ldr	r2, [pc, #448]	@ (8001878 <menu+0x55c>)
 80016b6:	210f      	movs	r1, #15
 80016b8:	2002      	movs	r0, #2
 80016ba:	f007 f97d 	bl	80089b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016be:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <menu+0x578>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	220a      	movs	r2, #10
 80016c4:	496a      	ldr	r1, [pc, #424]	@ (8001870 <menu+0x554>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00b fccc 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 80016cc:	4a68      	ldr	r2, [pc, #416]	@ (8001870 <menu+0x554>)
 80016ce:	210e      	movs	r1, #14
 80016d0:	2002      	movs	r0, #2
 80016d2:	f007 f971 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80016d6:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <menu+0x544>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d115      	bne.n	800170a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 80016de:	4a6e      	ldr	r2, [pc, #440]	@ (8001898 <menu+0x57c>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	2002      	movs	r0, #2
 80016e4:	f007 f968 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 80016e8:	4a63      	ldr	r2, [pc, #396]	@ (8001878 <menu+0x55c>)
 80016ea:	210f      	movs	r1, #15
 80016ec:	2002      	movs	r0, #2
 80016ee:	f007 f963 	bl	80089b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <menu+0x580>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	220a      	movs	r2, #10
 80016f8:	495d      	ldr	r1, [pc, #372]	@ (8001870 <menu+0x554>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00b fcb2 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8001700:	4a5b      	ldr	r2, [pc, #364]	@ (8001870 <menu+0x554>)
 8001702:	210e      	movs	r1, #14
 8001704:	2002      	movs	r0, #2
 8001706:	f007 f957 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800170a:	4b55      	ldr	r3, [pc, #340]	@ (8001860 <menu+0x544>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b06      	cmp	r3, #6
 8001710:	d115      	bne.n	800173e <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001712:	4a63      	ldr	r2, [pc, #396]	@ (80018a0 <menu+0x584>)
 8001714:	2101      	movs	r1, #1
 8001716:	2002      	movs	r0, #2
 8001718:	f007 f94e 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 800171c:	4a56      	ldr	r2, [pc, #344]	@ (8001878 <menu+0x55c>)
 800171e:	210f      	movs	r1, #15
 8001720:	2002      	movs	r0, #2
 8001722:	f007 f949 	bl	80089b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001726:	4b5f      	ldr	r3, [pc, #380]	@ (80018a4 <menu+0x588>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	220a      	movs	r2, #10
 800172c:	4950      	ldr	r1, [pc, #320]	@ (8001870 <menu+0x554>)
 800172e:	4618      	mov	r0, r3
 8001730:	f00b fc98 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8001734:	4a4e      	ldr	r2, [pc, #312]	@ (8001870 <menu+0x554>)
 8001736:	210e      	movs	r1, #14
 8001738:	2002      	movs	r0, #2
 800173a:	f007 f93d 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800173e:	4b48      	ldr	r3, [pc, #288]	@ (8001860 <menu+0x544>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b07      	cmp	r3, #7
 8001744:	d115      	bne.n	8001772 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001746:	4a58      	ldr	r2, [pc, #352]	@ (80018a8 <menu+0x58c>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f007 f934 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001750:	4a49      	ldr	r2, [pc, #292]	@ (8001878 <menu+0x55c>)
 8001752:	210f      	movs	r1, #15
 8001754:	2002      	movs	r0, #2
 8001756:	f007 f92f 	bl	80089b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800175a:	4b54      	ldr	r3, [pc, #336]	@ (80018ac <menu+0x590>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	220a      	movs	r2, #10
 8001760:	4943      	ldr	r1, [pc, #268]	@ (8001870 <menu+0x554>)
 8001762:	4618      	mov	r0, r3
 8001764:	f00b fc7e 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8001768:	4a41      	ldr	r2, [pc, #260]	@ (8001870 <menu+0x554>)
 800176a:	210e      	movs	r1, #14
 800176c:	2002      	movs	r0, #2
 800176e:	f007 f923 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001772:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <menu+0x544>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d115      	bne.n	80017a6 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 800177a:	4a4d      	ldr	r2, [pc, #308]	@ (80018b0 <menu+0x594>)
 800177c:	2101      	movs	r1, #1
 800177e:	2002      	movs	r0, #2
 8001780:	f007 f91a 	bl	80089b8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001784:	4a3c      	ldr	r2, [pc, #240]	@ (8001878 <menu+0x55c>)
 8001786:	210f      	movs	r1, #15
 8001788:	2002      	movs	r0, #2
 800178a:	f007 f915 	bl	80089b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800178e:	4b49      	ldr	r3, [pc, #292]	@ (80018b4 <menu+0x598>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	220a      	movs	r2, #10
 8001794:	4936      	ldr	r1, [pc, #216]	@ (8001870 <menu+0x554>)
 8001796:	4618      	mov	r0, r3
 8001798:	f00b fc64 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 800179c:	4a34      	ldr	r2, [pc, #208]	@ (8001870 <menu+0x554>)
 800179e:	210e      	movs	r1, #14
 80017a0:	2002      	movs	r0, #2
 80017a2:	f007 f909 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <menu+0x544>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d115      	bne.n	80017da <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80017ae:	4a42      	ldr	r2, [pc, #264]	@ (80018b8 <menu+0x59c>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	2002      	movs	r0, #2
 80017b4:	f007 f900 	bl	80089b8 <lcd_print>
			lcd_print(2, 16, " ");
 80017b8:	4a40      	ldr	r2, [pc, #256]	@ (80018bc <menu+0x5a0>)
 80017ba:	2110      	movs	r1, #16
 80017bc:	2002      	movs	r0, #2
 80017be:	f007 f8fb 	bl	80089b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017c2:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <menu+0x5a4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	220a      	movs	r2, #10
 80017c8:	4929      	ldr	r1, [pc, #164]	@ (8001870 <menu+0x554>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00b fc4a 	bl	800d064 <itoa>
			lcd_print(2, 15, snum);
 80017d0:	4a27      	ldr	r2, [pc, #156]	@ (8001870 <menu+0x554>)
 80017d2:	210f      	movs	r1, #15
 80017d4:	2002      	movs	r0, #2
 80017d6:	f007 f8ef 	bl	80089b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <menu+0x544>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d104      	bne.n	80017ec <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 80017e2:	4a38      	ldr	r2, [pc, #224]	@ (80018c4 <menu+0x5a8>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	2002      	movs	r0, #2
 80017e8:	f007 f8e6 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017ec:	2102      	movs	r1, #2
 80017ee:	4836      	ldr	r0, [pc, #216]	@ (80018c8 <menu+0x5ac>)
 80017f0:	f008 fc0c 	bl	800a00c <HAL_GPIO_ReadPin>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d119      	bne.n	800182e <menu+0x512>
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <menu+0x5b0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d012      	beq.n	800182e <menu+0x512>
 8001808:	4b31      	ldr	r3, [pc, #196]	@ (80018d0 <menu+0x5b4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10e      	bne.n	800182e <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <menu+0x544>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <menu+0x544>)
 800181a:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <menu+0x544>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b0a      	cmp	r3, #10
 8001822:	d902      	bls.n	800182a <menu+0x50e>
				hataGostermeSirasi = 0;
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <menu+0x544>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800182a:	f002 fab5 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800182e:	2104      	movs	r1, #4
 8001830:	4825      	ldr	r0, [pc, #148]	@ (80018c8 <menu+0x5ac>)
 8001832:	f008 fbeb 	bl	800a00c <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d15e      	bne.n	80018fa <menu+0x5de>
 800183c:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <menu+0x5b0>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f083 0301 	eor.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d057      	beq.n	80018fa <menu+0x5de>
 800184a:	e043      	b.n	80018d4 <menu+0x5b8>
 800184c:	200010c8 	.word	0x200010c8
 8001850:	200010e7 	.word	0x200010e7
 8001854:	20001228 	.word	0x20001228
 8001858:	2000123c 	.word	0x2000123c
 800185c:	20001250 	.word	0x20001250
 8001860:	200010ca 	.word	0x200010ca
 8001864:	20001264 	.word	0x20001264
 8001868:	0800dd70 	.word	0x0800dd70
 800186c:	200010ea 	.word	0x200010ea
 8001870:	20001060 	.word	0x20001060
 8001874:	20001278 	.word	0x20001278
 8001878:	0800dd74 	.word	0x0800dd74
 800187c:	200010eb 	.word	0x200010eb
 8001880:	2000128c 	.word	0x2000128c
 8001884:	200010ec 	.word	0x200010ec
 8001888:	200012a0 	.word	0x200012a0
 800188c:	200010ed 	.word	0x200010ed
 8001890:	200012b4 	.word	0x200012b4
 8001894:	200010ee 	.word	0x200010ee
 8001898:	200012c8 	.word	0x200012c8
 800189c:	200010ef 	.word	0x200010ef
 80018a0:	200012dc 	.word	0x200012dc
 80018a4:	200010f0 	.word	0x200010f0
 80018a8:	200012f0 	.word	0x200012f0
 80018ac:	200010f1 	.word	0x200010f1
 80018b0:	20001304 	.word	0x20001304
 80018b4:	200010f2 	.word	0x200010f2
 80018b8:	20001318 	.word	0x20001318
 80018bc:	0800dd78 	.word	0x0800dd78
 80018c0:	200010f3 	.word	0x200010f3
 80018c4:	2000132c 	.word	0x2000132c
 80018c8:	40010800 	.word	0x40010800
 80018cc:	200010f7 	.word	0x200010f7
 80018d0:	200010d7 	.word	0x200010d7
 80018d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001b00 <menu+0x7e4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10e      	bne.n	80018fa <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018dc:	4b89      	ldr	r3, [pc, #548]	@ (8001b04 <menu+0x7e8>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b87      	ldr	r3, [pc, #540]	@ (8001b04 <menu+0x7e8>)
 80018e6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018e8:	4b86      	ldr	r3, [pc, #536]	@ (8001b04 <menu+0x7e8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b0b      	cmp	r3, #11
 80018ee:	d902      	bls.n	80018f6 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 80018f0:	4b84      	ldr	r3, [pc, #528]	@ (8001b04 <menu+0x7e8>)
 80018f2:	220a      	movs	r2, #10
 80018f4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018f6:	f002 fa4f 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018fa:	2108      	movs	r1, #8
 80018fc:	4882      	ldr	r0, [pc, #520]	@ (8001b08 <menu+0x7ec>)
 80018fe:	f008 fb85 	bl	800a00c <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	2b01      	cmp	r3, #1
 8001906:	d153      	bne.n	80019b0 <menu+0x694>
 8001908:	4b80      	ldr	r3, [pc, #512]	@ (8001b0c <menu+0x7f0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04c      	beq.n	80019b0 <menu+0x694>
 8001916:	4b7b      	ldr	r3, [pc, #492]	@ (8001b04 <menu+0x7e8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d148      	bne.n	80019b0 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 800191e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b10 <menu+0x7f4>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	4b7b      	ldr	r3, [pc, #492]	@ (8001b14 <menu+0x7f8>)
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800192c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b18 <menu+0x7fc>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	4b78      	ldr	r3, [pc, #480]	@ (8001b14 <menu+0x7f8>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800193a:	4b78      	ldr	r3, [pc, #480]	@ (8001b1c <menu+0x800>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	4b74      	ldr	r3, [pc, #464]	@ (8001b14 <menu+0x7f8>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <menu+0x804>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	4b71      	ldr	r3, [pc, #452]	@ (8001b14 <menu+0x7f8>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001956:	4b73      	ldr	r3, [pc, #460]	@ (8001b24 <menu+0x808>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b14 <menu+0x7f8>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001964:	4b70      	ldr	r3, [pc, #448]	@ (8001b28 <menu+0x80c>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <menu+0x7f8>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001972:	4b6e      	ldr	r3, [pc, #440]	@ (8001b2c <menu+0x810>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	4b66      	ldr	r3, [pc, #408]	@ (8001b14 <menu+0x7f8>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001980:	4b6b      	ldr	r3, [pc, #428]	@ (8001b30 <menu+0x814>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	4b63      	ldr	r3, [pc, #396]	@ (8001b14 <menu+0x7f8>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800198e:	4b69      	ldr	r3, [pc, #420]	@ (8001b34 <menu+0x818>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <menu+0x7f8>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 800199c:	4b66      	ldr	r3, [pc, #408]	@ (8001b38 <menu+0x81c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b14 <menu+0x7f8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80019aa:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <menu+0x820>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019b0:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <menu+0x824>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 808e 	bne.w	8001ad6 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80019ba:	4a62      	ldr	r2, [pc, #392]	@ (8001b44 <menu+0x828>)
 80019bc:	2101      	movs	r1, #1
 80019be:	2001      	movs	r0, #1
 80019c0:	f006 fffa 	bl	80089b8 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b00 <menu+0x7e4>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d003      	beq.n	80019d4 <menu+0x6b8>
 80019cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001b00 <menu+0x7e4>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d104      	bne.n	80019de <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 80019d4:	4a5c      	ldr	r2, [pc, #368]	@ (8001b48 <menu+0x82c>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f006 ffed 	bl	80089b8 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80019de:	4b5b      	ldr	r3, [pc, #364]	@ (8001b4c <menu+0x830>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d108      	bne.n	80019f8 <menu+0x6dc>
 80019e6:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <menu+0x7e4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 80019ee:	4a58      	ldr	r2, [pc, #352]	@ (8001b50 <menu+0x834>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	2002      	movs	r0, #2
 80019f4:	f006 ffe0 	bl	80089b8 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80019f8:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <menu+0x830>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <menu+0x6f6>
 8001a00:	4b3f      	ldr	r3, [pc, #252]	@ (8001b00 <menu+0x7e4>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d104      	bne.n	8001a12 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001a08:	4a52      	ldr	r2, [pc, #328]	@ (8001b54 <menu+0x838>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f006 ffd3 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a12:	2102      	movs	r1, #2
 8001a14:	483c      	ldr	r0, [pc, #240]	@ (8001b08 <menu+0x7ec>)
 8001a16:	f008 faf9 	bl	800a00c <HAL_GPIO_ReadPin>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d119      	bne.n	8001a54 <menu+0x738>
 8001a20:	4b3a      	ldr	r3, [pc, #232]	@ (8001b0c <menu+0x7f0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d012      	beq.n	8001a54 <menu+0x738>
 8001a2e:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <menu+0x7e4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001a36:	4b45      	ldr	r3, [pc, #276]	@ (8001b4c <menu+0x830>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b43      	ldr	r3, [pc, #268]	@ (8001b4c <menu+0x830>)
 8001a40:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a42:	4b42      	ldr	r3, [pc, #264]	@ (8001b4c <menu+0x830>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d902      	bls.n	8001a50 <menu+0x734>
				calismaSekli = 0;
 8001a4a:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <menu+0x830>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a50:	f002 f9a2 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a54:	2104      	movs	r1, #4
 8001a56:	482c      	ldr	r0, [pc, #176]	@ (8001b08 <menu+0x7ec>)
 8001a58:	f008 fad8 	bl	800a00c <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d119      	bne.n	8001a96 <menu+0x77a>
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <menu+0x7f0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f083 0301 	eor.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d012      	beq.n	8001a96 <menu+0x77a>
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <menu+0x7e4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10e      	bne.n	8001a96 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001a78:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <menu+0x830>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b32      	ldr	r3, [pc, #200]	@ (8001b4c <menu+0x830>)
 8001a82:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <menu+0x830>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <menu+0x776>
	    		calismaSekli = 1;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <menu+0x830>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a92:	f002 f981 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a96:	2108      	movs	r1, #8
 8001a98:	481b      	ldr	r0, [pc, #108]	@ (8001b08 <menu+0x7ec>)
 8001a9a:	f008 fab7 	bl	800a00c <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d118      	bne.n	8001ad6 <menu+0x7ba>
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <menu+0x7f0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	f083 0301 	eor.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d011      	beq.n	8001ad6 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <menu+0x830>)
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <menu+0x7f8>)
 8001ab8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <menu+0x830>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <menu+0x7b4>
				altLimit = 1;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <menu+0x83c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <menu+0x83c>)
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <menu+0x7f8>)
 8001ace:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <menu+0x820>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <menu+0x824>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	f040 809c 	bne.w	8001c18 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <menu+0x840>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f006 ff67 	bl	80089b8 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <menu+0x844>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d13a      	bne.n	8001b68 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001af2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b64 <menu+0x848>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	2002      	movs	r0, #2
 8001af8:	f006 ff5e 	bl	80089b8 <lcd_print>
 8001afc:	e03d      	b.n	8001b7a <menu+0x85e>
 8001afe:	bf00      	nop
 8001b00:	200010d7 	.word	0x200010d7
 8001b04:	200010ca 	.word	0x200010ca
 8001b08:	40010800 	.word	0x40010800
 8001b0c:	200010f7 	.word	0x200010f7
 8001b10:	200010ea 	.word	0x200010ea
 8001b14:	20000ff0 	.word	0x20000ff0
 8001b18:	200010eb 	.word	0x200010eb
 8001b1c:	200010ec 	.word	0x200010ec
 8001b20:	200010ed 	.word	0x200010ed
 8001b24:	200010ee 	.word	0x200010ee
 8001b28:	200010ef 	.word	0x200010ef
 8001b2c:	200010f0 	.word	0x200010f0
 8001b30:	200010f1 	.word	0x200010f1
 8001b34:	200010f2 	.word	0x200010f2
 8001b38:	200010f3 	.word	0x200010f3
 8001b3c:	200010f4 	.word	0x200010f4
 8001b40:	200010c8 	.word	0x200010c8
 8001b44:	20001340 	.word	0x20001340
 8001b48:	20001354 	.word	0x20001354
 8001b4c:	200010c9 	.word	0x200010c9
 8001b50:	20001368 	.word	0x20001368
 8001b54:	2000137c 	.word	0x2000137c
 8001b58:	200010ce 	.word	0x200010ce
 8001b5c:	20001390 	.word	0x20001390
 8001b60:	200010cc 	.word	0x200010cc
 8001b64:	200013a4 	.word	0x200013a4
		} else if(emniyetCercevesi == 1) {
 8001b68:	4b6b      	ldr	r3, [pc, #428]	@ (8001d18 <menu+0x9fc>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d104      	bne.n	8001b7a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001b70:	4a6a      	ldr	r2, [pc, #424]	@ (8001d1c <menu+0xa00>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	2002      	movs	r0, #2
 8001b76:	f006 ff1f 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4868      	ldr	r0, [pc, #416]	@ (8001d20 <menu+0xa04>)
 8001b7e:	f008 fa45 	bl	800a00c <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <menu+0x898>
 8001b88:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <menu+0xa08>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00e      	beq.n	8001bb4 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b96:	4b60      	ldr	r3, [pc, #384]	@ (8001d18 <menu+0x9fc>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001d18 <menu+0x9fc>)
 8001ba0:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <menu+0x9fc>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d902      	bls.n	8001bb0 <menu+0x894>
				emniyetCercevesi = 0;
 8001baa:	4b5b      	ldr	r3, [pc, #364]	@ (8001d18 <menu+0x9fc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bb0:	f002 f8f2 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	485a      	ldr	r0, [pc, #360]	@ (8001d20 <menu+0xa04>)
 8001bb8:	f008 fa28 	bl	800a00c <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d115      	bne.n	8001bee <menu+0x8d2>
 8001bc2:	4b58      	ldr	r3, [pc, #352]	@ (8001d24 <menu+0xa08>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001bd0:	4b51      	ldr	r3, [pc, #324]	@ (8001d18 <menu+0x9fc>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d18 <menu+0x9fc>)
 8001bda:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d18 <menu+0x9fc>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001be4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d18 <menu+0x9fc>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bea:	f002 f8d5 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001bee:	2108      	movs	r1, #8
 8001bf0:	484b      	ldr	r0, [pc, #300]	@ (8001d20 <menu+0xa04>)
 8001bf2:	f008 fa0b 	bl	800a00c <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10d      	bne.n	8001c18 <menu+0x8fc>
 8001bfc:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <menu+0xa08>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001c0a:	4b43      	ldr	r3, [pc, #268]	@ (8001d18 <menu+0x9fc>)
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	4b46      	ldr	r3, [pc, #280]	@ (8001d28 <menu+0xa0c>)
 8001c10:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c12:	4b46      	ldr	r3, [pc, #280]	@ (8001d2c <menu+0xa10>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c18:	4b45      	ldr	r3, [pc, #276]	@ (8001d30 <menu+0xa14>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d166      	bne.n	8001cee <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001c20:	4a44      	ldr	r2, [pc, #272]	@ (8001d34 <menu+0xa18>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2001      	movs	r0, #1
 8001c26:	f006 fec7 	bl	80089b8 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001c2a:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <menu+0xa1c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001c32:	4a42      	ldr	r2, [pc, #264]	@ (8001d3c <menu+0xa20>)
 8001c34:	2101      	movs	r1, #1
 8001c36:	2002      	movs	r0, #2
 8001c38:	f006 febe 	bl	80089b8 <lcd_print>
 8001c3c:	e008      	b.n	8001c50 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d38 <menu+0xa1c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d104      	bne.n	8001c50 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001c46:	4a3e      	ldr	r2, [pc, #248]	@ (8001d40 <menu+0xa24>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f006 feb4 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c50:	2102      	movs	r1, #2
 8001c52:	4833      	ldr	r0, [pc, #204]	@ (8001d20 <menu+0xa04>)
 8001c54:	f008 f9da 	bl	800a00c <HAL_GPIO_ReadPin>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d115      	bne.n	8001c8a <menu+0x96e>
 8001c5e:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <menu+0xa08>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00e      	beq.n	8001c8a <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	@ (8001d38 <menu+0xa1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <menu+0xa1c>)
 8001c76:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001c78:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <menu+0xa1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d902      	bls.n	8001c86 <menu+0x96a>
				yavaslamaLimit = 0;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <menu+0xa1c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c86:	f002 f887 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	4824      	ldr	r0, [pc, #144]	@ (8001d20 <menu+0xa04>)
 8001c8e:	f008 f9bd 	bl	800a00c <HAL_GPIO_ReadPin>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d115      	bne.n	8001cc4 <menu+0x9a8>
 8001c98:	4b22      	ldr	r3, [pc, #136]	@ (8001d24 <menu+0xa08>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00e      	beq.n	8001cc4 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ca6:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <menu+0xa1c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <menu+0xa1c>)
 8001cb0:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001cb2:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <menu+0xa1c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001cba:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <menu+0xa1c>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cc0:	f002 f86a 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc4:	2108      	movs	r1, #8
 8001cc6:	4816      	ldr	r0, [pc, #88]	@ (8001d20 <menu+0xa04>)
 8001cc8:	f008 f9a0 	bl	800a00c <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <menu+0x9d2>
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <menu+0xa08>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <menu+0xa1c>)
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <menu+0xa0c>)
 8001ce6:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <menu+0xa10>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <menu+0xa14>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	f040 80aa 	bne.w	8001e4c <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001cf8:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <menu+0xa28>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f006 fe5b 	bl	80089b8 <lcd_print>

		if(altLimit == 0) {
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <menu+0xa2c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d120      	bne.n	8001d4c <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <menu+0xa20>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f006 fe52 	bl	80089b8 <lcd_print>
 8001d14:	e023      	b.n	8001d5e <menu+0xa42>
 8001d16:	bf00      	nop
 8001d18:	200010cc 	.word	0x200010cc
 8001d1c:	200000f0 	.word	0x200000f0
 8001d20:	40010800 	.word	0x40010800
 8001d24:	200010f7 	.word	0x200010f7
 8001d28:	20000ff0 	.word	0x20000ff0
 8001d2c:	200010f4 	.word	0x200010f4
 8001d30:	200010c8 	.word	0x200010c8
 8001d34:	200013cc 	.word	0x200013cc
 8001d38:	200010cd 	.word	0x200010cd
 8001d3c:	200013a4 	.word	0x200013a4
 8001d40:	200013b8 	.word	0x200013b8
 8001d44:	200013e0 	.word	0x200013e0
 8001d48:	200010ce 	.word	0x200010ce
		} else if(altLimit == 1) {
 8001d4c:	4b89      	ldr	r3, [pc, #548]	@ (8001f74 <menu+0xc58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d104      	bne.n	8001d5e <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001d54:	4a88      	ldr	r2, [pc, #544]	@ (8001f78 <menu+0xc5c>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f006 fe2d 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4886      	ldr	r0, [pc, #536]	@ (8001f7c <menu+0xc60>)
 8001d62:	f008 f953 	bl	800a00c <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d119      	bne.n	8001da0 <menu+0xa84>
 8001d6c:	4b84      	ldr	r3, [pc, #528]	@ (8001f80 <menu+0xc64>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d012      	beq.n	8001da0 <menu+0xa84>
 8001d7a:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <menu+0xc68>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10e      	bne.n	8001da0 <menu+0xa84>
			altLimit = altLimit + 1;
 8001d82:	4b7c      	ldr	r3, [pc, #496]	@ (8001f74 <menu+0xc58>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f74 <menu+0xc58>)
 8001d8c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001d8e:	4b79      	ldr	r3, [pc, #484]	@ (8001f74 <menu+0xc58>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d902      	bls.n	8001d9c <menu+0xa80>
				altLimit = 0;
 8001d96:	4b77      	ldr	r3, [pc, #476]	@ (8001f74 <menu+0xc58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d9c:	f001 fffc 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001da0:	2104      	movs	r1, #4
 8001da2:	4876      	ldr	r0, [pc, #472]	@ (8001f7c <menu+0xc60>)
 8001da4:	f008 f932 	bl	800a00c <HAL_GPIO_ReadPin>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d119      	bne.n	8001de2 <menu+0xac6>
 8001dae:	4b74      	ldr	r3, [pc, #464]	@ (8001f80 <menu+0xc64>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f083 0301 	eor.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d012      	beq.n	8001de2 <menu+0xac6>
 8001dbc:	4b71      	ldr	r3, [pc, #452]	@ (8001f84 <menu+0xc68>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10e      	bne.n	8001de2 <menu+0xac6>
			altLimit = altLimit - 1;
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <menu+0xc58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b69      	ldr	r3, [pc, #420]	@ (8001f74 <menu+0xc58>)
 8001dce:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001dd0:	4b68      	ldr	r3, [pc, #416]	@ (8001f74 <menu+0xc58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <menu+0xac2>
		   		altLimit = 1;
 8001dd8:	4b66      	ldr	r3, [pc, #408]	@ (8001f74 <menu+0xc58>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dde:	f001 ffdb 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001de2:	2108      	movs	r1, #8
 8001de4:	4865      	ldr	r0, [pc, #404]	@ (8001f7c <menu+0xc60>)
 8001de6:	f008 f911 	bl	800a00c <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d12d      	bne.n	8001e4c <menu+0xb30>
 8001df0:	4b63      	ldr	r3, [pc, #396]	@ (8001f80 <menu+0xc64>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	f083 0301 	eor.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d026      	beq.n	8001e4c <menu+0xb30>
			eepromData[5] = altLimit;
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f74 <menu+0xc58>)
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b61      	ldr	r3, [pc, #388]	@ (8001f88 <menu+0xc6c>)
 8001e04:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e06:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <menu+0xc58>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d110      	bne.n	8001e30 <menu+0xb14>
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f8c <menu+0xc70>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <menu+0xb02>
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <menu+0xc70>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d108      	bne.n	8001e30 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f8c <menu+0xc70>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e24:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <menu+0xc70>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b57      	ldr	r3, [pc, #348]	@ (8001f88 <menu+0xc6c>)
 8001e2a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001e2e:	e00a      	b.n	8001e46 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001e30:	4b50      	ldr	r3, [pc, #320]	@ (8001f74 <menu+0xc58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001e38:	4b55      	ldr	r3, [pc, #340]	@ (8001f90 <menu+0xc74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001e3e:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <menu+0xc74>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <menu+0xc6c>)
 8001e44:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001e46:	4b53      	ldr	r3, [pc, #332]	@ (8001f94 <menu+0xc78>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001e4c:	4b52      	ldr	r3, [pc, #328]	@ (8001f98 <menu+0xc7c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d166      	bne.n	8001f22 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001e54:	4a51      	ldr	r2, [pc, #324]	@ (8001f9c <menu+0xc80>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f006 fdad 	bl	80089b8 <lcd_print>

		if(basincSalteri == 0) {
 8001e5e:	4b50      	ldr	r3, [pc, #320]	@ (8001fa0 <menu+0xc84>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001e66:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <menu+0xc88>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f006 fda4 	bl	80089b8 <lcd_print>
 8001e70:	e008      	b.n	8001e84 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001e72:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa0 <menu+0xc84>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d104      	bne.n	8001e84 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f78 <menu+0xc5c>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f006 fd9a 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e84:	2102      	movs	r1, #2
 8001e86:	483d      	ldr	r0, [pc, #244]	@ (8001f7c <menu+0xc60>)
 8001e88:	f008 f8c0 	bl	800a00c <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d115      	bne.n	8001ebe <menu+0xba2>
 8001e92:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <menu+0xc64>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <menu+0xc84>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <menu+0xc84>)
 8001eaa:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001eac:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa0 <menu+0xc84>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d902      	bls.n	8001eba <menu+0xb9e>
				basincSalteri = 0;
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <menu+0xc84>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eba:	f001 ff6d 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	482e      	ldr	r0, [pc, #184]	@ (8001f7c <menu+0xc60>)
 8001ec2:	f008 f8a3 	bl	800a00c <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d115      	bne.n	8001ef8 <menu+0xbdc>
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <menu+0xc64>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <menu+0xc84>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <menu+0xc84>)
 8001ee4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <menu+0xc84>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <menu+0xbd8>
		   		basincSalteri = 1;
 8001eee:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <menu+0xc84>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ef4:	f001 ff50 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef8:	2108      	movs	r1, #8
 8001efa:	4820      	ldr	r0, [pc, #128]	@ (8001f7c <menu+0xc60>)
 8001efc:	f008 f886 	bl	800a00c <HAL_GPIO_ReadPin>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10d      	bne.n	8001f22 <menu+0xc06>
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <menu+0xc64>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001f14:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <menu+0xc84>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <menu+0xc6c>)
 8001f1a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <menu+0xc78>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001f22:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <menu+0xc7c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b07      	cmp	r3, #7
 8001f28:	f040 80a9 	bne.w	800207e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa8 <menu+0xc8c>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2001      	movs	r0, #1
 8001f32:	f006 fd41 	bl	80089b8 <lcd_print>

		if(kapiSecimleri == 0) {
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <menu+0xc90>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001f3e:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <menu+0xc88>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	2002      	movs	r0, #2
 8001f44:	f006 fd38 	bl	80089b8 <lcd_print>
 8001f48:	e03f      	b.n	8001fca <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001f4a:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <menu+0xc90>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <menu+0xc94>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	2002      	movs	r0, #2
 8001f58:	f006 fd2e 	bl	80089b8 <lcd_print>
 8001f5c:	e035      	b.n	8001fca <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001f5e:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <menu+0xc90>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d128      	bne.n	8001fb8 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001f66:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <menu+0xc98>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	f006 fd24 	bl	80089b8 <lcd_print>
 8001f70:	e02b      	b.n	8001fca <menu+0xcae>
 8001f72:	bf00      	nop
 8001f74:	200010ce 	.word	0x200010ce
 8001f78:	200013b8 	.word	0x200013b8
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	200010f7 	.word	0x200010f7
 8001f84:	200010c9 	.word	0x200010c9
 8001f88:	20000ff0 	.word	0x20000ff0
 8001f8c:	200010d5 	.word	0x200010d5
 8001f90:	200010db 	.word	0x200010db
 8001f94:	200010f4 	.word	0x200010f4
 8001f98:	200010c8 	.word	0x200010c8
 8001f9c:	200013f4 	.word	0x200013f4
 8001fa0:	200010cf 	.word	0x200010cf
 8001fa4:	200013a4 	.word	0x200013a4
 8001fa8:	20001408 	.word	0x20001408
 8001fac:	200010d0 	.word	0x200010d0
 8001fb0:	2000141c 	.word	0x2000141c
 8001fb4:	20001430 	.word	0x20001430
		} else if(kapiSecimleri == 3) {
 8001fb8:	4b76      	ldr	r3, [pc, #472]	@ (8002194 <menu+0xe78>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d104      	bne.n	8001fca <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001fc0:	4a75      	ldr	r2, [pc, #468]	@ (8002198 <menu+0xe7c>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f006 fcf7 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4873      	ldr	r0, [pc, #460]	@ (800219c <menu+0xe80>)
 8001fce:	f008 f81d 	bl	800a00c <HAL_GPIO_ReadPin>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d115      	bne.n	8002004 <menu+0xce8>
 8001fd8:	4b71      	ldr	r3, [pc, #452]	@ (80021a0 <menu+0xe84>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	f083 0301 	eor.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001fe6:	4b6b      	ldr	r3, [pc, #428]	@ (8002194 <menu+0xe78>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b69      	ldr	r3, [pc, #420]	@ (8002194 <menu+0xe78>)
 8001ff0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001ff2:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <menu+0xe78>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d902      	bls.n	8002000 <menu+0xce4>
				kapiSecimleri = 0;
 8001ffa:	4b66      	ldr	r3, [pc, #408]	@ (8002194 <menu+0xe78>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002000:	f001 feca 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002004:	2104      	movs	r1, #4
 8002006:	4865      	ldr	r0, [pc, #404]	@ (800219c <menu+0xe80>)
 8002008:	f008 f800 	bl	800a00c <HAL_GPIO_ReadPin>
 800200c:	4603      	mov	r3, r0
 800200e:	2b01      	cmp	r3, #1
 8002010:	d115      	bne.n	800203e <menu+0xd22>
 8002012:	4b63      	ldr	r3, [pc, #396]	@ (80021a0 <menu+0xe84>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8002020:	4b5c      	ldr	r3, [pc, #368]	@ (8002194 <menu+0xe78>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b5a      	ldr	r3, [pc, #360]	@ (8002194 <menu+0xe78>)
 800202a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800202c:	4b59      	ldr	r3, [pc, #356]	@ (8002194 <menu+0xe78>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d902      	bls.n	800203a <menu+0xd1e>
		   		kapiSecimleri = 3;
 8002034:	4b57      	ldr	r3, [pc, #348]	@ (8002194 <menu+0xe78>)
 8002036:	2203      	movs	r2, #3
 8002038:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800203a:	f001 fead 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800203e:	2108      	movs	r1, #8
 8002040:	4856      	ldr	r0, [pc, #344]	@ (800219c <menu+0xe80>)
 8002042:	f007 ffe3 	bl	800a00c <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d118      	bne.n	800207e <menu+0xd62>
 800204c:	4b54      	ldr	r3, [pc, #336]	@ (80021a0 <menu+0xe84>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d011      	beq.n	800207e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 800205a:	4b4e      	ldr	r3, [pc, #312]	@ (8002194 <menu+0xe78>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4b51      	ldr	r3, [pc, #324]	@ (80021a4 <menu+0xe88>)
 8002060:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002062:	4b4c      	ldr	r3, [pc, #304]	@ (8002194 <menu+0xe78>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <menu+0xd5c>
				altLimit = 1;
 800206a:	4b4f      	ldr	r3, [pc, #316]	@ (80021a8 <menu+0xe8c>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002070:	4b4d      	ldr	r3, [pc, #308]	@ (80021a8 <menu+0xe8c>)
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <menu+0xe88>)
 8002076:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002078:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <menu+0xe90>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800207e:	4b4c      	ldr	r3, [pc, #304]	@ (80021b0 <menu+0xe94>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d167      	bne.n	8002156 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002086:	4a4b      	ldr	r2, [pc, #300]	@ (80021b4 <menu+0xe98>)
 8002088:	2101      	movs	r1, #1
 800208a:	2001      	movs	r0, #1
 800208c:	f006 fc94 	bl	80089b8 <lcd_print>

		if(kapiAcTipi == 0) {
 8002090:	4b49      	ldr	r3, [pc, #292]	@ (80021b8 <menu+0xe9c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002098:	4a48      	ldr	r2, [pc, #288]	@ (80021bc <menu+0xea0>)
 800209a:	2101      	movs	r1, #1
 800209c:	2002      	movs	r0, #2
 800209e:	f006 fc8b 	bl	80089b8 <lcd_print>
 80020a2:	e008      	b.n	80020b6 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 80020a4:	4b44      	ldr	r3, [pc, #272]	@ (80021b8 <menu+0xe9c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d104      	bne.n	80020b6 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 80020ac:	4a44      	ldr	r2, [pc, #272]	@ (80021c0 <menu+0xea4>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	2002      	movs	r0, #2
 80020b2:	f006 fc81 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020b6:	2102      	movs	r1, #2
 80020b8:	4838      	ldr	r0, [pc, #224]	@ (800219c <menu+0xe80>)
 80020ba:	f007 ffa7 	bl	800a00c <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d115      	bne.n	80020f0 <menu+0xdd4>
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <menu+0xe84>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00e      	beq.n	80020f0 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 80020d2:	4b39      	ldr	r3, [pc, #228]	@ (80021b8 <menu+0xe9c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <menu+0xe9c>)
 80020dc:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80020de:	4b36      	ldr	r3, [pc, #216]	@ (80021b8 <menu+0xe9c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d902      	bls.n	80020ec <menu+0xdd0>
				kapiAcTipi = 0;
 80020e6:	4b34      	ldr	r3, [pc, #208]	@ (80021b8 <menu+0xe9c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020ec:	f001 fe54 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f0:	2104      	movs	r1, #4
 80020f2:	482a      	ldr	r0, [pc, #168]	@ (800219c <menu+0xe80>)
 80020f4:	f007 ff8a 	bl	800a00c <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d115      	bne.n	800212a <menu+0xe0e>
 80020fe:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <menu+0xe84>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00e      	beq.n	800212a <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 800210c:	4b2a      	ldr	r3, [pc, #168]	@ (80021b8 <menu+0xe9c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <menu+0xe9c>)
 8002116:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <menu+0xe9c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8002120:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <menu+0xe9c>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002126:	f001 fe37 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800212a:	2108      	movs	r1, #8
 800212c:	481b      	ldr	r0, [pc, #108]	@ (800219c <menu+0xe80>)
 800212e:	f007 ff6d 	bl	800a00c <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10e      	bne.n	8002156 <menu+0xe3a>
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <menu+0xe84>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f083 0301 	eor.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <menu+0xe9c>)
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <menu+0xe88>)
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002150:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <menu+0xe90>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002156:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <menu+0xe94>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b09      	cmp	r3, #9
 800215c:	f040 8092 	bne.w	8002284 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002160:	4a18      	ldr	r2, [pc, #96]	@ (80021c4 <menu+0xea8>)
 8002162:	2101      	movs	r1, #1
 8002164:	2001      	movs	r0, #1
 8002166:	f006 fc27 	bl	80089b8 <lcd_print>

		if(kapi1Tip == 0) {
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <menu+0xeac>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002172:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <menu+0xeb0>)
 8002174:	2101      	movs	r1, #1
 8002176:	2002      	movs	r0, #2
 8002178:	f006 fc1e 	bl	80089b8 <lcd_print>
 800217c:	e033      	b.n	80021e6 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <menu+0xeac>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d126      	bne.n	80021d4 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <menu+0xeb4>)
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f006 fc14 	bl	80089b8 <lcd_print>
 8002190:	e029      	b.n	80021e6 <menu+0xeca>
 8002192:	bf00      	nop
 8002194:	200010d0 	.word	0x200010d0
 8002198:	20001444 	.word	0x20001444
 800219c:	40010800 	.word	0x40010800
 80021a0:	200010f7 	.word	0x200010f7
 80021a4:	20000ff0 	.word	0x20000ff0
 80021a8:	200010ce 	.word	0x200010ce
 80021ac:	200010f4 	.word	0x200010f4
 80021b0:	200010c8 	.word	0x200010c8
 80021b4:	20001458 	.word	0x20001458
 80021b8:	200010d4 	.word	0x200010d4
 80021bc:	2000146c 	.word	0x2000146c
 80021c0:	20001480 	.word	0x20001480
 80021c4:	20001494 	.word	0x20001494
 80021c8:	200010d1 	.word	0x200010d1
 80021cc:	20000104 	.word	0x20000104
 80021d0:	200014a8 	.word	0x200014a8
		} else if(kapi1Tip == 2) {
 80021d4:	4b73      	ldr	r3, [pc, #460]	@ (80023a4 <menu+0x1088>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d104      	bne.n	80021e6 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 80021dc:	4a72      	ldr	r2, [pc, #456]	@ (80023a8 <menu+0x108c>)
 80021de:	2101      	movs	r1, #1
 80021e0:	2002      	movs	r0, #2
 80021e2:	f006 fbe9 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e6:	2102      	movs	r1, #2
 80021e8:	4870      	ldr	r0, [pc, #448]	@ (80023ac <menu+0x1090>)
 80021ea:	f007 ff0f 	bl	800a00c <HAL_GPIO_ReadPin>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d115      	bne.n	8002220 <menu+0xf04>
 80021f4:	4b6e      	ldr	r3, [pc, #440]	@ (80023b0 <menu+0x1094>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00e      	beq.n	8002220 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002202:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <menu+0x1088>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b66      	ldr	r3, [pc, #408]	@ (80023a4 <menu+0x1088>)
 800220c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800220e:	4b65      	ldr	r3, [pc, #404]	@ (80023a4 <menu+0x1088>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <menu+0xf00>
				kapi1Tip = 0;
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <menu+0x1088>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800221c:	f001 fdbc 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002220:	2104      	movs	r1, #4
 8002222:	4862      	ldr	r0, [pc, #392]	@ (80023ac <menu+0x1090>)
 8002224:	f007 fef2 	bl	800a00c <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d115      	bne.n	800225a <menu+0xf3e>
 800222e:	4b60      	ldr	r3, [pc, #384]	@ (80023b0 <menu+0x1094>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 800223c:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <menu+0x1088>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b57      	ldr	r3, [pc, #348]	@ (80023a4 <menu+0x1088>)
 8002246:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002248:	4b56      	ldr	r3, [pc, #344]	@ (80023a4 <menu+0x1088>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d902      	bls.n	8002256 <menu+0xf3a>
		   		kapi1Tip = 2;
 8002250:	4b54      	ldr	r3, [pc, #336]	@ (80023a4 <menu+0x1088>)
 8002252:	2202      	movs	r2, #2
 8002254:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002256:	f001 fd9f 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800225a:	2108      	movs	r1, #8
 800225c:	4853      	ldr	r0, [pc, #332]	@ (80023ac <menu+0x1090>)
 800225e:	f007 fed5 	bl	800a00c <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10d      	bne.n	8002284 <menu+0xf68>
 8002268:	4b51      	ldr	r3, [pc, #324]	@ (80023b0 <menu+0x1094>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002276:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <menu+0x1088>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b4e      	ldr	r3, [pc, #312]	@ (80023b4 <menu+0x1098>)
 800227c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800227e:	4b4e      	ldr	r3, [pc, #312]	@ (80023b8 <menu+0x109c>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002284:	4b4d      	ldr	r3, [pc, #308]	@ (80023bc <menu+0x10a0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b0a      	cmp	r3, #10
 800228a:	d16c      	bne.n	8002366 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800228c:	4a4c      	ldr	r2, [pc, #304]	@ (80023c0 <menu+0x10a4>)
 800228e:	2101      	movs	r1, #1
 8002290:	2001      	movs	r0, #1
 8002292:	f006 fb91 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002296:	4a4b      	ldr	r2, [pc, #300]	@ (80023c4 <menu+0x10a8>)
 8002298:	2101      	movs	r1, #1
 800229a:	2002      	movs	r0, #2
 800229c:	f006 fb8c 	bl	80089b8 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80022a0:	4b49      	ldr	r3, [pc, #292]	@ (80023c8 <menu+0x10ac>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	220a      	movs	r2, #10
 80022a6:	4949      	ldr	r1, [pc, #292]	@ (80023cc <menu+0x10b0>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00a fedb 	bl	800d064 <itoa>
		lcd_print(2,16,snum);
 80022ae:	4a47      	ldr	r2, [pc, #284]	@ (80023cc <menu+0x10b0>)
 80022b0:	2110      	movs	r1, #16
 80022b2:	2002      	movs	r0, #2
 80022b4:	f006 fb80 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80022b8:	2102      	movs	r1, #2
 80022ba:	483c      	ldr	r0, [pc, #240]	@ (80023ac <menu+0x1090>)
 80022bc:	f007 fea6 	bl	800a00c <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <menu+0xfde>
 80022c6:	4b3a      	ldr	r3, [pc, #232]	@ (80023b0 <menu+0x1094>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <menu+0xfde>
 80022d4:	4b33      	ldr	r3, [pc, #204]	@ (80023a4 <menu+0x1088>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10e      	bne.n	80022fa <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 80022dc:	4b3a      	ldr	r3, [pc, #232]	@ (80023c8 <menu+0x10ac>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <menu+0x10ac>)
 80022e6:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80022e8:	4b37      	ldr	r3, [pc, #220]	@ (80023c8 <menu+0x10ac>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d902      	bls.n	80022f6 <menu+0xfda>
				kapi1AcSure = 0;
 80022f0:	4b35      	ldr	r3, [pc, #212]	@ (80023c8 <menu+0x10ac>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022f6:	f001 fd4f 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80022fa:	2104      	movs	r1, #4
 80022fc:	482b      	ldr	r0, [pc, #172]	@ (80023ac <menu+0x1090>)
 80022fe:	f007 fe85 	bl	800a00c <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d119      	bne.n	800233c <menu+0x1020>
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <menu+0x1094>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <menu+0x1020>
 8002316:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <menu+0x1088>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10e      	bne.n	800233c <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800231e:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <menu+0x10ac>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <menu+0x10ac>)
 8002328:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800232a:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <menu+0x10ac>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <menu+0x101c>
		   		kapi1AcSure = 5;
 8002332:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <menu+0x10ac>)
 8002334:	2205      	movs	r2, #5
 8002336:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002338:	f001 fd2e 	bl	8003d98 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800233c:	2108      	movs	r1, #8
 800233e:	481b      	ldr	r0, [pc, #108]	@ (80023ac <menu+0x1090>)
 8002340:	f007 fe64 	bl	800a00c <HAL_GPIO_ReadPin>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10d      	bne.n	8002366 <menu+0x104a>
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <menu+0x1094>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <menu+0x10ac>)
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <menu+0x1098>)
 800235e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <menu+0x109c>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <menu+0x10a0>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b0b      	cmp	r3, #11
 800236c:	f040 8090 	bne.w	8002490 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002370:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <menu+0x10b4>)
 8002372:	2101      	movs	r1, #1
 8002374:	2001      	movs	r0, #1
 8002376:	f006 fb1f 	bl	80089b8 <lcd_print>

		if(kapi2Tip == 0) {
 800237a:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <menu+0x10b8>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002382:	4a15      	ldr	r2, [pc, #84]	@ (80023d8 <menu+0x10bc>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f006 fb16 	bl	80089b8 <lcd_print>
 800238c:	e031      	b.n	80023f2 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <menu+0x10b8>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d124      	bne.n	80023e0 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002396:	4a11      	ldr	r2, [pc, #68]	@ (80023dc <menu+0x10c0>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f006 fb0c 	bl	80089b8 <lcd_print>
 80023a0:	e027      	b.n	80023f2 <menu+0x10d6>
 80023a2:	bf00      	nop
 80023a4:	200010d1 	.word	0x200010d1
 80023a8:	20000118 	.word	0x20000118
 80023ac:	40010800 	.word	0x40010800
 80023b0:	200010f7 	.word	0x200010f7
 80023b4:	20000ff0 	.word	0x20000ff0
 80023b8:	200010f4 	.word	0x200010f4
 80023bc:	200010c8 	.word	0x200010c8
 80023c0:	200014bc 	.word	0x200014bc
 80023c4:	200014d0 	.word	0x200014d0
 80023c8:	200010e1 	.word	0x200010e1
 80023cc:	20001060 	.word	0x20001060
 80023d0:	200014e4 	.word	0x200014e4
 80023d4:	200010d2 	.word	0x200010d2
 80023d8:	20000104 	.word	0x20000104
 80023dc:	200014a8 	.word	0x200014a8
		} else if(kapi2Tip == 2) {
 80023e0:	4b73      	ldr	r3, [pc, #460]	@ (80025b0 <menu+0x1294>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d104      	bne.n	80023f2 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 80023e8:	4a72      	ldr	r2, [pc, #456]	@ (80025b4 <menu+0x1298>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	2002      	movs	r0, #2
 80023ee:	f006 fae3 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f2:	2102      	movs	r1, #2
 80023f4:	4870      	ldr	r0, [pc, #448]	@ (80025b8 <menu+0x129c>)
 80023f6:	f007 fe09 	bl	800a00c <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d115      	bne.n	800242c <menu+0x1110>
 8002400:	4b6e      	ldr	r3, [pc, #440]	@ (80025bc <menu+0x12a0>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800240e:	4b68      	ldr	r3, [pc, #416]	@ (80025b0 <menu+0x1294>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b66      	ldr	r3, [pc, #408]	@ (80025b0 <menu+0x1294>)
 8002418:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800241a:	4b65      	ldr	r3, [pc, #404]	@ (80025b0 <menu+0x1294>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <menu+0x110c>
				kapi2Tip = 0;
 8002422:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <menu+0x1294>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002428:	f001 fcb6 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800242c:	2104      	movs	r1, #4
 800242e:	4862      	ldr	r0, [pc, #392]	@ (80025b8 <menu+0x129c>)
 8002430:	f007 fdec 	bl	800a00c <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d115      	bne.n	8002466 <menu+0x114a>
 800243a:	4b60      	ldr	r3, [pc, #384]	@ (80025bc <menu+0x12a0>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002448:	4b59      	ldr	r3, [pc, #356]	@ (80025b0 <menu+0x1294>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b57      	ldr	r3, [pc, #348]	@ (80025b0 <menu+0x1294>)
 8002452:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002454:	4b56      	ldr	r3, [pc, #344]	@ (80025b0 <menu+0x1294>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d902      	bls.n	8002462 <menu+0x1146>
		   		kapi2Tip = 2;
 800245c:	4b54      	ldr	r3, [pc, #336]	@ (80025b0 <menu+0x1294>)
 800245e:	2202      	movs	r2, #2
 8002460:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002462:	f001 fc99 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002466:	2108      	movs	r1, #8
 8002468:	4853      	ldr	r0, [pc, #332]	@ (80025b8 <menu+0x129c>)
 800246a:	f007 fdcf 	bl	800a00c <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10d      	bne.n	8002490 <menu+0x1174>
 8002474:	4b51      	ldr	r3, [pc, #324]	@ (80025bc <menu+0x12a0>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002482:	4b4b      	ldr	r3, [pc, #300]	@ (80025b0 <menu+0x1294>)
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	4b4e      	ldr	r3, [pc, #312]	@ (80025c0 <menu+0x12a4>)
 8002488:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800248a:	4b4e      	ldr	r3, [pc, #312]	@ (80025c4 <menu+0x12a8>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002490:	4b4d      	ldr	r3, [pc, #308]	@ (80025c8 <menu+0x12ac>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d16c      	bne.n	8002572 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002498:	4a4c      	ldr	r2, [pc, #304]	@ (80025cc <menu+0x12b0>)
 800249a:	2101      	movs	r1, #1
 800249c:	2001      	movs	r0, #1
 800249e:	f006 fa8b 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024a2:	4a4b      	ldr	r2, [pc, #300]	@ (80025d0 <menu+0x12b4>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f006 fa86 	bl	80089b8 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80024ac:	4b49      	ldr	r3, [pc, #292]	@ (80025d4 <menu+0x12b8>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	220a      	movs	r2, #10
 80024b2:	4949      	ldr	r1, [pc, #292]	@ (80025d8 <menu+0x12bc>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f00a fdd5 	bl	800d064 <itoa>
		lcd_print(2,16,snum);
 80024ba:	4a47      	ldr	r2, [pc, #284]	@ (80025d8 <menu+0x12bc>)
 80024bc:	2110      	movs	r1, #16
 80024be:	2002      	movs	r0, #2
 80024c0:	f006 fa7a 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024c4:	2102      	movs	r1, #2
 80024c6:	483c      	ldr	r0, [pc, #240]	@ (80025b8 <menu+0x129c>)
 80024c8:	f007 fda0 	bl	800a00c <HAL_GPIO_ReadPin>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d119      	bne.n	8002506 <menu+0x11ea>
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <menu+0x12a0>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <menu+0x11ea>
 80024e0:	4b33      	ldr	r3, [pc, #204]	@ (80025b0 <menu+0x1294>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10e      	bne.n	8002506 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 80024e8:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <menu+0x12b8>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <menu+0x12b8>)
 80024f2:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80024f4:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <menu+0x12b8>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d902      	bls.n	8002502 <menu+0x11e6>
				kapi2AcSure = 0;
 80024fc:	4b35      	ldr	r3, [pc, #212]	@ (80025d4 <menu+0x12b8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002502:	f001 fc49 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002506:	2104      	movs	r1, #4
 8002508:	482b      	ldr	r0, [pc, #172]	@ (80025b8 <menu+0x129c>)
 800250a:	f007 fd7f 	bl	800a00c <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d119      	bne.n	8002548 <menu+0x122c>
 8002514:	4b29      	ldr	r3, [pc, #164]	@ (80025bc <menu+0x12a0>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f083 0301 	eor.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d012      	beq.n	8002548 <menu+0x122c>
 8002522:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <menu+0x1294>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <menu+0x12b8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b28      	ldr	r3, [pc, #160]	@ (80025d4 <menu+0x12b8>)
 8002534:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002536:	4b27      	ldr	r3, [pc, #156]	@ (80025d4 <menu+0x12b8>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <menu+0x1228>
		   		kapi2AcSure = 5;
 800253e:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <menu+0x12b8>)
 8002540:	2205      	movs	r2, #5
 8002542:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002544:	f001 fc28 	bl	8003d98 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002548:	2108      	movs	r1, #8
 800254a:	481b      	ldr	r0, [pc, #108]	@ (80025b8 <menu+0x129c>)
 800254c:	f007 fd5e 	bl	800a00c <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10d      	bne.n	8002572 <menu+0x1256>
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <menu+0x12a0>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <menu+0x12b8>)
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <menu+0x12a4>)
 800256a:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <menu+0x12a8>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <menu+0x12ac>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b0d      	cmp	r3, #13
 8002578:	f040 8090 	bne.w	800269c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800257c:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <menu+0x12c0>)
 800257e:	2101      	movs	r1, #1
 8002580:	2001      	movs	r0, #1
 8002582:	f006 fa19 	bl	80089b8 <lcd_print>

		if(kapitablaTip == 0) {
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <menu+0x12c4>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800258e:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <menu+0x12c8>)
 8002590:	2101      	movs	r1, #1
 8002592:	2002      	movs	r0, #2
 8002594:	f006 fa10 	bl	80089b8 <lcd_print>
 8002598:	e031      	b.n	80025fe <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800259a:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <menu+0x12c4>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d124      	bne.n	80025ec <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <menu+0x12cc>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	2002      	movs	r0, #2
 80025a8:	f006 fa06 	bl	80089b8 <lcd_print>
 80025ac:	e027      	b.n	80025fe <menu+0x12e2>
 80025ae:	bf00      	nop
 80025b0:	200010d2 	.word	0x200010d2
 80025b4:	20000118 	.word	0x20000118
 80025b8:	40010800 	.word	0x40010800
 80025bc:	200010f7 	.word	0x200010f7
 80025c0:	20000ff0 	.word	0x20000ff0
 80025c4:	200010f4 	.word	0x200010f4
 80025c8:	200010c8 	.word	0x200010c8
 80025cc:	200014f8 	.word	0x200014f8
 80025d0:	200014d0 	.word	0x200014d0
 80025d4:	200010e2 	.word	0x200010e2
 80025d8:	20001060 	.word	0x20001060
 80025dc:	2000150c 	.word	0x2000150c
 80025e0:	200010d3 	.word	0x200010d3
 80025e4:	20000104 	.word	0x20000104
 80025e8:	200014a8 	.word	0x200014a8
		} else if(kapitablaTip == 2) {
 80025ec:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <menu+0x13d0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d104      	bne.n	80025fe <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 80025f4:	4a3e      	ldr	r2, [pc, #248]	@ (80026f0 <menu+0x13d4>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	2002      	movs	r0, #2
 80025fa:	f006 f9dd 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2102      	movs	r1, #2
 8002600:	483c      	ldr	r0, [pc, #240]	@ (80026f4 <menu+0x13d8>)
 8002602:	f007 fd03 	bl	800a00c <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d115      	bne.n	8002638 <menu+0x131c>
 800260c:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <menu+0x13dc>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 800261a:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <menu+0x13d0>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <menu+0x13d0>)
 8002624:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002626:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <menu+0x13d0>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <menu+0x1318>
				kapitablaTip = 0;
 800262e:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <menu+0x13d0>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002634:	f001 fbb0 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002638:	2104      	movs	r1, #4
 800263a:	482e      	ldr	r0, [pc, #184]	@ (80026f4 <menu+0x13d8>)
 800263c:	f007 fce6 	bl	800a00c <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d115      	bne.n	8002672 <menu+0x1356>
 8002646:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <menu+0x13dc>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <menu+0x13d0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <menu+0x13d0>)
 800265e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002660:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <menu+0x13d0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d902      	bls.n	800266e <menu+0x1352>
		   		kapitablaTip = 2;
 8002668:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <menu+0x13d0>)
 800266a:	2202      	movs	r2, #2
 800266c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800266e:	f001 fb93 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002672:	2108      	movs	r1, #8
 8002674:	481f      	ldr	r0, [pc, #124]	@ (80026f4 <menu+0x13d8>)
 8002676:	f007 fcc9 	bl	800a00c <HAL_GPIO_ReadPin>
 800267a:	4603      	mov	r3, r0
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10d      	bne.n	800269c <menu+0x1380>
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <menu+0x13dc>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <menu+0x13d0>)
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <menu+0x13e0>)
 8002694:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002696:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <menu+0x13e4>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <menu+0x13e8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b0e      	cmp	r3, #14
 80026a2:	f040 80a3 	bne.w	80027ec <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80026a6:	4a18      	ldr	r2, [pc, #96]	@ (8002708 <menu+0x13ec>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	2001      	movs	r0, #1
 80026ac:	f006 f984 	bl	80089b8 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80026b0:	4b16      	ldr	r3, [pc, #88]	@ (800270c <menu+0x13f0>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80026b8:	4a15      	ldr	r2, [pc, #84]	@ (8002710 <menu+0x13f4>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	2002      	movs	r0, #2
 80026be:	f006 f97b 	bl	80089b8 <lcd_print>
 80026c2:	e034      	b.n	800272e <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <menu+0x13f0>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <menu+0x13f8>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	2002      	movs	r0, #2
 80026d2:	f006 f971 	bl	80089b8 <lcd_print>
 80026d6:	e02a      	b.n	800272e <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <menu+0x13f0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d11d      	bne.n	800271c <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 80026e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <menu+0x13fc>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	2002      	movs	r0, #2
 80026e6:	f006 f967 	bl	80089b8 <lcd_print>
 80026ea:	e020      	b.n	800272e <menu+0x1412>
 80026ec:	200010d3 	.word	0x200010d3
 80026f0:	20000118 	.word	0x20000118
 80026f4:	40010800 	.word	0x40010800
 80026f8:	200010f7 	.word	0x200010f7
 80026fc:	20000ff0 	.word	0x20000ff0
 8002700:	200010f4 	.word	0x200010f4
 8002704:	200010c8 	.word	0x200010c8
 8002708:	20001520 	.word	0x20001520
 800270c:	200010d5 	.word	0x200010d5
 8002710:	20001534 	.word	0x20001534
 8002714:	20001548 	.word	0x20001548
 8002718:	2000155c 	.word	0x2000155c
		} else if(kapiTablaAcKonum == 3) {
 800271c:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <menu+0x15dc>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d104      	bne.n	800272e <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002724:	4a75      	ldr	r2, [pc, #468]	@ (80028fc <menu+0x15e0>)
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f006 f945 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800272e:	2102      	movs	r1, #2
 8002730:	4873      	ldr	r0, [pc, #460]	@ (8002900 <menu+0x15e4>)
 8002732:	f007 fc6b 	bl	800a00c <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d115      	bne.n	8002768 <menu+0x144c>
 800273c:	4b71      	ldr	r3, [pc, #452]	@ (8002904 <menu+0x15e8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00e      	beq.n	8002768 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800274a:	4b6b      	ldr	r3, [pc, #428]	@ (80028f8 <menu+0x15dc>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b69      	ldr	r3, [pc, #420]	@ (80028f8 <menu+0x15dc>)
 8002754:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002756:	4b68      	ldr	r3, [pc, #416]	@ (80028f8 <menu+0x15dc>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d902      	bls.n	8002764 <menu+0x1448>
				kapiTablaAcKonum = 0;
 800275e:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <menu+0x15dc>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002764:	f001 fb18 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002768:	2104      	movs	r1, #4
 800276a:	4865      	ldr	r0, [pc, #404]	@ (8002900 <menu+0x15e4>)
 800276c:	f007 fc4e 	bl	800a00c <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d115      	bne.n	80027a2 <menu+0x1486>
 8002776:	4b63      	ldr	r3, [pc, #396]	@ (8002904 <menu+0x15e8>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002784:	4b5c      	ldr	r3, [pc, #368]	@ (80028f8 <menu+0x15dc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	3b01      	subs	r3, #1
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <menu+0x15dc>)
 800278e:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002790:	4b59      	ldr	r3, [pc, #356]	@ (80028f8 <menu+0x15dc>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d902      	bls.n	800279e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002798:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <menu+0x15dc>)
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800279e:	f001 fafb 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a2:	2108      	movs	r1, #8
 80027a4:	4856      	ldr	r0, [pc, #344]	@ (8002900 <menu+0x15e4>)
 80027a6:	f007 fc31 	bl	800a00c <HAL_GPIO_ReadPin>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d11d      	bne.n	80027ec <menu+0x14d0>
 80027b0:	4b54      	ldr	r3, [pc, #336]	@ (8002904 <menu+0x15e8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	f083 0301 	eor.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80027be:	4b4e      	ldr	r3, [pc, #312]	@ (80028f8 <menu+0x15dc>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <menu+0x15ec>)
 80027c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80027c8:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <menu+0x15dc>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <menu+0x14bc>
 80027d0:	4b49      	ldr	r3, [pc, #292]	@ (80028f8 <menu+0x15dc>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d106      	bne.n	80027e6 <menu+0x14ca>
				altLimit = 1;
 80027d8:	4b4c      	ldr	r3, [pc, #304]	@ (800290c <menu+0x15f0>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80027de:	4b4b      	ldr	r3, [pc, #300]	@ (800290c <menu+0x15f0>)
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <menu+0x15ec>)
 80027e4:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80027e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <menu+0x15f4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80027ec:	4b49      	ldr	r3, [pc, #292]	@ (8002914 <menu+0x15f8>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d16c      	bne.n	80028ce <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 80027f4:	4a48      	ldr	r2, [pc, #288]	@ (8002918 <menu+0x15fc>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2001      	movs	r0, #1
 80027fa:	f006 f8dd 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80027fe:	4a47      	ldr	r2, [pc, #284]	@ (800291c <menu+0x1600>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f006 f8d8 	bl	80089b8 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002808:	4b45      	ldr	r3, [pc, #276]	@ (8002920 <menu+0x1604>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	220a      	movs	r2, #10
 800280e:	4945      	ldr	r1, [pc, #276]	@ (8002924 <menu+0x1608>)
 8002810:	4618      	mov	r0, r3
 8002812:	f00a fc27 	bl	800d064 <itoa>
		lcd_print(2,16,snum);
 8002816:	4a43      	ldr	r2, [pc, #268]	@ (8002924 <menu+0x1608>)
 8002818:	2110      	movs	r1, #16
 800281a:	2002      	movs	r0, #2
 800281c:	f006 f8cc 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002820:	2102      	movs	r1, #2
 8002822:	4837      	ldr	r0, [pc, #220]	@ (8002900 <menu+0x15e4>)
 8002824:	f007 fbf2 	bl	800a00c <HAL_GPIO_ReadPin>
 8002828:	4603      	mov	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d119      	bne.n	8002862 <menu+0x1546>
 800282e:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <menu+0x15e8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <menu+0x1546>
 800283c:	4b3a      	ldr	r3, [pc, #232]	@ (8002928 <menu+0x160c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10e      	bne.n	8002862 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <menu+0x1604>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <menu+0x1604>)
 800284e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002850:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <menu+0x1604>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d902      	bls.n	800285e <menu+0x1542>
				kapiTablaAcSure = 0;
 8002858:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <menu+0x1604>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800285e:	f001 fa9b 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002862:	2104      	movs	r1, #4
 8002864:	4826      	ldr	r0, [pc, #152]	@ (8002900 <menu+0x15e4>)
 8002866:	f007 fbd1 	bl	800a00c <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	d119      	bne.n	80028a4 <menu+0x1588>
 8002870:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <menu+0x15e8>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	f083 0301 	eor.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <menu+0x1588>
 800287e:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <menu+0x160c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10e      	bne.n	80028a4 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002886:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <menu+0x1604>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <menu+0x1604>)
 8002890:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002892:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <menu+0x1604>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 800289a:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <menu+0x1604>)
 800289c:	2205      	movs	r2, #5
 800289e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80028a0:	f001 fa7a 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a4:	2108      	movs	r1, #8
 80028a6:	4816      	ldr	r0, [pc, #88]	@ (8002900 <menu+0x15e4>)
 80028a8:	f007 fbb0 	bl	800a00c <HAL_GPIO_ReadPin>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <menu+0x15b2>
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <menu+0x15e8>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <menu+0x1604>)
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <menu+0x15ec>)
 80028c6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <menu+0x15f4>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <menu+0x15f8>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	f040 8086 	bne.w	80029e4 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80028d8:	4a14      	ldr	r2, [pc, #80]	@ (800292c <menu+0x1610>)
 80028da:	2101      	movs	r1, #1
 80028dc:	2001      	movs	r0, #1
 80028de:	f006 f86b 	bl	80089b8 <lcd_print>

		if(yukariYavasLimit == 0) {
 80028e2:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <menu+0x1614>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d124      	bne.n	8002934 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 80028ea:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <menu+0x15e0>)
 80028ec:	2101      	movs	r1, #1
 80028ee:	2002      	movs	r0, #2
 80028f0:	f006 f862 	bl	80089b8 <lcd_print>
 80028f4:	e027      	b.n	8002946 <menu+0x162a>
 80028f6:	bf00      	nop
 80028f8:	200010d5 	.word	0x200010d5
 80028fc:	200013a4 	.word	0x200013a4
 8002900:	40010800 	.word	0x40010800
 8002904:	200010f7 	.word	0x200010f7
 8002908:	20000ff0 	.word	0x20000ff0
 800290c:	200010ce 	.word	0x200010ce
 8002910:	200010f4 	.word	0x200010f4
 8002914:	200010c8 	.word	0x200010c8
 8002918:	20001570 	.word	0x20001570
 800291c:	200014d0 	.word	0x200014d0
 8002920:	200010e3 	.word	0x200010e3
 8002924:	20001060 	.word	0x20001060
 8002928:	200010d3 	.word	0x200010d3
 800292c:	20001584 	.word	0x20001584
 8002930:	200010d6 	.word	0x200010d6
		} else if(yukariYavasLimit == 1) {
 8002934:	4b84      	ldr	r3, [pc, #528]	@ (8002b48 <menu+0x182c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d104      	bne.n	8002946 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 800293c:	4a83      	ldr	r2, [pc, #524]	@ (8002b4c <menu+0x1830>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f006 f839 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002946:	2102      	movs	r1, #2
 8002948:	4881      	ldr	r0, [pc, #516]	@ (8002b50 <menu+0x1834>)
 800294a:	f007 fb5f 	bl	800a00c <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d115      	bne.n	8002980 <menu+0x1664>
 8002954:	4b7f      	ldr	r3, [pc, #508]	@ (8002b54 <menu+0x1838>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00e      	beq.n	8002980 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002962:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <menu+0x182c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b77      	ldr	r3, [pc, #476]	@ (8002b48 <menu+0x182c>)
 800296c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <menu+0x182c>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d902      	bls.n	800297c <menu+0x1660>
				yukariYavasLimit = 0;
 8002976:	4b74      	ldr	r3, [pc, #464]	@ (8002b48 <menu+0x182c>)
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800297c:	f001 fa0c 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002980:	2104      	movs	r1, #4
 8002982:	4873      	ldr	r0, [pc, #460]	@ (8002b50 <menu+0x1834>)
 8002984:	f007 fb42 	bl	800a00c <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d115      	bne.n	80029ba <menu+0x169e>
 800298e:	4b71      	ldr	r3, [pc, #452]	@ (8002b54 <menu+0x1838>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <menu+0x182c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4b68      	ldr	r3, [pc, #416]	@ (8002b48 <menu+0x182c>)
 80029a6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80029a8:	4b67      	ldr	r3, [pc, #412]	@ (8002b48 <menu+0x182c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <menu+0x169a>
		   		yukariYavasLimit = 1;
 80029b0:	4b65      	ldr	r3, [pc, #404]	@ (8002b48 <menu+0x182c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029b6:	f001 f9ef 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ba:	2108      	movs	r1, #8
 80029bc:	4864      	ldr	r0, [pc, #400]	@ (8002b50 <menu+0x1834>)
 80029be:	f007 fb25 	bl	800a00c <HAL_GPIO_ReadPin>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10d      	bne.n	80029e4 <menu+0x16c8>
 80029c8:	4b62      	ldr	r3, [pc, #392]	@ (8002b54 <menu+0x1838>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 80029d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b48 <menu+0x182c>)
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4b5f      	ldr	r3, [pc, #380]	@ (8002b58 <menu+0x183c>)
 80029dc:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80029de:	4b5f      	ldr	r3, [pc, #380]	@ (8002b5c <menu+0x1840>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80029e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b60 <menu+0x1844>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b11      	cmp	r3, #17
 80029ea:	f040 808b 	bne.w	8002b04 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 80029ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002b64 <menu+0x1848>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	2001      	movs	r0, #1
 80029f4:	f005 ffe0 	bl	80089b8 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 80029f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <menu+0x184c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d105      	bne.n	8002a0c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002a00:	4a5a      	ldr	r2, [pc, #360]	@ (8002b6c <menu+0x1850>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	2002      	movs	r0, #2
 8002a06:	f005 ffd7 	bl	80089b8 <lcd_print>
 8002a0a:	e012      	b.n	8002a32 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002a0c:	4b56      	ldr	r3, [pc, #344]	@ (8002b68 <menu+0x184c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002a14:	4a56      	ldr	r2, [pc, #344]	@ (8002b70 <menu+0x1854>)
 8002a16:	2101      	movs	r1, #1
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f005 ffcd 	bl	80089b8 <lcd_print>
 8002a1e:	e008      	b.n	8002a32 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002a20:	4b51      	ldr	r3, [pc, #324]	@ (8002b68 <menu+0x184c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <menu+0x1858>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f005 ffc3 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a32:	2102      	movs	r1, #2
 8002a34:	4846      	ldr	r0, [pc, #280]	@ (8002b50 <menu+0x1834>)
 8002a36:	f007 fae9 	bl	800a00c <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d115      	bne.n	8002a6c <menu+0x1750>
 8002a40:	4b44      	ldr	r3, [pc, #272]	@ (8002b54 <menu+0x1838>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00e      	beq.n	8002a6c <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002a4e:	4b46      	ldr	r3, [pc, #280]	@ (8002b68 <menu+0x184c>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <menu+0x184c>)
 8002a58:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002a5a:	4b43      	ldr	r3, [pc, #268]	@ (8002b68 <menu+0x184c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002a62:	4b41      	ldr	r3, [pc, #260]	@ (8002b68 <menu+0x184c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a68:	f001 f996 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	4838      	ldr	r0, [pc, #224]	@ (8002b50 <menu+0x1834>)
 8002a70:	f007 facc 	bl	800a00c <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d115      	bne.n	8002aa6 <menu+0x178a>
 8002a7a:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <menu+0x1838>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <menu+0x184c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <menu+0x184c>)
 8002a92:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002a94:	4b34      	ldr	r3, [pc, #208]	@ (8002b68 <menu+0x184c>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d902      	bls.n	8002aa2 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002a9c:	4b32      	ldr	r3, [pc, #200]	@ (8002b68 <menu+0x184c>)
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aa2:	f001 f979 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	4829      	ldr	r0, [pc, #164]	@ (8002b50 <menu+0x1834>)
 8002aaa:	f007 faaf 	bl	800a00c <HAL_GPIO_ReadPin>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d127      	bne.n	8002b04 <menu+0x17e8>
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <menu+0x1838>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002ac2:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <menu+0x184c>)
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <menu+0x183c>)
 8002ac8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002aca:	4b27      	ldr	r3, [pc, #156]	@ (8002b68 <menu+0x184c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <menu+0x17be>
 8002ad2:	4b25      	ldr	r3, [pc, #148]	@ (8002b68 <menu+0x184c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <menu+0x17cc>
				calismaSekli = 0;
 8002ada:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <menu+0x185c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002ae0:	4b25      	ldr	r3, [pc, #148]	@ (8002b78 <menu+0x185c>)
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <menu+0x183c>)
 8002ae6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <menu+0x184c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002af0:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <menu+0x1860>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <menu+0x1860>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <menu+0x183c>)
 8002afc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002afe:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <menu+0x1840>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002b04:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <menu+0x1844>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b12      	cmp	r3, #18
 8002b0a:	f040 8097 	bne.w	8002c3c <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002b0e:	4b16      	ldr	r3, [pc, #88]	@ (8002b68 <menu+0x184c>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d105      	bne.n	8002b22 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002b16:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <menu+0x1864>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f005 ff4c 	bl	80089b8 <lcd_print>
 8002b20:	e008      	b.n	8002b34 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <menu+0x184c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d104      	bne.n	8002b34 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002b2a:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <menu+0x1868>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f005 ff42 	bl	80089b8 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002b34:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <menu+0x186c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d127      	bne.n	8002b8c <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <menu+0x1858>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f005 ff39 	bl	80089b8 <lcd_print>
 8002b46:	e02a      	b.n	8002b9e <menu+0x1882>
 8002b48:	200010d6 	.word	0x200010d6
 8002b4c:	200013b8 	.word	0x200013b8
 8002b50:	40010800 	.word	0x40010800
 8002b54:	200010f7 	.word	0x200010f7
 8002b58:	20000ff0 	.word	0x20000ff0
 8002b5c:	200010f4 	.word	0x200010f4
 8002b60:	200010c8 	.word	0x200010c8
 8002b64:	20001598 	.word	0x20001598
 8002b68:	200010d7 	.word	0x200010d7
 8002b6c:	200015ac 	.word	0x200015ac
 8002b70:	200015c0 	.word	0x200015c0
 8002b74:	200013a4 	.word	0x200013a4
 8002b78:	200010c9 	.word	0x200010c9
 8002b7c:	200010da 	.word	0x200010da
 8002b80:	200015d4 	.word	0x200015d4
 8002b84:	200015e8 	.word	0x200015e8
 8002b88:	200010d8 	.word	0x200010d8
		} else if(devirmeYukariIleriLimit == 1){
 8002b8c:	4b79      	ldr	r3, [pc, #484]	@ (8002d74 <menu+0x1a58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d104      	bne.n	8002b9e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002b94:	4a78      	ldr	r2, [pc, #480]	@ (8002d78 <menu+0x1a5c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f005 ff0d 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4876      	ldr	r0, [pc, #472]	@ (8002d7c <menu+0x1a60>)
 8002ba2:	f007 fa33 	bl	800a00c <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d115      	bne.n	8002bd8 <menu+0x18bc>
 8002bac:	4b74      	ldr	r3, [pc, #464]	@ (8002d80 <menu+0x1a64>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	f083 0301 	eor.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002bba:	4b6e      	ldr	r3, [pc, #440]	@ (8002d74 <menu+0x1a58>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d74 <menu+0x1a58>)
 8002bc4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8002d74 <menu+0x1a58>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d902      	bls.n	8002bd4 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002bce:	4b69      	ldr	r3, [pc, #420]	@ (8002d74 <menu+0x1a58>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bd4:	f001 f8e0 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd8:	2104      	movs	r1, #4
 8002bda:	4868      	ldr	r0, [pc, #416]	@ (8002d7c <menu+0x1a60>)
 8002bdc:	f007 fa16 	bl	800a00c <HAL_GPIO_ReadPin>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d115      	bne.n	8002c12 <menu+0x18f6>
 8002be6:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <menu+0x1a64>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002bf4:	4b5f      	ldr	r3, [pc, #380]	@ (8002d74 <menu+0x1a58>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	@ (8002d74 <menu+0x1a58>)
 8002bfe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002c00:	4b5c      	ldr	r3, [pc, #368]	@ (8002d74 <menu+0x1a58>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002c08:	4b5a      	ldr	r3, [pc, #360]	@ (8002d74 <menu+0x1a58>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c0e:	f001 f8c3 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c12:	2108      	movs	r1, #8
 8002c14:	4859      	ldr	r0, [pc, #356]	@ (8002d7c <menu+0x1a60>)
 8002c16:	f007 f9f9 	bl	800a00c <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10d      	bne.n	8002c3c <menu+0x1920>
 8002c20:	4b57      	ldr	r3, [pc, #348]	@ (8002d80 <menu+0x1a64>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002c2e:	4b51      	ldr	r3, [pc, #324]	@ (8002d74 <menu+0x1a58>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b54      	ldr	r3, [pc, #336]	@ (8002d84 <menu+0x1a68>)
 8002c34:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002c36:	4b54      	ldr	r3, [pc, #336]	@ (8002d88 <menu+0x1a6c>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002c3c:	4b53      	ldr	r3, [pc, #332]	@ (8002d8c <menu+0x1a70>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b13      	cmp	r3, #19
 8002c42:	d174      	bne.n	8002d2e <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002c44:	4b52      	ldr	r3, [pc, #328]	@ (8002d90 <menu+0x1a74>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d105      	bne.n	8002c58 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002c4c:	4a51      	ldr	r2, [pc, #324]	@ (8002d94 <menu+0x1a78>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2001      	movs	r0, #1
 8002c52:	f005 feb1 	bl	80089b8 <lcd_print>
 8002c56:	e008      	b.n	8002c6a <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002c58:	4b4d      	ldr	r3, [pc, #308]	@ (8002d90 <menu+0x1a74>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d104      	bne.n	8002c6a <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002c60:	4a4d      	ldr	r2, [pc, #308]	@ (8002d98 <menu+0x1a7c>)
 8002c62:	2101      	movs	r1, #1
 8002c64:	2001      	movs	r0, #1
 8002c66:	f005 fea7 	bl	80089b8 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <menu+0x1a80>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002c72:	4a4b      	ldr	r2, [pc, #300]	@ (8002da0 <menu+0x1a84>)
 8002c74:	2101      	movs	r1, #1
 8002c76:	2002      	movs	r0, #2
 8002c78:	f005 fe9e 	bl	80089b8 <lcd_print>
 8002c7c:	e008      	b.n	8002c90 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <menu+0x1a80>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d104      	bne.n	8002c90 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002c86:	4a3c      	ldr	r2, [pc, #240]	@ (8002d78 <menu+0x1a5c>)
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2002      	movs	r0, #2
 8002c8c:	f005 fe94 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c90:	2102      	movs	r1, #2
 8002c92:	483a      	ldr	r0, [pc, #232]	@ (8002d7c <menu+0x1a60>)
 8002c94:	f007 f9ba 	bl	800a00c <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d115      	bne.n	8002cca <menu+0x19ae>
 8002c9e:	4b38      	ldr	r3, [pc, #224]	@ (8002d80 <menu+0x1a64>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002cac:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <menu+0x1a80>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <menu+0x1a80>)
 8002cb6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002cb8:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <menu+0x1a80>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d902      	bls.n	8002cc6 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002cc0:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <menu+0x1a80>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cc6:	f001 f867 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cca:	2104      	movs	r1, #4
 8002ccc:	482b      	ldr	r0, [pc, #172]	@ (8002d7c <menu+0x1a60>)
 8002cce:	f007 f99d 	bl	800a00c <HAL_GPIO_ReadPin>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d115      	bne.n	8002d04 <menu+0x19e8>
 8002cd8:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <menu+0x1a64>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00e      	beq.n	8002d04 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d9c <menu+0x1a80>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <menu+0x1a80>)
 8002cf0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <menu+0x1a80>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002cfa:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <menu+0x1a80>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d00:	f001 f84a 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d04:	2108      	movs	r1, #8
 8002d06:	481d      	ldr	r0, [pc, #116]	@ (8002d7c <menu+0x1a60>)
 8002d08:	f007 f980 	bl	800a00c <HAL_GPIO_ReadPin>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10d      	bne.n	8002d2e <menu+0x1a12>
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <menu+0x1a64>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002d20:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <menu+0x1a80>)
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <menu+0x1a68>)
 8002d26:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002d28:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <menu+0x1a6c>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <menu+0x1a70>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b14      	cmp	r3, #20
 8002d34:	f040 809e 	bne.w	8002e74 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002d38:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <menu+0x1a74>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002d40:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <menu+0x1a88>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	2001      	movs	r0, #1
 8002d46:	f005 fe37 	bl	80089b8 <lcd_print>
 8002d4a:	e008      	b.n	8002d5e <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <menu+0x1a74>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d104      	bne.n	8002d5e <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002d54:	4a14      	ldr	r2, [pc, #80]	@ (8002da8 <menu+0x1a8c>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f005 fe2d 	bl	80089b8 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002d5e:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <menu+0x1a90>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d126      	bne.n	8002db4 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002d66:	4a12      	ldr	r2, [pc, #72]	@ (8002db0 <menu+0x1a94>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	f005 fe24 	bl	80089b8 <lcd_print>
 8002d70:	e029      	b.n	8002dc6 <menu+0x1aaa>
 8002d72:	bf00      	nop
 8002d74:	200010d8 	.word	0x200010d8
 8002d78:	200013b8 	.word	0x200013b8
 8002d7c:	40010800 	.word	0x40010800
 8002d80:	200010f7 	.word	0x200010f7
 8002d84:	20000ff0 	.word	0x20000ff0
 8002d88:	200010f4 	.word	0x200010f4
 8002d8c:	200010c8 	.word	0x200010c8
 8002d90:	200010d7 	.word	0x200010d7
 8002d94:	200015fc 	.word	0x200015fc
 8002d98:	20001610 	.word	0x20001610
 8002d9c:	200010d9 	.word	0x200010d9
 8002da0:	200013a4 	.word	0x200013a4
 8002da4:	20001624 	.word	0x20001624
 8002da8:	20001638 	.word	0x20001638
 8002dac:	200010da 	.word	0x200010da
 8002db0:	2000164c 	.word	0x2000164c
		} else if(devirmeSilindirTipi == 1) {
 8002db4:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <menu+0x1b80>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d104      	bne.n	8002dc6 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002dbc:	4a38      	ldr	r2, [pc, #224]	@ (8002ea0 <menu+0x1b84>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f005 fdf9 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4836      	ldr	r0, [pc, #216]	@ (8002ea4 <menu+0x1b88>)
 8002dca:	f007 f91f 	bl	800a00c <HAL_GPIO_ReadPin>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d119      	bne.n	8002e08 <menu+0x1aec>
 8002dd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <menu+0x1b8c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d012      	beq.n	8002e08 <menu+0x1aec>
 8002de2:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <menu+0x1b90>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d10e      	bne.n	8002e08 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002dea:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <menu+0x1b80>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e9c <menu+0x1b80>)
 8002df4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002df6:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <menu+0x1b80>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d902      	bls.n	8002e04 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002dfe:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <menu+0x1b80>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e04:	f000 ffc8 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002e08:	2104      	movs	r1, #4
 8002e0a:	4826      	ldr	r0, [pc, #152]	@ (8002ea4 <menu+0x1b88>)
 8002e0c:	f007 f8fe 	bl	800a00c <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d119      	bne.n	8002e4a <menu+0x1b2e>
 8002e16:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <menu+0x1b8c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <menu+0x1b2e>
 8002e24:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <menu+0x1b90>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d10e      	bne.n	8002e4a <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <menu+0x1b80>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <menu+0x1b80>)
 8002e36:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <menu+0x1b80>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002e40:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <menu+0x1b80>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e46:	f000 ffa7 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e4a:	2108      	movs	r1, #8
 8002e4c:	4815      	ldr	r0, [pc, #84]	@ (8002ea4 <menu+0x1b88>)
 8002e4e:	f007 f8dd 	bl	800a00c <HAL_GPIO_ReadPin>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10d      	bne.n	8002e74 <menu+0x1b58>
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <menu+0x1b8c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <menu+0x1b80>)
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <menu+0x1b94>)
 8002e6c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002e6e:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <menu+0x1b98>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002e74:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <menu+0x1b9c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b15      	cmp	r3, #21
 8002e7a:	f040 8088 	bne.w	8002f8e <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ebc <menu+0x1ba0>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	2001      	movs	r0, #1
 8002e84:	f005 fd98 	bl	80089b8 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002e88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <menu+0x1ba4>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11b      	bne.n	8002ec8 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002e90:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec4 <menu+0x1ba8>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	2002      	movs	r0, #2
 8002e96:	f005 fd8f 	bl	80089b8 <lcd_print>
 8002e9a:	e01e      	b.n	8002eda <menu+0x1bbe>
 8002e9c:	200010da 	.word	0x200010da
 8002ea0:	20001660 	.word	0x20001660
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	200010f7 	.word	0x200010f7
 8002eac:	200010d7 	.word	0x200010d7
 8002eb0:	20000ff0 	.word	0x20000ff0
 8002eb4:	200010f4 	.word	0x200010f4
 8002eb8:	200010c8 	.word	0x200010c8
 8002ebc:	20001674 	.word	0x20001674
 8002ec0:	200010db 	.word	0x200010db
 8002ec4:	2000164c 	.word	0x2000164c
		} else if(platformSilindirTipi == 1) {
 8002ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8003150 <menu+0x1e34>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d104      	bne.n	8002eda <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002ed0:	4aa0      	ldr	r2, [pc, #640]	@ (8003154 <menu+0x1e38>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	f005 fd6f 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eda:	2102      	movs	r1, #2
 8002edc:	489e      	ldr	r0, [pc, #632]	@ (8003158 <menu+0x1e3c>)
 8002ede:	f007 f895 	bl	800a00c <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d115      	bne.n	8002f14 <menu+0x1bf8>
 8002ee8:	4b9c      	ldr	r3, [pc, #624]	@ (800315c <menu+0x1e40>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00e      	beq.n	8002f14 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002ef6:	4b96      	ldr	r3, [pc, #600]	@ (8003150 <menu+0x1e34>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b94      	ldr	r3, [pc, #592]	@ (8003150 <menu+0x1e34>)
 8002f00:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002f02:	4b93      	ldr	r3, [pc, #588]	@ (8003150 <menu+0x1e34>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d902      	bls.n	8002f10 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002f0a:	4b91      	ldr	r3, [pc, #580]	@ (8003150 <menu+0x1e34>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f10:	f000 ff42 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f14:	2104      	movs	r1, #4
 8002f16:	4890      	ldr	r0, [pc, #576]	@ (8003158 <menu+0x1e3c>)
 8002f18:	f007 f878 	bl	800a00c <HAL_GPIO_ReadPin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d115      	bne.n	8002f4e <menu+0x1c32>
 8002f22:	4b8e      	ldr	r3, [pc, #568]	@ (800315c <menu+0x1e40>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f083 0301 	eor.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002f30:	4b87      	ldr	r3, [pc, #540]	@ (8003150 <menu+0x1e34>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b85      	ldr	r3, [pc, #532]	@ (8003150 <menu+0x1e34>)
 8002f3a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002f3c:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <menu+0x1e34>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002f44:	4b82      	ldr	r3, [pc, #520]	@ (8003150 <menu+0x1e34>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f4a:	f000 ff25 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f4e:	2108      	movs	r1, #8
 8002f50:	4881      	ldr	r0, [pc, #516]	@ (8003158 <menu+0x1e3c>)
 8002f52:	f007 f85b 	bl	800a00c <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d118      	bne.n	8002f8e <menu+0x1c72>
 8002f5c:	4b7f      	ldr	r3, [pc, #508]	@ (800315c <menu+0x1e40>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d011      	beq.n	8002f8e <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002f6a:	4b79      	ldr	r3, [pc, #484]	@ (8003150 <menu+0x1e34>)
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003160 <menu+0x1e44>)
 8002f70:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002f72:	4b77      	ldr	r3, [pc, #476]	@ (8003150 <menu+0x1e34>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d106      	bne.n	8002f88 <menu+0x1c6c>
				altLimit = 1;
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003164 <menu+0x1e48>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f80:	4b78      	ldr	r3, [pc, #480]	@ (8003164 <menu+0x1e48>)
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4b76      	ldr	r3, [pc, #472]	@ (8003160 <menu+0x1e44>)
 8002f86:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002f88:	4b77      	ldr	r3, [pc, #476]	@ (8003168 <menu+0x1e4c>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002f8e:	4b77      	ldr	r3, [pc, #476]	@ (800316c <menu+0x1e50>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b16      	cmp	r3, #22
 8002f94:	d164      	bne.n	8003060 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002f96:	4a76      	ldr	r2, [pc, #472]	@ (8003170 <menu+0x1e54>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f005 fd0c 	bl	80089b8 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fa0:	4a74      	ldr	r2, [pc, #464]	@ (8003174 <menu+0x1e58>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f005 fd07 	bl	80089b8 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002faa:	4b73      	ldr	r3, [pc, #460]	@ (8003178 <menu+0x1e5c>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	220a      	movs	r2, #10
 8002fb0:	4972      	ldr	r1, [pc, #456]	@ (800317c <menu+0x1e60>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00a f856 	bl	800d064 <itoa>
		lcd_print(2,16,snum);
 8002fb8:	4a70      	ldr	r2, [pc, #448]	@ (800317c <menu+0x1e60>)
 8002fba:	2110      	movs	r1, #16
 8002fbc:	2002      	movs	r0, #2
 8002fbe:	f005 fcfb 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4864      	ldr	r0, [pc, #400]	@ (8003158 <menu+0x1e3c>)
 8002fc6:	f007 f821 	bl	800a00c <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d115      	bne.n	8002ffc <menu+0x1ce0>
 8002fd0:	4b62      	ldr	r3, [pc, #392]	@ (800315c <menu+0x1e40>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	f083 0301 	eor.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002fde:	4b66      	ldr	r3, [pc, #408]	@ (8003178 <menu+0x1e5c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b64      	ldr	r3, [pc, #400]	@ (8003178 <menu+0x1e5c>)
 8002fe8:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002fea:	4b63      	ldr	r3, [pc, #396]	@ (8003178 <menu+0x1e5c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d902      	bls.n	8002ff8 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002ff2:	4b61      	ldr	r3, [pc, #388]	@ (8003178 <menu+0x1e5c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ff8:	f000 fece 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4856      	ldr	r0, [pc, #344]	@ (8003158 <menu+0x1e3c>)
 8003000:	f007 f804 	bl	800a00c <HAL_GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d115      	bne.n	8003036 <menu+0x1d1a>
 800300a:	4b54      	ldr	r3, [pc, #336]	@ (800315c <menu+0x1e40>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003018:	4b57      	ldr	r3, [pc, #348]	@ (8003178 <menu+0x1e5c>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b55      	ldr	r3, [pc, #340]	@ (8003178 <menu+0x1e5c>)
 8003022:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003024:	4b54      	ldr	r3, [pc, #336]	@ (8003178 <menu+0x1e5c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d902      	bls.n	8003032 <menu+0x1d16>
		   		yukariValfTmr = 5;
 800302c:	4b52      	ldr	r3, [pc, #328]	@ (8003178 <menu+0x1e5c>)
 800302e:	2205      	movs	r2, #5
 8003030:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003032:	f000 feb1 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003036:	2108      	movs	r1, #8
 8003038:	4847      	ldr	r0, [pc, #284]	@ (8003158 <menu+0x1e3c>)
 800303a:	f006 ffe7 	bl	800a00c <HAL_GPIO_ReadPin>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10d      	bne.n	8003060 <menu+0x1d44>
 8003044:	4b45      	ldr	r3, [pc, #276]	@ (800315c <menu+0x1e40>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8003052:	4b49      	ldr	r3, [pc, #292]	@ (8003178 <menu+0x1e5c>)
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	4b42      	ldr	r3, [pc, #264]	@ (8003160 <menu+0x1e44>)
 8003058:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <menu+0x1e4c>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003060:	4b42      	ldr	r3, [pc, #264]	@ (800316c <menu+0x1e50>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b17      	cmp	r3, #23
 8003066:	d164      	bne.n	8003132 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003068:	4a45      	ldr	r2, [pc, #276]	@ (8003180 <menu+0x1e64>)
 800306a:	2101      	movs	r1, #1
 800306c:	2001      	movs	r0, #1
 800306e:	f005 fca3 	bl	80089b8 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003072:	4a40      	ldr	r2, [pc, #256]	@ (8003174 <menu+0x1e58>)
 8003074:	2101      	movs	r1, #1
 8003076:	2002      	movs	r0, #2
 8003078:	f005 fc9e 	bl	80089b8 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800307c:	4b41      	ldr	r3, [pc, #260]	@ (8003184 <menu+0x1e68>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	220a      	movs	r2, #10
 8003082:	493e      	ldr	r1, [pc, #248]	@ (800317c <menu+0x1e60>)
 8003084:	4618      	mov	r0, r3
 8003086:	f009 ffed 	bl	800d064 <itoa>
		lcd_print(2,16,snum);
 800308a:	4a3c      	ldr	r2, [pc, #240]	@ (800317c <menu+0x1e60>)
 800308c:	2110      	movs	r1, #16
 800308e:	2002      	movs	r0, #2
 8003090:	f005 fc92 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003094:	2102      	movs	r1, #2
 8003096:	4830      	ldr	r0, [pc, #192]	@ (8003158 <menu+0x1e3c>)
 8003098:	f006 ffb8 	bl	800a00c <HAL_GPIO_ReadPin>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d115      	bne.n	80030ce <menu+0x1db2>
 80030a2:	4b2e      	ldr	r3, [pc, #184]	@ (800315c <menu+0x1e40>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	f083 0301 	eor.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00e      	beq.n	80030ce <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 80030b0:	4b34      	ldr	r3, [pc, #208]	@ (8003184 <menu+0x1e68>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <menu+0x1e68>)
 80030ba:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80030bc:	4b31      	ldr	r3, [pc, #196]	@ (8003184 <menu+0x1e68>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d902      	bls.n	80030ca <menu+0x1dae>
				asagiValfTmr = 0;
 80030c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003184 <menu+0x1e68>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030ca:	f000 fe65 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ce:	2104      	movs	r1, #4
 80030d0:	4821      	ldr	r0, [pc, #132]	@ (8003158 <menu+0x1e3c>)
 80030d2:	f006 ff9b 	bl	800a00c <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d115      	bne.n	8003108 <menu+0x1dec>
 80030dc:	4b1f      	ldr	r3, [pc, #124]	@ (800315c <menu+0x1e40>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 80030ea:	4b26      	ldr	r3, [pc, #152]	@ (8003184 <menu+0x1e68>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <menu+0x1e68>)
 80030f4:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80030f6:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <menu+0x1e68>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <menu+0x1de8>
		   		asagiValfTmr = 5;
 80030fe:	4b21      	ldr	r3, [pc, #132]	@ (8003184 <menu+0x1e68>)
 8003100:	2205      	movs	r2, #5
 8003102:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003104:	f000 fe48 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003108:	2108      	movs	r1, #8
 800310a:	4813      	ldr	r0, [pc, #76]	@ (8003158 <menu+0x1e3c>)
 800310c:	f006 ff7e 	bl	800a00c <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10d      	bne.n	8003132 <menu+0x1e16>
 8003116:	4b11      	ldr	r3, [pc, #68]	@ (800315c <menu+0x1e40>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <menu+0x1e68>)
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <menu+0x1e44>)
 800312a:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800312c:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <menu+0x1e4c>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <menu+0x1e50>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b18      	cmp	r3, #24
 8003138:	f040 8093 	bne.w	8003262 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <menu+0x1e6c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d125      	bne.n	8003190 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003144:	4a11      	ldr	r2, [pc, #68]	@ (800318c <menu+0x1e70>)
 8003146:	2101      	movs	r1, #1
 8003148:	2001      	movs	r0, #1
 800314a:	f005 fc35 	bl	80089b8 <lcd_print>
 800314e:	e028      	b.n	80031a2 <menu+0x1e86>
 8003150:	200010db 	.word	0x200010db
 8003154:	20001660 	.word	0x20001660
 8003158:	40010800 	.word	0x40010800
 800315c:	200010f7 	.word	0x200010f7
 8003160:	20000ff0 	.word	0x20000ff0
 8003164:	200010ce 	.word	0x200010ce
 8003168:	200010f4 	.word	0x200010f4
 800316c:	200010c8 	.word	0x200010c8
 8003170:	20001688 	.word	0x20001688
 8003174:	200014d0 	.word	0x200014d0
 8003178:	200010dc 	.word	0x200010dc
 800317c:	20001060 	.word	0x20001060
 8003180:	2000169c 	.word	0x2000169c
 8003184:	200010dd 	.word	0x200010dd
 8003188:	200010d7 	.word	0x200010d7
 800318c:	200016b0 	.word	0x200016b0
		} else if(devirmeYuruyusSecim == 1) {
 8003190:	4b8c      	ldr	r3, [pc, #560]	@ (80033c4 <menu+0x20a8>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d104      	bne.n	80031a2 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003198:	4a8b      	ldr	r2, [pc, #556]	@ (80033c8 <menu+0x20ac>)
 800319a:	2101      	movs	r1, #1
 800319c:	2001      	movs	r0, #1
 800319e:	f005 fc0b 	bl	80089b8 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031a2:	4a8a      	ldr	r2, [pc, #552]	@ (80033cc <menu+0x20b0>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2002      	movs	r0, #2
 80031a8:	f005 fc06 	bl	80089b8 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80031ac:	4b88      	ldr	r3, [pc, #544]	@ (80033d0 <menu+0x20b4>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	220a      	movs	r2, #10
 80031b2:	4988      	ldr	r1, [pc, #544]	@ (80033d4 <menu+0x20b8>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f009 ff55 	bl	800d064 <itoa>
		lcd_print(2, 16, snum);
 80031ba:	4a86      	ldr	r2, [pc, #536]	@ (80033d4 <menu+0x20b8>)
 80031bc:	2110      	movs	r1, #16
 80031be:	2002      	movs	r0, #2
 80031c0:	f005 fbfa 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c4:	2102      	movs	r1, #2
 80031c6:	4884      	ldr	r0, [pc, #528]	@ (80033d8 <menu+0x20bc>)
 80031c8:	f006 ff20 	bl	800a00c <HAL_GPIO_ReadPin>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d115      	bne.n	80031fe <menu+0x1ee2>
 80031d2:	4b82      	ldr	r3, [pc, #520]	@ (80033dc <menu+0x20c0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80031e0:	4b7b      	ldr	r3, [pc, #492]	@ (80033d0 <menu+0x20b4>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b79      	ldr	r3, [pc, #484]	@ (80033d0 <menu+0x20b4>)
 80031ea:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80031ec:	4b78      	ldr	r3, [pc, #480]	@ (80033d0 <menu+0x20b4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d902      	bls.n	80031fa <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 80031f4:	4b76      	ldr	r3, [pc, #472]	@ (80033d0 <menu+0x20b4>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031fa:	f000 fdcd 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fe:	2104      	movs	r1, #4
 8003200:	4875      	ldr	r0, [pc, #468]	@ (80033d8 <menu+0x20bc>)
 8003202:	f006 ff03 	bl	800a00c <HAL_GPIO_ReadPin>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d115      	bne.n	8003238 <menu+0x1f1c>
 800320c:	4b73      	ldr	r3, [pc, #460]	@ (80033dc <menu+0x20c0>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	f083 0301 	eor.w	r3, r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800321a:	4b6d      	ldr	r3, [pc, #436]	@ (80033d0 <menu+0x20b4>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	3b01      	subs	r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4b6b      	ldr	r3, [pc, #428]	@ (80033d0 <menu+0x20b4>)
 8003224:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003226:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <menu+0x20b4>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800322e:	4b68      	ldr	r3, [pc, #416]	@ (80033d0 <menu+0x20b4>)
 8003230:	2205      	movs	r2, #5
 8003232:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003234:	f000 fdb0 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003238:	2108      	movs	r1, #8
 800323a:	4867      	ldr	r0, [pc, #412]	@ (80033d8 <menu+0x20bc>)
 800323c:	f006 fee6 	bl	800a00c <HAL_GPIO_ReadPin>
 8003240:	4603      	mov	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10d      	bne.n	8003262 <menu+0x1f46>
 8003246:	4b65      	ldr	r3, [pc, #404]	@ (80033dc <menu+0x20c0>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	f083 0301 	eor.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003254:	4b5e      	ldr	r3, [pc, #376]	@ (80033d0 <menu+0x20b4>)
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	4b61      	ldr	r3, [pc, #388]	@ (80033e0 <menu+0x20c4>)
 800325a:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800325c:	4b61      	ldr	r3, [pc, #388]	@ (80033e4 <menu+0x20c8>)
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003262:	4b61      	ldr	r3, [pc, #388]	@ (80033e8 <menu+0x20cc>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b19      	cmp	r3, #25
 8003268:	d172      	bne.n	8003350 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800326a:	4b56      	ldr	r3, [pc, #344]	@ (80033c4 <menu+0x20a8>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d105      	bne.n	800327e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003272:	4a5e      	ldr	r2, [pc, #376]	@ (80033ec <menu+0x20d0>)
 8003274:	2101      	movs	r1, #1
 8003276:	2001      	movs	r0, #1
 8003278:	f005 fb9e 	bl	80089b8 <lcd_print>
 800327c:	e008      	b.n	8003290 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800327e:	4b51      	ldr	r3, [pc, #324]	@ (80033c4 <menu+0x20a8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d104      	bne.n	8003290 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003286:	4a5a      	ldr	r2, [pc, #360]	@ (80033f0 <menu+0x20d4>)
 8003288:	2101      	movs	r1, #1
 800328a:	2001      	movs	r0, #1
 800328c:	f005 fb94 	bl	80089b8 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003290:	4a4e      	ldr	r2, [pc, #312]	@ (80033cc <menu+0x20b0>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f005 fb8f 	bl	80089b8 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800329a:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <menu+0x20d8>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	220a      	movs	r2, #10
 80032a0:	494c      	ldr	r1, [pc, #304]	@ (80033d4 <menu+0x20b8>)
 80032a2:	4618      	mov	r0, r3
 80032a4:	f009 fede 	bl	800d064 <itoa>
		lcd_print(2,16,snum);
 80032a8:	4a4a      	ldr	r2, [pc, #296]	@ (80033d4 <menu+0x20b8>)
 80032aa:	2110      	movs	r1, #16
 80032ac:	2002      	movs	r0, #2
 80032ae:	f005 fb83 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2102      	movs	r1, #2
 80032b4:	4848      	ldr	r0, [pc, #288]	@ (80033d8 <menu+0x20bc>)
 80032b6:	f006 fea9 	bl	800a00c <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <menu+0x1fd0>
 80032c0:	4b46      	ldr	r3, [pc, #280]	@ (80033dc <menu+0x20c0>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80032ce:	4b49      	ldr	r3, [pc, #292]	@ (80033f4 <menu+0x20d8>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <menu+0x20d8>)
 80032d8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80032da:	4b46      	ldr	r3, [pc, #280]	@ (80033f4 <menu+0x20d8>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d902      	bls.n	80032e8 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 80032e2:	4b44      	ldr	r3, [pc, #272]	@ (80033f4 <menu+0x20d8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e8:	f000 fd56 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ec:	2104      	movs	r1, #4
 80032ee:	483a      	ldr	r0, [pc, #232]	@ (80033d8 <menu+0x20bc>)
 80032f0:	f006 fe8c 	bl	800a00c <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d115      	bne.n	8003326 <menu+0x200a>
 80032fa:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <menu+0x20c0>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003308:	4b3a      	ldr	r3, [pc, #232]	@ (80033f4 <menu+0x20d8>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b38      	ldr	r3, [pc, #224]	@ (80033f4 <menu+0x20d8>)
 8003312:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003314:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <menu+0x20d8>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d902      	bls.n	8003322 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 800331c:	4b35      	ldr	r3, [pc, #212]	@ (80033f4 <menu+0x20d8>)
 800331e:	2205      	movs	r2, #5
 8003320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003322:	f000 fd39 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003326:	2108      	movs	r1, #8
 8003328:	482b      	ldr	r0, [pc, #172]	@ (80033d8 <menu+0x20bc>)
 800332a:	f006 fe6f 	bl	800a00c <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <menu+0x2034>
 8003334:	4b29      	ldr	r3, [pc, #164]	@ (80033dc <menu+0x20c0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003342:	4b2c      	ldr	r3, [pc, #176]	@ (80033f4 <menu+0x20d8>)
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b26      	ldr	r3, [pc, #152]	@ (80033e0 <menu+0x20c4>)
 8003348:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800334a:	4b26      	ldr	r3, [pc, #152]	@ (80033e4 <menu+0x20c8>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003350:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <menu+0x20cc>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b1a      	cmp	r3, #26
 8003356:	f040 80b7 	bne.w	80034c8 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800335a:	4a27      	ldr	r2, [pc, #156]	@ (80033f8 <menu+0x20dc>)
 800335c:	2101      	movs	r1, #1
 800335e:	2001      	movs	r0, #1
 8003360:	f005 fb2a 	bl	80089b8 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <menu+0x20e0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b63      	cmp	r3, #99	@ 0x63
 800336a:	d911      	bls.n	8003390 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 800336c:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <menu+0x20b0>)
 800336e:	2101      	movs	r1, #1
 8003370:	2002      	movs	r0, #2
 8003372:	f005 fb21 	bl	80089b8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003376:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <menu+0x20e0>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	220a      	movs	r2, #10
 800337c:	4915      	ldr	r1, [pc, #84]	@ (80033d4 <menu+0x20b8>)
 800337e:	4618      	mov	r0, r3
 8003380:	f009 fe70 	bl	800d064 <itoa>
			lcd_print(2,14,snum);
 8003384:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <menu+0x20b8>)
 8003386:	210e      	movs	r1, #14
 8003388:	2002      	movs	r0, #2
 800338a:	f005 fb15 	bl	80089b8 <lcd_print>
 800338e:	e04c      	b.n	800342a <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003390:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <menu+0x20e0>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b09      	cmp	r3, #9
 8003396:	d933      	bls.n	8003400 <menu+0x20e4>
 8003398:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <menu+0x20e0>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b63      	cmp	r3, #99	@ 0x63
 800339e:	d82f      	bhi.n	8003400 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80033a0:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <menu+0x20b0>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	2002      	movs	r0, #2
 80033a6:	f005 fb07 	bl	80089b8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033aa:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <menu+0x20e0>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	220a      	movs	r2, #10
 80033b0:	4908      	ldr	r1, [pc, #32]	@ (80033d4 <menu+0x20b8>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f009 fe56 	bl	800d064 <itoa>
			lcd_print(2, 15, snum);
 80033b8:	4a06      	ldr	r2, [pc, #24]	@ (80033d4 <menu+0x20b8>)
 80033ba:	210f      	movs	r1, #15
 80033bc:	2002      	movs	r0, #2
 80033be:	f005 fafb 	bl	80089b8 <lcd_print>
 80033c2:	e032      	b.n	800342a <menu+0x210e>
 80033c4:	200010d7 	.word	0x200010d7
 80033c8:	200016c4 	.word	0x200016c4
 80033cc:	200014d0 	.word	0x200014d0
 80033d0:	200010de 	.word	0x200010de
 80033d4:	20001060 	.word	0x20001060
 80033d8:	40010800 	.word	0x40010800
 80033dc:	200010f7 	.word	0x200010f7
 80033e0:	20000ff0 	.word	0x20000ff0
 80033e4:	200010f4 	.word	0x200010f4
 80033e8:	200010c8 	.word	0x200010c8
 80033ec:	200016d8 	.word	0x200016d8
 80033f0:	200016ec 	.word	0x200016ec
 80033f4:	200010df 	.word	0x200010df
 80033f8:	20001700 	.word	0x20001700
 80033fc:	200010e0 	.word	0x200010e0
		} else if(makineCalismaTmr <=  9) {
 8003400:	4b72      	ldr	r3, [pc, #456]	@ (80035cc <menu+0x22b0>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b09      	cmp	r3, #9
 8003406:	d810      	bhi.n	800342a <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003408:	4a71      	ldr	r2, [pc, #452]	@ (80035d0 <menu+0x22b4>)
 800340a:	2101      	movs	r1, #1
 800340c:	2002      	movs	r0, #2
 800340e:	f005 fad3 	bl	80089b8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003412:	4b6e      	ldr	r3, [pc, #440]	@ (80035cc <menu+0x22b0>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	220a      	movs	r2, #10
 8003418:	496e      	ldr	r1, [pc, #440]	@ (80035d4 <menu+0x22b8>)
 800341a:	4618      	mov	r0, r3
 800341c:	f009 fe22 	bl	800d064 <itoa>
			lcd_print(2, 16, snum);
 8003420:	4a6c      	ldr	r2, [pc, #432]	@ (80035d4 <menu+0x22b8>)
 8003422:	2110      	movs	r1, #16
 8003424:	2002      	movs	r0, #2
 8003426:	f005 fac7 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800342a:	2102      	movs	r1, #2
 800342c:	486a      	ldr	r0, [pc, #424]	@ (80035d8 <menu+0x22bc>)
 800342e:	f006 fded 	bl	800a00c <HAL_GPIO_ReadPin>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d115      	bne.n	8003464 <menu+0x2148>
 8003438:	4b68      	ldr	r3, [pc, #416]	@ (80035dc <menu+0x22c0>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f083 0301 	eor.w	r3, r3, #1
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00e      	beq.n	8003464 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003446:	4b61      	ldr	r3, [pc, #388]	@ (80035cc <menu+0x22b0>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b5f      	ldr	r3, [pc, #380]	@ (80035cc <menu+0x22b0>)
 8003450:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003452:	4b5e      	ldr	r3, [pc, #376]	@ (80035cc <menu+0x22b0>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2bb4      	cmp	r3, #180	@ 0xb4
 8003458:	d902      	bls.n	8003460 <menu+0x2144>
				makineCalismaTmr = 0;
 800345a:	4b5c      	ldr	r3, [pc, #368]	@ (80035cc <menu+0x22b0>)
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003460:	f000 fc9a 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003464:	2104      	movs	r1, #4
 8003466:	485c      	ldr	r0, [pc, #368]	@ (80035d8 <menu+0x22bc>)
 8003468:	f006 fdd0 	bl	800a00c <HAL_GPIO_ReadPin>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d115      	bne.n	800349e <menu+0x2182>
 8003472:	4b5a      	ldr	r3, [pc, #360]	@ (80035dc <menu+0x22c0>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f083 0301 	eor.w	r3, r3, #1
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003480:	4b52      	ldr	r3, [pc, #328]	@ (80035cc <menu+0x22b0>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	3b01      	subs	r3, #1
 8003486:	b2da      	uxtb	r2, r3
 8003488:	4b50      	ldr	r3, [pc, #320]	@ (80035cc <menu+0x22b0>)
 800348a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800348c:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <menu+0x22b0>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2bb5      	cmp	r3, #181	@ 0xb5
 8003492:	d902      	bls.n	800349a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003494:	4b4d      	ldr	r3, [pc, #308]	@ (80035cc <menu+0x22b0>)
 8003496:	22b4      	movs	r2, #180	@ 0xb4
 8003498:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800349a:	f000 fc7d 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800349e:	2108      	movs	r1, #8
 80034a0:	484d      	ldr	r0, [pc, #308]	@ (80035d8 <menu+0x22bc>)
 80034a2:	f006 fdb3 	bl	800a00c <HAL_GPIO_ReadPin>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10d      	bne.n	80034c8 <menu+0x21ac>
 80034ac:	4b4b      	ldr	r3, [pc, #300]	@ (80035dc <menu+0x22c0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f083 0301 	eor.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80034ba:	4b44      	ldr	r3, [pc, #272]	@ (80035cc <menu+0x22b0>)
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <menu+0x22c4>)
 80034c0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80034c2:	4b48      	ldr	r3, [pc, #288]	@ (80035e4 <menu+0x22c8>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80034c8:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <menu+0x22cc>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b1b      	cmp	r3, #27
 80034ce:	d166      	bne.n	800359e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80034d0:	4a46      	ldr	r2, [pc, #280]	@ (80035ec <menu+0x22d0>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	2001      	movs	r0, #1
 80034d6:	f005 fa6f 	bl	80089b8 <lcd_print>

		if(buzzer == 0) {
 80034da:	4b45      	ldr	r3, [pc, #276]	@ (80035f0 <menu+0x22d4>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 80034e2:	4a44      	ldr	r2, [pc, #272]	@ (80035f4 <menu+0x22d8>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2002      	movs	r0, #2
 80034e8:	f005 fa66 	bl	80089b8 <lcd_print>
 80034ec:	e008      	b.n	8003500 <menu+0x21e4>
		} else if(buzzer == 1) {
 80034ee:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <menu+0x22d4>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d104      	bne.n	8003500 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 80034f6:	4a40      	ldr	r2, [pc, #256]	@ (80035f8 <menu+0x22dc>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	2002      	movs	r0, #2
 80034fc:	f005 fa5c 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003500:	2102      	movs	r1, #2
 8003502:	4835      	ldr	r0, [pc, #212]	@ (80035d8 <menu+0x22bc>)
 8003504:	f006 fd82 	bl	800a00c <HAL_GPIO_ReadPin>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d115      	bne.n	800353a <menu+0x221e>
 800350e:	4b33      	ldr	r3, [pc, #204]	@ (80035dc <menu+0x22c0>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f083 0301 	eor.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00e      	beq.n	800353a <menu+0x221e>
			buzzer = buzzer + 1;
 800351c:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <menu+0x22d4>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <menu+0x22d4>)
 8003526:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003528:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <menu+0x22d4>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d902      	bls.n	8003536 <menu+0x221a>
				buzzer = 0;
 8003530:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <menu+0x22d4>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003536:	f000 fc2f 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800353a:	2104      	movs	r1, #4
 800353c:	4826      	ldr	r0, [pc, #152]	@ (80035d8 <menu+0x22bc>)
 800353e:	f006 fd65 	bl	800a00c <HAL_GPIO_ReadPin>
 8003542:	4603      	mov	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d115      	bne.n	8003574 <menu+0x2258>
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <menu+0x22c0>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	f083 0301 	eor.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <menu+0x2258>
			buzzer = buzzer - 1;
 8003556:	4b26      	ldr	r3, [pc, #152]	@ (80035f0 <menu+0x22d4>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <menu+0x22d4>)
 8003560:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003562:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <menu+0x22d4>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <menu+0x2254>
		   		buzzer = 1;
 800356a:	4b21      	ldr	r3, [pc, #132]	@ (80035f0 <menu+0x22d4>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003570:	f000 fc12 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003574:	2108      	movs	r1, #8
 8003576:	4818      	ldr	r0, [pc, #96]	@ (80035d8 <menu+0x22bc>)
 8003578:	f006 fd48 	bl	800a00c <HAL_GPIO_ReadPin>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10d      	bne.n	800359e <menu+0x2282>
 8003582:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <menu+0x22c0>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <menu+0x2282>
			eepromData[25] = buzzer;
 8003590:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <menu+0x22d4>)
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <menu+0x22c4>)
 8003596:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003598:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <menu+0x22c8>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <menu+0x22cc>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b1c      	cmp	r3, #28
 80035a4:	f040 8088 	bne.w	80036b8 <menu+0x239c>
		calismaSayModu = 0;
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <menu+0x22e0>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80035ae:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <menu+0x22e4>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	2001      	movs	r0, #1
 80035b4:	f005 fa00 	bl	80089b8 <lcd_print>

		if(demoMode == 0) {
 80035b8:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <menu+0x22e8>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d123      	bne.n	8003608 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80035c0:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <menu+0x22d8>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2002      	movs	r0, #2
 80035c6:	f005 f9f7 	bl	80089b8 <lcd_print>
 80035ca:	e026      	b.n	800361a <menu+0x22fe>
 80035cc:	200010e0 	.word	0x200010e0
 80035d0:	200014d0 	.word	0x200014d0
 80035d4:	20001060 	.word	0x20001060
 80035d8:	40010800 	.word	0x40010800
 80035dc:	200010f7 	.word	0x200010f7
 80035e0:	20000ff0 	.word	0x20000ff0
 80035e4:	200010f4 	.word	0x200010f4
 80035e8:	200010c8 	.word	0x200010c8
 80035ec:	2000012c 	.word	0x2000012c
 80035f0:	200010e4 	.word	0x200010e4
 80035f4:	200013a4 	.word	0x200013a4
 80035f8:	200013b8 	.word	0x200013b8
 80035fc:	200010e8 	.word	0x200010e8
 8003600:	20000140 	.word	0x20000140
 8003604:	200010e6 	.word	0x200010e6
		} else if(demoMode == 1) {
 8003608:	4b61      	ldr	r3, [pc, #388]	@ (8003790 <menu+0x2474>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d104      	bne.n	800361a <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003610:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <menu+0x2478>)
 8003612:	2101      	movs	r1, #1
 8003614:	2002      	movs	r0, #2
 8003616:	f005 f9cf 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800361a:	2102      	movs	r1, #2
 800361c:	485e      	ldr	r0, [pc, #376]	@ (8003798 <menu+0x247c>)
 800361e:	f006 fcf5 	bl	800a00c <HAL_GPIO_ReadPin>
 8003622:	4603      	mov	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	d115      	bne.n	8003654 <menu+0x2338>
 8003628:	4b5c      	ldr	r3, [pc, #368]	@ (800379c <menu+0x2480>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f083 0301 	eor.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <menu+0x2338>
			demoMode = demoMode + 1;
 8003636:	4b56      	ldr	r3, [pc, #344]	@ (8003790 <menu+0x2474>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b54      	ldr	r3, [pc, #336]	@ (8003790 <menu+0x2474>)
 8003640:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003642:	4b53      	ldr	r3, [pc, #332]	@ (8003790 <menu+0x2474>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d902      	bls.n	8003650 <menu+0x2334>
				demoMode = 0;
 800364a:	4b51      	ldr	r3, [pc, #324]	@ (8003790 <menu+0x2474>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003650:	f000 fba2 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003654:	2104      	movs	r1, #4
 8003656:	4850      	ldr	r0, [pc, #320]	@ (8003798 <menu+0x247c>)
 8003658:	f006 fcd8 	bl	800a00c <HAL_GPIO_ReadPin>
 800365c:	4603      	mov	r3, r0
 800365e:	2b01      	cmp	r3, #1
 8003660:	d115      	bne.n	800368e <menu+0x2372>
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <menu+0x2480>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	f083 0301 	eor.w	r3, r3, #1
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <menu+0x2372>
			demoMode = demoMode - 1;
 8003670:	4b47      	ldr	r3, [pc, #284]	@ (8003790 <menu+0x2474>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	3b01      	subs	r3, #1
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b45      	ldr	r3, [pc, #276]	@ (8003790 <menu+0x2474>)
 800367a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800367c:	4b44      	ldr	r3, [pc, #272]	@ (8003790 <menu+0x2474>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <menu+0x236e>
		   		demoMode = 1;
 8003684:	4b42      	ldr	r3, [pc, #264]	@ (8003790 <menu+0x2474>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800368a:	f000 fb85 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800368e:	2108      	movs	r1, #8
 8003690:	4841      	ldr	r0, [pc, #260]	@ (8003798 <menu+0x247c>)
 8003692:	f006 fcbb 	bl	800a00c <HAL_GPIO_ReadPin>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10d      	bne.n	80036b8 <menu+0x239c>
 800369c:	4b3f      	ldr	r3, [pc, #252]	@ (800379c <menu+0x2480>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	f083 0301 	eor.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <menu+0x239c>
			eepromData[26] = demoMode;
 80036aa:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <menu+0x2474>)
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	4b3c      	ldr	r3, [pc, #240]	@ (80037a0 <menu+0x2484>)
 80036b0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036b2:	4b3c      	ldr	r3, [pc, #240]	@ (80037a4 <menu+0x2488>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80036b8:	4b3b      	ldr	r3, [pc, #236]	@ (80037a8 <menu+0x248c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b1d      	cmp	r3, #29
 80036be:	f040 810c 	bne.w	80038da <menu+0x25be>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80036c2:	4b3a      	ldr	r3, [pc, #232]	@ (80037ac <menu+0x2490>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d113      	bne.n	80036f2 <menu+0x23d6>
 80036ca:	4b39      	ldr	r3, [pc, #228]	@ (80037b0 <menu+0x2494>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <menu+0x23d6>
 80036d2:	4b38      	ldr	r3, [pc, #224]	@ (80037b4 <menu+0x2498>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <menu+0x23d6>
 80036da:	4b37      	ldr	r3, [pc, #220]	@ (80037b8 <menu+0x249c>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <menu+0x23d6>
 80036e2:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <menu+0x24a0>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <menu+0x23d6>
			calismaSayisiYar = 0;
 80036ea:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <menu+0x24a4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e002      	b.n	80036f8 <menu+0x23dc>
		} else {
			calismaSayisiYar = 1;
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <menu+0x24a4>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80036f8:	4b32      	ldr	r3, [pc, #200]	@ (80037c4 <menu+0x24a8>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d169      	bne.n	80037d4 <menu+0x24b8>
			lcd_print(1, 1, calismaSayisiText);
 8003700:	4a31      	ldr	r2, [pc, #196]	@ (80037c8 <menu+0x24ac>)
 8003702:	2101      	movs	r1, #1
 8003704:	2001      	movs	r0, #1
 8003706:	f005 f957 	bl	80089b8 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 800370a:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <menu+0x24a0>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	220a      	movs	r2, #10
 8003710:	492e      	ldr	r1, [pc, #184]	@ (80037cc <menu+0x24b0>)
 8003712:	4618      	mov	r0, r3
 8003714:	f009 fca6 	bl	800d064 <itoa>
			lcd_print(2, 12, snum);
 8003718:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <menu+0x24b0>)
 800371a:	210c      	movs	r1, #12
 800371c:	2002      	movs	r0, #2
 800371e:	f005 f94b 	bl	80089b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003722:	4b25      	ldr	r3, [pc, #148]	@ (80037b8 <menu+0x249c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	220a      	movs	r2, #10
 8003728:	4928      	ldr	r1, [pc, #160]	@ (80037cc <menu+0x24b0>)
 800372a:	4618      	mov	r0, r3
 800372c:	f009 fc9a 	bl	800d064 <itoa>
			lcd_print(2, 13, snum);
 8003730:	4a26      	ldr	r2, [pc, #152]	@ (80037cc <menu+0x24b0>)
 8003732:	210d      	movs	r1, #13
 8003734:	2002      	movs	r0, #2
 8003736:	f005 f93f 	bl	80089b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800373a:	4b1e      	ldr	r3, [pc, #120]	@ (80037b4 <menu+0x2498>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	220a      	movs	r2, #10
 8003740:	4922      	ldr	r1, [pc, #136]	@ (80037cc <menu+0x24b0>)
 8003742:	4618      	mov	r0, r3
 8003744:	f009 fc8e 	bl	800d064 <itoa>
			lcd_print(2, 14, snum);
 8003748:	4a20      	ldr	r2, [pc, #128]	@ (80037cc <menu+0x24b0>)
 800374a:	210e      	movs	r1, #14
 800374c:	2002      	movs	r0, #2
 800374e:	f005 f933 	bl	80089b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003752:	4b17      	ldr	r3, [pc, #92]	@ (80037b0 <menu+0x2494>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	220a      	movs	r2, #10
 8003758:	491c      	ldr	r1, [pc, #112]	@ (80037cc <menu+0x24b0>)
 800375a:	4618      	mov	r0, r3
 800375c:	f009 fc82 	bl	800d064 <itoa>
			lcd_print(2, 15, snum);
 8003760:	4a1a      	ldr	r2, [pc, #104]	@ (80037cc <menu+0x24b0>)
 8003762:	210f      	movs	r1, #15
 8003764:	2002      	movs	r0, #2
 8003766:	f005 f927 	bl	80089b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <menu+0x2490>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	220a      	movs	r2, #10
 8003770:	4916      	ldr	r1, [pc, #88]	@ (80037cc <menu+0x24b0>)
 8003772:	4618      	mov	r0, r3
 8003774:	f009 fc76 	bl	800d064 <itoa>
			lcd_print(2, 16, snum);
 8003778:	4a14      	ldr	r2, [pc, #80]	@ (80037cc <menu+0x24b0>)
 800377a:	2110      	movs	r1, #16
 800377c:	2002      	movs	r0, #2
 800377e:	f005 f91b 	bl	80089b8 <lcd_print>

			lcd_print(2, 1, "           ");
 8003782:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <menu+0x24b4>)
 8003784:	2101      	movs	r1, #1
 8003786:	2002      	movs	r0, #2
 8003788:	f005 f916 	bl	80089b8 <lcd_print>
 800378c:	e030      	b.n	80037f0 <menu+0x24d4>
 800378e:	bf00      	nop
 8003790:	200010e6 	.word	0x200010e6
 8003794:	200013b8 	.word	0x200013b8
 8003798:	40010800 	.word	0x40010800
 800379c:	200010f7 	.word	0x200010f7
 80037a0:	20000ff0 	.word	0x20000ff0
 80037a4:	200010f4 	.word	0x200010f4
 80037a8:	200010c8 	.word	0x200010c8
 80037ac:	200010c5 	.word	0x200010c5
 80037b0:	200010c6 	.word	0x200010c6
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000001 	.word	0x20000001
 80037bc:	200010c7 	.word	0x200010c7
 80037c0:	20001109 	.word	0x20001109
 80037c4:	200010e8 	.word	0x200010e8
 80037c8:	20001714 	.word	0x20001714
 80037cc:	20001060 	.word	0x20001060
 80037d0:	0800dd7c 	.word	0x0800dd7c
		} else if(calismaSayModu == 1) {
 80037d4:	4b82      	ldr	r3, [pc, #520]	@ (80039e0 <menu+0x26c4>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d109      	bne.n	80037f0 <menu+0x24d4>
			lcd_print(1, 1, calismaSayisiText);
 80037dc:	4a81      	ldr	r2, [pc, #516]	@ (80039e4 <menu+0x26c8>)
 80037de:	2101      	movs	r1, #1
 80037e0:	2001      	movs	r0, #1
 80037e2:	f005 f8e9 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80037e6:	4a80      	ldr	r2, [pc, #512]	@ (80039e8 <menu+0x26cc>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2002      	movs	r0, #2
 80037ec:	f005 f8e4 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80037f0:	2102      	movs	r1, #2
 80037f2:	487e      	ldr	r0, [pc, #504]	@ (80039ec <menu+0x26d0>)
 80037f4:	f006 fc0a 	bl	800a00c <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d119      	bne.n	8003832 <menu+0x2516>
 80037fe:	4b7c      	ldr	r3, [pc, #496]	@ (80039f0 <menu+0x26d4>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f083 0301 	eor.w	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <menu+0x2516>
 800380c:	4b79      	ldr	r3, [pc, #484]	@ (80039f4 <menu+0x26d8>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00e      	beq.n	8003832 <menu+0x2516>
			calismaSayModu = calismaSayModu + 1;
 8003814:	4b72      	ldr	r3, [pc, #456]	@ (80039e0 <menu+0x26c4>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b70      	ldr	r3, [pc, #448]	@ (80039e0 <menu+0x26c4>)
 800381e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003820:	4b6f      	ldr	r3, [pc, #444]	@ (80039e0 <menu+0x26c4>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d902      	bls.n	800382e <menu+0x2512>
				calismaSayModu = 0;
 8003828:	4b6d      	ldr	r3, [pc, #436]	@ (80039e0 <menu+0x26c4>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800382e:	f000 fab3 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003832:	2104      	movs	r1, #4
 8003834:	486d      	ldr	r0, [pc, #436]	@ (80039ec <menu+0x26d0>)
 8003836:	f006 fbe9 	bl	800a00c <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d119      	bne.n	8003874 <menu+0x2558>
 8003840:	4b6b      	ldr	r3, [pc, #428]	@ (80039f0 <menu+0x26d4>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f083 0301 	eor.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <menu+0x2558>
 800384e:	4b69      	ldr	r3, [pc, #420]	@ (80039f4 <menu+0x26d8>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <menu+0x2558>
			calismaSayModu = calismaSayModu - 1;
 8003856:	4b62      	ldr	r3, [pc, #392]	@ (80039e0 <menu+0x26c4>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b60      	ldr	r3, [pc, #384]	@ (80039e0 <menu+0x26c4>)
 8003860:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003862:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <menu+0x26c4>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <menu+0x2554>
		   		calismaSayModu = 1;
 800386a:	4b5d      	ldr	r3, [pc, #372]	@ (80039e0 <menu+0x26c4>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003870:	f000 fa92 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003874:	2108      	movs	r1, #8
 8003876:	485d      	ldr	r0, [pc, #372]	@ (80039ec <menu+0x26d0>)
 8003878:	f006 fbc8 	bl	800a00c <HAL_GPIO_ReadPin>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d12b      	bne.n	80038da <menu+0x25be>
 8003882:	4b5b      	ldr	r3, [pc, #364]	@ (80039f0 <menu+0x26d4>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d024      	beq.n	80038da <menu+0x25be>
			eepromData[32] = 0;
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <menu+0x26dc>)
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003898:	4b57      	ldr	r3, [pc, #348]	@ (80039f8 <menu+0x26dc>)
 800389a:	2200      	movs	r2, #0
 800389c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800389e:	4b56      	ldr	r3, [pc, #344]	@ (80039f8 <menu+0x26dc>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80038a4:	4b54      	ldr	r3, [pc, #336]	@ (80039f8 <menu+0x26dc>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80038aa:	4b53      	ldr	r3, [pc, #332]	@ (80039f8 <menu+0x26dc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80038b0:	4b52      	ldr	r3, [pc, #328]	@ (80039fc <menu+0x26e0>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80038b6:	4b52      	ldr	r3, [pc, #328]	@ (8003a00 <menu+0x26e4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80038bc:	4b51      	ldr	r3, [pc, #324]	@ (8003a04 <menu+0x26e8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80038c2:	4b51      	ldr	r3, [pc, #324]	@ (8003a08 <menu+0x26ec>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80038c8:	4b50      	ldr	r3, [pc, #320]	@ (8003a0c <menu+0x26f0>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80038ce:	4b44      	ldr	r3, [pc, #272]	@ (80039e0 <menu+0x26c4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80038d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a10 <menu+0x26f4>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80038da:	4b4e      	ldr	r3, [pc, #312]	@ (8003a14 <menu+0x26f8>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b1e      	cmp	r3, #30
 80038e0:	d166      	bne.n	80039b0 <menu+0x2694>
		calismaSayModu = 0;
 80038e2:	4b3f      	ldr	r3, [pc, #252]	@ (80039e0 <menu+0x26c4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80038e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a18 <menu+0x26fc>)
 80038ea:	2101      	movs	r1, #1
 80038ec:	2001      	movs	r0, #1
 80038ee:	f005 f863 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80038f2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a1c <menu+0x2700>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	2002      	movs	r0, #2
 80038f8:	f005 f85e 	bl	80089b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fc:	2102      	movs	r1, #2
 80038fe:	483b      	ldr	r0, [pc, #236]	@ (80039ec <menu+0x26d0>)
 8003900:	f006 fb84 	bl	800a00c <HAL_GPIO_ReadPin>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d11a      	bne.n	8003940 <menu+0x2624>
 800390a:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <menu+0x26d4>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f083 0301 	eor.w	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <menu+0x2624>
			dilSecim = dilSecim + 1;
 8003918:	4b41      	ldr	r3, [pc, #260]	@ (8003a20 <menu+0x2704>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b3f      	ldr	r3, [pc, #252]	@ (8003a20 <menu+0x2704>)
 8003922:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003924:	4b3e      	ldr	r3, [pc, #248]	@ (8003a20 <menu+0x2704>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d902      	bls.n	8003932 <menu+0x2616>
				dilSecim = 0;
 800392c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a20 <menu+0x2704>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003932:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <menu+0x2704>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fb1e 	bl	8005f78 <loadMenuTexts>

			bekle();
 800393c:	f000 fa2c 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003940:	2104      	movs	r1, #4
 8003942:	482a      	ldr	r0, [pc, #168]	@ (80039ec <menu+0x26d0>)
 8003944:	f006 fb62 	bl	800a00c <HAL_GPIO_ReadPin>
 8003948:	4603      	mov	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d11a      	bne.n	8003984 <menu+0x2668>
 800394e:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <menu+0x26d4>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f083 0301 	eor.w	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <menu+0x2668>
			dilSecim = dilSecim - 1;
 800395c:	4b30      	ldr	r3, [pc, #192]	@ (8003a20 <menu+0x2704>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	3b01      	subs	r3, #1
 8003962:	b2da      	uxtb	r2, r3
 8003964:	4b2e      	ldr	r3, [pc, #184]	@ (8003a20 <menu+0x2704>)
 8003966:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003968:	4b2d      	ldr	r3, [pc, #180]	@ (8003a20 <menu+0x2704>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <menu+0x265a>
		   		dilSecim = 1;
 8003970:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <menu+0x2704>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003976:	4b2a      	ldr	r3, [pc, #168]	@ (8003a20 <menu+0x2704>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 fafc 	bl	8005f78 <loadMenuTexts>

			bekle();
 8003980:	f000 fa0a 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003984:	2108      	movs	r1, #8
 8003986:	4819      	ldr	r0, [pc, #100]	@ (80039ec <menu+0x26d0>)
 8003988:	f006 fb40 	bl	800a00c <HAL_GPIO_ReadPin>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10e      	bne.n	80039b0 <menu+0x2694>
 8003992:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <menu+0x26d4>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	f083 0301 	eor.w	r3, r3, #1
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <menu+0x2694>
			eepromData[33] = dilSecim;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a20 <menu+0x2704>)
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	4b14      	ldr	r3, [pc, #80]	@ (80039f8 <menu+0x26dc>)
 80039a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80039aa:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <menu+0x26f4>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80039b0:	4b18      	ldr	r3, [pc, #96]	@ (8003a14 <menu+0x26f8>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b1f      	cmp	r3, #31
 80039b6:	f040 8094 	bne.w	8003ae2 <menu+0x27c6>
		calismaSayModu = 0;
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <menu+0x26c4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 80039c0:	4a18      	ldr	r2, [pc, #96]	@ (8003a24 <menu+0x2708>)
 80039c2:	2101      	movs	r1, #1
 80039c4:	2001      	movs	r0, #1
 80039c6:	f004 fff7 	bl	80089b8 <lcd_print>

		if(iotMode == 0) {
 80039ca:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <menu+0x270c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d12e      	bne.n	8003a30 <menu+0x2714>
			lcd_print(2, 1, pasifText);
 80039d2:	4a16      	ldr	r2, [pc, #88]	@ (8003a2c <menu+0x2710>)
 80039d4:	2101      	movs	r1, #1
 80039d6:	2002      	movs	r0, #2
 80039d8:	f004 ffee 	bl	80089b8 <lcd_print>
 80039dc:	e031      	b.n	8003a42 <menu+0x2726>
 80039de:	bf00      	nop
 80039e0:	200010e8 	.word	0x200010e8
 80039e4:	20001714 	.word	0x20001714
 80039e8:	20001728 	.word	0x20001728
 80039ec:	40010800 	.word	0x40010800
 80039f0:	200010f7 	.word	0x200010f7
 80039f4:	20001109 	.word	0x20001109
 80039f8:	20000ff0 	.word	0x20000ff0
 80039fc:	200010c7 	.word	0x200010c7
 8003a00:	20000001 	.word	0x20000001
 8003a04:	20000000 	.word	0x20000000
 8003a08:	200010c6 	.word	0x200010c6
 8003a0c:	200010c5 	.word	0x200010c5
 8003a10:	200010f4 	.word	0x200010f4
 8003a14:	200010c8 	.word	0x200010c8
 8003a18:	2000173c 	.word	0x2000173c
 8003a1c:	20001750 	.word	0x20001750
 8003a20:	200010e9 	.word	0x200010e9
 8003a24:	20000154 	.word	0x20000154
 8003a28:	200010e7 	.word	0x200010e7
 8003a2c:	200013a4 	.word	0x200013a4
		} else if(iotMode == 1) {
 8003a30:	4b97      	ldr	r3, [pc, #604]	@ (8003c90 <menu+0x2974>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d104      	bne.n	8003a42 <menu+0x2726>
			lcd_print(2, 1, aktifText);
 8003a38:	4a96      	ldr	r2, [pc, #600]	@ (8003c94 <menu+0x2978>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	2002      	movs	r0, #2
 8003a3e:	f004 ffbb 	bl	80089b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a42:	2102      	movs	r1, #2
 8003a44:	4894      	ldr	r0, [pc, #592]	@ (8003c98 <menu+0x297c>)
 8003a46:	f006 fae1 	bl	800a00c <HAL_GPIO_ReadPin>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d115      	bne.n	8003a7c <menu+0x2760>
 8003a50:	4b92      	ldr	r3, [pc, #584]	@ (8003c9c <menu+0x2980>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f083 0301 	eor.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00e      	beq.n	8003a7c <menu+0x2760>
			iotMode = iotMode + 1;
 8003a5e:	4b8c      	ldr	r3, [pc, #560]	@ (8003c90 <menu+0x2974>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b8a      	ldr	r3, [pc, #552]	@ (8003c90 <menu+0x2974>)
 8003a68:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003a6a:	4b89      	ldr	r3, [pc, #548]	@ (8003c90 <menu+0x2974>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d902      	bls.n	8003a78 <menu+0x275c>
				iotMode = 0;
 8003a72:	4b87      	ldr	r3, [pc, #540]	@ (8003c90 <menu+0x2974>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a78:	f000 f98e 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4886      	ldr	r0, [pc, #536]	@ (8003c98 <menu+0x297c>)
 8003a80:	f006 fac4 	bl	800a00c <HAL_GPIO_ReadPin>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d115      	bne.n	8003ab6 <menu+0x279a>
 8003a8a:	4b84      	ldr	r3, [pc, #528]	@ (8003c9c <menu+0x2980>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	f083 0301 	eor.w	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <menu+0x279a>
			iotMode = iotMode - 1;
 8003a98:	4b7d      	ldr	r3, [pc, #500]	@ (8003c90 <menu+0x2974>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	4b7b      	ldr	r3, [pc, #492]	@ (8003c90 <menu+0x2974>)
 8003aa2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8003c90 <menu+0x2974>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <menu+0x2796>
		   		iotMode = 1;
 8003aac:	4b78      	ldr	r3, [pc, #480]	@ (8003c90 <menu+0x2974>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003ab2:	f000 f971 	bl	8003d98 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	4877      	ldr	r0, [pc, #476]	@ (8003c98 <menu+0x297c>)
 8003aba:	f006 faa7 	bl	800a00c <HAL_GPIO_ReadPin>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10e      	bne.n	8003ae2 <menu+0x27c6>
 8003ac4:	4b75      	ldr	r3, [pc, #468]	@ (8003c9c <menu+0x2980>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	f083 0301 	eor.w	r3, r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <menu+0x27c6>
			eepromData[48] = iotMode;
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8003c90 <menu+0x2974>)
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	4b72      	ldr	r3, [pc, #456]	@ (8003ca0 <menu+0x2984>)
 8003ad8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003adc:	4b71      	ldr	r3, [pc, #452]	@ (8003ca4 <menu+0x2988>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003ae2:	4b71      	ldr	r3, [pc, #452]	@ (8003ca8 <menu+0x298c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d122      	bne.n	8003b30 <menu+0x2814>
		calismaSayModu = 0;
 8003aea:	4b70      	ldr	r3, [pc, #448]	@ (8003cac <menu+0x2990>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7fc fe25 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003af6:	2032      	movs	r0, #50	@ 0x32
 8003af8:	f005 fcb8 	bl	800946c <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7fd fb5f 	bl	80011c0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b02:	2102      	movs	r1, #2
 8003b04:	4864      	ldr	r0, [pc, #400]	@ (8003c98 <menu+0x297c>)
 8003b06:	f006 fa81 	bl	800a00c <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10f      	bne.n	8003b30 <menu+0x2814>
 8003b10:	2104      	movs	r1, #4
 8003b12:	4861      	ldr	r0, [pc, #388]	@ (8003c98 <menu+0x297c>)
 8003b14:	f006 fa7a 	bl	800a00c <HAL_GPIO_ReadPin>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d108      	bne.n	8003b30 <menu+0x2814>
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c9c <menu+0x2980>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	f083 0301 	eor.w	r3, r3, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <menu+0x2814>
			takeMachineIDWithConfirmation();
 8003b2c:	f003 feaa 	bl	8007884 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003b30:	4b5d      	ldr	r3, [pc, #372]	@ (8003ca8 <menu+0x298c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b21      	cmp	r3, #33	@ 0x21
 8003b36:	d132      	bne.n	8003b9e <menu+0x2882>
		calismaSayModu = 0;
 8003b38:	4b5c      	ldr	r3, [pc, #368]	@ (8003cac <menu+0x2990>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003b3e:	2002      	movs	r0, #2
 8003b40:	f7fc fdfe 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b44:	2032      	movs	r0, #50	@ 0x32
 8003b46:	f005 fc91 	bl	800946c <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003b4a:	2002      	movs	r0, #2
 8003b4c:	f7fd fb38 	bl	80011c0 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003b50:	2102      	movs	r1, #2
 8003b52:	4851      	ldr	r0, [pc, #324]	@ (8003c98 <menu+0x297c>)
 8003b54:	f006 fa5a 	bl	800a00c <HAL_GPIO_ReadPin>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10d      	bne.n	8003b7a <menu+0x285e>
 8003b5e:	2104      	movs	r1, #4
 8003b60:	484d      	ldr	r0, [pc, #308]	@ (8003c98 <menu+0x297c>)
 8003b62:	f006 fa53 	bl	800a00c <HAL_GPIO_ReadPin>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <menu+0x285e>
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c9c <menu+0x2980>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	f083 0301 	eor.w	r3, r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <menu+0x2866>
 8003b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cb0 <menu+0x2994>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <menu+0x2882>
			editMode = 0;
 8003b82:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb0 <menu+0x2994>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
			takeWifiSSID();
 8003b88:	f004 f8a2 	bl	8007cd0 <takeWifiSSID>

			convertArrays(2);
 8003b8c:	2002      	movs	r0, #2
 8003b8e:	f7fc fdd7 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b92:	2032      	movs	r0, #50	@ 0x32
 8003b94:	f005 fc6a 	bl	800946c <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003b98:	2002      	movs	r0, #2
 8003b9a:	f7fd fb11 	bl	80011c0 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003b9e:	4b42      	ldr	r3, [pc, #264]	@ (8003ca8 <menu+0x298c>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b22      	cmp	r3, #34	@ 0x22
 8003ba4:	d132      	bne.n	8003c0c <menu+0x28f0>
		calismaSayModu = 0;
 8003ba6:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <menu+0x2990>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003bac:	2003      	movs	r0, #3
 8003bae:	f7fc fdc7 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003bb2:	2032      	movs	r0, #50	@ 0x32
 8003bb4:	f005 fc5a 	bl	800946c <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003bb8:	2003      	movs	r0, #3
 8003bba:	f7fd fb01 	bl	80011c0 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	4835      	ldr	r0, [pc, #212]	@ (8003c98 <menu+0x297c>)
 8003bc2:	f006 fa23 	bl	800a00c <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10d      	bne.n	8003be8 <menu+0x28cc>
 8003bcc:	2104      	movs	r1, #4
 8003bce:	4832      	ldr	r0, [pc, #200]	@ (8003c98 <menu+0x297c>)
 8003bd0:	f006 fa1c 	bl	800a00c <HAL_GPIO_ReadPin>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <menu+0x28cc>
 8003bda:	4b30      	ldr	r3, [pc, #192]	@ (8003c9c <menu+0x2980>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f083 0301 	eor.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <menu+0x28d4>
 8003be8:	4b31      	ldr	r3, [pc, #196]	@ (8003cb0 <menu+0x2994>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10d      	bne.n	8003c0c <menu+0x28f0>
			editMode = 0;
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb0 <menu+0x2994>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
			takeWifiPass();
 8003bf6:	f004 fa45 	bl	8008084 <takeWifiPass>

			convertArrays(3);
 8003bfa:	2003      	movs	r0, #3
 8003bfc:	f7fc fda0 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003c00:	2032      	movs	r0, #50	@ 0x32
 8003c02:	f005 fc33 	bl	800946c <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003c06:	2003      	movs	r0, #3
 8003c08:	f7fd fada 	bl	80011c0 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003c0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <menu+0x298c>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b23      	cmp	r3, #35	@ 0x23
 8003c12:	d13a      	bne.n	8003c8a <menu+0x296e>
		lcd_print(1, 1, menudenCikisText);
 8003c14:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <menu+0x2998>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f004 fecd 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003c1e:	4a26      	ldr	r2, [pc, #152]	@ (8003cb8 <menu+0x299c>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2002      	movs	r0, #2
 8003c24:	f004 fec8 	bl	80089b8 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003c28:	2108      	movs	r1, #8
 8003c2a:	481b      	ldr	r0, [pc, #108]	@ (8003c98 <menu+0x297c>)
 8003c2c:	f006 f9ee 	bl	800a00c <HAL_GPIO_ReadPin>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d129      	bne.n	8003c8a <menu+0x296e>
			menuGiris = 0;
 8003c36:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <menu+0x29a0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003c3c:	bf00      	nop
 8003c3e:	4820      	ldr	r0, [pc, #128]	@ (8003cc0 <menu+0x29a4>)
 8003c40:	f007 f80d 	bl	800ac5e <HAL_I2C_GetError>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d0f9      	beq.n	8003c3e <menu+0x2922>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003c4a:	bf00      	nop
 8003c4c:	481c      	ldr	r0, [pc, #112]	@ (8003cc0 <menu+0x29a4>)
 8003c4e:	f006 fff9 	bl	800ac44 <HAL_I2C_GetState>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d1f9      	bne.n	8003c4c <menu+0x2930>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003c58:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	236e      	movs	r3, #110	@ 0x6e
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <menu+0x2984>)
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	236e      	movs	r3, #110	@ 0x6e
 8003c68:	2200      	movs	r2, #0
 8003c6a:	21a0      	movs	r1, #160	@ 0xa0
 8003c6c:	4814      	ldr	r0, [pc, #80]	@ (8003cc0 <menu+0x29a4>)
 8003c6e:	f006 fc87 	bl	800a580 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003c72:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003c76:	f005 fbf9 	bl	800946c <HAL_Delay>

			lcd_clear();
 8003c7a:	f004 fec9 	bl	8008a10 <lcd_clear>
			HAL_Delay(500);
 8003c7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c82:	f005 fbf3 	bl	800946c <HAL_Delay>
			NVIC_SystemReset();
 8003c86:	f7fd fb33 	bl	80012f0 <__NVIC_SystemReset>
		}
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200010e7 	.word	0x200010e7
 8003c94:	200013b8 	.word	0x200013b8
 8003c98:	40010800 	.word	0x40010800
 8003c9c:	200010f7 	.word	0x200010f7
 8003ca0:	20000ff0 	.word	0x20000ff0
 8003ca4:	200010f4 	.word	0x200010f4
 8003ca8:	200010c8 	.word	0x200010c8
 8003cac:	200010e8 	.word	0x200010e8
 8003cb0:	200010c0 	.word	0x200010c0
 8003cb4:	20001764 	.word	0x20001764
 8003cb8:	20001778 	.word	0x20001778
 8003cbc:	200010e5 	.word	0x200010e5
 8003cc0:	20001944 	.word	0x20001944

08003cc4 <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003cd4:	4a22      	ldr	r2, [pc, #136]	@ (8003d60 <lcdUpdate+0x9c>)
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f004 fe6d 	bl	80089b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003cde:	e03b      	b.n	8003d58 <lcdUpdate+0x94>
	} else if(y==2) {
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d105      	bne.n	8003cf2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <lcdUpdate+0x9c>)
 8003ce8:	2102      	movs	r1, #2
 8003cea:	2002      	movs	r0, #2
 8003cec:	f004 fe64 	bl	80089b8 <lcd_print>
}
 8003cf0:	e032      	b.n	8003d58 <lcdUpdate+0x94>
	} else if(y==3) {
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d105      	bne.n	8003d04 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003cf8:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <lcdUpdate+0x9c>)
 8003cfa:	2103      	movs	r1, #3
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f004 fe5b 	bl	80089b8 <lcd_print>
}
 8003d02:	e029      	b.n	8003d58 <lcdUpdate+0x94>
	} else if(y==4) {
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d105      	bne.n	8003d16 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003d0a:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <lcdUpdate+0x9c>)
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	2002      	movs	r0, #2
 8003d10:	f004 fe52 	bl	80089b8 <lcd_print>
}
 8003d14:	e020      	b.n	8003d58 <lcdUpdate+0x94>
	} else if(y==5) {
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d105      	bne.n	8003d28 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003d1c:	4a10      	ldr	r2, [pc, #64]	@ (8003d60 <lcdUpdate+0x9c>)
 8003d1e:	2105      	movs	r1, #5
 8003d20:	2002      	movs	r0, #2
 8003d22:	f004 fe49 	bl	80089b8 <lcd_print>
}
 8003d26:	e017      	b.n	8003d58 <lcdUpdate+0x94>
	} else if(y==6) {
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d105      	bne.n	8003d3a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <lcdUpdate+0x9c>)
 8003d30:	2106      	movs	r1, #6
 8003d32:	2002      	movs	r0, #2
 8003d34:	f004 fe40 	bl	80089b8 <lcd_print>
}
 8003d38:	e00e      	b.n	8003d58 <lcdUpdate+0x94>
	} else if (y==7) {
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d10b      	bne.n	8003d58 <lcdUpdate+0x94>
		lcd_clear();
 8003d40:	f004 fe66 	bl	8008a10 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003d44:	4a07      	ldr	r2, [pc, #28]	@ (8003d64 <lcdUpdate+0xa0>)
 8003d46:	2101      	movs	r1, #1
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f004 fe35 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003d4e:	4a06      	ldr	r2, [pc, #24]	@ (8003d68 <lcdUpdate+0xa4>)
 8003d50:	2101      	movs	r1, #1
 8003d52:	2002      	movs	r0, #2
 8003d54:	f004 fe30 	bl	80089b8 <lcd_print>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0800dd88 	.word	0x0800dd88
 8003d64:	200000c8 	.word	0x200000c8
 8003d68:	200000dc 	.word	0x200000dc

08003d6c <checkLCDBacklight>:

void checkLCDBacklight() {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <checkLCDBacklight+0x24>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <checkLCDBacklight+0x28>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b3b      	cmp	r3, #59	@ 0x3b
 8003d7c:	d903      	bls.n	8003d86 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f004 fe66 	bl	8008a50 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003d84:	e002      	b.n	8003d8c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003d86:	2001      	movs	r0, #1
 8003d88:	f004 fe62 	bl	8008a50 <lcd_backlight>
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200010a0 	.word	0x200010a0
 8003d94:	200010bc 	.word	0x200010bc

08003d98 <bekle>:

void bekle() {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
	timer1=millis;
 8003d9c:	4b47      	ldr	r3, [pc, #284]	@ (8003ebc <bekle+0x124>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a47      	ldr	r2, [pc, #284]	@ (8003ec0 <bekle+0x128>)
 8003da2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003da4:	e002      	b.n	8003dac <bekle+0x14>
    	butonKontrol = 1;
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <bekle+0x12c>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dac:	2101      	movs	r1, #1
 8003dae:	4846      	ldr	r0, [pc, #280]	@ (8003ec8 <bekle+0x130>)
 8003db0:	f006 f92c 	bl	800a00c <HAL_GPIO_ReadPin>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d109      	bne.n	8003dce <bekle+0x36>
 8003dba:	4b40      	ldr	r3, [pc, #256]	@ (8003ebc <bekle+0x124>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b40      	ldr	r3, [pc, #256]	@ (8003ec0 <bekle+0x128>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d0ef      	beq.n	8003da6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dc6:	e002      	b.n	8003dce <bekle+0x36>
    	butonKontrol = 1;
 8003dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec4 <bekle+0x12c>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dce:	2108      	movs	r1, #8
 8003dd0:	483e      	ldr	r0, [pc, #248]	@ (8003ecc <bekle+0x134>)
 8003dd2:	f006 f91b 	bl	800a00c <HAL_GPIO_ReadPin>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d109      	bne.n	8003df0 <bekle+0x58>
 8003ddc:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <bekle+0x124>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <bekle+0x128>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d0ef      	beq.n	8003dc8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003de8:	e002      	b.n	8003df0 <bekle+0x58>
    	butonKontrol = 1;
 8003dea:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <bekle+0x12c>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003df0:	2102      	movs	r1, #2
 8003df2:	4835      	ldr	r0, [pc, #212]	@ (8003ec8 <bekle+0x130>)
 8003df4:	f006 f90a 	bl	800a00c <HAL_GPIO_ReadPin>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d109      	bne.n	8003e12 <bekle+0x7a>
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003ebc <bekle+0x124>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec0 <bekle+0x128>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d0ef      	beq.n	8003dea <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e0a:	e002      	b.n	8003e12 <bekle+0x7a>
    	butonKontrol = 1;
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <bekle+0x12c>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e12:	2104      	movs	r1, #4
 8003e14:	482c      	ldr	r0, [pc, #176]	@ (8003ec8 <bekle+0x130>)
 8003e16:	f006 f8f9 	bl	800a00c <HAL_GPIO_ReadPin>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d109      	bne.n	8003e34 <bekle+0x9c>
 8003e20:	4b26      	ldr	r3, [pc, #152]	@ (8003ebc <bekle+0x124>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <bekle+0x128>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d0ef      	beq.n	8003e0c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e2c:	e002      	b.n	8003e34 <bekle+0x9c>
    	butonKontrol = 1;
 8003e2e:	4b25      	ldr	r3, [pc, #148]	@ (8003ec4 <bekle+0x12c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e34:	2108      	movs	r1, #8
 8003e36:	4824      	ldr	r0, [pc, #144]	@ (8003ec8 <bekle+0x130>)
 8003e38:	f006 f8e8 	bl	800a00c <HAL_GPIO_ReadPin>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d109      	bne.n	8003e56 <bekle+0xbe>
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <bekle+0x124>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <bekle+0x128>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d0ef      	beq.n	8003e2e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e4e:	e002      	b.n	8003e56 <bekle+0xbe>
    	butonKontrol = 1;
 8003e50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec4 <bekle+0x12c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e56:	2180      	movs	r1, #128	@ 0x80
 8003e58:	481c      	ldr	r0, [pc, #112]	@ (8003ecc <bekle+0x134>)
 8003e5a:	f006 f8d7 	bl	800a00c <HAL_GPIO_ReadPin>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <bekle+0xe0>
 8003e64:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <bekle+0x124>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <bekle+0x128>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0ef      	beq.n	8003e50 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e70:	e002      	b.n	8003e78 <bekle+0xe0>
    	butonKontrol = 1;
 8003e72:	4b14      	ldr	r3, [pc, #80]	@ (8003ec4 <bekle+0x12c>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e7c:	4813      	ldr	r0, [pc, #76]	@ (8003ecc <bekle+0x134>)
 8003e7e:	f006 f8c5 	bl	800a00c <HAL_GPIO_ReadPin>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <bekle+0x104>
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <bekle+0x124>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <bekle+0x128>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d0ee      	beq.n	8003e72 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e94:	e002      	b.n	8003e9c <bekle+0x104>
    	butonKontrol = 1;
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <bekle+0x12c>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ea0:	480a      	ldr	r0, [pc, #40]	@ (8003ecc <bekle+0x134>)
 8003ea2:	f006 f8b3 	bl	800a00c <HAL_GPIO_ReadPin>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <bekle+0x120>
 8003eac:	4b03      	ldr	r3, [pc, #12]	@ (8003ebc <bekle+0x124>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b03      	ldr	r3, [pc, #12]	@ (8003ec0 <bekle+0x128>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d0ee      	beq.n	8003e96 <bekle+0xfe>
    }

}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	200010a0 	.word	0x200010a0
 8003ec0:	200010a8 	.word	0x200010a8
 8003ec4:	200010f7 	.word	0x200010f7
 8003ec8:	40010800 	.word	0x40010800
 8003ecc:	40011000 	.word	0x40011000

08003ed0 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4815      	ldr	r0, [pc, #84]	@ (8003f2c <buttonCheck+0x5c>)
 8003ed8:	f006 f898 	bl	800a00c <HAL_GPIO_ReadPin>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d01b      	beq.n	8003f1a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003ee2:	2108      	movs	r1, #8
 8003ee4:	4812      	ldr	r0, [pc, #72]	@ (8003f30 <buttonCheck+0x60>)
 8003ee6:	f006 f891 	bl	800a00c <HAL_GPIO_ReadPin>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d014      	beq.n	8003f1a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	480e      	ldr	r0, [pc, #56]	@ (8003f2c <buttonCheck+0x5c>)
 8003ef4:	f006 f88a 	bl	800a00c <HAL_GPIO_ReadPin>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d00d      	beq.n	8003f1a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003efe:	2104      	movs	r1, #4
 8003f00:	480a      	ldr	r0, [pc, #40]	@ (8003f2c <buttonCheck+0x5c>)
 8003f02:	f006 f883 	bl	800a00c <HAL_GPIO_ReadPin>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d006      	beq.n	8003f1a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	4807      	ldr	r0, [pc, #28]	@ (8003f2c <buttonCheck+0x5c>)
 8003f10:	f006 f87c 	bl	800a00c <HAL_GPIO_ReadPin>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d104      	bne.n	8003f24 <buttonCheck+0x54>
		backLightTimer = 0;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <buttonCheck+0x64>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
		return 1;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <buttonCheck+0x56>
	}
	return 0;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40010800 	.word	0x40010800
 8003f30:	40011000 	.word	0x40011000
 8003f34:	200010bc 	.word	0x200010bc

08003f38 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003f3c:	4b13      	ldr	r3, [pc, #76]	@ (8003f8c <checkBasincSalteri+0x54>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <checkBasincSalteri+0x12>
		basincVar=1;
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <checkBasincSalteri+0x58>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003f4a:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <checkBasincSalteri+0x54>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d119      	bne.n	8003f86 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003f52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f56:	480f      	ldr	r0, [pc, #60]	@ (8003f94 <checkBasincSalteri+0x5c>)
 8003f58:	f006 f858 	bl	800a00c <HAL_GPIO_ReadPin>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <checkBasincSalteri+0x60>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <checkBasincSalteri+0x64>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d90a      	bls.n	8003f86 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003f70:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <checkBasincSalteri+0x58>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003f76:	e006      	b.n	8003f86 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003f78:	4b07      	ldr	r3, [pc, #28]	@ (8003f98 <checkBasincSalteri+0x60>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a07      	ldr	r2, [pc, #28]	@ (8003f9c <checkBasincSalteri+0x64>)
 8003f7e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003f80:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <checkBasincSalteri+0x58>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200010cf 	.word	0x200010cf
 8003f90:	200010cb 	.word	0x200010cb
 8003f94:	40011000 	.word	0x40011000
 8003f98:	200010a0 	.word	0x200010a0
 8003f9c:	200010b8 	.word	0x200010b8

08003fa0 <checkBasGonder>:

void checkBasGonder() {
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <checkBasGonder+0x74>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10b      	bne.n	8003fc4 <checkBasGonder+0x24>
 8003fac:	4b1a      	ldr	r3, [pc, #104]	@ (8004018 <checkBasGonder+0x78>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <checkBasGonder+0x24>
 8003fb4:	4b19      	ldr	r3, [pc, #100]	@ (800401c <checkBasGonder+0x7c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003fbc:	4b18      	ldr	r3, [pc, #96]	@ (8004020 <checkBasGonder+0x80>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e009      	b.n	8003fd8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003fc4:	4b14      	ldr	r3, [pc, #80]	@ (8004018 <checkBasGonder+0x78>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003fd2:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <checkBasGonder+0x80>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <checkBasGonder+0x74>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10b      	bne.n	8003ff8 <checkBasGonder+0x58>
 8003fe0:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <checkBasGonder+0x84>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <checkBasGonder+0x58>
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <checkBasGonder+0x7c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <checkBasGonder+0x88>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003ff6:	e009      	b.n	800400c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8004024 <checkBasGonder+0x84>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f083 0301 	eor.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004006:	4b08      	ldr	r3, [pc, #32]	@ (8004028 <checkBasGonder+0x88>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	200010c9 	.word	0x200010c9
 8004018:	200010fd 	.word	0x200010fd
 800401c:	200010d7 	.word	0x200010d7
 8004020:	20001104 	.word	0x20001104
 8004024:	20001100 	.word	0x20001100
 8004028:	20001105 	.word	0x20001105

0800402c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004030:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <checkKapiSecimleri+0x98>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004038:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800403e:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <checkKapiSecimleri+0x98>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10e      	bne.n	8004064 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004046:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800404a:	4820      	ldr	r0, [pc, #128]	@ (80040cc <checkKapiSecimleri+0xa0>)
 800404c:	f005 ffde 	bl	800a00c <HAL_GPIO_ReadPin>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004056:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e002      	b.n	8004064 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800405e:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004064:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <checkKapiSecimleri+0x98>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d10e      	bne.n	800408a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800406c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004070:	4816      	ldr	r0, [pc, #88]	@ (80040cc <checkKapiSecimleri+0xa0>)
 8004072:	f005 ffcb 	bl	800a00c <HAL_GPIO_ReadPin>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e002      	b.n	800408a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004084:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800408a:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <checkKapiSecimleri+0x98>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d116      	bne.n	80040c0 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004092:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004096:	480d      	ldr	r0, [pc, #52]	@ (80040cc <checkKapiSecimleri+0xa0>)
 8004098:	f005 ffb8 	bl	800a00c <HAL_GPIO_ReadPin>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <checkKapiSecimleri+0x8e>
 80040a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040a6:	4809      	ldr	r0, [pc, #36]	@ (80040cc <checkKapiSecimleri+0xa0>)
 80040a8:	f005 ffb0 	bl	800a00c <HAL_GPIO_ReadPin>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80040b8:	e002      	b.n	80040c0 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80040ba:	4b03      	ldr	r3, [pc, #12]	@ (80040c8 <checkKapiSecimleri+0x9c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200010d0 	.word	0x200010d0
 80040c8:	2000111b 	.word	0x2000111b
 80040cc:	40010800 	.word	0x40010800

080040d0 <checkAktifCalisma>:

void checkAktifCalisma() {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80040d4:	4b62      	ldr	r3, [pc, #392]	@ (8004260 <checkAktifCalisma+0x190>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f041 833e 	bne.w	800575a <checkAktifCalisma+0x168a>
 80040de:	4b61      	ldr	r3, [pc, #388]	@ (8004264 <checkAktifCalisma+0x194>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f041 8339 	bne.w	800575a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80040e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004268 <checkAktifCalisma+0x198>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11a      	bne.n	8004126 <checkAktifCalisma+0x56>
 80040f0:	4b5e      	ldr	r3, [pc, #376]	@ (800426c <checkAktifCalisma+0x19c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <checkAktifCalisma+0x56>
 80040f8:	4b5d      	ldr	r3, [pc, #372]	@ (8004270 <checkAktifCalisma+0x1a0>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <checkAktifCalisma+0x46>
 8004100:	4b5c      	ldr	r3, [pc, #368]	@ (8004274 <checkAktifCalisma+0x1a4>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f083 0301 	eor.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <checkAktifCalisma+0x46>
 800410e:	4b5a      	ldr	r3, [pc, #360]	@ (8004278 <checkAktifCalisma+0x1a8>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d007      	beq.n	8004126 <checkAktifCalisma+0x56>
 8004116:	4b59      	ldr	r3, [pc, #356]	@ (800427c <checkAktifCalisma+0x1ac>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d018      	beq.n	8004150 <checkAktifCalisma+0x80>
 800411e:	4b58      	ldr	r3, [pc, #352]	@ (8004280 <checkAktifCalisma+0x1b0>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d114      	bne.n	8004150 <checkAktifCalisma+0x80>
 8004126:	4b57      	ldr	r3, [pc, #348]	@ (8004284 <checkAktifCalisma+0x1b4>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <checkAktifCalisma+0x80>
 800412e:	4b56      	ldr	r3, [pc, #344]	@ (8004288 <checkAktifCalisma+0x1b8>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004136:	2201      	movs	r2, #1
 8004138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800413c:	4853      	ldr	r0, [pc, #332]	@ (800428c <checkAktifCalisma+0x1bc>)
 800413e:	f005 ff7c 	bl	800a03a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004142:	4b53      	ldr	r3, [pc, #332]	@ (8004290 <checkAktifCalisma+0x1c0>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004148:	4b52      	ldr	r3, [pc, #328]	@ (8004294 <checkAktifCalisma+0x1c4>)
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e008      	b.n	8004162 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004156:	484d      	ldr	r0, [pc, #308]	@ (800428c <checkAktifCalisma+0x1bc>)
 8004158:	f005 ff6f 	bl	800a03a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 800415c:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <checkAktifCalisma+0x1c0>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004162:	4b40      	ldr	r3, [pc, #256]	@ (8004264 <checkAktifCalisma+0x194>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d160      	bne.n	800422c <checkAktifCalisma+0x15c>
 800416a:	4b46      	ldr	r3, [pc, #280]	@ (8004284 <checkAktifCalisma+0x1b4>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d05c      	beq.n	800422c <checkAktifCalisma+0x15c>
 8004172:	4b45      	ldr	r3, [pc, #276]	@ (8004288 <checkAktifCalisma+0x1b8>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d058      	beq.n	800422c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800417a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800417e:	4843      	ldr	r0, [pc, #268]	@ (800428c <checkAktifCalisma+0x1bc>)
 8004180:	f005 ff44 	bl	800a00c <HAL_GPIO_ReadPin>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <checkAktifCalisma+0xc2>
 800418a:	4b43      	ldr	r3, [pc, #268]	@ (8004298 <checkAktifCalisma+0x1c8>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d04c      	beq.n	800422c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004192:	2102      	movs	r1, #2
 8004194:	4841      	ldr	r0, [pc, #260]	@ (800429c <checkAktifCalisma+0x1cc>)
 8004196:	f005 ff39 	bl	800a00c <HAL_GPIO_ReadPin>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d145      	bne.n	800422c <checkAktifCalisma+0x15c>
				&& (basincVar)
 80041a0:	4b3f      	ldr	r3, [pc, #252]	@ (80042a0 <checkAktifCalisma+0x1d0>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d041      	beq.n	800422c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80041a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041ac:	4837      	ldr	r0, [pc, #220]	@ (800428c <checkAktifCalisma+0x1bc>)
 80041ae:	f005 ff2d 	bl	800a00c <HAL_GPIO_ReadPin>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10e      	bne.n	80041d6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80041b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041bc:	4833      	ldr	r0, [pc, #204]	@ (800428c <checkAktifCalisma+0x1bc>)
 80041be:	f005 ff25 	bl	800a00c <HAL_GPIO_ReadPin>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d106      	bne.n	80041d6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80041c8:	2140      	movs	r1, #64	@ 0x40
 80041ca:	4834      	ldr	r0, [pc, #208]	@ (800429c <checkAktifCalisma+0x1cc>)
 80041cc:	f005 ff1e 	bl	800a00c <HAL_GPIO_ReadPin>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d003      	beq.n	80041de <checkAktifCalisma+0x10e>
 80041d6:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <checkAktifCalisma+0x198>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d026      	beq.n	800422c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80041de:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <checkAktifCalisma+0x1a0>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f083 0301 	eor.w	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <checkAktifCalisma+0x19c>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f083 0301 	eor.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d018      	beq.n	800422c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80041fa:	4b20      	ldr	r3, [pc, #128]	@ (800427c <checkAktifCalisma+0x1ac>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d011      	beq.n	800422c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004208:	4b26      	ldr	r3, [pc, #152]	@ (80042a4 <checkAktifCalisma+0x1d4>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f083 0301 	eor.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004216:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <checkAktifCalisma+0x1d8>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	f083 0301 	eor.w	r3, r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004224:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <checkAktifCalisma+0x198>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e002      	b.n	8004232 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 800422c:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <checkAktifCalisma+0x198>)
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <checkAktifCalisma+0x198>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d03a      	beq.n	80042b0 <checkAktifCalisma+0x1e0>
 800423a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800423e:	4817      	ldr	r0, [pc, #92]	@ (800429c <checkAktifCalisma+0x1cc>)
 8004240:	f005 fee4 	bl	800a00c <HAL_GPIO_ReadPin>
 8004244:	4603      	mov	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d132      	bne.n	80042b0 <checkAktifCalisma+0x1e0>
 800424a:	4b18      	ldr	r3, [pc, #96]	@ (80042ac <checkAktifCalisma+0x1dc>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02e      	beq.n	80042b0 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004252:	2201      	movs	r2, #1
 8004254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004258:	480c      	ldr	r0, [pc, #48]	@ (800428c <checkAktifCalisma+0x1bc>)
 800425a:	f005 feee 	bl	800a03a <HAL_GPIO_WritePin>
 800425e:	e02d      	b.n	80042bc <checkAktifCalisma+0x1ec>
 8004260:	200010e6 	.word	0x200010e6
 8004264:	200010e5 	.word	0x200010e5
 8004268:	200010fd 	.word	0x200010fd
 800426c:	200010fe 	.word	0x200010fe
 8004270:	20001100 	.word	0x20001100
 8004274:	200010f8 	.word	0x200010f8
 8004278:	200010db 	.word	0x200010db
 800427c:	200010ff 	.word	0x200010ff
 8004280:	200010da 	.word	0x200010da
 8004284:	2000111a 	.word	0x2000111a
 8004288:	2000111b 	.word	0x2000111b
 800428c:	40010c00 	.word	0x40010c00
 8004290:	2000111c 	.word	0x2000111c
 8004294:	20001107 	.word	0x20001107
 8004298:	20001104 	.word	0x20001104
 800429c:	40011000 	.word	0x40011000
 80042a0:	200010cb 	.word	0x200010cb
 80042a4:	20001102 	.word	0x20001102
 80042a8:	20001103 	.word	0x20001103
 80042ac:	200010d6 	.word	0x200010d6
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042b6:	4860      	ldr	r0, [pc, #384]	@ (8004438 <checkAktifCalisma+0x368>)
 80042b8:	f005 febf 	bl	800a03a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80042bc:	4b5f      	ldr	r3, [pc, #380]	@ (800443c <checkAktifCalisma+0x36c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <checkAktifCalisma+0x21c>
 80042c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004440 <checkAktifCalisma+0x370>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d007      	beq.n	80042dc <checkAktifCalisma+0x20c>
 80042cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004440 <checkAktifCalisma+0x370>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d003      	beq.n	80042dc <checkAktifCalisma+0x20c>
 80042d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004444 <checkAktifCalisma+0x374>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80042dc:	2201      	movs	r2, #1
 80042de:	2104      	movs	r1, #4
 80042e0:	4855      	ldr	r0, [pc, #340]	@ (8004438 <checkAktifCalisma+0x368>)
 80042e2:	f005 feaa 	bl	800a03a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80042e6:	4b58      	ldr	r3, [pc, #352]	@ (8004448 <checkAktifCalisma+0x378>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80042ec:	4b56      	ldr	r3, [pc, #344]	@ (8004448 <checkAktifCalisma+0x378>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02f      	beq.n	8004354 <checkAktifCalisma+0x284>
 80042f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042f8:	484f      	ldr	r0, [pc, #316]	@ (8004438 <checkAktifCalisma+0x368>)
 80042fa:	f005 fe87 	bl	800a00c <HAL_GPIO_ReadPin>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b01      	cmp	r3, #1
 8004302:	d106      	bne.n	8004312 <checkAktifCalisma+0x242>
 8004304:	4b51      	ldr	r3, [pc, #324]	@ (800444c <checkAktifCalisma+0x37c>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <checkAktifCalisma+0x250>
 8004312:	2102      	movs	r1, #2
 8004314:	484e      	ldr	r0, [pc, #312]	@ (8004450 <checkAktifCalisma+0x380>)
 8004316:	f005 fe79 	bl	800a00c <HAL_GPIO_ReadPin>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d119      	bne.n	8004354 <checkAktifCalisma+0x284>
 8004320:	4b4c      	ldr	r3, [pc, #304]	@ (8004454 <checkAktifCalisma+0x384>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <checkAktifCalisma+0x284>
 8004328:	4b4b      	ldr	r3, [pc, #300]	@ (8004458 <checkAktifCalisma+0x388>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d011      	beq.n	8004354 <checkAktifCalisma+0x284>
 8004330:	4b4a      	ldr	r3, [pc, #296]	@ (800445c <checkAktifCalisma+0x38c>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00d      	beq.n	8004354 <checkAktifCalisma+0x284>
 8004338:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <checkAktifCalisma+0x390>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d006      	beq.n	8004354 <checkAktifCalisma+0x284>
			timer2=millis;
 8004346:	4b47      	ldr	r3, [pc, #284]	@ (8004464 <checkAktifCalisma+0x394>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a47      	ldr	r2, [pc, #284]	@ (8004468 <checkAktifCalisma+0x398>)
 800434c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800434e:	4b44      	ldr	r3, [pc, #272]	@ (8004460 <checkAktifCalisma+0x390>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004354:	4b43      	ldr	r3, [pc, #268]	@ (8004464 <checkAktifCalisma+0x394>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <checkAktifCalisma+0x398>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	4a43      	ldr	r2, [pc, #268]	@ (800446c <checkAktifCalisma+0x39c>)
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	4293      	cmp	r3, r2
 8004364:	d303      	bcc.n	800436e <checkAktifCalisma+0x29e>
 8004366:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <checkAktifCalisma+0x390>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d111      	bne.n	8004392 <checkAktifCalisma+0x2c2>
 800436e:	4b39      	ldr	r3, [pc, #228]	@ (8004454 <checkAktifCalisma+0x384>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <checkAktifCalisma+0x2c2>
 800437c:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <checkAktifCalisma+0x388>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f083 0301 	eor.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <checkAktifCalisma+0x2c2>
 800438a:	4b34      	ldr	r3, [pc, #208]	@ (800445c <checkAktifCalisma+0x38c>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004392:	2200      	movs	r2, #0
 8004394:	2104      	movs	r1, #4
 8004396:	4828      	ldr	r0, [pc, #160]	@ (8004438 <checkAktifCalisma+0x368>)
 8004398:	f005 fe4f 	bl	800a03a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800439c:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <checkAktifCalisma+0x378>)
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80043a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004460 <checkAktifCalisma+0x390>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80043a8:	4b31      	ldr	r3, [pc, #196]	@ (8004470 <checkAktifCalisma+0x3a0>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80043b0:	4b30      	ldr	r3, [pc, #192]	@ (8004474 <checkAktifCalisma+0x3a4>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80043b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004470 <checkAktifCalisma+0x3a0>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d116      	bne.n	80043ec <checkAktifCalisma+0x31c>
 80043be:	4b2e      	ldr	r3, [pc, #184]	@ (8004478 <checkAktifCalisma+0x3a8>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d112      	bne.n	80043ec <checkAktifCalisma+0x31c>
 80043c6:	2101      	movs	r1, #1
 80043c8:	4821      	ldr	r0, [pc, #132]	@ (8004450 <checkAktifCalisma+0x380>)
 80043ca:	f005 fe1f 	bl	800a00c <HAL_GPIO_ReadPin>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <checkAktifCalisma+0x31c>
 80043d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043d8:	4817      	ldr	r0, [pc, #92]	@ (8004438 <checkAktifCalisma+0x368>)
 80043da:	f005 fe17 	bl	800a00c <HAL_GPIO_ReadPin>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80043e4:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <checkAktifCalisma+0x3a4>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e011      	b.n	8004410 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80043ec:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <checkAktifCalisma+0x3a0>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10d      	bne.n	8004410 <checkAktifCalisma+0x340>
 80043f4:	2101      	movs	r1, #1
 80043f6:	4816      	ldr	r0, [pc, #88]	@ (8004450 <checkAktifCalisma+0x380>)
 80043f8:	f005 fe08 	bl	800a00c <HAL_GPIO_ReadPin>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d106      	bne.n	8004410 <checkAktifCalisma+0x340>
 8004402:	4b1d      	ldr	r3, [pc, #116]	@ (8004478 <checkAktifCalisma+0x3a8>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800440a:	4b1a      	ldr	r3, [pc, #104]	@ (8004474 <checkAktifCalisma+0x3a4>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <checkAktifCalisma+0x3a0>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d134      	bne.n	8004482 <checkAktifCalisma+0x3b2>
 8004418:	4b17      	ldr	r3, [pc, #92]	@ (8004478 <checkAktifCalisma+0x3a8>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d130      	bne.n	8004482 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004420:	2101      	movs	r1, #1
 8004422:	480b      	ldr	r0, [pc, #44]	@ (8004450 <checkAktifCalisma+0x380>)
 8004424:	f005 fdf2 	bl	800a00c <HAL_GPIO_ReadPin>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d126      	bne.n	800447c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800442e:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <checkAktifCalisma+0x3a4>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	e025      	b.n	8004482 <checkAktifCalisma+0x3b2>
 8004436:	bf00      	nop
 8004438:	40010c00 	.word	0x40010c00
 800443c:	200010fd 	.word	0x200010fd
 8004440:	200010d7 	.word	0x200010d7
 8004444:	200010db 	.word	0x200010db
 8004448:	20001101 	.word	0x20001101
 800444c:	20001104 	.word	0x20001104
 8004450:	40011000 	.word	0x40011000
 8004454:	2000111a 	.word	0x2000111a
 8004458:	2000111b 	.word	0x2000111b
 800445c:	200010cb 	.word	0x200010cb
 8004460:	200010f9 	.word	0x200010f9
 8004464:	200010a0 	.word	0x200010a0
 8004468:	200010ac 	.word	0x200010ac
 800446c:	200010dc 	.word	0x200010dc
 8004470:	200010cc 	.word	0x200010cc
 8004474:	2000111f 	.word	0x2000111f
 8004478:	200010c9 	.word	0x200010c9
			} else {
				cerceveVar=0;
 800447c:	4b7f      	ldr	r3, [pc, #508]	@ (800467c <checkAktifCalisma+0x5ac>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004482:	4b7f      	ldr	r3, [pc, #508]	@ (8004680 <checkAktifCalisma+0x5b0>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d17c      	bne.n	8004584 <checkAktifCalisma+0x4b4>
 800448a:	4b7e      	ldr	r3, [pc, #504]	@ (8004684 <checkAktifCalisma+0x5b4>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d078      	beq.n	8004584 <checkAktifCalisma+0x4b4>
 8004492:	4b7d      	ldr	r3, [pc, #500]	@ (8004688 <checkAktifCalisma+0x5b8>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d074      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800449a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800449e:	487b      	ldr	r0, [pc, #492]	@ (800468c <checkAktifCalisma+0x5bc>)
 80044a0:	f005 fdb4 	bl	800a00c <HAL_GPIO_ReadPin>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <checkAktifCalisma+0x3e2>
 80044aa:	4b79      	ldr	r3, [pc, #484]	@ (8004690 <checkAktifCalisma+0x5c0>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d068      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80044b2:	4b72      	ldr	r3, [pc, #456]	@ (800467c <checkAktifCalisma+0x5ac>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d064      	beq.n	8004584 <checkAktifCalisma+0x4b4>
 80044ba:	4b76      	ldr	r3, [pc, #472]	@ (8004694 <checkAktifCalisma+0x5c4>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	f083 0301 	eor.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05d      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80044c8:	2104      	movs	r1, #4
 80044ca:	4873      	ldr	r0, [pc, #460]	@ (8004698 <checkAktifCalisma+0x5c8>)
 80044cc:	f005 fd9e 	bl	800a00c <HAL_GPIO_ReadPin>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <checkAktifCalisma+0x40e>
 80044d6:	4b71      	ldr	r3, [pc, #452]	@ (800469c <checkAktifCalisma+0x5cc>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d152      	bne.n	8004584 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80044de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044e2:	486a      	ldr	r0, [pc, #424]	@ (800468c <checkAktifCalisma+0x5bc>)
 80044e4:	f005 fd92 	bl	800a00c <HAL_GPIO_ReadPin>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10e      	bne.n	800450c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80044ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044f2:	4866      	ldr	r0, [pc, #408]	@ (800468c <checkAktifCalisma+0x5bc>)
 80044f4:	f005 fd8a 	bl	800a00c <HAL_GPIO_ReadPin>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d106      	bne.n	800450c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80044fe:	2140      	movs	r1, #64	@ 0x40
 8004500:	4865      	ldr	r0, [pc, #404]	@ (8004698 <checkAktifCalisma+0x5c8>)
 8004502:	f005 fd83 	bl	800a00c <HAL_GPIO_ReadPin>
 8004506:	4603      	mov	r3, r0
 8004508:	2b01      	cmp	r3, #1
 800450a:	d003      	beq.n	8004514 <checkAktifCalisma+0x444>
 800450c:	4b64      	ldr	r3, [pc, #400]	@ (80046a0 <checkAktifCalisma+0x5d0>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d037      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004514:	4b63      	ldr	r3, [pc, #396]	@ (80046a4 <checkAktifCalisma+0x5d4>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f083 0301 	eor.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d030      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004522:	4b61      	ldr	r3, [pc, #388]	@ (80046a8 <checkAktifCalisma+0x5d8>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f083 0301 	eor.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d029      	beq.n	8004584 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004530:	4b5e      	ldr	r3, [pc, #376]	@ (80046ac <checkAktifCalisma+0x5dc>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d022      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800453e:	4b5c      	ldr	r3, [pc, #368]	@ (80046b0 <checkAktifCalisma+0x5e0>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800454c:	4b59      	ldr	r3, [pc, #356]	@ (80046b4 <checkAktifCalisma+0x5e4>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f083 0301 	eor.w	r3, r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d014      	beq.n	8004584 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800455a:	4b57      	ldr	r3, [pc, #348]	@ (80046b8 <checkAktifCalisma+0x5e8>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	f083 0301 	eor.w	r3, r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004568:	2201      	movs	r2, #1
 800456a:	2102      	movs	r1, #2
 800456c:	4847      	ldr	r0, [pc, #284]	@ (800468c <checkAktifCalisma+0x5bc>)
 800456e:	f005 fd64 	bl	800a03a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004572:	4b4b      	ldr	r3, [pc, #300]	@ (80046a0 <checkAktifCalisma+0x5d0>)
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004578:	4b50      	ldr	r3, [pc, #320]	@ (80046bc <checkAktifCalisma+0x5ec>)
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800457e:	4b50      	ldr	r3, [pc, #320]	@ (80046c0 <checkAktifCalisma+0x5f0>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004584:	4b46      	ldr	r3, [pc, #280]	@ (80046a0 <checkAktifCalisma+0x5d0>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d033      	beq.n	80045f4 <checkAktifCalisma+0x524>
 800458c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004590:	483e      	ldr	r0, [pc, #248]	@ (800468c <checkAktifCalisma+0x5bc>)
 8004592:	f005 fd3b 	bl	800a00c <HAL_GPIO_ReadPin>
 8004596:	4603      	mov	r3, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <checkAktifCalisma+0x4da>
 800459c:	4b3c      	ldr	r3, [pc, #240]	@ (8004690 <checkAktifCalisma+0x5c0>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f083 0301 	eor.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <checkAktifCalisma+0x4f0>
 80045aa:	2104      	movs	r1, #4
 80045ac:	483a      	ldr	r0, [pc, #232]	@ (8004698 <checkAktifCalisma+0x5c8>)
 80045ae:	f005 fd2d 	bl	800a00c <HAL_GPIO_ReadPin>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d11d      	bne.n	80045f4 <checkAktifCalisma+0x524>
 80045b8:	4b38      	ldr	r3, [pc, #224]	@ (800469c <checkAktifCalisma+0x5cc>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <checkAktifCalisma+0x524>
 80045c0:	4b30      	ldr	r3, [pc, #192]	@ (8004684 <checkAktifCalisma+0x5b4>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d015      	beq.n	80045f4 <checkAktifCalisma+0x524>
 80045c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004688 <checkAktifCalisma+0x5b8>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d011      	beq.n	80045f4 <checkAktifCalisma+0x524>
 80045d0:	4b2a      	ldr	r3, [pc, #168]	@ (800467c <checkAktifCalisma+0x5ac>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <checkAktifCalisma+0x524>
 80045d8:	4b3a      	ldr	r3, [pc, #232]	@ (80046c4 <checkAktifCalisma+0x5f4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f083 0301 	eor.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <checkAktifCalisma+0x524>
			timer2=millis;
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <checkAktifCalisma+0x5f8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a38      	ldr	r2, [pc, #224]	@ (80046cc <checkAktifCalisma+0x5fc>)
 80045ec:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80045ee:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <checkAktifCalisma+0x5f4>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <checkAktifCalisma+0x5f8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b34      	ldr	r3, [pc, #208]	@ (80046cc <checkAktifCalisma+0x5fc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	4a34      	ldr	r2, [pc, #208]	@ (80046d0 <checkAktifCalisma+0x600>)
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	4293      	cmp	r3, r2
 8004604:	d303      	bcc.n	800460e <checkAktifCalisma+0x53e>
 8004606:	4b2f      	ldr	r3, [pc, #188]	@ (80046c4 <checkAktifCalisma+0x5f4>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d114      	bne.n	8004638 <checkAktifCalisma+0x568>
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <checkAktifCalisma+0x5b4>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f083 0301 	eor.w	r3, r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <checkAktifCalisma+0x568>
 800461c:	4b1a      	ldr	r3, [pc, #104]	@ (8004688 <checkAktifCalisma+0x5b8>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f083 0301 	eor.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <checkAktifCalisma+0x568>
 800462a:	4b14      	ldr	r3, [pc, #80]	@ (800467c <checkAktifCalisma+0x5ac>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	f083 0301 	eor.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004638:	2200      	movs	r2, #0
 800463a:	2102      	movs	r1, #2
 800463c:	4813      	ldr	r0, [pc, #76]	@ (800468c <checkAktifCalisma+0x5bc>)
 800463e:	f005 fcfc 	bl	800a03a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8004642:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <checkAktifCalisma+0x5d0>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8004648:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <checkAktifCalisma+0x5f4>)
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800464e:	4b14      	ldr	r3, [pc, #80]	@ (80046a0 <checkAktifCalisma+0x5d0>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d040      	beq.n	80046d8 <checkAktifCalisma+0x608>
 8004656:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800465a:	480f      	ldr	r0, [pc, #60]	@ (8004698 <checkAktifCalisma+0x5c8>)
 800465c:	f005 fcd6 	bl	800a00c <HAL_GPIO_ReadPin>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d138      	bne.n	80046d8 <checkAktifCalisma+0x608>
 8004666:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <checkAktifCalisma+0x604>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d034      	beq.n	80046d8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800466e:	2201      	movs	r2, #1
 8004670:	2101      	movs	r1, #1
 8004672:	4806      	ldr	r0, [pc, #24]	@ (800468c <checkAktifCalisma+0x5bc>)
 8004674:	f005 fce1 	bl	800a03a <HAL_GPIO_WritePin>
 8004678:	e033      	b.n	80046e2 <checkAktifCalisma+0x612>
 800467a:	bf00      	nop
 800467c:	2000111f 	.word	0x2000111f
 8004680:	200010e5 	.word	0x200010e5
 8004684:	2000111a 	.word	0x2000111a
 8004688:	2000111b 	.word	0x2000111b
 800468c:	40010c00 	.word	0x40010c00
 8004690:	20001105 	.word	0x20001105
 8004694:	20001119 	.word	0x20001119
 8004698:	40011000 	.word	0x40011000
 800469c:	200010ce 	.word	0x200010ce
 80046a0:	20001100 	.word	0x20001100
 80046a4:	200010fd 	.word	0x200010fd
 80046a8:	20001101 	.word	0x20001101
 80046ac:	200010fe 	.word	0x200010fe
 80046b0:	200010ff 	.word	0x200010ff
 80046b4:	20001102 	.word	0x20001102
 80046b8:	20001103 	.word	0x20001103
 80046bc:	20001108 	.word	0x20001108
 80046c0:	20001129 	.word	0x20001129
 80046c4:	200010f8 	.word	0x200010f8
 80046c8:	200010a0 	.word	0x200010a0
 80046cc:	200010ac 	.word	0x200010ac
 80046d0:	200010dd 	.word	0x200010dd
 80046d4:	200010cd 	.word	0x200010cd
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80046d8:	2200      	movs	r2, #0
 80046da:	2101      	movs	r1, #1
 80046dc:	4836      	ldr	r0, [pc, #216]	@ (80047b8 <checkAktifCalisma+0x6e8>)
 80046de:	f005 fcac 	bl	800a03a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80046e2:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <checkAktifCalisma+0x6ec>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 8080 	bne.w	80047ec <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80046ec:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <checkAktifCalisma+0x6f0>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d003      	beq.n	80046fc <checkAktifCalisma+0x62c>
 80046f4:	4b32      	ldr	r3, [pc, #200]	@ (80047c0 <checkAktifCalisma+0x6f0>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d177      	bne.n	80047ec <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80046fc:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <checkAktifCalisma+0x6f4>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d073      	beq.n	80047ec <checkAktifCalisma+0x71c>
 8004704:	4b30      	ldr	r3, [pc, #192]	@ (80047c8 <checkAktifCalisma+0x6f8>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d06f      	beq.n	80047ec <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800470c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004710:	4829      	ldr	r0, [pc, #164]	@ (80047b8 <checkAktifCalisma+0x6e8>)
 8004712:	f005 fc7b 	bl	800a00c <HAL_GPIO_ReadPin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d167      	bne.n	80047ec <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800471c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004720:	482a      	ldr	r0, [pc, #168]	@ (80047cc <checkAktifCalisma+0x6fc>)
 8004722:	f005 fc73 	bl	800a00c <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <checkAktifCalisma+0x664>
 800472c:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <checkAktifCalisma+0x700>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d15b      	bne.n	80047ec <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004734:	2140      	movs	r1, #64	@ 0x40
 8004736:	4825      	ldr	r0, [pc, #148]	@ (80047cc <checkAktifCalisma+0x6fc>)
 8004738:	f005 fc68 	bl	800a00c <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10f      	bne.n	8004762 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004746:	481c      	ldr	r0, [pc, #112]	@ (80047b8 <checkAktifCalisma+0x6e8>)
 8004748:	f005 fc60 	bl	800a00c <HAL_GPIO_ReadPin>
 800474c:	4603      	mov	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004752:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004756:	4818      	ldr	r0, [pc, #96]	@ (80047b8 <checkAktifCalisma+0x6e8>)
 8004758:	f005 fc58 	bl	800a00c <HAL_GPIO_ReadPin>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d003      	beq.n	800476a <checkAktifCalisma+0x69a>
 8004762:	4b1c      	ldr	r3, [pc, #112]	@ (80047d4 <checkAktifCalisma+0x704>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d040      	beq.n	80047ec <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <checkAktifCalisma+0x708>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	f083 0301 	eor.w	r3, r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d039      	beq.n	80047ec <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8004778:	4b18      	ldr	r3, [pc, #96]	@ (80047dc <checkAktifCalisma+0x70c>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f083 0301 	eor.w	r3, r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d032      	beq.n	80047ec <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8004786:	4b16      	ldr	r3, [pc, #88]	@ (80047e0 <checkAktifCalisma+0x710>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f083 0301 	eor.w	r3, r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02b      	beq.n	80047ec <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8004794:	4b13      	ldr	r3, [pc, #76]	@ (80047e4 <checkAktifCalisma+0x714>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d024      	beq.n	80047ec <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <checkAktifCalisma+0x718>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f083 0301 	eor.w	r3, r3, #1
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01d      	beq.n	80047ec <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80047b0:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <checkAktifCalisma+0x704>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e01c      	b.n	80047f2 <checkAktifCalisma+0x722>
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	200010e5 	.word	0x200010e5
 80047c0:	200010d7 	.word	0x200010d7
 80047c4:	2000111a 	.word	0x2000111a
 80047c8:	2000111b 	.word	0x2000111b
 80047cc:	40011000 	.word	0x40011000
 80047d0:	200010d8 	.word	0x200010d8
 80047d4:	200010fe 	.word	0x200010fe
 80047d8:	200010fd 	.word	0x200010fd
 80047dc:	20001101 	.word	0x20001101
 80047e0:	20001100 	.word	0x20001100
 80047e4:	200010ff 	.word	0x200010ff
 80047e8:	20001103 	.word	0x20001103
		} else {
			devmotoryukaricalisiyor=0;
 80047ec:	4b64      	ldr	r3, [pc, #400]	@ (8004980 <checkAktifCalisma+0x8b0>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80047f2:	4b63      	ldr	r3, [pc, #396]	@ (8004980 <checkAktifCalisma+0x8b0>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80047fa:	2201      	movs	r2, #1
 80047fc:	2120      	movs	r1, #32
 80047fe:	4861      	ldr	r0, [pc, #388]	@ (8004984 <checkAktifCalisma+0x8b4>)
 8004800:	f005 fc1b 	bl	800a03a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8004804:	4b60      	ldr	r3, [pc, #384]	@ (8004988 <checkAktifCalisma+0x8b8>)
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800480a:	4b5f      	ldr	r3, [pc, #380]	@ (8004988 <checkAktifCalisma+0x8b8>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d025      	beq.n	800485e <checkAktifCalisma+0x78e>
 8004812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004816:	485d      	ldr	r0, [pc, #372]	@ (800498c <checkAktifCalisma+0x8bc>)
 8004818:	f005 fbf8 	bl	800a00c <HAL_GPIO_ReadPin>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d007      	beq.n	8004832 <checkAktifCalisma+0x762>
 8004822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004826:	4857      	ldr	r0, [pc, #348]	@ (8004984 <checkAktifCalisma+0x8b4>)
 8004828:	f005 fbf0 	bl	800a00c <HAL_GPIO_ReadPin>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d115      	bne.n	800485e <checkAktifCalisma+0x78e>
 8004832:	4b57      	ldr	r3, [pc, #348]	@ (8004990 <checkAktifCalisma+0x8c0>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <checkAktifCalisma+0x78e>
 800483a:	4b56      	ldr	r3, [pc, #344]	@ (8004994 <checkAktifCalisma+0x8c4>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <checkAktifCalisma+0x78e>
 8004842:	4b55      	ldr	r3, [pc, #340]	@ (8004998 <checkAktifCalisma+0x8c8>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	f083 0301 	eor.w	r3, r3, #1
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d006      	beq.n	800485e <checkAktifCalisma+0x78e>
			timer2=millis;
 8004850:	4b52      	ldr	r3, [pc, #328]	@ (800499c <checkAktifCalisma+0x8cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a52      	ldr	r2, [pc, #328]	@ (80049a0 <checkAktifCalisma+0x8d0>)
 8004856:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8004858:	4b4f      	ldr	r3, [pc, #316]	@ (8004998 <checkAktifCalisma+0x8c8>)
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800485e:	4b4f      	ldr	r3, [pc, #316]	@ (800499c <checkAktifCalisma+0x8cc>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b4f      	ldr	r3, [pc, #316]	@ (80049a0 <checkAktifCalisma+0x8d0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	4a4e      	ldr	r2, [pc, #312]	@ (80049a4 <checkAktifCalisma+0x8d4>)
 800486a:	7812      	ldrb	r2, [r2, #0]
 800486c:	4293      	cmp	r3, r2
 800486e:	d303      	bcc.n	8004878 <checkAktifCalisma+0x7a8>
 8004870:	4b49      	ldr	r3, [pc, #292]	@ (8004998 <checkAktifCalisma+0x8c8>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10d      	bne.n	8004894 <checkAktifCalisma+0x7c4>
 8004878:	4b45      	ldr	r3, [pc, #276]	@ (8004990 <checkAktifCalisma+0x8c0>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f083 0301 	eor.w	r3, r3, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <checkAktifCalisma+0x7c4>
 8004886:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <checkAktifCalisma+0x8c4>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	f083 0301 	eor.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004894:	2200      	movs	r2, #0
 8004896:	2120      	movs	r1, #32
 8004898:	483a      	ldr	r0, [pc, #232]	@ (8004984 <checkAktifCalisma+0x8b4>)
 800489a:	f005 fbce 	bl	800a03a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800489e:	4b3a      	ldr	r3, [pc, #232]	@ (8004988 <checkAktifCalisma+0x8b8>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80048a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004998 <checkAktifCalisma+0x8c8>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80048aa:	4b3f      	ldr	r3, [pc, #252]	@ (80049a8 <checkAktifCalisma+0x8d8>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 8088 	bne.w	80049c4 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80048b4:	4b3d      	ldr	r3, [pc, #244]	@ (80049ac <checkAktifCalisma+0x8dc>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d003      	beq.n	80048c4 <checkAktifCalisma+0x7f4>
 80048bc:	4b3b      	ldr	r3, [pc, #236]	@ (80049ac <checkAktifCalisma+0x8dc>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d17f      	bne.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80048c4:	4b32      	ldr	r3, [pc, #200]	@ (8004990 <checkAktifCalisma+0x8c0>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07b      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
 80048cc:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <checkAktifCalisma+0x8c4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d077      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80048d4:	2140      	movs	r1, #64	@ 0x40
 80048d6:	482b      	ldr	r0, [pc, #172]	@ (8004984 <checkAktifCalisma+0x8b4>)
 80048d8:	f005 fb98 	bl	800a00c <HAL_GPIO_ReadPin>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d170      	bne.n	80049c4 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80048e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048e6:	4827      	ldr	r0, [pc, #156]	@ (8004984 <checkAktifCalisma+0x8b4>)
 80048e8:	f005 fb90 	bl	800a00c <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <checkAktifCalisma+0x82a>
 80048f2:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <checkAktifCalisma+0x8e0>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d164      	bne.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80048fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048fe:	4823      	ldr	r0, [pc, #140]	@ (800498c <checkAktifCalisma+0x8bc>)
 8004900:	f005 fb84 	bl	800a00c <HAL_GPIO_ReadPin>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d10f      	bne.n	800492a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800490a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800490e:	481f      	ldr	r0, [pc, #124]	@ (800498c <checkAktifCalisma+0x8bc>)
 8004910:	f005 fb7c 	bl	800a00c <HAL_GPIO_ReadPin>
 8004914:	4603      	mov	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800491a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800491e:	481b      	ldr	r0, [pc, #108]	@ (800498c <checkAktifCalisma+0x8bc>)
 8004920:	f005 fb74 	bl	800a00c <HAL_GPIO_ReadPin>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d003      	beq.n	8004932 <checkAktifCalisma+0x862>
 800492a:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <checkAktifCalisma+0x8e4>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d048      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8004932:	4b21      	ldr	r3, [pc, #132]	@ (80049b8 <checkAktifCalisma+0x8e8>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f083 0301 	eor.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d041      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8004940:	4b1e      	ldr	r3, [pc, #120]	@ (80049bc <checkAktifCalisma+0x8ec>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f083 0301 	eor.w	r3, r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d03a      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800494e:	4b1c      	ldr	r3, [pc, #112]	@ (80049c0 <checkAktifCalisma+0x8f0>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f083 0301 	eor.w	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d033      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800495c:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <checkAktifCalisma+0x8b8>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f083 0301 	eor.w	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02c      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <checkAktifCalisma+0x8b0>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f083 0301 	eor.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d025      	beq.n	80049c4 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8004978:	4b0e      	ldr	r3, [pc, #56]	@ (80049b4 <checkAktifCalisma+0x8e4>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e024      	b.n	80049ca <checkAktifCalisma+0x8fa>
 8004980:	200010fe 	.word	0x200010fe
 8004984:	40011000 	.word	0x40011000
 8004988:	20001102 	.word	0x20001102
 800498c:	40010c00 	.word	0x40010c00
 8004990:	2000111a 	.word	0x2000111a
 8004994:	2000111b 	.word	0x2000111b
 8004998:	200010fa 	.word	0x200010fa
 800499c:	200010a0 	.word	0x200010a0
 80049a0:	200010ac 	.word	0x200010ac
 80049a4:	200010de 	.word	0x200010de
 80049a8:	200010e5 	.word	0x200010e5
 80049ac:	200010d7 	.word	0x200010d7
 80049b0:	200010d9 	.word	0x200010d9
 80049b4:	200010ff 	.word	0x200010ff
 80049b8:	200010fd 	.word	0x200010fd
 80049bc:	20001101 	.word	0x20001101
 80049c0:	20001100 	.word	0x20001100
		} else {
			devmotorasagicalisiyor=0;
 80049c4:	4b96      	ldr	r3, [pc, #600]	@ (8004c20 <checkAktifCalisma+0xb50>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80049ca:	4b95      	ldr	r3, [pc, #596]	@ (8004c20 <checkAktifCalisma+0xb50>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80049d2:	2201      	movs	r2, #1
 80049d4:	2110      	movs	r1, #16
 80049d6:	4893      	ldr	r0, [pc, #588]	@ (8004c24 <checkAktifCalisma+0xb54>)
 80049d8:	f005 fb2f 	bl	800a03a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80049dc:	4b92      	ldr	r3, [pc, #584]	@ (8004c28 <checkAktifCalisma+0xb58>)
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80049e2:	4b91      	ldr	r3, [pc, #580]	@ (8004c28 <checkAktifCalisma+0xb58>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d024      	beq.n	8004a34 <checkAktifCalisma+0x964>
 80049ea:	2140      	movs	r1, #64	@ 0x40
 80049ec:	488d      	ldr	r0, [pc, #564]	@ (8004c24 <checkAktifCalisma+0xb54>)
 80049ee:	f005 fb0d 	bl	800a00c <HAL_GPIO_ReadPin>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d007      	beq.n	8004a08 <checkAktifCalisma+0x938>
 80049f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049fc:	4889      	ldr	r0, [pc, #548]	@ (8004c24 <checkAktifCalisma+0xb54>)
 80049fe:	f005 fb05 	bl	800a00c <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d115      	bne.n	8004a34 <checkAktifCalisma+0x964>
 8004a08:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <checkAktifCalisma+0xb5c>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d011      	beq.n	8004a34 <checkAktifCalisma+0x964>
 8004a10:	4b87      	ldr	r3, [pc, #540]	@ (8004c30 <checkAktifCalisma+0xb60>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <checkAktifCalisma+0x964>
 8004a18:	4b86      	ldr	r3, [pc, #536]	@ (8004c34 <checkAktifCalisma+0xb64>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <checkAktifCalisma+0x964>
			timer2=millis;
 8004a26:	4b84      	ldr	r3, [pc, #528]	@ (8004c38 <checkAktifCalisma+0xb68>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a84      	ldr	r2, [pc, #528]	@ (8004c3c <checkAktifCalisma+0xb6c>)
 8004a2c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8004a2e:	4b81      	ldr	r3, [pc, #516]	@ (8004c34 <checkAktifCalisma+0xb64>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004a34:	4b80      	ldr	r3, [pc, #512]	@ (8004c38 <checkAktifCalisma+0xb68>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b80      	ldr	r3, [pc, #512]	@ (8004c3c <checkAktifCalisma+0xb6c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a80      	ldr	r2, [pc, #512]	@ (8004c40 <checkAktifCalisma+0xb70>)
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d303      	bcc.n	8004a4e <checkAktifCalisma+0x97e>
 8004a46:	4b7b      	ldr	r3, [pc, #492]	@ (8004c34 <checkAktifCalisma+0xb64>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10d      	bne.n	8004a6a <checkAktifCalisma+0x99a>
 8004a4e:	4b77      	ldr	r3, [pc, #476]	@ (8004c2c <checkAktifCalisma+0xb5c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	f083 0301 	eor.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <checkAktifCalisma+0x99a>
 8004a5c:	4b74      	ldr	r3, [pc, #464]	@ (8004c30 <checkAktifCalisma+0xb60>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2110      	movs	r1, #16
 8004a6e:	486d      	ldr	r0, [pc, #436]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004a70:	f005 fae3 	bl	800a03a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8004a74:	4b6c      	ldr	r3, [pc, #432]	@ (8004c28 <checkAktifCalisma+0xb58>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8004a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8004c34 <checkAktifCalisma+0xb64>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a84:	486f      	ldr	r0, [pc, #444]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004a86:	f005 fac1 	bl	800a00c <HAL_GPIO_ReadPin>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d120      	bne.n	8004ad2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a94:	486b      	ldr	r0, [pc, #428]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004a96:	f005 fab9 	bl	800a00c <HAL_GPIO_ReadPin>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d118      	bne.n	8004ad2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4868      	ldr	r0, [pc, #416]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004aa4:	f005 fab2 	bl	800a00c <HAL_GPIO_ReadPin>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d111      	bne.n	8004ad2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004aae:	2102      	movs	r1, #2
 8004ab0:	4864      	ldr	r0, [pc, #400]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004ab2:	f005 faab 	bl	800a00c <HAL_GPIO_ReadPin>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004abc:	2101      	movs	r1, #1
 8004abe:	4861      	ldr	r0, [pc, #388]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004ac0:	f005 faa4 	bl	800a00c <HAL_GPIO_ReadPin>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <checkAktifCalisma+0xa02>
			makineStop=1;
 8004aca:	4b5f      	ldr	r3, [pc, #380]	@ (8004c48 <checkAktifCalisma+0xb78>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	e002      	b.n	8004ad8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c48 <checkAktifCalisma+0xb78>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8004c4c <checkAktifCalisma+0xb7c>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d144      	bne.n	8004b6a <checkAktifCalisma+0xa9a>
 8004ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c50 <checkAktifCalisma+0xb80>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d003      	beq.n	8004af0 <checkAktifCalisma+0xa20>
 8004ae8:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <checkAktifCalisma+0xb80>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d13c      	bne.n	8004b6a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004af0:	2180      	movs	r1, #128	@ 0x80
 8004af2:	484c      	ldr	r0, [pc, #304]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004af4:	f005 fa8a 	bl	800a00c <HAL_GPIO_ReadPin>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <checkAktifCalisma+0xa36>
 8004afe:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <checkAktifCalisma+0xb84>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <checkAktifCalisma+0xa4e>
 8004b06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b0a:	484e      	ldr	r0, [pc, #312]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004b0c:	f005 fa7e 	bl	800a00c <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d129      	bne.n	8004b6a <checkAktifCalisma+0xa9a>
 8004b16:	4b4f      	ldr	r3, [pc, #316]	@ (8004c54 <checkAktifCalisma+0xb84>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d125      	bne.n	8004b6a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b1e:	2104      	movs	r1, #4
 8004b20:	4840      	ldr	r0, [pc, #256]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004b22:	f005 fa73 	bl	800a00c <HAL_GPIO_ReadPin>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d003      	beq.n	8004b34 <checkAktifCalisma+0xa64>
 8004b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c58 <checkAktifCalisma+0xb88>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11a      	bne.n	8004b6a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b34:	2102      	movs	r1, #2
 8004b36:	483b      	ldr	r0, [pc, #236]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004b38:	f005 fa68 	bl	800a00c <HAL_GPIO_ReadPin>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d113      	bne.n	8004b6a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004b42:	4b46      	ldr	r3, [pc, #280]	@ (8004c5c <checkAktifCalisma+0xb8c>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f083 0301 	eor.w	r3, r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00c      	beq.n	8004b6a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004b50:	4b3d      	ldr	r3, [pc, #244]	@ (8004c48 <checkAktifCalisma+0xb78>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004b58:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <checkAktifCalisma+0xb90>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004b5e:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <checkAktifCalisma+0xb68>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a40      	ldr	r2, [pc, #256]	@ (8004c64 <checkAktifCalisma+0xb94>)
 8004b64:	6013      	str	r3, [r2, #0]
			bekle();
 8004b66:	f7ff f917 	bl	8003d98 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004b6a:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <checkAktifCalisma+0xb68>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c64 <checkAktifCalisma+0xb94>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	4a3c      	ldr	r2, [pc, #240]	@ (8004c68 <checkAktifCalisma+0xb98>)
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d211      	bcs.n	8004ba0 <checkAktifCalisma+0xad0>
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	4829      	ldr	r0, [pc, #164]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004b80:	f005 fa44 	bl	800a00c <HAL_GPIO_ReadPin>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <checkAktifCalisma+0xad0>
 8004b8a:	4b33      	ldr	r3, [pc, #204]	@ (8004c58 <checkAktifCalisma+0xb88>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <checkAktifCalisma+0xad0>
 8004b92:	4b2d      	ldr	r3, [pc, #180]	@ (8004c48 <checkAktifCalisma+0xb78>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	f083 0301 	eor.w	r3, r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8004c60 <checkAktifCalisma+0xb90>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ba6:	4b29      	ldr	r3, [pc, #164]	@ (8004c4c <checkAktifCalisma+0xb7c>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d160      	bne.n	8004c70 <checkAktifCalisma+0xba0>
 8004bae:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <checkAktifCalisma+0xb80>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d003      	beq.n	8004bbe <checkAktifCalisma+0xaee>
 8004bb6:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <checkAktifCalisma+0xb80>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d158      	bne.n	8004c70 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	4818      	ldr	r0, [pc, #96]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004bc2:	f005 fa23 	bl	800a00c <HAL_GPIO_ReadPin>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d003      	beq.n	8004bd4 <checkAktifCalisma+0xb04>
 8004bcc:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <checkAktifCalisma+0xb88>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d14d      	bne.n	8004c70 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4813      	ldr	r0, [pc, #76]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004bd8:	f005 fa18 	bl	800a00c <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d146      	bne.n	8004c70 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004be2:	2180      	movs	r1, #128	@ 0x80
 8004be4:	480f      	ldr	r0, [pc, #60]	@ (8004c24 <checkAktifCalisma+0xb54>)
 8004be6:	f005 fa11 	bl	800a00c <HAL_GPIO_ReadPin>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <checkAktifCalisma+0xb28>
 8004bf0:	4b18      	ldr	r3, [pc, #96]	@ (8004c54 <checkAktifCalisma+0xb84>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <checkAktifCalisma+0xb40>
 8004bf8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bfc:	4811      	ldr	r0, [pc, #68]	@ (8004c44 <checkAktifCalisma+0xb74>)
 8004bfe:	f005 fa05 	bl	800a00c <HAL_GPIO_ReadPin>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d133      	bne.n	8004c70 <checkAktifCalisma+0xba0>
 8004c08:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <checkAktifCalisma+0xb84>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d12f      	bne.n	8004c70 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004c10:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <checkAktifCalisma+0xb78>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02b      	beq.n	8004c70 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004c18:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <checkAktifCalisma+0xb9c>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e02a      	b.n	8004c76 <checkAktifCalisma+0xba6>
 8004c20:	200010ff 	.word	0x200010ff
 8004c24:	40011000 	.word	0x40011000
 8004c28:	20001103 	.word	0x20001103
 8004c2c:	2000111a 	.word	0x2000111a
 8004c30:	2000111b 	.word	0x2000111b
 8004c34:	200010fb 	.word	0x200010fb
 8004c38:	200010a0 	.word	0x200010a0
 8004c3c:	200010ac 	.word	0x200010ac
 8004c40:	200010de 	.word	0x200010de
 8004c44:	40010c00 	.word	0x40010c00
 8004c48:	2000110a 	.word	0x2000110a
 8004c4c:	200010d1 	.word	0x200010d1
 8004c50:	200010d0 	.word	0x200010d0
 8004c54:	200010d4 	.word	0x200010d4
 8004c58:	200010ce 	.word	0x200010ce
 8004c5c:	200010f7 	.word	0x200010f7
 8004c60:	2000110b 	.word	0x2000110b
 8004c64:	200010a4 	.word	0x200010a4
 8004c68:	200010e1 	.word	0x200010e1
 8004c6c:	2000110c 	.word	0x2000110c
		} else {
			kapi1butonkontrol=0;
 8004c70:	4b8b      	ldr	r3, [pc, #556]	@ (8004ea0 <checkAktifCalisma+0xdd0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c76:	4b8b      	ldr	r3, [pc, #556]	@ (8004ea4 <checkAktifCalisma+0xdd4>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d121      	bne.n	8004cc2 <checkAktifCalisma+0xbf2>
 8004c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d003      	beq.n	8004c8e <checkAktifCalisma+0xbbe>
 8004c86:	4b88      	ldr	r3, [pc, #544]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d119      	bne.n	8004cc2 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c8e:	2104      	movs	r1, #4
 8004c90:	4886      	ldr	r0, [pc, #536]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004c92:	f005 f9bb 	bl	800a00c <HAL_GPIO_ReadPin>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d003      	beq.n	8004ca4 <checkAktifCalisma+0xbd4>
 8004c9c:	4b84      	ldr	r3, [pc, #528]	@ (8004eb0 <checkAktifCalisma+0xde0>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10e      	bne.n	8004cc2 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4881      	ldr	r0, [pc, #516]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004ca8:	f005 f9b0 	bl	800a00c <HAL_GPIO_ReadPin>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004cb2:	4b80      	ldr	r3, [pc, #512]	@ (8004eb4 <checkAktifCalisma+0xde4>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004cba:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb8 <checkAktifCalisma+0xde8>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e002      	b.n	8004cc8 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb8 <checkAktifCalisma+0xde8>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004cc8:	4b75      	ldr	r3, [pc, #468]	@ (8004ea0 <checkAktifCalisma+0xdd0>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <checkAktifCalisma+0xc10>
 8004cd0:	4b79      	ldr	r3, [pc, #484]	@ (8004eb8 <checkAktifCalisma+0xde8>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <checkAktifCalisma+0xc10>
 8004cd8:	4b78      	ldr	r3, [pc, #480]	@ (8004ebc <checkAktifCalisma+0xdec>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	4876      	ldr	r0, [pc, #472]	@ (8004ec0 <checkAktifCalisma+0xdf0>)
 8004ce6:	f005 f9a8 	bl	800a03a <HAL_GPIO_WritePin>
 8004cea:	e004      	b.n	8004cf6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	4873      	ldr	r0, [pc, #460]	@ (8004ec0 <checkAktifCalisma+0xdf0>)
 8004cf2:	f005 f9a2 	bl	800a03a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004cf6:	4b73      	ldr	r3, [pc, #460]	@ (8004ec4 <checkAktifCalisma+0xdf4>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d141      	bne.n	8004d82 <checkAktifCalisma+0xcb2>
 8004cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d003      	beq.n	8004d0e <checkAktifCalisma+0xc3e>
 8004d06:	4b68      	ldr	r3, [pc, #416]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d139      	bne.n	8004d82 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d12:	4866      	ldr	r0, [pc, #408]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004d14:	f005 f97a 	bl	800a00c <HAL_GPIO_ReadPin>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <checkAktifCalisma+0xc56>
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec8 <checkAktifCalisma+0xdf8>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <checkAktifCalisma+0xc6e>
 8004d26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d2a:	4868      	ldr	r0, [pc, #416]	@ (8004ecc <checkAktifCalisma+0xdfc>)
 8004d2c:	f005 f96e 	bl	800a00c <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d125      	bne.n	8004d82 <checkAktifCalisma+0xcb2>
 8004d36:	4b64      	ldr	r3, [pc, #400]	@ (8004ec8 <checkAktifCalisma+0xdf8>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d121      	bne.n	8004d82 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d3e:	2102      	movs	r1, #2
 8004d40:	485a      	ldr	r0, [pc, #360]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004d42:	f005 f963 	bl	800a00c <HAL_GPIO_ReadPin>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d11a      	bne.n	8004d82 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4857      	ldr	r0, [pc, #348]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004d50:	f005 f95c 	bl	800a00c <HAL_GPIO_ReadPin>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d113      	bne.n	8004d82 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004d5a:	4b56      	ldr	r3, [pc, #344]	@ (8004eb4 <checkAktifCalisma+0xde4>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00f      	beq.n	8004d82 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004d62:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed0 <checkAktifCalisma+0xe00>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	f083 0301 	eor.w	r3, r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004d70:	4b58      	ldr	r3, [pc, #352]	@ (8004ed4 <checkAktifCalisma+0xe04>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004d76:	4b58      	ldr	r3, [pc, #352]	@ (8004ed8 <checkAktifCalisma+0xe08>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a58      	ldr	r2, [pc, #352]	@ (8004edc <checkAktifCalisma+0xe0c>)
 8004d7c:	6013      	str	r3, [r2, #0]
			bekle();
 8004d7e:	f7ff f80b 	bl	8003d98 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004d82:	4b55      	ldr	r3, [pc, #340]	@ (8004ed8 <checkAktifCalisma+0xe08>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b55      	ldr	r3, [pc, #340]	@ (8004edc <checkAktifCalisma+0xe0c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	4a54      	ldr	r2, [pc, #336]	@ (8004ee0 <checkAktifCalisma+0xe10>)
 8004d8e:	7812      	ldrb	r2, [r2, #0]
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d20d      	bcs.n	8004db0 <checkAktifCalisma+0xce0>
 8004d94:	2102      	movs	r1, #2
 8004d96:	4845      	ldr	r0, [pc, #276]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004d98:	f005 f938 	bl	800a00c <HAL_GPIO_ReadPin>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d006      	beq.n	8004db0 <checkAktifCalisma+0xce0>
 8004da2:	4b44      	ldr	r3, [pc, #272]	@ (8004eb4 <checkAktifCalisma+0xde4>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f083 0301 	eor.w	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004db0:	4b48      	ldr	r3, [pc, #288]	@ (8004ed4 <checkAktifCalisma+0xe04>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004db6:	4b43      	ldr	r3, [pc, #268]	@ (8004ec4 <checkAktifCalisma+0xdf4>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d135      	bne.n	8004e2a <checkAktifCalisma+0xd5a>
 8004dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d003      	beq.n	8004dce <checkAktifCalisma+0xcfe>
 8004dc6:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d12d      	bne.n	8004e2a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004dd2:	4836      	ldr	r0, [pc, #216]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004dd4:	f005 f91a 	bl	800a00c <HAL_GPIO_ReadPin>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <checkAktifCalisma+0xd16>
 8004dde:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec8 <checkAktifCalisma+0xdf8>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <checkAktifCalisma+0xd2e>
 8004de6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dea:	4838      	ldr	r0, [pc, #224]	@ (8004ecc <checkAktifCalisma+0xdfc>)
 8004dec:	f005 f90e 	bl	800a00c <HAL_GPIO_ReadPin>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d119      	bne.n	8004e2a <checkAktifCalisma+0xd5a>
 8004df6:	4b34      	ldr	r3, [pc, #208]	@ (8004ec8 <checkAktifCalisma+0xdf8>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d115      	bne.n	8004e2a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004dfe:	2102      	movs	r1, #2
 8004e00:	482a      	ldr	r0, [pc, #168]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004e02:	f005 f903 	bl	800a00c <HAL_GPIO_ReadPin>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10e      	bne.n	8004e2a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e0c:	2104      	movs	r1, #4
 8004e0e:	4827      	ldr	r0, [pc, #156]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004e10:	f005 f8fc 	bl	800a00c <HAL_GPIO_ReadPin>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d107      	bne.n	8004e2a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004e1a:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <checkAktifCalisma+0xde4>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004e22:	4b30      	ldr	r3, [pc, #192]	@ (8004ee4 <checkAktifCalisma+0xe14>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e002      	b.n	8004e30 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee4 <checkAktifCalisma+0xe14>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e30:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <checkAktifCalisma+0xdf4>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d11d      	bne.n	8004e74 <checkAktifCalisma+0xda4>
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d003      	beq.n	8004e48 <checkAktifCalisma+0xd78>
 8004e40:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <checkAktifCalisma+0xdd8>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d115      	bne.n	8004e74 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004e48:	2102      	movs	r1, #2
 8004e4a:	4818      	ldr	r0, [pc, #96]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004e4c:	f005 f8de 	bl	800a00c <HAL_GPIO_ReadPin>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10e      	bne.n	8004e74 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e56:	2104      	movs	r1, #4
 8004e58:	4814      	ldr	r0, [pc, #80]	@ (8004eac <checkAktifCalisma+0xddc>)
 8004e5a:	f005 f8d7 	bl	800a00c <HAL_GPIO_ReadPin>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004e64:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <checkAktifCalisma+0xde4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <checkAktifCalisma+0xe18>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004e74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee8 <checkAktifCalisma+0xe18>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee4 <checkAktifCalisma+0xe14>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d107      	bne.n	8004e92 <checkAktifCalisma+0xdc2>
 8004e82:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <checkAktifCalisma+0xe18>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <checkAktifCalisma+0xdc2>
 8004e8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <checkAktifCalisma+0xe04>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02c      	beq.n	8004eec <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004e92:	2201      	movs	r2, #1
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	480a      	ldr	r0, [pc, #40]	@ (8004ec0 <checkAktifCalisma+0xdf0>)
 8004e98:	f005 f8cf 	bl	800a03a <HAL_GPIO_WritePin>
 8004e9c:	e02b      	b.n	8004ef6 <checkAktifCalisma+0xe26>
 8004e9e:	bf00      	nop
 8004ea0:	2000110c 	.word	0x2000110c
 8004ea4:	200010d1 	.word	0x200010d1
 8004ea8:	200010d0 	.word	0x200010d0
 8004eac:	40011000 	.word	0x40011000
 8004eb0:	200010ce 	.word	0x200010ce
 8004eb4:	2000110a 	.word	0x2000110a
 8004eb8:	2000110d 	.word	0x2000110d
 8004ebc:	2000110b 	.word	0x2000110b
 8004ec0:	40010800 	.word	0x40010800
 8004ec4:	200010d2 	.word	0x200010d2
 8004ec8:	200010d4 	.word	0x200010d4
 8004ecc:	40010c00 	.word	0x40010c00
 8004ed0:	200010f7 	.word	0x200010f7
 8004ed4:	2000110e 	.word	0x2000110e
 8004ed8:	200010a0 	.word	0x200010a0
 8004edc:	200010a4 	.word	0x200010a4
 8004ee0:	200010e2 	.word	0x200010e2
 8004ee4:	2000110f 	.word	0x2000110f
 8004ee8:	20001110 	.word	0x20001110
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004eec:	2200      	movs	r2, #0
 8004eee:	2140      	movs	r1, #64	@ 0x40
 8004ef0:	488d      	ldr	r0, [pc, #564]	@ (8005128 <checkAktifCalisma+0x1058>)
 8004ef2:	f005 f8a2 	bl	800a03a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800512c <checkAktifCalisma+0x105c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <checkAktifCalisma+0xe36>
 8004efe:	4b8b      	ldr	r3, [pc, #556]	@ (800512c <checkAktifCalisma+0x105c>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d115      	bne.n	8004f32 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f06:	2104      	movs	r1, #4
 8004f08:	4889      	ldr	r0, [pc, #548]	@ (8005130 <checkAktifCalisma+0x1060>)
 8004f0a:	f005 f87f 	bl	800a00c <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d003      	beq.n	8004f1c <checkAktifCalisma+0xe4c>
 8004f14:	4b87      	ldr	r3, [pc, #540]	@ (8005134 <checkAktifCalisma+0x1064>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	4884      	ldr	r0, [pc, #528]	@ (8005130 <checkAktifCalisma+0x1060>)
 8004f20:	f005 f874 	bl	800a00c <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004f2a:	4b83      	ldr	r3, [pc, #524]	@ (8005138 <checkAktifCalisma+0x1068>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e002      	b.n	8004f38 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004f32:	4b81      	ldr	r3, [pc, #516]	@ (8005138 <checkAktifCalisma+0x1068>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004f38:	4b7c      	ldr	r3, [pc, #496]	@ (800512c <checkAktifCalisma+0x105c>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d003      	beq.n	8004f48 <checkAktifCalisma+0xe78>
 8004f40:	4b7a      	ldr	r3, [pc, #488]	@ (800512c <checkAktifCalisma+0x105c>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d111      	bne.n	8004f6c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004f48:	2102      	movs	r1, #2
 8004f4a:	4879      	ldr	r0, [pc, #484]	@ (8005130 <checkAktifCalisma+0x1060>)
 8004f4c:	f005 f85e 	bl	800a00c <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10a      	bne.n	8004f6c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004f56:	2104      	movs	r1, #4
 8004f58:	4875      	ldr	r0, [pc, #468]	@ (8005130 <checkAktifCalisma+0x1060>)
 8004f5a:	f005 f857 	bl	800a00c <HAL_GPIO_ReadPin>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d103      	bne.n	8004f6c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8004f64:	4b75      	ldr	r3, [pc, #468]	@ (800513c <checkAktifCalisma+0x106c>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e002      	b.n	8004f72 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8004f6c:	4b73      	ldr	r3, [pc, #460]	@ (800513c <checkAktifCalisma+0x106c>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8004f72:	4b71      	ldr	r3, [pc, #452]	@ (8005138 <checkAktifCalisma+0x1068>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00f      	beq.n	8004f9a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8004f7a:	4b71      	ldr	r3, [pc, #452]	@ (8005140 <checkAktifCalisma+0x1070>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10b      	bne.n	8004f9a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004f82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f86:	486f      	ldr	r0, [pc, #444]	@ (8005144 <checkAktifCalisma+0x1074>)
 8004f88:	f005 f840 	bl	800a00c <HAL_GPIO_ReadPin>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8004f92:	4b6d      	ldr	r3, [pc, #436]	@ (8005148 <checkAktifCalisma+0x1078>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e002      	b.n	8004fa0 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8004f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8005148 <checkAktifCalisma+0x1078>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8004fa0:	4b66      	ldr	r3, [pc, #408]	@ (800513c <checkAktifCalisma+0x106c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8004fa8:	4b65      	ldr	r3, [pc, #404]	@ (8005140 <checkAktifCalisma+0x1070>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10b      	bne.n	8004fc8 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004fb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fb4:	4863      	ldr	r0, [pc, #396]	@ (8005144 <checkAktifCalisma+0x1074>)
 8004fb6:	f005 f829 	bl	800a00c <HAL_GPIO_ReadPin>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8004fc0:	4b62      	ldr	r3, [pc, #392]	@ (800514c <checkAktifCalisma+0x107c>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8004fc8:	4b60      	ldr	r3, [pc, #384]	@ (800514c <checkAktifCalisma+0x107c>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004fce:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <checkAktifCalisma+0x1080>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d137      	bne.n	8005046 <checkAktifCalisma+0xf76>
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8005154 <checkAktifCalisma+0x1084>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d003      	beq.n	8004fe6 <checkAktifCalisma+0xf16>
 8004fde:	4b5d      	ldr	r3, [pc, #372]	@ (8005154 <checkAktifCalisma+0x1084>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d12f      	bne.n	8005046 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004fe6:	4b54      	ldr	r3, [pc, #336]	@ (8005138 <checkAktifCalisma+0x1068>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <checkAktifCalisma+0xf26>
 8004fee:	4b53      	ldr	r3, [pc, #332]	@ (800513c <checkAktifCalisma+0x106c>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d027      	beq.n	8005046 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8004ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ffa:	484d      	ldr	r0, [pc, #308]	@ (8005130 <checkAktifCalisma+0x1060>)
 8004ffc:	f005 f806 	bl	800a00c <HAL_GPIO_ReadPin>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <checkAktifCalisma+0xf3e>
 8005006:	4b4e      	ldr	r3, [pc, #312]	@ (8005140 <checkAktifCalisma+0x1070>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800500e:	4b4e      	ldr	r3, [pc, #312]	@ (8005148 <checkAktifCalisma+0x1078>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <checkAktifCalisma+0xf4e>
 8005016:	4b4d      	ldr	r3, [pc, #308]	@ (800514c <checkAktifCalisma+0x107c>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d013      	beq.n	8005046 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800501e:	4b4e      	ldr	r3, [pc, #312]	@ (8005158 <checkAktifCalisma+0x1088>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00f      	beq.n	8005046 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005026:	4b4d      	ldr	r3, [pc, #308]	@ (800515c <checkAktifCalisma+0x108c>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f083 0301 	eor.w	r3, r3, #1
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005034:	4b4a      	ldr	r3, [pc, #296]	@ (8005160 <checkAktifCalisma+0x1090>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800503a:	4b4a      	ldr	r3, [pc, #296]	@ (8005164 <checkAktifCalisma+0x1094>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <checkAktifCalisma+0x1098>)
 8005040:	6013      	str	r3, [r2, #0]
			bekle();
 8005042:	f7fe fea9 	bl	8003d98 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005046:	4b47      	ldr	r3, [pc, #284]	@ (8005164 <checkAktifCalisma+0x1094>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <checkAktifCalisma+0x1098>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	4a46      	ldr	r2, [pc, #280]	@ (800516c <checkAktifCalisma+0x109c>)
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	4293      	cmp	r3, r2
 8005056:	d214      	bcs.n	8005082 <checkAktifCalisma+0xfb2>
 8005058:	4b37      	ldr	r3, [pc, #220]	@ (8005138 <checkAktifCalisma+0x1068>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f083 0301 	eor.w	r3, r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <checkAktifCalisma+0xfa4>
 8005066:	4b35      	ldr	r3, [pc, #212]	@ (800513c <checkAktifCalisma+0x106c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f083 0301 	eor.w	r3, r3, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <checkAktifCalisma+0xfb2>
 8005074:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <checkAktifCalisma+0x1088>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f083 0301 	eor.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005082:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <checkAktifCalisma+0x1090>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005088:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <checkAktifCalisma+0x1080>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d12b      	bne.n	80050e8 <checkAktifCalisma+0x1018>
 8005090:	4b30      	ldr	r3, [pc, #192]	@ (8005154 <checkAktifCalisma+0x1084>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d003      	beq.n	80050a0 <checkAktifCalisma+0xfd0>
 8005098:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <checkAktifCalisma+0x1084>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d123      	bne.n	80050e8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80050a0:	4b25      	ldr	r3, [pc, #148]	@ (8005138 <checkAktifCalisma+0x1068>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <checkAktifCalisma+0xfe0>
 80050a8:	4b24      	ldr	r3, [pc, #144]	@ (800513c <checkAktifCalisma+0x106c>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80050b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050b4:	481e      	ldr	r0, [pc, #120]	@ (8005130 <checkAktifCalisma+0x1060>)
 80050b6:	f004 ffa9 	bl	800a00c <HAL_GPIO_ReadPin>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <checkAktifCalisma+0xff8>
 80050c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <checkAktifCalisma+0x1070>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80050c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <checkAktifCalisma+0x1078>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <checkAktifCalisma+0x1008>
 80050d0:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <checkAktifCalisma+0x107c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80050d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005158 <checkAktifCalisma+0x1088>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80050e0:	4b23      	ldr	r3, [pc, #140]	@ (8005170 <checkAktifCalisma+0x10a0>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e002      	b.n	80050ee <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80050e8:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <checkAktifCalisma+0x10a0>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80050ee:	4b18      	ldr	r3, [pc, #96]	@ (8005150 <checkAktifCalisma+0x1080>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d140      	bne.n	8005178 <checkAktifCalisma+0x10a8>
 80050f6:	4b17      	ldr	r3, [pc, #92]	@ (8005154 <checkAktifCalisma+0x1084>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d003      	beq.n	8005106 <checkAktifCalisma+0x1036>
 80050fe:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <checkAktifCalisma+0x1084>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d138      	bne.n	8005178 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005106:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <checkAktifCalisma+0x1068>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <checkAktifCalisma+0x1046>
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <checkAktifCalisma+0x106c>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d030      	beq.n	8005178 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <checkAktifCalisma+0x1088>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02c      	beq.n	8005178 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800511e:	4b15      	ldr	r3, [pc, #84]	@ (8005174 <checkAktifCalisma+0x10a4>)
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e02b      	b.n	800517e <checkAktifCalisma+0x10ae>
 8005126:	bf00      	nop
 8005128:	40010800 	.word	0x40010800
 800512c:	200010d5 	.word	0x200010d5
 8005130:	40011000 	.word	0x40011000
 8005134:	200010ce 	.word	0x200010ce
 8005138:	20001114 	.word	0x20001114
 800513c:	20001115 	.word	0x20001115
 8005140:	200010d4 	.word	0x200010d4
 8005144:	40010c00 	.word	0x40010c00
 8005148:	20001124 	.word	0x20001124
 800514c:	20001125 	.word	0x20001125
 8005150:	200010d3 	.word	0x200010d3
 8005154:	200010d0 	.word	0x200010d0
 8005158:	2000110a 	.word	0x2000110a
 800515c:	200010f7 	.word	0x200010f7
 8005160:	20001111 	.word	0x20001111
 8005164:	200010a0 	.word	0x200010a0
 8005168:	200010a4 	.word	0x200010a4
 800516c:	200010e3 	.word	0x200010e3
 8005170:	20001112 	.word	0x20001112
 8005174:	20001113 	.word	0x20001113
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005178:	4b8b      	ldr	r3, [pc, #556]	@ (80053a8 <checkAktifCalisma+0x12d8>)
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800517e:	4b8b      	ldr	r3, [pc, #556]	@ (80053ac <checkAktifCalisma+0x12dc>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <checkAktifCalisma+0x10c6>
 8005186:	4b8a      	ldr	r3, [pc, #552]	@ (80053b0 <checkAktifCalisma+0x12e0>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <checkAktifCalisma+0x10c6>
 800518e:	4b86      	ldr	r3, [pc, #536]	@ (80053a8 <checkAktifCalisma+0x12d8>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005196:	2201      	movs	r2, #1
 8005198:	2120      	movs	r1, #32
 800519a:	4886      	ldr	r0, [pc, #536]	@ (80053b4 <checkAktifCalisma+0x12e4>)
 800519c:	f004 ff4d 	bl	800a03a <HAL_GPIO_WritePin>
 80051a0:	e004      	b.n	80051ac <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2120      	movs	r1, #32
 80051a6:	4883      	ldr	r0, [pc, #524]	@ (80053b4 <checkAktifCalisma+0x12e4>)
 80051a8:	f004 ff47 	bl	800a03a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80051ac:	4b82      	ldr	r3, [pc, #520]	@ (80053b8 <checkAktifCalisma+0x12e8>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <checkAktifCalisma+0x1102>
 80051b4:	2102      	movs	r1, #2
 80051b6:	4881      	ldr	r0, [pc, #516]	@ (80053bc <checkAktifCalisma+0x12ec>)
 80051b8:	f004 ff28 	bl	800a00c <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d107      	bne.n	80051d2 <checkAktifCalisma+0x1102>
 80051c2:	4b7f      	ldr	r3, [pc, #508]	@ (80053c0 <checkAktifCalisma+0x12f0>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <checkAktifCalisma+0x1102>
 80051ca:	4b7e      	ldr	r3, [pc, #504]	@ (80053c4 <checkAktifCalisma+0x12f4>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d112      	bne.n	80051f8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80051d2:	4b7d      	ldr	r3, [pc, #500]	@ (80053c8 <checkAktifCalisma+0x12f8>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d066      	beq.n	80052a8 <checkAktifCalisma+0x11d8>
 80051da:	2104      	movs	r1, #4
 80051dc:	4877      	ldr	r0, [pc, #476]	@ (80053bc <checkAktifCalisma+0x12ec>)
 80051de:	f004 ff15 	bl	800a00c <HAL_GPIO_ReadPin>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d15f      	bne.n	80052a8 <checkAktifCalisma+0x11d8>
 80051e8:	4b75      	ldr	r3, [pc, #468]	@ (80053c0 <checkAktifCalisma+0x12f0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d05b      	beq.n	80052a8 <checkAktifCalisma+0x11d8>
 80051f0:	4b74      	ldr	r3, [pc, #464]	@ (80053c4 <checkAktifCalisma+0x12f4>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d057      	beq.n	80052a8 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80051f8:	4b74      	ldr	r3, [pc, #464]	@ (80053cc <checkAktifCalisma+0x12fc>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	4b72      	ldr	r3, [pc, #456]	@ (80053cc <checkAktifCalisma+0x12fc>)
 8005202:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005204:	4b71      	ldr	r3, [pc, #452]	@ (80053cc <checkAktifCalisma+0x12fc>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b09      	cmp	r3, #9
 800520a:	d908      	bls.n	800521e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 800520c:	4b6f      	ldr	r3, [pc, #444]	@ (80053cc <checkAktifCalisma+0x12fc>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005212:	4b6f      	ldr	r3, [pc, #444]	@ (80053d0 <checkAktifCalisma+0x1300>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4b6d      	ldr	r3, [pc, #436]	@ (80053d0 <checkAktifCalisma+0x1300>)
 800521c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800521e:	4b6c      	ldr	r3, [pc, #432]	@ (80053d0 <checkAktifCalisma+0x1300>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b09      	cmp	r3, #9
 8005224:	d908      	bls.n	8005238 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005226:	4b6a      	ldr	r3, [pc, #424]	@ (80053d0 <checkAktifCalisma+0x1300>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 800522c:	4b69      	ldr	r3, [pc, #420]	@ (80053d4 <checkAktifCalisma+0x1304>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b67      	ldr	r3, [pc, #412]	@ (80053d4 <checkAktifCalisma+0x1304>)
 8005236:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005238:	4b66      	ldr	r3, [pc, #408]	@ (80053d4 <checkAktifCalisma+0x1304>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b09      	cmp	r3, #9
 800523e:	d908      	bls.n	8005252 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005240:	4b64      	ldr	r3, [pc, #400]	@ (80053d4 <checkAktifCalisma+0x1304>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005246:	4b64      	ldr	r3, [pc, #400]	@ (80053d8 <checkAktifCalisma+0x1308>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4b62      	ldr	r3, [pc, #392]	@ (80053d8 <checkAktifCalisma+0x1308>)
 8005250:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005252:	4b61      	ldr	r3, [pc, #388]	@ (80053d8 <checkAktifCalisma+0x1308>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b09      	cmp	r3, #9
 8005258:	d908      	bls.n	800526c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800525a:	4b5f      	ldr	r3, [pc, #380]	@ (80053d8 <checkAktifCalisma+0x1308>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005260:	4b5e      	ldr	r3, [pc, #376]	@ (80053dc <checkAktifCalisma+0x130c>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	4b5c      	ldr	r3, [pc, #368]	@ (80053dc <checkAktifCalisma+0x130c>)
 800526a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800526c:	4b5b      	ldr	r3, [pc, #364]	@ (80053dc <checkAktifCalisma+0x130c>)
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	4b5b      	ldr	r3, [pc, #364]	@ (80053e0 <checkAktifCalisma+0x1310>)
 8005272:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005276:	4b58      	ldr	r3, [pc, #352]	@ (80053d8 <checkAktifCalisma+0x1308>)
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	4b59      	ldr	r3, [pc, #356]	@ (80053e0 <checkAktifCalisma+0x1310>)
 800527c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800527e:	4b55      	ldr	r3, [pc, #340]	@ (80053d4 <checkAktifCalisma+0x1304>)
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	4b57      	ldr	r3, [pc, #348]	@ (80053e0 <checkAktifCalisma+0x1310>)
 8005284:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005286:	4b52      	ldr	r3, [pc, #328]	@ (80053d0 <checkAktifCalisma+0x1300>)
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	4b55      	ldr	r3, [pc, #340]	@ (80053e0 <checkAktifCalisma+0x1310>)
 800528c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800528e:	4b4f      	ldr	r3, [pc, #316]	@ (80053cc <checkAktifCalisma+0x12fc>)
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	4b53      	ldr	r3, [pc, #332]	@ (80053e0 <checkAktifCalisma+0x1310>)
 8005294:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005296:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <checkAktifCalisma+0x1314>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800529c:	4b46      	ldr	r3, [pc, #280]	@ (80053b8 <checkAktifCalisma+0x12e8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80052a2:	4b49      	ldr	r3, [pc, #292]	@ (80053c8 <checkAktifCalisma+0x12f8>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80052a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052ac:	484e      	ldr	r0, [pc, #312]	@ (80053e8 <checkAktifCalisma+0x1318>)
 80052ae:	f004 fead 	bl	800a00c <HAL_GPIO_ReadPin>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80052b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052bc:	484a      	ldr	r0, [pc, #296]	@ (80053e8 <checkAktifCalisma+0x1318>)
 80052be:	f004 fea5 	bl	800a00c <HAL_GPIO_ReadPin>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80052c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052cc:	4846      	ldr	r0, [pc, #280]	@ (80053e8 <checkAktifCalisma+0x1318>)
 80052ce:	f004 fe9d 	bl	800a00c <HAL_GPIO_ReadPin>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80052d8:	2140      	movs	r1, #64	@ 0x40
 80052da:	4838      	ldr	r0, [pc, #224]	@ (80053bc <checkAktifCalisma+0x12ec>)
 80052dc:	f004 fe96 	bl	800a00c <HAL_GPIO_ReadPin>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <checkAktifCalisma+0x121e>
			startBasili=1;
 80052e6:	4b41      	ldr	r3, [pc, #260]	@ (80053ec <checkAktifCalisma+0x131c>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e002      	b.n	80052f4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80052ee:	4b3f      	ldr	r3, [pc, #252]	@ (80053ec <checkAktifCalisma+0x131c>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80052f4:	4b3d      	ldr	r3, [pc, #244]	@ (80053ec <checkAktifCalisma+0x131c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d016      	beq.n	800532a <checkAktifCalisma+0x125a>
 80052fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005300:	4839      	ldr	r0, [pc, #228]	@ (80053e8 <checkAktifCalisma+0x1318>)
 8005302:	f004 fe83 	bl	800a00c <HAL_GPIO_ReadPin>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10e      	bne.n	800532a <checkAktifCalisma+0x125a>
			hataVar=1;
 800530c:	4b38      	ldr	r3, [pc, #224]	@ (80053f0 <checkAktifCalisma+0x1320>)
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005312:	2001      	movs	r0, #1
 8005314:	f7fb fb8e 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005318:	2001      	movs	r0, #1
 800531a:	f7fb fb33 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800531e:	f003 f92d 	bl	800857c <convertAndSendData>
			acilstophatasi=1;
 8005322:	4b34      	ldr	r3, [pc, #208]	@ (80053f4 <checkAktifCalisma+0x1324>)
 8005324:	2201      	movs	r2, #1
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	e018      	b.n	800535c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800532a:	4b32      	ldr	r3, [pc, #200]	@ (80053f4 <checkAktifCalisma+0x1324>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d014      	beq.n	800535c <checkAktifCalisma+0x128c>
 8005332:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005336:	482c      	ldr	r0, [pc, #176]	@ (80053e8 <checkAktifCalisma+0x1318>)
 8005338:	f004 fe68 	bl	800a00c <HAL_GPIO_ReadPin>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <checkAktifCalisma+0x128c>
 8005342:	4b2a      	ldr	r3, [pc, #168]	@ (80053ec <checkAktifCalisma+0x131c>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f083 0301 	eor.w	r3, r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005350:	4b28      	ldr	r3, [pc, #160]	@ (80053f4 <checkAktifCalisma+0x1324>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005356:	2001      	movs	r0, #1
 8005358:	f7fe fcb4 	bl	8003cc4 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800535c:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <checkAktifCalisma+0x1328>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f083 0301 	eor.w	r3, r3, #1
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04e      	beq.n	8005408 <checkAktifCalisma+0x1338>
 800536a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800536e:	481e      	ldr	r0, [pc, #120]	@ (80053e8 <checkAktifCalisma+0x1318>)
 8005370:	f004 fe4c 	bl	800a00c <HAL_GPIO_ReadPin>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <checkAktifCalisma+0x12b2>
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <checkAktifCalisma+0x132c>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d042      	beq.n	8005408 <checkAktifCalisma+0x1338>
 8005382:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <checkAktifCalisma+0x1330>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d13e      	bne.n	8005408 <checkAktifCalisma+0x1338>
			hataVar=1;
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <checkAktifCalisma+0x1320>)
 800538c:	2201      	movs	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005390:	2002      	movs	r0, #2
 8005392:	f7fb fb4f 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005396:	2002      	movs	r0, #2
 8005398:	f7fb faf4 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800539c:	f003 f8ee 	bl	800857c <convertAndSendData>
			emniyetCercevesihatasi=1;
 80053a0:	4b18      	ldr	r3, [pc, #96]	@ (8005404 <checkAktifCalisma+0x1334>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e047      	b.n	8005438 <checkAktifCalisma+0x1368>
 80053a8:	20001113 	.word	0x20001113
 80053ac:	20001112 	.word	0x20001112
 80053b0:	20001111 	.word	0x20001111
 80053b4:	40010800 	.word	0x40010800
 80053b8:	20001107 	.word	0x20001107
 80053bc:	40011000 	.word	0x40011000
 80053c0:	200010ce 	.word	0x200010ce
 80053c4:	2000110a 	.word	0x2000110a
 80053c8:	20001108 	.word	0x20001108
 80053cc:	200010c5 	.word	0x200010c5
 80053d0:	200010c6 	.word	0x200010c6
 80053d4:	20000000 	.word	0x20000000
 80053d8:	20000001 	.word	0x20000001
 80053dc:	200010c7 	.word	0x200010c7
 80053e0:	20000ff0 	.word	0x20000ff0
 80053e4:	200010f4 	.word	0x200010f4
 80053e8:	40010c00 	.word	0x40010c00
 80053ec:	20001116 	.word	0x20001116
 80053f0:	2000111d 	.word	0x2000111d
 80053f4:	20001118 	.word	0x20001118
 80053f8:	2000111f 	.word	0x2000111f
 80053fc:	20001129 	.word	0x20001129
 8005400:	200010cc 	.word	0x200010cc
 8005404:	20001119 	.word	0x20001119
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005408:	4b9b      	ldr	r3, [pc, #620]	@ (8005678 <checkAktifCalisma+0x15a8>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <checkAktifCalisma+0x1368>
 8005410:	4b9a      	ldr	r3, [pc, #616]	@ (800567c <checkAktifCalisma+0x15ac>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00f      	beq.n	8005438 <checkAktifCalisma+0x1368>
 8005418:	4b99      	ldr	r3, [pc, #612]	@ (8005680 <checkAktifCalisma+0x15b0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f083 0301 	eor.w	r3, r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005426:	4b94      	ldr	r3, [pc, #592]	@ (8005678 <checkAktifCalisma+0x15a8>)
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800542c:	4b95      	ldr	r3, [pc, #596]	@ (8005684 <checkAktifCalisma+0x15b4>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005432:	2002      	movs	r0, #2
 8005434:	f7fe fc46 	bl	8003cc4 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005438:	4b93      	ldr	r3, [pc, #588]	@ (8005688 <checkAktifCalisma+0x15b8>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11e      	bne.n	800547e <checkAktifCalisma+0x13ae>
 8005440:	4b92      	ldr	r3, [pc, #584]	@ (800568c <checkAktifCalisma+0x15bc>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d11a      	bne.n	800547e <checkAktifCalisma+0x13ae>
 8005448:	4b91      	ldr	r3, [pc, #580]	@ (8005690 <checkAktifCalisma+0x15c0>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d016      	beq.n	800547e <checkAktifCalisma+0x13ae>
 8005450:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005454:	488f      	ldr	r0, [pc, #572]	@ (8005694 <checkAktifCalisma+0x15c4>)
 8005456:	f004 fdd9 	bl	800a00c <HAL_GPIO_ReadPin>
 800545a:	4603      	mov	r3, r0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10e      	bne.n	800547e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005460:	4b8d      	ldr	r3, [pc, #564]	@ (8005698 <checkAktifCalisma+0x15c8>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005466:	2003      	movs	r0, #3
 8005468:	f7fb fae4 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800546c:	2003      	movs	r0, #3
 800546e:	f7fb fa89 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005472:	f003 f883 	bl	800857c <convertAndSendData>
			basinchatasi=1;
 8005476:	4b89      	ldr	r3, [pc, #548]	@ (800569c <checkAktifCalisma+0x15cc>)
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e015      	b.n	80054aa <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800547e:	4b87      	ldr	r3, [pc, #540]	@ (800569c <checkAktifCalisma+0x15cc>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d011      	beq.n	80054aa <checkAktifCalisma+0x13da>
 8005486:	4b80      	ldr	r3, [pc, #512]	@ (8005688 <checkAktifCalisma+0x15b8>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10d      	bne.n	80054aa <checkAktifCalisma+0x13da>
 800548e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005492:	4883      	ldr	r0, [pc, #524]	@ (80056a0 <checkAktifCalisma+0x15d0>)
 8005494:	f004 fdba 	bl	800a00c <HAL_GPIO_ReadPin>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800549e:	4b7f      	ldr	r3, [pc, #508]	@ (800569c <checkAktifCalisma+0x15cc>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80054a4:	2003      	movs	r0, #3
 80054a6:	f7fe fc0d 	bl	8003cc4 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80054aa:	4b7e      	ldr	r3, [pc, #504]	@ (80056a4 <checkAktifCalisma+0x15d4>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <checkAktifCalisma+0x13ea>
 80054b2:	4b7d      	ldr	r3, [pc, #500]	@ (80056a8 <checkAktifCalisma+0x15d8>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01e      	beq.n	80054f8 <checkAktifCalisma+0x1428>
 80054ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054be:	487b      	ldr	r0, [pc, #492]	@ (80056ac <checkAktifCalisma+0x15dc>)
 80054c0:	f004 fda4 	bl	800a00c <HAL_GPIO_ReadPin>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d116      	bne.n	80054f8 <checkAktifCalisma+0x1428>
 80054ca:	4b79      	ldr	r3, [pc, #484]	@ (80056b0 <checkAktifCalisma+0x15e0>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d003      	beq.n	80054da <checkAktifCalisma+0x140a>
 80054d2:	4b77      	ldr	r3, [pc, #476]	@ (80056b0 <checkAktifCalisma+0x15e0>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d10e      	bne.n	80054f8 <checkAktifCalisma+0x1428>
			hataVar=1;
 80054da:	4b6f      	ldr	r3, [pc, #444]	@ (8005698 <checkAktifCalisma+0x15c8>)
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80054e0:	2004      	movs	r0, #4
 80054e2:	f7fb faa7 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80054e6:	2004      	movs	r0, #4
 80054e8:	f7fb fa4c 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80054ec:	f003 f846 	bl	800857c <convertAndSendData>
			katkapisivicihatasi=1;
 80054f0:	4b70      	ldr	r3, [pc, #448]	@ (80056b4 <checkAktifCalisma+0x15e4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e01f      	b.n	8005538 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80054f8:	4b6e      	ldr	r3, [pc, #440]	@ (80056b4 <checkAktifCalisma+0x15e4>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <checkAktifCalisma+0x1468>
 8005500:	4b6d      	ldr	r3, [pc, #436]	@ (80056b8 <checkAktifCalisma+0x15e8>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d017      	beq.n	8005538 <checkAktifCalisma+0x1468>
 8005508:	4b66      	ldr	r3, [pc, #408]	@ (80056a4 <checkAktifCalisma+0x15d4>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f083 0301 	eor.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d010      	beq.n	8005538 <checkAktifCalisma+0x1468>
 8005516:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800551a:	4864      	ldr	r0, [pc, #400]	@ (80056ac <checkAktifCalisma+0x15dc>)
 800551c:	f004 fd76 	bl	800a00c <HAL_GPIO_ReadPin>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d108      	bne.n	8005538 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005526:	4b63      	ldr	r3, [pc, #396]	@ (80056b4 <checkAktifCalisma+0x15e4>)
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800552c:	4b5e      	ldr	r3, [pc, #376]	@ (80056a8 <checkAktifCalisma+0x15d8>)
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005532:	2004      	movs	r0, #4
 8005534:	f7fe fbc6 	bl	8003cc4 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005538:	4b5a      	ldr	r3, [pc, #360]	@ (80056a4 <checkAktifCalisma+0x15d4>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <checkAktifCalisma+0x1478>
 8005540:	4b5e      	ldr	r3, [pc, #376]	@ (80056bc <checkAktifCalisma+0x15ec>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01e      	beq.n	8005586 <checkAktifCalisma+0x14b6>
 8005548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800554c:	4857      	ldr	r0, [pc, #348]	@ (80056ac <checkAktifCalisma+0x15dc>)
 800554e:	f004 fd5d 	bl	800a00c <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b01      	cmp	r3, #1
 8005556:	d116      	bne.n	8005586 <checkAktifCalisma+0x14b6>
 8005558:	4b55      	ldr	r3, [pc, #340]	@ (80056b0 <checkAktifCalisma+0x15e0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d003      	beq.n	8005568 <checkAktifCalisma+0x1498>
 8005560:	4b53      	ldr	r3, [pc, #332]	@ (80056b0 <checkAktifCalisma+0x15e0>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d10e      	bne.n	8005586 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8005568:	4b4b      	ldr	r3, [pc, #300]	@ (8005698 <checkAktifCalisma+0x15c8>)
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800556e:	2005      	movs	r0, #5
 8005570:	f7fb fa60 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005574:	2005      	movs	r0, #5
 8005576:	f7fb fa05 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800557a:	f002 ffff 	bl	800857c <convertAndSendData>
			tablakapisivicihatasi=1;
 800557e:	4b50      	ldr	r3, [pc, #320]	@ (80056c0 <checkAktifCalisma+0x15f0>)
 8005580:	2201      	movs	r2, #1
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e023      	b.n	80055ce <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005586:	4b4e      	ldr	r3, [pc, #312]	@ (80056c0 <checkAktifCalisma+0x15f0>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01f      	beq.n	80055ce <checkAktifCalisma+0x14fe>
 800558e:	4b4a      	ldr	r3, [pc, #296]	@ (80056b8 <checkAktifCalisma+0x15e8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01b      	beq.n	80055ce <checkAktifCalisma+0x14fe>
 8005596:	4b43      	ldr	r3, [pc, #268]	@ (80056a4 <checkAktifCalisma+0x15d4>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f083 0301 	eor.w	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d014      	beq.n	80055ce <checkAktifCalisma+0x14fe>
 80055a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055a8:	4840      	ldr	r0, [pc, #256]	@ (80056ac <checkAktifCalisma+0x15dc>)
 80055aa:	f004 fd2f 	bl	800a00c <HAL_GPIO_ReadPin>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10c      	bne.n	80055ce <checkAktifCalisma+0x14fe>
 80055b4:	4b40      	ldr	r3, [pc, #256]	@ (80056b8 <checkAktifCalisma+0x15e8>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80055bc:	4b40      	ldr	r3, [pc, #256]	@ (80056c0 <checkAktifCalisma+0x15f0>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80055c2:	4b3e      	ldr	r3, [pc, #248]	@ (80056bc <checkAktifCalisma+0x15ec>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80055c8:	2005      	movs	r0, #5
 80055ca:	f7fe fb7b 	bl	8003cc4 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80055ce:	4b30      	ldr	r3, [pc, #192]	@ (8005690 <checkAktifCalisma+0x15c0>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d107      	bne.n	80055e6 <checkAktifCalisma+0x1516>
 80055d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005680 <checkAktifCalisma+0x15b0>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <checkAktifCalisma+0x1516>
 80055de:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <checkAktifCalisma+0x15f4>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80055e6:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <checkAktifCalisma+0x15f8>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b38      	ldr	r3, [pc, #224]	@ (80056cc <checkAktifCalisma+0x15fc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	4a37      	ldr	r2, [pc, #220]	@ (80056d0 <checkAktifCalisma+0x1600>)
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d30d      	bcc.n	8005614 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80055f8:	4b27      	ldr	r3, [pc, #156]	@ (8005698 <checkAktifCalisma+0x15c8>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80055fe:	2006      	movs	r0, #6
 8005600:	f7fb fa18 	bl	8000a34 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8005604:	2006      	movs	r0, #6
 8005606:	f7fb f9bd 	bl	8000984 <hata2EEPROM>
			  	convertAndSendData();
 800560a:	f002 ffb7 	bl	800857c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800560e:	4b31      	ldr	r3, [pc, #196]	@ (80056d4 <checkAktifCalisma+0x1604>)
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005614:	4b2f      	ldr	r3, [pc, #188]	@ (80056d4 <checkAktifCalisma+0x1604>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <checkAktifCalisma+0x1574>
 800561c:	2108      	movs	r1, #8
 800561e:	4823      	ldr	r0, [pc, #140]	@ (80056ac <checkAktifCalisma+0x15dc>)
 8005620:	f004 fcf4 	bl	800a00c <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <checkAktifCalisma+0x1574>
 800562a:	4b1e      	ldr	r3, [pc, #120]	@ (80056a4 <checkAktifCalisma+0x15d4>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f083 0301 	eor.w	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8005638:	4b26      	ldr	r3, [pc, #152]	@ (80056d4 <checkAktifCalisma+0x1604>)
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800563e:	2006      	movs	r0, #6
 8005640:	f7fe fb40 	bl	8003cc4 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005644:	4b24      	ldr	r3, [pc, #144]	@ (80056d8 <checkAktifCalisma+0x1608>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <checkAktifCalisma+0x1594>
 800564c:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <checkAktifCalisma+0x15b0>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <checkAktifCalisma+0x1594>
 8005654:	4b21      	ldr	r3, [pc, #132]	@ (80056dc <checkAktifCalisma+0x160c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <checkAktifCalisma+0x1594>
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <checkAktifCalisma+0x15f4>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d03f      	beq.n	80056e4 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8005664:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <checkAktifCalisma+0x1610>)
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800566a:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <checkAktifCalisma+0x15d8>)
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8005670:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <checkAktifCalisma+0x15ec>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e03c      	b.n	80056f2 <checkAktifCalisma+0x1622>
 8005678:	20001119 	.word	0x20001119
 800567c:	2000111f 	.word	0x2000111f
 8005680:	20001100 	.word	0x20001100
 8005684:	20001129 	.word	0x20001129
 8005688:	200010cb 	.word	0x200010cb
 800568c:	200010cf 	.word	0x200010cf
 8005690:	2000111c 	.word	0x2000111c
 8005694:	40011000 	.word	0x40011000
 8005698:	2000111d 	.word	0x2000111d
 800569c:	20001126 	.word	0x20001126
 80056a0:	40010c00 	.word	0x40010c00
 80056a4:	20001116 	.word	0x20001116
 80056a8:	2000112a 	.word	0x2000112a
 80056ac:	40010800 	.word	0x40010800
 80056b0:	200010d0 	.word	0x200010d0
 80056b4:	20001127 	.word	0x20001127
 80056b8:	2000110a 	.word	0x2000110a
 80056bc:	2000112b 	.word	0x2000112b
 80056c0:	20001128 	.word	0x20001128
 80056c4:	200010ff 	.word	0x200010ff
 80056c8:	200010a0 	.word	0x200010a0
 80056cc:	200010b4 	.word	0x200010b4
 80056d0:	200010e0 	.word	0x200010e0
 80056d4:	20001117 	.word	0x20001117
 80056d8:	200010fd 	.word	0x200010fd
 80056dc:	200010fe 	.word	0x200010fe
 80056e0:	2000111e 	.word	0x2000111e
		} else {
			makineCalisiyor=1;
 80056e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <checkAktifCalisma+0x1690>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80056ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <checkAktifCalisma+0x1694>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005768 <checkAktifCalisma+0x1698>)
 80056f0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80056f2:	4b1e      	ldr	r3, [pc, #120]	@ (800576c <checkAktifCalisma+0x169c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02f      	beq.n	800575a <checkAktifCalisma+0x168a>
 80056fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005770 <checkAktifCalisma+0x16a0>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f083 0301 	eor.w	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d028      	beq.n	800575a <checkAktifCalisma+0x168a>
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <checkAktifCalisma+0x16a4>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f083 0301 	eor.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d021      	beq.n	800575a <checkAktifCalisma+0x168a>
 8005716:	4b18      	ldr	r3, [pc, #96]	@ (8005778 <checkAktifCalisma+0x16a8>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f083 0301 	eor.w	r3, r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01a      	beq.n	800575a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005724:	4b15      	ldr	r3, [pc, #84]	@ (800577c <checkAktifCalisma+0x16ac>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f083 0301 	eor.w	r3, r3, #1
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <checkAktifCalisma+0x168a>
 8005732:	4b13      	ldr	r3, [pc, #76]	@ (8005780 <checkAktifCalisma+0x16b0>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f083 0301 	eor.w	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <checkAktifCalisma+0x168a>
 8005740:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <checkAktifCalisma+0x16b4>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <checkAktifCalisma+0x168a>
			hataVar=0;
 800574e:	4b07      	ldr	r3, [pc, #28]	@ (800576c <checkAktifCalisma+0x169c>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8005754:	2007      	movs	r0, #7
 8005756:	f7fe fab5 	bl	8003cc4 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000111e 	.word	0x2000111e
 8005764:	200010a0 	.word	0x200010a0
 8005768:	200010b4 	.word	0x200010b4
 800576c:	2000111d 	.word	0x2000111d
 8005770:	20001118 	.word	0x20001118
 8005774:	20001119 	.word	0x20001119
 8005778:	20001126 	.word	0x20001126
 800577c:	20001127 	.word	0x20001127
 8005780:	20001128 	.word	0x20001128
 8005784:	20001117 	.word	0x20001117

08005788 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800578c:	4b8b      	ldr	r3, [pc, #556]	@ (80059bc <checkDemoModCalisma+0x234>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 8229 	bne.w	8005be8 <checkDemoModCalisma+0x460>
 8005796:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <checkDemoModCalisma+0x238>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8224 	beq.w	8005be8 <checkDemoModCalisma+0x460>
 80057a0:	4b88      	ldr	r3, [pc, #544]	@ (80059c4 <checkDemoModCalisma+0x23c>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 821f 	bne.w	8005be8 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057aa:	2102      	movs	r1, #2
 80057ac:	4886      	ldr	r0, [pc, #536]	@ (80059c8 <checkDemoModCalisma+0x240>)
 80057ae:	f004 fc2d 	bl	800a00c <HAL_GPIO_ReadPin>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11d      	bne.n	80057f4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80057b8:	4b84      	ldr	r3, [pc, #528]	@ (80059cc <checkDemoModCalisma+0x244>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80057c6:	4b82      	ldr	r3, [pc, #520]	@ (80059d0 <checkDemoModCalisma+0x248>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00f      	beq.n	80057f4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80057d4:	4b7f      	ldr	r3, [pc, #508]	@ (80059d4 <checkDemoModCalisma+0x24c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80057e2:	2201      	movs	r2, #1
 80057e4:	2104      	movs	r1, #4
 80057e6:	487c      	ldr	r0, [pc, #496]	@ (80059d8 <checkDemoModCalisma+0x250>)
 80057e8:	f004 fc27 	bl	800a03a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80057ec:	4b7b      	ldr	r3, [pc, #492]	@ (80059dc <checkDemoModCalisma+0x254>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e00e      	b.n	8005812 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80057f4:	2102      	movs	r1, #2
 80057f6:	4874      	ldr	r0, [pc, #464]	@ (80059c8 <checkDemoModCalisma+0x240>)
 80057f8:	f004 fc08 	bl	800a00c <HAL_GPIO_ReadPin>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d107      	bne.n	8005812 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005802:	2200      	movs	r2, #0
 8005804:	2104      	movs	r1, #4
 8005806:	4874      	ldr	r0, [pc, #464]	@ (80059d8 <checkDemoModCalisma+0x250>)
 8005808:	f004 fc17 	bl	800a03a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800580c:	4b73      	ldr	r3, [pc, #460]	@ (80059dc <checkDemoModCalisma+0x254>)
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005812:	4b72      	ldr	r3, [pc, #456]	@ (80059dc <checkDemoModCalisma+0x254>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <checkDemoModCalisma+0xaa>
 800581a:	4b6d      	ldr	r3, [pc, #436]	@ (80059d0 <checkDemoModCalisma+0x248>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <checkDemoModCalisma+0xaa>
 8005822:	4b6c      	ldr	r3, [pc, #432]	@ (80059d4 <checkDemoModCalisma+0x24c>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <checkDemoModCalisma+0xaa>
 800582a:	4b68      	ldr	r3, [pc, #416]	@ (80059cc <checkDemoModCalisma+0x244>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005832:	2201      	movs	r2, #1
 8005834:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005838:	4867      	ldr	r0, [pc, #412]	@ (80059d8 <checkDemoModCalisma+0x250>)
 800583a:	f004 fbfe 	bl	800a03a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800583e:	2201      	movs	r2, #1
 8005840:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005844:	4864      	ldr	r0, [pc, #400]	@ (80059d8 <checkDemoModCalisma+0x250>)
 8005846:	f004 fbf8 	bl	800a03a <HAL_GPIO_WritePin>
 800584a:	e00b      	b.n	8005864 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800584c:	2200      	movs	r2, #0
 800584e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005852:	4861      	ldr	r0, [pc, #388]	@ (80059d8 <checkDemoModCalisma+0x250>)
 8005854:	f004 fbf1 	bl	800a03a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005858:	2200      	movs	r2, #0
 800585a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800585e:	485e      	ldr	r0, [pc, #376]	@ (80059d8 <checkDemoModCalisma+0x250>)
 8005860:	f004 fbeb 	bl	800a03a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005864:	2102      	movs	r1, #2
 8005866:	4858      	ldr	r0, [pc, #352]	@ (80059c8 <checkDemoModCalisma+0x240>)
 8005868:	f004 fbd0 	bl	800a00c <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10d      	bne.n	800588e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005872:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005876:	4854      	ldr	r0, [pc, #336]	@ (80059c8 <checkDemoModCalisma+0x240>)
 8005878:	f004 fbc8 	bl	800a00c <HAL_GPIO_ReadPin>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8005882:	4b56      	ldr	r3, [pc, #344]	@ (80059dc <checkDemoModCalisma+0x254>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	f083 0301 	eor.w	r3, r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800588e:	2102      	movs	r1, #2
 8005890:	484d      	ldr	r0, [pc, #308]	@ (80059c8 <checkDemoModCalisma+0x240>)
 8005892:	f004 fbbb 	bl	800a00c <HAL_GPIO_ReadPin>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d125      	bne.n	80058e8 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800589c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058a0:	4849      	ldr	r0, [pc, #292]	@ (80059c8 <checkDemoModCalisma+0x240>)
 80058a2:	f004 fbb3 	bl	800a00c <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d11d      	bne.n	80058e8 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80058ac:	4b4b      	ldr	r3, [pc, #300]	@ (80059dc <checkDemoModCalisma+0x254>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f083 0301 	eor.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d016      	beq.n	80058e8 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80058ba:	4b44      	ldr	r3, [pc, #272]	@ (80059cc <checkDemoModCalisma+0x244>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f083 0301 	eor.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00f      	beq.n	80058e8 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80058c8:	4b42      	ldr	r3, [pc, #264]	@ (80059d4 <checkDemoModCalisma+0x24c>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f083 0301 	eor.w	r3, r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80058d6:	2201      	movs	r2, #1
 80058d8:	2120      	movs	r1, #32
 80058da:	483b      	ldr	r0, [pc, #236]	@ (80059c8 <checkDemoModCalisma+0x240>)
 80058dc:	f004 fbad 	bl	800a03a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80058e0:	4b3b      	ldr	r3, [pc, #236]	@ (80059d0 <checkDemoModCalisma+0x248>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e007      	b.n	80058f8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80058e8:	2200      	movs	r2, #0
 80058ea:	2120      	movs	r1, #32
 80058ec:	4836      	ldr	r0, [pc, #216]	@ (80059c8 <checkDemoModCalisma+0x240>)
 80058ee:	f004 fba4 	bl	800a03a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80058f2:	4b37      	ldr	r3, [pc, #220]	@ (80059d0 <checkDemoModCalisma+0x248>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058f8:	2102      	movs	r1, #2
 80058fa:	4833      	ldr	r0, [pc, #204]	@ (80059c8 <checkDemoModCalisma+0x240>)
 80058fc:	f004 fb86 	bl	800a00c <HAL_GPIO_ReadPin>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d125      	bne.n	8005952 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005906:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800590a:	482f      	ldr	r0, [pc, #188]	@ (80059c8 <checkDemoModCalisma+0x240>)
 800590c:	f004 fb7e 	bl	800a00c <HAL_GPIO_ReadPin>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d11d      	bne.n	8005952 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8005916:	4b31      	ldr	r3, [pc, #196]	@ (80059dc <checkDemoModCalisma+0x254>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f083 0301 	eor.w	r3, r3, #1
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d016      	beq.n	8005952 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8005924:	4b2a      	ldr	r3, [pc, #168]	@ (80059d0 <checkDemoModCalisma+0x248>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f083 0301 	eor.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8005932:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <checkDemoModCalisma+0x244>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f083 0301 	eor.w	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005940:	2201      	movs	r2, #1
 8005942:	2110      	movs	r1, #16
 8005944:	4820      	ldr	r0, [pc, #128]	@ (80059c8 <checkDemoModCalisma+0x240>)
 8005946:	f004 fb78 	bl	800a03a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800594a:	4b22      	ldr	r3, [pc, #136]	@ (80059d4 <checkDemoModCalisma+0x24c>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e007      	b.n	8005962 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005952:	2200      	movs	r2, #0
 8005954:	2110      	movs	r1, #16
 8005956:	481c      	ldr	r0, [pc, #112]	@ (80059c8 <checkDemoModCalisma+0x240>)
 8005958:	f004 fb6f 	bl	800a03a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800595c:	4b1d      	ldr	r3, [pc, #116]	@ (80059d4 <checkDemoModCalisma+0x24c>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005962:	2104      	movs	r1, #4
 8005964:	4818      	ldr	r0, [pc, #96]	@ (80059c8 <checkDemoModCalisma+0x240>)
 8005966:	f004 fb51 	bl	800a00c <HAL_GPIO_ReadPin>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d139      	bne.n	80059e4 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8005970:	4b1a      	ldr	r3, [pc, #104]	@ (80059dc <checkDemoModCalisma+0x254>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f083 0301 	eor.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d032      	beq.n	80059e4 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800597e:	4b15      	ldr	r3, [pc, #84]	@ (80059d4 <checkDemoModCalisma+0x24c>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f083 0301 	eor.w	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02b      	beq.n	80059e4 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800598c:	4b10      	ldr	r3, [pc, #64]	@ (80059d0 <checkDemoModCalisma+0x248>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f083 0301 	eor.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d024      	beq.n	80059e4 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800599a:	2201      	movs	r2, #1
 800599c:	2102      	movs	r1, #2
 800599e:	480e      	ldr	r0, [pc, #56]	@ (80059d8 <checkDemoModCalisma+0x250>)
 80059a0:	f004 fb4b 	bl	800a03a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80059a4:	2201      	movs	r2, #1
 80059a6:	2101      	movs	r1, #1
 80059a8:	480b      	ldr	r0, [pc, #44]	@ (80059d8 <checkDemoModCalisma+0x250>)
 80059aa:	f004 fb46 	bl	800a03a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <checkDemoModCalisma+0x244>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	@ (80059e0 <checkDemoModCalisma+0x258>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e027      	b.n	8005a0c <checkDemoModCalisma+0x284>
 80059bc:	200010e6 	.word	0x200010e6
 80059c0:	2000111a 	.word	0x2000111a
 80059c4:	200010e5 	.word	0x200010e5
 80059c8:	40011000 	.word	0x40011000
 80059cc:	20001121 	.word	0x20001121
 80059d0:	20001122 	.word	0x20001122
 80059d4:	20001123 	.word	0x20001123
 80059d8:	40010c00 	.word	0x40010c00
 80059dc:	20001120 	.word	0x20001120
 80059e0:	20001106 	.word	0x20001106
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80059e4:	2104      	movs	r1, #4
 80059e6:	48a0      	ldr	r0, [pc, #640]	@ (8005c68 <checkDemoModCalisma+0x4e0>)
 80059e8:	f004 fb10 	bl	800a00c <HAL_GPIO_ReadPin>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d10c      	bne.n	8005a0c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2102      	movs	r1, #2
 80059f6:	489d      	ldr	r0, [pc, #628]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 80059f8:	f004 fb1f 	bl	800a03a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80059fc:	2200      	movs	r2, #0
 80059fe:	2101      	movs	r1, #1
 8005a00:	489a      	ldr	r0, [pc, #616]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 8005a02:	f004 fb1a 	bl	800a03a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8005a06:	4b9a      	ldr	r3, [pc, #616]	@ (8005c70 <checkDemoModCalisma+0x4e8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	4896      	ldr	r0, [pc, #600]	@ (8005c68 <checkDemoModCalisma+0x4e0>)
 8005a10:	f004 fafc 	bl	800a00c <HAL_GPIO_ReadPin>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10d      	bne.n	8005a36 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	2180      	movs	r1, #128	@ 0x80
 8005a1e:	4895      	ldr	r0, [pc, #596]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005a20:	f004 fb0b 	bl	800a03a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005a24:	2201      	movs	r2, #1
 8005a26:	2120      	movs	r1, #32
 8005a28:	4892      	ldr	r0, [pc, #584]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005a2a:	f004 fb06 	bl	800a03a <HAL_GPIO_WritePin>
			timer3 = millis;
 8005a2e:	4b92      	ldr	r3, [pc, #584]	@ (8005c78 <checkDemoModCalisma+0x4f0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a92      	ldr	r2, [pc, #584]	@ (8005c7c <checkDemoModCalisma+0x4f4>)
 8005a34:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005a36:	4b90      	ldr	r3, [pc, #576]	@ (8005c78 <checkDemoModCalisma+0x4f0>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b90      	ldr	r3, [pc, #576]	@ (8005c7c <checkDemoModCalisma+0x4f4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d909      	bls.n	8005a58 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	@ 0x80
 8005a48:	488a      	ldr	r0, [pc, #552]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005a4a:	f004 faf6 	bl	800a03a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2120      	movs	r1, #32
 8005a52:	4888      	ldr	r0, [pc, #544]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005a54:	f004 faf1 	bl	800a03a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4883      	ldr	r0, [pc, #524]	@ (8005c68 <checkDemoModCalisma+0x4e0>)
 8005a5c:	f004 fad6 	bl	800a00c <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d108      	bne.n	8005a78 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a66:	2201      	movs	r2, #1
 8005a68:	2140      	movs	r1, #64	@ 0x40
 8005a6a:	4882      	ldr	r0, [pc, #520]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005a6c:	f004 fae5 	bl	800a03a <HAL_GPIO_WritePin>
			timer3 = millis;
 8005a70:	4b81      	ldr	r3, [pc, #516]	@ (8005c78 <checkDemoModCalisma+0x4f0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a81      	ldr	r2, [pc, #516]	@ (8005c7c <checkDemoModCalisma+0x4f4>)
 8005a76:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005a78:	4b7f      	ldr	r3, [pc, #508]	@ (8005c78 <checkDemoModCalisma+0x4f0>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c7c <checkDemoModCalisma+0x4f4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d904      	bls.n	8005a90 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a86:	2200      	movs	r2, #0
 8005a88:	2140      	movs	r1, #64	@ 0x40
 8005a8a:	487a      	ldr	r0, [pc, #488]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005a8c:	f004 fad5 	bl	800a03a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005a90:	4b7b      	ldr	r3, [pc, #492]	@ (8005c80 <checkDemoModCalisma+0x4f8>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d058      	beq.n	8005b4a <checkDemoModCalisma+0x3c2>
 8005a98:	4b7a      	ldr	r3, [pc, #488]	@ (8005c84 <checkDemoModCalisma+0x4fc>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d054      	beq.n	8005b4a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005aa0:	4b79      	ldr	r3, [pc, #484]	@ (8005c88 <checkDemoModCalisma+0x500>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b77      	ldr	r3, [pc, #476]	@ (8005c88 <checkDemoModCalisma+0x500>)
 8005aaa:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005aac:	4b76      	ldr	r3, [pc, #472]	@ (8005c88 <checkDemoModCalisma+0x500>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b09      	cmp	r3, #9
 8005ab2:	d908      	bls.n	8005ac6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005ab4:	4b74      	ldr	r3, [pc, #464]	@ (8005c88 <checkDemoModCalisma+0x500>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005aba:	4b74      	ldr	r3, [pc, #464]	@ (8005c8c <checkDemoModCalisma+0x504>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4b72      	ldr	r3, [pc, #456]	@ (8005c8c <checkDemoModCalisma+0x504>)
 8005ac4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005ac6:	4b71      	ldr	r3, [pc, #452]	@ (8005c8c <checkDemoModCalisma+0x504>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b09      	cmp	r3, #9
 8005acc:	d908      	bls.n	8005ae0 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005ace:	4b6f      	ldr	r3, [pc, #444]	@ (8005c8c <checkDemoModCalisma+0x504>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005ad4:	4b6e      	ldr	r3, [pc, #440]	@ (8005c90 <checkDemoModCalisma+0x508>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c90 <checkDemoModCalisma+0x508>)
 8005ade:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8005c90 <checkDemoModCalisma+0x508>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	d908      	bls.n	8005afa <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005ae8:	4b69      	ldr	r3, [pc, #420]	@ (8005c90 <checkDemoModCalisma+0x508>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005aee:	4b69      	ldr	r3, [pc, #420]	@ (8005c94 <checkDemoModCalisma+0x50c>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4b67      	ldr	r3, [pc, #412]	@ (8005c94 <checkDemoModCalisma+0x50c>)
 8005af8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005afa:	4b66      	ldr	r3, [pc, #408]	@ (8005c94 <checkDemoModCalisma+0x50c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d908      	bls.n	8005b14 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005b02:	4b64      	ldr	r3, [pc, #400]	@ (8005c94 <checkDemoModCalisma+0x50c>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005b08:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <checkDemoModCalisma+0x510>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	4b61      	ldr	r3, [pc, #388]	@ (8005c98 <checkDemoModCalisma+0x510>)
 8005b12:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005b14:	4b60      	ldr	r3, [pc, #384]	@ (8005c98 <checkDemoModCalisma+0x510>)
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	4b60      	ldr	r3, [pc, #384]	@ (8005c9c <checkDemoModCalisma+0x514>)
 8005b1a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005c94 <checkDemoModCalisma+0x50c>)
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	4b5e      	ldr	r3, [pc, #376]	@ (8005c9c <checkDemoModCalisma+0x514>)
 8005b24:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005b26:	4b5a      	ldr	r3, [pc, #360]	@ (8005c90 <checkDemoModCalisma+0x508>)
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005c9c <checkDemoModCalisma+0x514>)
 8005b2c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005b2e:	4b57      	ldr	r3, [pc, #348]	@ (8005c8c <checkDemoModCalisma+0x504>)
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	4b5a      	ldr	r3, [pc, #360]	@ (8005c9c <checkDemoModCalisma+0x514>)
 8005b34:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005b36:	4b54      	ldr	r3, [pc, #336]	@ (8005c88 <checkDemoModCalisma+0x500>)
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	4b58      	ldr	r3, [pc, #352]	@ (8005c9c <checkDemoModCalisma+0x514>)
 8005b3c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005b3e:	4b58      	ldr	r3, [pc, #352]	@ (8005ca0 <checkDemoModCalisma+0x518>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005b44:	4b4f      	ldr	r3, [pc, #316]	@ (8005c84 <checkDemoModCalisma+0x4fc>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005b4a:	4b56      	ldr	r3, [pc, #344]	@ (8005ca4 <checkDemoModCalisma+0x51c>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 8087 	bne.w	8005c62 <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005b54:	4a54      	ldr	r2, [pc, #336]	@ (8005ca8 <checkDemoModCalisma+0x520>)
 8005b56:	2101      	movs	r1, #1
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f002 ff2d 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005b5e:	4a53      	ldr	r2, [pc, #332]	@ (8005cac <checkDemoModCalisma+0x524>)
 8005b60:	2101      	movs	r1, #1
 8005b62:	2002      	movs	r0, #2
 8005b64:	f002 ff28 	bl	80089b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005b68:	4b4b      	ldr	r3, [pc, #300]	@ (8005c98 <checkDemoModCalisma+0x510>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	4950      	ldr	r1, [pc, #320]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005b70:	4618      	mov	r0, r3
 8005b72:	f007 fa77 	bl	800d064 <itoa>
			lcd_print(2,12,snum);
 8005b76:	4a4e      	ldr	r2, [pc, #312]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005b78:	210c      	movs	r1, #12
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	f002 ff1c 	bl	80089b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005b80:	4b44      	ldr	r3, [pc, #272]	@ (8005c94 <checkDemoModCalisma+0x50c>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	220a      	movs	r2, #10
 8005b86:	494a      	ldr	r1, [pc, #296]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f007 fa6b 	bl	800d064 <itoa>
			lcd_print(2,13,snum);
 8005b8e:	4a48      	ldr	r2, [pc, #288]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005b90:	210d      	movs	r1, #13
 8005b92:	2002      	movs	r0, #2
 8005b94:	f002 ff10 	bl	80089b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005b98:	4b3d      	ldr	r3, [pc, #244]	@ (8005c90 <checkDemoModCalisma+0x508>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	220a      	movs	r2, #10
 8005b9e:	4944      	ldr	r1, [pc, #272]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f007 fa5f 	bl	800d064 <itoa>
			lcd_print(2,14,snum);
 8005ba6:	4a42      	ldr	r2, [pc, #264]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005ba8:	210e      	movs	r1, #14
 8005baa:	2002      	movs	r0, #2
 8005bac:	f002 ff04 	bl	80089b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005bb0:	4b36      	ldr	r3, [pc, #216]	@ (8005c8c <checkDemoModCalisma+0x504>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	493e      	ldr	r1, [pc, #248]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f007 fa53 	bl	800d064 <itoa>
			lcd_print(2,15,snum);
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005bc0:	210f      	movs	r1, #15
 8005bc2:	2002      	movs	r0, #2
 8005bc4:	f002 fef8 	bl	80089b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8005c88 <checkDemoModCalisma+0x500>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	220a      	movs	r2, #10
 8005bce:	4938      	ldr	r1, [pc, #224]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f007 fa47 	bl	800d064 <itoa>
			lcd_print(2,16,snum);
 8005bd6:	4a36      	ldr	r2, [pc, #216]	@ (8005cb0 <checkDemoModCalisma+0x528>)
 8005bd8:	2110      	movs	r1, #16
 8005bda:	2002      	movs	r0, #2
 8005bdc:	f002 feec 	bl	80089b8 <lcd_print>
			mesajYazildi=1;
 8005be0:	4b34      	ldr	r3, [pc, #208]	@ (8005cb4 <checkDemoModCalisma+0x52c>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005be6:	e03c      	b.n	8005c62 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005be8:	4b33      	ldr	r3, [pc, #204]	@ (8005cb8 <checkDemoModCalisma+0x530>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d003      	beq.n	8005bf8 <checkDemoModCalisma+0x470>
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca4 <checkDemoModCalisma+0x51c>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d134      	bne.n	8005c62 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bfe:	481b      	ldr	r0, [pc, #108]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 8005c00:	f004 fa1b 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c04:	2200      	movs	r2, #0
 8005c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c0a:	4818      	ldr	r0, [pc, #96]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 8005c0c:	f004 fa15 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2104      	movs	r1, #4
 8005c14:	4815      	ldr	r0, [pc, #84]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 8005c16:	f004 fa10 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	4813      	ldr	r0, [pc, #76]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 8005c20:	f004 fa0b 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c24:	2200      	movs	r2, #0
 8005c26:	2101      	movs	r1, #1
 8005c28:	4810      	ldr	r0, [pc, #64]	@ (8005c6c <checkDemoModCalisma+0x4e4>)
 8005c2a:	f004 fa06 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2120      	movs	r1, #32
 8005c32:	480d      	ldr	r0, [pc, #52]	@ (8005c68 <checkDemoModCalisma+0x4e0>)
 8005c34:	f004 fa01 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	480a      	ldr	r0, [pc, #40]	@ (8005c68 <checkDemoModCalisma+0x4e0>)
 8005c3e:	f004 f9fc 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005c42:	2200      	movs	r2, #0
 8005c44:	2180      	movs	r1, #128	@ 0x80
 8005c46:	480b      	ldr	r0, [pc, #44]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005c48:	f004 f9f7 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2140      	movs	r1, #64	@ 0x40
 8005c50:	4808      	ldr	r0, [pc, #32]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005c52:	f004 f9f2 	bl	800a03a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c56:	2200      	movs	r2, #0
 8005c58:	2120      	movs	r1, #32
 8005c5a:	4806      	ldr	r0, [pc, #24]	@ (8005c74 <checkDemoModCalisma+0x4ec>)
 8005c5c:	f004 f9ed 	bl	800a03a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005c60:	e7ff      	b.n	8005c62 <checkDemoModCalisma+0x4da>
 8005c62:	bf00      	nop
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	40010c00 	.word	0x40010c00
 8005c70:	20001121 	.word	0x20001121
 8005c74:	40010800 	.word	0x40010800
 8005c78:	200010a0 	.word	0x200010a0
 8005c7c:	200010b0 	.word	0x200010b0
 8005c80:	20001120 	.word	0x20001120
 8005c84:	20001106 	.word	0x20001106
 8005c88:	200010c5 	.word	0x200010c5
 8005c8c:	200010c6 	.word	0x200010c6
 8005c90:	20000000 	.word	0x20000000
 8005c94:	20000001 	.word	0x20000001
 8005c98:	200010c7 	.word	0x200010c7
 8005c9c:	20000ff0 	.word	0x20000ff0
 8005ca0:	200010f4 	.word	0x200010f4
 8005ca4:	200010e5 	.word	0x200010e5
 8005ca8:	20000140 	.word	0x20000140
 8005cac:	20000168 	.word	0x20000168
 8005cb0:	20001060 	.word	0x20001060
 8005cb4:	200010fc 	.word	0x200010fc
 8005cb8:	200010e6 	.word	0x200010e6

08005cbc <mainLoop>:

void mainLoop() {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005cc2:	f7fe f853 	bl	8003d6c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4894      	ldr	r0, [pc, #592]	@ (8005f1c <mainLoop+0x260>)
 8005cca:	f004 f99f 	bl	800a00c <HAL_GPIO_ReadPin>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d136      	bne.n	8005d42 <mainLoop+0x86>
 8005cd4:	2108      	movs	r1, #8
 8005cd6:	4892      	ldr	r0, [pc, #584]	@ (8005f20 <mainLoop+0x264>)
 8005cd8:	f004 f998 	bl	800a00c <HAL_GPIO_ReadPin>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d12f      	bne.n	8005d42 <mainLoop+0x86>
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	488d      	ldr	r0, [pc, #564]	@ (8005f1c <mainLoop+0x260>)
 8005ce6:	f004 f991 	bl	800a00c <HAL_GPIO_ReadPin>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d128      	bne.n	8005d42 <mainLoop+0x86>
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	488a      	ldr	r0, [pc, #552]	@ (8005f1c <mainLoop+0x260>)
 8005cf4:	f004 f98a 	bl	800a00c <HAL_GPIO_ReadPin>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d121      	bne.n	8005d42 <mainLoop+0x86>
 8005cfe:	2108      	movs	r1, #8
 8005d00:	4886      	ldr	r0, [pc, #536]	@ (8005f1c <mainLoop+0x260>)
 8005d02:	f004 f983 	bl	800a00c <HAL_GPIO_ReadPin>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11a      	bne.n	8005d42 <mainLoop+0x86>
 8005d0c:	2180      	movs	r1, #128	@ 0x80
 8005d0e:	4884      	ldr	r0, [pc, #528]	@ (8005f20 <mainLoop+0x264>)
 8005d10:	f004 f97c 	bl	800a00c <HAL_GPIO_ReadPin>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d113      	bne.n	8005d42 <mainLoop+0x86>
 8005d1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d1e:	4880      	ldr	r0, [pc, #512]	@ (8005f20 <mainLoop+0x264>)
 8005d20:	f004 f974 	bl	800a00c <HAL_GPIO_ReadPin>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d10b      	bne.n	8005d42 <mainLoop+0x86>
 8005d2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d2e:	487c      	ldr	r0, [pc, #496]	@ (8005f20 <mainLoop+0x264>)
 8005d30:	f004 f96c 	bl	800a00c <HAL_GPIO_ReadPin>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d103      	bne.n	8005d42 <mainLoop+0x86>
			butonKontrol=0;
 8005d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f24 <mainLoop+0x268>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e003      	b.n	8005d4a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005d42:	4b79      	ldr	r3, [pc, #484]	@ (8005f28 <mainLoop+0x26c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a79      	ldr	r2, [pc, #484]	@ (8005f2c <mainLoop+0x270>)
 8005d48:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005d4a:	f7fe f8c1 	bl	8003ed0 <buttonCheck>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d103      	bne.n	8005d5c <mainLoop+0xa0>
			backLightTimer = millis;
 8005d54:	4b74      	ldr	r3, [pc, #464]	@ (8005f28 <mainLoop+0x26c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a74      	ldr	r2, [pc, #464]	@ (8005f2c <mainLoop+0x270>)
 8005d5a:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005d5c:	4b74      	ldr	r3, [pc, #464]	@ (8005f30 <mainLoop+0x274>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02c      	beq.n	8005dbe <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d64:	bf00      	nop
 8005d66:	4873      	ldr	r0, [pc, #460]	@ (8005f34 <mainLoop+0x278>)
 8005d68:	f004 ff79 	bl	800ac5e <HAL_I2C_GetError>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d0f9      	beq.n	8005d66 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005d72:	bf00      	nop
 8005d74:	486f      	ldr	r0, [pc, #444]	@ (8005f34 <mainLoop+0x278>)
 8005d76:	f004 ff65 	bl	800ac44 <HAL_I2C_GetState>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d1f9      	bne.n	8005d74 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005d80:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005d84:	9302      	str	r3, [sp, #8]
 8005d86:	236e      	movs	r3, #110	@ 0x6e
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	4b6b      	ldr	r3, [pc, #428]	@ (8005f38 <mainLoop+0x27c>)
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	236e      	movs	r3, #110	@ 0x6e
 8005d90:	2200      	movs	r2, #0
 8005d92:	21a0      	movs	r1, #160	@ 0xa0
 8005d94:	4867      	ldr	r0, [pc, #412]	@ (8005f34 <mainLoop+0x278>)
 8005d96:	f004 fbf3 	bl	800a580 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005d9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d9e:	f003 fb65 	bl	800946c <HAL_Delay>

		  hafizaYaz=0;
 8005da2:	4b63      	ldr	r3, [pc, #396]	@ (8005f30 <mainLoop+0x274>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8005da8:	4a64      	ldr	r2, [pc, #400]	@ (8005f3c <mainLoop+0x280>)
 8005daa:	2101      	movs	r1, #1
 8005dac:	2002      	movs	r0, #2
 8005dae:	f002 fe03 	bl	80089b8 <lcd_print>

		  HAL_Delay(1000);
 8005db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005db6:	f003 fb59 	bl	800946c <HAL_Delay>
		  lcd_clear();
 8005dba:	f002 fe29 	bl	8008a10 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005dbe:	4b60      	ldr	r3, [pc, #384]	@ (8005f40 <mainLoop+0x284>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f083 0301 	eor.w	r3, r3, #1
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d043      	beq.n	8005e54 <mainLoop+0x198>
 8005dcc:	4859      	ldr	r0, [pc, #356]	@ (8005f34 <mainLoop+0x278>)
 8005dce:	f004 ff39 	bl	800ac44 <HAL_I2C_GetState>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d13d      	bne.n	8005e54 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8005dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f44 <mainLoop+0x288>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d028      	beq.n	8005e38 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8005de6:	4a58      	ldr	r2, [pc, #352]	@ (8005f48 <mainLoop+0x28c>)
 8005de8:	2101      	movs	r1, #1
 8005dea:	2001      	movs	r0, #1
 8005dec:	f002 fde4 	bl	80089b8 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005df0:	4a56      	ldr	r2, [pc, #344]	@ (8005f4c <mainLoop+0x290>)
 8005df2:	2101      	movs	r1, #1
 8005df4:	2002      	movs	r0, #2
 8005df6:	f002 fddf 	bl	80089b8 <lcd_print>
			  HAL_Delay(1000);
 8005dfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dfe:	f003 fb35 	bl	800946c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005e02:	bf00      	nop
 8005e04:	484b      	ldr	r0, [pc, #300]	@ (8005f34 <mainLoop+0x278>)
 8005e06:	f004 ff2a 	bl	800ac5e <HAL_I2C_GetError>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d0f9      	beq.n	8005e04 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e10:	e003      	b.n	8005e1a <mainLoop+0x15e>
				  HAL_Delay(1000);
 8005e12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e16:	f003 fb29 	bl	800946c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e1a:	4846      	ldr	r0, [pc, #280]	@ (8005f34 <mainLoop+0x278>)
 8005e1c:	f004 ff12 	bl	800ac44 <HAL_I2C_GetState>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d1f5      	bne.n	8005e12 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005e26:	4a4a      	ldr	r2, [pc, #296]	@ (8005f50 <mainLoop+0x294>)
 8005e28:	2101      	movs	r1, #1
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	f002 fdc4 	bl	80089b8 <lcd_print>

			  ilkOkuma=1;
 8005e30:	4b44      	ldr	r3, [pc, #272]	@ (8005f44 <mainLoop+0x288>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e006      	b.n	8005e46 <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005e38:	4a46      	ldr	r2, [pc, #280]	@ (8005f54 <mainLoop+0x298>)
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	f002 fdbb 	bl	80089b8 <lcd_print>
			  lcd_clear();
 8005e42:	f002 fde5 	bl	8008a10 <lcd_clear>
		  }

		  lcd_clear();
 8005e46:	f002 fde3 	bl	8008a10 <lcd_clear>

		  eepromKontrol();
 8005e4a:	f7fa f9f3 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f40 <mainLoop+0x284>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005e54:	4b40      	ldr	r3, [pc, #256]	@ (8005f58 <mainLoop+0x29c>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d11c      	bne.n	8005e96 <mainLoop+0x1da>
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f5c <mainLoop+0x2a0>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f083 0301 	eor.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d015      	beq.n	8005e96 <mainLoop+0x1da>
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f60 <mainLoop+0x2a4>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d111      	bne.n	8005e96 <mainLoop+0x1da>
			lcd_clear();
 8005e72:	f002 fdcd 	bl	8008a10 <lcd_clear>
			HAL_Delay(10);
 8005e76:	200a      	movs	r0, #10
 8005e78:	f003 faf8 	bl	800946c <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005e7c:	4a39      	ldr	r2, [pc, #228]	@ (8005f64 <mainLoop+0x2a8>)
 8005e7e:	2101      	movs	r1, #1
 8005e80:	2001      	movs	r0, #1
 8005e82:	f002 fd99 	bl	80089b8 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005e86:	4a38      	ldr	r2, [pc, #224]	@ (8005f68 <mainLoop+0x2ac>)
 8005e88:	2101      	movs	r1, #1
 8005e8a:	2002      	movs	r0, #2
 8005e8c:	f002 fd94 	bl	80089b8 <lcd_print>
			mesajYazildi=1;
 8005e90:	4b32      	ldr	r3, [pc, #200]	@ (8005f5c <mainLoop+0x2a0>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005e96:	4b30      	ldr	r3, [pc, #192]	@ (8005f58 <mainLoop+0x29c>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d112      	bne.n	8005ec4 <mainLoop+0x208>
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	481e      	ldr	r0, [pc, #120]	@ (8005f1c <mainLoop+0x260>)
 8005ea2:	f004 f8b3 	bl	800a00c <HAL_GPIO_ReadPin>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10b      	bne.n	8005ec4 <mainLoop+0x208>
 8005eac:	2104      	movs	r1, #4
 8005eae:	481b      	ldr	r0, [pc, #108]	@ (8005f1c <mainLoop+0x260>)
 8005eb0:	f004 f8ac 	bl	800a00c <HAL_GPIO_ReadPin>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d104      	bne.n	8005ec4 <mainLoop+0x208>
			menuGiris=1;
 8005eba:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <mainLoop+0x29c>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005ec0:	f002 fda6 	bl	8008a10 <lcd_clear>
		}

		if(menuGiris==1) {
 8005ec4:	4b24      	ldr	r3, [pc, #144]	@ (8005f58 <mainLoop+0x29c>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <mainLoop+0x214>
			menu();
 8005ecc:	f7fb fa26 	bl	800131c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005ed0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ed4:	4812      	ldr	r0, [pc, #72]	@ (8005f20 <mainLoop+0x264>)
 8005ed6:	f004 f8c8 	bl	800a06a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ede:	4823      	ldr	r0, [pc, #140]	@ (8005f6c <mainLoop+0x2b0>)
 8005ee0:	f004 f894 	bl	800a00c <HAL_GPIO_ReadPin>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <mainLoop+0x244>
 8005eea:	4b21      	ldr	r3, [pc, #132]	@ (8005f70 <mainLoop+0x2b4>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f083 0301 	eor.w	r3, r3, #1
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <mainLoop+0x244>
			stopVar=1;
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f74 <mainLoop+0x2b8>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <mainLoop+0x24a>
		} else {
			stopVar=0;
 8005f00:	4b1c      	ldr	r3, [pc, #112]	@ (8005f74 <mainLoop+0x2b8>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005f06:	f7fe f817 	bl	8003f38 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005f0a:	f7fe f849 	bl	8003fa0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005f0e:	f7fe f88d 	bl	800402c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005f12:	f7fe f8dd 	bl	80040d0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005f16:	f7ff fc37 	bl	8005788 <checkDemoModCalisma>
		checkLCDBacklight();
 8005f1a:	e6d2      	b.n	8005cc2 <mainLoop+0x6>
 8005f1c:	40010800 	.word	0x40010800
 8005f20:	40011000 	.word	0x40011000
 8005f24:	200010f7 	.word	0x200010f7
 8005f28:	200010a0 	.word	0x200010a0
 8005f2c:	200010bc 	.word	0x200010bc
 8005f30:	200010f4 	.word	0x200010f4
 8005f34:	20001944 	.word	0x20001944
 8005f38:	20000ff0 	.word	0x20000ff0
 8005f3c:	20001868 	.word	0x20001868
 8005f40:	200010f5 	.word	0x200010f5
 8005f44:	200010f6 	.word	0x200010f6
 8005f48:	2000017c 	.word	0x2000017c
 8005f4c:	2000187c 	.word	0x2000187c
 8005f50:	20001890 	.word	0x20001890
 8005f54:	200018a4 	.word	0x200018a4
 8005f58:	200010e5 	.word	0x200010e5
 8005f5c:	200010fc 	.word	0x200010fc
 8005f60:	200010e6 	.word	0x200010e6
 8005f64:	200000c8 	.word	0x200000c8
 8005f68:	200000dc 	.word	0x200000dc
 8005f6c:	40010c00 	.word	0x40010c00
 8005f70:	2000111d 	.word	0x2000111d
 8005f74:	2000111a 	.word	0x2000111a

08005f78 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005f78:	b5b0      	push	{r4, r5, r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 853d 	bne.w	8006a04 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005f8a:	4ac7      	ldr	r2, [pc, #796]	@ (80062a8 <loadMenuTexts+0x330>)
 8005f8c:	4bc7      	ldr	r3, [pc, #796]	@ (80062ac <loadMenuTexts+0x334>)
 8005f8e:	4614      	mov	r4, r2
 8005f90:	461d      	mov	r5, r3
 8005f92:	6828      	ldr	r0, [r5, #0]
 8005f94:	6869      	ldr	r1, [r5, #4]
 8005f96:	68aa      	ldr	r2, [r5, #8]
 8005f98:	68eb      	ldr	r3, [r5, #12]
 8005f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9c:	7c2b      	ldrb	r3, [r5, #16]
 8005f9e:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005fa0:	4ac3      	ldr	r2, [pc, #780]	@ (80062b0 <loadMenuTexts+0x338>)
 8005fa2:	4bc4      	ldr	r3, [pc, #784]	@ (80062b4 <loadMenuTexts+0x33c>)
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	6828      	ldr	r0, [r5, #0]
 8005faa:	6869      	ldr	r1, [r5, #4]
 8005fac:	68aa      	ldr	r2, [r5, #8]
 8005fae:	68eb      	ldr	r3, [r5, #12]
 8005fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb2:	7c2b      	ldrb	r3, [r5, #16]
 8005fb4:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005fb6:	4ac0      	ldr	r2, [pc, #768]	@ (80062b8 <loadMenuTexts+0x340>)
 8005fb8:	4bc0      	ldr	r3, [pc, #768]	@ (80062bc <loadMenuTexts+0x344>)
 8005fba:	4614      	mov	r4, r2
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	6828      	ldr	r0, [r5, #0]
 8005fc0:	6869      	ldr	r1, [r5, #4]
 8005fc2:	68aa      	ldr	r2, [r5, #8]
 8005fc4:	68eb      	ldr	r3, [r5, #12]
 8005fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc8:	7c2b      	ldrb	r3, [r5, #16]
 8005fca:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005fcc:	4abc      	ldr	r2, [pc, #752]	@ (80062c0 <loadMenuTexts+0x348>)
 8005fce:	4bbd      	ldr	r3, [pc, #756]	@ (80062c4 <loadMenuTexts+0x34c>)
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	6828      	ldr	r0, [r5, #0]
 8005fd6:	6869      	ldr	r1, [r5, #4]
 8005fd8:	68aa      	ldr	r2, [r5, #8]
 8005fda:	68eb      	ldr	r3, [r5, #12]
 8005fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fde:	7c2b      	ldrb	r3, [r5, #16]
 8005fe0:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005fe2:	4ab9      	ldr	r2, [pc, #740]	@ (80062c8 <loadMenuTexts+0x350>)
 8005fe4:	4bb9      	ldr	r3, [pc, #740]	@ (80062cc <loadMenuTexts+0x354>)
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	461d      	mov	r5, r3
 8005fea:	6828      	ldr	r0, [r5, #0]
 8005fec:	6869      	ldr	r1, [r5, #4]
 8005fee:	68aa      	ldr	r2, [r5, #8]
 8005ff0:	68eb      	ldr	r3, [r5, #12]
 8005ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff4:	7c2b      	ldrb	r3, [r5, #16]
 8005ff6:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005ff8:	4ab5      	ldr	r2, [pc, #724]	@ (80062d0 <loadMenuTexts+0x358>)
 8005ffa:	4bb6      	ldr	r3, [pc, #728]	@ (80062d4 <loadMenuTexts+0x35c>)
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	461d      	mov	r5, r3
 8006000:	6828      	ldr	r0, [r5, #0]
 8006002:	6869      	ldr	r1, [r5, #4]
 8006004:	68aa      	ldr	r2, [r5, #8]
 8006006:	68eb      	ldr	r3, [r5, #12]
 8006008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800600a:	7c2b      	ldrb	r3, [r5, #16]
 800600c:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800600e:	4ab2      	ldr	r2, [pc, #712]	@ (80062d8 <loadMenuTexts+0x360>)
 8006010:	4bb2      	ldr	r3, [pc, #712]	@ (80062dc <loadMenuTexts+0x364>)
 8006012:	4614      	mov	r4, r2
 8006014:	461d      	mov	r5, r3
 8006016:	6828      	ldr	r0, [r5, #0]
 8006018:	6869      	ldr	r1, [r5, #4]
 800601a:	68aa      	ldr	r2, [r5, #8]
 800601c:	68eb      	ldr	r3, [r5, #12]
 800601e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006020:	7c2b      	ldrb	r3, [r5, #16]
 8006022:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006024:	4aae      	ldr	r2, [pc, #696]	@ (80062e0 <loadMenuTexts+0x368>)
 8006026:	4baf      	ldr	r3, [pc, #700]	@ (80062e4 <loadMenuTexts+0x36c>)
 8006028:	4614      	mov	r4, r2
 800602a:	461d      	mov	r5, r3
 800602c:	6828      	ldr	r0, [r5, #0]
 800602e:	6869      	ldr	r1, [r5, #4]
 8006030:	68aa      	ldr	r2, [r5, #8]
 8006032:	68eb      	ldr	r3, [r5, #12]
 8006034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006036:	7c2b      	ldrb	r3, [r5, #16]
 8006038:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 800603a:	4aab      	ldr	r2, [pc, #684]	@ (80062e8 <loadMenuTexts+0x370>)
 800603c:	4bab      	ldr	r3, [pc, #684]	@ (80062ec <loadMenuTexts+0x374>)
 800603e:	4614      	mov	r4, r2
 8006040:	461d      	mov	r5, r3
 8006042:	6828      	ldr	r0, [r5, #0]
 8006044:	6869      	ldr	r1, [r5, #4]
 8006046:	68aa      	ldr	r2, [r5, #8]
 8006048:	68eb      	ldr	r3, [r5, #12]
 800604a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604c:	7c2b      	ldrb	r3, [r5, #16]
 800604e:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006050:	4aa7      	ldr	r2, [pc, #668]	@ (80062f0 <loadMenuTexts+0x378>)
 8006052:	4ba8      	ldr	r3, [pc, #672]	@ (80062f4 <loadMenuTexts+0x37c>)
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	6828      	ldr	r0, [r5, #0]
 800605a:	6869      	ldr	r1, [r5, #4]
 800605c:	68aa      	ldr	r2, [r5, #8]
 800605e:	68eb      	ldr	r3, [r5, #12]
 8006060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006062:	7c2b      	ldrb	r3, [r5, #16]
 8006064:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006066:	4aa4      	ldr	r2, [pc, #656]	@ (80062f8 <loadMenuTexts+0x380>)
 8006068:	4ba4      	ldr	r3, [pc, #656]	@ (80062fc <loadMenuTexts+0x384>)
 800606a:	4614      	mov	r4, r2
 800606c:	461d      	mov	r5, r3
 800606e:	6828      	ldr	r0, [r5, #0]
 8006070:	6869      	ldr	r1, [r5, #4]
 8006072:	68aa      	ldr	r2, [r5, #8]
 8006074:	68eb      	ldr	r3, [r5, #12]
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	7c2b      	ldrb	r3, [r5, #16]
 800607a:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 800607c:	4aa0      	ldr	r2, [pc, #640]	@ (8006300 <loadMenuTexts+0x388>)
 800607e:	4ba1      	ldr	r3, [pc, #644]	@ (8006304 <loadMenuTexts+0x38c>)
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	6828      	ldr	r0, [r5, #0]
 8006086:	6869      	ldr	r1, [r5, #4]
 8006088:	68aa      	ldr	r2, [r5, #8]
 800608a:	68eb      	ldr	r3, [r5, #12]
 800608c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800608e:	7c2b      	ldrb	r3, [r5, #16]
 8006090:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006092:	4a9d      	ldr	r2, [pc, #628]	@ (8006308 <loadMenuTexts+0x390>)
 8006094:	4b9d      	ldr	r3, [pc, #628]	@ (800630c <loadMenuTexts+0x394>)
 8006096:	4614      	mov	r4, r2
 8006098:	461d      	mov	r5, r3
 800609a:	6828      	ldr	r0, [r5, #0]
 800609c:	6869      	ldr	r1, [r5, #4]
 800609e:	68aa      	ldr	r2, [r5, #8]
 80060a0:	68eb      	ldr	r3, [r5, #12]
 80060a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a4:	7c2b      	ldrb	r3, [r5, #16]
 80060a6:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 80060a8:	4a99      	ldr	r2, [pc, #612]	@ (8006310 <loadMenuTexts+0x398>)
 80060aa:	4b9a      	ldr	r3, [pc, #616]	@ (8006314 <loadMenuTexts+0x39c>)
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	6828      	ldr	r0, [r5, #0]
 80060b2:	6869      	ldr	r1, [r5, #4]
 80060b4:	68aa      	ldr	r2, [r5, #8]
 80060b6:	68eb      	ldr	r3, [r5, #12]
 80060b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ba:	7c2b      	ldrb	r3, [r5, #16]
 80060bc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80060be:	4a96      	ldr	r2, [pc, #600]	@ (8006318 <loadMenuTexts+0x3a0>)
 80060c0:	4b96      	ldr	r3, [pc, #600]	@ (800631c <loadMenuTexts+0x3a4>)
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	6828      	ldr	r0, [r5, #0]
 80060c8:	6869      	ldr	r1, [r5, #4]
 80060ca:	68aa      	ldr	r2, [r5, #8]
 80060cc:	68eb      	ldr	r3, [r5, #12]
 80060ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d0:	7c2b      	ldrb	r3, [r5, #16]
 80060d2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80060d4:	4a92      	ldr	r2, [pc, #584]	@ (8006320 <loadMenuTexts+0x3a8>)
 80060d6:	4b93      	ldr	r3, [pc, #588]	@ (8006324 <loadMenuTexts+0x3ac>)
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	6828      	ldr	r0, [r5, #0]
 80060de:	6869      	ldr	r1, [r5, #4]
 80060e0:	68aa      	ldr	r2, [r5, #8]
 80060e2:	68eb      	ldr	r3, [r5, #12]
 80060e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e6:	7c2b      	ldrb	r3, [r5, #16]
 80060e8:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80060ea:	4a8f      	ldr	r2, [pc, #572]	@ (8006328 <loadMenuTexts+0x3b0>)
 80060ec:	4b8f      	ldr	r3, [pc, #572]	@ (800632c <loadMenuTexts+0x3b4>)
 80060ee:	4614      	mov	r4, r2
 80060f0:	461d      	mov	r5, r3
 80060f2:	6828      	ldr	r0, [r5, #0]
 80060f4:	6869      	ldr	r1, [r5, #4]
 80060f6:	68aa      	ldr	r2, [r5, #8]
 80060f8:	68eb      	ldr	r3, [r5, #12]
 80060fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fc:	7c2b      	ldrb	r3, [r5, #16]
 80060fe:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006100:	4a8b      	ldr	r2, [pc, #556]	@ (8006330 <loadMenuTexts+0x3b8>)
 8006102:	4b8c      	ldr	r3, [pc, #560]	@ (8006334 <loadMenuTexts+0x3bc>)
 8006104:	4614      	mov	r4, r2
 8006106:	461d      	mov	r5, r3
 8006108:	6828      	ldr	r0, [r5, #0]
 800610a:	6869      	ldr	r1, [r5, #4]
 800610c:	68aa      	ldr	r2, [r5, #8]
 800610e:	68eb      	ldr	r3, [r5, #12]
 8006110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006112:	7c2b      	ldrb	r3, [r5, #16]
 8006114:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006116:	4a88      	ldr	r2, [pc, #544]	@ (8006338 <loadMenuTexts+0x3c0>)
 8006118:	4b88      	ldr	r3, [pc, #544]	@ (800633c <loadMenuTexts+0x3c4>)
 800611a:	4614      	mov	r4, r2
 800611c:	461d      	mov	r5, r3
 800611e:	6828      	ldr	r0, [r5, #0]
 8006120:	6869      	ldr	r1, [r5, #4]
 8006122:	68aa      	ldr	r2, [r5, #8]
 8006124:	68eb      	ldr	r3, [r5, #12]
 8006126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006128:	7c2b      	ldrb	r3, [r5, #16]
 800612a:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 800612c:	4a84      	ldr	r2, [pc, #528]	@ (8006340 <loadMenuTexts+0x3c8>)
 800612e:	4b85      	ldr	r3, [pc, #532]	@ (8006344 <loadMenuTexts+0x3cc>)
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	6828      	ldr	r0, [r5, #0]
 8006136:	6869      	ldr	r1, [r5, #4]
 8006138:	68aa      	ldr	r2, [r5, #8]
 800613a:	68eb      	ldr	r3, [r5, #12]
 800613c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613e:	7c2b      	ldrb	r3, [r5, #16]
 8006140:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006142:	4a81      	ldr	r2, [pc, #516]	@ (8006348 <loadMenuTexts+0x3d0>)
 8006144:	4b81      	ldr	r3, [pc, #516]	@ (800634c <loadMenuTexts+0x3d4>)
 8006146:	4614      	mov	r4, r2
 8006148:	461d      	mov	r5, r3
 800614a:	6828      	ldr	r0, [r5, #0]
 800614c:	6869      	ldr	r1, [r5, #4]
 800614e:	68aa      	ldr	r2, [r5, #8]
 8006150:	68eb      	ldr	r3, [r5, #12]
 8006152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006154:	7c2b      	ldrb	r3, [r5, #16]
 8006156:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006158:	4a7d      	ldr	r2, [pc, #500]	@ (8006350 <loadMenuTexts+0x3d8>)
 800615a:	4b7e      	ldr	r3, [pc, #504]	@ (8006354 <loadMenuTexts+0x3dc>)
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	6828      	ldr	r0, [r5, #0]
 8006162:	6869      	ldr	r1, [r5, #4]
 8006164:	68aa      	ldr	r2, [r5, #8]
 8006166:	68eb      	ldr	r3, [r5, #12]
 8006168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616a:	7c2b      	ldrb	r3, [r5, #16]
 800616c:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800616e:	4a7a      	ldr	r2, [pc, #488]	@ (8006358 <loadMenuTexts+0x3e0>)
 8006170:	4b7a      	ldr	r3, [pc, #488]	@ (800635c <loadMenuTexts+0x3e4>)
 8006172:	4614      	mov	r4, r2
 8006174:	461d      	mov	r5, r3
 8006176:	6828      	ldr	r0, [r5, #0]
 8006178:	6869      	ldr	r1, [r5, #4]
 800617a:	68aa      	ldr	r2, [r5, #8]
 800617c:	68eb      	ldr	r3, [r5, #12]
 800617e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006180:	7c2b      	ldrb	r3, [r5, #16]
 8006182:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006184:	4a76      	ldr	r2, [pc, #472]	@ (8006360 <loadMenuTexts+0x3e8>)
 8006186:	4b77      	ldr	r3, [pc, #476]	@ (8006364 <loadMenuTexts+0x3ec>)
 8006188:	4614      	mov	r4, r2
 800618a:	461d      	mov	r5, r3
 800618c:	6828      	ldr	r0, [r5, #0]
 800618e:	6869      	ldr	r1, [r5, #4]
 8006190:	68aa      	ldr	r2, [r5, #8]
 8006192:	68eb      	ldr	r3, [r5, #12]
 8006194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006196:	7c2b      	ldrb	r3, [r5, #16]
 8006198:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800619a:	4a73      	ldr	r2, [pc, #460]	@ (8006368 <loadMenuTexts+0x3f0>)
 800619c:	4b73      	ldr	r3, [pc, #460]	@ (800636c <loadMenuTexts+0x3f4>)
 800619e:	4614      	mov	r4, r2
 80061a0:	461d      	mov	r5, r3
 80061a2:	6828      	ldr	r0, [r5, #0]
 80061a4:	6869      	ldr	r1, [r5, #4]
 80061a6:	68aa      	ldr	r2, [r5, #8]
 80061a8:	68eb      	ldr	r3, [r5, #12]
 80061aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ac:	7c2b      	ldrb	r3, [r5, #16]
 80061ae:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80061b0:	4a6f      	ldr	r2, [pc, #444]	@ (8006370 <loadMenuTexts+0x3f8>)
 80061b2:	4b70      	ldr	r3, [pc, #448]	@ (8006374 <loadMenuTexts+0x3fc>)
 80061b4:	4614      	mov	r4, r2
 80061b6:	461d      	mov	r5, r3
 80061b8:	6828      	ldr	r0, [r5, #0]
 80061ba:	6869      	ldr	r1, [r5, #4]
 80061bc:	68aa      	ldr	r2, [r5, #8]
 80061be:	68eb      	ldr	r3, [r5, #12]
 80061c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c2:	7c2b      	ldrb	r3, [r5, #16]
 80061c4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80061c6:	4a6c      	ldr	r2, [pc, #432]	@ (8006378 <loadMenuTexts+0x400>)
 80061c8:	4b6c      	ldr	r3, [pc, #432]	@ (800637c <loadMenuTexts+0x404>)
 80061ca:	4614      	mov	r4, r2
 80061cc:	461d      	mov	r5, r3
 80061ce:	6828      	ldr	r0, [r5, #0]
 80061d0:	6869      	ldr	r1, [r5, #4]
 80061d2:	68aa      	ldr	r2, [r5, #8]
 80061d4:	68eb      	ldr	r3, [r5, #12]
 80061d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d8:	7c2b      	ldrb	r3, [r5, #16]
 80061da:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80061dc:	4a68      	ldr	r2, [pc, #416]	@ (8006380 <loadMenuTexts+0x408>)
 80061de:	4b69      	ldr	r3, [pc, #420]	@ (8006384 <loadMenuTexts+0x40c>)
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	6828      	ldr	r0, [r5, #0]
 80061e6:	6869      	ldr	r1, [r5, #4]
 80061e8:	68aa      	ldr	r2, [r5, #8]
 80061ea:	68eb      	ldr	r3, [r5, #12]
 80061ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ee:	7c2b      	ldrb	r3, [r5, #16]
 80061f0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80061f2:	4a65      	ldr	r2, [pc, #404]	@ (8006388 <loadMenuTexts+0x410>)
 80061f4:	4b65      	ldr	r3, [pc, #404]	@ (800638c <loadMenuTexts+0x414>)
 80061f6:	4614      	mov	r4, r2
 80061f8:	461d      	mov	r5, r3
 80061fa:	6828      	ldr	r0, [r5, #0]
 80061fc:	6869      	ldr	r1, [r5, #4]
 80061fe:	68aa      	ldr	r2, [r5, #8]
 8006200:	68eb      	ldr	r3, [r5, #12]
 8006202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006204:	7c2b      	ldrb	r3, [r5, #16]
 8006206:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006208:	4a61      	ldr	r2, [pc, #388]	@ (8006390 <loadMenuTexts+0x418>)
 800620a:	4b62      	ldr	r3, [pc, #392]	@ (8006394 <loadMenuTexts+0x41c>)
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	6828      	ldr	r0, [r5, #0]
 8006212:	6869      	ldr	r1, [r5, #4]
 8006214:	68aa      	ldr	r2, [r5, #8]
 8006216:	68eb      	ldr	r3, [r5, #12]
 8006218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621a:	7c2b      	ldrb	r3, [r5, #16]
 800621c:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800621e:	4a5e      	ldr	r2, [pc, #376]	@ (8006398 <loadMenuTexts+0x420>)
 8006220:	4b5e      	ldr	r3, [pc, #376]	@ (800639c <loadMenuTexts+0x424>)
 8006222:	4614      	mov	r4, r2
 8006224:	461d      	mov	r5, r3
 8006226:	6828      	ldr	r0, [r5, #0]
 8006228:	6869      	ldr	r1, [r5, #4]
 800622a:	68aa      	ldr	r2, [r5, #8]
 800622c:	68eb      	ldr	r3, [r5, #12]
 800622e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006230:	7c2b      	ldrb	r3, [r5, #16]
 8006232:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006234:	4a5a      	ldr	r2, [pc, #360]	@ (80063a0 <loadMenuTexts+0x428>)
 8006236:	4b5b      	ldr	r3, [pc, #364]	@ (80063a4 <loadMenuTexts+0x42c>)
 8006238:	4614      	mov	r4, r2
 800623a:	461d      	mov	r5, r3
 800623c:	6828      	ldr	r0, [r5, #0]
 800623e:	6869      	ldr	r1, [r5, #4]
 8006240:	68aa      	ldr	r2, [r5, #8]
 8006242:	68eb      	ldr	r3, [r5, #12]
 8006244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006246:	7c2b      	ldrb	r3, [r5, #16]
 8006248:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800624a:	4a57      	ldr	r2, [pc, #348]	@ (80063a8 <loadMenuTexts+0x430>)
 800624c:	4b57      	ldr	r3, [pc, #348]	@ (80063ac <loadMenuTexts+0x434>)
 800624e:	4614      	mov	r4, r2
 8006250:	461d      	mov	r5, r3
 8006252:	6828      	ldr	r0, [r5, #0]
 8006254:	6869      	ldr	r1, [r5, #4]
 8006256:	68aa      	ldr	r2, [r5, #8]
 8006258:	68eb      	ldr	r3, [r5, #12]
 800625a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800625c:	7c2b      	ldrb	r3, [r5, #16]
 800625e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006260:	4a53      	ldr	r2, [pc, #332]	@ (80063b0 <loadMenuTexts+0x438>)
 8006262:	4b54      	ldr	r3, [pc, #336]	@ (80063b4 <loadMenuTexts+0x43c>)
 8006264:	4614      	mov	r4, r2
 8006266:	461d      	mov	r5, r3
 8006268:	6828      	ldr	r0, [r5, #0]
 800626a:	6869      	ldr	r1, [r5, #4]
 800626c:	68aa      	ldr	r2, [r5, #8]
 800626e:	68eb      	ldr	r3, [r5, #12]
 8006270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006272:	7c2b      	ldrb	r3, [r5, #16]
 8006274:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006276:	4a50      	ldr	r2, [pc, #320]	@ (80063b8 <loadMenuTexts+0x440>)
 8006278:	4b50      	ldr	r3, [pc, #320]	@ (80063bc <loadMenuTexts+0x444>)
 800627a:	4614      	mov	r4, r2
 800627c:	461d      	mov	r5, r3
 800627e:	6828      	ldr	r0, [r5, #0]
 8006280:	6869      	ldr	r1, [r5, #4]
 8006282:	68aa      	ldr	r2, [r5, #8]
 8006284:	68eb      	ldr	r3, [r5, #12]
 8006286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006288:	7c2b      	ldrb	r3, [r5, #16]
 800628a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 800628c:	4a4c      	ldr	r2, [pc, #304]	@ (80063c0 <loadMenuTexts+0x448>)
 800628e:	4b4d      	ldr	r3, [pc, #308]	@ (80063c4 <loadMenuTexts+0x44c>)
 8006290:	4614      	mov	r4, r2
 8006292:	461d      	mov	r5, r3
 8006294:	6828      	ldr	r0, [r5, #0]
 8006296:	6869      	ldr	r1, [r5, #4]
 8006298:	68aa      	ldr	r2, [r5, #8]
 800629a:	68eb      	ldr	r3, [r5, #12]
 800629c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629e:	7c2b      	ldrb	r3, [r5, #16]
 80062a0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80062a2:	4a49      	ldr	r2, [pc, #292]	@ (80063c8 <loadMenuTexts+0x450>)
 80062a4:	e092      	b.n	80063cc <loadMenuTexts+0x454>
 80062a6:	bf00      	nop
 80062a8:	20001228 	.word	0x20001228
 80062ac:	20000190 	.word	0x20000190
 80062b0:	2000123c 	.word	0x2000123c
 80062b4:	200001a4 	.word	0x200001a4
 80062b8:	20001250 	.word	0x20001250
 80062bc:	200001b8 	.word	0x200001b8
 80062c0:	20001264 	.word	0x20001264
 80062c4:	200001cc 	.word	0x200001cc
 80062c8:	20001278 	.word	0x20001278
 80062cc:	200001e0 	.word	0x200001e0
 80062d0:	2000128c 	.word	0x2000128c
 80062d4:	200001f4 	.word	0x200001f4
 80062d8:	200012a0 	.word	0x200012a0
 80062dc:	20000208 	.word	0x20000208
 80062e0:	200012b4 	.word	0x200012b4
 80062e4:	2000021c 	.word	0x2000021c
 80062e8:	200012c8 	.word	0x200012c8
 80062ec:	20000230 	.word	0x20000230
 80062f0:	200012dc 	.word	0x200012dc
 80062f4:	20000244 	.word	0x20000244
 80062f8:	200012f0 	.word	0x200012f0
 80062fc:	20000258 	.word	0x20000258
 8006300:	20001304 	.word	0x20001304
 8006304:	2000026c 	.word	0x2000026c
 8006308:	20001318 	.word	0x20001318
 800630c:	20000280 	.word	0x20000280
 8006310:	2000132c 	.word	0x2000132c
 8006314:	20000294 	.word	0x20000294
 8006318:	20001340 	.word	0x20001340
 800631c:	200002a8 	.word	0x200002a8
 8006320:	20001354 	.word	0x20001354
 8006324:	200002bc 	.word	0x200002bc
 8006328:	20001368 	.word	0x20001368
 800632c:	200002d0 	.word	0x200002d0
 8006330:	2000137c 	.word	0x2000137c
 8006334:	200002e4 	.word	0x200002e4
 8006338:	20001390 	.word	0x20001390
 800633c:	200002f8 	.word	0x200002f8
 8006340:	200013a4 	.word	0x200013a4
 8006344:	2000030c 	.word	0x2000030c
 8006348:	200013b8 	.word	0x200013b8
 800634c:	20000320 	.word	0x20000320
 8006350:	200013cc 	.word	0x200013cc
 8006354:	20000334 	.word	0x20000334
 8006358:	200013e0 	.word	0x200013e0
 800635c:	20000348 	.word	0x20000348
 8006360:	200013f4 	.word	0x200013f4
 8006364:	2000035c 	.word	0x2000035c
 8006368:	20001408 	.word	0x20001408
 800636c:	20000370 	.word	0x20000370
 8006370:	2000141c 	.word	0x2000141c
 8006374:	20000384 	.word	0x20000384
 8006378:	20001430 	.word	0x20001430
 800637c:	20000398 	.word	0x20000398
 8006380:	20001444 	.word	0x20001444
 8006384:	200003ac 	.word	0x200003ac
 8006388:	20001458 	.word	0x20001458
 800638c:	200003c0 	.word	0x200003c0
 8006390:	2000146c 	.word	0x2000146c
 8006394:	200003d4 	.word	0x200003d4
 8006398:	20001480 	.word	0x20001480
 800639c:	200003e8 	.word	0x200003e8
 80063a0:	20001494 	.word	0x20001494
 80063a4:	200003fc 	.word	0x200003fc
 80063a8:	200014a8 	.word	0x200014a8
 80063ac:	20000410 	.word	0x20000410
 80063b0:	200014bc 	.word	0x200014bc
 80063b4:	20000424 	.word	0x20000424
 80063b8:	200014d0 	.word	0x200014d0
 80063bc:	20000438 	.word	0x20000438
 80063c0:	200014e4 	.word	0x200014e4
 80063c4:	2000044c 	.word	0x2000044c
 80063c8:	200014f8 	.word	0x200014f8
 80063cc:	4bc7      	ldr	r3, [pc, #796]	@ (80066ec <loadMenuTexts+0x774>)
 80063ce:	4614      	mov	r4, r2
 80063d0:	461d      	mov	r5, r3
 80063d2:	6828      	ldr	r0, [r5, #0]
 80063d4:	6869      	ldr	r1, [r5, #4]
 80063d6:	68aa      	ldr	r2, [r5, #8]
 80063d8:	68eb      	ldr	r3, [r5, #12]
 80063da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063dc:	7c2b      	ldrb	r3, [r5, #16]
 80063de:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80063e0:	4ac3      	ldr	r2, [pc, #780]	@ (80066f0 <loadMenuTexts+0x778>)
 80063e2:	4bc4      	ldr	r3, [pc, #784]	@ (80066f4 <loadMenuTexts+0x77c>)
 80063e4:	4614      	mov	r4, r2
 80063e6:	461d      	mov	r5, r3
 80063e8:	6828      	ldr	r0, [r5, #0]
 80063ea:	6869      	ldr	r1, [r5, #4]
 80063ec:	68aa      	ldr	r2, [r5, #8]
 80063ee:	68eb      	ldr	r3, [r5, #12]
 80063f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f2:	7c2b      	ldrb	r3, [r5, #16]
 80063f4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80063f6:	4ac0      	ldr	r2, [pc, #768]	@ (80066f8 <loadMenuTexts+0x780>)
 80063f8:	4bc0      	ldr	r3, [pc, #768]	@ (80066fc <loadMenuTexts+0x784>)
 80063fa:	4614      	mov	r4, r2
 80063fc:	461d      	mov	r5, r3
 80063fe:	6828      	ldr	r0, [r5, #0]
 8006400:	6869      	ldr	r1, [r5, #4]
 8006402:	68aa      	ldr	r2, [r5, #8]
 8006404:	68eb      	ldr	r3, [r5, #12]
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	7c2b      	ldrb	r3, [r5, #16]
 800640a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 800640c:	4abc      	ldr	r2, [pc, #752]	@ (8006700 <loadMenuTexts+0x788>)
 800640e:	4bbd      	ldr	r3, [pc, #756]	@ (8006704 <loadMenuTexts+0x78c>)
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	6828      	ldr	r0, [r5, #0]
 8006416:	6869      	ldr	r1, [r5, #4]
 8006418:	68aa      	ldr	r2, [r5, #8]
 800641a:	68eb      	ldr	r3, [r5, #12]
 800641c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641e:	7c2b      	ldrb	r3, [r5, #16]
 8006420:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8006422:	4ab9      	ldr	r2, [pc, #740]	@ (8006708 <loadMenuTexts+0x790>)
 8006424:	4bb9      	ldr	r3, [pc, #740]	@ (800670c <loadMenuTexts+0x794>)
 8006426:	4614      	mov	r4, r2
 8006428:	461d      	mov	r5, r3
 800642a:	6828      	ldr	r0, [r5, #0]
 800642c:	6869      	ldr	r1, [r5, #4]
 800642e:	68aa      	ldr	r2, [r5, #8]
 8006430:	68eb      	ldr	r3, [r5, #12]
 8006432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006434:	7c2b      	ldrb	r3, [r5, #16]
 8006436:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006438:	4ab5      	ldr	r2, [pc, #724]	@ (8006710 <loadMenuTexts+0x798>)
 800643a:	4bb6      	ldr	r3, [pc, #728]	@ (8006714 <loadMenuTexts+0x79c>)
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	6828      	ldr	r0, [r5, #0]
 8006442:	6869      	ldr	r1, [r5, #4]
 8006444:	68aa      	ldr	r2, [r5, #8]
 8006446:	68eb      	ldr	r3, [r5, #12]
 8006448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644a:	7c2b      	ldrb	r3, [r5, #16]
 800644c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800644e:	4ab2      	ldr	r2, [pc, #712]	@ (8006718 <loadMenuTexts+0x7a0>)
 8006450:	4bb2      	ldr	r3, [pc, #712]	@ (800671c <loadMenuTexts+0x7a4>)
 8006452:	4614      	mov	r4, r2
 8006454:	461d      	mov	r5, r3
 8006456:	6828      	ldr	r0, [r5, #0]
 8006458:	6869      	ldr	r1, [r5, #4]
 800645a:	68aa      	ldr	r2, [r5, #8]
 800645c:	68eb      	ldr	r3, [r5, #12]
 800645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006460:	7c2b      	ldrb	r3, [r5, #16]
 8006462:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006464:	4aae      	ldr	r2, [pc, #696]	@ (8006720 <loadMenuTexts+0x7a8>)
 8006466:	4baf      	ldr	r3, [pc, #700]	@ (8006724 <loadMenuTexts+0x7ac>)
 8006468:	4614      	mov	r4, r2
 800646a:	461d      	mov	r5, r3
 800646c:	6828      	ldr	r0, [r5, #0]
 800646e:	6869      	ldr	r1, [r5, #4]
 8006470:	68aa      	ldr	r2, [r5, #8]
 8006472:	68eb      	ldr	r3, [r5, #12]
 8006474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006476:	7c2b      	ldrb	r3, [r5, #16]
 8006478:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800647a:	4aab      	ldr	r2, [pc, #684]	@ (8006728 <loadMenuTexts+0x7b0>)
 800647c:	4bab      	ldr	r3, [pc, #684]	@ (800672c <loadMenuTexts+0x7b4>)
 800647e:	4614      	mov	r4, r2
 8006480:	461d      	mov	r5, r3
 8006482:	6828      	ldr	r0, [r5, #0]
 8006484:	6869      	ldr	r1, [r5, #4]
 8006486:	68aa      	ldr	r2, [r5, #8]
 8006488:	68eb      	ldr	r3, [r5, #12]
 800648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648c:	7c2b      	ldrb	r3, [r5, #16]
 800648e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006490:	4aa7      	ldr	r2, [pc, #668]	@ (8006730 <loadMenuTexts+0x7b8>)
 8006492:	4ba8      	ldr	r3, [pc, #672]	@ (8006734 <loadMenuTexts+0x7bc>)
 8006494:	4614      	mov	r4, r2
 8006496:	461d      	mov	r5, r3
 8006498:	6828      	ldr	r0, [r5, #0]
 800649a:	6869      	ldr	r1, [r5, #4]
 800649c:	68aa      	ldr	r2, [r5, #8]
 800649e:	68eb      	ldr	r3, [r5, #12]
 80064a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a2:	7c2b      	ldrb	r3, [r5, #16]
 80064a4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80064a6:	4aa4      	ldr	r2, [pc, #656]	@ (8006738 <loadMenuTexts+0x7c0>)
 80064a8:	4ba4      	ldr	r3, [pc, #656]	@ (800673c <loadMenuTexts+0x7c4>)
 80064aa:	4614      	mov	r4, r2
 80064ac:	461d      	mov	r5, r3
 80064ae:	6828      	ldr	r0, [r5, #0]
 80064b0:	6869      	ldr	r1, [r5, #4]
 80064b2:	68aa      	ldr	r2, [r5, #8]
 80064b4:	68eb      	ldr	r3, [r5, #12]
 80064b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b8:	7c2b      	ldrb	r3, [r5, #16]
 80064ba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80064bc:	4aa0      	ldr	r2, [pc, #640]	@ (8006740 <loadMenuTexts+0x7c8>)
 80064be:	4ba1      	ldr	r3, [pc, #644]	@ (8006744 <loadMenuTexts+0x7cc>)
 80064c0:	4614      	mov	r4, r2
 80064c2:	461d      	mov	r5, r3
 80064c4:	6828      	ldr	r0, [r5, #0]
 80064c6:	6869      	ldr	r1, [r5, #4]
 80064c8:	68aa      	ldr	r2, [r5, #8]
 80064ca:	68eb      	ldr	r3, [r5, #12]
 80064cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ce:	7c2b      	ldrb	r3, [r5, #16]
 80064d0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80064d2:	4a9d      	ldr	r2, [pc, #628]	@ (8006748 <loadMenuTexts+0x7d0>)
 80064d4:	4b9d      	ldr	r3, [pc, #628]	@ (800674c <loadMenuTexts+0x7d4>)
 80064d6:	4614      	mov	r4, r2
 80064d8:	461d      	mov	r5, r3
 80064da:	6828      	ldr	r0, [r5, #0]
 80064dc:	6869      	ldr	r1, [r5, #4]
 80064de:	68aa      	ldr	r2, [r5, #8]
 80064e0:	68eb      	ldr	r3, [r5, #12]
 80064e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e4:	7c2b      	ldrb	r3, [r5, #16]
 80064e6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80064e8:	4a99      	ldr	r2, [pc, #612]	@ (8006750 <loadMenuTexts+0x7d8>)
 80064ea:	4b9a      	ldr	r3, [pc, #616]	@ (8006754 <loadMenuTexts+0x7dc>)
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	6828      	ldr	r0, [r5, #0]
 80064f2:	6869      	ldr	r1, [r5, #4]
 80064f4:	68aa      	ldr	r2, [r5, #8]
 80064f6:	68eb      	ldr	r3, [r5, #12]
 80064f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fa:	7c2b      	ldrb	r3, [r5, #16]
 80064fc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80064fe:	4a96      	ldr	r2, [pc, #600]	@ (8006758 <loadMenuTexts+0x7e0>)
 8006500:	4b96      	ldr	r3, [pc, #600]	@ (800675c <loadMenuTexts+0x7e4>)
 8006502:	4614      	mov	r4, r2
 8006504:	461d      	mov	r5, r3
 8006506:	6828      	ldr	r0, [r5, #0]
 8006508:	6869      	ldr	r1, [r5, #4]
 800650a:	68aa      	ldr	r2, [r5, #8]
 800650c:	68eb      	ldr	r3, [r5, #12]
 800650e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006510:	7c2b      	ldrb	r3, [r5, #16]
 8006512:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006514:	4a92      	ldr	r2, [pc, #584]	@ (8006760 <loadMenuTexts+0x7e8>)
 8006516:	4b93      	ldr	r3, [pc, #588]	@ (8006764 <loadMenuTexts+0x7ec>)
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	6828      	ldr	r0, [r5, #0]
 800651e:	6869      	ldr	r1, [r5, #4]
 8006520:	68aa      	ldr	r2, [r5, #8]
 8006522:	68eb      	ldr	r3, [r5, #12]
 8006524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006526:	7c2b      	ldrb	r3, [r5, #16]
 8006528:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 800652a:	4a8f      	ldr	r2, [pc, #572]	@ (8006768 <loadMenuTexts+0x7f0>)
 800652c:	4b8f      	ldr	r3, [pc, #572]	@ (800676c <loadMenuTexts+0x7f4>)
 800652e:	4614      	mov	r4, r2
 8006530:	461d      	mov	r5, r3
 8006532:	6828      	ldr	r0, [r5, #0]
 8006534:	6869      	ldr	r1, [r5, #4]
 8006536:	68aa      	ldr	r2, [r5, #8]
 8006538:	68eb      	ldr	r3, [r5, #12]
 800653a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653c:	7c2b      	ldrb	r3, [r5, #16]
 800653e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006540:	4a8b      	ldr	r2, [pc, #556]	@ (8006770 <loadMenuTexts+0x7f8>)
 8006542:	4b8c      	ldr	r3, [pc, #560]	@ (8006774 <loadMenuTexts+0x7fc>)
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	6828      	ldr	r0, [r5, #0]
 800654a:	6869      	ldr	r1, [r5, #4]
 800654c:	68aa      	ldr	r2, [r5, #8]
 800654e:	68eb      	ldr	r3, [r5, #12]
 8006550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006552:	7c2b      	ldrb	r3, [r5, #16]
 8006554:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8006556:	4a88      	ldr	r2, [pc, #544]	@ (8006778 <loadMenuTexts+0x800>)
 8006558:	4b88      	ldr	r3, [pc, #544]	@ (800677c <loadMenuTexts+0x804>)
 800655a:	4614      	mov	r4, r2
 800655c:	461d      	mov	r5, r3
 800655e:	6828      	ldr	r0, [r5, #0]
 8006560:	6869      	ldr	r1, [r5, #4]
 8006562:	68aa      	ldr	r2, [r5, #8]
 8006564:	68eb      	ldr	r3, [r5, #12]
 8006566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006568:	7c2b      	ldrb	r3, [r5, #16]
 800656a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 800656c:	4a84      	ldr	r2, [pc, #528]	@ (8006780 <loadMenuTexts+0x808>)
 800656e:	4b85      	ldr	r3, [pc, #532]	@ (8006784 <loadMenuTexts+0x80c>)
 8006570:	4614      	mov	r4, r2
 8006572:	461d      	mov	r5, r3
 8006574:	6828      	ldr	r0, [r5, #0]
 8006576:	6869      	ldr	r1, [r5, #4]
 8006578:	68aa      	ldr	r2, [r5, #8]
 800657a:	68eb      	ldr	r3, [r5, #12]
 800657c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657e:	7c2b      	ldrb	r3, [r5, #16]
 8006580:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006582:	4a81      	ldr	r2, [pc, #516]	@ (8006788 <loadMenuTexts+0x810>)
 8006584:	4b81      	ldr	r3, [pc, #516]	@ (800678c <loadMenuTexts+0x814>)
 8006586:	4614      	mov	r4, r2
 8006588:	461d      	mov	r5, r3
 800658a:	6828      	ldr	r0, [r5, #0]
 800658c:	6869      	ldr	r1, [r5, #4]
 800658e:	68aa      	ldr	r2, [r5, #8]
 8006590:	68eb      	ldr	r3, [r5, #12]
 8006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006594:	7c2b      	ldrb	r3, [r5, #16]
 8006596:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006598:	4a7d      	ldr	r2, [pc, #500]	@ (8006790 <loadMenuTexts+0x818>)
 800659a:	4b7e      	ldr	r3, [pc, #504]	@ (8006794 <loadMenuTexts+0x81c>)
 800659c:	4614      	mov	r4, r2
 800659e:	461d      	mov	r5, r3
 80065a0:	6828      	ldr	r0, [r5, #0]
 80065a2:	6869      	ldr	r1, [r5, #4]
 80065a4:	68aa      	ldr	r2, [r5, #8]
 80065a6:	68eb      	ldr	r3, [r5, #12]
 80065a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065aa:	7c2b      	ldrb	r3, [r5, #16]
 80065ac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80065ae:	4a7a      	ldr	r2, [pc, #488]	@ (8006798 <loadMenuTexts+0x820>)
 80065b0:	4b7a      	ldr	r3, [pc, #488]	@ (800679c <loadMenuTexts+0x824>)
 80065b2:	4614      	mov	r4, r2
 80065b4:	461d      	mov	r5, r3
 80065b6:	6828      	ldr	r0, [r5, #0]
 80065b8:	6869      	ldr	r1, [r5, #4]
 80065ba:	68aa      	ldr	r2, [r5, #8]
 80065bc:	68eb      	ldr	r3, [r5, #12]
 80065be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c0:	7c2b      	ldrb	r3, [r5, #16]
 80065c2:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80065c4:	4a76      	ldr	r2, [pc, #472]	@ (80067a0 <loadMenuTexts+0x828>)
 80065c6:	4b77      	ldr	r3, [pc, #476]	@ (80067a4 <loadMenuTexts+0x82c>)
 80065c8:	4614      	mov	r4, r2
 80065ca:	461d      	mov	r5, r3
 80065cc:	6828      	ldr	r0, [r5, #0]
 80065ce:	6869      	ldr	r1, [r5, #4]
 80065d0:	68aa      	ldr	r2, [r5, #8]
 80065d2:	68eb      	ldr	r3, [r5, #12]
 80065d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d6:	7c2b      	ldrb	r3, [r5, #16]
 80065d8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80065da:	4a73      	ldr	r2, [pc, #460]	@ (80067a8 <loadMenuTexts+0x830>)
 80065dc:	4b73      	ldr	r3, [pc, #460]	@ (80067ac <loadMenuTexts+0x834>)
 80065de:	4614      	mov	r4, r2
 80065e0:	461d      	mov	r5, r3
 80065e2:	6828      	ldr	r0, [r5, #0]
 80065e4:	6869      	ldr	r1, [r5, #4]
 80065e6:	68aa      	ldr	r2, [r5, #8]
 80065e8:	68eb      	ldr	r3, [r5, #12]
 80065ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ec:	7c2b      	ldrb	r3, [r5, #16]
 80065ee:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80065f0:	4a6f      	ldr	r2, [pc, #444]	@ (80067b0 <loadMenuTexts+0x838>)
 80065f2:	4b70      	ldr	r3, [pc, #448]	@ (80067b4 <loadMenuTexts+0x83c>)
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	6828      	ldr	r0, [r5, #0]
 80065fa:	6869      	ldr	r1, [r5, #4]
 80065fc:	68aa      	ldr	r2, [r5, #8]
 80065fe:	68eb      	ldr	r3, [r5, #12]
 8006600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006602:	7c2b      	ldrb	r3, [r5, #16]
 8006604:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006606:	4a6c      	ldr	r2, [pc, #432]	@ (80067b8 <loadMenuTexts+0x840>)
 8006608:	4b6c      	ldr	r3, [pc, #432]	@ (80067bc <loadMenuTexts+0x844>)
 800660a:	4614      	mov	r4, r2
 800660c:	461d      	mov	r5, r3
 800660e:	6828      	ldr	r0, [r5, #0]
 8006610:	6869      	ldr	r1, [r5, #4]
 8006612:	68aa      	ldr	r2, [r5, #8]
 8006614:	68eb      	ldr	r3, [r5, #12]
 8006616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006618:	7c2b      	ldrb	r3, [r5, #16]
 800661a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 800661c:	4a68      	ldr	r2, [pc, #416]	@ (80067c0 <loadMenuTexts+0x848>)
 800661e:	4b69      	ldr	r3, [pc, #420]	@ (80067c4 <loadMenuTexts+0x84c>)
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	6828      	ldr	r0, [r5, #0]
 8006626:	6869      	ldr	r1, [r5, #4]
 8006628:	68aa      	ldr	r2, [r5, #8]
 800662a:	68eb      	ldr	r3, [r5, #12]
 800662c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662e:	7c2b      	ldrb	r3, [r5, #16]
 8006630:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8006632:	4a65      	ldr	r2, [pc, #404]	@ (80067c8 <loadMenuTexts+0x850>)
 8006634:	4b65      	ldr	r3, [pc, #404]	@ (80067cc <loadMenuTexts+0x854>)
 8006636:	4614      	mov	r4, r2
 8006638:	461d      	mov	r5, r3
 800663a:	6828      	ldr	r0, [r5, #0]
 800663c:	6869      	ldr	r1, [r5, #4]
 800663e:	68aa      	ldr	r2, [r5, #8]
 8006640:	68eb      	ldr	r3, [r5, #12]
 8006642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006644:	7c2b      	ldrb	r3, [r5, #16]
 8006646:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8006648:	4a61      	ldr	r2, [pc, #388]	@ (80067d0 <loadMenuTexts+0x858>)
 800664a:	4b62      	ldr	r3, [pc, #392]	@ (80067d4 <loadMenuTexts+0x85c>)
 800664c:	4614      	mov	r4, r2
 800664e:	461d      	mov	r5, r3
 8006650:	6828      	ldr	r0, [r5, #0]
 8006652:	6869      	ldr	r1, [r5, #4]
 8006654:	68aa      	ldr	r2, [r5, #8]
 8006656:	68eb      	ldr	r3, [r5, #12]
 8006658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665a:	7c2b      	ldrb	r3, [r5, #16]
 800665c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800665e:	4a5e      	ldr	r2, [pc, #376]	@ (80067d8 <loadMenuTexts+0x860>)
 8006660:	4b5e      	ldr	r3, [pc, #376]	@ (80067dc <loadMenuTexts+0x864>)
 8006662:	4614      	mov	r4, r2
 8006664:	461d      	mov	r5, r3
 8006666:	6828      	ldr	r0, [r5, #0]
 8006668:	6869      	ldr	r1, [r5, #4]
 800666a:	68aa      	ldr	r2, [r5, #8]
 800666c:	68eb      	ldr	r3, [r5, #12]
 800666e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006670:	7c2b      	ldrb	r3, [r5, #16]
 8006672:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006674:	4a5a      	ldr	r2, [pc, #360]	@ (80067e0 <loadMenuTexts+0x868>)
 8006676:	4b5b      	ldr	r3, [pc, #364]	@ (80067e4 <loadMenuTexts+0x86c>)
 8006678:	4614      	mov	r4, r2
 800667a:	461d      	mov	r5, r3
 800667c:	6828      	ldr	r0, [r5, #0]
 800667e:	6869      	ldr	r1, [r5, #4]
 8006680:	68aa      	ldr	r2, [r5, #8]
 8006682:	68eb      	ldr	r3, [r5, #12]
 8006684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006686:	7c2b      	ldrb	r3, [r5, #16]
 8006688:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800668a:	4a57      	ldr	r2, [pc, #348]	@ (80067e8 <loadMenuTexts+0x870>)
 800668c:	4b57      	ldr	r3, [pc, #348]	@ (80067ec <loadMenuTexts+0x874>)
 800668e:	4614      	mov	r4, r2
 8006690:	461d      	mov	r5, r3
 8006692:	6828      	ldr	r0, [r5, #0]
 8006694:	6869      	ldr	r1, [r5, #4]
 8006696:	68aa      	ldr	r2, [r5, #8]
 8006698:	68eb      	ldr	r3, [r5, #12]
 800669a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800669c:	7c2b      	ldrb	r3, [r5, #16]
 800669e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80066a0:	4a53      	ldr	r2, [pc, #332]	@ (80067f0 <loadMenuTexts+0x878>)
 80066a2:	4b54      	ldr	r3, [pc, #336]	@ (80067f4 <loadMenuTexts+0x87c>)
 80066a4:	4614      	mov	r4, r2
 80066a6:	461d      	mov	r5, r3
 80066a8:	6828      	ldr	r0, [r5, #0]
 80066aa:	6869      	ldr	r1, [r5, #4]
 80066ac:	68aa      	ldr	r2, [r5, #8]
 80066ae:	68eb      	ldr	r3, [r5, #12]
 80066b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066b2:	7c2b      	ldrb	r3, [r5, #16]
 80066b4:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 80066b6:	4a50      	ldr	r2, [pc, #320]	@ (80067f8 <loadMenuTexts+0x880>)
 80066b8:	4b50      	ldr	r3, [pc, #320]	@ (80067fc <loadMenuTexts+0x884>)
 80066ba:	4614      	mov	r4, r2
 80066bc:	461d      	mov	r5, r3
 80066be:	6828      	ldr	r0, [r5, #0]
 80066c0:	6869      	ldr	r1, [r5, #4]
 80066c2:	68aa      	ldr	r2, [r5, #8]
 80066c4:	68eb      	ldr	r3, [r5, #12]
 80066c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c8:	7c2b      	ldrb	r3, [r5, #16]
 80066ca:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 80066cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006800 <loadMenuTexts+0x888>)
 80066ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006804 <loadMenuTexts+0x88c>)
 80066d0:	4614      	mov	r4, r2
 80066d2:	461d      	mov	r5, r3
 80066d4:	6828      	ldr	r0, [r5, #0]
 80066d6:	6869      	ldr	r1, [r5, #4]
 80066d8:	68aa      	ldr	r2, [r5, #8]
 80066da:	68eb      	ldr	r3, [r5, #12]
 80066dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066de:	7c2b      	ldrb	r3, [r5, #16]
 80066e0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 80066e2:	4a49      	ldr	r2, [pc, #292]	@ (8006808 <loadMenuTexts+0x890>)
 80066e4:	4b49      	ldr	r3, [pc, #292]	@ (800680c <loadMenuTexts+0x894>)
 80066e6:	4614      	mov	r4, r2
 80066e8:	461d      	mov	r5, r3
 80066ea:	e091      	b.n	8006810 <loadMenuTexts+0x898>
 80066ec:	20000460 	.word	0x20000460
 80066f0:	2000150c 	.word	0x2000150c
 80066f4:	20000474 	.word	0x20000474
 80066f8:	20001520 	.word	0x20001520
 80066fc:	20000488 	.word	0x20000488
 8006700:	20001534 	.word	0x20001534
 8006704:	2000049c 	.word	0x2000049c
 8006708:	20001548 	.word	0x20001548
 800670c:	200004b0 	.word	0x200004b0
 8006710:	2000155c 	.word	0x2000155c
 8006714:	200004c4 	.word	0x200004c4
 8006718:	20001570 	.word	0x20001570
 800671c:	200004d8 	.word	0x200004d8
 8006720:	20001584 	.word	0x20001584
 8006724:	200004ec 	.word	0x200004ec
 8006728:	20001598 	.word	0x20001598
 800672c:	20000500 	.word	0x20000500
 8006730:	200015ac 	.word	0x200015ac
 8006734:	20000514 	.word	0x20000514
 8006738:	200015c0 	.word	0x200015c0
 800673c:	20000528 	.word	0x20000528
 8006740:	200015d4 	.word	0x200015d4
 8006744:	2000053c 	.word	0x2000053c
 8006748:	200015e8 	.word	0x200015e8
 800674c:	20000550 	.word	0x20000550
 8006750:	200015fc 	.word	0x200015fc
 8006754:	20000564 	.word	0x20000564
 8006758:	20001610 	.word	0x20001610
 800675c:	20000578 	.word	0x20000578
 8006760:	20001624 	.word	0x20001624
 8006764:	2000058c 	.word	0x2000058c
 8006768:	20001638 	.word	0x20001638
 800676c:	200005a0 	.word	0x200005a0
 8006770:	2000164c 	.word	0x2000164c
 8006774:	200005b4 	.word	0x200005b4
 8006778:	20001660 	.word	0x20001660
 800677c:	200005c8 	.word	0x200005c8
 8006780:	20001674 	.word	0x20001674
 8006784:	200005dc 	.word	0x200005dc
 8006788:	20001688 	.word	0x20001688
 800678c:	200005f0 	.word	0x200005f0
 8006790:	2000169c 	.word	0x2000169c
 8006794:	20000604 	.word	0x20000604
 8006798:	200016b0 	.word	0x200016b0
 800679c:	20000618 	.word	0x20000618
 80067a0:	200016c4 	.word	0x200016c4
 80067a4:	2000062c 	.word	0x2000062c
 80067a8:	200016d8 	.word	0x200016d8
 80067ac:	20000640 	.word	0x20000640
 80067b0:	200016ec 	.word	0x200016ec
 80067b4:	20000654 	.word	0x20000654
 80067b8:	20001700 	.word	0x20001700
 80067bc:	20000668 	.word	0x20000668
 80067c0:	20001714 	.word	0x20001714
 80067c4:	2000067c 	.word	0x2000067c
 80067c8:	20001728 	.word	0x20001728
 80067cc:	20000690 	.word	0x20000690
 80067d0:	2000173c 	.word	0x2000173c
 80067d4:	200006a4 	.word	0x200006a4
 80067d8:	20001750 	.word	0x20001750
 80067dc:	200006b8 	.word	0x200006b8
 80067e0:	20001764 	.word	0x20001764
 80067e4:	200006cc 	.word	0x200006cc
 80067e8:	20001778 	.word	0x20001778
 80067ec:	200006e0 	.word	0x200006e0
 80067f0:	2000178c 	.word	0x2000178c
 80067f4:	200006f4 	.word	0x200006f4
 80067f8:	200017a0 	.word	0x200017a0
 80067fc:	20000c80 	.word	0x20000c80
 8006800:	200017b4 	.word	0x200017b4
 8006804:	20000c94 	.word	0x20000c94
 8006808:	200017c8 	.word	0x200017c8
 800680c:	20000ca8 	.word	0x20000ca8
 8006810:	6828      	ldr	r0, [r5, #0]
 8006812:	6869      	ldr	r1, [r5, #4]
 8006814:	68aa      	ldr	r2, [r5, #8]
 8006816:	68eb      	ldr	r3, [r5, #12]
 8006818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681a:	7c2b      	ldrb	r3, [r5, #16]
 800681c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800681e:	4a59      	ldr	r2, [pc, #356]	@ (8006984 <loadMenuTexts+0xa0c>)
 8006820:	4b59      	ldr	r3, [pc, #356]	@ (8006988 <loadMenuTexts+0xa10>)
 8006822:	4614      	mov	r4, r2
 8006824:	461d      	mov	r5, r3
 8006826:	6828      	ldr	r0, [r5, #0]
 8006828:	6869      	ldr	r1, [r5, #4]
 800682a:	68aa      	ldr	r2, [r5, #8]
 800682c:	68eb      	ldr	r3, [r5, #12]
 800682e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006830:	7c2b      	ldrb	r3, [r5, #16]
 8006832:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006834:	4a55      	ldr	r2, [pc, #340]	@ (800698c <loadMenuTexts+0xa14>)
 8006836:	4b56      	ldr	r3, [pc, #344]	@ (8006990 <loadMenuTexts+0xa18>)
 8006838:	4614      	mov	r4, r2
 800683a:	461d      	mov	r5, r3
 800683c:	6828      	ldr	r0, [r5, #0]
 800683e:	6869      	ldr	r1, [r5, #4]
 8006840:	68aa      	ldr	r2, [r5, #8]
 8006842:	68eb      	ldr	r3, [r5, #12]
 8006844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006846:	7c2b      	ldrb	r3, [r5, #16]
 8006848:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 800684a:	4a52      	ldr	r2, [pc, #328]	@ (8006994 <loadMenuTexts+0xa1c>)
 800684c:	4b52      	ldr	r3, [pc, #328]	@ (8006998 <loadMenuTexts+0xa20>)
 800684e:	4614      	mov	r4, r2
 8006850:	461d      	mov	r5, r3
 8006852:	6828      	ldr	r0, [r5, #0]
 8006854:	6869      	ldr	r1, [r5, #4]
 8006856:	68aa      	ldr	r2, [r5, #8]
 8006858:	68eb      	ldr	r3, [r5, #12]
 800685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685c:	7c2b      	ldrb	r3, [r5, #16]
 800685e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006860:	4a4e      	ldr	r2, [pc, #312]	@ (800699c <loadMenuTexts+0xa24>)
 8006862:	4b4f      	ldr	r3, [pc, #316]	@ (80069a0 <loadMenuTexts+0xa28>)
 8006864:	4614      	mov	r4, r2
 8006866:	461d      	mov	r5, r3
 8006868:	6828      	ldr	r0, [r5, #0]
 800686a:	6869      	ldr	r1, [r5, #4]
 800686c:	68aa      	ldr	r2, [r5, #8]
 800686e:	68eb      	ldr	r3, [r5, #12]
 8006870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006872:	7c2b      	ldrb	r3, [r5, #16]
 8006874:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006876:	4a4b      	ldr	r2, [pc, #300]	@ (80069a4 <loadMenuTexts+0xa2c>)
 8006878:	4b4b      	ldr	r3, [pc, #300]	@ (80069a8 <loadMenuTexts+0xa30>)
 800687a:	4614      	mov	r4, r2
 800687c:	461d      	mov	r5, r3
 800687e:	6828      	ldr	r0, [r5, #0]
 8006880:	6869      	ldr	r1, [r5, #4]
 8006882:	68aa      	ldr	r2, [r5, #8]
 8006884:	68eb      	ldr	r3, [r5, #12]
 8006886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006888:	7c2b      	ldrb	r3, [r5, #16]
 800688a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 800688c:	4a47      	ldr	r2, [pc, #284]	@ (80069ac <loadMenuTexts+0xa34>)
 800688e:	4b48      	ldr	r3, [pc, #288]	@ (80069b0 <loadMenuTexts+0xa38>)
 8006890:	4614      	mov	r4, r2
 8006892:	461d      	mov	r5, r3
 8006894:	6828      	ldr	r0, [r5, #0]
 8006896:	6869      	ldr	r1, [r5, #4]
 8006898:	68aa      	ldr	r2, [r5, #8]
 800689a:	68eb      	ldr	r3, [r5, #12]
 800689c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800689e:	7c2b      	ldrb	r3, [r5, #16]
 80068a0:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80068a2:	4a44      	ldr	r2, [pc, #272]	@ (80069b4 <loadMenuTexts+0xa3c>)
 80068a4:	4b44      	ldr	r3, [pc, #272]	@ (80069b8 <loadMenuTexts+0xa40>)
 80068a6:	4614      	mov	r4, r2
 80068a8:	461d      	mov	r5, r3
 80068aa:	6828      	ldr	r0, [r5, #0]
 80068ac:	6869      	ldr	r1, [r5, #4]
 80068ae:	68aa      	ldr	r2, [r5, #8]
 80068b0:	68eb      	ldr	r3, [r5, #12]
 80068b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b4:	7c2b      	ldrb	r3, [r5, #16]
 80068b6:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 80068b8:	4a40      	ldr	r2, [pc, #256]	@ (80069bc <loadMenuTexts+0xa44>)
 80068ba:	4b41      	ldr	r3, [pc, #260]	@ (80069c0 <loadMenuTexts+0xa48>)
 80068bc:	4614      	mov	r4, r2
 80068be:	461d      	mov	r5, r3
 80068c0:	6828      	ldr	r0, [r5, #0]
 80068c2:	6869      	ldr	r1, [r5, #4]
 80068c4:	68aa      	ldr	r2, [r5, #8]
 80068c6:	68eb      	ldr	r3, [r5, #12]
 80068c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ca:	7c2b      	ldrb	r3, [r5, #16]
 80068cc:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 80068ce:	4a3d      	ldr	r2, [pc, #244]	@ (80069c4 <loadMenuTexts+0xa4c>)
 80068d0:	4b3d      	ldr	r3, [pc, #244]	@ (80069c8 <loadMenuTexts+0xa50>)
 80068d2:	4614      	mov	r4, r2
 80068d4:	461d      	mov	r5, r3
 80068d6:	6828      	ldr	r0, [r5, #0]
 80068d8:	6869      	ldr	r1, [r5, #4]
 80068da:	68aa      	ldr	r2, [r5, #8]
 80068dc:	68eb      	ldr	r3, [r5, #12]
 80068de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e0:	7c2b      	ldrb	r3, [r5, #16]
 80068e2:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 80068e4:	4a39      	ldr	r2, [pc, #228]	@ (80069cc <loadMenuTexts+0xa54>)
 80068e6:	4b3a      	ldr	r3, [pc, #232]	@ (80069d0 <loadMenuTexts+0xa58>)
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	6828      	ldr	r0, [r5, #0]
 80068ee:	6869      	ldr	r1, [r5, #4]
 80068f0:	68aa      	ldr	r2, [r5, #8]
 80068f2:	68eb      	ldr	r3, [r5, #12]
 80068f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f6:	7c2b      	ldrb	r3, [r5, #16]
 80068f8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 80068fa:	4a36      	ldr	r2, [pc, #216]	@ (80069d4 <loadMenuTexts+0xa5c>)
 80068fc:	4b36      	ldr	r3, [pc, #216]	@ (80069d8 <loadMenuTexts+0xa60>)
 80068fe:	4614      	mov	r4, r2
 8006900:	461d      	mov	r5, r3
 8006902:	6828      	ldr	r0, [r5, #0]
 8006904:	6869      	ldr	r1, [r5, #4]
 8006906:	68aa      	ldr	r2, [r5, #8]
 8006908:	68eb      	ldr	r3, [r5, #12]
 800690a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800690c:	7c2b      	ldrb	r3, [r5, #16]
 800690e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006910:	4a32      	ldr	r2, [pc, #200]	@ (80069dc <loadMenuTexts+0xa64>)
 8006912:	4b33      	ldr	r3, [pc, #204]	@ (80069e0 <loadMenuTexts+0xa68>)
 8006914:	4614      	mov	r4, r2
 8006916:	461d      	mov	r5, r3
 8006918:	6828      	ldr	r0, [r5, #0]
 800691a:	6869      	ldr	r1, [r5, #4]
 800691c:	68aa      	ldr	r2, [r5, #8]
 800691e:	68eb      	ldr	r3, [r5, #12]
 8006920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006922:	7c2b      	ldrb	r3, [r5, #16]
 8006924:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006926:	4a2f      	ldr	r2, [pc, #188]	@ (80069e4 <loadMenuTexts+0xa6c>)
 8006928:	4b2f      	ldr	r3, [pc, #188]	@ (80069e8 <loadMenuTexts+0xa70>)
 800692a:	4614      	mov	r4, r2
 800692c:	461d      	mov	r5, r3
 800692e:	6828      	ldr	r0, [r5, #0]
 8006930:	6869      	ldr	r1, [r5, #4]
 8006932:	68aa      	ldr	r2, [r5, #8]
 8006934:	68eb      	ldr	r3, [r5, #12]
 8006936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006938:	7c2b      	ldrb	r3, [r5, #16]
 800693a:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 800693c:	4a2b      	ldr	r2, [pc, #172]	@ (80069ec <loadMenuTexts+0xa74>)
 800693e:	4b2c      	ldr	r3, [pc, #176]	@ (80069f0 <loadMenuTexts+0xa78>)
 8006940:	4614      	mov	r4, r2
 8006942:	461d      	mov	r5, r3
 8006944:	6828      	ldr	r0, [r5, #0]
 8006946:	6869      	ldr	r1, [r5, #4]
 8006948:	68aa      	ldr	r2, [r5, #8]
 800694a:	68eb      	ldr	r3, [r5, #12]
 800694c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694e:	7c2b      	ldrb	r3, [r5, #16]
 8006950:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006952:	4a28      	ldr	r2, [pc, #160]	@ (80069f4 <loadMenuTexts+0xa7c>)
 8006954:	4b28      	ldr	r3, [pc, #160]	@ (80069f8 <loadMenuTexts+0xa80>)
 8006956:	4614      	mov	r4, r2
 8006958:	461d      	mov	r5, r3
 800695a:	6828      	ldr	r0, [r5, #0]
 800695c:	6869      	ldr	r1, [r5, #4]
 800695e:	68aa      	ldr	r2, [r5, #8]
 8006960:	68eb      	ldr	r3, [r5, #12]
 8006962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006964:	7c2b      	ldrb	r3, [r5, #16]
 8006966:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006968:	4a24      	ldr	r2, [pc, #144]	@ (80069fc <loadMenuTexts+0xa84>)
 800696a:	4b25      	ldr	r3, [pc, #148]	@ (8006a00 <loadMenuTexts+0xa88>)
 800696c:	4614      	mov	r4, r2
 800696e:	461d      	mov	r5, r3
 8006970:	6828      	ldr	r0, [r5, #0]
 8006972:	6869      	ldr	r1, [r5, #4]
 8006974:	68aa      	ldr	r2, [r5, #8]
 8006976:	68eb      	ldr	r3, [r5, #12]
 8006978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697a:	7c2b      	ldrb	r3, [r5, #16]
 800697c:	7023      	strb	r3, [r4, #0]
 800697e:	f000 bd3a 	b.w	80073f6 <loadMenuTexts+0x147e>
 8006982:	bf00      	nop
 8006984:	200017dc 	.word	0x200017dc
 8006988:	20000cbc 	.word	0x20000cbc
 800698c:	200017f0 	.word	0x200017f0
 8006990:	20000d20 	.word	0x20000d20
 8006994:	20001804 	.word	0x20001804
 8006998:	20000d34 	.word	0x20000d34
 800699c:	20001818 	.word	0x20001818
 80069a0:	20000d70 	.word	0x20000d70
 80069a4:	2000182c 	.word	0x2000182c
 80069a8:	20000d84 	.word	0x20000d84
 80069ac:	20001840 	.word	0x20001840
 80069b0:	20000dc0 	.word	0x20000dc0
 80069b4:	20001854 	.word	0x20001854
 80069b8:	20000dd4 	.word	0x20000dd4
 80069bc:	20001868 	.word	0x20001868
 80069c0:	20000e10 	.word	0x20000e10
 80069c4:	2000187c 	.word	0x2000187c
 80069c8:	20000e38 	.word	0x20000e38
 80069cc:	20001890 	.word	0x20001890
 80069d0:	20000e60 	.word	0x20000e60
 80069d4:	200018a4 	.word	0x200018a4
 80069d8:	20000e88 	.word	0x20000e88
 80069dc:	200018b8 	.word	0x200018b8
 80069e0:	20000eb0 	.word	0x20000eb0
 80069e4:	200018cc 	.word	0x200018cc
 80069e8:	20000ed8 	.word	0x20000ed8
 80069ec:	200018e0 	.word	0x200018e0
 80069f0:	20000f00 	.word	0x20000f00
 80069f4:	200018f4 	.word	0x200018f4
 80069f8:	20000f28 	.word	0x20000f28
 80069fc:	20001908 	.word	0x20001908
 8006a00:	20000f50 	.word	0x20000f50
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006a04:	4ac6      	ldr	r2, [pc, #792]	@ (8006d20 <loadMenuTexts+0xda8>)
 8006a06:	4bc7      	ldr	r3, [pc, #796]	@ (8006d24 <loadMenuTexts+0xdac>)
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	6828      	ldr	r0, [r5, #0]
 8006a0e:	6869      	ldr	r1, [r5, #4]
 8006a10:	68aa      	ldr	r2, [r5, #8]
 8006a12:	68eb      	ldr	r3, [r5, #12]
 8006a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a16:	7c2b      	ldrb	r3, [r5, #16]
 8006a18:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006a1a:	4ac3      	ldr	r2, [pc, #780]	@ (8006d28 <loadMenuTexts+0xdb0>)
 8006a1c:	4bc3      	ldr	r3, [pc, #780]	@ (8006d2c <loadMenuTexts+0xdb4>)
 8006a1e:	4614      	mov	r4, r2
 8006a20:	461d      	mov	r5, r3
 8006a22:	6828      	ldr	r0, [r5, #0]
 8006a24:	6869      	ldr	r1, [r5, #4]
 8006a26:	68aa      	ldr	r2, [r5, #8]
 8006a28:	68eb      	ldr	r3, [r5, #12]
 8006a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2c:	7c2b      	ldrb	r3, [r5, #16]
 8006a2e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006a30:	4abf      	ldr	r2, [pc, #764]	@ (8006d30 <loadMenuTexts+0xdb8>)
 8006a32:	4bc0      	ldr	r3, [pc, #768]	@ (8006d34 <loadMenuTexts+0xdbc>)
 8006a34:	4614      	mov	r4, r2
 8006a36:	461d      	mov	r5, r3
 8006a38:	6828      	ldr	r0, [r5, #0]
 8006a3a:	6869      	ldr	r1, [r5, #4]
 8006a3c:	68aa      	ldr	r2, [r5, #8]
 8006a3e:	68eb      	ldr	r3, [r5, #12]
 8006a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a42:	7c2b      	ldrb	r3, [r5, #16]
 8006a44:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006a46:	4abc      	ldr	r2, [pc, #752]	@ (8006d38 <loadMenuTexts+0xdc0>)
 8006a48:	4bbc      	ldr	r3, [pc, #752]	@ (8006d3c <loadMenuTexts+0xdc4>)
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	461d      	mov	r5, r3
 8006a4e:	6828      	ldr	r0, [r5, #0]
 8006a50:	6869      	ldr	r1, [r5, #4]
 8006a52:	68aa      	ldr	r2, [r5, #8]
 8006a54:	68eb      	ldr	r3, [r5, #12]
 8006a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a58:	7c2b      	ldrb	r3, [r5, #16]
 8006a5a:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006a5c:	4ab8      	ldr	r2, [pc, #736]	@ (8006d40 <loadMenuTexts+0xdc8>)
 8006a5e:	4bb9      	ldr	r3, [pc, #740]	@ (8006d44 <loadMenuTexts+0xdcc>)
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	6828      	ldr	r0, [r5, #0]
 8006a66:	6869      	ldr	r1, [r5, #4]
 8006a68:	68aa      	ldr	r2, [r5, #8]
 8006a6a:	68eb      	ldr	r3, [r5, #12]
 8006a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a6e:	7c2b      	ldrb	r3, [r5, #16]
 8006a70:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006a72:	4ab5      	ldr	r2, [pc, #724]	@ (8006d48 <loadMenuTexts+0xdd0>)
 8006a74:	4bb5      	ldr	r3, [pc, #724]	@ (8006d4c <loadMenuTexts+0xdd4>)
 8006a76:	4614      	mov	r4, r2
 8006a78:	461d      	mov	r5, r3
 8006a7a:	6828      	ldr	r0, [r5, #0]
 8006a7c:	6869      	ldr	r1, [r5, #4]
 8006a7e:	68aa      	ldr	r2, [r5, #8]
 8006a80:	68eb      	ldr	r3, [r5, #12]
 8006a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a84:	7c2b      	ldrb	r3, [r5, #16]
 8006a86:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006a88:	4ab1      	ldr	r2, [pc, #708]	@ (8006d50 <loadMenuTexts+0xdd8>)
 8006a8a:	4bb2      	ldr	r3, [pc, #712]	@ (8006d54 <loadMenuTexts+0xddc>)
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	461d      	mov	r5, r3
 8006a90:	6828      	ldr	r0, [r5, #0]
 8006a92:	6869      	ldr	r1, [r5, #4]
 8006a94:	68aa      	ldr	r2, [r5, #8]
 8006a96:	68eb      	ldr	r3, [r5, #12]
 8006a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9a:	7c2b      	ldrb	r3, [r5, #16]
 8006a9c:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006a9e:	4aae      	ldr	r2, [pc, #696]	@ (8006d58 <loadMenuTexts+0xde0>)
 8006aa0:	4bae      	ldr	r3, [pc, #696]	@ (8006d5c <loadMenuTexts+0xde4>)
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	461d      	mov	r5, r3
 8006aa6:	6828      	ldr	r0, [r5, #0]
 8006aa8:	6869      	ldr	r1, [r5, #4]
 8006aaa:	68aa      	ldr	r2, [r5, #8]
 8006aac:	68eb      	ldr	r3, [r5, #12]
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab0:	7c2b      	ldrb	r3, [r5, #16]
 8006ab2:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006ab4:	4aaa      	ldr	r2, [pc, #680]	@ (8006d60 <loadMenuTexts+0xde8>)
 8006ab6:	4bab      	ldr	r3, [pc, #684]	@ (8006d64 <loadMenuTexts+0xdec>)
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	6828      	ldr	r0, [r5, #0]
 8006abe:	6869      	ldr	r1, [r5, #4]
 8006ac0:	68aa      	ldr	r2, [r5, #8]
 8006ac2:	68eb      	ldr	r3, [r5, #12]
 8006ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac6:	7c2b      	ldrb	r3, [r5, #16]
 8006ac8:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006aca:	4aa7      	ldr	r2, [pc, #668]	@ (8006d68 <loadMenuTexts+0xdf0>)
 8006acc:	4ba7      	ldr	r3, [pc, #668]	@ (8006d6c <loadMenuTexts+0xdf4>)
 8006ace:	4614      	mov	r4, r2
 8006ad0:	461d      	mov	r5, r3
 8006ad2:	6828      	ldr	r0, [r5, #0]
 8006ad4:	6869      	ldr	r1, [r5, #4]
 8006ad6:	68aa      	ldr	r2, [r5, #8]
 8006ad8:	68eb      	ldr	r3, [r5, #12]
 8006ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006adc:	7c2b      	ldrb	r3, [r5, #16]
 8006ade:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006ae0:	4aa3      	ldr	r2, [pc, #652]	@ (8006d70 <loadMenuTexts+0xdf8>)
 8006ae2:	4ba4      	ldr	r3, [pc, #656]	@ (8006d74 <loadMenuTexts+0xdfc>)
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	6828      	ldr	r0, [r5, #0]
 8006aea:	6869      	ldr	r1, [r5, #4]
 8006aec:	68aa      	ldr	r2, [r5, #8]
 8006aee:	68eb      	ldr	r3, [r5, #12]
 8006af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af2:	7c2b      	ldrb	r3, [r5, #16]
 8006af4:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006af6:	4aa0      	ldr	r2, [pc, #640]	@ (8006d78 <loadMenuTexts+0xe00>)
 8006af8:	4ba0      	ldr	r3, [pc, #640]	@ (8006d7c <loadMenuTexts+0xe04>)
 8006afa:	4614      	mov	r4, r2
 8006afc:	461d      	mov	r5, r3
 8006afe:	6828      	ldr	r0, [r5, #0]
 8006b00:	6869      	ldr	r1, [r5, #4]
 8006b02:	68aa      	ldr	r2, [r5, #8]
 8006b04:	68eb      	ldr	r3, [r5, #12]
 8006b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b08:	7c2b      	ldrb	r3, [r5, #16]
 8006b0a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006b0c:	4a9c      	ldr	r2, [pc, #624]	@ (8006d80 <loadMenuTexts+0xe08>)
 8006b0e:	4b9d      	ldr	r3, [pc, #628]	@ (8006d84 <loadMenuTexts+0xe0c>)
 8006b10:	4614      	mov	r4, r2
 8006b12:	461d      	mov	r5, r3
 8006b14:	6828      	ldr	r0, [r5, #0]
 8006b16:	6869      	ldr	r1, [r5, #4]
 8006b18:	68aa      	ldr	r2, [r5, #8]
 8006b1a:	68eb      	ldr	r3, [r5, #12]
 8006b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b1e:	7c2b      	ldrb	r3, [r5, #16]
 8006b20:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006b22:	4a99      	ldr	r2, [pc, #612]	@ (8006d88 <loadMenuTexts+0xe10>)
 8006b24:	4b99      	ldr	r3, [pc, #612]	@ (8006d8c <loadMenuTexts+0xe14>)
 8006b26:	4614      	mov	r4, r2
 8006b28:	461d      	mov	r5, r3
 8006b2a:	6828      	ldr	r0, [r5, #0]
 8006b2c:	6869      	ldr	r1, [r5, #4]
 8006b2e:	68aa      	ldr	r2, [r5, #8]
 8006b30:	68eb      	ldr	r3, [r5, #12]
 8006b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b34:	7c2b      	ldrb	r3, [r5, #16]
 8006b36:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006b38:	4a95      	ldr	r2, [pc, #596]	@ (8006d90 <loadMenuTexts+0xe18>)
 8006b3a:	4b96      	ldr	r3, [pc, #600]	@ (8006d94 <loadMenuTexts+0xe1c>)
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	6828      	ldr	r0, [r5, #0]
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	68aa      	ldr	r2, [r5, #8]
 8006b46:	68eb      	ldr	r3, [r5, #12]
 8006b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4a:	7c2b      	ldrb	r3, [r5, #16]
 8006b4c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006b4e:	4a92      	ldr	r2, [pc, #584]	@ (8006d98 <loadMenuTexts+0xe20>)
 8006b50:	4b92      	ldr	r3, [pc, #584]	@ (8006d9c <loadMenuTexts+0xe24>)
 8006b52:	4614      	mov	r4, r2
 8006b54:	461d      	mov	r5, r3
 8006b56:	6828      	ldr	r0, [r5, #0]
 8006b58:	6869      	ldr	r1, [r5, #4]
 8006b5a:	68aa      	ldr	r2, [r5, #8]
 8006b5c:	68eb      	ldr	r3, [r5, #12]
 8006b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b60:	7c2b      	ldrb	r3, [r5, #16]
 8006b62:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006b64:	4a8e      	ldr	r2, [pc, #568]	@ (8006da0 <loadMenuTexts+0xe28>)
 8006b66:	4b8f      	ldr	r3, [pc, #572]	@ (8006da4 <loadMenuTexts+0xe2c>)
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	6828      	ldr	r0, [r5, #0]
 8006b6e:	6869      	ldr	r1, [r5, #4]
 8006b70:	68aa      	ldr	r2, [r5, #8]
 8006b72:	68eb      	ldr	r3, [r5, #12]
 8006b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b76:	7c2b      	ldrb	r3, [r5, #16]
 8006b78:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006b7a:	4a8b      	ldr	r2, [pc, #556]	@ (8006da8 <loadMenuTexts+0xe30>)
 8006b7c:	4b8b      	ldr	r3, [pc, #556]	@ (8006dac <loadMenuTexts+0xe34>)
 8006b7e:	4614      	mov	r4, r2
 8006b80:	461d      	mov	r5, r3
 8006b82:	6828      	ldr	r0, [r5, #0]
 8006b84:	6869      	ldr	r1, [r5, #4]
 8006b86:	68aa      	ldr	r2, [r5, #8]
 8006b88:	68eb      	ldr	r3, [r5, #12]
 8006b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8c:	7c2b      	ldrb	r3, [r5, #16]
 8006b8e:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006b90:	4a87      	ldr	r2, [pc, #540]	@ (8006db0 <loadMenuTexts+0xe38>)
 8006b92:	4b88      	ldr	r3, [pc, #544]	@ (8006db4 <loadMenuTexts+0xe3c>)
 8006b94:	4614      	mov	r4, r2
 8006b96:	461d      	mov	r5, r3
 8006b98:	6828      	ldr	r0, [r5, #0]
 8006b9a:	6869      	ldr	r1, [r5, #4]
 8006b9c:	68aa      	ldr	r2, [r5, #8]
 8006b9e:	68eb      	ldr	r3, [r5, #12]
 8006ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba2:	7c2b      	ldrb	r3, [r5, #16]
 8006ba4:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006ba6:	4a84      	ldr	r2, [pc, #528]	@ (8006db8 <loadMenuTexts+0xe40>)
 8006ba8:	4b84      	ldr	r3, [pc, #528]	@ (8006dbc <loadMenuTexts+0xe44>)
 8006baa:	4614      	mov	r4, r2
 8006bac:	461d      	mov	r5, r3
 8006bae:	6828      	ldr	r0, [r5, #0]
 8006bb0:	6869      	ldr	r1, [r5, #4]
 8006bb2:	68aa      	ldr	r2, [r5, #8]
 8006bb4:	68eb      	ldr	r3, [r5, #12]
 8006bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb8:	7c2b      	ldrb	r3, [r5, #16]
 8006bba:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006bbc:	4a80      	ldr	r2, [pc, #512]	@ (8006dc0 <loadMenuTexts+0xe48>)
 8006bbe:	4b81      	ldr	r3, [pc, #516]	@ (8006dc4 <loadMenuTexts+0xe4c>)
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	461d      	mov	r5, r3
 8006bc4:	6828      	ldr	r0, [r5, #0]
 8006bc6:	6869      	ldr	r1, [r5, #4]
 8006bc8:	68aa      	ldr	r2, [r5, #8]
 8006bca:	68eb      	ldr	r3, [r5, #12]
 8006bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bce:	7c2b      	ldrb	r3, [r5, #16]
 8006bd0:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006bd2:	4a7d      	ldr	r2, [pc, #500]	@ (8006dc8 <loadMenuTexts+0xe50>)
 8006bd4:	4b7d      	ldr	r3, [pc, #500]	@ (8006dcc <loadMenuTexts+0xe54>)
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	461d      	mov	r5, r3
 8006bda:	6828      	ldr	r0, [r5, #0]
 8006bdc:	6869      	ldr	r1, [r5, #4]
 8006bde:	68aa      	ldr	r2, [r5, #8]
 8006be0:	68eb      	ldr	r3, [r5, #12]
 8006be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be4:	7c2b      	ldrb	r3, [r5, #16]
 8006be6:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006be8:	4a79      	ldr	r2, [pc, #484]	@ (8006dd0 <loadMenuTexts+0xe58>)
 8006bea:	4b7a      	ldr	r3, [pc, #488]	@ (8006dd4 <loadMenuTexts+0xe5c>)
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	6828      	ldr	r0, [r5, #0]
 8006bf2:	6869      	ldr	r1, [r5, #4]
 8006bf4:	68aa      	ldr	r2, [r5, #8]
 8006bf6:	68eb      	ldr	r3, [r5, #12]
 8006bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfa:	7c2b      	ldrb	r3, [r5, #16]
 8006bfc:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006bfe:	4a76      	ldr	r2, [pc, #472]	@ (8006dd8 <loadMenuTexts+0xe60>)
 8006c00:	4b76      	ldr	r3, [pc, #472]	@ (8006ddc <loadMenuTexts+0xe64>)
 8006c02:	4614      	mov	r4, r2
 8006c04:	461d      	mov	r5, r3
 8006c06:	6828      	ldr	r0, [r5, #0]
 8006c08:	6869      	ldr	r1, [r5, #4]
 8006c0a:	68aa      	ldr	r2, [r5, #8]
 8006c0c:	68eb      	ldr	r3, [r5, #12]
 8006c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c10:	7c2b      	ldrb	r3, [r5, #16]
 8006c12:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006c14:	4a72      	ldr	r2, [pc, #456]	@ (8006de0 <loadMenuTexts+0xe68>)
 8006c16:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <loadMenuTexts+0xe6c>)
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	6828      	ldr	r0, [r5, #0]
 8006c1e:	6869      	ldr	r1, [r5, #4]
 8006c20:	68aa      	ldr	r2, [r5, #8]
 8006c22:	68eb      	ldr	r3, [r5, #12]
 8006c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c26:	7c2b      	ldrb	r3, [r5, #16]
 8006c28:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006c2a:	4a6f      	ldr	r2, [pc, #444]	@ (8006de8 <loadMenuTexts+0xe70>)
 8006c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8006dec <loadMenuTexts+0xe74>)
 8006c2e:	4614      	mov	r4, r2
 8006c30:	461d      	mov	r5, r3
 8006c32:	6828      	ldr	r0, [r5, #0]
 8006c34:	6869      	ldr	r1, [r5, #4]
 8006c36:	68aa      	ldr	r2, [r5, #8]
 8006c38:	68eb      	ldr	r3, [r5, #12]
 8006c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3c:	7c2b      	ldrb	r3, [r5, #16]
 8006c3e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006c40:	4a6b      	ldr	r2, [pc, #428]	@ (8006df0 <loadMenuTexts+0xe78>)
 8006c42:	4b6c      	ldr	r3, [pc, #432]	@ (8006df4 <loadMenuTexts+0xe7c>)
 8006c44:	4614      	mov	r4, r2
 8006c46:	461d      	mov	r5, r3
 8006c48:	6828      	ldr	r0, [r5, #0]
 8006c4a:	6869      	ldr	r1, [r5, #4]
 8006c4c:	68aa      	ldr	r2, [r5, #8]
 8006c4e:	68eb      	ldr	r3, [r5, #12]
 8006c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c52:	7c2b      	ldrb	r3, [r5, #16]
 8006c54:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006c56:	4a68      	ldr	r2, [pc, #416]	@ (8006df8 <loadMenuTexts+0xe80>)
 8006c58:	4b68      	ldr	r3, [pc, #416]	@ (8006dfc <loadMenuTexts+0xe84>)
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	6828      	ldr	r0, [r5, #0]
 8006c60:	6869      	ldr	r1, [r5, #4]
 8006c62:	68aa      	ldr	r2, [r5, #8]
 8006c64:	68eb      	ldr	r3, [r5, #12]
 8006c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c68:	7c2b      	ldrb	r3, [r5, #16]
 8006c6a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006c6c:	4a64      	ldr	r2, [pc, #400]	@ (8006e00 <loadMenuTexts+0xe88>)
 8006c6e:	4b65      	ldr	r3, [pc, #404]	@ (8006e04 <loadMenuTexts+0xe8c>)
 8006c70:	4614      	mov	r4, r2
 8006c72:	461d      	mov	r5, r3
 8006c74:	6828      	ldr	r0, [r5, #0]
 8006c76:	6869      	ldr	r1, [r5, #4]
 8006c78:	68aa      	ldr	r2, [r5, #8]
 8006c7a:	68eb      	ldr	r3, [r5, #12]
 8006c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c7e:	7c2b      	ldrb	r3, [r5, #16]
 8006c80:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006c82:	4a61      	ldr	r2, [pc, #388]	@ (8006e08 <loadMenuTexts+0xe90>)
 8006c84:	4b61      	ldr	r3, [pc, #388]	@ (8006e0c <loadMenuTexts+0xe94>)
 8006c86:	4614      	mov	r4, r2
 8006c88:	461d      	mov	r5, r3
 8006c8a:	6828      	ldr	r0, [r5, #0]
 8006c8c:	6869      	ldr	r1, [r5, #4]
 8006c8e:	68aa      	ldr	r2, [r5, #8]
 8006c90:	68eb      	ldr	r3, [r5, #12]
 8006c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c94:	7c2b      	ldrb	r3, [r5, #16]
 8006c96:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006c98:	4a5d      	ldr	r2, [pc, #372]	@ (8006e10 <loadMenuTexts+0xe98>)
 8006c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8006e14 <loadMenuTexts+0xe9c>)
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	6828      	ldr	r0, [r5, #0]
 8006ca2:	6869      	ldr	r1, [r5, #4]
 8006ca4:	68aa      	ldr	r2, [r5, #8]
 8006ca6:	68eb      	ldr	r3, [r5, #12]
 8006ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006caa:	7c2b      	ldrb	r3, [r5, #16]
 8006cac:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006cae:	4a5a      	ldr	r2, [pc, #360]	@ (8006e18 <loadMenuTexts+0xea0>)
 8006cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e1c <loadMenuTexts+0xea4>)
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	461d      	mov	r5, r3
 8006cb6:	6828      	ldr	r0, [r5, #0]
 8006cb8:	6869      	ldr	r1, [r5, #4]
 8006cba:	68aa      	ldr	r2, [r5, #8]
 8006cbc:	68eb      	ldr	r3, [r5, #12]
 8006cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc0:	7c2b      	ldrb	r3, [r5, #16]
 8006cc2:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006cc4:	4a56      	ldr	r2, [pc, #344]	@ (8006e20 <loadMenuTexts+0xea8>)
 8006cc6:	4b57      	ldr	r3, [pc, #348]	@ (8006e24 <loadMenuTexts+0xeac>)
 8006cc8:	4614      	mov	r4, r2
 8006cca:	461d      	mov	r5, r3
 8006ccc:	6828      	ldr	r0, [r5, #0]
 8006cce:	6869      	ldr	r1, [r5, #4]
 8006cd0:	68aa      	ldr	r2, [r5, #8]
 8006cd2:	68eb      	ldr	r3, [r5, #12]
 8006cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd6:	7c2b      	ldrb	r3, [r5, #16]
 8006cd8:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006cda:	4a53      	ldr	r2, [pc, #332]	@ (8006e28 <loadMenuTexts+0xeb0>)
 8006cdc:	4b53      	ldr	r3, [pc, #332]	@ (8006e2c <loadMenuTexts+0xeb4>)
 8006cde:	4614      	mov	r4, r2
 8006ce0:	461d      	mov	r5, r3
 8006ce2:	6828      	ldr	r0, [r5, #0]
 8006ce4:	6869      	ldr	r1, [r5, #4]
 8006ce6:	68aa      	ldr	r2, [r5, #8]
 8006ce8:	68eb      	ldr	r3, [r5, #12]
 8006cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cec:	7c2b      	ldrb	r3, [r5, #16]
 8006cee:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8006e30 <loadMenuTexts+0xeb8>)
 8006cf2:	4b50      	ldr	r3, [pc, #320]	@ (8006e34 <loadMenuTexts+0xebc>)
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	6828      	ldr	r0, [r5, #0]
 8006cfa:	6869      	ldr	r1, [r5, #4]
 8006cfc:	68aa      	ldr	r2, [r5, #8]
 8006cfe:	68eb      	ldr	r3, [r5, #12]
 8006d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d02:	7c2b      	ldrb	r3, [r5, #16]
 8006d04:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006d06:	4a4c      	ldr	r2, [pc, #304]	@ (8006e38 <loadMenuTexts+0xec0>)
 8006d08:	4b4c      	ldr	r3, [pc, #304]	@ (8006e3c <loadMenuTexts+0xec4>)
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	461d      	mov	r5, r3
 8006d0e:	6828      	ldr	r0, [r5, #0]
 8006d10:	6869      	ldr	r1, [r5, #4]
 8006d12:	68aa      	ldr	r2, [r5, #8]
 8006d14:	68eb      	ldr	r3, [r5, #12]
 8006d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d18:	7c2b      	ldrb	r3, [r5, #16]
 8006d1a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006d1c:	4a48      	ldr	r2, [pc, #288]	@ (8006e40 <loadMenuTexts+0xec8>)
 8006d1e:	e091      	b.n	8006e44 <loadMenuTexts+0xecc>
 8006d20:	20001228 	.word	0x20001228
 8006d24:	20000708 	.word	0x20000708
 8006d28:	2000123c 	.word	0x2000123c
 8006d2c:	2000071c 	.word	0x2000071c
 8006d30:	20001250 	.word	0x20001250
 8006d34:	20000730 	.word	0x20000730
 8006d38:	20001264 	.word	0x20001264
 8006d3c:	20000744 	.word	0x20000744
 8006d40:	20001278 	.word	0x20001278
 8006d44:	20000758 	.word	0x20000758
 8006d48:	2000128c 	.word	0x2000128c
 8006d4c:	2000076c 	.word	0x2000076c
 8006d50:	200012a0 	.word	0x200012a0
 8006d54:	20000780 	.word	0x20000780
 8006d58:	200012b4 	.word	0x200012b4
 8006d5c:	20000794 	.word	0x20000794
 8006d60:	200012c8 	.word	0x200012c8
 8006d64:	200007a8 	.word	0x200007a8
 8006d68:	200012dc 	.word	0x200012dc
 8006d6c:	200007bc 	.word	0x200007bc
 8006d70:	200012f0 	.word	0x200012f0
 8006d74:	200007d0 	.word	0x200007d0
 8006d78:	20001304 	.word	0x20001304
 8006d7c:	200007e4 	.word	0x200007e4
 8006d80:	20001318 	.word	0x20001318
 8006d84:	200007f8 	.word	0x200007f8
 8006d88:	2000132c 	.word	0x2000132c
 8006d8c:	2000080c 	.word	0x2000080c
 8006d90:	20001340 	.word	0x20001340
 8006d94:	20000820 	.word	0x20000820
 8006d98:	20001354 	.word	0x20001354
 8006d9c:	20000834 	.word	0x20000834
 8006da0:	20001368 	.word	0x20001368
 8006da4:	20000848 	.word	0x20000848
 8006da8:	2000137c 	.word	0x2000137c
 8006dac:	2000085c 	.word	0x2000085c
 8006db0:	20001390 	.word	0x20001390
 8006db4:	20000870 	.word	0x20000870
 8006db8:	200013a4 	.word	0x200013a4
 8006dbc:	20000884 	.word	0x20000884
 8006dc0:	200013b8 	.word	0x200013b8
 8006dc4:	20000898 	.word	0x20000898
 8006dc8:	200013cc 	.word	0x200013cc
 8006dcc:	200008ac 	.word	0x200008ac
 8006dd0:	200013e0 	.word	0x200013e0
 8006dd4:	200008c0 	.word	0x200008c0
 8006dd8:	200013f4 	.word	0x200013f4
 8006ddc:	200008d4 	.word	0x200008d4
 8006de0:	20001408 	.word	0x20001408
 8006de4:	200008e8 	.word	0x200008e8
 8006de8:	2000141c 	.word	0x2000141c
 8006dec:	200008fc 	.word	0x200008fc
 8006df0:	20001430 	.word	0x20001430
 8006df4:	20000910 	.word	0x20000910
 8006df8:	20001444 	.word	0x20001444
 8006dfc:	20000924 	.word	0x20000924
 8006e00:	20001458 	.word	0x20001458
 8006e04:	20000938 	.word	0x20000938
 8006e08:	2000146c 	.word	0x2000146c
 8006e0c:	2000094c 	.word	0x2000094c
 8006e10:	20001480 	.word	0x20001480
 8006e14:	20000960 	.word	0x20000960
 8006e18:	20001494 	.word	0x20001494
 8006e1c:	20000974 	.word	0x20000974
 8006e20:	200014a8 	.word	0x200014a8
 8006e24:	20000988 	.word	0x20000988
 8006e28:	200014bc 	.word	0x200014bc
 8006e2c:	2000099c 	.word	0x2000099c
 8006e30:	200014d0 	.word	0x200014d0
 8006e34:	200009b0 	.word	0x200009b0
 8006e38:	200014e4 	.word	0x200014e4
 8006e3c:	200009c4 	.word	0x200009c4
 8006e40:	200014f8 	.word	0x200014f8
 8006e44:	4bc7      	ldr	r3, [pc, #796]	@ (8007164 <loadMenuTexts+0x11ec>)
 8006e46:	4614      	mov	r4, r2
 8006e48:	461d      	mov	r5, r3
 8006e4a:	6828      	ldr	r0, [r5, #0]
 8006e4c:	6869      	ldr	r1, [r5, #4]
 8006e4e:	68aa      	ldr	r2, [r5, #8]
 8006e50:	68eb      	ldr	r3, [r5, #12]
 8006e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e54:	7c2b      	ldrb	r3, [r5, #16]
 8006e56:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006e58:	4ac3      	ldr	r2, [pc, #780]	@ (8007168 <loadMenuTexts+0x11f0>)
 8006e5a:	4bc4      	ldr	r3, [pc, #784]	@ (800716c <loadMenuTexts+0x11f4>)
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	461d      	mov	r5, r3
 8006e60:	6828      	ldr	r0, [r5, #0]
 8006e62:	6869      	ldr	r1, [r5, #4]
 8006e64:	68aa      	ldr	r2, [r5, #8]
 8006e66:	68eb      	ldr	r3, [r5, #12]
 8006e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6a:	7c2b      	ldrb	r3, [r5, #16]
 8006e6c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006e6e:	4ac0      	ldr	r2, [pc, #768]	@ (8007170 <loadMenuTexts+0x11f8>)
 8006e70:	4bc0      	ldr	r3, [pc, #768]	@ (8007174 <loadMenuTexts+0x11fc>)
 8006e72:	4614      	mov	r4, r2
 8006e74:	461d      	mov	r5, r3
 8006e76:	6828      	ldr	r0, [r5, #0]
 8006e78:	6869      	ldr	r1, [r5, #4]
 8006e7a:	68aa      	ldr	r2, [r5, #8]
 8006e7c:	68eb      	ldr	r3, [r5, #12]
 8006e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e80:	7c2b      	ldrb	r3, [r5, #16]
 8006e82:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006e84:	4abc      	ldr	r2, [pc, #752]	@ (8007178 <loadMenuTexts+0x1200>)
 8006e86:	4bbd      	ldr	r3, [pc, #756]	@ (800717c <loadMenuTexts+0x1204>)
 8006e88:	4614      	mov	r4, r2
 8006e8a:	461d      	mov	r5, r3
 8006e8c:	6828      	ldr	r0, [r5, #0]
 8006e8e:	6869      	ldr	r1, [r5, #4]
 8006e90:	68aa      	ldr	r2, [r5, #8]
 8006e92:	68eb      	ldr	r3, [r5, #12]
 8006e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e96:	7c2b      	ldrb	r3, [r5, #16]
 8006e98:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006e9a:	4ab9      	ldr	r2, [pc, #740]	@ (8007180 <loadMenuTexts+0x1208>)
 8006e9c:	4bb9      	ldr	r3, [pc, #740]	@ (8007184 <loadMenuTexts+0x120c>)
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461d      	mov	r5, r3
 8006ea2:	6828      	ldr	r0, [r5, #0]
 8006ea4:	6869      	ldr	r1, [r5, #4]
 8006ea6:	68aa      	ldr	r2, [r5, #8]
 8006ea8:	68eb      	ldr	r3, [r5, #12]
 8006eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eac:	7c2b      	ldrb	r3, [r5, #16]
 8006eae:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006eb0:	4ab5      	ldr	r2, [pc, #724]	@ (8007188 <loadMenuTexts+0x1210>)
 8006eb2:	4bb6      	ldr	r3, [pc, #728]	@ (800718c <loadMenuTexts+0x1214>)
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	6828      	ldr	r0, [r5, #0]
 8006eba:	6869      	ldr	r1, [r5, #4]
 8006ebc:	68aa      	ldr	r2, [r5, #8]
 8006ebe:	68eb      	ldr	r3, [r5, #12]
 8006ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec2:	7c2b      	ldrb	r3, [r5, #16]
 8006ec4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006ec6:	4ab2      	ldr	r2, [pc, #712]	@ (8007190 <loadMenuTexts+0x1218>)
 8006ec8:	4bb2      	ldr	r3, [pc, #712]	@ (8007194 <loadMenuTexts+0x121c>)
 8006eca:	4614      	mov	r4, r2
 8006ecc:	461d      	mov	r5, r3
 8006ece:	6828      	ldr	r0, [r5, #0]
 8006ed0:	6869      	ldr	r1, [r5, #4]
 8006ed2:	68aa      	ldr	r2, [r5, #8]
 8006ed4:	68eb      	ldr	r3, [r5, #12]
 8006ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed8:	7c2b      	ldrb	r3, [r5, #16]
 8006eda:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006edc:	4aae      	ldr	r2, [pc, #696]	@ (8007198 <loadMenuTexts+0x1220>)
 8006ede:	4baf      	ldr	r3, [pc, #700]	@ (800719c <loadMenuTexts+0x1224>)
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	6828      	ldr	r0, [r5, #0]
 8006ee6:	6869      	ldr	r1, [r5, #4]
 8006ee8:	68aa      	ldr	r2, [r5, #8]
 8006eea:	68eb      	ldr	r3, [r5, #12]
 8006eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eee:	7c2b      	ldrb	r3, [r5, #16]
 8006ef0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006ef2:	4aab      	ldr	r2, [pc, #684]	@ (80071a0 <loadMenuTexts+0x1228>)
 8006ef4:	4bab      	ldr	r3, [pc, #684]	@ (80071a4 <loadMenuTexts+0x122c>)
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	461d      	mov	r5, r3
 8006efa:	6828      	ldr	r0, [r5, #0]
 8006efc:	6869      	ldr	r1, [r5, #4]
 8006efe:	68aa      	ldr	r2, [r5, #8]
 8006f00:	68eb      	ldr	r3, [r5, #12]
 8006f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f04:	7c2b      	ldrb	r3, [r5, #16]
 8006f06:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006f08:	4aa7      	ldr	r2, [pc, #668]	@ (80071a8 <loadMenuTexts+0x1230>)
 8006f0a:	4ba8      	ldr	r3, [pc, #672]	@ (80071ac <loadMenuTexts+0x1234>)
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	461d      	mov	r5, r3
 8006f10:	6828      	ldr	r0, [r5, #0]
 8006f12:	6869      	ldr	r1, [r5, #4]
 8006f14:	68aa      	ldr	r2, [r5, #8]
 8006f16:	68eb      	ldr	r3, [r5, #12]
 8006f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1a:	7c2b      	ldrb	r3, [r5, #16]
 8006f1c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006f1e:	4aa4      	ldr	r2, [pc, #656]	@ (80071b0 <loadMenuTexts+0x1238>)
 8006f20:	4ba4      	ldr	r3, [pc, #656]	@ (80071b4 <loadMenuTexts+0x123c>)
 8006f22:	4614      	mov	r4, r2
 8006f24:	461d      	mov	r5, r3
 8006f26:	6828      	ldr	r0, [r5, #0]
 8006f28:	6869      	ldr	r1, [r5, #4]
 8006f2a:	68aa      	ldr	r2, [r5, #8]
 8006f2c:	68eb      	ldr	r3, [r5, #12]
 8006f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f30:	7c2b      	ldrb	r3, [r5, #16]
 8006f32:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006f34:	4aa0      	ldr	r2, [pc, #640]	@ (80071b8 <loadMenuTexts+0x1240>)
 8006f36:	4ba1      	ldr	r3, [pc, #644]	@ (80071bc <loadMenuTexts+0x1244>)
 8006f38:	4614      	mov	r4, r2
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	6828      	ldr	r0, [r5, #0]
 8006f3e:	6869      	ldr	r1, [r5, #4]
 8006f40:	68aa      	ldr	r2, [r5, #8]
 8006f42:	68eb      	ldr	r3, [r5, #12]
 8006f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f46:	7c2b      	ldrb	r3, [r5, #16]
 8006f48:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006f4a:	4a9d      	ldr	r2, [pc, #628]	@ (80071c0 <loadMenuTexts+0x1248>)
 8006f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80071c4 <loadMenuTexts+0x124c>)
 8006f4e:	4614      	mov	r4, r2
 8006f50:	461d      	mov	r5, r3
 8006f52:	6828      	ldr	r0, [r5, #0]
 8006f54:	6869      	ldr	r1, [r5, #4]
 8006f56:	68aa      	ldr	r2, [r5, #8]
 8006f58:	68eb      	ldr	r3, [r5, #12]
 8006f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5c:	7c2b      	ldrb	r3, [r5, #16]
 8006f5e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006f60:	4a99      	ldr	r2, [pc, #612]	@ (80071c8 <loadMenuTexts+0x1250>)
 8006f62:	4b9a      	ldr	r3, [pc, #616]	@ (80071cc <loadMenuTexts+0x1254>)
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	6828      	ldr	r0, [r5, #0]
 8006f6a:	6869      	ldr	r1, [r5, #4]
 8006f6c:	68aa      	ldr	r2, [r5, #8]
 8006f6e:	68eb      	ldr	r3, [r5, #12]
 8006f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f72:	7c2b      	ldrb	r3, [r5, #16]
 8006f74:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006f76:	4a96      	ldr	r2, [pc, #600]	@ (80071d0 <loadMenuTexts+0x1258>)
 8006f78:	4b96      	ldr	r3, [pc, #600]	@ (80071d4 <loadMenuTexts+0x125c>)
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	461d      	mov	r5, r3
 8006f7e:	6828      	ldr	r0, [r5, #0]
 8006f80:	6869      	ldr	r1, [r5, #4]
 8006f82:	68aa      	ldr	r2, [r5, #8]
 8006f84:	68eb      	ldr	r3, [r5, #12]
 8006f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f88:	7c2b      	ldrb	r3, [r5, #16]
 8006f8a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006f8c:	4a92      	ldr	r2, [pc, #584]	@ (80071d8 <loadMenuTexts+0x1260>)
 8006f8e:	4b93      	ldr	r3, [pc, #588]	@ (80071dc <loadMenuTexts+0x1264>)
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	6828      	ldr	r0, [r5, #0]
 8006f96:	6869      	ldr	r1, [r5, #4]
 8006f98:	68aa      	ldr	r2, [r5, #8]
 8006f9a:	68eb      	ldr	r3, [r5, #12]
 8006f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9e:	7c2b      	ldrb	r3, [r5, #16]
 8006fa0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006fa2:	4a8f      	ldr	r2, [pc, #572]	@ (80071e0 <loadMenuTexts+0x1268>)
 8006fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80071e4 <loadMenuTexts+0x126c>)
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461d      	mov	r5, r3
 8006faa:	6828      	ldr	r0, [r5, #0]
 8006fac:	6869      	ldr	r1, [r5, #4]
 8006fae:	68aa      	ldr	r2, [r5, #8]
 8006fb0:	68eb      	ldr	r3, [r5, #12]
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	7c2b      	ldrb	r3, [r5, #16]
 8006fb6:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006fb8:	4a8b      	ldr	r2, [pc, #556]	@ (80071e8 <loadMenuTexts+0x1270>)
 8006fba:	4b8c      	ldr	r3, [pc, #560]	@ (80071ec <loadMenuTexts+0x1274>)
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	6828      	ldr	r0, [r5, #0]
 8006fc2:	6869      	ldr	r1, [r5, #4]
 8006fc4:	68aa      	ldr	r2, [r5, #8]
 8006fc6:	68eb      	ldr	r3, [r5, #12]
 8006fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fca:	7c2b      	ldrb	r3, [r5, #16]
 8006fcc:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006fce:	4a88      	ldr	r2, [pc, #544]	@ (80071f0 <loadMenuTexts+0x1278>)
 8006fd0:	4b88      	ldr	r3, [pc, #544]	@ (80071f4 <loadMenuTexts+0x127c>)
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	461d      	mov	r5, r3
 8006fd6:	6828      	ldr	r0, [r5, #0]
 8006fd8:	6869      	ldr	r1, [r5, #4]
 8006fda:	68aa      	ldr	r2, [r5, #8]
 8006fdc:	68eb      	ldr	r3, [r5, #12]
 8006fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe0:	7c2b      	ldrb	r3, [r5, #16]
 8006fe2:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006fe4:	4a84      	ldr	r2, [pc, #528]	@ (80071f8 <loadMenuTexts+0x1280>)
 8006fe6:	4b85      	ldr	r3, [pc, #532]	@ (80071fc <loadMenuTexts+0x1284>)
 8006fe8:	4614      	mov	r4, r2
 8006fea:	461d      	mov	r5, r3
 8006fec:	6828      	ldr	r0, [r5, #0]
 8006fee:	6869      	ldr	r1, [r5, #4]
 8006ff0:	68aa      	ldr	r2, [r5, #8]
 8006ff2:	68eb      	ldr	r3, [r5, #12]
 8006ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff6:	7c2b      	ldrb	r3, [r5, #16]
 8006ff8:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006ffa:	4a81      	ldr	r2, [pc, #516]	@ (8007200 <loadMenuTexts+0x1288>)
 8006ffc:	4b81      	ldr	r3, [pc, #516]	@ (8007204 <loadMenuTexts+0x128c>)
 8006ffe:	4614      	mov	r4, r2
 8007000:	461d      	mov	r5, r3
 8007002:	6828      	ldr	r0, [r5, #0]
 8007004:	6869      	ldr	r1, [r5, #4]
 8007006:	68aa      	ldr	r2, [r5, #8]
 8007008:	68eb      	ldr	r3, [r5, #12]
 800700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700c:	7c2b      	ldrb	r3, [r5, #16]
 800700e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8007010:	4a7d      	ldr	r2, [pc, #500]	@ (8007208 <loadMenuTexts+0x1290>)
 8007012:	4b7e      	ldr	r3, [pc, #504]	@ (800720c <loadMenuTexts+0x1294>)
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	6828      	ldr	r0, [r5, #0]
 800701a:	6869      	ldr	r1, [r5, #4]
 800701c:	68aa      	ldr	r2, [r5, #8]
 800701e:	68eb      	ldr	r3, [r5, #12]
 8007020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007022:	7c2b      	ldrb	r3, [r5, #16]
 8007024:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007026:	4a7a      	ldr	r2, [pc, #488]	@ (8007210 <loadMenuTexts+0x1298>)
 8007028:	4b7a      	ldr	r3, [pc, #488]	@ (8007214 <loadMenuTexts+0x129c>)
 800702a:	4614      	mov	r4, r2
 800702c:	461d      	mov	r5, r3
 800702e:	6828      	ldr	r0, [r5, #0]
 8007030:	6869      	ldr	r1, [r5, #4]
 8007032:	68aa      	ldr	r2, [r5, #8]
 8007034:	68eb      	ldr	r3, [r5, #12]
 8007036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007038:	7c2b      	ldrb	r3, [r5, #16]
 800703a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 800703c:	4a76      	ldr	r2, [pc, #472]	@ (8007218 <loadMenuTexts+0x12a0>)
 800703e:	4b77      	ldr	r3, [pc, #476]	@ (800721c <loadMenuTexts+0x12a4>)
 8007040:	4614      	mov	r4, r2
 8007042:	461d      	mov	r5, r3
 8007044:	6828      	ldr	r0, [r5, #0]
 8007046:	6869      	ldr	r1, [r5, #4]
 8007048:	68aa      	ldr	r2, [r5, #8]
 800704a:	68eb      	ldr	r3, [r5, #12]
 800704c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800704e:	7c2b      	ldrb	r3, [r5, #16]
 8007050:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007052:	4a73      	ldr	r2, [pc, #460]	@ (8007220 <loadMenuTexts+0x12a8>)
 8007054:	4b73      	ldr	r3, [pc, #460]	@ (8007224 <loadMenuTexts+0x12ac>)
 8007056:	4614      	mov	r4, r2
 8007058:	461d      	mov	r5, r3
 800705a:	6828      	ldr	r0, [r5, #0]
 800705c:	6869      	ldr	r1, [r5, #4]
 800705e:	68aa      	ldr	r2, [r5, #8]
 8007060:	68eb      	ldr	r3, [r5, #12]
 8007062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007064:	7c2b      	ldrb	r3, [r5, #16]
 8007066:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007068:	4a6f      	ldr	r2, [pc, #444]	@ (8007228 <loadMenuTexts+0x12b0>)
 800706a:	4b70      	ldr	r3, [pc, #448]	@ (800722c <loadMenuTexts+0x12b4>)
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	6828      	ldr	r0, [r5, #0]
 8007072:	6869      	ldr	r1, [r5, #4]
 8007074:	68aa      	ldr	r2, [r5, #8]
 8007076:	68eb      	ldr	r3, [r5, #12]
 8007078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707a:	7c2b      	ldrb	r3, [r5, #16]
 800707c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800707e:	4a6c      	ldr	r2, [pc, #432]	@ (8007230 <loadMenuTexts+0x12b8>)
 8007080:	4b6c      	ldr	r3, [pc, #432]	@ (8007234 <loadMenuTexts+0x12bc>)
 8007082:	4614      	mov	r4, r2
 8007084:	461d      	mov	r5, r3
 8007086:	6828      	ldr	r0, [r5, #0]
 8007088:	6869      	ldr	r1, [r5, #4]
 800708a:	68aa      	ldr	r2, [r5, #8]
 800708c:	68eb      	ldr	r3, [r5, #12]
 800708e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007090:	7c2b      	ldrb	r3, [r5, #16]
 8007092:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007094:	4a68      	ldr	r2, [pc, #416]	@ (8007238 <loadMenuTexts+0x12c0>)
 8007096:	4b69      	ldr	r3, [pc, #420]	@ (800723c <loadMenuTexts+0x12c4>)
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	6828      	ldr	r0, [r5, #0]
 800709e:	6869      	ldr	r1, [r5, #4]
 80070a0:	68aa      	ldr	r2, [r5, #8]
 80070a2:	68eb      	ldr	r3, [r5, #12]
 80070a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a6:	7c2b      	ldrb	r3, [r5, #16]
 80070a8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 80070aa:	4a65      	ldr	r2, [pc, #404]	@ (8007240 <loadMenuTexts+0x12c8>)
 80070ac:	4b65      	ldr	r3, [pc, #404]	@ (8007244 <loadMenuTexts+0x12cc>)
 80070ae:	4614      	mov	r4, r2
 80070b0:	461d      	mov	r5, r3
 80070b2:	6828      	ldr	r0, [r5, #0]
 80070b4:	6869      	ldr	r1, [r5, #4]
 80070b6:	68aa      	ldr	r2, [r5, #8]
 80070b8:	68eb      	ldr	r3, [r5, #12]
 80070ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070bc:	7c2b      	ldrb	r3, [r5, #16]
 80070be:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80070c0:	4a61      	ldr	r2, [pc, #388]	@ (8007248 <loadMenuTexts+0x12d0>)
 80070c2:	4b62      	ldr	r3, [pc, #392]	@ (800724c <loadMenuTexts+0x12d4>)
 80070c4:	4614      	mov	r4, r2
 80070c6:	461d      	mov	r5, r3
 80070c8:	6828      	ldr	r0, [r5, #0]
 80070ca:	6869      	ldr	r1, [r5, #4]
 80070cc:	68aa      	ldr	r2, [r5, #8]
 80070ce:	68eb      	ldr	r3, [r5, #12]
 80070d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d2:	7c2b      	ldrb	r3, [r5, #16]
 80070d4:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80070d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007250 <loadMenuTexts+0x12d8>)
 80070d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007254 <loadMenuTexts+0x12dc>)
 80070da:	4614      	mov	r4, r2
 80070dc:	461d      	mov	r5, r3
 80070de:	6828      	ldr	r0, [r5, #0]
 80070e0:	6869      	ldr	r1, [r5, #4]
 80070e2:	68aa      	ldr	r2, [r5, #8]
 80070e4:	68eb      	ldr	r3, [r5, #12]
 80070e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e8:	7c2b      	ldrb	r3, [r5, #16]
 80070ea:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80070ec:	4a5a      	ldr	r2, [pc, #360]	@ (8007258 <loadMenuTexts+0x12e0>)
 80070ee:	4b5b      	ldr	r3, [pc, #364]	@ (800725c <loadMenuTexts+0x12e4>)
 80070f0:	4614      	mov	r4, r2
 80070f2:	461d      	mov	r5, r3
 80070f4:	6828      	ldr	r0, [r5, #0]
 80070f6:	6869      	ldr	r1, [r5, #4]
 80070f8:	68aa      	ldr	r2, [r5, #8]
 80070fa:	68eb      	ldr	r3, [r5, #12]
 80070fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070fe:	7c2b      	ldrb	r3, [r5, #16]
 8007100:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007102:	4a57      	ldr	r2, [pc, #348]	@ (8007260 <loadMenuTexts+0x12e8>)
 8007104:	4b57      	ldr	r3, [pc, #348]	@ (8007264 <loadMenuTexts+0x12ec>)
 8007106:	4614      	mov	r4, r2
 8007108:	461d      	mov	r5, r3
 800710a:	6828      	ldr	r0, [r5, #0]
 800710c:	6869      	ldr	r1, [r5, #4]
 800710e:	68aa      	ldr	r2, [r5, #8]
 8007110:	68eb      	ldr	r3, [r5, #12]
 8007112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007114:	7c2b      	ldrb	r3, [r5, #16]
 8007116:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007118:	4a53      	ldr	r2, [pc, #332]	@ (8007268 <loadMenuTexts+0x12f0>)
 800711a:	4b54      	ldr	r3, [pc, #336]	@ (800726c <loadMenuTexts+0x12f4>)
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	6828      	ldr	r0, [r5, #0]
 8007122:	6869      	ldr	r1, [r5, #4]
 8007124:	68aa      	ldr	r2, [r5, #8]
 8007126:	68eb      	ldr	r3, [r5, #12]
 8007128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800712a:	7c2b      	ldrb	r3, [r5, #16]
 800712c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800712e:	4a50      	ldr	r2, [pc, #320]	@ (8007270 <loadMenuTexts+0x12f8>)
 8007130:	4b50      	ldr	r3, [pc, #320]	@ (8007274 <loadMenuTexts+0x12fc>)
 8007132:	4614      	mov	r4, r2
 8007134:	461d      	mov	r5, r3
 8007136:	6828      	ldr	r0, [r5, #0]
 8007138:	6869      	ldr	r1, [r5, #4]
 800713a:	68aa      	ldr	r2, [r5, #8]
 800713c:	68eb      	ldr	r3, [r5, #12]
 800713e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007140:	7c2b      	ldrb	r3, [r5, #16]
 8007142:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007144:	4a4c      	ldr	r2, [pc, #304]	@ (8007278 <loadMenuTexts+0x1300>)
 8007146:	4b4d      	ldr	r3, [pc, #308]	@ (800727c <loadMenuTexts+0x1304>)
 8007148:	4614      	mov	r4, r2
 800714a:	461d      	mov	r5, r3
 800714c:	6828      	ldr	r0, [r5, #0]
 800714e:	6869      	ldr	r1, [r5, #4]
 8007150:	68aa      	ldr	r2, [r5, #8]
 8007152:	68eb      	ldr	r3, [r5, #12]
 8007154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007156:	7c2b      	ldrb	r3, [r5, #16]
 8007158:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800715a:	4a49      	ldr	r2, [pc, #292]	@ (8007280 <loadMenuTexts+0x1308>)
 800715c:	4b49      	ldr	r3, [pc, #292]	@ (8007284 <loadMenuTexts+0x130c>)
 800715e:	4614      	mov	r4, r2
 8007160:	461d      	mov	r5, r3
 8007162:	e091      	b.n	8007288 <loadMenuTexts+0x1310>
 8007164:	200009d8 	.word	0x200009d8
 8007168:	2000150c 	.word	0x2000150c
 800716c:	200009ec 	.word	0x200009ec
 8007170:	20001520 	.word	0x20001520
 8007174:	20000a00 	.word	0x20000a00
 8007178:	20001534 	.word	0x20001534
 800717c:	20000a14 	.word	0x20000a14
 8007180:	20001548 	.word	0x20001548
 8007184:	20000a28 	.word	0x20000a28
 8007188:	2000155c 	.word	0x2000155c
 800718c:	20000a3c 	.word	0x20000a3c
 8007190:	20001570 	.word	0x20001570
 8007194:	20000a50 	.word	0x20000a50
 8007198:	20001584 	.word	0x20001584
 800719c:	20000a64 	.word	0x20000a64
 80071a0:	20001598 	.word	0x20001598
 80071a4:	20000a78 	.word	0x20000a78
 80071a8:	200015ac 	.word	0x200015ac
 80071ac:	20000a8c 	.word	0x20000a8c
 80071b0:	200015c0 	.word	0x200015c0
 80071b4:	20000aa0 	.word	0x20000aa0
 80071b8:	200015d4 	.word	0x200015d4
 80071bc:	20000ab4 	.word	0x20000ab4
 80071c0:	200015e8 	.word	0x200015e8
 80071c4:	20000ac8 	.word	0x20000ac8
 80071c8:	200015fc 	.word	0x200015fc
 80071cc:	20000adc 	.word	0x20000adc
 80071d0:	20001610 	.word	0x20001610
 80071d4:	20000af0 	.word	0x20000af0
 80071d8:	20001624 	.word	0x20001624
 80071dc:	20000b04 	.word	0x20000b04
 80071e0:	20001638 	.word	0x20001638
 80071e4:	20000b18 	.word	0x20000b18
 80071e8:	2000164c 	.word	0x2000164c
 80071ec:	20000b2c 	.word	0x20000b2c
 80071f0:	20001660 	.word	0x20001660
 80071f4:	20000b40 	.word	0x20000b40
 80071f8:	20001674 	.word	0x20001674
 80071fc:	20000b54 	.word	0x20000b54
 8007200:	20001688 	.word	0x20001688
 8007204:	20000b68 	.word	0x20000b68
 8007208:	2000169c 	.word	0x2000169c
 800720c:	20000b7c 	.word	0x20000b7c
 8007210:	200016b0 	.word	0x200016b0
 8007214:	20000b90 	.word	0x20000b90
 8007218:	200016c4 	.word	0x200016c4
 800721c:	20000ba4 	.word	0x20000ba4
 8007220:	200016d8 	.word	0x200016d8
 8007224:	20000bb8 	.word	0x20000bb8
 8007228:	200016ec 	.word	0x200016ec
 800722c:	20000bcc 	.word	0x20000bcc
 8007230:	20001700 	.word	0x20001700
 8007234:	20000be0 	.word	0x20000be0
 8007238:	20001714 	.word	0x20001714
 800723c:	20000bf4 	.word	0x20000bf4
 8007240:	20001728 	.word	0x20001728
 8007244:	20000c08 	.word	0x20000c08
 8007248:	2000173c 	.word	0x2000173c
 800724c:	20000c1c 	.word	0x20000c1c
 8007250:	20001750 	.word	0x20001750
 8007254:	20000c30 	.word	0x20000c30
 8007258:	20001764 	.word	0x20001764
 800725c:	20000c44 	.word	0x20000c44
 8007260:	20001778 	.word	0x20001778
 8007264:	20000c58 	.word	0x20000c58
 8007268:	2000178c 	.word	0x2000178c
 800726c:	20000c6c 	.word	0x20000c6c
 8007270:	200017a0 	.word	0x200017a0
 8007274:	20000cf8 	.word	0x20000cf8
 8007278:	200017b4 	.word	0x200017b4
 800727c:	20000d0c 	.word	0x20000d0c
 8007280:	200017c8 	.word	0x200017c8
 8007284:	20000cd0 	.word	0x20000cd0
 8007288:	6828      	ldr	r0, [r5, #0]
 800728a:	6869      	ldr	r1, [r5, #4]
 800728c:	68aa      	ldr	r2, [r5, #8]
 800728e:	68eb      	ldr	r3, [r5, #12]
 8007290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007292:	7c2b      	ldrb	r3, [r5, #16]
 8007294:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8007296:	4a5b      	ldr	r2, [pc, #364]	@ (8007404 <loadMenuTexts+0x148c>)
 8007298:	4b5b      	ldr	r3, [pc, #364]	@ (8007408 <loadMenuTexts+0x1490>)
 800729a:	4614      	mov	r4, r2
 800729c:	461d      	mov	r5, r3
 800729e:	6828      	ldr	r0, [r5, #0]
 80072a0:	6869      	ldr	r1, [r5, #4]
 80072a2:	68aa      	ldr	r2, [r5, #8]
 80072a4:	68eb      	ldr	r3, [r5, #12]
 80072a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a8:	7c2b      	ldrb	r3, [r5, #16]
 80072aa:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80072ac:	4a57      	ldr	r2, [pc, #348]	@ (800740c <loadMenuTexts+0x1494>)
 80072ae:	4b58      	ldr	r3, [pc, #352]	@ (8007410 <loadMenuTexts+0x1498>)
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	6828      	ldr	r0, [r5, #0]
 80072b6:	6869      	ldr	r1, [r5, #4]
 80072b8:	68aa      	ldr	r2, [r5, #8]
 80072ba:	68eb      	ldr	r3, [r5, #12]
 80072bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072be:	7c2b      	ldrb	r3, [r5, #16]
 80072c0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80072c2:	4a54      	ldr	r2, [pc, #336]	@ (8007414 <loadMenuTexts+0x149c>)
 80072c4:	4b54      	ldr	r3, [pc, #336]	@ (8007418 <loadMenuTexts+0x14a0>)
 80072c6:	4614      	mov	r4, r2
 80072c8:	461d      	mov	r5, r3
 80072ca:	6828      	ldr	r0, [r5, #0]
 80072cc:	6869      	ldr	r1, [r5, #4]
 80072ce:	68aa      	ldr	r2, [r5, #8]
 80072d0:	68eb      	ldr	r3, [r5, #12]
 80072d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d4:	7c2b      	ldrb	r3, [r5, #16]
 80072d6:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80072d8:	4a50      	ldr	r2, [pc, #320]	@ (800741c <loadMenuTexts+0x14a4>)
 80072da:	4b51      	ldr	r3, [pc, #324]	@ (8007420 <loadMenuTexts+0x14a8>)
 80072dc:	4614      	mov	r4, r2
 80072de:	461d      	mov	r5, r3
 80072e0:	6828      	ldr	r0, [r5, #0]
 80072e2:	6869      	ldr	r1, [r5, #4]
 80072e4:	68aa      	ldr	r2, [r5, #8]
 80072e6:	68eb      	ldr	r3, [r5, #12]
 80072e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ea:	7c2b      	ldrb	r3, [r5, #16]
 80072ec:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80072ee:	4a4d      	ldr	r2, [pc, #308]	@ (8007424 <loadMenuTexts+0x14ac>)
 80072f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007428 <loadMenuTexts+0x14b0>)
 80072f2:	4614      	mov	r4, r2
 80072f4:	461d      	mov	r5, r3
 80072f6:	6828      	ldr	r0, [r5, #0]
 80072f8:	6869      	ldr	r1, [r5, #4]
 80072fa:	68aa      	ldr	r2, [r5, #8]
 80072fc:	68eb      	ldr	r3, [r5, #12]
 80072fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007300:	7c2b      	ldrb	r3, [r5, #16]
 8007302:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007304:	4a49      	ldr	r2, [pc, #292]	@ (800742c <loadMenuTexts+0x14b4>)
 8007306:	4b4a      	ldr	r3, [pc, #296]	@ (8007430 <loadMenuTexts+0x14b8>)
 8007308:	4614      	mov	r4, r2
 800730a:	461d      	mov	r5, r3
 800730c:	6828      	ldr	r0, [r5, #0]
 800730e:	6869      	ldr	r1, [r5, #4]
 8007310:	68aa      	ldr	r2, [r5, #8]
 8007312:	68eb      	ldr	r3, [r5, #12]
 8007314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007316:	7c2b      	ldrb	r3, [r5, #16]
 8007318:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800731a:	4a46      	ldr	r2, [pc, #280]	@ (8007434 <loadMenuTexts+0x14bc>)
 800731c:	4b46      	ldr	r3, [pc, #280]	@ (8007438 <loadMenuTexts+0x14c0>)
 800731e:	4614      	mov	r4, r2
 8007320:	461d      	mov	r5, r3
 8007322:	6828      	ldr	r0, [r5, #0]
 8007324:	6869      	ldr	r1, [r5, #4]
 8007326:	68aa      	ldr	r2, [r5, #8]
 8007328:	68eb      	ldr	r3, [r5, #12]
 800732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732c:	7c2b      	ldrb	r3, [r5, #16]
 800732e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007330:	4a42      	ldr	r2, [pc, #264]	@ (800743c <loadMenuTexts+0x14c4>)
 8007332:	4b43      	ldr	r3, [pc, #268]	@ (8007440 <loadMenuTexts+0x14c8>)
 8007334:	4614      	mov	r4, r2
 8007336:	461d      	mov	r5, r3
 8007338:	6828      	ldr	r0, [r5, #0]
 800733a:	6869      	ldr	r1, [r5, #4]
 800733c:	68aa      	ldr	r2, [r5, #8]
 800733e:	68eb      	ldr	r3, [r5, #12]
 8007340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007342:	7c2b      	ldrb	r3, [r5, #16]
 8007344:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007346:	4a3f      	ldr	r2, [pc, #252]	@ (8007444 <loadMenuTexts+0x14cc>)
 8007348:	4b3f      	ldr	r3, [pc, #252]	@ (8007448 <loadMenuTexts+0x14d0>)
 800734a:	4614      	mov	r4, r2
 800734c:	461d      	mov	r5, r3
 800734e:	6828      	ldr	r0, [r5, #0]
 8007350:	6869      	ldr	r1, [r5, #4]
 8007352:	68aa      	ldr	r2, [r5, #8]
 8007354:	68eb      	ldr	r3, [r5, #12]
 8007356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007358:	7c2b      	ldrb	r3, [r5, #16]
 800735a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 800735c:	4a3b      	ldr	r2, [pc, #236]	@ (800744c <loadMenuTexts+0x14d4>)
 800735e:	4b3c      	ldr	r3, [pc, #240]	@ (8007450 <loadMenuTexts+0x14d8>)
 8007360:	4614      	mov	r4, r2
 8007362:	461d      	mov	r5, r3
 8007364:	6828      	ldr	r0, [r5, #0]
 8007366:	6869      	ldr	r1, [r5, #4]
 8007368:	68aa      	ldr	r2, [r5, #8]
 800736a:	68eb      	ldr	r3, [r5, #12]
 800736c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800736e:	7c2b      	ldrb	r3, [r5, #16]
 8007370:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007372:	4a38      	ldr	r2, [pc, #224]	@ (8007454 <loadMenuTexts+0x14dc>)
 8007374:	4b38      	ldr	r3, [pc, #224]	@ (8007458 <loadMenuTexts+0x14e0>)
 8007376:	4614      	mov	r4, r2
 8007378:	461d      	mov	r5, r3
 800737a:	6828      	ldr	r0, [r5, #0]
 800737c:	6869      	ldr	r1, [r5, #4]
 800737e:	68aa      	ldr	r2, [r5, #8]
 8007380:	68eb      	ldr	r3, [r5, #12]
 8007382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007384:	7c2b      	ldrb	r3, [r5, #16]
 8007386:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007388:	4a34      	ldr	r2, [pc, #208]	@ (800745c <loadMenuTexts+0x14e4>)
 800738a:	4b35      	ldr	r3, [pc, #212]	@ (8007460 <loadMenuTexts+0x14e8>)
 800738c:	4614      	mov	r4, r2
 800738e:	461d      	mov	r5, r3
 8007390:	6828      	ldr	r0, [r5, #0]
 8007392:	6869      	ldr	r1, [r5, #4]
 8007394:	68aa      	ldr	r2, [r5, #8]
 8007396:	68eb      	ldr	r3, [r5, #12]
 8007398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739a:	7c2b      	ldrb	r3, [r5, #16]
 800739c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800739e:	4a31      	ldr	r2, [pc, #196]	@ (8007464 <loadMenuTexts+0x14ec>)
 80073a0:	4b31      	ldr	r3, [pc, #196]	@ (8007468 <loadMenuTexts+0x14f0>)
 80073a2:	4614      	mov	r4, r2
 80073a4:	461d      	mov	r5, r3
 80073a6:	6828      	ldr	r0, [r5, #0]
 80073a8:	6869      	ldr	r1, [r5, #4]
 80073aa:	68aa      	ldr	r2, [r5, #8]
 80073ac:	68eb      	ldr	r3, [r5, #12]
 80073ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b0:	7c2b      	ldrb	r3, [r5, #16]
 80073b2:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80073b4:	4a2d      	ldr	r2, [pc, #180]	@ (800746c <loadMenuTexts+0x14f4>)
 80073b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007470 <loadMenuTexts+0x14f8>)
 80073b8:	4614      	mov	r4, r2
 80073ba:	461d      	mov	r5, r3
 80073bc:	6828      	ldr	r0, [r5, #0]
 80073be:	6869      	ldr	r1, [r5, #4]
 80073c0:	68aa      	ldr	r2, [r5, #8]
 80073c2:	68eb      	ldr	r3, [r5, #12]
 80073c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c6:	7c2b      	ldrb	r3, [r5, #16]
 80073c8:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80073ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007474 <loadMenuTexts+0x14fc>)
 80073cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007478 <loadMenuTexts+0x1500>)
 80073ce:	4614      	mov	r4, r2
 80073d0:	461d      	mov	r5, r3
 80073d2:	6828      	ldr	r0, [r5, #0]
 80073d4:	6869      	ldr	r1, [r5, #4]
 80073d6:	68aa      	ldr	r2, [r5, #8]
 80073d8:	68eb      	ldr	r3, [r5, #12]
 80073da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073dc:	7c2b      	ldrb	r3, [r5, #16]
 80073de:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80073e0:	4a26      	ldr	r2, [pc, #152]	@ (800747c <loadMenuTexts+0x1504>)
 80073e2:	4b27      	ldr	r3, [pc, #156]	@ (8007480 <loadMenuTexts+0x1508>)
 80073e4:	4614      	mov	r4, r2
 80073e6:	461d      	mov	r5, r3
 80073e8:	6828      	ldr	r0, [r5, #0]
 80073ea:	6869      	ldr	r1, [r5, #4]
 80073ec:	68aa      	ldr	r2, [r5, #8]
 80073ee:	68eb      	ldr	r3, [r5, #12]
 80073f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f2:	7c2b      	ldrb	r3, [r5, #16]
 80073f4:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80073f6:	f000 f845 	bl	8007484 <menuVariableFinisher>
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bdb0      	pop	{r4, r5, r7, pc}
 8007402:	bf00      	nop
 8007404:	200017dc 	.word	0x200017dc
 8007408:	20000ce4 	.word	0x20000ce4
 800740c:	200017f0 	.word	0x200017f0
 8007410:	20000d48 	.word	0x20000d48
 8007414:	20001804 	.word	0x20001804
 8007418:	20000d5c 	.word	0x20000d5c
 800741c:	20001818 	.word	0x20001818
 8007420:	20000d98 	.word	0x20000d98
 8007424:	2000182c 	.word	0x2000182c
 8007428:	20000dac 	.word	0x20000dac
 800742c:	20001840 	.word	0x20001840
 8007430:	20000de8 	.word	0x20000de8
 8007434:	20001854 	.word	0x20001854
 8007438:	20000dfc 	.word	0x20000dfc
 800743c:	20001868 	.word	0x20001868
 8007440:	20000e24 	.word	0x20000e24
 8007444:	2000187c 	.word	0x2000187c
 8007448:	20000e4c 	.word	0x20000e4c
 800744c:	20001890 	.word	0x20001890
 8007450:	20000e74 	.word	0x20000e74
 8007454:	200018a4 	.word	0x200018a4
 8007458:	20000e9c 	.word	0x20000e9c
 800745c:	200018b8 	.word	0x200018b8
 8007460:	20000ec4 	.word	0x20000ec4
 8007464:	200018cc 	.word	0x200018cc
 8007468:	20000eec 	.word	0x20000eec
 800746c:	200018e0 	.word	0x200018e0
 8007470:	20000f14 	.word	0x20000f14
 8007474:	200018f4 	.word	0x200018f4
 8007478:	20000f3c 	.word	0x20000f3c
 800747c:	20001908 	.word	0x20001908
 8007480:	20000f64 	.word	0x20000f64

08007484 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007488:	4b99      	ldr	r3, [pc, #612]	@ (80076f0 <menuVariableFinisher+0x26c>)
 800748a:	2200      	movs	r2, #0
 800748c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800748e:	4b99      	ldr	r3, [pc, #612]	@ (80076f4 <menuVariableFinisher+0x270>)
 8007490:	2200      	movs	r2, #0
 8007492:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007494:	4b98      	ldr	r3, [pc, #608]	@ (80076f8 <menuVariableFinisher+0x274>)
 8007496:	2200      	movs	r2, #0
 8007498:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800749a:	4b98      	ldr	r3, [pc, #608]	@ (80076fc <menuVariableFinisher+0x278>)
 800749c:	2200      	movs	r2, #0
 800749e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80074a0:	4b97      	ldr	r3, [pc, #604]	@ (8007700 <menuVariableFinisher+0x27c>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80074a6:	4b97      	ldr	r3, [pc, #604]	@ (8007704 <menuVariableFinisher+0x280>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80074ac:	4b96      	ldr	r3, [pc, #600]	@ (8007708 <menuVariableFinisher+0x284>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80074b2:	4b96      	ldr	r3, [pc, #600]	@ (800770c <menuVariableFinisher+0x288>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80074b8:	4b95      	ldr	r3, [pc, #596]	@ (8007710 <menuVariableFinisher+0x28c>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80074be:	4b95      	ldr	r3, [pc, #596]	@ (8007714 <menuVariableFinisher+0x290>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80074c4:	4b94      	ldr	r3, [pc, #592]	@ (8007718 <menuVariableFinisher+0x294>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80074ca:	4b94      	ldr	r3, [pc, #592]	@ (800771c <menuVariableFinisher+0x298>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80074d0:	4b93      	ldr	r3, [pc, #588]	@ (8007720 <menuVariableFinisher+0x29c>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80074d6:	4b93      	ldr	r3, [pc, #588]	@ (8007724 <menuVariableFinisher+0x2a0>)
 80074d8:	2200      	movs	r2, #0
 80074da:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80074dc:	4b92      	ldr	r3, [pc, #584]	@ (8007728 <menuVariableFinisher+0x2a4>)
 80074de:	2200      	movs	r2, #0
 80074e0:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80074e2:	4b92      	ldr	r3, [pc, #584]	@ (800772c <menuVariableFinisher+0x2a8>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80074e8:	4b91      	ldr	r3, [pc, #580]	@ (8007730 <menuVariableFinisher+0x2ac>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80074ee:	4b91      	ldr	r3, [pc, #580]	@ (8007734 <menuVariableFinisher+0x2b0>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80074f4:	4b90      	ldr	r3, [pc, #576]	@ (8007738 <menuVariableFinisher+0x2b4>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80074fa:	4b90      	ldr	r3, [pc, #576]	@ (800773c <menuVariableFinisher+0x2b8>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007500:	4b8f      	ldr	r3, [pc, #572]	@ (8007740 <menuVariableFinisher+0x2bc>)
 8007502:	2200      	movs	r2, #0
 8007504:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007506:	4b8f      	ldr	r3, [pc, #572]	@ (8007744 <menuVariableFinisher+0x2c0>)
 8007508:	2200      	movs	r2, #0
 800750a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 800750c:	4b8e      	ldr	r3, [pc, #568]	@ (8007748 <menuVariableFinisher+0x2c4>)
 800750e:	2200      	movs	r2, #0
 8007510:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007512:	4b8e      	ldr	r3, [pc, #568]	@ (800774c <menuVariableFinisher+0x2c8>)
 8007514:	2200      	movs	r2, #0
 8007516:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007518:	4b8d      	ldr	r3, [pc, #564]	@ (8007750 <menuVariableFinisher+0x2cc>)
 800751a:	2200      	movs	r2, #0
 800751c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800751e:	4b8d      	ldr	r3, [pc, #564]	@ (8007754 <menuVariableFinisher+0x2d0>)
 8007520:	2200      	movs	r2, #0
 8007522:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007524:	4b8c      	ldr	r3, [pc, #560]	@ (8007758 <menuVariableFinisher+0x2d4>)
 8007526:	2200      	movs	r2, #0
 8007528:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 800752a:	4b8c      	ldr	r3, [pc, #560]	@ (800775c <menuVariableFinisher+0x2d8>)
 800752c:	2200      	movs	r2, #0
 800752e:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007530:	4b8b      	ldr	r3, [pc, #556]	@ (8007760 <menuVariableFinisher+0x2dc>)
 8007532:	2200      	movs	r2, #0
 8007534:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007536:	4b8b      	ldr	r3, [pc, #556]	@ (8007764 <menuVariableFinisher+0x2e0>)
 8007538:	2200      	movs	r2, #0
 800753a:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 800753c:	4b8a      	ldr	r3, [pc, #552]	@ (8007768 <menuVariableFinisher+0x2e4>)
 800753e:	2200      	movs	r2, #0
 8007540:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007542:	4b8a      	ldr	r3, [pc, #552]	@ (800776c <menuVariableFinisher+0x2e8>)
 8007544:	2200      	movs	r2, #0
 8007546:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007548:	4b89      	ldr	r3, [pc, #548]	@ (8007770 <menuVariableFinisher+0x2ec>)
 800754a:	2200      	movs	r2, #0
 800754c:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800754e:	4b89      	ldr	r3, [pc, #548]	@ (8007774 <menuVariableFinisher+0x2f0>)
 8007550:	2200      	movs	r2, #0
 8007552:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007554:	4b88      	ldr	r3, [pc, #544]	@ (8007778 <menuVariableFinisher+0x2f4>)
 8007556:	2200      	movs	r2, #0
 8007558:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800755a:	4b88      	ldr	r3, [pc, #544]	@ (800777c <menuVariableFinisher+0x2f8>)
 800755c:	2200      	movs	r2, #0
 800755e:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007560:	4b87      	ldr	r3, [pc, #540]	@ (8007780 <menuVariableFinisher+0x2fc>)
 8007562:	2200      	movs	r2, #0
 8007564:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007566:	4b87      	ldr	r3, [pc, #540]	@ (8007784 <menuVariableFinisher+0x300>)
 8007568:	2200      	movs	r2, #0
 800756a:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 800756c:	4b86      	ldr	r3, [pc, #536]	@ (8007788 <menuVariableFinisher+0x304>)
 800756e:	2200      	movs	r2, #0
 8007570:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007572:	4b86      	ldr	r3, [pc, #536]	@ (800778c <menuVariableFinisher+0x308>)
 8007574:	2200      	movs	r2, #0
 8007576:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007578:	4b85      	ldr	r3, [pc, #532]	@ (8007790 <menuVariableFinisher+0x30c>)
 800757a:	2200      	movs	r2, #0
 800757c:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800757e:	4b85      	ldr	r3, [pc, #532]	@ (8007794 <menuVariableFinisher+0x310>)
 8007580:	2200      	movs	r2, #0
 8007582:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007584:	4b84      	ldr	r3, [pc, #528]	@ (8007798 <menuVariableFinisher+0x314>)
 8007586:	2200      	movs	r2, #0
 8007588:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800758a:	4b84      	ldr	r3, [pc, #528]	@ (800779c <menuVariableFinisher+0x318>)
 800758c:	2200      	movs	r2, #0
 800758e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007590:	4b83      	ldr	r3, [pc, #524]	@ (80077a0 <menuVariableFinisher+0x31c>)
 8007592:	2200      	movs	r2, #0
 8007594:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007596:	4b83      	ldr	r3, [pc, #524]	@ (80077a4 <menuVariableFinisher+0x320>)
 8007598:	2200      	movs	r2, #0
 800759a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 800759c:	4b82      	ldr	r3, [pc, #520]	@ (80077a8 <menuVariableFinisher+0x324>)
 800759e:	2200      	movs	r2, #0
 80075a0:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80075a2:	4b82      	ldr	r3, [pc, #520]	@ (80077ac <menuVariableFinisher+0x328>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80075a8:	4b81      	ldr	r3, [pc, #516]	@ (80077b0 <menuVariableFinisher+0x32c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80075ae:	4b81      	ldr	r3, [pc, #516]	@ (80077b4 <menuVariableFinisher+0x330>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80075b4:	4b80      	ldr	r3, [pc, #512]	@ (80077b8 <menuVariableFinisher+0x334>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80075ba:	4b80      	ldr	r3, [pc, #512]	@ (80077bc <menuVariableFinisher+0x338>)
 80075bc:	2200      	movs	r2, #0
 80075be:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80075c0:	4b7f      	ldr	r3, [pc, #508]	@ (80077c0 <menuVariableFinisher+0x33c>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80075c6:	4b7f      	ldr	r3, [pc, #508]	@ (80077c4 <menuVariableFinisher+0x340>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80075cc:	4b7e      	ldr	r3, [pc, #504]	@ (80077c8 <menuVariableFinisher+0x344>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80075d2:	4b7e      	ldr	r3, [pc, #504]	@ (80077cc <menuVariableFinisher+0x348>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80075d8:	4b7d      	ldr	r3, [pc, #500]	@ (80077d0 <menuVariableFinisher+0x34c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80075de:	4b7d      	ldr	r3, [pc, #500]	@ (80077d4 <menuVariableFinisher+0x350>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80075e4:	4b7c      	ldr	r3, [pc, #496]	@ (80077d8 <menuVariableFinisher+0x354>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80075ea:	4b7c      	ldr	r3, [pc, #496]	@ (80077dc <menuVariableFinisher+0x358>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80075f0:	4b7b      	ldr	r3, [pc, #492]	@ (80077e0 <menuVariableFinisher+0x35c>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80075f6:	4b7b      	ldr	r3, [pc, #492]	@ (80077e4 <menuVariableFinisher+0x360>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80075fc:	4b7a      	ldr	r3, [pc, #488]	@ (80077e8 <menuVariableFinisher+0x364>)
 80075fe:	2200      	movs	r2, #0
 8007600:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007602:	4b7a      	ldr	r3, [pc, #488]	@ (80077ec <menuVariableFinisher+0x368>)
 8007604:	2200      	movs	r2, #0
 8007606:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007608:	4b79      	ldr	r3, [pc, #484]	@ (80077f0 <menuVariableFinisher+0x36c>)
 800760a:	2200      	movs	r2, #0
 800760c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800760e:	4b79      	ldr	r3, [pc, #484]	@ (80077f4 <menuVariableFinisher+0x370>)
 8007610:	2200      	movs	r2, #0
 8007612:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007614:	4b78      	ldr	r3, [pc, #480]	@ (80077f8 <menuVariableFinisher+0x374>)
 8007616:	2200      	movs	r2, #0
 8007618:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 800761a:	4b78      	ldr	r3, [pc, #480]	@ (80077fc <menuVariableFinisher+0x378>)
 800761c:	2200      	movs	r2, #0
 800761e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007620:	4b77      	ldr	r3, [pc, #476]	@ (8007800 <menuVariableFinisher+0x37c>)
 8007622:	2200      	movs	r2, #0
 8007624:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007626:	4b77      	ldr	r3, [pc, #476]	@ (8007804 <menuVariableFinisher+0x380>)
 8007628:	2200      	movs	r2, #0
 800762a:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 800762c:	4b76      	ldr	r3, [pc, #472]	@ (8007808 <menuVariableFinisher+0x384>)
 800762e:	2200      	movs	r2, #0
 8007630:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007632:	4b76      	ldr	r3, [pc, #472]	@ (800780c <menuVariableFinisher+0x388>)
 8007634:	2200      	movs	r2, #0
 8007636:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007638:	4b75      	ldr	r3, [pc, #468]	@ (8007810 <menuVariableFinisher+0x38c>)
 800763a:	2200      	movs	r2, #0
 800763c:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800763e:	4b75      	ldr	r3, [pc, #468]	@ (8007814 <menuVariableFinisher+0x390>)
 8007640:	2200      	movs	r2, #0
 8007642:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007644:	4b74      	ldr	r3, [pc, #464]	@ (8007818 <menuVariableFinisher+0x394>)
 8007646:	2200      	movs	r2, #0
 8007648:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800764a:	4b74      	ldr	r3, [pc, #464]	@ (800781c <menuVariableFinisher+0x398>)
 800764c:	2200      	movs	r2, #0
 800764e:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007650:	4b73      	ldr	r3, [pc, #460]	@ (8007820 <menuVariableFinisher+0x39c>)
 8007652:	2200      	movs	r2, #0
 8007654:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007656:	4b73      	ldr	r3, [pc, #460]	@ (8007824 <menuVariableFinisher+0x3a0>)
 8007658:	2200      	movs	r2, #0
 800765a:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 800765c:	4b72      	ldr	r3, [pc, #456]	@ (8007828 <menuVariableFinisher+0x3a4>)
 800765e:	2200      	movs	r2, #0
 8007660:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007662:	4b72      	ldr	r3, [pc, #456]	@ (800782c <menuVariableFinisher+0x3a8>)
 8007664:	2200      	movs	r2, #0
 8007666:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007668:	4b71      	ldr	r3, [pc, #452]	@ (8007830 <menuVariableFinisher+0x3ac>)
 800766a:	2200      	movs	r2, #0
 800766c:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800766e:	4b71      	ldr	r3, [pc, #452]	@ (8007834 <menuVariableFinisher+0x3b0>)
 8007670:	2200      	movs	r2, #0
 8007672:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007674:	4b70      	ldr	r3, [pc, #448]	@ (8007838 <menuVariableFinisher+0x3b4>)
 8007676:	2200      	movs	r2, #0
 8007678:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800767a:	4b70      	ldr	r3, [pc, #448]	@ (800783c <menuVariableFinisher+0x3b8>)
 800767c:	2200      	movs	r2, #0
 800767e:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007680:	4b6f      	ldr	r3, [pc, #444]	@ (8007840 <menuVariableFinisher+0x3bc>)
 8007682:	2200      	movs	r2, #0
 8007684:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007686:	4b6f      	ldr	r3, [pc, #444]	@ (8007844 <menuVariableFinisher+0x3c0>)
 8007688:	2200      	movs	r2, #0
 800768a:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 800768c:	4b6e      	ldr	r3, [pc, #440]	@ (8007848 <menuVariableFinisher+0x3c4>)
 800768e:	2200      	movs	r2, #0
 8007690:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007692:	4b6e      	ldr	r3, [pc, #440]	@ (800784c <menuVariableFinisher+0x3c8>)
 8007694:	2200      	movs	r2, #0
 8007696:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007698:	4b6d      	ldr	r3, [pc, #436]	@ (8007850 <menuVariableFinisher+0x3cc>)
 800769a:	2200      	movs	r2, #0
 800769c:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 800769e:	4b6d      	ldr	r3, [pc, #436]	@ (8007854 <menuVariableFinisher+0x3d0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 80076a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007858 <menuVariableFinisher+0x3d4>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 80076aa:	4b6c      	ldr	r3, [pc, #432]	@ (800785c <menuVariableFinisher+0x3d8>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 80076b0:	4b6b      	ldr	r3, [pc, #428]	@ (8007860 <menuVariableFinisher+0x3dc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 80076b6:	4b6b      	ldr	r3, [pc, #428]	@ (8007864 <menuVariableFinisher+0x3e0>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 80076bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007868 <menuVariableFinisher+0x3e4>)
 80076be:	2200      	movs	r2, #0
 80076c0:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 80076c2:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <menuVariableFinisher+0x3e8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 80076c8:	4b69      	ldr	r3, [pc, #420]	@ (8007870 <menuVariableFinisher+0x3ec>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 80076ce:	4b69      	ldr	r3, [pc, #420]	@ (8007874 <menuVariableFinisher+0x3f0>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 80076d4:	4b68      	ldr	r3, [pc, #416]	@ (8007878 <menuVariableFinisher+0x3f4>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 80076da:	4b68      	ldr	r3, [pc, #416]	@ (800787c <menuVariableFinisher+0x3f8>)
 80076dc:	2200      	movs	r2, #0
 80076de:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 80076e0:	4b67      	ldr	r3, [pc, #412]	@ (8007880 <menuVariableFinisher+0x3fc>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	741a      	strb	r2, [r3, #16]
}
 80076e6:	bf00      	nop
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	200000a0 	.word	0x200000a0
 80076f4:	200000b4 	.word	0x200000b4
 80076f8:	200000c8 	.word	0x200000c8
 80076fc:	200000dc 	.word	0x200000dc
 8007700:	200000f0 	.word	0x200000f0
 8007704:	20000104 	.word	0x20000104
 8007708:	20000118 	.word	0x20000118
 800770c:	2000012c 	.word	0x2000012c
 8007710:	20000140 	.word	0x20000140
 8007714:	20000154 	.word	0x20000154
 8007718:	20000168 	.word	0x20000168
 800771c:	2000017c 	.word	0x2000017c
 8007720:	20001228 	.word	0x20001228
 8007724:	2000123c 	.word	0x2000123c
 8007728:	20001250 	.word	0x20001250
 800772c:	20001264 	.word	0x20001264
 8007730:	20001278 	.word	0x20001278
 8007734:	2000128c 	.word	0x2000128c
 8007738:	200012a0 	.word	0x200012a0
 800773c:	200012b4 	.word	0x200012b4
 8007740:	200012c8 	.word	0x200012c8
 8007744:	200012dc 	.word	0x200012dc
 8007748:	200012f0 	.word	0x200012f0
 800774c:	20001304 	.word	0x20001304
 8007750:	20001318 	.word	0x20001318
 8007754:	2000132c 	.word	0x2000132c
 8007758:	20001340 	.word	0x20001340
 800775c:	20001354 	.word	0x20001354
 8007760:	20001368 	.word	0x20001368
 8007764:	2000137c 	.word	0x2000137c
 8007768:	20001390 	.word	0x20001390
 800776c:	200013a4 	.word	0x200013a4
 8007770:	200013b8 	.word	0x200013b8
 8007774:	200013cc 	.word	0x200013cc
 8007778:	200013e0 	.word	0x200013e0
 800777c:	200013f4 	.word	0x200013f4
 8007780:	20001408 	.word	0x20001408
 8007784:	2000141c 	.word	0x2000141c
 8007788:	20001430 	.word	0x20001430
 800778c:	20001444 	.word	0x20001444
 8007790:	20001458 	.word	0x20001458
 8007794:	2000146c 	.word	0x2000146c
 8007798:	20001480 	.word	0x20001480
 800779c:	20001494 	.word	0x20001494
 80077a0:	200014a8 	.word	0x200014a8
 80077a4:	200014bc 	.word	0x200014bc
 80077a8:	200014d0 	.word	0x200014d0
 80077ac:	200014e4 	.word	0x200014e4
 80077b0:	200014f8 	.word	0x200014f8
 80077b4:	2000150c 	.word	0x2000150c
 80077b8:	20001520 	.word	0x20001520
 80077bc:	20001534 	.word	0x20001534
 80077c0:	20001548 	.word	0x20001548
 80077c4:	2000155c 	.word	0x2000155c
 80077c8:	20001570 	.word	0x20001570
 80077cc:	20001584 	.word	0x20001584
 80077d0:	20001598 	.word	0x20001598
 80077d4:	200015ac 	.word	0x200015ac
 80077d8:	200015c0 	.word	0x200015c0
 80077dc:	200015d4 	.word	0x200015d4
 80077e0:	200015e8 	.word	0x200015e8
 80077e4:	200015fc 	.word	0x200015fc
 80077e8:	20001610 	.word	0x20001610
 80077ec:	20001624 	.word	0x20001624
 80077f0:	20001638 	.word	0x20001638
 80077f4:	2000164c 	.word	0x2000164c
 80077f8:	20001660 	.word	0x20001660
 80077fc:	20001674 	.word	0x20001674
 8007800:	20001688 	.word	0x20001688
 8007804:	2000169c 	.word	0x2000169c
 8007808:	200016b0 	.word	0x200016b0
 800780c:	200016c4 	.word	0x200016c4
 8007810:	200016d8 	.word	0x200016d8
 8007814:	200016ec 	.word	0x200016ec
 8007818:	20001700 	.word	0x20001700
 800781c:	20001714 	.word	0x20001714
 8007820:	20001728 	.word	0x20001728
 8007824:	2000173c 	.word	0x2000173c
 8007828:	20001750 	.word	0x20001750
 800782c:	20001764 	.word	0x20001764
 8007830:	20001778 	.word	0x20001778
 8007834:	2000178c 	.word	0x2000178c
 8007838:	200017a0 	.word	0x200017a0
 800783c:	200017b4 	.word	0x200017b4
 8007840:	200017c8 	.word	0x200017c8
 8007844:	200017dc 	.word	0x200017dc
 8007848:	200017f0 	.word	0x200017f0
 800784c:	20001804 	.word	0x20001804
 8007850:	20001818 	.word	0x20001818
 8007854:	2000182c 	.word	0x2000182c
 8007858:	20001840 	.word	0x20001840
 800785c:	20001854 	.word	0x20001854
 8007860:	20001868 	.word	0x20001868
 8007864:	2000187c 	.word	0x2000187c
 8007868:	20001890 	.word	0x20001890
 800786c:	200018a4 	.word	0x200018a4
 8007870:	200018b8 	.word	0x200018b8
 8007874:	200018cc 	.word	0x200018cc
 8007878:	200018e0 	.word	0x200018e0
 800787c:	200018f4 	.word	0x200018f4
 8007880:	20001908 	.word	0x20001908

08007884 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800788a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800788e:	f001 fded 	bl	800946c <HAL_Delay>
	int confirmationVal = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007896:	e012      	b.n	80078be <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007898:	4a12      	ldr	r2, [pc, #72]	@ (80078e4 <takeMachineIDWithConfirmation+0x60>)
 800789a:	2101      	movs	r1, #1
 800789c:	2001      	movs	r0, #1
 800789e:	f001 f88b 	bl	80089b8 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 80078a2:	4a11      	ldr	r2, [pc, #68]	@ (80078e8 <takeMachineIDWithConfirmation+0x64>)
 80078a4:	2101      	movs	r1, #1
 80078a6:	2002      	movs	r0, #2
 80078a8:	f001 f886 	bl	80089b8 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 80078ac:	2102      	movs	r1, #2
 80078ae:	480f      	ldr	r0, [pc, #60]	@ (80078ec <takeMachineIDWithConfirmation+0x68>)
 80078b0:	f002 fbac 	bl	800a00c <HAL_GPIO_ReadPin>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 80078ba:	2301      	movs	r3, #1
 80078bc:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0e9      	beq.n	8007898 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 80078c4:	f000 f814 	bl	80078f0 <takeMachineID>

	convertArrays(1);
 80078c8:	2001      	movs	r0, #1
 80078ca:	f7f8 ff39 	bl	8000740 <convertArrays>
	HAL_Delay(50);
 80078ce:	2032      	movs	r0, #50	@ 0x32
 80078d0:	f001 fdcc 	bl	800946c <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 80078d4:	2001      	movs	r0, #1
 80078d6:	f7f9 fc73 	bl	80011c0 <printCredentials>
}
 80078da:	bf00      	nop
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200018e0 	.word	0x200018e0
 80078e8:	200018f4 	.word	0x200018f4
 80078ec:	40010800 	.word	0x40010800

080078f0 <takeMachineID>:

void takeMachineID() {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 80078f6:	2001      	movs	r0, #1
 80078f8:	f001 f8bc 	bl	8008a74 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80078fc:	220c      	movs	r2, #12
 80078fe:	2100      	movs	r1, #0
 8007900:	48a2      	ldr	r0, [pc, #648]	@ (8007b8c <takeMachineID+0x29c>)
 8007902:	f005 fceb 	bl	800d2dc <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007906:	2305      	movs	r3, #5
 8007908:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800790a:	2303      	movs	r3, #3
 800790c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007912:	4b9f      	ldr	r3, [pc, #636]	@ (8007b90 <takeMachineID+0x2a0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007918:	2100      	movs	r1, #0
 800791a:	2001      	movs	r0, #1
 800791c:	f7f9 f9e4 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007920:	2108      	movs	r1, #8
 8007922:	489c      	ldr	r0, [pc, #624]	@ (8007b94 <takeMachineID+0x2a4>)
 8007924:	f002 fb72 	bl	800a00c <HAL_GPIO_ReadPin>
 8007928:	4603      	mov	r3, r0
 800792a:	2b01      	cmp	r3, #1
 800792c:	d128      	bne.n	8007980 <takeMachineID+0x90>
        	lcd_cursor(0);
 800792e:	2000      	movs	r0, #0
 8007930:	f001 f8a0 	bl	8008a74 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007934:	f000 fe82 	bl	800863c <checkEEPROM4ID>
 8007938:	4603      	mov	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d00e      	beq.n	800795c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 800793e:	4a96      	ldr	r2, [pc, #600]	@ (8007b98 <takeMachineID+0x2a8>)
 8007940:	2101      	movs	r1, #1
 8007942:	2001      	movs	r0, #1
 8007944:	f001 f838 	bl	80089b8 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007948:	4a94      	ldr	r2, [pc, #592]	@ (8007b9c <takeMachineID+0x2ac>)
 800794a:	2101      	movs	r1, #1
 800794c:	2002      	movs	r0, #2
 800794e:	f001 f833 	bl	80089b8 <lcd_print>
        		HAL_Delay(1250);
 8007952:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007956:	f001 fd89 	bl	800946c <HAL_Delay>

        		goto mainSection;
 800795a:	e7cc      	b.n	80078f6 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800795c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007960:	9302      	str	r3, [sp, #8]
 8007962:	236e      	movs	r3, #110	@ 0x6e
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	4b8e      	ldr	r3, [pc, #568]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	236e      	movs	r3, #110	@ 0x6e
 800796c:	2200      	movs	r2, #0
 800796e:	21a0      	movs	r1, #160	@ 0xa0
 8007970:	488c      	ldr	r0, [pc, #560]	@ (8007ba4 <takeMachineID+0x2b4>)
 8007972:	f002 fe05 	bl	800a580 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800797a:	f001 fd77 	bl	800946c <HAL_Delay>

            	break;
 800797e:	e132      	b.n	8007be6 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007980:	2101      	movs	r1, #1
 8007982:	4884      	ldr	r0, [pc, #528]	@ (8007b94 <takeMachineID+0x2a4>)
 8007984:	f002 fb42 	bl	800a00c <HAL_GPIO_ReadPin>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d111      	bne.n	80079b2 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b07      	cmp	r3, #7
 8007992:	d102      	bne.n	800799a <takeMachineID+0xaa>
        		cursorPosition = 10;
 8007994:	230a      	movs	r3, #10
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	e008      	b.n	80079ac <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b0e      	cmp	r3, #14
 800799e:	d102      	bne.n	80079a6 <takeMachineID+0xb6>
                cursorPosition = 3;
 80079a0:	2303      	movs	r3, #3
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	e002      	b.n	80079ac <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 80079ac:	2096      	movs	r0, #150	@ 0x96
 80079ae:	f001 fd5d 	bl	800946c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80079b2:	2108      	movs	r1, #8
 80079b4:	487c      	ldr	r0, [pc, #496]	@ (8007ba8 <takeMachineID+0x2b8>)
 80079b6:	f002 fb29 	bl	800a00c <HAL_GPIO_ReadPin>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d111      	bne.n	80079e4 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d102      	bne.n	80079cc <takeMachineID+0xdc>
                cursorPosition = 14;
 80079c6:	230e      	movs	r3, #14
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	e008      	b.n	80079de <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b0a      	cmp	r3, #10
 80079d0:	d102      	bne.n	80079d8 <takeMachineID+0xe8>
            	cursorPosition = 7;
 80079d2:	2307      	movs	r3, #7
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	e002      	b.n	80079de <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3b01      	subs	r3, #1
 80079dc:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 80079de:	20fa      	movs	r0, #250	@ 0xfa
 80079e0:	f001 fd44 	bl	800946c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80079e4:	2102      	movs	r1, #2
 80079e6:	486b      	ldr	r0, [pc, #428]	@ (8007b94 <takeMachineID+0x2a4>)
 80079e8:	f002 fb10 	bl	800a00c <HAL_GPIO_ReadPin>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	f040 80a1 	bne.w	8007b36 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d10a      	bne.n	8007a10 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 80079fa:	4a64      	ldr	r2, [pc, #400]	@ (8007b8c <takeMachineID+0x29c>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	2230      	movs	r2, #48	@ 0x30
 8007a02:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007a04:	4a66      	ldr	r2, [pc, #408]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	4413      	add	r3, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e07c      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d10a      	bne.n	8007a2c <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8007a16:	4a5d      	ldr	r2, [pc, #372]	@ (8007b8c <takeMachineID+0x29c>)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	2231      	movs	r2, #49	@ 0x31
 8007a1e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007a20:	4a5f      	ldr	r2, [pc, #380]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	4413      	add	r3, r2
 8007a26:	2201      	movs	r2, #1
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	e06e      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	d10a      	bne.n	8007a48 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8007a32:	4a56      	ldr	r2, [pc, #344]	@ (8007b8c <takeMachineID+0x29c>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4413      	add	r3, r2
 8007a38:	2232      	movs	r2, #50	@ 0x32
 8007a3a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007a3c:	4a58      	ldr	r2, [pc, #352]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	4413      	add	r3, r2
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e060      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b06      	cmp	r3, #6
 8007a4c:	d10a      	bne.n	8007a64 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8007a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8007b8c <takeMachineID+0x29c>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	2233      	movs	r2, #51	@ 0x33
 8007a56:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007a58:	4a51      	ldr	r2, [pc, #324]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2203      	movs	r2, #3
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e052      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b07      	cmp	r3, #7
 8007a68:	d10a      	bne.n	8007a80 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8007a6a:	4a48      	ldr	r2, [pc, #288]	@ (8007b8c <takeMachineID+0x29c>)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4413      	add	r3, r2
 8007a70:	2234      	movs	r2, #52	@ 0x34
 8007a72:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007a74:	4a4a      	ldr	r2, [pc, #296]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	4413      	add	r3, r2
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e044      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b0a      	cmp	r3, #10
 8007a84:	d10a      	bne.n	8007a9c <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8007a86:	4a41      	ldr	r2, [pc, #260]	@ (8007b8c <takeMachineID+0x29c>)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	2235      	movs	r2, #53	@ 0x35
 8007a8e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007a90:	4a43      	ldr	r2, [pc, #268]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	2205      	movs	r2, #5
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e036      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b0b      	cmp	r3, #11
 8007aa0:	d10a      	bne.n	8007ab8 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8007aa2:	4a3a      	ldr	r2, [pc, #232]	@ (8007b8c <takeMachineID+0x29c>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	2236      	movs	r2, #54	@ 0x36
 8007aaa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007aac:	4a3c      	ldr	r2, [pc, #240]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	2206      	movs	r2, #6
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e028      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b0c      	cmp	r3, #12
 8007abc:	d10a      	bne.n	8007ad4 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8007abe:	4a33      	ldr	r2, [pc, #204]	@ (8007b8c <takeMachineID+0x29c>)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	2237      	movs	r2, #55	@ 0x37
 8007ac6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007ac8:	4a35      	ldr	r2, [pc, #212]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	4413      	add	r3, r2
 8007ace:	2207      	movs	r2, #7
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	e01a      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b0d      	cmp	r3, #13
 8007ad8:	d10a      	bne.n	8007af0 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8007ada:	4a2c      	ldr	r2, [pc, #176]	@ (8007b8c <takeMachineID+0x29c>)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	2238      	movs	r2, #56	@ 0x38
 8007ae2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	4413      	add	r3, r2
 8007aea:	2208      	movs	r2, #8
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e00c      	b.n	8007b0a <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b0e      	cmp	r3, #14
 8007af4:	d109      	bne.n	8007b0a <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007af6:	4a25      	ldr	r2, [pc, #148]	@ (8007b8c <takeMachineID+0x29c>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	2239      	movs	r2, #57	@ 0x39
 8007afe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007b00:	4a27      	ldr	r2, [pc, #156]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	4413      	add	r3, r2
 8007b06:	2209      	movs	r2, #9
 8007b08:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	b2d9      	uxtb	r1, r3
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <takeMachineID+0x29c>)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f000 ff62 	bl	80089e2 <lcd_print_char>

        	writeLoc++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3301      	adds	r3, #1
 8007b28:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007b30:	2096      	movs	r0, #150	@ 0x96
 8007b32:	f001 fc9b 	bl	800946c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007b36:	2104      	movs	r1, #4
 8007b38:	4816      	ldr	r0, [pc, #88]	@ (8007b94 <takeMachineID+0x2a4>)
 8007b3a:	f002 fa67 	bl	800a00c <HAL_GPIO_ReadPin>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d149      	bne.n	8007bd8 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007b44:	4b11      	ldr	r3, [pc, #68]	@ (8007b8c <takeMachineID+0x29c>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d042      	beq.n	8007bd2 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007b8c <takeMachineID+0x29c>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4413      	add	r3, r2
 8007b52:	2200      	movs	r2, #0
 8007b54:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007b56:	4a12      	ldr	r2, [pc, #72]	@ (8007ba0 <takeMachineID+0x2b0>)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	dd03      	ble.n	8007b6e <takeMachineID+0x27e>
                	writeLoc--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e004      	b.n	8007b78 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	dc01      	bgt.n	8007b78 <takeMachineID+0x288>
                	writeLoc = 5;
 8007b74:	2305      	movs	r3, #5
 8007b76:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dd16      	ble.n	8007bac <takeMachineID+0x2bc>
                	arrayPos--;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	e017      	b.n	8007bbc <takeMachineID+0x2cc>
 8007b8c:	20001068 	.word	0x20001068
 8007b90:	20000004 	.word	0x20000004
 8007b94:	40010800 	.word	0x40010800
 8007b98:	200017f0 	.word	0x200017f0
 8007b9c:	20001804 	.word	0x20001804
 8007ba0:	20000ff0 	.word	0x20000ff0
 8007ba4:	20001944 	.word	0x20001944
 8007ba8:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da04      	bge.n	8007bbc <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf0 <takeMachineID+0x300>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	3305      	adds	r3, #5
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f000 ff2c 	bl	8008a24 <lcd_delete_char>
                HAL_Delay(50);
 8007bcc:	2032      	movs	r0, #50	@ 0x32
 8007bce:	f001 fc4d 	bl	800946c <HAL_Delay>
            }

            HAL_Delay(150);
 8007bd2:	2096      	movs	r0, #150	@ 0x96
 8007bd4:	f001 fc4a 	bl	800946c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	4619      	mov	r1, r3
 8007bde:	2002      	movs	r0, #2
 8007be0:	f000 fecb 	bl	800897a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007be4:	e69c      	b.n	8007920 <takeMachineID+0x30>
    }
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000004 	.word	0x20000004

08007bf4 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8007bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8007cb0 <ssidConfirmation+0xbc>)
 8007c00:	2101      	movs	r1, #1
 8007c02:	2001      	movs	r0, #1
 8007c04:	f000 fed8 	bl	80089b8 <lcd_print>

	while(loopVal == 1) {
 8007c08:	e01f      	b.n	8007c4a <ssidConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8007c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb4 <ssidConfirmation+0xc0>)
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	2002      	movs	r0, #2
 8007c10:	f000 fed2 	bl	80089b8 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007c14:	2102      	movs	r1, #2
 8007c16:	4828      	ldr	r0, [pc, #160]	@ (8007cb8 <ssidConfirmation+0xc4>)
 8007c18:	f002 f9f8 	bl	800a00c <HAL_GPIO_ReadPin>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <ssidConfirmation+0x32>
			loopVal = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiSSID) > 16) {
 8007c26:	4825      	ldr	r0, [pc, #148]	@ (8007cbc <ssidConfirmation+0xc8>)
 8007c28:	f7f8 fafc 	bl	8000224 <strlen>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d906      	bls.n	8007c40 <ssidConfirmation+0x4c>
			slideText(wifiSSID, 1, 1, 1);
 8007c32:	2301      	movs	r3, #1
 8007c34:	2201      	movs	r2, #1
 8007c36:	2101      	movs	r1, #1
 8007c38:	4820      	ldr	r0, [pc, #128]	@ (8007cbc <ssidConfirmation+0xc8>)
 8007c3a:	f7f9 f9f9 	bl	8001030 <slideText>
 8007c3e:	e004      	b.n	8007c4a <ssidConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiSSID);
 8007c40:	4a1e      	ldr	r2, [pc, #120]	@ (8007cbc <ssidConfirmation+0xc8>)
 8007c42:	2101      	movs	r1, #1
 8007c44:	2001      	movs	r0, #1
 8007c46:	f000 feb7 	bl	80089b8 <lcd_print>
	while(loopVal == 1) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d0dc      	beq.n	8007c0a <ssidConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8007c50:	2000      	movs	r0, #0
 8007c52:	f000 ff0f 	bl	8008a74 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8007c56:	4819      	ldr	r0, [pc, #100]	@ (8007cbc <ssidConfirmation+0xc8>)
 8007c58:	f7f8 fae4 	bl	8000224 <strlen>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b14      	cmp	r3, #20
 8007c60:	d90f      	bls.n	8007c82 <ssidConfirmation+0x8e>
    	lcd_print(1, 1, ssidExceedErrorText);
 8007c62:	4a17      	ldr	r2, [pc, #92]	@ (8007cc0 <ssidConfirmation+0xcc>)
 8007c64:	2101      	movs	r1, #1
 8007c66:	2001      	movs	r0, #1
 8007c68:	f000 fea6 	bl	80089b8 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8007c6c:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <ssidConfirmation+0xd0>)
 8007c6e:	2101      	movs	r1, #1
 8007c70:	2002      	movs	r0, #2
 8007c72:	f000 fea1 	bl	80089b8 <lcd_print>
        HAL_Delay(1250);
 8007c76:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007c7a:	f001 fbf7 	bl	800946c <HAL_Delay>

        return 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e011      	b.n	8007ca6 <ssidConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007c82:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	236e      	movs	r3, #110	@ 0x6e
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc8 <ssidConfirmation+0xd4>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	236e      	movs	r3, #110	@ 0x6e
 8007c92:	2200      	movs	r2, #0
 8007c94:	21a0      	movs	r1, #160	@ 0xa0
 8007c96:	480d      	ldr	r0, [pc, #52]	@ (8007ccc <ssidConfirmation+0xd8>)
 8007c98:	f002 fc72 	bl	800a580 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8007c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007ca0:	f001 fbe4 	bl	800946c <HAL_Delay>

    	return 1;
 8007ca4:	2301      	movs	r3, #1
    }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	0800dd8c 	.word	0x0800dd8c
 8007cb4:	20001908 	.word	0x20001908
 8007cb8:	40010800 	.word	0x40010800
 8007cbc:	20001074 	.word	0x20001074
 8007cc0:	20001818 	.word	0x20001818
 8007cc4:	2000182c 	.word	0x2000182c
 8007cc8:	20000ff0 	.word	0x20000ff0
 8007ccc:	20001944 	.word	0x20001944

08007cd0 <takeWifiSSID>:

void takeWifiSSID() {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	f000 fecc 	bl	8008a74 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007cdc:	2214      	movs	r2, #20
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4899      	ldr	r0, [pc, #612]	@ (8007f48 <takeWifiSSID+0x278>)
 8007ce2:	f005 fafb 	bl	800d2dc <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007cea:	2307      	movs	r3, #7
 8007cec:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007cee:	2301      	movs	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007cf6:	4b95      	ldr	r3, [pc, #596]	@ (8007f4c <takeWifiSSID+0x27c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	2002      	movs	r0, #2
 8007d00:	f7f8 fff2 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007d04:	2108      	movs	r1, #8
 8007d06:	4892      	ldr	r0, [pc, #584]	@ (8007f50 <takeWifiSSID+0x280>)
 8007d08:	f002 f980 	bl	800a00c <HAL_GPIO_ReadPin>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d106      	bne.n	8007d20 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8007d12:	f7ff ff6f 	bl	8007bf4 <ssidConfirmation>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 813e 	bne.w	8007f9a <takeWifiSSID+0x2ca>
        		goto mainSSIDSection;
 8007d1e:	e7da      	b.n	8007cd6 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007d20:	2101      	movs	r1, #1
 8007d22:	488b      	ldr	r0, [pc, #556]	@ (8007f50 <takeWifiSSID+0x280>)
 8007d24:	f002 f972 	bl	800a00c <HAL_GPIO_ReadPin>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d14d      	bne.n	8007dca <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b50      	cmp	r3, #80	@ 0x50
 8007d32:	dd01      	ble.n	8007d38 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8007d34:	2301      	movs	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b10      	cmp	r3, #16
 8007d3c:	d13f      	bne.n	8007dbe <takeWifiSSID+0xee>
            	if(page == 1) {
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d109      	bne.n	8007d58 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007d4e:	2102      	movs	r1, #2
 8007d50:	2002      	movs	r0, #2
 8007d52:	f7f8 ffc9 	bl	8000ce8 <printTemplate>
 8007d56:	e035      	b.n	8007dc4 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d109      	bne.n	8007d72 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	3301      	adds	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007d68:	2103      	movs	r1, #3
 8007d6a:	2002      	movs	r0, #2
 8007d6c:	f7f8 ffbc 	bl	8000ce8 <printTemplate>
 8007d70:	e028      	b.n	8007dc4 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d109      	bne.n	8007d8c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007d82:	2104      	movs	r1, #4
 8007d84:	2002      	movs	r0, #2
 8007d86:	f7f8 ffaf 	bl	8000ce8 <printTemplate>
 8007d8a:	e01b      	b.n	8007dc4 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d109      	bne.n	8007da6 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007d9c:	2105      	movs	r1, #5
 8007d9e:	2002      	movs	r0, #2
 8007da0:	f7f8 ffa2 	bl	8000ce8 <printTemplate>
 8007da4:	e00e      	b.n	8007dc4 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d10b      	bne.n	8007dc4 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8007dac:	2301      	movs	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007db0:	2301      	movs	r3, #1
 8007db2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007db4:	2101      	movs	r1, #1
 8007db6:	2002      	movs	r0, #2
 8007db8:	f7f8 ff96 	bl	8000ce8 <printTemplate>
 8007dbc:	e002      	b.n	8007dc4 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007dc4:	2096      	movs	r0, #150	@ 0x96
 8007dc6:	f001 fb51 	bl	800946c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007dca:	2108      	movs	r1, #8
 8007dcc:	4861      	ldr	r0, [pc, #388]	@ (8007f54 <takeWifiSSID+0x284>)
 8007dce:	f002 f91d 	bl	800a00c <HAL_GPIO_ReadPin>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d149      	bne.n	8007e6c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dc01      	bgt.n	8007de2 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8007dde:	2350      	movs	r3, #80	@ 0x50
 8007de0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d13b      	bne.n	8007e60 <takeWifiSSID+0x190>
            	if(page == 1) {
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d108      	bne.n	8007e00 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8007dee:	2310      	movs	r3, #16
 8007df0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007df2:	2305      	movs	r3, #5
 8007df4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007df6:	2105      	movs	r1, #5
 8007df8:	2002      	movs	r0, #2
 8007dfa:	f7f8 ff75 	bl	8000ce8 <printTemplate>
 8007dfe:	e032      	b.n	8007e66 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d108      	bne.n	8007e18 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8007e06:	2310      	movs	r3, #16
 8007e08:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007e0e:	2101      	movs	r1, #1
 8007e10:	2002      	movs	r0, #2
 8007e12:	f7f8 ff69 	bl	8000ce8 <printTemplate>
 8007e16:	e026      	b.n	8007e66 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d108      	bne.n	8007e30 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8007e1e:	2310      	movs	r3, #16
 8007e20:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007e22:	2302      	movs	r3, #2
 8007e24:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007e26:	2102      	movs	r1, #2
 8007e28:	2002      	movs	r0, #2
 8007e2a:	f7f8 ff5d 	bl	8000ce8 <printTemplate>
 8007e2e:	e01a      	b.n	8007e66 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d108      	bne.n	8007e48 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8007e36:	2310      	movs	r3, #16
 8007e38:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007e3e:	2103      	movs	r1, #3
 8007e40:	2002      	movs	r0, #2
 8007e42:	f7f8 ff51 	bl	8000ce8 <printTemplate>
 8007e46:	e00e      	b.n	8007e66 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d10b      	bne.n	8007e66 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8007e4e:	2310      	movs	r3, #16
 8007e50:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007e52:	2304      	movs	r3, #4
 8007e54:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007e56:	2104      	movs	r1, #4
 8007e58:	2002      	movs	r0, #2
 8007e5a:	f7f8 ff45 	bl	8000ce8 <printTemplate>
 8007e5e:	e002      	b.n	8007e66 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007e66:	2096      	movs	r0, #150	@ 0x96
 8007e68:	f001 fb00 	bl	800946c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007e6c:	2102      	movs	r1, #2
 8007e6e:	4838      	ldr	r0, [pc, #224]	@ (8007f50 <takeWifiSSID+0x280>)
 8007e70:	f002 f8cc 	bl	800a00c <HAL_GPIO_ReadPin>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d12f      	bne.n	8007eda <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	b2d9      	uxtb	r1, r3
 8007e7e:	4a36      	ldr	r2, [pc, #216]	@ (8007f58 <takeWifiSSID+0x288>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	460a      	mov	r2, r1
 8007e86:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007e88:	4a34      	ldr	r2, [pc, #208]	@ (8007f5c <takeWifiSSID+0x28c>)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	7819      	ldrb	r1, [r3, #0]
 8007e90:	4a2d      	ldr	r2, [pc, #180]	@ (8007f48 <takeWifiSSID+0x278>)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4413      	add	r3, r2
 8007e96:	460a      	mov	r2, r1
 8007e98:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	b2d9      	uxtb	r1, r3
 8007e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8007f5c <takeWifiSSID+0x28c>)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	f000 fd9a 	bl	80089e2 <lcd_print_char>

            writeLoc++;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007ec0:	4a25      	ldr	r2, [pc, #148]	@ (8007f58 <takeWifiSSID+0x288>)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007eca:	4a1f      	ldr	r2, [pc, #124]	@ (8007f48 <takeWifiSSID+0x278>)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4413      	add	r3, r2
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007ed4:	2096      	movs	r0, #150	@ 0x96
 8007ed6:	f001 fac9 	bl	800946c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007eda:	2104      	movs	r1, #4
 8007edc:	481c      	ldr	r0, [pc, #112]	@ (8007f50 <takeWifiSSID+0x280>)
 8007ede:	f002 f895 	bl	800a00c <HAL_GPIO_ReadPin>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d151      	bne.n	8007f8c <takeWifiSSID+0x2bc>
        	if(strlen(wifiSSID) >= 1) {
 8007ee8:	4b17      	ldr	r3, [pc, #92]	@ (8007f48 <takeWifiSSID+0x278>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d04a      	beq.n	8007f86 <takeWifiSSID+0x2b6>
        		eepromData[eepromVal] = '\0';
 8007ef0:	4a19      	ldr	r2, [pc, #100]	@ (8007f58 <takeWifiSSID+0x288>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007efa:	4a13      	ldr	r2, [pc, #76]	@ (8007f48 <takeWifiSSID+0x278>)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4413      	add	r3, r2
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]

        		if(strlen(wifiSSID) > 10) {
 8007f04:	4810      	ldr	r0, [pc, #64]	@ (8007f48 <takeWifiSSID+0x278>)
 8007f06:	f7f8 f98d 	bl	8000224 <strlen>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b0a      	cmp	r3, #10
 8007f0e:	d905      	bls.n	8007f1c <takeWifiSSID+0x24c>
        		    slideText(wifiSSID, 7, 1, 1);
 8007f10:	2301      	movs	r3, #1
 8007f12:	2201      	movs	r2, #1
 8007f14:	2107      	movs	r1, #7
 8007f16:	480c      	ldr	r0, [pc, #48]	@ (8007f48 <takeWifiSSID+0x278>)
 8007f18:	f7f9 f88a 	bl	8001030 <slideText>
        		}

        		if(writeLoc > 7) {
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	dd03      	ble.n	8007f2a <takeWifiSSID+0x25a>
        			writeLoc--;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e004      	b.n	8007f34 <takeWifiSSID+0x264>
        		} else if(writeLoc < 7) {
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	dc01      	bgt.n	8007f34 <takeWifiSSID+0x264>
        			writeLoc = 7;
 8007f30:	2307      	movs	r3, #7
 8007f32:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	dd12      	ble.n	8007f60 <takeWifiSSID+0x290>
        			arrayPosition--;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	e013      	b.n	8007f70 <takeWifiSSID+0x2a0>
 8007f48:	20001074 	.word	0x20001074
 8007f4c:	20000008 	.word	0x20000008
 8007f50:	40010800 	.word	0x40010800
 8007f54:	40011000 	.word	0x40011000
 8007f58:	20000ff0 	.word	0x20000ff0
 8007f5c:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da04      	bge.n	8007f70 <takeWifiSSID+0x2a0>
        			arrayPosition = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa4 <takeWifiSSID+0x2d4>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	3307      	adds	r3, #7
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	f000 fd52 	bl	8008a24 <lcd_delete_char>
        		HAL_Delay(50);
 8007f80:	2032      	movs	r0, #50	@ 0x32
 8007f82:	f001 fa73 	bl	800946c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007f86:	2096      	movs	r0, #150	@ 0x96
 8007f88:	f001 fa70 	bl	800946c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	2002      	movs	r0, #2
 8007f94:	f000 fcf1 	bl	800897a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f98:	e6b4      	b.n	8007d04 <takeWifiSSID+0x34>
        		break;
 8007f9a:	bf00      	nop
    }
}
 8007f9c:	bf00      	nop
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20000008 	.word	0x20000008

08007fa8 <passConfirmation>:

uint8_t passConfirmation() {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8007fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8008064 <passConfirmation+0xbc>)
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	f000 fcfe 	bl	80089b8 <lcd_print>

	while(loopVal == 1) {
 8007fbc:	e01f      	b.n	8007ffe <passConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8008068 <passConfirmation+0xc0>)
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	2002      	movs	r0, #2
 8007fc4:	f000 fcf8 	bl	80089b8 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007fc8:	2102      	movs	r1, #2
 8007fca:	4828      	ldr	r0, [pc, #160]	@ (800806c <passConfirmation+0xc4>)
 8007fcc:	f002 f81e 	bl	800a00c <HAL_GPIO_ReadPin>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <passConfirmation+0x32>
			loopVal = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiPass) > 16) {
 8007fda:	4825      	ldr	r0, [pc, #148]	@ (8008070 <passConfirmation+0xc8>)
 8007fdc:	f7f8 f922 	bl	8000224 <strlen>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d906      	bls.n	8007ff4 <passConfirmation+0x4c>
			slideText(wifiPass, 1, 1, 1);
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2101      	movs	r1, #1
 8007fec:	4820      	ldr	r0, [pc, #128]	@ (8008070 <passConfirmation+0xc8>)
 8007fee:	f7f9 f81f 	bl	8001030 <slideText>
 8007ff2:	e004      	b.n	8007ffe <passConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiPass);
 8007ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8008070 <passConfirmation+0xc8>)
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f000 fcdd 	bl	80089b8 <lcd_print>
	while(loopVal == 1) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d0dc      	beq.n	8007fbe <passConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8008004:	2000      	movs	r0, #0
 8008006:	f000 fd35 	bl	8008a74 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 800800a:	4819      	ldr	r0, [pc, #100]	@ (8008070 <passConfirmation+0xc8>)
 800800c:	f7f8 f90a 	bl	8000224 <strlen>
 8008010:	4603      	mov	r3, r0
 8008012:	2b14      	cmp	r3, #20
 8008014:	d90f      	bls.n	8008036 <passConfirmation+0x8e>
    	lcd_print(1, 1, passExceedErrorText);
 8008016:	4a17      	ldr	r2, [pc, #92]	@ (8008074 <passConfirmation+0xcc>)
 8008018:	2101      	movs	r1, #1
 800801a:	2001      	movs	r0, #1
 800801c:	f000 fccc 	bl	80089b8 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008020:	4a15      	ldr	r2, [pc, #84]	@ (8008078 <passConfirmation+0xd0>)
 8008022:	2101      	movs	r1, #1
 8008024:	2002      	movs	r0, #2
 8008026:	f000 fcc7 	bl	80089b8 <lcd_print>
        HAL_Delay(1250);
 800802a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800802e:	f001 fa1d 	bl	800946c <HAL_Delay>

        return 0;
 8008032:	2300      	movs	r3, #0
 8008034:	e011      	b.n	800805a <passConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008036:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800803a:	9302      	str	r3, [sp, #8]
 800803c:	236e      	movs	r3, #110	@ 0x6e
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	4b0e      	ldr	r3, [pc, #56]	@ (800807c <passConfirmation+0xd4>)
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	236e      	movs	r3, #110	@ 0x6e
 8008046:	2200      	movs	r2, #0
 8008048:	21a0      	movs	r1, #160	@ 0xa0
 800804a:	480d      	ldr	r0, [pc, #52]	@ (8008080 <passConfirmation+0xd8>)
 800804c:	f002 fa98 	bl	800a580 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8008050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008054:	f001 fa0a 	bl	800946c <HAL_Delay>

    	return 1;
 8008058:	2301      	movs	r3, #1
    }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	0800dd8c 	.word	0x0800dd8c
 8008068:	20001908 	.word	0x20001908
 800806c:	40010800 	.word	0x40010800
 8008070:	20001088 	.word	0x20001088
 8008074:	20001840 	.word	0x20001840
 8008078:	20001854 	.word	0x20001854
 800807c:	20000ff0 	.word	0x20000ff0
 8008080:	20001944 	.word	0x20001944

08008084 <takeWifiPass>:

void takeWifiPass() {
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800808a:	2001      	movs	r0, #1
 800808c:	f000 fcf2 	bl	8008a74 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008090:	2214      	movs	r2, #20
 8008092:	2100      	movs	r1, #0
 8008094:	48a4      	ldr	r0, [pc, #656]	@ (8008328 <takeWifiPass+0x2a4>)
 8008096:	f005 f921 	bl	800d2dc <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800809a:	2301      	movs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800809e:	2307      	movs	r3, #7
 80080a0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80080a2:	2301      	movs	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80080a6:	2300      	movs	r3, #0
 80080a8:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80080aa:	4ba0      	ldr	r3, [pc, #640]	@ (800832c <takeWifiPass+0x2a8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80080b0:	2101      	movs	r1, #1
 80080b2:	2003      	movs	r0, #3
 80080b4:	f7f8 fe18 	bl	8000ce8 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80080b8:	2108      	movs	r1, #8
 80080ba:	489d      	ldr	r0, [pc, #628]	@ (8008330 <takeWifiPass+0x2ac>)
 80080bc:	f001 ffa6 	bl	800a00c <HAL_GPIO_ReadPin>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d106      	bne.n	80080d4 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 80080c6:	f7ff ff6f 	bl	8007fa8 <passConfirmation>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8126 	bne.w	800831e <takeWifiPass+0x29a>
    	        goto mainPassSection;
 80080d2:	e7da      	b.n	800808a <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80080d4:	2101      	movs	r1, #1
 80080d6:	4896      	ldr	r0, [pc, #600]	@ (8008330 <takeWifiPass+0x2ac>)
 80080d8:	f001 ff98 	bl	800a00c <HAL_GPIO_ReadPin>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d14d      	bne.n	800817e <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b50      	cmp	r3, #80	@ 0x50
 80080e6:	dd01      	ble.n	80080ec <takeWifiPass+0x68>
        		cursorPosition = 1;
 80080e8:	2301      	movs	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d13f      	bne.n	8008172 <takeWifiPass+0xee>
            	if(page == 1) {
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d109      	bne.n	800810c <takeWifiPass+0x88>
            		cursorPosition = 1;
 80080f8:	2301      	movs	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
            		page++;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3301      	adds	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008102:	2102      	movs	r1, #2
 8008104:	2003      	movs	r0, #3
 8008106:	f7f8 fdef 	bl	8000ce8 <printTemplate>
 800810a:	e035      	b.n	8008178 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d109      	bne.n	8008126 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8008112:	2301      	movs	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
            		page++;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	3301      	adds	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800811c:	2103      	movs	r1, #3
 800811e:	2003      	movs	r0, #3
 8008120:	f7f8 fde2 	bl	8000ce8 <printTemplate>
 8008124:	e028      	b.n	8008178 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d109      	bne.n	8008140 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	3301      	adds	r3, #1
 8008134:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008136:	2104      	movs	r1, #4
 8008138:	2003      	movs	r0, #3
 800813a:	f7f8 fdd5 	bl	8000ce8 <printTemplate>
 800813e:	e01b      	b.n	8008178 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b04      	cmp	r3, #4
 8008144:	d109      	bne.n	800815a <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008146:	2301      	movs	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
            		page++;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	3301      	adds	r3, #1
 800814e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008150:	2105      	movs	r1, #5
 8008152:	2003      	movs	r0, #3
 8008154:	f7f8 fdc8 	bl	8000ce8 <printTemplate>
 8008158:	e00e      	b.n	8008178 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d10b      	bne.n	8008178 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8008160:	2301      	movs	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008168:	2101      	movs	r1, #1
 800816a:	2003      	movs	r0, #3
 800816c:	f7f8 fdbc 	bl	8000ce8 <printTemplate>
 8008170:	e002      	b.n	8008178 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3301      	adds	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008178:	2096      	movs	r0, #150	@ 0x96
 800817a:	f001 f977 	bl	800946c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800817e:	2108      	movs	r1, #8
 8008180:	486c      	ldr	r0, [pc, #432]	@ (8008334 <takeWifiPass+0x2b0>)
 8008182:	f001 ff43 	bl	800a00c <HAL_GPIO_ReadPin>
 8008186:	4603      	mov	r3, r0
 8008188:	2b01      	cmp	r3, #1
 800818a:	d149      	bne.n	8008220 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	dc01      	bgt.n	8008196 <takeWifiPass+0x112>
        		cursorPosition = 80;
 8008192:	2350      	movs	r3, #80	@ 0x50
 8008194:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d13b      	bne.n	8008214 <takeWifiPass+0x190>
            	if(page == 1) {
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d108      	bne.n	80081b4 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80081a2:	2310      	movs	r3, #16
 80081a4:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80081a6:	2305      	movs	r3, #5
 80081a8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80081aa:	2105      	movs	r1, #5
 80081ac:	2003      	movs	r0, #3
 80081ae:	f7f8 fd9b 	bl	8000ce8 <printTemplate>
 80081b2:	e032      	b.n	800821a <takeWifiPass+0x196>
            	} else if(page == 2) {
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d108      	bne.n	80081cc <takeWifiPass+0x148>
            		cursorPosition = 16;
 80081ba:	2310      	movs	r3, #16
 80081bc:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80081be:	2301      	movs	r3, #1
 80081c0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80081c2:	2101      	movs	r1, #1
 80081c4:	2003      	movs	r0, #3
 80081c6:	f7f8 fd8f 	bl	8000ce8 <printTemplate>
 80081ca:	e026      	b.n	800821a <takeWifiPass+0x196>
            	} else if(page == 3) {
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d108      	bne.n	80081e4 <takeWifiPass+0x160>
            		cursorPosition = 16;
 80081d2:	2310      	movs	r3, #16
 80081d4:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80081d6:	2302      	movs	r3, #2
 80081d8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80081da:	2102      	movs	r1, #2
 80081dc:	2003      	movs	r0, #3
 80081de:	f7f8 fd83 	bl	8000ce8 <printTemplate>
 80081e2:	e01a      	b.n	800821a <takeWifiPass+0x196>
            	} else if(page == 4) {
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d108      	bne.n	80081fc <takeWifiPass+0x178>
            		cursorPosition = 16;
 80081ea:	2310      	movs	r3, #16
 80081ec:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80081ee:	2303      	movs	r3, #3
 80081f0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80081f2:	2103      	movs	r1, #3
 80081f4:	2003      	movs	r0, #3
 80081f6:	f7f8 fd77 	bl	8000ce8 <printTemplate>
 80081fa:	e00e      	b.n	800821a <takeWifiPass+0x196>
            	} else if(page == 5) {
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d10b      	bne.n	800821a <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008202:	2310      	movs	r3, #16
 8008204:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008206:	2304      	movs	r3, #4
 8008208:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800820a:	2104      	movs	r1, #4
 800820c:	2003      	movs	r0, #3
 800820e:	f7f8 fd6b 	bl	8000ce8 <printTemplate>
 8008212:	e002      	b.n	800821a <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3b01      	subs	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800821a:	2096      	movs	r0, #150	@ 0x96
 800821c:	f001 f926 	bl	800946c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008220:	2102      	movs	r1, #2
 8008222:	4843      	ldr	r0, [pc, #268]	@ (8008330 <takeWifiPass+0x2ac>)
 8008224:	f001 fef2 	bl	800a00c <HAL_GPIO_ReadPin>
 8008228:	4603      	mov	r3, r0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d12f      	bne.n	800828e <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	b2d9      	uxtb	r1, r3
 8008232:	4a41      	ldr	r2, [pc, #260]	@ (8008338 <takeWifiPass+0x2b4>)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	460a      	mov	r2, r1
 800823a:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 800823c:	4a3f      	ldr	r2, [pc, #252]	@ (800833c <takeWifiPass+0x2b8>)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	7819      	ldrb	r1, [r3, #0]
 8008244:	4a38      	ldr	r2, [pc, #224]	@ (8008328 <takeWifiPass+0x2a4>)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4413      	add	r3, r2
 800824a:	460a      	mov	r2, r1
 800824c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	b2d9      	uxtb	r1, r3
 8008252:	4a3a      	ldr	r2, [pc, #232]	@ (800833c <takeWifiPass+0x2b8>)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	2001      	movs	r0, #1
 800825e:	f000 fbc0 	bl	80089e2 <lcd_print_char>

            writeLoc++;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3301      	adds	r3, #1
 800826c:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3301      	adds	r3, #1
 8008272:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008274:	4a30      	ldr	r2, [pc, #192]	@ (8008338 <takeWifiPass+0x2b4>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4413      	add	r3, r2
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800827e:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <takeWifiPass+0x2a4>)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4413      	add	r3, r2
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008288:	2096      	movs	r0, #150	@ 0x96
 800828a:	f001 f8ef 	bl	800946c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800828e:	2104      	movs	r1, #4
 8008290:	4827      	ldr	r0, [pc, #156]	@ (8008330 <takeWifiPass+0x2ac>)
 8008292:	f001 febb 	bl	800a00c <HAL_GPIO_ReadPin>
 8008296:	4603      	mov	r3, r0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d139      	bne.n	8008310 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 800829c:	4b22      	ldr	r3, [pc, #136]	@ (8008328 <takeWifiPass+0x2a4>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d032      	beq.n	800830a <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 80082a4:	4a24      	ldr	r2, [pc, #144]	@ (8008338 <takeWifiPass+0x2b4>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80082ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008328 <takeWifiPass+0x2a4>)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4413      	add	r3, r2
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	2b07      	cmp	r3, #7
 80082bc:	dd03      	ble.n	80082c6 <takeWifiPass+0x242>
        			writeLoc--;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	e004      	b.n	80082d0 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b06      	cmp	r3, #6
 80082ca:	dc01      	bgt.n	80082d0 <takeWifiPass+0x24c>
        			writeLoc = 7;
 80082cc:	2307      	movs	r3, #7
 80082ce:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd06      	ble.n	80082e4 <takeWifiPass+0x260>
        			arrayPosition--;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3b01      	subs	r3, #1
 80082da:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3b01      	subs	r3, #1
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	e007      	b.n	80082f4 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	da04      	bge.n	80082f4 <takeWifiPass+0x270>
        			arrayPosition = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80082ee:	4b0f      	ldr	r3, [pc, #60]	@ (800832c <takeWifiPass+0x2a8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	3307      	adds	r3, #7
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	2001      	movs	r0, #1
 8008300:	f000 fb90 	bl	8008a24 <lcd_delete_char>
        		HAL_Delay(50);
 8008304:	2032      	movs	r0, #50	@ 0x32
 8008306:	f001 f8b1 	bl	800946c <HAL_Delay>
        	}

        	HAL_Delay(150);
 800830a:	2096      	movs	r0, #150	@ 0x96
 800830c:	f001 f8ae 	bl	800946c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	4619      	mov	r1, r3
 8008316:	2002      	movs	r0, #2
 8008318:	f000 fb2f 	bl	800897a <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800831c:	e6cc      	b.n	80080b8 <takeWifiPass+0x34>
    	        break;
 800831e:	bf00      	nop
    }
}
 8008320:	bf00      	nop
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20001088 	.word	0x20001088
 800832c:	2000000c 	.word	0x2000000c
 8008330:	40010800 	.word	0x40010800
 8008334:	40011000 	.word	0x40011000
 8008338:	20000ff0 	.word	0x20000ff0
 800833c:	2000001c 	.word	0x2000001c

08008340 <mergeData>:

char* mergeData() {
 8008340:	b580      	push	{r7, lr}
 8008342:	b09c      	sub	sp, #112	@ 0x70
 8008344:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008346:	2300      	movs	r3, #0
 8008348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800834a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800834e:	2229      	movs	r2, #41	@ 0x29
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f004 ffc2 	bl	800d2dc <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008358:	4b65      	ldr	r3, [pc, #404]	@ (80084f0 <mergeData+0x1b0>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	703b      	strb	r3, [r7, #0]
 800835e:	4b65      	ldr	r3, [pc, #404]	@ (80084f4 <mergeData+0x1b4>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	707b      	strb	r3, [r7, #1]
 8008364:	4b64      	ldr	r3, [pc, #400]	@ (80084f8 <mergeData+0x1b8>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	70bb      	strb	r3, [r7, #2]
 800836a:	4b64      	ldr	r3, [pc, #400]	@ (80084fc <mergeData+0x1bc>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	70fb      	strb	r3, [r7, #3]
 8008370:	4b63      	ldr	r3, [pc, #396]	@ (8008500 <mergeData+0x1c0>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	713b      	strb	r3, [r7, #4]
 8008376:	4b63      	ldr	r3, [pc, #396]	@ (8008504 <mergeData+0x1c4>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	717b      	strb	r3, [r7, #5]
 800837c:	4b62      	ldr	r3, [pc, #392]	@ (8008508 <mergeData+0x1c8>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	71bb      	strb	r3, [r7, #6]
 8008382:	4b62      	ldr	r3, [pc, #392]	@ (800850c <mergeData+0x1cc>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
 8008388:	4b61      	ldr	r3, [pc, #388]	@ (8008510 <mergeData+0x1d0>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	723b      	strb	r3, [r7, #8]
 800838e:	4b61      	ldr	r3, [pc, #388]	@ (8008514 <mergeData+0x1d4>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	727b      	strb	r3, [r7, #9]
 8008394:	4b60      	ldr	r3, [pc, #384]	@ (8008518 <mergeData+0x1d8>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	72bb      	strb	r3, [r7, #10]
 800839a:	4b60      	ldr	r3, [pc, #384]	@ (800851c <mergeData+0x1dc>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	72fb      	strb	r3, [r7, #11]
 80083a0:	4b5f      	ldr	r3, [pc, #380]	@ (8008520 <mergeData+0x1e0>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	733b      	strb	r3, [r7, #12]
 80083a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008524 <mergeData+0x1e4>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	737b      	strb	r3, [r7, #13]
 80083ac:	4b5e      	ldr	r3, [pc, #376]	@ (8008528 <mergeData+0x1e8>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	73bb      	strb	r3, [r7, #14]
 80083b2:	4b5e      	ldr	r3, [pc, #376]	@ (800852c <mergeData+0x1ec>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008530 <mergeData+0x1f0>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	743b      	strb	r3, [r7, #16]
 80083be:	4b5d      	ldr	r3, [pc, #372]	@ (8008534 <mergeData+0x1f4>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	747b      	strb	r3, [r7, #17]
 80083c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008538 <mergeData+0x1f8>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	74bb      	strb	r3, [r7, #18]
 80083ca:	4b5c      	ldr	r3, [pc, #368]	@ (800853c <mergeData+0x1fc>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	74fb      	strb	r3, [r7, #19]
 80083d0:	4b5b      	ldr	r3, [pc, #364]	@ (8008540 <mergeData+0x200>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	753b      	strb	r3, [r7, #20]
 80083d6:	4b5b      	ldr	r3, [pc, #364]	@ (8008544 <mergeData+0x204>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	757b      	strb	r3, [r7, #21]
 80083dc:	4b5a      	ldr	r3, [pc, #360]	@ (8008548 <mergeData+0x208>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	75bb      	strb	r3, [r7, #22]
 80083e2:	4b5a      	ldr	r3, [pc, #360]	@ (800854c <mergeData+0x20c>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	75fb      	strb	r3, [r7, #23]
 80083e8:	4b59      	ldr	r3, [pc, #356]	@ (8008550 <mergeData+0x210>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	763b      	strb	r3, [r7, #24]
 80083ee:	4b59      	ldr	r3, [pc, #356]	@ (8008554 <mergeData+0x214>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	767b      	strb	r3, [r7, #25]
 80083f4:	4b58      	ldr	r3, [pc, #352]	@ (8008558 <mergeData+0x218>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	76bb      	strb	r3, [r7, #26]
 80083fa:	4b58      	ldr	r3, [pc, #352]	@ (800855c <mergeData+0x21c>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	76fb      	strb	r3, [r7, #27]
 8008400:	4b57      	ldr	r3, [pc, #348]	@ (8008560 <mergeData+0x220>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	773b      	strb	r3, [r7, #28]
 8008406:	4b57      	ldr	r3, [pc, #348]	@ (8008564 <mergeData+0x224>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	777b      	strb	r3, [r7, #29]
 800840c:	4b56      	ldr	r3, [pc, #344]	@ (8008568 <mergeData+0x228>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	77bb      	strb	r3, [r7, #30]
 8008412:	4b56      	ldr	r3, [pc, #344]	@ (800856c <mergeData+0x22c>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	4b55      	ldr	r3, [pc, #340]	@ (8008570 <mergeData+0x230>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8008420:	4b54      	ldr	r3, [pc, #336]	@ (8008574 <mergeData+0x234>)
 8008422:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008426:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 800842a:	4b52      	ldr	r3, [pc, #328]	@ (8008574 <mergeData+0x234>)
 800842c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 8008434:	4b4f      	ldr	r3, [pc, #316]	@ (8008574 <mergeData+0x234>)
 8008436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 800843a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 800843e:	4b4d      	ldr	r3, [pc, #308]	@ (8008574 <mergeData+0x234>)
 8008440:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008444:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 8008448:	4b4a      	ldr	r3, [pc, #296]	@ (8008574 <mergeData+0x234>)
 800844a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 800844e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 8008452:	4b48      	ldr	r3, [pc, #288]	@ (8008574 <mergeData+0x234>)
 8008454:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008458:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 800845c:	4b45      	ldr	r3, [pc, #276]	@ (8008574 <mergeData+0x234>)
 800845e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 8008466:	4b43      	ldr	r3, [pc, #268]	@ (8008574 <mergeData+0x234>)
 8008468:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 800846c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 8008470:	4b40      	ldr	r3, [pc, #256]	@ (8008574 <mergeData+0x234>)
 8008472:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008476:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 800847a:	4b3e      	ldr	r3, [pc, #248]	@ (8008574 <mergeData+0x234>)
 800847c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008484:	2306      	movs	r3, #6
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800848a:	2300      	movs	r3, #0
 800848c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800848e:	e015      	b.n	80084bc <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 8008490:	463a      	mov	r2, r7
 8008492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008494:	4413      	add	r3, r2
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800849e:	4936      	ldr	r1, [pc, #216]	@ (8008578 <mergeData+0x238>)
 80084a0:	4618      	mov	r0, r3
 80084a2:	f004 fe97 	bl	800d1d4 <siprintf>
	    strcat(combinedString, temp);
 80084a6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80084aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f004 fef1 	bl	800d298 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80084b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b8:	3301      	adds	r3, #1
 80084ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084be:	2b2b      	cmp	r3, #43	@ 0x2b
 80084c0:	d9e6      	bls.n	8008490 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80084c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f7 feac 	bl	8000224 <strlen>
 80084cc:	4603      	mov	r3, r0
 80084ce:	3301      	adds	r3, #1
 80084d0:	4618      	mov	r0, r3
 80084d2:	f004 fdc9 	bl	800d068 <malloc>
 80084d6:	4603      	mov	r3, r0
 80084d8:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 80084da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80084de:	4619      	mov	r1, r3
 80084e0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80084e2:	f004 ff3f 	bl	800d364 <strcpy>
	return result;
 80084e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3770      	adds	r7, #112	@ 0x70
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	200010d7 	.word	0x200010d7
 80084f4:	200010c9 	.word	0x200010c9
 80084f8:	200010cc 	.word	0x200010cc
 80084fc:	200010cd 	.word	0x200010cd
 8008500:	200010ce 	.word	0x200010ce
 8008504:	200010d5 	.word	0x200010d5
 8008508:	200010cf 	.word	0x200010cf
 800850c:	200010d0 	.word	0x200010d0
 8008510:	200010d4 	.word	0x200010d4
 8008514:	200010d1 	.word	0x200010d1
 8008518:	200010e1 	.word	0x200010e1
 800851c:	200010d2 	.word	0x200010d2
 8008520:	200010e2 	.word	0x200010e2
 8008524:	200010d3 	.word	0x200010d3
 8008528:	200010e3 	.word	0x200010e3
 800852c:	200010d6 	.word	0x200010d6
 8008530:	200010d8 	.word	0x200010d8
 8008534:	200010d9 	.word	0x200010d9
 8008538:	200010da 	.word	0x200010da
 800853c:	200010db 	.word	0x200010db
 8008540:	200010dc 	.word	0x200010dc
 8008544:	200010dd 	.word	0x200010dd
 8008548:	200010de 	.word	0x200010de
 800854c:	200010df 	.word	0x200010df
 8008550:	200010e0 	.word	0x200010e0
 8008554:	200010e4 	.word	0x200010e4
 8008558:	200010e6 	.word	0x200010e6
 800855c:	200010c5 	.word	0x200010c5
 8008560:	200010c6 	.word	0x200010c6
 8008564:	20000000 	.word	0x20000000
 8008568:	20000001 	.word	0x20000001
 800856c:	200010c7 	.word	0x200010c7
 8008570:	200010e9 	.word	0x200010e9
 8008574:	20000ff0 	.word	0x20000ff0
 8008578:	0800dda0 	.word	0x0800dda0

0800857c <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008582:	4a13      	ldr	r2, [pc, #76]	@ (80085d0 <convertAndSendData+0x54>)
 8008584:	2101      	movs	r1, #1
 8008586:	2001      	movs	r0, #1
 8008588:	f000 fa16 	bl	80089b8 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 800858c:	4a11      	ldr	r2, [pc, #68]	@ (80085d4 <convertAndSendData+0x58>)
 800858e:	2101      	movs	r1, #1
 8008590:	2002      	movs	r0, #2
 8008592:	f000 fa11 	bl	80089b8 <lcd_print>

	for(int i=0; i<2; i++) {
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	e00c      	b.n	80085b6 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 800859c:	f7ff fed0 	bl	8008340 <mergeData>
 80085a0:	4603      	mov	r3, r0
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <convertAndSendData+0x5c>)
 80085a6:	4a0d      	ldr	r2, [pc, #52]	@ (80085dc <convertAndSendData+0x60>)
 80085a8:	490d      	ldr	r1, [pc, #52]	@ (80085e0 <convertAndSendData+0x64>)
 80085aa:	480e      	ldr	r0, [pc, #56]	@ (80085e4 <convertAndSendData+0x68>)
 80085ac:	f7f8 f94a 	bl	8000844 <sendMachineData>
	for(int i=0; i<2; i++) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3301      	adds	r3, #1
 80085b4:	607b      	str	r3, [r7, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	ddef      	ble.n	800859c <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 80085bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80085c0:	f000 ff54 	bl	800946c <HAL_Delay>
	lcd_clear();
 80085c4:	f000 fa24 	bl	8008a10 <lcd_clear>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	200017a0 	.word	0x200017a0
 80085d4:	200017b4 	.word	0x200017b4
 80085d8:	20001088 	.word	0x20001088
 80085dc:	20001074 	.word	0x20001074
 80085e0:	20001068 	.word	0x20001068
 80085e4:	200019e0 	.word	0x200019e0

080085e8 <iotSetup>:

void iotSetup() {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80085ec:	4b10      	ldr	r3, [pc, #64]	@ (8008630 <iotSetup+0x48>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d016      	beq.n	8008622 <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 80085f4:	f000 f822 	bl	800863c <checkEEPROM4ID>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d001      	beq.n	8008602 <iotSetup+0x1a>
			takeMachineID();
 80085fe:	f7ff f977 	bl	80078f0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008602:	480c      	ldr	r0, [pc, #48]	@ (8008634 <iotSetup+0x4c>)
 8008604:	f7f7 fe0e 	bl	8000224 <strlen>
 8008608:	4603      	mov	r3, r0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d801      	bhi.n	8008612 <iotSetup+0x2a>
			takeWifiSSID();
 800860e:	f7ff fb5f 	bl	8007cd0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008612:	4809      	ldr	r0, [pc, #36]	@ (8008638 <iotSetup+0x50>)
 8008614:	f7f7 fe06 	bl	8000224 <strlen>
 8008618:	4603      	mov	r3, r0
 800861a:	2b01      	cmp	r3, #1
 800861c:	d801      	bhi.n	8008622 <iotSetup+0x3a>
			takeWifiPass();
 800861e:	f7ff fd31 	bl	8008084 <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 8008622:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008626:	f000 ff21 	bl	800946c <HAL_Delay>
	//convertAndSendData();
}
 800862a:	bf00      	nop
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200010e7 	.word	0x200010e7
 8008634:	20001074 	.word	0x20001074
 8008638:	20001088 	.word	0x20001088

0800863c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008642:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <checkEEPROM4ID+0x44>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008648:	2301      	movs	r3, #1
 800864a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 800864c:	2300      	movs	r3, #0
 800864e:	607b      	str	r3, [r7, #4]
 8008650:	e00d      	b.n	800866e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008652:	4a0c      	ldr	r2, [pc, #48]	@ (8008684 <checkEEPROM4ID+0x48>)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <checkEEPROM4ID+0x26>
			returnVal = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3301      	adds	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3301      	adds	r3, #1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b0b      	cmp	r3, #11
 8008672:	ddee      	ble.n	8008652 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008674:	68bb      	ldr	r3, [r7, #8]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr
 8008680:	20000004 	.word	0x20000004
 8008684:	20000ff0 	.word	0x20000ff0

08008688 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af02      	add	r7, sp, #8
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	f023 030f 	bic.w	r3, r3, #15
 8008698:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80086a0:	7b7b      	ldrb	r3, [r7, #13]
 80086a2:	f043 030c 	orr.w	r3, r3, #12
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80086aa:	7b7b      	ldrb	r3, [r7, #13]
 80086ac:	f043 0308 	orr.w	r3, r3, #8
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80086b4:	7b3b      	ldrb	r3, [r7, #12]
 80086b6:	f043 030c 	orr.w	r3, r3, #12
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80086be:	7b3b      	ldrb	r3, [r7, #12]
 80086c0:	f043 0308 	orr.w	r3, r3, #8
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086c8:	bf00      	nop
 80086ca:	4825      	ldr	r0, [pc, #148]	@ (8008760 <lcd_send_cmd+0xd8>)
 80086cc:	f002 fac7 	bl	800ac5e <HAL_I2C_GetError>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d0f9      	beq.n	80086ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086d6:	bf00      	nop
 80086d8:	4821      	ldr	r0, [pc, #132]	@ (8008760 <lcd_send_cmd+0xd8>)
 80086da:	f002 fab3 	bl	800ac44 <HAL_I2C_GetState>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d1f9      	bne.n	80086d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80086e4:	4b1f      	ldr	r3, [pc, #124]	@ (8008764 <lcd_send_cmd+0xdc>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d116      	bne.n	800871a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	e00f      	b.n	8008712 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	3310      	adds	r3, #16
 80086f6:	443b      	add	r3, r7
 80086f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	f022 0208 	bic.w	r2, r2, #8
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	3310      	adds	r3, #16
 8008706:	443b      	add	r3, r7
 8008708:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	3301      	adds	r3, #1
 8008710:	73fb      	strb	r3, [r7, #15]
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d9ec      	bls.n	80086f2 <lcd_send_cmd+0x6a>
 8008718:	e015      	b.n	8008746 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800871a:	2300      	movs	r3, #0
 800871c:	73bb      	strb	r3, [r7, #14]
 800871e:	e00f      	b.n	8008740 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	3310      	adds	r3, #16
 8008724:	443b      	add	r3, r7
 8008726:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	f042 0208 	orr.w	r2, r2, #8
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	3310      	adds	r3, #16
 8008734:	443b      	add	r3, r7
 8008736:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	3301      	adds	r3, #1
 800873e:	73bb      	strb	r3, [r7, #14]
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d9ec      	bls.n	8008720 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008746:	f107 0208 	add.w	r2, r7, #8
 800874a:	2364      	movs	r3, #100	@ 0x64
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	2304      	movs	r3, #4
 8008750:	214e      	movs	r1, #78	@ 0x4e
 8008752:	4803      	ldr	r0, [pc, #12]	@ (8008760 <lcd_send_cmd+0xd8>)
 8008754:	f001 fe16 	bl	800a384 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20001944 	.word	0x20001944
 8008764:	20001919 	.word	0x20001919

08008768 <lcd_send_data>:

void lcd_send_data (char data) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af02      	add	r7, sp, #8
 800876e:	4603      	mov	r3, r0
 8008770:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	f023 030f 	bic.w	r3, r3, #15
 8008778:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008780:	7b7b      	ldrb	r3, [r7, #13]
 8008782:	f043 030d 	orr.w	r3, r3, #13
 8008786:	b2db      	uxtb	r3, r3
 8008788:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800878a:	7b7b      	ldrb	r3, [r7, #13]
 800878c:	f043 0309 	orr.w	r3, r3, #9
 8008790:	b2db      	uxtb	r3, r3
 8008792:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008794:	7b3b      	ldrb	r3, [r7, #12]
 8008796:	f043 030d 	orr.w	r3, r3, #13
 800879a:	b2db      	uxtb	r3, r3
 800879c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800879e:	7b3b      	ldrb	r3, [r7, #12]
 80087a0:	f043 0309 	orr.w	r3, r3, #9
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80087a8:	bf00      	nop
 80087aa:	4825      	ldr	r0, [pc, #148]	@ (8008840 <lcd_send_data+0xd8>)
 80087ac:	f002 fa57 	bl	800ac5e <HAL_I2C_GetError>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d0f9      	beq.n	80087aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80087b6:	bf00      	nop
 80087b8:	4821      	ldr	r0, [pc, #132]	@ (8008840 <lcd_send_data+0xd8>)
 80087ba:	f002 fa43 	bl	800ac44 <HAL_I2C_GetState>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d1f9      	bne.n	80087b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80087c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008844 <lcd_send_data+0xdc>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d116      	bne.n	80087fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
 80087d0:	e00f      	b.n	80087f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3310      	adds	r3, #16
 80087d6:	443b      	add	r3, r7
 80087d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	f022 0208 	bic.w	r2, r2, #8
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	3310      	adds	r3, #16
 80087e6:	443b      	add	r3, r7
 80087e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	3301      	adds	r3, #1
 80087f0:	73fb      	strb	r3, [r7, #15]
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d9ec      	bls.n	80087d2 <lcd_send_data+0x6a>
 80087f8:	e015      	b.n	8008826 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80087fa:	2300      	movs	r3, #0
 80087fc:	73bb      	strb	r3, [r7, #14]
 80087fe:	e00f      	b.n	8008820 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	3310      	adds	r3, #16
 8008804:	443b      	add	r3, r7
 8008806:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	f042 0208 	orr.w	r2, r2, #8
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	3310      	adds	r3, #16
 8008814:	443b      	add	r3, r7
 8008816:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	3301      	adds	r3, #1
 800881e:	73bb      	strb	r3, [r7, #14]
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d9ec      	bls.n	8008800 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008826:	f107 0208 	add.w	r2, r7, #8
 800882a:	2364      	movs	r3, #100	@ 0x64
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2304      	movs	r3, #4
 8008830:	214e      	movs	r1, #78	@ 0x4e
 8008832:	4803      	ldr	r0, [pc, #12]	@ (8008840 <lcd_send_data+0xd8>)
 8008834:	f001 fda6 	bl	800a384 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20001944 	.word	0x20001944
 8008844:	20001919 	.word	0x20001919

08008848 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008850:	e006      	b.n	8008860 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff ff84 	bl	8008768 <lcd_send_data>
	while (*str) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f4      	bne.n	8008852 <lcd_send_string+0xa>
	}
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af02      	add	r7, sp, #8
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	f023 030f 	bic.w	r3, r3, #15
 8008884:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800888c:	7b7b      	ldrb	r3, [r7, #13]
 800888e:	f043 030d 	orr.w	r3, r3, #13
 8008892:	b2db      	uxtb	r3, r3
 8008894:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008896:	7b7b      	ldrb	r3, [r7, #13]
 8008898:	f043 0309 	orr.w	r3, r3, #9
 800889c:	b2db      	uxtb	r3, r3
 800889e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80088a0:	7b3b      	ldrb	r3, [r7, #12]
 80088a2:	f043 030d 	orr.w	r3, r3, #13
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80088aa:	7b3b      	ldrb	r3, [r7, #12]
 80088ac:	f043 0309 	orr.w	r3, r3, #9
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80088b4:	bf00      	nop
 80088b6:	4825      	ldr	r0, [pc, #148]	@ (800894c <lcd_send_char+0xd8>)
 80088b8:	f002 f9d1 	bl	800ac5e <HAL_I2C_GetError>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d0f9      	beq.n	80088b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80088c2:	bf00      	nop
 80088c4:	4821      	ldr	r0, [pc, #132]	@ (800894c <lcd_send_char+0xd8>)
 80088c6:	f002 f9bd 	bl	800ac44 <HAL_I2C_GetState>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d1f9      	bne.n	80088c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80088d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008950 <lcd_send_char+0xdc>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d116      	bne.n	8008906 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
 80088dc:	e00f      	b.n	80088fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	3310      	adds	r3, #16
 80088e2:	443b      	add	r3, r7
 80088e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	f022 0208 	bic.w	r2, r2, #8
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	3310      	adds	r3, #16
 80088f2:	443b      	add	r3, r7
 80088f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	3301      	adds	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b03      	cmp	r3, #3
 8008902:	d9ec      	bls.n	80088de <lcd_send_char+0x6a>
 8008904:	e015      	b.n	8008932 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008906:	2300      	movs	r3, #0
 8008908:	73bb      	strb	r3, [r7, #14]
 800890a:	e00f      	b.n	800892c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	3310      	adds	r3, #16
 8008910:	443b      	add	r3, r7
 8008912:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	f042 0208 	orr.w	r2, r2, #8
 800891c:	b2d2      	uxtb	r2, r2
 800891e:	3310      	adds	r3, #16
 8008920:	443b      	add	r3, r7
 8008922:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	3301      	adds	r3, #1
 800892a:	73bb      	strb	r3, [r7, #14]
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d9ec      	bls.n	800890c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008932:	f107 0208 	add.w	r2, r7, #8
 8008936:	2364      	movs	r3, #100	@ 0x64
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	2304      	movs	r3, #4
 800893c:	214e      	movs	r1, #78	@ 0x4e
 800893e:	4803      	ldr	r0, [pc, #12]	@ (800894c <lcd_send_char+0xd8>)
 8008940:	f001 fd20 	bl	800a384 <HAL_I2C_Master_Transmit>
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20001944 	.word	0x20001944
 8008950:	20001919 	.word	0x20001919

08008954 <lcd_init>:

void lcd_init (void) {
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008958:	2002      	movs	r0, #2
 800895a:	f7ff fe95 	bl	8008688 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800895e:	2028      	movs	r0, #40	@ 0x28
 8008960:	f7ff fe92 	bl	8008688 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008964:	200c      	movs	r0, #12
 8008966:	f7ff fe8f 	bl	8008688 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800896a:	2080      	movs	r0, #128	@ 0x80
 800896c:	f7ff fe8c 	bl	8008688 <lcd_send_cmd>
	lcd_backlight(1);
 8008970:	2001      	movs	r0, #1
 8008972:	f000 f86d 	bl	8008a50 <lcd_backlight>
}
 8008976:	bf00      	nop
 8008978:	bd80      	pop	{r7, pc}

0800897a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	4603      	mov	r3, r0
 8008982:	460a      	mov	r2, r1
 8008984:	71fb      	strb	r3, [r7, #7]
 8008986:	4613      	mov	r3, r2
 8008988:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d106      	bne.n	800899e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008990:	79bb      	ldrb	r3, [r7, #6]
 8008992:	337f      	adds	r3, #127	@ 0x7f
 8008994:	b2db      	uxtb	r3, r3
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff fe76 	bl	8008688 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800899c:	e008      	b.n	80089b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d105      	bne.n	80089b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80089a4:	79bb      	ldrb	r3, [r7, #6]
 80089a6:	3b41      	subs	r3, #65	@ 0x41
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff fe6c 	bl	8008688 <lcd_send_cmd>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	603a      	str	r2, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
 80089c4:	460b      	mov	r3, r1
 80089c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80089c8:	79ba      	ldrb	r2, [r7, #6]
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff ffd3 	bl	800897a <lcd_gotoxy>
	lcd_send_string(str);
 80089d4:	6838      	ldr	r0, [r7, #0]
 80089d6:	f7ff ff37 	bl	8008848 <lcd_send_string>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	4603      	mov	r3, r0
 80089ea:	71fb      	strb	r3, [r7, #7]
 80089ec:	460b      	mov	r3, r1
 80089ee:	71bb      	strb	r3, [r7, #6]
 80089f0:	4613      	mov	r3, r2
 80089f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80089f4:	79ba      	ldrb	r2, [r7, #6]
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff ffbd 	bl	800897a <lcd_gotoxy>
    lcd_send_char(ch);
 8008a00:	797b      	ldrb	r3, [r7, #5]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff ff36 	bl	8008874 <lcd_send_char>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <lcd_clear>:

void lcd_clear(void) {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008a14:	2001      	movs	r0, #1
 8008a16:	f7ff fe37 	bl	8008688 <lcd_send_cmd>
    HAL_Delay(2);
 8008a1a:	2002      	movs	r0, #2
 8008a1c:	f000 fd26 	bl	800946c <HAL_Delay>
}
 8008a20:	bf00      	nop
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	71fb      	strb	r3, [r7, #7]
 8008a30:	4613      	mov	r3, r2
 8008a32:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008a34:	79ba      	ldrb	r2, [r7, #6]
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff ff9d 	bl	800897a <lcd_gotoxy>

    lcd_send_char(' ');
 8008a40:	2020      	movs	r0, #32
 8008a42:	f7ff ff17 	bl	8008874 <lcd_send_char>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008a5a:	4a05      	ldr	r2, [pc, #20]	@ (8008a70 <lcd_backlight+0x20>)
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008a60:	2000      	movs	r0, #0
 8008a62:	f7ff fe11 	bl	8008688 <lcd_send_cmd>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20001919 	.word	0x20001919

08008a74 <lcd_cursor>:

void lcd_cursor(int state) {
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d106      	bne.n	8008a90 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008a82:	200e      	movs	r0, #14
 8008a84:	f7ff fe00 	bl	8008688 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008a88:	200f      	movs	r0, #15
 8008a8a:	f7ff fdfd 	bl	8008688 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008a8e:	e002      	b.n	8008a96 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008a90:	200c      	movs	r0, #12
 8008a92:	f7ff fdf9 	bl	8008688 <lcd_send_cmd>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008aa8:	4b04      	ldr	r3, [pc, #16]	@ (8008abc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4a03      	ldr	r2, [pc, #12]	@ (8008abc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008ab0:	6013      	str	r3, [r2, #0]
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr
 8008abc:	200010a0 	.word	0x200010a0

08008ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008ac4:	f000 fc70 	bl	80093a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008ac8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008acc:	f000 fcce 	bl	800946c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008ad0:	f000 f89c 	bl	8008c0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008ad4:	f000 f9be 	bl	8008e54 <MX_GPIO_Init>
  MX_CAN_Init();
 8008ad8:	f000 f8de 	bl	8008c98 <MX_CAN_Init>
  MX_I2C1_Init();
 8008adc:	f000 f910 	bl	8008d00 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008ae0:	f000 f93c 	bl	8008d5c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008ae4:	f000 f98c 	bl	8008e00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008ae8:	2201      	movs	r2, #1
 8008aea:	2140      	movs	r1, #64	@ 0x40
 8008aec:	483e      	ldr	r0, [pc, #248]	@ (8008be8 <main+0x128>)
 8008aee:	f001 faa4 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008af2:	2201      	movs	r2, #1
 8008af4:	2180      	movs	r1, #128	@ 0x80
 8008af6:	483c      	ldr	r0, [pc, #240]	@ (8008be8 <main+0x128>)
 8008af8:	f001 fa9f 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008afc:	200a      	movs	r0, #10
 8008afe:	f000 fcb5 	bl	800946c <HAL_Delay>
  lcd_init();
 8008b02:	f7ff ff27 	bl	8008954 <lcd_init>
  HAL_Delay(10);
 8008b06:	200a      	movs	r0, #10
 8008b08:	f000 fcb0 	bl	800946c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008b0c:	4837      	ldr	r0, [pc, #220]	@ (8008bec <main+0x12c>)
 8008b0e:	f003 f947 	bl	800bda0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008b12:	bf00      	nop
 8008b14:	4836      	ldr	r0, [pc, #216]	@ (8008bf0 <main+0x130>)
 8008b16:	f002 f8a2 	bl	800ac5e <HAL_I2C_GetError>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d0f9      	beq.n	8008b14 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008b20:	bf00      	nop
 8008b22:	4833      	ldr	r0, [pc, #204]	@ (8008bf0 <main+0x130>)
 8008b24:	f002 f88e 	bl	800ac44 <HAL_I2C_GetState>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d1f9      	bne.n	8008b22 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008b34:	482c      	ldr	r0, [pc, #176]	@ (8008be8 <main+0x128>)
 8008b36:	f001 fa80 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008b40:	4829      	ldr	r0, [pc, #164]	@ (8008be8 <main+0x128>)
 8008b42:	f001 fa7a 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008b46:	2200      	movs	r2, #0
 8008b48:	2104      	movs	r1, #4
 8008b4a:	4827      	ldr	r0, [pc, #156]	@ (8008be8 <main+0x128>)
 8008b4c:	f001 fa75 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008b50:	2200      	movs	r2, #0
 8008b52:	2102      	movs	r1, #2
 8008b54:	4824      	ldr	r0, [pc, #144]	@ (8008be8 <main+0x128>)
 8008b56:	f001 fa70 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4822      	ldr	r0, [pc, #136]	@ (8008be8 <main+0x128>)
 8008b60:	f001 fa6b 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008b64:	2200      	movs	r2, #0
 8008b66:	2120      	movs	r1, #32
 8008b68:	4822      	ldr	r0, [pc, #136]	@ (8008bf4 <main+0x134>)
 8008b6a:	f001 fa66 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2110      	movs	r1, #16
 8008b72:	4820      	ldr	r0, [pc, #128]	@ (8008bf4 <main+0x134>)
 8008b74:	f001 fa61 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2180      	movs	r1, #128	@ 0x80
 8008b7c:	481e      	ldr	r0, [pc, #120]	@ (8008bf8 <main+0x138>)
 8008b7e:	f001 fa5c 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008b82:	2200      	movs	r2, #0
 8008b84:	2140      	movs	r1, #64	@ 0x40
 8008b86:	481c      	ldr	r0, [pc, #112]	@ (8008bf8 <main+0x138>)
 8008b88:	f001 fa57 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2120      	movs	r1, #32
 8008b90:	4819      	ldr	r0, [pc, #100]	@ (8008bf8 <main+0x138>)
 8008b92:	f001 fa52 	bl	800a03a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008b96:	2200      	movs	r2, #0
 8008b98:	2110      	movs	r1, #16
 8008b9a:	4817      	ldr	r0, [pc, #92]	@ (8008bf8 <main+0x138>)
 8008b9c:	f001 fa4d 	bl	800a03a <HAL_GPIO_WritePin>

  i2cTest();
 8008ba0:	f7f7 fff4 	bl	8000b8c <i2cTest>
  HAL_Delay(100);
 8008ba4:	2064      	movs	r0, #100	@ 0x64
 8008ba6:	f000 fc61 	bl	800946c <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008baa:	4a14      	ldr	r2, [pc, #80]	@ (8008bfc <main+0x13c>)
 8008bac:	2101      	movs	r1, #1
 8008bae:	2001      	movs	r0, #1
 8008bb0:	f7ff ff02 	bl	80089b8 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008bb4:	4a12      	ldr	r2, [pc, #72]	@ (8008c00 <main+0x140>)
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	2002      	movs	r0, #2
 8008bba:	f7ff fefd 	bl	80089b8 <lcd_print>
  HAL_Delay(1000);
 8008bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008bc2:	f000 fc53 	bl	800946c <HAL_Delay>
  lcd_clear();
 8008bc6:	f7ff ff23 	bl	8008a10 <lcd_clear>

  eepromKontrol();
 8008bca:	f7f7 fb33 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008bce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bd2:	f000 fc4b 	bl	800946c <HAL_Delay>

  backLightTimer = millis;
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <main+0x144>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a0b      	ldr	r2, [pc, #44]	@ (8008c08 <main+0x148>)
 8008bdc:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008bde:	f7ff fd03 	bl	80085e8 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008be2:	f7fd f86b 	bl	8005cbc <mainLoop>
 8008be6:	e7fc      	b.n	8008be2 <main+0x122>
 8008be8:	40010c00 	.word	0x40010c00
 8008bec:	20001998 	.word	0x20001998
 8008bf0:	20001944 	.word	0x20001944
 8008bf4:	40011000 	.word	0x40011000
 8008bf8:	40010800 	.word	0x40010800
 8008bfc:	200000a0 	.word	0x200000a0
 8008c00:	200000b4 	.word	0x200000b4
 8008c04:	200010a0 	.word	0x200010a0
 8008c08:	200010bc 	.word	0x200010bc

08008c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b090      	sub	sp, #64	@ 0x40
 8008c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c12:	f107 0318 	add.w	r3, r7, #24
 8008c16:	2228      	movs	r2, #40	@ 0x28
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f004 fb5e 	bl	800d2dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c20:	1d3b      	adds	r3, r7, #4
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	609a      	str	r2, [r3, #8]
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008c36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c40:	2302      	movs	r3, #2
 8008c42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008c48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008c4a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f002 fc43 	bl	800b4e0 <HAL_RCC_OscConfig>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008c60:	f000 f9a2 	bl	8008fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c64:	230f      	movs	r3, #15
 8008c66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f002 feb0 	bl	800b9e4 <HAL_RCC_ClockConfig>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008c8a:	f000 f98d 	bl	8008fa8 <Error_Handler>
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3740      	adds	r7, #64	@ 0x40
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008c9c:	4b16      	ldr	r3, [pc, #88]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008c9e:	4a17      	ldr	r2, [pc, #92]	@ (8008cfc <MX_CAN_Init+0x64>)
 8008ca0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008ca2:	4b15      	ldr	r3, [pc, #84]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008ca8:	4b13      	ldr	r3, [pc, #76]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008cae:	4b12      	ldr	r3, [pc, #72]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008cb4:	4b10      	ldr	r3, [pc, #64]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008cba:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008cd2:	4b09      	ldr	r3, [pc, #36]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008cd8:	4b07      	ldr	r3, [pc, #28]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008cde:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008ce4:	4804      	ldr	r0, [pc, #16]	@ (8008cf8 <MX_CAN_Init+0x60>)
 8008ce6:	f000 fbe5 	bl	80094b4 <HAL_CAN_Init>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008cf0:	f000 f95a 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	2000191c 	.word	0x2000191c
 8008cfc:	40006400 	.word	0x40006400

08008d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008d04:	4b12      	ldr	r3, [pc, #72]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d06:	4a13      	ldr	r2, [pc, #76]	@ (8008d54 <MX_I2C1_Init+0x54>)
 8008d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008d0a:	4b11      	ldr	r3, [pc, #68]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d0c:	4a12      	ldr	r2, [pc, #72]	@ (8008d58 <MX_I2C1_Init+0x58>)
 8008d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008d10:	4b0f      	ldr	r3, [pc, #60]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008d16:	4b0e      	ldr	r3, [pc, #56]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008d24:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008d2a:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008d30:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008d36:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008d3c:	4804      	ldr	r0, [pc, #16]	@ (8008d50 <MX_I2C1_Init+0x50>)
 8008d3e:	f001 f9ad 	bl	800a09c <HAL_I2C_Init>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008d48:	f000 f92e 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008d4c:	bf00      	nop
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20001944 	.word	0x20001944
 8008d54:	40005400 	.word	0x40005400
 8008d58:	00061a80 	.word	0x00061a80

08008d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	609a      	str	r2, [r3, #8]
 8008d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d70:	463b      	mov	r3, r7
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d78:	4b1f      	ldr	r3, [pc, #124]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008d7a:	4a20      	ldr	r2, [pc, #128]	@ (8008dfc <MX_TIM1_Init+0xa0>)
 8008d7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008d80:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008d84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d86:	4b1c      	ldr	r3, [pc, #112]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008d8e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008d92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d94:	4b18      	ldr	r3, [pc, #96]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d9a:	4b17      	ldr	r3, [pc, #92]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008da0:	4b15      	ldr	r3, [pc, #84]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008da6:	4814      	ldr	r0, [pc, #80]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008da8:	f002 ffaa 	bl	800bd00 <HAL_TIM_Base_Init>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008db2:	f000 f8f9 	bl	8008fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	480d      	ldr	r0, [pc, #52]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008dc4:	f003 f954 	bl	800c070 <HAL_TIM_ConfigClockSource>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008dce:	f000 f8eb 	bl	8008fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008dda:	463b      	mov	r3, r7
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4806      	ldr	r0, [pc, #24]	@ (8008df8 <MX_TIM1_Init+0x9c>)
 8008de0:	f003 fb42 	bl	800c468 <HAL_TIMEx_MasterConfigSynchronization>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008dea:	f000 f8dd 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20001998 	.word	0x20001998
 8008dfc:	40012c00 	.word	0x40012c00

08008e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008e04:	4b11      	ldr	r3, [pc, #68]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e06:	4a12      	ldr	r2, [pc, #72]	@ (8008e50 <MX_USART1_UART_Init+0x50>)
 8008e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008e0a:	4b10      	ldr	r3, [pc, #64]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e12:	4b0e      	ldr	r3, [pc, #56]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e24:	4b09      	ldr	r3, [pc, #36]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e26:	220c      	movs	r2, #12
 8008e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e2a:	4b08      	ldr	r3, [pc, #32]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e30:	4b06      	ldr	r3, [pc, #24]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e36:	4805      	ldr	r0, [pc, #20]	@ (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e38:	f003 fb94 	bl	800c564 <HAL_UART_Init>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008e42:	f000 f8b1 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200019e0 	.word	0x200019e0
 8008e50:	40013800 	.word	0x40013800

08008e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	605a      	str	r2, [r3, #4]
 8008e64:	609a      	str	r2, [r3, #8]
 8008e66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e68:	4b4b      	ldr	r3, [pc, #300]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e6e:	f043 0310 	orr.w	r3, r3, #16
 8008e72:	6193      	str	r3, [r2, #24]
 8008e74:	4b48      	ldr	r3, [pc, #288]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e80:	4b45      	ldr	r3, [pc, #276]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	4a44      	ldr	r2, [pc, #272]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e86:	f043 0320 	orr.w	r3, r3, #32
 8008e8a:	6193      	str	r3, [r2, #24]
 8008e8c:	4b42      	ldr	r3, [pc, #264]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e98:	4b3f      	ldr	r3, [pc, #252]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008e9e:	f043 0304 	orr.w	r3, r3, #4
 8008ea2:	6193      	str	r3, [r2, #24]
 8008ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	607b      	str	r3, [r7, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008eb0:	4b39      	ldr	r3, [pc, #228]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	4a38      	ldr	r2, [pc, #224]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008eb6:	f043 0308 	orr.w	r3, r3, #8
 8008eba:	6193      	str	r3, [r2, #24]
 8008ebc:	4b36      	ldr	r3, [pc, #216]	@ (8008f98 <MX_GPIO_Init+0x144>)
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	21f0      	movs	r1, #240	@ 0xf0
 8008ecc:	4833      	ldr	r0, [pc, #204]	@ (8008f9c <MX_GPIO_Init+0x148>)
 8008ece:	f001 f8b4 	bl	800a03a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008ed8:	4831      	ldr	r0, [pc, #196]	@ (8008fa0 <MX_GPIO_Init+0x14c>)
 8008eda:	f001 f8ae 	bl	800a03a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008ee4:	482f      	ldr	r0, [pc, #188]	@ (8008fa4 <MX_GPIO_Init+0x150>)
 8008ee6:	f001 f8a8 	bl	800a03a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008eea:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008eee:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	4619      	mov	r1, r3
 8008efe:	4828      	ldr	r0, [pc, #160]	@ (8008fa0 <MX_GPIO_Init+0x14c>)
 8008f00:	f000 fe24 	bl	8009b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008f04:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008f08:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f12:	f107 0310 	add.w	r3, r7, #16
 8008f16:	4619      	mov	r1, r3
 8008f18:	4820      	ldr	r0, [pc, #128]	@ (8008f9c <MX_GPIO_Init+0x148>)
 8008f1a:	f000 fe17 	bl	8009b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008f1e:	23f0      	movs	r3, #240	@ 0xf0
 8008f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f22:	2301      	movs	r3, #1
 8008f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	4619      	mov	r1, r3
 8008f34:	4819      	ldr	r0, [pc, #100]	@ (8008f9c <MX_GPIO_Init+0x148>)
 8008f36:	f000 fe09 	bl	8009b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008f3a:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f4c:	f107 0310 	add.w	r3, r7, #16
 8008f50:	4619      	mov	r1, r3
 8008f52:	4813      	ldr	r0, [pc, #76]	@ (8008fa0 <MX_GPIO_Init+0x14c>)
 8008f54:	f000 fdfa 	bl	8009b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008f58:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008f5c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f66:	2302      	movs	r3, #2
 8008f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4619      	mov	r1, r3
 8008f70:	480c      	ldr	r0, [pc, #48]	@ (8008fa4 <MX_GPIO_Init+0x150>)
 8008f72:	f000 fdeb 	bl	8009b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008f76:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4806      	ldr	r0, [pc, #24]	@ (8008fa4 <MX_GPIO_Init+0x150>)
 8008f8c:	f000 fdde 	bl	8009b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008f90:	bf00      	nop
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	40010800 	.word	0x40010800
 8008fa0:	40011000 	.word	0x40011000
 8008fa4:	40010c00 	.word	0x40010c00

08008fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008fac:	bf00      	nop
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008fba:	4b15      	ldr	r3, [pc, #84]	@ (8009010 <HAL_MspInit+0x5c>)
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	4a14      	ldr	r2, [pc, #80]	@ (8009010 <HAL_MspInit+0x5c>)
 8008fc0:	f043 0301 	orr.w	r3, r3, #1
 8008fc4:	6193      	str	r3, [r2, #24]
 8008fc6:	4b12      	ldr	r3, [pc, #72]	@ (8009010 <HAL_MspInit+0x5c>)
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	60bb      	str	r3, [r7, #8]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8009010 <HAL_MspInit+0x5c>)
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8009010 <HAL_MspInit+0x5c>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fdc:	61d3      	str	r3, [r2, #28]
 8008fde:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <HAL_MspInit+0x5c>)
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008fea:	4b0a      	ldr	r3, [pc, #40]	@ (8009014 <HAL_MspInit+0x60>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	4a04      	ldr	r2, [pc, #16]	@ (8009014 <HAL_MspInit+0x60>)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr
 8009010:	40021000 	.word	0x40021000
 8009014:	40010000 	.word	0x40010000

08009018 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1c      	ldr	r2, [pc, #112]	@ (80090a4 <HAL_CAN_MspInit+0x8c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d131      	bne.n	800909c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009038:	4b1b      	ldr	r3, [pc, #108]	@ (80090a8 <HAL_CAN_MspInit+0x90>)
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	4a1a      	ldr	r2, [pc, #104]	@ (80090a8 <HAL_CAN_MspInit+0x90>)
 800903e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009042:	61d3      	str	r3, [r2, #28]
 8009044:	4b18      	ldr	r3, [pc, #96]	@ (80090a8 <HAL_CAN_MspInit+0x90>)
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009050:	4b15      	ldr	r3, [pc, #84]	@ (80090a8 <HAL_CAN_MspInit+0x90>)
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	4a14      	ldr	r2, [pc, #80]	@ (80090a8 <HAL_CAN_MspInit+0x90>)
 8009056:	f043 0304 	orr.w	r3, r3, #4
 800905a:	6193      	str	r3, [r2, #24]
 800905c:	4b12      	ldr	r3, [pc, #72]	@ (80090a8 <HAL_CAN_MspInit+0x90>)
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009068:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800906c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009072:	2300      	movs	r3, #0
 8009074:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009076:	f107 0310 	add.w	r3, r7, #16
 800907a:	4619      	mov	r1, r3
 800907c:	480b      	ldr	r0, [pc, #44]	@ (80090ac <HAL_CAN_MspInit+0x94>)
 800907e:	f000 fd65 	bl	8009b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009088:	2302      	movs	r3, #2
 800908a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800908c:	2303      	movs	r3, #3
 800908e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	4619      	mov	r1, r3
 8009096:	4805      	ldr	r0, [pc, #20]	@ (80090ac <HAL_CAN_MspInit+0x94>)
 8009098:	f000 fd58 	bl	8009b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800909c:	bf00      	nop
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40006400 	.word	0x40006400
 80090a8:	40021000 	.word	0x40021000
 80090ac:	40010800 	.word	0x40010800

080090b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	609a      	str	r2, [r3, #8]
 80090c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a15      	ldr	r2, [pc, #84]	@ (8009120 <HAL_I2C_MspInit+0x70>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d123      	bne.n	8009118 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090d0:	4b14      	ldr	r3, [pc, #80]	@ (8009124 <HAL_I2C_MspInit+0x74>)
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	4a13      	ldr	r2, [pc, #76]	@ (8009124 <HAL_I2C_MspInit+0x74>)
 80090d6:	f043 0308 	orr.w	r3, r3, #8
 80090da:	6193      	str	r3, [r2, #24]
 80090dc:	4b11      	ldr	r3, [pc, #68]	@ (8009124 <HAL_I2C_MspInit+0x74>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80090e8:	23c0      	movs	r3, #192	@ 0xc0
 80090ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80090ec:	2312      	movs	r3, #18
 80090ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090f0:	2303      	movs	r3, #3
 80090f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4619      	mov	r1, r3
 80090fa:	480b      	ldr	r0, [pc, #44]	@ (8009128 <HAL_I2C_MspInit+0x78>)
 80090fc:	f000 fd26 	bl	8009b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009100:	4b08      	ldr	r3, [pc, #32]	@ (8009124 <HAL_I2C_MspInit+0x74>)
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	4a07      	ldr	r2, [pc, #28]	@ (8009124 <HAL_I2C_MspInit+0x74>)
 8009106:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800910a:	61d3      	str	r3, [r2, #28]
 800910c:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <HAL_I2C_MspInit+0x74>)
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009114:	60bb      	str	r3, [r7, #8]
 8009116:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009118:	bf00      	nop
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40005400 	.word	0x40005400
 8009124:	40021000 	.word	0x40021000
 8009128:	40010c00 	.word	0x40010c00

0800912c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a0a      	ldr	r2, [pc, #40]	@ (8009164 <HAL_I2C_MspDeInit+0x38>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d10d      	bne.n	800915a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <HAL_I2C_MspDeInit+0x3c>)
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	4a09      	ldr	r2, [pc, #36]	@ (8009168 <HAL_I2C_MspDeInit+0x3c>)
 8009144:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009148:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800914a:	2140      	movs	r1, #64	@ 0x40
 800914c:	4807      	ldr	r0, [pc, #28]	@ (800916c <HAL_I2C_MspDeInit+0x40>)
 800914e:	f000 fe91 	bl	8009e74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009152:	2180      	movs	r1, #128	@ 0x80
 8009154:	4805      	ldr	r0, [pc, #20]	@ (800916c <HAL_I2C_MspDeInit+0x40>)
 8009156:	f000 fe8d 	bl	8009e74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40005400 	.word	0x40005400
 8009168:	40021000 	.word	0x40021000
 800916c:	40010c00 	.word	0x40010c00

08009170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a0d      	ldr	r2, [pc, #52]	@ (80091b4 <HAL_TIM_Base_MspInit+0x44>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d113      	bne.n	80091aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009182:	4b0d      	ldr	r3, [pc, #52]	@ (80091b8 <HAL_TIM_Base_MspInit+0x48>)
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	4a0c      	ldr	r2, [pc, #48]	@ (80091b8 <HAL_TIM_Base_MspInit+0x48>)
 8009188:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800918c:	6193      	str	r3, [r2, #24]
 800918e:	4b0a      	ldr	r3, [pc, #40]	@ (80091b8 <HAL_TIM_Base_MspInit+0x48>)
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800919a:	2200      	movs	r2, #0
 800919c:	2100      	movs	r1, #0
 800919e:	2019      	movs	r0, #25
 80091a0:	f000 fb5b 	bl	800985a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80091a4:	2019      	movs	r0, #25
 80091a6:	f000 fb74 	bl	8009892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40012c00 	.word	0x40012c00
 80091b8:	40021000 	.word	0x40021000

080091bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c4:	f107 0310 	add.w	r3, r7, #16
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	605a      	str	r2, [r3, #4]
 80091ce:	609a      	str	r2, [r3, #8]
 80091d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a20      	ldr	r2, [pc, #128]	@ (8009258 <HAL_UART_MspInit+0x9c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d139      	bne.n	8009250 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80091dc:	4b1f      	ldr	r3, [pc, #124]	@ (800925c <HAL_UART_MspInit+0xa0>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	4a1e      	ldr	r2, [pc, #120]	@ (800925c <HAL_UART_MspInit+0xa0>)
 80091e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091e6:	6193      	str	r3, [r2, #24]
 80091e8:	4b1c      	ldr	r3, [pc, #112]	@ (800925c <HAL_UART_MspInit+0xa0>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091f4:	4b19      	ldr	r3, [pc, #100]	@ (800925c <HAL_UART_MspInit+0xa0>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	4a18      	ldr	r2, [pc, #96]	@ (800925c <HAL_UART_MspInit+0xa0>)
 80091fa:	f043 0304 	orr.w	r3, r3, #4
 80091fe:	6193      	str	r3, [r2, #24]
 8009200:	4b16      	ldr	r3, [pc, #88]	@ (800925c <HAL_UART_MspInit+0xa0>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800920c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009212:	2302      	movs	r3, #2
 8009214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009216:	2303      	movs	r3, #3
 8009218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	4619      	mov	r1, r3
 8009220:	480f      	ldr	r0, [pc, #60]	@ (8009260 <HAL_UART_MspInit+0xa4>)
 8009222:	f000 fc93 	bl	8009b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800922a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800922c:	2300      	movs	r3, #0
 800922e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	4619      	mov	r1, r3
 800923a:	4809      	ldr	r0, [pc, #36]	@ (8009260 <HAL_UART_MspInit+0xa4>)
 800923c:	f000 fc86 	bl	8009b4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009240:	2200      	movs	r2, #0
 8009242:	2100      	movs	r1, #0
 8009244:	2025      	movs	r0, #37	@ 0x25
 8009246:	f000 fb08 	bl	800985a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800924a:	2025      	movs	r0, #37	@ 0x25
 800924c:	f000 fb21 	bl	8009892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009250:	bf00      	nop
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40013800 	.word	0x40013800
 800925c:	40021000 	.word	0x40021000
 8009260:	40010800 	.word	0x40010800

08009264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <NMI_Handler+0x4>

0800926c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <HardFault_Handler+0x4>

08009274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <MemManage_Handler+0x4>

0800927c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <BusFault_Handler+0x4>

08009284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009288:	bf00      	nop
 800928a:	e7fd      	b.n	8009288 <UsageFault_Handler+0x4>

0800928c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009290:	bf00      	nop
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr

08009298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800929c:	bf00      	nop
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr

080092a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092b4:	f000 f8be 	bl	8009434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092b8:	bf00      	nop
 80092ba:	bd80      	pop	{r7, pc}

080092bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80092c0:	4802      	ldr	r0, [pc, #8]	@ (80092cc <TIM1_UP_IRQHandler+0x10>)
 80092c2:	f002 fdcd 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80092c6:	bf00      	nop
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20001998 	.word	0x20001998

080092d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092d4:	4802      	ldr	r0, [pc, #8]	@ (80092e0 <USART1_IRQHandler+0x10>)
 80092d6:	f003 f9cb 	bl	800c670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092da:	bf00      	nop
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	200019e0 	.word	0x200019e0

080092e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80092ec:	4a14      	ldr	r2, [pc, #80]	@ (8009340 <_sbrk+0x5c>)
 80092ee:	4b15      	ldr	r3, [pc, #84]	@ (8009344 <_sbrk+0x60>)
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80092f8:	4b13      	ldr	r3, [pc, #76]	@ (8009348 <_sbrk+0x64>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d102      	bne.n	8009306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009300:	4b11      	ldr	r3, [pc, #68]	@ (8009348 <_sbrk+0x64>)
 8009302:	4a12      	ldr	r2, [pc, #72]	@ (800934c <_sbrk+0x68>)
 8009304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009306:	4b10      	ldr	r3, [pc, #64]	@ (8009348 <_sbrk+0x64>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	429a      	cmp	r2, r3
 8009312:	d207      	bcs.n	8009324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009314:	f003 fffa 	bl	800d30c <__errno>
 8009318:	4603      	mov	r3, r0
 800931a:	220c      	movs	r2, #12
 800931c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800931e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009322:	e009      	b.n	8009338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009324:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <_sbrk+0x64>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800932a:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <_sbrk+0x64>)
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4413      	add	r3, r2
 8009332:	4a05      	ldr	r2, [pc, #20]	@ (8009348 <_sbrk+0x64>)
 8009334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009336:	68fb      	ldr	r3, [r7, #12]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	2000c000 	.word	0x2000c000
 8009344:	00000400 	.word	0x00000400
 8009348:	20001a28 	.word	0x20001a28
 800934c:	20001b78 	.word	0x20001b78

08009350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009354:	bf00      	nop
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800935c:	480c      	ldr	r0, [pc, #48]	@ (8009390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800935e:	490d      	ldr	r1, [pc, #52]	@ (8009394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009360:	4a0d      	ldr	r2, [pc, #52]	@ (8009398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009364:	e002      	b.n	800936c <LoopCopyDataInit>

08009366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800936a:	3304      	adds	r3, #4

0800936c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800936c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800936e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009370:	d3f9      	bcc.n	8009366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009372:	4a0a      	ldr	r2, [pc, #40]	@ (800939c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009374:	4c0a      	ldr	r4, [pc, #40]	@ (80093a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009378:	e001      	b.n	800937e <LoopFillZerobss>

0800937a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800937a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800937c:	3204      	adds	r2, #4

0800937e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800937e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009380:	d3fb      	bcc.n	800937a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009382:	f7ff ffe5 	bl	8009350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009386:	f003 ffc7 	bl	800d318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800938a:	f7ff fb99 	bl	8008ac0 <main>
  bx lr
 800938e:	4770      	bx	lr
  ldr r0, =_sdata
 8009390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009394:	20000fd4 	.word	0x20000fd4
  ldr r2, =_sidata
 8009398:	0800de38 	.word	0x0800de38
  ldr r2, =_sbss
 800939c:	20000fd4 	.word	0x20000fd4
  ldr r4, =_ebss
 80093a0:	20001b78 	.word	0x20001b78

080093a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80093a4:	e7fe      	b.n	80093a4 <ADC1_2_IRQHandler>
	...

080093a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80093ac:	4b08      	ldr	r3, [pc, #32]	@ (80093d0 <HAL_Init+0x28>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a07      	ldr	r2, [pc, #28]	@ (80093d0 <HAL_Init+0x28>)
 80093b2:	f043 0310 	orr.w	r3, r3, #16
 80093b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093b8:	2003      	movs	r0, #3
 80093ba:	f000 fa43 	bl	8009844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80093be:	200f      	movs	r0, #15
 80093c0:	f000 f808 	bl	80093d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80093c4:	f7ff fdf6 	bl	8008fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	40022000 	.word	0x40022000

080093d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80093dc:	4b12      	ldr	r3, [pc, #72]	@ (8009428 <HAL_InitTick+0x54>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	4b12      	ldr	r3, [pc, #72]	@ (800942c <HAL_InitTick+0x58>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	4619      	mov	r1, r3
 80093e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80093ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80093ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fa5b 	bl	80098ae <HAL_SYSTICK_Config>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e00e      	b.n	8009420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b0f      	cmp	r3, #15
 8009406:	d80a      	bhi.n	800941e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009408:	2200      	movs	r2, #0
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009410:	f000 fa23 	bl	800985a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009414:	4a06      	ldr	r2, [pc, #24]	@ (8009430 <HAL_InitTick+0x5c>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	e000      	b.n	8009420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20000f78 	.word	0x20000f78
 800942c:	20000f80 	.word	0x20000f80
 8009430:	20000f7c 	.word	0x20000f7c

08009434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009438:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <HAL_IncTick+0x1c>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	4b05      	ldr	r3, [pc, #20]	@ (8009454 <HAL_IncTick+0x20>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4413      	add	r3, r2
 8009444:	4a03      	ldr	r2, [pc, #12]	@ (8009454 <HAL_IncTick+0x20>)
 8009446:	6013      	str	r3, [r2, #0]
}
 8009448:	bf00      	nop
 800944a:	46bd      	mov	sp, r7
 800944c:	bc80      	pop	{r7}
 800944e:	4770      	bx	lr
 8009450:	20000f80 	.word	0x20000f80
 8009454:	20001a2c 	.word	0x20001a2c

08009458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  return uwTick;
 800945c:	4b02      	ldr	r3, [pc, #8]	@ (8009468 <HAL_GetTick+0x10>)
 800945e:	681b      	ldr	r3, [r3, #0]
}
 8009460:	4618      	mov	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr
 8009468:	20001a2c 	.word	0x20001a2c

0800946c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009474:	f7ff fff0 	bl	8009458 <HAL_GetTick>
 8009478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009484:	d005      	beq.n	8009492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009486:	4b0a      	ldr	r3, [pc, #40]	@ (80094b0 <HAL_Delay+0x44>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009492:	bf00      	nop
 8009494:	f7ff ffe0 	bl	8009458 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d8f7      	bhi.n	8009494 <HAL_Delay+0x28>
  {
  }
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000f80 	.word	0x20000f80

080094b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e0ed      	b.n	80096a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d102      	bne.n	80094d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fda0 	bl	8009018 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0201 	orr.w	r2, r2, #1
 80094e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094e8:	f7ff ffb6 	bl	8009458 <HAL_GetTick>
 80094ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80094ee:	e012      	b.n	8009516 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80094f0:	f7ff ffb2 	bl	8009458 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	2b0a      	cmp	r3, #10
 80094fc:	d90b      	bls.n	8009516 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2205      	movs	r2, #5
 800950e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e0c5      	b.n	80096a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0e5      	beq.n	80094f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0202 	bic.w	r2, r2, #2
 8009532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009534:	f7ff ff90 	bl	8009458 <HAL_GetTick>
 8009538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800953a:	e012      	b.n	8009562 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800953c:	f7ff ff8c 	bl	8009458 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b0a      	cmp	r3, #10
 8009548:	d90b      	bls.n	8009562 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2205      	movs	r2, #5
 800955a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e09f      	b.n	80096a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e5      	bne.n	800953c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	7e1b      	ldrb	r3, [r3, #24]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d108      	bne.n	800958a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e007      	b.n	800959a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	7e5b      	ldrb	r3, [r3, #25]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d108      	bne.n	80095b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e007      	b.n	80095c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7e9b      	ldrb	r3, [r3, #26]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d108      	bne.n	80095de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0220 	orr.w	r2, r2, #32
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	e007      	b.n	80095ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0220 	bic.w	r2, r2, #32
 80095ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	7edb      	ldrb	r3, [r3, #27]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d108      	bne.n	8009608 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0210 	bic.w	r2, r2, #16
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e007      	b.n	8009618 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0210 	orr.w	r2, r2, #16
 8009616:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7f1b      	ldrb	r3, [r3, #28]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d108      	bne.n	8009632 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0208 	orr.w	r2, r2, #8
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e007      	b.n	8009642 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0208 	bic.w	r2, r2, #8
 8009640:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7f5b      	ldrb	r3, [r3, #29]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d108      	bne.n	800965c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0204 	orr.w	r2, r2, #4
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e007      	b.n	800966c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0204 	bic.w	r2, r2, #4
 800966a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	ea42 0103 	orr.w	r1, r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	1e5a      	subs	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <__NVIC_SetPriorityGrouping>:
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096bc:	4b0c      	ldr	r3, [pc, #48]	@ (80096f0 <__NVIC_SetPriorityGrouping+0x44>)
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80096c8:	4013      	ands	r3, r2
 80096ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80096d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096de:	4a04      	ldr	r2, [pc, #16]	@ (80096f0 <__NVIC_SetPriorityGrouping+0x44>)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	60d3      	str	r3, [r2, #12]
}
 80096e4:	bf00      	nop
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000ed00 	.word	0xe000ed00

080096f4 <__NVIC_GetPriorityGrouping>:
{
 80096f4:	b480      	push	{r7}
 80096f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096f8:	4b04      	ldr	r3, [pc, #16]	@ (800970c <__NVIC_GetPriorityGrouping+0x18>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	f003 0307 	and.w	r3, r3, #7
}
 8009702:	4618      	mov	r0, r3
 8009704:	46bd      	mov	sp, r7
 8009706:	bc80      	pop	{r7}
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	e000ed00 	.word	0xe000ed00

08009710 <__NVIC_EnableIRQ>:
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800971a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800971e:	2b00      	cmp	r3, #0
 8009720:	db0b      	blt.n	800973a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	f003 021f 	and.w	r2, r3, #31
 8009728:	4906      	ldr	r1, [pc, #24]	@ (8009744 <__NVIC_EnableIRQ+0x34>)
 800972a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	2001      	movs	r0, #1
 8009732:	fa00 f202 	lsl.w	r2, r0, r2
 8009736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr
 8009744:	e000e100 	.word	0xe000e100

08009748 <__NVIC_SetPriority>:
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009758:	2b00      	cmp	r3, #0
 800975a:	db0a      	blt.n	8009772 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	b2da      	uxtb	r2, r3
 8009760:	490c      	ldr	r1, [pc, #48]	@ (8009794 <__NVIC_SetPriority+0x4c>)
 8009762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009766:	0112      	lsls	r2, r2, #4
 8009768:	b2d2      	uxtb	r2, r2
 800976a:	440b      	add	r3, r1
 800976c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009770:	e00a      	b.n	8009788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	b2da      	uxtb	r2, r3
 8009776:	4908      	ldr	r1, [pc, #32]	@ (8009798 <__NVIC_SetPriority+0x50>)
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	3b04      	subs	r3, #4
 8009780:	0112      	lsls	r2, r2, #4
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	440b      	add	r3, r1
 8009786:	761a      	strb	r2, [r3, #24]
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	e000e100 	.word	0xe000e100
 8009798:	e000ed00 	.word	0xe000ed00

0800979c <NVIC_EncodePriority>:
{
 800979c:	b480      	push	{r7}
 800979e:	b089      	sub	sp, #36	@ 0x24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	f1c3 0307 	rsb	r3, r3, #7
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	bf28      	it	cs
 80097ba:	2304      	movcs	r3, #4
 80097bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	3304      	adds	r3, #4
 80097c2:	2b06      	cmp	r3, #6
 80097c4:	d902      	bls.n	80097cc <NVIC_EncodePriority+0x30>
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	3b03      	subs	r3, #3
 80097ca:	e000      	b.n	80097ce <NVIC_EncodePriority+0x32>
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	43da      	mvns	r2, r3
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	401a      	ands	r2, r3
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	fa01 f303 	lsl.w	r3, r1, r3
 80097ee:	43d9      	mvns	r1, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097f4:	4313      	orrs	r3, r2
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3724      	adds	r7, #36	@ 0x24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bc80      	pop	{r7}
 80097fe:	4770      	bx	lr

08009800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3b01      	subs	r3, #1
 800980c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009810:	d301      	bcc.n	8009816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009812:	2301      	movs	r3, #1
 8009814:	e00f      	b.n	8009836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009816:	4a0a      	ldr	r2, [pc, #40]	@ (8009840 <SysTick_Config+0x40>)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3b01      	subs	r3, #1
 800981c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800981e:	210f      	movs	r1, #15
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009824:	f7ff ff90 	bl	8009748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009828:	4b05      	ldr	r3, [pc, #20]	@ (8009840 <SysTick_Config+0x40>)
 800982a:	2200      	movs	r2, #0
 800982c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800982e:	4b04      	ldr	r3, [pc, #16]	@ (8009840 <SysTick_Config+0x40>)
 8009830:	2207      	movs	r2, #7
 8009832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	e000e010 	.word	0xe000e010

08009844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ff2d 	bl	80096ac <__NVIC_SetPriorityGrouping>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	4603      	mov	r3, r0
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009868:	2300      	movs	r3, #0
 800986a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800986c:	f7ff ff42 	bl	80096f4 <__NVIC_GetPriorityGrouping>
 8009870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	6978      	ldr	r0, [r7, #20]
 8009878:	f7ff ff90 	bl	800979c <NVIC_EncodePriority>
 800987c:	4602      	mov	r2, r0
 800987e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff ff5f 	bl	8009748 <__NVIC_SetPriority>
}
 800988a:	bf00      	nop
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	4603      	mov	r3, r0
 800989a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800989c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff ff35 	bl	8009710 <__NVIC_EnableIRQ>
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff ffa2 	bl	8009800 <SysTick_Config>
 80098bc:	4603      	mov	r3, r0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d008      	beq.n	80098f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2204      	movs	r2, #4
 80098e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e020      	b.n	8009932 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 020e 	bic.w	r2, r2, #14
 80098fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0201 	bic.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009918:	2101      	movs	r1, #1
 800991a:	fa01 f202 	lsl.w	r2, r1, r2
 800991e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d005      	beq.n	8009960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2204      	movs	r2, #4
 8009958:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	73fb      	strb	r3, [r7, #15]
 800995e:	e0d6      	b.n	8009b0e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 020e 	bic.w	r2, r2, #14
 800996e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0201 	bic.w	r2, r2, #1
 800997e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	4b64      	ldr	r3, [pc, #400]	@ (8009b18 <HAL_DMA_Abort_IT+0x1dc>)
 8009988:	429a      	cmp	r2, r3
 800998a:	d958      	bls.n	8009a3e <HAL_DMA_Abort_IT+0x102>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a62      	ldr	r2, [pc, #392]	@ (8009b1c <HAL_DMA_Abort_IT+0x1e0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d04f      	beq.n	8009a36 <HAL_DMA_Abort_IT+0xfa>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a61      	ldr	r2, [pc, #388]	@ (8009b20 <HAL_DMA_Abort_IT+0x1e4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d048      	beq.n	8009a32 <HAL_DMA_Abort_IT+0xf6>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a5f      	ldr	r2, [pc, #380]	@ (8009b24 <HAL_DMA_Abort_IT+0x1e8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d040      	beq.n	8009a2c <HAL_DMA_Abort_IT+0xf0>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a5e      	ldr	r2, [pc, #376]	@ (8009b28 <HAL_DMA_Abort_IT+0x1ec>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d038      	beq.n	8009a26 <HAL_DMA_Abort_IT+0xea>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a5c      	ldr	r2, [pc, #368]	@ (8009b2c <HAL_DMA_Abort_IT+0x1f0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d030      	beq.n	8009a20 <HAL_DMA_Abort_IT+0xe4>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a5b      	ldr	r2, [pc, #364]	@ (8009b30 <HAL_DMA_Abort_IT+0x1f4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d028      	beq.n	8009a1a <HAL_DMA_Abort_IT+0xde>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a52      	ldr	r2, [pc, #328]	@ (8009b18 <HAL_DMA_Abort_IT+0x1dc>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d020      	beq.n	8009a14 <HAL_DMA_Abort_IT+0xd8>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a57      	ldr	r2, [pc, #348]	@ (8009b34 <HAL_DMA_Abort_IT+0x1f8>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d019      	beq.n	8009a10 <HAL_DMA_Abort_IT+0xd4>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a55      	ldr	r2, [pc, #340]	@ (8009b38 <HAL_DMA_Abort_IT+0x1fc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d012      	beq.n	8009a0c <HAL_DMA_Abort_IT+0xd0>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a54      	ldr	r2, [pc, #336]	@ (8009b3c <HAL_DMA_Abort_IT+0x200>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00a      	beq.n	8009a06 <HAL_DMA_Abort_IT+0xca>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a52      	ldr	r2, [pc, #328]	@ (8009b40 <HAL_DMA_Abort_IT+0x204>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d102      	bne.n	8009a00 <HAL_DMA_Abort_IT+0xc4>
 80099fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099fe:	e01b      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009a04:	e018      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a0a:	e015      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	e013      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a10:	2301      	movs	r3, #1
 8009a12:	e011      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a18:	e00e      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a1a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009a1e:	e00b      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009a24:	e008      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a2a:	e005      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a30:	e002      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a32:	2310      	movs	r3, #16
 8009a34:	e000      	b.n	8009a38 <HAL_DMA_Abort_IT+0xfc>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4a42      	ldr	r2, [pc, #264]	@ (8009b44 <HAL_DMA_Abort_IT+0x208>)
 8009a3a:	6053      	str	r3, [r2, #4]
 8009a3c:	e057      	b.n	8009aee <HAL_DMA_Abort_IT+0x1b2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a36      	ldr	r2, [pc, #216]	@ (8009b1c <HAL_DMA_Abort_IT+0x1e0>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d04f      	beq.n	8009ae8 <HAL_DMA_Abort_IT+0x1ac>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a34      	ldr	r2, [pc, #208]	@ (8009b20 <HAL_DMA_Abort_IT+0x1e4>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d048      	beq.n	8009ae4 <HAL_DMA_Abort_IT+0x1a8>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a33      	ldr	r2, [pc, #204]	@ (8009b24 <HAL_DMA_Abort_IT+0x1e8>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d040      	beq.n	8009ade <HAL_DMA_Abort_IT+0x1a2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a31      	ldr	r2, [pc, #196]	@ (8009b28 <HAL_DMA_Abort_IT+0x1ec>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d038      	beq.n	8009ad8 <HAL_DMA_Abort_IT+0x19c>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a30      	ldr	r2, [pc, #192]	@ (8009b2c <HAL_DMA_Abort_IT+0x1f0>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d030      	beq.n	8009ad2 <HAL_DMA_Abort_IT+0x196>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a2e      	ldr	r2, [pc, #184]	@ (8009b30 <HAL_DMA_Abort_IT+0x1f4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d028      	beq.n	8009acc <HAL_DMA_Abort_IT+0x190>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a26      	ldr	r2, [pc, #152]	@ (8009b18 <HAL_DMA_Abort_IT+0x1dc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d020      	beq.n	8009ac6 <HAL_DMA_Abort_IT+0x18a>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a2a      	ldr	r2, [pc, #168]	@ (8009b34 <HAL_DMA_Abort_IT+0x1f8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d019      	beq.n	8009ac2 <HAL_DMA_Abort_IT+0x186>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a29      	ldr	r2, [pc, #164]	@ (8009b38 <HAL_DMA_Abort_IT+0x1fc>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d012      	beq.n	8009abe <HAL_DMA_Abort_IT+0x182>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a27      	ldr	r2, [pc, #156]	@ (8009b3c <HAL_DMA_Abort_IT+0x200>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00a      	beq.n	8009ab8 <HAL_DMA_Abort_IT+0x17c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a26      	ldr	r2, [pc, #152]	@ (8009b40 <HAL_DMA_Abort_IT+0x204>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d102      	bne.n	8009ab2 <HAL_DMA_Abort_IT+0x176>
 8009aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ab0:	e01b      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ab2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ab6:	e018      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009abc:	e015      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009abe:	2310      	movs	r3, #16
 8009ac0:	e013      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e011      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ac6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009aca:	e00e      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009acc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009ad0:	e00b      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ad6:	e008      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009adc:	e005      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ae2:	e002      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	e000      	b.n	8009aea <HAL_DMA_Abort_IT+0x1ae>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	4a17      	ldr	r2, [pc, #92]	@ (8009b48 <HAL_DMA_Abort_IT+0x20c>)
 8009aec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
    } 
  }
  return status;
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40020080 	.word	0x40020080
 8009b1c:	40020008 	.word	0x40020008
 8009b20:	4002001c 	.word	0x4002001c
 8009b24:	40020030 	.word	0x40020030
 8009b28:	40020044 	.word	0x40020044
 8009b2c:	40020058 	.word	0x40020058
 8009b30:	4002006c 	.word	0x4002006c
 8009b34:	40020408 	.word	0x40020408
 8009b38:	4002041c 	.word	0x4002041c
 8009b3c:	40020430 	.word	0x40020430
 8009b40:	40020444 	.word	0x40020444
 8009b44:	40020400 	.word	0x40020400
 8009b48:	40020000 	.word	0x40020000

08009b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b08b      	sub	sp, #44	@ 0x2c
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b5e:	e179      	b.n	8009e54 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009b60:	2201      	movs	r2, #1
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	4013      	ands	r3, r2
 8009b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	f040 8168 	bne.w	8009e4e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4a96      	ldr	r2, [pc, #600]	@ (8009ddc <HAL_GPIO_Init+0x290>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d05e      	beq.n	8009c46 <HAL_GPIO_Init+0xfa>
 8009b88:	4a94      	ldr	r2, [pc, #592]	@ (8009ddc <HAL_GPIO_Init+0x290>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d875      	bhi.n	8009c7a <HAL_GPIO_Init+0x12e>
 8009b8e:	4a94      	ldr	r2, [pc, #592]	@ (8009de0 <HAL_GPIO_Init+0x294>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d058      	beq.n	8009c46 <HAL_GPIO_Init+0xfa>
 8009b94:	4a92      	ldr	r2, [pc, #584]	@ (8009de0 <HAL_GPIO_Init+0x294>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d86f      	bhi.n	8009c7a <HAL_GPIO_Init+0x12e>
 8009b9a:	4a92      	ldr	r2, [pc, #584]	@ (8009de4 <HAL_GPIO_Init+0x298>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d052      	beq.n	8009c46 <HAL_GPIO_Init+0xfa>
 8009ba0:	4a90      	ldr	r2, [pc, #576]	@ (8009de4 <HAL_GPIO_Init+0x298>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d869      	bhi.n	8009c7a <HAL_GPIO_Init+0x12e>
 8009ba6:	4a90      	ldr	r2, [pc, #576]	@ (8009de8 <HAL_GPIO_Init+0x29c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d04c      	beq.n	8009c46 <HAL_GPIO_Init+0xfa>
 8009bac:	4a8e      	ldr	r2, [pc, #568]	@ (8009de8 <HAL_GPIO_Init+0x29c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d863      	bhi.n	8009c7a <HAL_GPIO_Init+0x12e>
 8009bb2:	4a8e      	ldr	r2, [pc, #568]	@ (8009dec <HAL_GPIO_Init+0x2a0>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d046      	beq.n	8009c46 <HAL_GPIO_Init+0xfa>
 8009bb8:	4a8c      	ldr	r2, [pc, #560]	@ (8009dec <HAL_GPIO_Init+0x2a0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d85d      	bhi.n	8009c7a <HAL_GPIO_Init+0x12e>
 8009bbe:	2b12      	cmp	r3, #18
 8009bc0:	d82a      	bhi.n	8009c18 <HAL_GPIO_Init+0xcc>
 8009bc2:	2b12      	cmp	r3, #18
 8009bc4:	d859      	bhi.n	8009c7a <HAL_GPIO_Init+0x12e>
 8009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <HAL_GPIO_Init+0x80>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c47 	.word	0x08009c47
 8009bd0:	08009c21 	.word	0x08009c21
 8009bd4:	08009c33 	.word	0x08009c33
 8009bd8:	08009c75 	.word	0x08009c75
 8009bdc:	08009c7b 	.word	0x08009c7b
 8009be0:	08009c7b 	.word	0x08009c7b
 8009be4:	08009c7b 	.word	0x08009c7b
 8009be8:	08009c7b 	.word	0x08009c7b
 8009bec:	08009c7b 	.word	0x08009c7b
 8009bf0:	08009c7b 	.word	0x08009c7b
 8009bf4:	08009c7b 	.word	0x08009c7b
 8009bf8:	08009c7b 	.word	0x08009c7b
 8009bfc:	08009c7b 	.word	0x08009c7b
 8009c00:	08009c7b 	.word	0x08009c7b
 8009c04:	08009c7b 	.word	0x08009c7b
 8009c08:	08009c7b 	.word	0x08009c7b
 8009c0c:	08009c7b 	.word	0x08009c7b
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c3d 	.word	0x08009c3d
 8009c18:	4a75      	ldr	r2, [pc, #468]	@ (8009df0 <HAL_GPIO_Init+0x2a4>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d013      	beq.n	8009c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009c1e:	e02c      	b.n	8009c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	623b      	str	r3, [r7, #32]
          break;
 8009c26:	e029      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	623b      	str	r3, [r7, #32]
          break;
 8009c30:	e024      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	3308      	adds	r3, #8
 8009c38:	623b      	str	r3, [r7, #32]
          break;
 8009c3a:	e01f      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	330c      	adds	r3, #12
 8009c42:	623b      	str	r3, [r7, #32]
          break;
 8009c44:	e01a      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009c4e:	2304      	movs	r3, #4
 8009c50:	623b      	str	r3, [r7, #32]
          break;
 8009c52:	e013      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d105      	bne.n	8009c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	611a      	str	r2, [r3, #16]
          break;
 8009c66:	e009      	b.n	8009c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009c68:	2308      	movs	r3, #8
 8009c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	615a      	str	r2, [r3, #20]
          break;
 8009c72:	e003      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009c74:	2300      	movs	r3, #0
 8009c76:	623b      	str	r3, [r7, #32]
          break;
 8009c78:	e000      	b.n	8009c7c <HAL_GPIO_Init+0x130>
          break;
 8009c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	2bff      	cmp	r3, #255	@ 0xff
 8009c80:	d801      	bhi.n	8009c86 <HAL_GPIO_Init+0x13a>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	e001      	b.n	8009c8a <HAL_GPIO_Init+0x13e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	2bff      	cmp	r3, #255	@ 0xff
 8009c90:	d802      	bhi.n	8009c98 <HAL_GPIO_Init+0x14c>
 8009c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	e002      	b.n	8009c9e <HAL_GPIO_Init+0x152>
 8009c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9a:	3b08      	subs	r3, #8
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	210f      	movs	r1, #15
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cac:	43db      	mvns	r3, r3
 8009cae:	401a      	ands	r2, r3
 8009cb0:	6a39      	ldr	r1, [r7, #32]
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80c1 	beq.w	8009e4e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009ccc:	4b49      	ldr	r3, [pc, #292]	@ (8009df4 <HAL_GPIO_Init+0x2a8>)
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	4a48      	ldr	r2, [pc, #288]	@ (8009df4 <HAL_GPIO_Init+0x2a8>)
 8009cd2:	f043 0301 	orr.w	r3, r3, #1
 8009cd6:	6193      	str	r3, [r2, #24]
 8009cd8:	4b46      	ldr	r3, [pc, #280]	@ (8009df4 <HAL_GPIO_Init+0x2a8>)
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009ce4:	4a44      	ldr	r2, [pc, #272]	@ (8009df8 <HAL_GPIO_Init+0x2ac>)
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	089b      	lsrs	r3, r3, #2
 8009cea:	3302      	adds	r3, #2
 8009cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	220f      	movs	r2, #15
 8009cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009d00:	43db      	mvns	r3, r3
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8009dfc <HAL_GPIO_Init+0x2b0>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d01f      	beq.n	8009d50 <HAL_GPIO_Init+0x204>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a3b      	ldr	r2, [pc, #236]	@ (8009e00 <HAL_GPIO_Init+0x2b4>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d019      	beq.n	8009d4c <HAL_GPIO_Init+0x200>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a3a      	ldr	r2, [pc, #232]	@ (8009e04 <HAL_GPIO_Init+0x2b8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d013      	beq.n	8009d48 <HAL_GPIO_Init+0x1fc>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a39      	ldr	r2, [pc, #228]	@ (8009e08 <HAL_GPIO_Init+0x2bc>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00d      	beq.n	8009d44 <HAL_GPIO_Init+0x1f8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a38      	ldr	r2, [pc, #224]	@ (8009e0c <HAL_GPIO_Init+0x2c0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d007      	beq.n	8009d40 <HAL_GPIO_Init+0x1f4>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a37      	ldr	r2, [pc, #220]	@ (8009e10 <HAL_GPIO_Init+0x2c4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d101      	bne.n	8009d3c <HAL_GPIO_Init+0x1f0>
 8009d38:	2305      	movs	r3, #5
 8009d3a:	e00a      	b.n	8009d52 <HAL_GPIO_Init+0x206>
 8009d3c:	2306      	movs	r3, #6
 8009d3e:	e008      	b.n	8009d52 <HAL_GPIO_Init+0x206>
 8009d40:	2304      	movs	r3, #4
 8009d42:	e006      	b.n	8009d52 <HAL_GPIO_Init+0x206>
 8009d44:	2303      	movs	r3, #3
 8009d46:	e004      	b.n	8009d52 <HAL_GPIO_Init+0x206>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e002      	b.n	8009d52 <HAL_GPIO_Init+0x206>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e000      	b.n	8009d52 <HAL_GPIO_Init+0x206>
 8009d50:	2300      	movs	r3, #0
 8009d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d54:	f002 0203 	and.w	r2, r2, #3
 8009d58:	0092      	lsls	r2, r2, #2
 8009d5a:	4093      	lsls	r3, r2
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009d62:	4925      	ldr	r1, [pc, #148]	@ (8009df8 <HAL_GPIO_Init+0x2ac>)
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	089b      	lsrs	r3, r3, #2
 8009d68:	3302      	adds	r3, #2
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d006      	beq.n	8009d8a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009d7c:	4b25      	ldr	r3, [pc, #148]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009d7e:	689a      	ldr	r2, [r3, #8]
 8009d80:	4924      	ldr	r1, [pc, #144]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	608b      	str	r3, [r1, #8]
 8009d88:	e006      	b.n	8009d98 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009d8a:	4b22      	ldr	r3, [pc, #136]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009d8c:	689a      	ldr	r2, [r3, #8]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	43db      	mvns	r3, r3
 8009d92:	4920      	ldr	r1, [pc, #128]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009da4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009da6:	68da      	ldr	r2, [r3, #12]
 8009da8:	491a      	ldr	r1, [pc, #104]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60cb      	str	r3, [r1, #12]
 8009db0:	e006      	b.n	8009dc0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009db2:	4b18      	ldr	r3, [pc, #96]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	43db      	mvns	r3, r3
 8009dba:	4916      	ldr	r1, [pc, #88]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d025      	beq.n	8009e18 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009dcc:	4b11      	ldr	r3, [pc, #68]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	4910      	ldr	r1, [pc, #64]	@ (8009e14 <HAL_GPIO_Init+0x2c8>)
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	604b      	str	r3, [r1, #4]
 8009dd8:	e025      	b.n	8009e26 <HAL_GPIO_Init+0x2da>
 8009dda:	bf00      	nop
 8009ddc:	10320000 	.word	0x10320000
 8009de0:	10310000 	.word	0x10310000
 8009de4:	10220000 	.word	0x10220000
 8009de8:	10210000 	.word	0x10210000
 8009dec:	10120000 	.word	0x10120000
 8009df0:	10110000 	.word	0x10110000
 8009df4:	40021000 	.word	0x40021000
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40010800 	.word	0x40010800
 8009e00:	40010c00 	.word	0x40010c00
 8009e04:	40011000 	.word	0x40011000
 8009e08:	40011400 	.word	0x40011400
 8009e0c:	40011800 	.word	0x40011800
 8009e10:	40011c00 	.word	0x40011c00
 8009e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009e18:	4b15      	ldr	r3, [pc, #84]	@ (8009e70 <HAL_GPIO_Init+0x324>)
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	43db      	mvns	r3, r3
 8009e20:	4913      	ldr	r1, [pc, #76]	@ (8009e70 <HAL_GPIO_Init+0x324>)
 8009e22:	4013      	ands	r3, r2
 8009e24:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d006      	beq.n	8009e40 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009e32:	4b0f      	ldr	r3, [pc, #60]	@ (8009e70 <HAL_GPIO_Init+0x324>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	490e      	ldr	r1, [pc, #56]	@ (8009e70 <HAL_GPIO_Init+0x324>)
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	600b      	str	r3, [r1, #0]
 8009e3e:	e006      	b.n	8009e4e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009e40:	4b0b      	ldr	r3, [pc, #44]	@ (8009e70 <HAL_GPIO_Init+0x324>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	43db      	mvns	r3, r3
 8009e48:	4909      	ldr	r1, [pc, #36]	@ (8009e70 <HAL_GPIO_Init+0x324>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e50:	3301      	adds	r3, #1
 8009e52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f47f ae7e 	bne.w	8009b60 <HAL_GPIO_Init+0x14>
  }
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	372c      	adds	r7, #44	@ 0x2c
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr
 8009e70:	40010400 	.word	0x40010400

08009e74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b089      	sub	sp, #36	@ 0x24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009e82:	e0a6      	b.n	8009fd2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009e84:	2201      	movs	r2, #1
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	4013      	ands	r3, r2
 8009e90:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 8099 	beq.w	8009fcc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009e9a:	4a54      	ldr	r2, [pc, #336]	@ (8009fec <HAL_GPIO_DeInit+0x178>)
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	089b      	lsrs	r3, r3, #2
 8009ea0:	3302      	adds	r3, #2
 8009ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	220f      	movs	r2, #15
 8009eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4013      	ands	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a4c      	ldr	r2, [pc, #304]	@ (8009ff0 <HAL_GPIO_DeInit+0x17c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d01f      	beq.n	8009f04 <HAL_GPIO_DeInit+0x90>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8009ff4 <HAL_GPIO_DeInit+0x180>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d019      	beq.n	8009f00 <HAL_GPIO_DeInit+0x8c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a4a      	ldr	r2, [pc, #296]	@ (8009ff8 <HAL_GPIO_DeInit+0x184>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d013      	beq.n	8009efc <HAL_GPIO_DeInit+0x88>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a49      	ldr	r2, [pc, #292]	@ (8009ffc <HAL_GPIO_DeInit+0x188>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00d      	beq.n	8009ef8 <HAL_GPIO_DeInit+0x84>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a48      	ldr	r2, [pc, #288]	@ (800a000 <HAL_GPIO_DeInit+0x18c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d007      	beq.n	8009ef4 <HAL_GPIO_DeInit+0x80>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a47      	ldr	r2, [pc, #284]	@ (800a004 <HAL_GPIO_DeInit+0x190>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d101      	bne.n	8009ef0 <HAL_GPIO_DeInit+0x7c>
 8009eec:	2305      	movs	r3, #5
 8009eee:	e00a      	b.n	8009f06 <HAL_GPIO_DeInit+0x92>
 8009ef0:	2306      	movs	r3, #6
 8009ef2:	e008      	b.n	8009f06 <HAL_GPIO_DeInit+0x92>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	e006      	b.n	8009f06 <HAL_GPIO_DeInit+0x92>
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e004      	b.n	8009f06 <HAL_GPIO_DeInit+0x92>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e002      	b.n	8009f06 <HAL_GPIO_DeInit+0x92>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <HAL_GPIO_DeInit+0x92>
 8009f04:	2300      	movs	r3, #0
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	f002 0203 	and.w	r2, r2, #3
 8009f0c:	0092      	lsls	r2, r2, #2
 8009f0e:	4093      	lsls	r3, r2
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d132      	bne.n	8009f7c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009f16:	4b3c      	ldr	r3, [pc, #240]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	493a      	ldr	r1, [pc, #232]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009f24:	4b38      	ldr	r3, [pc, #224]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	43db      	mvns	r3, r3
 8009f2c:	4936      	ldr	r1, [pc, #216]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f2e:	4013      	ands	r3, r2
 8009f30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009f32:	4b35      	ldr	r3, [pc, #212]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f34:	68da      	ldr	r2, [r3, #12]
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	43db      	mvns	r3, r3
 8009f3a:	4933      	ldr	r1, [pc, #204]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009f40:	4b31      	ldr	r3, [pc, #196]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	43db      	mvns	r3, r3
 8009f48:	492f      	ldr	r1, [pc, #188]	@ (800a008 <HAL_GPIO_DeInit+0x194>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	220f      	movs	r2, #15
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009f5e:	4a23      	ldr	r2, [pc, #140]	@ (8009fec <HAL_GPIO_DeInit+0x178>)
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	089b      	lsrs	r3, r3, #2
 8009f64:	3302      	adds	r3, #2
 8009f66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	43da      	mvns	r2, r3
 8009f6e:	481f      	ldr	r0, [pc, #124]	@ (8009fec <HAL_GPIO_DeInit+0x178>)
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	089b      	lsrs	r3, r3, #2
 8009f74:	400a      	ands	r2, r1
 8009f76:	3302      	adds	r3, #2
 8009f78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	2bff      	cmp	r3, #255	@ 0xff
 8009f80:	d801      	bhi.n	8009f86 <HAL_GPIO_DeInit+0x112>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	e001      	b.n	8009f8a <HAL_GPIO_DeInit+0x116>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2bff      	cmp	r3, #255	@ 0xff
 8009f90:	d802      	bhi.n	8009f98 <HAL_GPIO_DeInit+0x124>
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	e002      	b.n	8009f9e <HAL_GPIO_DeInit+0x12a>
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	3b08      	subs	r3, #8
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	210f      	movs	r1, #15
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fac:	43db      	mvns	r3, r3
 8009fae:	401a      	ands	r2, r3
 8009fb0:	2104      	movs	r1, #4
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	401a      	ands	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f47f af52 	bne.w	8009e84 <HAL_GPIO_DeInit+0x10>
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	3724      	adds	r7, #36	@ 0x24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	40010800 	.word	0x40010800
 8009ff4:	40010c00 	.word	0x40010c00
 8009ff8:	40011000 	.word	0x40011000
 8009ffc:	40011400 	.word	0x40011400
 800a000:	40011800 	.word	0x40011800
 800a004:	40011c00 	.word	0x40011c00
 800a008:	40010400 	.word	0x40010400

0800a00c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	887b      	ldrh	r3, [r7, #2]
 800a01e:	4013      	ands	r3, r2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
 800a028:	e001      	b.n	800a02e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr

0800a03a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	807b      	strh	r3, [r7, #2]
 800a046:	4613      	mov	r3, r2
 800a048:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a04a:	787b      	ldrb	r3, [r7, #1]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a050:	887a      	ldrh	r2, [r7, #2]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a056:	e003      	b.n	800a060 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a058:	887b      	ldrh	r3, [r7, #2]
 800a05a:	041a      	lsls	r2, r3, #16
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	611a      	str	r2, [r3, #16]
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	bc80      	pop	{r7}
 800a068:	4770      	bx	lr

0800a06a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b085      	sub	sp, #20
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a07c:	887a      	ldrh	r2, [r7, #2]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4013      	ands	r3, r2
 800a082:	041a      	lsls	r2, r3, #16
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	43d9      	mvns	r1, r3
 800a088:	887b      	ldrh	r3, [r7, #2]
 800a08a:	400b      	ands	r3, r1
 800a08c:	431a      	orrs	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	611a      	str	r2, [r3, #16]
}
 800a092:	bf00      	nop
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr

0800a09c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e12b      	b.n	800a306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fe fff4 	bl	80090b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2224      	movs	r2, #36	@ 0x24
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 0201 	bic.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a100:	f001 fdb8 	bl	800bc74 <HAL_RCC_GetPCLK1Freq>
 800a104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	4a81      	ldr	r2, [pc, #516]	@ (800a310 <HAL_I2C_Init+0x274>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d807      	bhi.n	800a120 <HAL_I2C_Init+0x84>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4a80      	ldr	r2, [pc, #512]	@ (800a314 <HAL_I2C_Init+0x278>)
 800a114:	4293      	cmp	r3, r2
 800a116:	bf94      	ite	ls
 800a118:	2301      	movls	r3, #1
 800a11a:	2300      	movhi	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	e006      	b.n	800a12e <HAL_I2C_Init+0x92>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a7d      	ldr	r2, [pc, #500]	@ (800a318 <HAL_I2C_Init+0x27c>)
 800a124:	4293      	cmp	r3, r2
 800a126:	bf94      	ite	ls
 800a128:	2301      	movls	r3, #1
 800a12a:	2300      	movhi	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e0e7      	b.n	800a306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	4a78      	ldr	r2, [pc, #480]	@ (800a31c <HAL_I2C_Init+0x280>)
 800a13a:	fba2 2303 	umull	r2, r3, r2, r3
 800a13e:	0c9b      	lsrs	r3, r3, #18
 800a140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	430a      	orrs	r2, r1
 800a154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	4a6a      	ldr	r2, [pc, #424]	@ (800a310 <HAL_I2C_Init+0x274>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d802      	bhi.n	800a170 <HAL_I2C_Init+0xd4>
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	3301      	adds	r3, #1
 800a16e:	e009      	b.n	800a184 <HAL_I2C_Init+0xe8>
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	4a69      	ldr	r2, [pc, #420]	@ (800a320 <HAL_I2C_Init+0x284>)
 800a17c:	fba2 2303 	umull	r2, r3, r2, r3
 800a180:	099b      	lsrs	r3, r3, #6
 800a182:	3301      	adds	r3, #1
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6812      	ldr	r2, [r2, #0]
 800a188:	430b      	orrs	r3, r1
 800a18a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a196:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	495c      	ldr	r1, [pc, #368]	@ (800a310 <HAL_I2C_Init+0x274>)
 800a1a0:	428b      	cmp	r3, r1
 800a1a2:	d819      	bhi.n	800a1d8 <HAL_I2C_Init+0x13c>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	1e59      	subs	r1, r3, #1
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1b2:	1c59      	adds	r1, r3, #1
 800a1b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a1b8:	400b      	ands	r3, r1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <HAL_I2C_Init+0x138>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	1e59      	subs	r1, r3, #1
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1d2:	e051      	b.n	800a278 <HAL_I2C_Init+0x1dc>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	e04f      	b.n	800a278 <HAL_I2C_Init+0x1dc>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d111      	bne.n	800a204 <HAL_I2C_Init+0x168>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	1e58      	subs	r0, r3, #1
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6859      	ldr	r1, [r3, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	440b      	add	r3, r1
 800a1ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2301      	moveq	r3, #1
 800a1fe:	2300      	movne	r3, #0
 800a200:	b2db      	uxtb	r3, r3
 800a202:	e012      	b.n	800a22a <HAL_I2C_Init+0x18e>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	1e58      	subs	r0, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6859      	ldr	r1, [r3, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	0099      	lsls	r1, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	fbb0 f3f3 	udiv	r3, r0, r3
 800a21a:	3301      	adds	r3, #1
 800a21c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a220:	2b00      	cmp	r3, #0
 800a222:	bf0c      	ite	eq
 800a224:	2301      	moveq	r3, #1
 800a226:	2300      	movne	r3, #0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <HAL_I2C_Init+0x196>
 800a22e:	2301      	movs	r3, #1
 800a230:	e022      	b.n	800a278 <HAL_I2C_Init+0x1dc>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10e      	bne.n	800a258 <HAL_I2C_Init+0x1bc>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	1e58      	subs	r0, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6859      	ldr	r1, [r3, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	440b      	add	r3, r1
 800a248:	fbb0 f3f3 	udiv	r3, r0, r3
 800a24c:	3301      	adds	r3, #1
 800a24e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a256:	e00f      	b.n	800a278 <HAL_I2C_Init+0x1dc>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	1e58      	subs	r0, r3, #1
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6859      	ldr	r1, [r3, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	0099      	lsls	r1, r3, #2
 800a268:	440b      	add	r3, r1
 800a26a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a26e:	3301      	adds	r3, #1
 800a270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	6809      	ldr	r1, [r1, #0]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	69da      	ldr	r2, [r3, #28]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a2a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6911      	ldr	r1, [r2, #16]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68d2      	ldr	r2, [r2, #12]
 800a2b2:	4311      	orrs	r1, r2
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6812      	ldr	r2, [r2, #0]
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	695a      	ldr	r2, [r3, #20]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0201 	orr.w	r2, r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	000186a0 	.word	0x000186a0
 800a314:	001e847f 	.word	0x001e847f
 800a318:	003d08ff 	.word	0x003d08ff
 800a31c:	431bde83 	.word	0x431bde83
 800a320:	10624dd3 	.word	0x10624dd3

0800a324 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e021      	b.n	800a37a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2224      	movs	r2, #36	@ 0x24
 800a33a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0201 	bic.w	r2, r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fe feec 	bl	800912c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b088      	sub	sp, #32
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	461a      	mov	r2, r3
 800a390:	460b      	mov	r3, r1
 800a392:	817b      	strh	r3, [r7, #10]
 800a394:	4613      	mov	r3, r2
 800a396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a398:	f7ff f85e 	bl	8009458 <HAL_GetTick>
 800a39c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	f040 80e0 	bne.w	800a56c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2319      	movs	r3, #25
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4970      	ldr	r1, [pc, #448]	@ (800a578 <HAL_I2C_Master_Transmit+0x1f4>)
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 fe5c 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e0d3      	b.n	800a56e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_I2C_Master_Transmit+0x50>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e0cc      	b.n	800a56e <HAL_I2C_Master_Transmit+0x1ea>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d007      	beq.n	800a3fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f042 0201 	orr.w	r2, r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2221      	movs	r2, #33	@ 0x21
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2210      	movs	r2, #16
 800a416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	893a      	ldrh	r2, [r7, #8]
 800a42a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a50      	ldr	r2, [pc, #320]	@ (800a57c <HAL_I2C_Master_Transmit+0x1f8>)
 800a43a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a43c:	8979      	ldrh	r1, [r7, #10]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	6a3a      	ldr	r2, [r7, #32]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 fc16 	bl	800ac74 <I2C_MasterRequestWrite>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e08d      	b.n	800a56e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a452:	2300      	movs	r3, #0
 800a454:	613b      	str	r3, [r7, #16]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	613b      	str	r3, [r7, #16]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	613b      	str	r3, [r7, #16]
 800a466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a468:	e066      	b.n	800a538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	6a39      	ldr	r1, [r7, #32]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 ff1a 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00d      	beq.n	800a496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d107      	bne.n	800a492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e06b      	b.n	800a56e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49a:	781a      	ldrb	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d11b      	bne.n	800a50c <HAL_I2C_Master_Transmit+0x188>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d017      	beq.n	800a50c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e0:	781a      	ldrb	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a504:	3b01      	subs	r3, #1
 800a506:	b29a      	uxth	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	6a39      	ldr	r1, [r7, #32]
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 ff11 	bl	800b338 <I2C_WaitOnBTFFlagUntilTimeout>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00d      	beq.n	800a538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a520:	2b04      	cmp	r3, #4
 800a522:	d107      	bne.n	800a534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e01a      	b.n	800a56e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d194      	bne.n	800a46a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a54e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	e000      	b.n	800a56e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a56c:	2302      	movs	r3, #2
  }
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	00100002 	.word	0x00100002
 800a57c:	ffff0000 	.word	0xffff0000

0800a580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af02      	add	r7, sp, #8
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	4608      	mov	r0, r1
 800a58a:	4611      	mov	r1, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	4603      	mov	r3, r0
 800a590:	817b      	strh	r3, [r7, #10]
 800a592:	460b      	mov	r3, r1
 800a594:	813b      	strh	r3, [r7, #8]
 800a596:	4613      	mov	r3, r2
 800a598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a59a:	f7fe ff5d 	bl	8009458 <HAL_GetTick>
 800a59e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	f040 80d9 	bne.w	800a760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	2319      	movs	r3, #25
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	496d      	ldr	r1, [pc, #436]	@ (800a76c <HAL_I2C_Mem_Write+0x1ec>)
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 fd5b 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e0cc      	b.n	800a762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d101      	bne.n	800a5d6 <HAL_I2C_Mem_Write+0x56>
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e0c5      	b.n	800a762 <HAL_I2C_Mem_Write+0x1e2>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d007      	beq.n	800a5fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f042 0201 	orr.w	r2, r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a60a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2221      	movs	r2, #33	@ 0x21
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2240      	movs	r2, #64	@ 0x40
 800a618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a3a      	ldr	r2, [r7, #32]
 800a626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a62c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4a4d      	ldr	r2, [pc, #308]	@ (800a770 <HAL_I2C_Mem_Write+0x1f0>)
 800a63c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a63e:	88f8      	ldrh	r0, [r7, #6]
 800a640:	893a      	ldrh	r2, [r7, #8]
 800a642:	8979      	ldrh	r1, [r7, #10]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4603      	mov	r3, r0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 fb92 	bl	800ad78 <I2C_RequestMemoryWrite>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d052      	beq.n	800a700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e081      	b.n	800a762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 fe20 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00d      	beq.n	800a68a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a672:	2b04      	cmp	r3, #4
 800a674:	d107      	bne.n	800a686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e06b      	b.n	800a762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d11b      	bne.n	800a700 <HAL_I2C_Mem_Write+0x180>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d017      	beq.n	800a700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d4:	781a      	ldrb	r2, [r3, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1aa      	bne.n	800a65e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 fe13 	bl	800b338 <I2C_WaitOnBTFFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00d      	beq.n	800a734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d107      	bne.n	800a730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a72e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e016      	b.n	800a762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2220      	movs	r2, #32
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	e000      	b.n	800a762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a760:	2302      	movs	r3, #2
  }
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	00100002 	.word	0x00100002
 800a770:	ffff0000 	.word	0xffff0000

0800a774 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08c      	sub	sp, #48	@ 0x30
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	4608      	mov	r0, r1
 800a77e:	4611      	mov	r1, r2
 800a780:	461a      	mov	r2, r3
 800a782:	4603      	mov	r3, r0
 800a784:	817b      	strh	r3, [r7, #10]
 800a786:	460b      	mov	r3, r1
 800a788:	813b      	strh	r3, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a78e:	2300      	movs	r3, #0
 800a790:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a792:	f7fe fe61 	bl	8009458 <HAL_GetTick>
 800a796:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b20      	cmp	r3, #32
 800a7a2:	f040 8244 	bne.w	800ac2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	2319      	movs	r3, #25
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	4982      	ldr	r1, [pc, #520]	@ (800a9b8 <HAL_I2C_Mem_Read+0x244>)
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 fc5f 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e237      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d101      	bne.n	800a7ce <HAL_I2C_Mem_Read+0x5a>
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e230      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d007      	beq.n	800a7f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f042 0201 	orr.w	r2, r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2222      	movs	r2, #34	@ 0x22
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2240      	movs	r2, #64	@ 0x40
 800a810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a81e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a62      	ldr	r2, [pc, #392]	@ (800a9bc <HAL_I2C_Mem_Read+0x248>)
 800a834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a836:	88f8      	ldrh	r0, [r7, #6]
 800a838:	893a      	ldrh	r2, [r7, #8]
 800a83a:	8979      	ldrh	r1, [r7, #10]
 800a83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	4603      	mov	r3, r0
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fb2c 	bl	800aea4 <I2C_RequestMemoryRead>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e1ec      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d113      	bne.n	800a886 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a85e:	2300      	movs	r3, #0
 800a860:	61fb      	str	r3, [r7, #28]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	61fb      	str	r3, [r7, #28]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	61fb      	str	r3, [r7, #28]
 800a872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	e1c0      	b.n	800ac08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d11e      	bne.n	800a8cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a89c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a89e:	b672      	cpsid	i
}
 800a8a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	61bb      	str	r3, [r7, #24]
 800a8b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a8c8:	b662      	cpsie	i
}
 800a8ca:	e035      	b.n	800a938 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d11e      	bne.n	800a912 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e4:	b672      	cpsid	i
}
 800a8e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a90c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a90e:	b662      	cpsie	i
}
 800a910:	e012      	b.n	800a938 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a920:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a922:	2300      	movs	r3, #0
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a938:	e166      	b.n	800ac08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a93e:	2b03      	cmp	r3, #3
 800a940:	f200 811f 	bhi.w	800ab82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d123      	bne.n	800a994 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a94c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a94e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fd39 	bl	800b3c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e167      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	691a      	ldr	r2, [r3, #16]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3b01      	subs	r3, #1
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a992:	e139      	b.n	800ac08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d152      	bne.n	800aa42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4906      	ldr	r1, [pc, #24]	@ (800a9c0 <HAL_I2C_Mem_Read+0x24c>)
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 fb64 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d008      	beq.n	800a9c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e13c      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
 800a9b6:	bf00      	nop
 800a9b8:	00100002 	.word	0x00100002
 800a9bc:	ffff0000 	.word	0xffff0000
 800a9c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c4:	b672      	cpsid	i
}
 800a9c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691a      	ldr	r2, [r3, #16]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e2:	b2d2      	uxtb	r2, r2
 800a9e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aa0a:	b662      	cpsie	i
}
 800aa0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691a      	ldr	r2, [r3, #16]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa40:	e0e2      	b.n	800ac08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa48:	2200      	movs	r2, #0
 800aa4a:	497b      	ldr	r1, [pc, #492]	@ (800ac38 <HAL_I2C_Mem_Read+0x4c4>)
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fb11 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e0e9      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa6c:	b672      	cpsid	i
}
 800aa6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	691a      	ldr	r2, [r3, #16]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800aaa2:	4b66      	ldr	r3, [pc, #408]	@ (800ac3c <HAL_I2C_Mem_Read+0x4c8>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	08db      	lsrs	r3, r3, #3
 800aaa8:	4a65      	ldr	r2, [pc, #404]	@ (800ac40 <HAL_I2C_Mem_Read+0x4cc>)
 800aaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aaae:	0a1a      	lsrs	r2, r3, #8
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	00da      	lsls	r2, r3, #3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d118      	bne.n	800aafa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	f043 0220 	orr.w	r2, r3, #32
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800aaea:	b662      	cpsie	i
}
 800aaec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e09a      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d1d9      	bne.n	800aabc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	691a      	ldr	r2, [r3, #16]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab34:	3b01      	subs	r3, #1
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ab4a:	b662      	cpsie	i
}
 800ab4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691a      	ldr	r2, [r3, #16]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab80:	e042      	b.n	800ac08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fc1e 	bl	800b3c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e04c      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	691a      	ldr	r2, [r3, #16]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba0:	b2d2      	uxtb	r2, r2
 800aba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d118      	bne.n	800ac08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	691a      	ldr	r2, [r3, #16]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe0:	b2d2      	uxtb	r2, r2
 800abe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	3b01      	subs	r3, #1
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f47f ae94 	bne.w	800a93a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e000      	b.n	800ac30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ac2e:	2302      	movs	r3, #2
  }
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3728      	adds	r7, #40	@ 0x28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	00010004 	.word	0x00010004
 800ac3c:	20000f78 	.word	0x20000f78
 800ac40:	14f8b589 	.word	0x14f8b589

0800ac44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac52:	b2db      	uxtb	r3, r3
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bc80      	pop	{r7}
 800ac5c:	4770      	bx	lr

0800ac5e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bc80      	pop	{r7}
 800ac72:	4770      	bx	lr

0800ac74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	607a      	str	r2, [r7, #4]
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	460b      	mov	r3, r1
 800ac82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d006      	beq.n	800ac9e <I2C_MasterRequestWrite+0x2a>
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d003      	beq.n	800ac9e <I2C_MasterRequestWrite+0x2a>
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac9c:	d108      	bne.n	800acb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e00b      	b.n	800acc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb4:	2b12      	cmp	r3, #18
 800acb6:	d107      	bne.n	800acc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 f9cd 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00d      	beq.n	800acfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acee:	d103      	bne.n	800acf8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e035      	b.n	800ad68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad04:	d108      	bne.n	800ad18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad06:	897b      	ldrh	r3, [r7, #10]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad14:	611a      	str	r2, [r3, #16]
 800ad16:	e01b      	b.n	800ad50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ad18:	897b      	ldrh	r3, [r7, #10]
 800ad1a:	11db      	asrs	r3, r3, #7
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 0306 	and.w	r3, r3, #6
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f063 030f 	orn	r3, r3, #15
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	490e      	ldr	r1, [pc, #56]	@ (800ad70 <I2C_MasterRequestWrite+0xfc>)
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 fa16 	bl	800b168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e010      	b.n	800ad68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad46:	897b      	ldrh	r3, [r7, #10]
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4907      	ldr	r1, [pc, #28]	@ (800ad74 <I2C_MasterRequestWrite+0x100>)
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fa06 	bl	800b168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	00010008 	.word	0x00010008
 800ad74:	00010002 	.word	0x00010002

0800ad78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	4608      	mov	r0, r1
 800ad82:	4611      	mov	r1, r2
 800ad84:	461a      	mov	r2, r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	817b      	strh	r3, [r7, #10]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	813b      	strh	r3, [r7, #8]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ada0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 f960 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00d      	beq.n	800add6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adc8:	d103      	bne.n	800add2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800add0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e05f      	b.n	800ae96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800add6:	897b      	ldrh	r3, [r7, #10]
 800add8:	b2db      	uxtb	r3, r3
 800adda:	461a      	mov	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ade4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	6a3a      	ldr	r2, [r7, #32]
 800adea:	492d      	ldr	r1, [pc, #180]	@ (800aea0 <I2C_RequestMemoryWrite+0x128>)
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 f9bb 	bl	800b168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e04c      	b.n	800ae96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae14:	6a39      	ldr	r1, [r7, #32]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 fa46 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00d      	beq.n	800ae3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	d107      	bne.n	800ae3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e02b      	b.n	800ae96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d105      	bne.n	800ae50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae44:	893b      	ldrh	r3, [r7, #8]
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	611a      	str	r2, [r3, #16]
 800ae4e:	e021      	b.n	800ae94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae50:	893b      	ldrh	r3, [r7, #8]
 800ae52:	0a1b      	lsrs	r3, r3, #8
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae60:	6a39      	ldr	r1, [r7, #32]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fa20 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00d      	beq.n	800ae8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	d107      	bne.n	800ae86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e005      	b.n	800ae96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae8a:	893b      	ldrh	r3, [r7, #8]
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	00010002 	.word	0x00010002

0800aea4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	4608      	mov	r0, r1
 800aeae:	4611      	mov	r1, r2
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	817b      	strh	r3, [r7, #10]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	813b      	strh	r3, [r7, #8]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aecc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aedc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f8c2 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00d      	beq.n	800af12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af04:	d103      	bne.n	800af0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e0aa      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af12:	897b      	ldrh	r3, [r7, #10]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	461a      	mov	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800af20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	6a3a      	ldr	r2, [r7, #32]
 800af26:	4952      	ldr	r1, [pc, #328]	@ (800b070 <I2C_RequestMemoryRead+0x1cc>)
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f91d 	bl	800b168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e097      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af50:	6a39      	ldr	r1, [r7, #32]
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 f9a8 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00d      	beq.n	800af7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af62:	2b04      	cmp	r3, #4
 800af64:	d107      	bne.n	800af76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e076      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d105      	bne.n	800af8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af80:	893b      	ldrh	r3, [r7, #8]
 800af82:	b2da      	uxtb	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	611a      	str	r2, [r3, #16]
 800af8a:	e021      	b.n	800afd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800af8c:	893b      	ldrh	r3, [r7, #8]
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	b29b      	uxth	r3, r3
 800af92:	b2da      	uxtb	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af9c:	6a39      	ldr	r1, [r7, #32]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f982 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00d      	beq.n	800afc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d107      	bne.n	800afc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e050      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afc6:	893b      	ldrh	r3, [r7, #8]
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afd2:	6a39      	ldr	r1, [r7, #32]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f967 	bl	800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00d      	beq.n	800affc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	d107      	bne.n	800aff8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aff6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e035      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b00a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2200      	movs	r2, #0
 800b014:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f82b 	bl	800b074 <I2C_WaitOnFlagUntilTimeout>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00d      	beq.n	800b040 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b02e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b032:	d103      	bne.n	800b03c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b03a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b03c:	2303      	movs	r3, #3
 800b03e:	e013      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b040:	897b      	ldrh	r3, [r7, #10]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f043 0301 	orr.w	r3, r3, #1
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b052:	6a3a      	ldr	r2, [r7, #32]
 800b054:	4906      	ldr	r1, [pc, #24]	@ (800b070 <I2C_RequestMemoryRead+0x1cc>)
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 f886 	bl	800b168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e000      	b.n	800b068 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	00010002 	.word	0x00010002

0800b074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b084:	e048      	b.n	800b118 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b08c:	d044      	beq.n	800b118 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b08e:	f7fe f9e3 	bl	8009458 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d302      	bcc.n	800b0a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d139      	bne.n	800b118 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	0c1b      	lsrs	r3, r3, #16
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d10d      	bne.n	800b0ca <I2C_WaitOnFlagUntilTimeout+0x56>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	43da      	mvns	r2, r3
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bf0c      	ite	eq
 800b0c0:	2301      	moveq	r3, #1
 800b0c2:	2300      	movne	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	e00c      	b.n	800b0e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	43da      	mvns	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	bf0c      	ite	eq
 800b0dc:	2301      	moveq	r3, #1
 800b0de:	2300      	movne	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	79fb      	ldrb	r3, [r7, #7]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d116      	bne.n	800b118 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b104:	f043 0220 	orr.w	r2, r3, #32
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e023      	b.n	800b160 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	0c1b      	lsrs	r3, r3, #16
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d10d      	bne.n	800b13e <I2C_WaitOnFlagUntilTimeout+0xca>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	43da      	mvns	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	4013      	ands	r3, r2
 800b12e:	b29b      	uxth	r3, r3
 800b130:	2b00      	cmp	r3, #0
 800b132:	bf0c      	ite	eq
 800b134:	2301      	moveq	r3, #1
 800b136:	2300      	movne	r3, #0
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	461a      	mov	r2, r3
 800b13c:	e00c      	b.n	800b158 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	43da      	mvns	r2, r3
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	4013      	ands	r3, r2
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bf0c      	ite	eq
 800b150:	2301      	moveq	r3, #1
 800b152:	2300      	movne	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	461a      	mov	r2, r3
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d093      	beq.n	800b086 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b176:	e071      	b.n	800b25c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b186:	d123      	bne.n	800b1d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b196:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b1a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1bc:	f043 0204 	orr.w	r2, r3, #4
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e067      	b.n	800b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d6:	d041      	beq.n	800b25c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1d8:	f7fe f93e 	bl	8009458 <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d302      	bcc.n	800b1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d136      	bne.n	800b25c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	0c1b      	lsrs	r3, r3, #16
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d10c      	bne.n	800b212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	43da      	mvns	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	4013      	ands	r3, r2
 800b204:	b29b      	uxth	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	bf14      	ite	ne
 800b20a:	2301      	movne	r3, #1
 800b20c:	2300      	moveq	r3, #0
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	e00b      	b.n	800b22a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	43da      	mvns	r2, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	4013      	ands	r3, r2
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	bf14      	ite	ne
 800b224:	2301      	movne	r3, #1
 800b226:	2300      	moveq	r3, #0
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d016      	beq.n	800b25c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2220      	movs	r2, #32
 800b238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b248:	f043 0220 	orr.w	r2, r3, #32
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e021      	b.n	800b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	0c1b      	lsrs	r3, r3, #16
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b01      	cmp	r3, #1
 800b264:	d10c      	bne.n	800b280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	43da      	mvns	r2, r3
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	4013      	ands	r3, r2
 800b272:	b29b      	uxth	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	bf14      	ite	ne
 800b278:	2301      	movne	r3, #1
 800b27a:	2300      	moveq	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	e00b      	b.n	800b298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	43da      	mvns	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	4013      	ands	r3, r2
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bf14      	ite	ne
 800b292:	2301      	movne	r3, #1
 800b294:	2300      	moveq	r3, #0
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f af6d 	bne.w	800b178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2b4:	e034      	b.n	800b320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 f8e3 	bl	800b482 <I2C_IsAcknowledgeFailed>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e034      	b.n	800b330 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2cc:	d028      	beq.n	800b320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2ce:	f7fe f8c3 	bl	8009458 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d302      	bcc.n	800b2e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d11d      	bne.n	800b320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ee:	2b80      	cmp	r3, #128	@ 0x80
 800b2f0:	d016      	beq.n	800b320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30c:	f043 0220 	orr.w	r2, r3, #32
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e007      	b.n	800b330 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b32a:	2b80      	cmp	r3, #128	@ 0x80
 800b32c:	d1c3      	bne.n	800b2b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b344:	e034      	b.n	800b3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 f89b 	bl	800b482 <I2C_IsAcknowledgeFailed>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e034      	b.n	800b3c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b35c:	d028      	beq.n	800b3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b35e:	f7fe f87b 	bl	8009458 <HAL_GetTick>
 800b362:	4602      	mov	r2, r0
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d302      	bcc.n	800b374 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d11d      	bne.n	800b3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f003 0304 	and.w	r3, r3, #4
 800b37e:	2b04      	cmp	r3, #4
 800b380:	d016      	beq.n	800b3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2220      	movs	r2, #32
 800b38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b39c:	f043 0220 	orr.w	r2, r3, #32
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e007      	b.n	800b3c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	d1c3      	bne.n	800b346 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3d4:	e049      	b.n	800b46a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	f003 0310 	and.w	r3, r3, #16
 800b3e0:	2b10      	cmp	r3, #16
 800b3e2:	d119      	bne.n	800b418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0210 	mvn.w	r2, #16
 800b3ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e030      	b.n	800b47a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b418:	f7fe f81e 	bl	8009458 <HAL_GetTick>
 800b41c:	4602      	mov	r2, r0
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	429a      	cmp	r2, r3
 800b426:	d302      	bcc.n	800b42e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d11d      	bne.n	800b46a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b438:	2b40      	cmp	r3, #64	@ 0x40
 800b43a:	d016      	beq.n	800b46a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2220      	movs	r2, #32
 800b446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b456:	f043 0220 	orr.w	r2, r3, #32
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e007      	b.n	800b47a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b474:	2b40      	cmp	r3, #64	@ 0x40
 800b476:	d1ae      	bne.n	800b3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b498:	d11b      	bne.n	800b4d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b4a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4be:	f043 0204 	orr.w	r2, r3, #4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e000      	b.n	800b4d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bc80      	pop	{r7}
 800b4dc:	4770      	bx	lr
	...

0800b4e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e272      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8087 	beq.w	800b60e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b500:	4b92      	ldr	r3, [pc, #584]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f003 030c 	and.w	r3, r3, #12
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d00c      	beq.n	800b526 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b50c:	4b8f      	ldr	r3, [pc, #572]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f003 030c 	and.w	r3, r3, #12
 800b514:	2b08      	cmp	r3, #8
 800b516:	d112      	bne.n	800b53e <HAL_RCC_OscConfig+0x5e>
 800b518:	4b8c      	ldr	r3, [pc, #560]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b524:	d10b      	bne.n	800b53e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b526:	4b89      	ldr	r3, [pc, #548]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d06c      	beq.n	800b60c <HAL_RCC_OscConfig+0x12c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d168      	bne.n	800b60c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e24c      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b546:	d106      	bne.n	800b556 <HAL_RCC_OscConfig+0x76>
 800b548:	4b80      	ldr	r3, [pc, #512]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a7f      	ldr	r2, [pc, #508]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b54e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b552:	6013      	str	r3, [r2, #0]
 800b554:	e02e      	b.n	800b5b4 <HAL_RCC_OscConfig+0xd4>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10c      	bne.n	800b578 <HAL_RCC_OscConfig+0x98>
 800b55e:	4b7b      	ldr	r3, [pc, #492]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a7a      	ldr	r2, [pc, #488]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	4b78      	ldr	r3, [pc, #480]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a77      	ldr	r2, [pc, #476]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	e01d      	b.n	800b5b4 <HAL_RCC_OscConfig+0xd4>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b580:	d10c      	bne.n	800b59c <HAL_RCC_OscConfig+0xbc>
 800b582:	4b72      	ldr	r3, [pc, #456]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a71      	ldr	r2, [pc, #452]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	4b6f      	ldr	r3, [pc, #444]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a6e      	ldr	r2, [pc, #440]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	e00b      	b.n	800b5b4 <HAL_RCC_OscConfig+0xd4>
 800b59c:	4b6b      	ldr	r3, [pc, #428]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a6a      	ldr	r2, [pc, #424]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b5a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	4b68      	ldr	r3, [pc, #416]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a67      	ldr	r2, [pc, #412]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b5ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d013      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5bc:	f7fd ff4c 	bl	8009458 <HAL_GetTick>
 800b5c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5c2:	e008      	b.n	800b5d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5c4:	f7fd ff48 	bl	8009458 <HAL_GetTick>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	2b64      	cmp	r3, #100	@ 0x64
 800b5d0:	d901      	bls.n	800b5d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e200      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5d6:	4b5d      	ldr	r3, [pc, #372]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0f0      	beq.n	800b5c4 <HAL_RCC_OscConfig+0xe4>
 800b5e2:	e014      	b.n	800b60e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5e4:	f7fd ff38 	bl	8009458 <HAL_GetTick>
 800b5e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5ea:	e008      	b.n	800b5fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5ec:	f7fd ff34 	bl	8009458 <HAL_GetTick>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	2b64      	cmp	r3, #100	@ 0x64
 800b5f8:	d901      	bls.n	800b5fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e1ec      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5fe:	4b53      	ldr	r3, [pc, #332]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f0      	bne.n	800b5ec <HAL_RCC_OscConfig+0x10c>
 800b60a:	e000      	b.n	800b60e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b60c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 0302 	and.w	r3, r3, #2
 800b616:	2b00      	cmp	r3, #0
 800b618:	d063      	beq.n	800b6e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b61a:	4b4c      	ldr	r3, [pc, #304]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f003 030c 	and.w	r3, r3, #12
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00b      	beq.n	800b63e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b626:	4b49      	ldr	r3, [pc, #292]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f003 030c 	and.w	r3, r3, #12
 800b62e:	2b08      	cmp	r3, #8
 800b630:	d11c      	bne.n	800b66c <HAL_RCC_OscConfig+0x18c>
 800b632:	4b46      	ldr	r3, [pc, #280]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d116      	bne.n	800b66c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b63e:	4b43      	ldr	r3, [pc, #268]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	2b00      	cmp	r3, #0
 800b648:	d005      	beq.n	800b656 <HAL_RCC_OscConfig+0x176>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d001      	beq.n	800b656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e1c0      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b656:	4b3d      	ldr	r3, [pc, #244]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	4939      	ldr	r1, [pc, #228]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b666:	4313      	orrs	r3, r2
 800b668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b66a:	e03a      	b.n	800b6e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d020      	beq.n	800b6b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b674:	4b36      	ldr	r3, [pc, #216]	@ (800b750 <HAL_RCC_OscConfig+0x270>)
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b67a:	f7fd feed 	bl	8009458 <HAL_GetTick>
 800b67e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b680:	e008      	b.n	800b694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b682:	f7fd fee9 	bl	8009458 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d901      	bls.n	800b694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e1a1      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b694:	4b2d      	ldr	r3, [pc, #180]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0f0      	beq.n	800b682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	4927      	ldr	r1, [pc, #156]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	600b      	str	r3, [r1, #0]
 800b6b4:	e015      	b.n	800b6e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6b6:	4b26      	ldr	r3, [pc, #152]	@ (800b750 <HAL_RCC_OscConfig+0x270>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6bc:	f7fd fecc 	bl	8009458 <HAL_GetTick>
 800b6c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6c2:	e008      	b.n	800b6d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6c4:	f7fd fec8 	bl	8009458 <HAL_GetTick>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d901      	bls.n	800b6d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e180      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1f0      	bne.n	800b6c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0308 	and.w	r3, r3, #8
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d03a      	beq.n	800b764 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d019      	beq.n	800b72a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6f6:	4b17      	ldr	r3, [pc, #92]	@ (800b754 <HAL_RCC_OscConfig+0x274>)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6fc:	f7fd feac 	bl	8009458 <HAL_GetTick>
 800b700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b702:	e008      	b.n	800b716 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b704:	f7fd fea8 	bl	8009458 <HAL_GetTick>
 800b708:	4602      	mov	r2, r0
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d901      	bls.n	800b716 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b712:	2303      	movs	r3, #3
 800b714:	e160      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b716:	4b0d      	ldr	r3, [pc, #52]	@ (800b74c <HAL_RCC_OscConfig+0x26c>)
 800b718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0f0      	beq.n	800b704 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b722:	2001      	movs	r0, #1
 800b724:	f000 face 	bl	800bcc4 <RCC_Delay>
 800b728:	e01c      	b.n	800b764 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b72a:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <HAL_RCC_OscConfig+0x274>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b730:	f7fd fe92 	bl	8009458 <HAL_GetTick>
 800b734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b736:	e00f      	b.n	800b758 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b738:	f7fd fe8e 	bl	8009458 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b02      	cmp	r3, #2
 800b744:	d908      	bls.n	800b758 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e146      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
 800b74a:	bf00      	nop
 800b74c:	40021000 	.word	0x40021000
 800b750:	42420000 	.word	0x42420000
 800b754:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b758:	4b92      	ldr	r3, [pc, #584]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1e9      	bne.n	800b738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80a6 	beq.w	800b8be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b776:	4b8b      	ldr	r3, [pc, #556]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10d      	bne.n	800b79e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b782:	4b88      	ldr	r3, [pc, #544]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b784:	69db      	ldr	r3, [r3, #28]
 800b786:	4a87      	ldr	r2, [pc, #540]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b78c:	61d3      	str	r3, [r2, #28]
 800b78e:	4b85      	ldr	r3, [pc, #532]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b796:	60bb      	str	r3, [r7, #8]
 800b798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b79a:	2301      	movs	r3, #1
 800b79c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b79e:	4b82      	ldr	r3, [pc, #520]	@ (800b9a8 <HAL_RCC_OscConfig+0x4c8>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d118      	bne.n	800b7dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b7aa:	4b7f      	ldr	r3, [pc, #508]	@ (800b9a8 <HAL_RCC_OscConfig+0x4c8>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a7e      	ldr	r2, [pc, #504]	@ (800b9a8 <HAL_RCC_OscConfig+0x4c8>)
 800b7b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7b6:	f7fd fe4f 	bl	8009458 <HAL_GetTick>
 800b7ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7bc:	e008      	b.n	800b7d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7be:	f7fd fe4b 	bl	8009458 <HAL_GetTick>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	2b64      	cmp	r3, #100	@ 0x64
 800b7ca:	d901      	bls.n	800b7d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e103      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7d0:	4b75      	ldr	r3, [pc, #468]	@ (800b9a8 <HAL_RCC_OscConfig+0x4c8>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0f0      	beq.n	800b7be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d106      	bne.n	800b7f2 <HAL_RCC_OscConfig+0x312>
 800b7e4:	4b6f      	ldr	r3, [pc, #444]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	4a6e      	ldr	r2, [pc, #440]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b7ea:	f043 0301 	orr.w	r3, r3, #1
 800b7ee:	6213      	str	r3, [r2, #32]
 800b7f0:	e02d      	b.n	800b84e <HAL_RCC_OscConfig+0x36e>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10c      	bne.n	800b814 <HAL_RCC_OscConfig+0x334>
 800b7fa:	4b6a      	ldr	r3, [pc, #424]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	4a69      	ldr	r2, [pc, #420]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b800:	f023 0301 	bic.w	r3, r3, #1
 800b804:	6213      	str	r3, [r2, #32]
 800b806:	4b67      	ldr	r3, [pc, #412]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	4a66      	ldr	r2, [pc, #408]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b80c:	f023 0304 	bic.w	r3, r3, #4
 800b810:	6213      	str	r3, [r2, #32]
 800b812:	e01c      	b.n	800b84e <HAL_RCC_OscConfig+0x36e>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	2b05      	cmp	r3, #5
 800b81a:	d10c      	bne.n	800b836 <HAL_RCC_OscConfig+0x356>
 800b81c:	4b61      	ldr	r3, [pc, #388]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	4a60      	ldr	r2, [pc, #384]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b822:	f043 0304 	orr.w	r3, r3, #4
 800b826:	6213      	str	r3, [r2, #32]
 800b828:	4b5e      	ldr	r3, [pc, #376]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	4a5d      	ldr	r2, [pc, #372]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	6213      	str	r3, [r2, #32]
 800b834:	e00b      	b.n	800b84e <HAL_RCC_OscConfig+0x36e>
 800b836:	4b5b      	ldr	r3, [pc, #364]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	4a5a      	ldr	r2, [pc, #360]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b83c:	f023 0301 	bic.w	r3, r3, #1
 800b840:	6213      	str	r3, [r2, #32]
 800b842:	4b58      	ldr	r3, [pc, #352]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	4a57      	ldr	r2, [pc, #348]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b848:	f023 0304 	bic.w	r3, r3, #4
 800b84c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d015      	beq.n	800b882 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b856:	f7fd fdff 	bl	8009458 <HAL_GetTick>
 800b85a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b85c:	e00a      	b.n	800b874 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b85e:	f7fd fdfb 	bl	8009458 <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d901      	bls.n	800b874 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	e0b1      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b874:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	f003 0302 	and.w	r3, r3, #2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d0ee      	beq.n	800b85e <HAL_RCC_OscConfig+0x37e>
 800b880:	e014      	b.n	800b8ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b882:	f7fd fde9 	bl	8009458 <HAL_GetTick>
 800b886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b888:	e00a      	b.n	800b8a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b88a:	f7fd fde5 	bl	8009458 <HAL_GetTick>
 800b88e:	4602      	mov	r2, r0
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b898:	4293      	cmp	r3, r2
 800b89a:	d901      	bls.n	800b8a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e09b      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8a0:	4b40      	ldr	r3, [pc, #256]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	f003 0302 	and.w	r3, r3, #2
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1ee      	bne.n	800b88a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d105      	bne.n	800b8be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8b2:	4b3c      	ldr	r3, [pc, #240]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	4a3b      	ldr	r2, [pc, #236]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b8b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 8087 	beq.w	800b9d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b8c8:	4b36      	ldr	r3, [pc, #216]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	f003 030c 	and.w	r3, r3, #12
 800b8d0:	2b08      	cmp	r3, #8
 800b8d2:	d061      	beq.n	800b998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d146      	bne.n	800b96a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8dc:	4b33      	ldr	r3, [pc, #204]	@ (800b9ac <HAL_RCC_OscConfig+0x4cc>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8e2:	f7fd fdb9 	bl	8009458 <HAL_GetTick>
 800b8e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8e8:	e008      	b.n	800b8fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8ea:	f7fd fdb5 	bl	8009458 <HAL_GetTick>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d901      	bls.n	800b8fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e06d      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8fc:	4b29      	ldr	r3, [pc, #164]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f0      	bne.n	800b8ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b910:	d108      	bne.n	800b924 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b912:	4b24      	ldr	r3, [pc, #144]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	4921      	ldr	r1, [pc, #132]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b920:	4313      	orrs	r3, r2
 800b922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b924:	4b1f      	ldr	r3, [pc, #124]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a19      	ldr	r1, [r3, #32]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b934:	430b      	orrs	r3, r1
 800b936:	491b      	ldr	r1, [pc, #108]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b938:	4313      	orrs	r3, r2
 800b93a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b93c:	4b1b      	ldr	r3, [pc, #108]	@ (800b9ac <HAL_RCC_OscConfig+0x4cc>)
 800b93e:	2201      	movs	r2, #1
 800b940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b942:	f7fd fd89 	bl	8009458 <HAL_GetTick>
 800b946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b948:	e008      	b.n	800b95c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b94a:	f7fd fd85 	bl	8009458 <HAL_GetTick>
 800b94e:	4602      	mov	r2, r0
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	2b02      	cmp	r3, #2
 800b956:	d901      	bls.n	800b95c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e03d      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b95c:	4b11      	ldr	r3, [pc, #68]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d0f0      	beq.n	800b94a <HAL_RCC_OscConfig+0x46a>
 800b968:	e035      	b.n	800b9d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b96a:	4b10      	ldr	r3, [pc, #64]	@ (800b9ac <HAL_RCC_OscConfig+0x4cc>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b970:	f7fd fd72 	bl	8009458 <HAL_GetTick>
 800b974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b976:	e008      	b.n	800b98a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b978:	f7fd fd6e 	bl	8009458 <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	2b02      	cmp	r3, #2
 800b984:	d901      	bls.n	800b98a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e026      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b98a:	4b06      	ldr	r3, [pc, #24]	@ (800b9a4 <HAL_RCC_OscConfig+0x4c4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1f0      	bne.n	800b978 <HAL_RCC_OscConfig+0x498>
 800b996:	e01e      	b.n	800b9d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d107      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e019      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
 800b9a4:	40021000 	.word	0x40021000
 800b9a8:	40007000 	.word	0x40007000
 800b9ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e0 <HAL_RCC_OscConfig+0x500>)
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d106      	bne.n	800b9d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d001      	beq.n	800b9d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e000      	b.n	800b9d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	40021000 	.word	0x40021000

0800b9e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e0d0      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9f8:	4b6a      	ldr	r3, [pc, #424]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 0307 	and.w	r3, r3, #7
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d910      	bls.n	800ba28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba06:	4b67      	ldr	r3, [pc, #412]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f023 0207 	bic.w	r2, r3, #7
 800ba0e:	4965      	ldr	r1, [pc, #404]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba16:	4b63      	ldr	r3, [pc, #396]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0307 	and.w	r3, r3, #7
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d001      	beq.n	800ba28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e0b8      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d020      	beq.n	800ba76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0304 	and.w	r3, r3, #4
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba40:	4b59      	ldr	r3, [pc, #356]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	4a58      	ldr	r2, [pc, #352]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ba4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0308 	and.w	r3, r3, #8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba58:	4b53      	ldr	r3, [pc, #332]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4a52      	ldr	r2, [pc, #328]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800ba62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba64:	4b50      	ldr	r3, [pc, #320]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	494d      	ldr	r1, [pc, #308]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d040      	beq.n	800bb04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d107      	bne.n	800ba9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba8a:	4b47      	ldr	r3, [pc, #284]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d115      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e07f      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d107      	bne.n	800bab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800baa2:	4b41      	ldr	r3, [pc, #260]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d109      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e073      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bab2:	4b3d      	ldr	r3, [pc, #244]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e06b      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bac2:	4b39      	ldr	r3, [pc, #228]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f023 0203 	bic.w	r2, r3, #3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	4936      	ldr	r1, [pc, #216]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bad4:	f7fd fcc0 	bl	8009458 <HAL_GetTick>
 800bad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bada:	e00a      	b.n	800baf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800badc:	f7fd fcbc 	bl	8009458 <HAL_GetTick>
 800bae0:	4602      	mov	r2, r0
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baea:	4293      	cmp	r3, r2
 800baec:	d901      	bls.n	800baf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e053      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baf2:	4b2d      	ldr	r3, [pc, #180]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	f003 020c 	and.w	r2, r3, #12
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d1eb      	bne.n	800badc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb04:	4b27      	ldr	r3, [pc, #156]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d210      	bcs.n	800bb34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb12:	4b24      	ldr	r3, [pc, #144]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f023 0207 	bic.w	r2, r3, #7
 800bb1a:	4922      	ldr	r1, [pc, #136]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb22:	4b20      	ldr	r3, [pc, #128]	@ (800bba4 <HAL_RCC_ClockConfig+0x1c0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0307 	and.w	r3, r3, #7
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d001      	beq.n	800bb34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e032      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb40:	4b19      	ldr	r3, [pc, #100]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	4916      	ldr	r1, [pc, #88]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d009      	beq.n	800bb72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bb5e:	4b12      	ldr	r3, [pc, #72]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	490e      	ldr	r1, [pc, #56]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb72:	f000 f821 	bl	800bbb8 <HAL_RCC_GetSysClockFreq>
 800bb76:	4602      	mov	r2, r0
 800bb78:	4b0b      	ldr	r3, [pc, #44]	@ (800bba8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	f003 030f 	and.w	r3, r3, #15
 800bb82:	490a      	ldr	r1, [pc, #40]	@ (800bbac <HAL_RCC_ClockConfig+0x1c8>)
 800bb84:	5ccb      	ldrb	r3, [r1, r3]
 800bb86:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8a:	4a09      	ldr	r2, [pc, #36]	@ (800bbb0 <HAL_RCC_ClockConfig+0x1cc>)
 800bb8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bb8e:	4b09      	ldr	r3, [pc, #36]	@ (800bbb4 <HAL_RCC_ClockConfig+0x1d0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fd fc1e 	bl	80093d4 <HAL_InitTick>

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	40022000 	.word	0x40022000
 800bba8:	40021000 	.word	0x40021000
 800bbac:	0800dda4 	.word	0x0800dda4
 800bbb0:	20000f78 	.word	0x20000f78
 800bbb4:	20000f7c 	.word	0x20000f7c

0800bbb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60fb      	str	r3, [r7, #12]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60bb      	str	r3, [r7, #8]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	617b      	str	r3, [r7, #20]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bbd2:	4b1e      	ldr	r3, [pc, #120]	@ (800bc4c <HAL_RCC_GetSysClockFreq+0x94>)
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f003 030c 	and.w	r3, r3, #12
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d002      	beq.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x30>
 800bbe2:	2b08      	cmp	r3, #8
 800bbe4:	d003      	beq.n	800bbee <HAL_RCC_GetSysClockFreq+0x36>
 800bbe6:	e027      	b.n	800bc38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bbe8:	4b19      	ldr	r3, [pc, #100]	@ (800bc50 <HAL_RCC_GetSysClockFreq+0x98>)
 800bbea:	613b      	str	r3, [r7, #16]
      break;
 800bbec:	e027      	b.n	800bc3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	0c9b      	lsrs	r3, r3, #18
 800bbf2:	f003 030f 	and.w	r3, r3, #15
 800bbf6:	4a17      	ldr	r2, [pc, #92]	@ (800bc54 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bbf8:	5cd3      	ldrb	r3, [r2, r3]
 800bbfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d010      	beq.n	800bc28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bc06:	4b11      	ldr	r3, [pc, #68]	@ (800bc4c <HAL_RCC_GetSysClockFreq+0x94>)
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	0c5b      	lsrs	r3, r3, #17
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	4a11      	ldr	r2, [pc, #68]	@ (800bc58 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bc12:	5cd3      	ldrb	r3, [r2, r3]
 800bc14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a0d      	ldr	r2, [pc, #52]	@ (800bc50 <HAL_RCC_GetSysClockFreq+0x98>)
 800bc1a:	fb03 f202 	mul.w	r2, r3, r2
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc24:	617b      	str	r3, [r7, #20]
 800bc26:	e004      	b.n	800bc32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a0c      	ldr	r2, [pc, #48]	@ (800bc5c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bc2c:	fb02 f303 	mul.w	r3, r2, r3
 800bc30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	613b      	str	r3, [r7, #16]
      break;
 800bc36:	e002      	b.n	800bc3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <HAL_RCC_GetSysClockFreq+0x98>)
 800bc3a:	613b      	str	r3, [r7, #16]
      break;
 800bc3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc3e:	693b      	ldr	r3, [r7, #16]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	371c      	adds	r7, #28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bc80      	pop	{r7}
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	40021000 	.word	0x40021000
 800bc50:	007a1200 	.word	0x007a1200
 800bc54:	0800ddbc 	.word	0x0800ddbc
 800bc58:	0800ddcc 	.word	0x0800ddcc
 800bc5c:	003d0900 	.word	0x003d0900

0800bc60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc64:	4b02      	ldr	r3, [pc, #8]	@ (800bc70 <HAL_RCC_GetHCLKFreq+0x10>)
 800bc66:	681b      	ldr	r3, [r3, #0]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bc80      	pop	{r7}
 800bc6e:	4770      	bx	lr
 800bc70:	20000f78 	.word	0x20000f78

0800bc74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc78:	f7ff fff2 	bl	800bc60 <HAL_RCC_GetHCLKFreq>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	4b05      	ldr	r3, [pc, #20]	@ (800bc94 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	0a1b      	lsrs	r3, r3, #8
 800bc84:	f003 0307 	and.w	r3, r3, #7
 800bc88:	4903      	ldr	r1, [pc, #12]	@ (800bc98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc8a:	5ccb      	ldrb	r3, [r1, r3]
 800bc8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	40021000 	.word	0x40021000
 800bc98:	0800ddb4 	.word	0x0800ddb4

0800bc9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bca0:	f7ff ffde 	bl	800bc60 <HAL_RCC_GetHCLKFreq>
 800bca4:	4602      	mov	r2, r0
 800bca6:	4b05      	ldr	r3, [pc, #20]	@ (800bcbc <HAL_RCC_GetPCLK2Freq+0x20>)
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	0adb      	lsrs	r3, r3, #11
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	4903      	ldr	r1, [pc, #12]	@ (800bcc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcb2:	5ccb      	ldrb	r3, [r1, r3]
 800bcb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	40021000 	.word	0x40021000
 800bcc0:	0800ddb4 	.word	0x0800ddb4

0800bcc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bccc:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf8 <RCC_Delay+0x34>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a0a      	ldr	r2, [pc, #40]	@ (800bcfc <RCC_Delay+0x38>)
 800bcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd6:	0a5b      	lsrs	r3, r3, #9
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	fb02 f303 	mul.w	r3, r2, r3
 800bcde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bce0:	bf00      	nop
  }
  while (Delay --);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	1e5a      	subs	r2, r3, #1
 800bce6:	60fa      	str	r2, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1f9      	bne.n	800bce0 <RCC_Delay+0x1c>
}
 800bcec:	bf00      	nop
 800bcee:	bf00      	nop
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr
 800bcf8:	20000f78 	.word	0x20000f78
 800bcfc:	10624dd3 	.word	0x10624dd3

0800bd00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e041      	b.n	800bd96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fd fa22 	bl	8009170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f000 fa82 	bl	800c248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d001      	beq.n	800bdb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e044      	b.n	800be42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0201 	orr.w	r2, r2, #1
 800bdce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a1d      	ldr	r2, [pc, #116]	@ (800be4c <HAL_TIM_Base_Start_IT+0xac>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d018      	beq.n	800be0c <HAL_TIM_Base_Start_IT+0x6c>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a1c      	ldr	r2, [pc, #112]	@ (800be50 <HAL_TIM_Base_Start_IT+0xb0>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d013      	beq.n	800be0c <HAL_TIM_Base_Start_IT+0x6c>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdec:	d00e      	beq.n	800be0c <HAL_TIM_Base_Start_IT+0x6c>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a18      	ldr	r2, [pc, #96]	@ (800be54 <HAL_TIM_Base_Start_IT+0xb4>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d009      	beq.n	800be0c <HAL_TIM_Base_Start_IT+0x6c>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a16      	ldr	r2, [pc, #88]	@ (800be58 <HAL_TIM_Base_Start_IT+0xb8>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d004      	beq.n	800be0c <HAL_TIM_Base_Start_IT+0x6c>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a15      	ldr	r2, [pc, #84]	@ (800be5c <HAL_TIM_Base_Start_IT+0xbc>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d111      	bne.n	800be30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f003 0307 	and.w	r3, r3, #7
 800be16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b06      	cmp	r3, #6
 800be1c:	d010      	beq.n	800be40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f042 0201 	orr.w	r2, r2, #1
 800be2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be2e:	e007      	b.n	800be40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f042 0201 	orr.w	r2, r2, #1
 800be3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	bc80      	pop	{r7}
 800be4a:	4770      	bx	lr
 800be4c:	40012c00 	.word	0x40012c00
 800be50:	40013400 	.word	0x40013400
 800be54:	40000400 	.word	0x40000400
 800be58:	40000800 	.word	0x40000800
 800be5c:	40000c00 	.word	0x40000c00

0800be60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	f003 0302 	and.w	r3, r3, #2
 800be72:	2b02      	cmp	r3, #2
 800be74:	d122      	bne.n	800bebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b02      	cmp	r3, #2
 800be82:	d11b      	bne.n	800bebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f06f 0202 	mvn.w	r2, #2
 800be8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	f003 0303 	and.w	r3, r3, #3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f9b4 	bl	800c210 <HAL_TIM_IC_CaptureCallback>
 800bea8:	e005      	b.n	800beb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f9a7 	bl	800c1fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f9b6 	bl	800c222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	f003 0304 	and.w	r3, r3, #4
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	d122      	bne.n	800bf10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b04      	cmp	r3, #4
 800bed6:	d11b      	bne.n	800bf10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f06f 0204 	mvn.w	r2, #4
 800bee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2202      	movs	r2, #2
 800bee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f98a 	bl	800c210 <HAL_TIM_IC_CaptureCallback>
 800befc:	e005      	b.n	800bf0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f97d 	bl	800c1fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f98c 	bl	800c222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	f003 0308 	and.w	r3, r3, #8
 800bf1a:	2b08      	cmp	r3, #8
 800bf1c:	d122      	bne.n	800bf64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f003 0308 	and.w	r3, r3, #8
 800bf28:	2b08      	cmp	r3, #8
 800bf2a:	d11b      	bne.n	800bf64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f06f 0208 	mvn.w	r2, #8
 800bf34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2204      	movs	r2, #4
 800bf3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	69db      	ldr	r3, [r3, #28]
 800bf42:	f003 0303 	and.w	r3, r3, #3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f960 	bl	800c210 <HAL_TIM_IC_CaptureCallback>
 800bf50:	e005      	b.n	800bf5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f953 	bl	800c1fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f962 	bl	800c222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	f003 0310 	and.w	r3, r3, #16
 800bf6e:	2b10      	cmp	r3, #16
 800bf70:	d122      	bne.n	800bfb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f003 0310 	and.w	r3, r3, #16
 800bf7c:	2b10      	cmp	r3, #16
 800bf7e:	d11b      	bne.n	800bfb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f06f 0210 	mvn.w	r2, #16
 800bf88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f936 	bl	800c210 <HAL_TIM_IC_CaptureCallback>
 800bfa4:	e005      	b.n	800bfb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f929 	bl	800c1fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f938 	bl	800c222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d10e      	bne.n	800bfe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	f003 0301 	and.w	r3, r3, #1
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d107      	bne.n	800bfe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f06f 0201 	mvn.w	r2, #1
 800bfdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fc fd5e 	bl	8008aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfee:	2b80      	cmp	r3, #128	@ 0x80
 800bff0:	d10e      	bne.n	800c010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bffc:	2b80      	cmp	r3, #128	@ 0x80
 800bffe:	d107      	bne.n	800c010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 faa1 	bl	800c552 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01a:	2b40      	cmp	r3, #64	@ 0x40
 800c01c:	d10e      	bne.n	800c03c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c028:	2b40      	cmp	r3, #64	@ 0x40
 800c02a:	d107      	bne.n	800c03c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f8fc 	bl	800c234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	f003 0320 	and.w	r3, r3, #32
 800c046:	2b20      	cmp	r3, #32
 800c048:	d10e      	bne.n	800c068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f003 0320 	and.w	r3, r3, #32
 800c054:	2b20      	cmp	r3, #32
 800c056:	d107      	bne.n	800c068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f06f 0220 	mvn.w	r2, #32
 800c060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa6c 	bl	800c540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c068:	bf00      	nop
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c084:	2b01      	cmp	r3, #1
 800c086:	d101      	bne.n	800c08c <HAL_TIM_ConfigClockSource+0x1c>
 800c088:	2302      	movs	r3, #2
 800c08a:	e0b4      	b.n	800c1f6 <HAL_TIM_ConfigClockSource+0x186>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c0aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c0b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0c4:	d03e      	beq.n	800c144 <HAL_TIM_ConfigClockSource+0xd4>
 800c0c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0ca:	f200 8087 	bhi.w	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c0ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0d2:	f000 8086 	beq.w	800c1e2 <HAL_TIM_ConfigClockSource+0x172>
 800c0d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0da:	d87f      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c0dc:	2b70      	cmp	r3, #112	@ 0x70
 800c0de:	d01a      	beq.n	800c116 <HAL_TIM_ConfigClockSource+0xa6>
 800c0e0:	2b70      	cmp	r3, #112	@ 0x70
 800c0e2:	d87b      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c0e4:	2b60      	cmp	r3, #96	@ 0x60
 800c0e6:	d050      	beq.n	800c18a <HAL_TIM_ConfigClockSource+0x11a>
 800c0e8:	2b60      	cmp	r3, #96	@ 0x60
 800c0ea:	d877      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c0ec:	2b50      	cmp	r3, #80	@ 0x50
 800c0ee:	d03c      	beq.n	800c16a <HAL_TIM_ConfigClockSource+0xfa>
 800c0f0:	2b50      	cmp	r3, #80	@ 0x50
 800c0f2:	d873      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c0f4:	2b40      	cmp	r3, #64	@ 0x40
 800c0f6:	d058      	beq.n	800c1aa <HAL_TIM_ConfigClockSource+0x13a>
 800c0f8:	2b40      	cmp	r3, #64	@ 0x40
 800c0fa:	d86f      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c0fc:	2b30      	cmp	r3, #48	@ 0x30
 800c0fe:	d064      	beq.n	800c1ca <HAL_TIM_ConfigClockSource+0x15a>
 800c100:	2b30      	cmp	r3, #48	@ 0x30
 800c102:	d86b      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c104:	2b20      	cmp	r3, #32
 800c106:	d060      	beq.n	800c1ca <HAL_TIM_ConfigClockSource+0x15a>
 800c108:	2b20      	cmp	r3, #32
 800c10a:	d867      	bhi.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d05c      	beq.n	800c1ca <HAL_TIM_ConfigClockSource+0x15a>
 800c110:	2b10      	cmp	r3, #16
 800c112:	d05a      	beq.n	800c1ca <HAL_TIM_ConfigClockSource+0x15a>
 800c114:	e062      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c126:	f000 f980 	bl	800c42a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	609a      	str	r2, [r3, #8]
      break;
 800c142:	e04f      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c154:	f000 f969 	bl	800c42a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	689a      	ldr	r2, [r3, #8]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c166:	609a      	str	r2, [r3, #8]
      break;
 800c168:	e03c      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c176:	461a      	mov	r2, r3
 800c178:	f000 f8e0 	bl	800c33c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2150      	movs	r1, #80	@ 0x50
 800c182:	4618      	mov	r0, r3
 800c184:	f000 f937 	bl	800c3f6 <TIM_ITRx_SetConfig>
      break;
 800c188:	e02c      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c196:	461a      	mov	r2, r3
 800c198:	f000 f8fe 	bl	800c398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2160      	movs	r1, #96	@ 0x60
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 f927 	bl	800c3f6 <TIM_ITRx_SetConfig>
      break;
 800c1a8:	e01c      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f000 f8c0 	bl	800c33c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2140      	movs	r1, #64	@ 0x40
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 f917 	bl	800c3f6 <TIM_ITRx_SetConfig>
      break;
 800c1c8:	e00c      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f000 f90e 	bl	800c3f6 <TIM_ITRx_SetConfig>
      break;
 800c1da:	e003      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e0:	e000      	b.n	800c1e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c1e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c206:	bf00      	nop
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bc80      	pop	{r7}
 800c20e:	4770      	bx	lr

0800c210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bc80      	pop	{r7}
 800c220:	4770      	bx	lr

0800c222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	bc80      	pop	{r7}
 800c232:	4770      	bx	lr

0800c234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	bc80      	pop	{r7}
 800c244:	4770      	bx	lr
	...

0800c248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a33      	ldr	r2, [pc, #204]	@ (800c328 <TIM_Base_SetConfig+0xe0>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d013      	beq.n	800c288 <TIM_Base_SetConfig+0x40>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a32      	ldr	r2, [pc, #200]	@ (800c32c <TIM_Base_SetConfig+0xe4>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d00f      	beq.n	800c288 <TIM_Base_SetConfig+0x40>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c26e:	d00b      	beq.n	800c288 <TIM_Base_SetConfig+0x40>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a2f      	ldr	r2, [pc, #188]	@ (800c330 <TIM_Base_SetConfig+0xe8>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d007      	beq.n	800c288 <TIM_Base_SetConfig+0x40>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a2e      	ldr	r2, [pc, #184]	@ (800c334 <TIM_Base_SetConfig+0xec>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d003      	beq.n	800c288 <TIM_Base_SetConfig+0x40>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a2d      	ldr	r2, [pc, #180]	@ (800c338 <TIM_Base_SetConfig+0xf0>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d108      	bne.n	800c29a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c28e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	4313      	orrs	r3, r2
 800c298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a22      	ldr	r2, [pc, #136]	@ (800c328 <TIM_Base_SetConfig+0xe0>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d013      	beq.n	800c2ca <TIM_Base_SetConfig+0x82>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a21      	ldr	r2, [pc, #132]	@ (800c32c <TIM_Base_SetConfig+0xe4>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d00f      	beq.n	800c2ca <TIM_Base_SetConfig+0x82>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2b0:	d00b      	beq.n	800c2ca <TIM_Base_SetConfig+0x82>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a1e      	ldr	r2, [pc, #120]	@ (800c330 <TIM_Base_SetConfig+0xe8>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d007      	beq.n	800c2ca <TIM_Base_SetConfig+0x82>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c334 <TIM_Base_SetConfig+0xec>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d003      	beq.n	800c2ca <TIM_Base_SetConfig+0x82>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c338 <TIM_Base_SetConfig+0xf0>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d108      	bne.n	800c2dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a09      	ldr	r2, [pc, #36]	@ (800c328 <TIM_Base_SetConfig+0xe0>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d003      	beq.n	800c310 <TIM_Base_SetConfig+0xc8>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a08      	ldr	r2, [pc, #32]	@ (800c32c <TIM_Base_SetConfig+0xe4>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d103      	bne.n	800c318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	691a      	ldr	r2, [r3, #16]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	615a      	str	r2, [r3, #20]
}
 800c31e:	bf00      	nop
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	bc80      	pop	{r7}
 800c326:	4770      	bx	lr
 800c328:	40012c00 	.word	0x40012c00
 800c32c:	40013400 	.word	0x40013400
 800c330:	40000400 	.word	0x40000400
 800c334:	40000800 	.word	0x40000800
 800c338:	40000c00 	.word	0x40000c00

0800c33c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6a1b      	ldr	r3, [r3, #32]
 800c34c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	f023 0201 	bic.w	r2, r3, #1
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	011b      	lsls	r3, r3, #4
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4313      	orrs	r3, r2
 800c370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f023 030a 	bic.w	r3, r3, #10
 800c378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	4313      	orrs	r3, r2
 800c380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	697a      	ldr	r2, [r7, #20]
 800c38c:	621a      	str	r2, [r3, #32]
}
 800c38e:	bf00      	nop
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	bc80      	pop	{r7}
 800c396:	4770      	bx	lr

0800c398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c398:	b480      	push	{r7}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	f023 0210 	bic.w	r2, r3, #16
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c3c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	031b      	lsls	r3, r3, #12
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c3d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	621a      	str	r2, [r3, #32]
}
 800c3ec:	bf00      	nop
 800c3ee:	371c      	adds	r7, #28
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bc80      	pop	{r7}
 800c3f4:	4770      	bx	lr

0800c3f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b085      	sub	sp, #20
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c40c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	f043 0307 	orr.w	r3, r3, #7
 800c418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	609a      	str	r2, [r3, #8]
}
 800c420:	bf00      	nop
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr

0800c42a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b087      	sub	sp, #28
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c444:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	021a      	lsls	r2, r3, #8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	431a      	orrs	r2, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	4313      	orrs	r3, r2
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	4313      	orrs	r3, r2
 800c456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	609a      	str	r2, [r3, #8]
}
 800c45e:	bf00      	nop
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr

0800c468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d101      	bne.n	800c480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c47c:	2302      	movs	r3, #2
 800c47e:	e050      	b.n	800c522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2202      	movs	r2, #2
 800c48c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a1b      	ldr	r2, [pc, #108]	@ (800c52c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d018      	beq.n	800c4f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a19      	ldr	r2, [pc, #100]	@ (800c530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d013      	beq.n	800c4f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4d6:	d00e      	beq.n	800c4f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a15      	ldr	r2, [pc, #84]	@ (800c534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d009      	beq.n	800c4f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a14      	ldr	r2, [pc, #80]	@ (800c538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d004      	beq.n	800c4f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a12      	ldr	r2, [pc, #72]	@ (800c53c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d10c      	bne.n	800c510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	4313      	orrs	r3, r2
 800c506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	bc80      	pop	{r7}
 800c52a:	4770      	bx	lr
 800c52c:	40012c00 	.word	0x40012c00
 800c530:	40013400 	.word	0x40013400
 800c534:	40000400 	.word	0x40000400
 800c538:	40000800 	.word	0x40000800
 800c53c:	40000c00 	.word	0x40000c00

0800c540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c548:	bf00      	nop
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bc80      	pop	{r7}
 800c550:	4770      	bx	lr

0800c552 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c552:	b480      	push	{r7}
 800c554:	b083      	sub	sp, #12
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c55a:	bf00      	nop
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	bc80      	pop	{r7}
 800c562:	4770      	bx	lr

0800c564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e042      	b.n	800c5fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d106      	bne.n	800c590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fc fe16 	bl	80091bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2224      	movs	r2, #36	@ 0x24
 800c594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68da      	ldr	r2, [r3, #12]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c5a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fcb5 	bl	800cf18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	691a      	ldr	r2, [r3, #16]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	695a      	ldr	r2, [r3, #20]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c5dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	4613      	mov	r3, r2
 800c610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d121      	bne.n	800c662 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <HAL_UART_Transmit_IT+0x26>
 800c624:	88fb      	ldrh	r3, [r7, #6]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e01a      	b.n	800c664 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	88fa      	ldrh	r2, [r7, #6]
 800c638:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	88fa      	ldrh	r2, [r7, #6]
 800c63e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2221      	movs	r2, #33	@ 0x21
 800c64a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68da      	ldr	r2, [r3, #12]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c65c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	e000      	b.n	800c664 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c662:	2302      	movs	r3, #2
  }
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	bc80      	pop	{r7}
 800c66c:	4770      	bx	lr
	...

0800c670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b0ba      	sub	sp, #232	@ 0xe8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c696:	2300      	movs	r3, #0
 800c698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c69c:	2300      	movs	r3, #0
 800c69e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6a6:	f003 030f 	and.w	r3, r3, #15
 800c6aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c6ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10f      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ba:	f003 0320 	and.w	r3, r3, #32
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d009      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x66>
 800c6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c6:	f003 0320 	and.w	r3, r3, #32
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fb63 	bl	800cd9a <UART_Receive_IT>
      return;
 800c6d4:	e25b      	b.n	800cb8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c6d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 80de 	beq.w	800c89c <HAL_UART_IRQHandler+0x22c>
 800c6e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d106      	bne.n	800c6fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 80d1 	beq.w	800c89c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00b      	beq.n	800c71e <HAL_UART_IRQHandler+0xae>
 800c706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c70a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d005      	beq.n	800c71e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c716:	f043 0201 	orr.w	r2, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c722:	f003 0304 	and.w	r3, r3, #4
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <HAL_UART_IRQHandler+0xd2>
 800c72a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c73a:	f043 0202 	orr.w	r2, r3, #2
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00b      	beq.n	800c766 <HAL_UART_IRQHandler+0xf6>
 800c74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c75e:	f043 0204 	orr.w	r2, r3, #4
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c76a:	f003 0308 	and.w	r3, r3, #8
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d011      	beq.n	800c796 <HAL_UART_IRQHandler+0x126>
 800c772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c776:	f003 0320 	and.w	r3, r3, #32
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d105      	bne.n	800c78a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c77e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	d005      	beq.n	800c796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c78e:	f043 0208 	orr.w	r2, r3, #8
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 81f2 	beq.w	800cb84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d008      	beq.n	800c7be <HAL_UART_IRQHandler+0x14e>
 800c7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 faee 	bl	800cd9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bf14      	ite	ne
 800c7cc:	2301      	movne	r3, #1
 800c7ce:	2300      	moveq	r3, #0
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7da:	f003 0308 	and.w	r3, r3, #8
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d103      	bne.n	800c7ea <HAL_UART_IRQHandler+0x17a>
 800c7e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d04f      	beq.n	800c88a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f9f8 	bl	800cbe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d041      	beq.n	800c882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3314      	adds	r3, #20
 800c804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c80c:	e853 3f00 	ldrex	r3, [r3]
 800c810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c81c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3314      	adds	r3, #20
 800c826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c82a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c82e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1d9      	bne.n	800c7fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d013      	beq.n	800c87a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c856:	4a7e      	ldr	r2, [pc, #504]	@ (800ca50 <HAL_UART_IRQHandler+0x3e0>)
 800c858:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fd f86c 	bl	800993c <HAL_DMA_Abort_IT>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d016      	beq.n	800c898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c878:	e00e      	b.n	800c898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f99c 	bl	800cbb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c880:	e00a      	b.n	800c898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f998 	bl	800cbb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c888:	e006      	b.n	800c898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f994 	bl	800cbb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c896:	e175      	b.n	800cb84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c898:	bf00      	nop
    return;
 800c89a:	e173      	b.n	800cb84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	f040 814f 	bne.w	800cb44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8aa:	f003 0310 	and.w	r3, r3, #16
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 8148 	beq.w	800cb44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 8141 	beq.w	800cb44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	60bb      	str	r3, [r7, #8]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	60bb      	str	r3, [r7, #8]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	60bb      	str	r3, [r7, #8]
 800c8d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80b6 	beq.w	800ca54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 8145 	beq.w	800cb88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c906:	429a      	cmp	r2, r3
 800c908:	f080 813e 	bcs.w	800cb88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c912:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	2b20      	cmp	r3, #32
 800c91c:	f000 8088 	beq.w	800ca30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	330c      	adds	r3, #12
 800c926:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c92e:	e853 3f00 	ldrex	r3, [r3]
 800c932:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c936:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c93a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c93e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	330c      	adds	r3, #12
 800c948:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c94c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c954:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c958:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1d9      	bne.n	800c920 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3314      	adds	r3, #20
 800c972:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c976:	e853 3f00 	ldrex	r3, [r3]
 800c97a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c97c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c97e:	f023 0301 	bic.w	r3, r3, #1
 800c982:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3314      	adds	r3, #20
 800c98c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c990:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c994:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c996:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c998:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c99c:	e841 2300 	strex	r3, r2, [r1]
 800c9a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c9a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e1      	bne.n	800c96c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3314      	adds	r3, #20
 800c9ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c9b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c9cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c9ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c9d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9d4:	e841 2300 	strex	r3, r2, [r1]
 800c9d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c9da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1e3      	bne.n	800c9a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	330c      	adds	r3, #12
 800c9f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9f8:	e853 3f00 	ldrex	r3, [r3]
 800c9fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca00:	f023 0310 	bic.w	r3, r3, #16
 800ca04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	330c      	adds	r3, #12
 800ca0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ca12:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ca14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca1a:	e841 2300 	strex	r3, r2, [r1]
 800ca1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1e3      	bne.n	800c9ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fc ff4b 	bl	80098c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2202      	movs	r2, #2
 800ca34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f8bf 	bl	800cbca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca4c:	e09c      	b.n	800cb88 <HAL_UART_IRQHandler+0x518>
 800ca4e:	bf00      	nop
 800ca50:	0800cca5 	.word	0x0800cca5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f000 808e 	beq.w	800cb8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ca70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f000 8089 	beq.w	800cb8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	330c      	adds	r3, #12
 800ca80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca84:	e853 3f00 	ldrex	r3, [r3]
 800ca88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	330c      	adds	r3, #12
 800ca9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ca9e:	647a      	str	r2, [r7, #68]	@ 0x44
 800caa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800caa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800caac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e3      	bne.n	800ca7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3314      	adds	r3, #20
 800cab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	623b      	str	r3, [r7, #32]
   return(result);
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	f023 0301 	bic.w	r3, r3, #1
 800cac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3314      	adds	r3, #20
 800cad2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cad6:	633a      	str	r2, [r7, #48]	@ 0x30
 800cad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cadc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cade:	e841 2300 	strex	r3, r2, [r1]
 800cae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e3      	bne.n	800cab2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	330c      	adds	r3, #12
 800cafe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	e853 3f00 	ldrex	r3, [r3]
 800cb06:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0310 	bic.w	r3, r3, #16
 800cb0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	330c      	adds	r3, #12
 800cb18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cb1c:	61fa      	str	r2, [r7, #28]
 800cb1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb20:	69b9      	ldr	r1, [r7, #24]
 800cb22:	69fa      	ldr	r2, [r7, #28]
 800cb24:	e841 2300 	strex	r3, r2, [r1]
 800cb28:	617b      	str	r3, [r7, #20]
   return(result);
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e3      	bne.n	800caf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f844 	bl	800cbca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb42:	e023      	b.n	800cb8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d009      	beq.n	800cb64 <HAL_UART_IRQHandler+0x4f4>
 800cb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d003      	beq.n	800cb64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f8b5 	bl	800cccc <UART_Transmit_IT>
    return;
 800cb62:	e014      	b.n	800cb8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00e      	beq.n	800cb8e <HAL_UART_IRQHandler+0x51e>
 800cb70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d008      	beq.n	800cb8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f8f4 	bl	800cd6a <UART_EndTransmit_IT>
    return;
 800cb82:	e004      	b.n	800cb8e <HAL_UART_IRQHandler+0x51e>
    return;
 800cb84:	bf00      	nop
 800cb86:	e002      	b.n	800cb8e <HAL_UART_IRQHandler+0x51e>
      return;
 800cb88:	bf00      	nop
 800cb8a:	e000      	b.n	800cb8e <HAL_UART_IRQHandler+0x51e>
      return;
 800cb8c:	bf00      	nop
  }
}
 800cb8e:	37e8      	adds	r7, #232	@ 0xe8
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bc80      	pop	{r7}
 800cba4:	4770      	bx	lr

0800cba6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cba6:	b480      	push	{r7}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cbae:	bf00      	nop
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bc80      	pop	{r7}
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bc80      	pop	{r7}
 800cbc8:	4770      	bx	lr

0800cbca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbd6:	bf00      	nop
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bc80      	pop	{r7}
 800cbde:	4770      	bx	lr

0800cbe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b095      	sub	sp, #84	@ 0x54
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	330c      	adds	r3, #12
 800cbee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	330c      	adds	r3, #12
 800cc06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc08:	643a      	str	r2, [r7, #64]	@ 0x40
 800cc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc10:	e841 2300 	strex	r3, r2, [r1]
 800cc14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1e5      	bne.n	800cbe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3314      	adds	r3, #20
 800cc22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	e853 3f00 	ldrex	r3, [r3]
 800cc2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f023 0301 	bic.w	r3, r3, #1
 800cc32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3314      	adds	r3, #20
 800cc3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc44:	e841 2300 	strex	r3, r2, [r1]
 800cc48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e5      	bne.n	800cc1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d119      	bne.n	800cc8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	330c      	adds	r3, #12
 800cc5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	e853 3f00 	ldrex	r3, [r3]
 800cc66:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f023 0310 	bic.w	r3, r3, #16
 800cc6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	330c      	adds	r3, #12
 800cc76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc78:	61ba      	str	r2, [r7, #24]
 800cc7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6979      	ldr	r1, [r7, #20]
 800cc7e:	69ba      	ldr	r2, [r7, #24]
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	613b      	str	r3, [r7, #16]
   return(result);
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e5      	bne.n	800cc58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2220      	movs	r2, #32
 800cc90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cc9a:	bf00      	nop
 800cc9c:	3754      	adds	r7, #84	@ 0x54
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bc80      	pop	{r7}
 800cca2:	4770      	bx	lr

0800cca4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7ff ff7a 	bl	800cbb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccc4:	bf00      	nop
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b21      	cmp	r3, #33	@ 0x21
 800ccde:	d13e      	bne.n	800cd5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce8:	d114      	bne.n	800cd14 <UART_Transmit_IT+0x48>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d110      	bne.n	800cd14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	881b      	ldrh	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	1c9a      	adds	r2, r3, #2
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	621a      	str	r2, [r3, #32]
 800cd12:	e008      	b.n	800cd26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	1c59      	adds	r1, r3, #1
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	6211      	str	r1, [r2, #32]
 800cd1e:	781a      	ldrb	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	4619      	mov	r1, r3
 800cd34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10f      	bne.n	800cd5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68da      	ldr	r2, [r3, #12]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68da      	ldr	r2, [r3, #12]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e000      	b.n	800cd60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd5e:	2302      	movs	r3, #2
  }
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bc80      	pop	{r7}
 800cd68:	4770      	bx	lr

0800cd6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2220      	movs	r2, #32
 800cd86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff ff02 	bl	800cb94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b08c      	sub	sp, #48	@ 0x30
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b22      	cmp	r3, #34	@ 0x22
 800cdac:	f040 80ae 	bne.w	800cf0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdb8:	d117      	bne.n	800cdea <UART_Receive_IT+0x50>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d113      	bne.n	800cdea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde2:	1c9a      	adds	r2, r3, #2
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	629a      	str	r2, [r3, #40]	@ 0x28
 800cde8:	e026      	b.n	800ce38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdfc:	d007      	beq.n	800ce0e <UART_Receive_IT+0x74>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10a      	bne.n	800ce1c <UART_Receive_IT+0x82>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	e008      	b.n	800ce2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	4619      	mov	r1, r3
 800ce46:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d15d      	bne.n	800cf08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68da      	ldr	r2, [r3, #12]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0220 	bic.w	r2, r2, #32
 800ce5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	695a      	ldr	r2, [r3, #20]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f022 0201 	bic.w	r2, r2, #1
 800ce7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d135      	bne.n	800cefe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	330c      	adds	r3, #12
 800ce9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	e853 3f00 	ldrex	r3, [r3]
 800cea6:	613b      	str	r3, [r7, #16]
   return(result);
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f023 0310 	bic.w	r3, r3, #16
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	330c      	adds	r3, #12
 800ceb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceb8:	623a      	str	r2, [r7, #32]
 800ceba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebc:	69f9      	ldr	r1, [r7, #28]
 800cebe:	6a3a      	ldr	r2, [r7, #32]
 800cec0:	e841 2300 	strex	r3, r2, [r1]
 800cec4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1e5      	bne.n	800ce98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 0310 	and.w	r3, r3, #16
 800ced6:	2b10      	cmp	r3, #16
 800ced8:	d10a      	bne.n	800cef0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fe67 	bl	800cbca <HAL_UARTEx_RxEventCallback>
 800cefc:	e002      	b.n	800cf04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff fe51 	bl	800cba6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	e002      	b.n	800cf0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	e000      	b.n	800cf0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cf0c:	2302      	movs	r3, #2
  }
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3730      	adds	r7, #48	@ 0x30
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800cf52:	f023 030c 	bic.w	r3, r3, #12
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6812      	ldr	r2, [r2, #0]
 800cf5a:	68b9      	ldr	r1, [r7, #8]
 800cf5c:	430b      	orrs	r3, r1
 800cf5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	699a      	ldr	r2, [r3, #24]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	430a      	orrs	r2, r1
 800cf74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a2c      	ldr	r2, [pc, #176]	@ (800d02c <UART_SetConfig+0x114>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d103      	bne.n	800cf88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cf80:	f7fe fe8c 	bl	800bc9c <HAL_RCC_GetPCLK2Freq>
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	e002      	b.n	800cf8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cf88:	f7fe fe74 	bl	800bc74 <HAL_RCC_GetPCLK1Freq>
 800cf8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	4613      	mov	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	009a      	lsls	r2, r3, #2
 800cf98:	441a      	add	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa4:	4a22      	ldr	r2, [pc, #136]	@ (800d030 <UART_SetConfig+0x118>)
 800cfa6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfaa:	095b      	lsrs	r3, r3, #5
 800cfac:	0119      	lsls	r1, r3, #4
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	009a      	lsls	r2, r3, #2
 800cfb8:	441a      	add	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfc4:	4b1a      	ldr	r3, [pc, #104]	@ (800d030 <UART_SetConfig+0x118>)
 800cfc6:	fba3 0302 	umull	r0, r3, r3, r2
 800cfca:	095b      	lsrs	r3, r3, #5
 800cfcc:	2064      	movs	r0, #100	@ 0x64
 800cfce:	fb00 f303 	mul.w	r3, r0, r3
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	3332      	adds	r3, #50	@ 0x32
 800cfd8:	4a15      	ldr	r2, [pc, #84]	@ (800d030 <UART_SetConfig+0x118>)
 800cfda:	fba2 2303 	umull	r2, r3, r2, r3
 800cfde:	095b      	lsrs	r3, r3, #5
 800cfe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cfe4:	4419      	add	r1, r3
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	009a      	lsls	r2, r3, #2
 800cff0:	441a      	add	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cffc:	4b0c      	ldr	r3, [pc, #48]	@ (800d030 <UART_SetConfig+0x118>)
 800cffe:	fba3 0302 	umull	r0, r3, r3, r2
 800d002:	095b      	lsrs	r3, r3, #5
 800d004:	2064      	movs	r0, #100	@ 0x64
 800d006:	fb00 f303 	mul.w	r3, r0, r3
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	3332      	adds	r3, #50	@ 0x32
 800d010:	4a07      	ldr	r2, [pc, #28]	@ (800d030 <UART_SetConfig+0x118>)
 800d012:	fba2 2303 	umull	r2, r3, r2, r3
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	f003 020f 	and.w	r2, r3, #15
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	440a      	add	r2, r1
 800d022:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d024:	bf00      	nop
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	40013800 	.word	0x40013800
 800d030:	51eb851f 	.word	0x51eb851f

0800d034 <__itoa>:
 800d034:	1e93      	subs	r3, r2, #2
 800d036:	2b22      	cmp	r3, #34	@ 0x22
 800d038:	b510      	push	{r4, lr}
 800d03a:	460c      	mov	r4, r1
 800d03c:	d904      	bls.n	800d048 <__itoa+0x14>
 800d03e:	2300      	movs	r3, #0
 800d040:	461c      	mov	r4, r3
 800d042:	700b      	strb	r3, [r1, #0]
 800d044:	4620      	mov	r0, r4
 800d046:	bd10      	pop	{r4, pc}
 800d048:	2a0a      	cmp	r2, #10
 800d04a:	d109      	bne.n	800d060 <__itoa+0x2c>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	da07      	bge.n	800d060 <__itoa+0x2c>
 800d050:	232d      	movs	r3, #45	@ 0x2d
 800d052:	700b      	strb	r3, [r1, #0]
 800d054:	2101      	movs	r1, #1
 800d056:	4240      	negs	r0, r0
 800d058:	4421      	add	r1, r4
 800d05a:	f000 f8db 	bl	800d214 <__utoa>
 800d05e:	e7f1      	b.n	800d044 <__itoa+0x10>
 800d060:	2100      	movs	r1, #0
 800d062:	e7f9      	b.n	800d058 <__itoa+0x24>

0800d064 <itoa>:
 800d064:	f7ff bfe6 	b.w	800d034 <__itoa>

0800d068 <malloc>:
 800d068:	4b02      	ldr	r3, [pc, #8]	@ (800d074 <malloc+0xc>)
 800d06a:	4601      	mov	r1, r0
 800d06c:	6818      	ldr	r0, [r3, #0]
 800d06e:	f000 b825 	b.w	800d0bc <_malloc_r>
 800d072:	bf00      	nop
 800d074:	20000f84 	.word	0x20000f84

0800d078 <sbrk_aligned>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4e0f      	ldr	r6, [pc, #60]	@ (800d0b8 <sbrk_aligned+0x40>)
 800d07c:	460c      	mov	r4, r1
 800d07e:	6831      	ldr	r1, [r6, #0]
 800d080:	4605      	mov	r5, r0
 800d082:	b911      	cbnz	r1, 800d08a <sbrk_aligned+0x12>
 800d084:	f000 f932 	bl	800d2ec <_sbrk_r>
 800d088:	6030      	str	r0, [r6, #0]
 800d08a:	4621      	mov	r1, r4
 800d08c:	4628      	mov	r0, r5
 800d08e:	f000 f92d 	bl	800d2ec <_sbrk_r>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	d103      	bne.n	800d09e <sbrk_aligned+0x26>
 800d096:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d09a:	4620      	mov	r0, r4
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
 800d09e:	1cc4      	adds	r4, r0, #3
 800d0a0:	f024 0403 	bic.w	r4, r4, #3
 800d0a4:	42a0      	cmp	r0, r4
 800d0a6:	d0f8      	beq.n	800d09a <sbrk_aligned+0x22>
 800d0a8:	1a21      	subs	r1, r4, r0
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f000 f91e 	bl	800d2ec <_sbrk_r>
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d1f2      	bne.n	800d09a <sbrk_aligned+0x22>
 800d0b4:	e7ef      	b.n	800d096 <sbrk_aligned+0x1e>
 800d0b6:	bf00      	nop
 800d0b8:	20001a30 	.word	0x20001a30

0800d0bc <_malloc_r>:
 800d0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c0:	1ccd      	adds	r5, r1, #3
 800d0c2:	f025 0503 	bic.w	r5, r5, #3
 800d0c6:	3508      	adds	r5, #8
 800d0c8:	2d0c      	cmp	r5, #12
 800d0ca:	bf38      	it	cc
 800d0cc:	250c      	movcc	r5, #12
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	db01      	blt.n	800d0d8 <_malloc_r+0x1c>
 800d0d4:	42a9      	cmp	r1, r5
 800d0d6:	d904      	bls.n	800d0e2 <_malloc_r+0x26>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	6033      	str	r3, [r6, #0]
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1b8 <_malloc_r+0xfc>
 800d0e6:	f000 f869 	bl	800d1bc <__malloc_lock>
 800d0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ee:	461c      	mov	r4, r3
 800d0f0:	bb44      	cbnz	r4, 800d144 <_malloc_r+0x88>
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff ffbf 	bl	800d078 <sbrk_aligned>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	d158      	bne.n	800d1b2 <_malloc_r+0xf6>
 800d100:	f8d8 4000 	ldr.w	r4, [r8]
 800d104:	4627      	mov	r7, r4
 800d106:	2f00      	cmp	r7, #0
 800d108:	d143      	bne.n	800d192 <_malloc_r+0xd6>
 800d10a:	2c00      	cmp	r4, #0
 800d10c:	d04b      	beq.n	800d1a6 <_malloc_r+0xea>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	4639      	mov	r1, r7
 800d112:	4630      	mov	r0, r6
 800d114:	eb04 0903 	add.w	r9, r4, r3
 800d118:	f000 f8e8 	bl	800d2ec <_sbrk_r>
 800d11c:	4581      	cmp	r9, r0
 800d11e:	d142      	bne.n	800d1a6 <_malloc_r+0xea>
 800d120:	6821      	ldr	r1, [r4, #0]
 800d122:	4630      	mov	r0, r6
 800d124:	1a6d      	subs	r5, r5, r1
 800d126:	4629      	mov	r1, r5
 800d128:	f7ff ffa6 	bl	800d078 <sbrk_aligned>
 800d12c:	3001      	adds	r0, #1
 800d12e:	d03a      	beq.n	800d1a6 <_malloc_r+0xea>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	442b      	add	r3, r5
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	f8d8 3000 	ldr.w	r3, [r8]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	bb62      	cbnz	r2, 800d198 <_malloc_r+0xdc>
 800d13e:	f8c8 7000 	str.w	r7, [r8]
 800d142:	e00f      	b.n	800d164 <_malloc_r+0xa8>
 800d144:	6822      	ldr	r2, [r4, #0]
 800d146:	1b52      	subs	r2, r2, r5
 800d148:	d420      	bmi.n	800d18c <_malloc_r+0xd0>
 800d14a:	2a0b      	cmp	r2, #11
 800d14c:	d917      	bls.n	800d17e <_malloc_r+0xc2>
 800d14e:	1961      	adds	r1, r4, r5
 800d150:	42a3      	cmp	r3, r4
 800d152:	6025      	str	r5, [r4, #0]
 800d154:	bf18      	it	ne
 800d156:	6059      	strne	r1, [r3, #4]
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	bf08      	it	eq
 800d15c:	f8c8 1000 	streq.w	r1, [r8]
 800d160:	5162      	str	r2, [r4, r5]
 800d162:	604b      	str	r3, [r1, #4]
 800d164:	4630      	mov	r0, r6
 800d166:	f000 f82f 	bl	800d1c8 <__malloc_unlock>
 800d16a:	f104 000b 	add.w	r0, r4, #11
 800d16e:	1d23      	adds	r3, r4, #4
 800d170:	f020 0007 	bic.w	r0, r0, #7
 800d174:	1ac2      	subs	r2, r0, r3
 800d176:	bf1c      	itt	ne
 800d178:	1a1b      	subne	r3, r3, r0
 800d17a:	50a3      	strne	r3, [r4, r2]
 800d17c:	e7af      	b.n	800d0de <_malloc_r+0x22>
 800d17e:	6862      	ldr	r2, [r4, #4]
 800d180:	42a3      	cmp	r3, r4
 800d182:	bf0c      	ite	eq
 800d184:	f8c8 2000 	streq.w	r2, [r8]
 800d188:	605a      	strne	r2, [r3, #4]
 800d18a:	e7eb      	b.n	800d164 <_malloc_r+0xa8>
 800d18c:	4623      	mov	r3, r4
 800d18e:	6864      	ldr	r4, [r4, #4]
 800d190:	e7ae      	b.n	800d0f0 <_malloc_r+0x34>
 800d192:	463c      	mov	r4, r7
 800d194:	687f      	ldr	r7, [r7, #4]
 800d196:	e7b6      	b.n	800d106 <_malloc_r+0x4a>
 800d198:	461a      	mov	r2, r3
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d1fb      	bne.n	800d198 <_malloc_r+0xdc>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	6053      	str	r3, [r2, #4]
 800d1a4:	e7de      	b.n	800d164 <_malloc_r+0xa8>
 800d1a6:	230c      	movs	r3, #12
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	6033      	str	r3, [r6, #0]
 800d1ac:	f000 f80c 	bl	800d1c8 <__malloc_unlock>
 800d1b0:	e794      	b.n	800d0dc <_malloc_r+0x20>
 800d1b2:	6005      	str	r5, [r0, #0]
 800d1b4:	e7d6      	b.n	800d164 <_malloc_r+0xa8>
 800d1b6:	bf00      	nop
 800d1b8:	20001a34 	.word	0x20001a34

0800d1bc <__malloc_lock>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	@ (800d1c4 <__malloc_lock+0x8>)
 800d1be:	f000 b8cf 	b.w	800d360 <__retarget_lock_acquire_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	20001b70 	.word	0x20001b70

0800d1c8 <__malloc_unlock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	@ (800d1d0 <__malloc_unlock+0x8>)
 800d1ca:	f000 b8ca 	b.w	800d362 <__retarget_lock_release_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	20001b70 	.word	0x20001b70

0800d1d4 <siprintf>:
 800d1d4:	b40e      	push	{r1, r2, r3}
 800d1d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d1da:	b500      	push	{lr}
 800d1dc:	b09c      	sub	sp, #112	@ 0x70
 800d1de:	ab1d      	add	r3, sp, #116	@ 0x74
 800d1e0:	9002      	str	r0, [sp, #8]
 800d1e2:	9006      	str	r0, [sp, #24]
 800d1e4:	9107      	str	r1, [sp, #28]
 800d1e6:	9104      	str	r1, [sp, #16]
 800d1e8:	4808      	ldr	r0, [pc, #32]	@ (800d20c <siprintf+0x38>)
 800d1ea:	4909      	ldr	r1, [pc, #36]	@ (800d210 <siprintf+0x3c>)
 800d1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f0:	9105      	str	r1, [sp, #20]
 800d1f2:	6800      	ldr	r0, [r0, #0]
 800d1f4:	a902      	add	r1, sp, #8
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	f000 f960 	bl	800d4bc <_svfiprintf_r>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	9b02      	ldr	r3, [sp, #8]
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	b01c      	add	sp, #112	@ 0x70
 800d204:	f85d eb04 	ldr.w	lr, [sp], #4
 800d208:	b003      	add	sp, #12
 800d20a:	4770      	bx	lr
 800d20c:	20000f84 	.word	0x20000f84
 800d210:	ffff0208 	.word	0xffff0208

0800d214 <__utoa>:
 800d214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d216:	b08b      	sub	sp, #44	@ 0x2c
 800d218:	4605      	mov	r5, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	466e      	mov	r6, sp
 800d21e:	4c1d      	ldr	r4, [pc, #116]	@ (800d294 <__utoa+0x80>)
 800d220:	f104 0c20 	add.w	ip, r4, #32
 800d224:	4637      	mov	r7, r6
 800d226:	6820      	ldr	r0, [r4, #0]
 800d228:	6861      	ldr	r1, [r4, #4]
 800d22a:	3408      	adds	r4, #8
 800d22c:	c703      	stmia	r7!, {r0, r1}
 800d22e:	4564      	cmp	r4, ip
 800d230:	463e      	mov	r6, r7
 800d232:	d1f7      	bne.n	800d224 <__utoa+0x10>
 800d234:	7921      	ldrb	r1, [r4, #4]
 800d236:	6820      	ldr	r0, [r4, #0]
 800d238:	7139      	strb	r1, [r7, #4]
 800d23a:	1e91      	subs	r1, r2, #2
 800d23c:	2922      	cmp	r1, #34	@ 0x22
 800d23e:	6038      	str	r0, [r7, #0]
 800d240:	f04f 0100 	mov.w	r1, #0
 800d244:	d904      	bls.n	800d250 <__utoa+0x3c>
 800d246:	7019      	strb	r1, [r3, #0]
 800d248:	460b      	mov	r3, r1
 800d24a:	4618      	mov	r0, r3
 800d24c:	b00b      	add	sp, #44	@ 0x2c
 800d24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d250:	1e58      	subs	r0, r3, #1
 800d252:	4684      	mov	ip, r0
 800d254:	fbb5 f7f2 	udiv	r7, r5, r2
 800d258:	fb02 5617 	mls	r6, r2, r7, r5
 800d25c:	3628      	adds	r6, #40	@ 0x28
 800d25e:	446e      	add	r6, sp
 800d260:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d264:	460c      	mov	r4, r1
 800d266:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d26a:	462e      	mov	r6, r5
 800d26c:	42b2      	cmp	r2, r6
 800d26e:	463d      	mov	r5, r7
 800d270:	f101 0101 	add.w	r1, r1, #1
 800d274:	d9ee      	bls.n	800d254 <__utoa+0x40>
 800d276:	2200      	movs	r2, #0
 800d278:	545a      	strb	r2, [r3, r1]
 800d27a:	1919      	adds	r1, r3, r4
 800d27c:	1aa5      	subs	r5, r4, r2
 800d27e:	42aa      	cmp	r2, r5
 800d280:	dae3      	bge.n	800d24a <__utoa+0x36>
 800d282:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d286:	780e      	ldrb	r6, [r1, #0]
 800d288:	3201      	adds	r2, #1
 800d28a:	7006      	strb	r6, [r0, #0]
 800d28c:	f801 5901 	strb.w	r5, [r1], #-1
 800d290:	e7f4      	b.n	800d27c <__utoa+0x68>
 800d292:	bf00      	nop
 800d294:	0800ddce 	.word	0x0800ddce

0800d298 <strcat>:
 800d298:	4602      	mov	r2, r0
 800d29a:	b510      	push	{r4, lr}
 800d29c:	7814      	ldrb	r4, [r2, #0]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	3201      	adds	r2, #1
 800d2a2:	2c00      	cmp	r4, #0
 800d2a4:	d1fa      	bne.n	800d29c <strcat+0x4>
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2b0:	2a00      	cmp	r2, #0
 800d2b2:	d1f9      	bne.n	800d2a8 <strcat+0x10>
 800d2b4:	bd10      	pop	{r4, pc}

0800d2b6 <strncpy>:
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	3901      	subs	r1, #1
 800d2bc:	b132      	cbz	r2, 800d2cc <strncpy+0x16>
 800d2be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d2c2:	3a01      	subs	r2, #1
 800d2c4:	f803 4b01 	strb.w	r4, [r3], #1
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	d1f7      	bne.n	800d2bc <strncpy+0x6>
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	441a      	add	r2, r3
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d100      	bne.n	800d2d6 <strncpy+0x20>
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d2da:	e7f9      	b.n	800d2d0 <strncpy+0x1a>

0800d2dc <memset>:
 800d2dc:	4603      	mov	r3, r0
 800d2de:	4402      	add	r2, r0
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d100      	bne.n	800d2e6 <memset+0xa>
 800d2e4:	4770      	bx	lr
 800d2e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ea:	e7f9      	b.n	800d2e0 <memset+0x4>

0800d2ec <_sbrk_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	4d05      	ldr	r5, [pc, #20]	@ (800d308 <_sbrk_r+0x1c>)
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	602b      	str	r3, [r5, #0]
 800d2f8:	f7fb fff4 	bl	80092e4 <_sbrk>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_sbrk_r+0x1a>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_sbrk_r+0x1a>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20001b74 	.word	0x20001b74

0800d30c <__errno>:
 800d30c:	4b01      	ldr	r3, [pc, #4]	@ (800d314 <__errno+0x8>)
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20000f84 	.word	0x20000f84

0800d318 <__libc_init_array>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	2600      	movs	r6, #0
 800d31c:	4d0c      	ldr	r5, [pc, #48]	@ (800d350 <__libc_init_array+0x38>)
 800d31e:	4c0d      	ldr	r4, [pc, #52]	@ (800d354 <__libc_init_array+0x3c>)
 800d320:	1b64      	subs	r4, r4, r5
 800d322:	10a4      	asrs	r4, r4, #2
 800d324:	42a6      	cmp	r6, r4
 800d326:	d109      	bne.n	800d33c <__libc_init_array+0x24>
 800d328:	f000 fbc2 	bl	800dab0 <_init>
 800d32c:	2600      	movs	r6, #0
 800d32e:	4d0a      	ldr	r5, [pc, #40]	@ (800d358 <__libc_init_array+0x40>)
 800d330:	4c0a      	ldr	r4, [pc, #40]	@ (800d35c <__libc_init_array+0x44>)
 800d332:	1b64      	subs	r4, r4, r5
 800d334:	10a4      	asrs	r4, r4, #2
 800d336:	42a6      	cmp	r6, r4
 800d338:	d105      	bne.n	800d346 <__libc_init_array+0x2e>
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d340:	4798      	blx	r3
 800d342:	3601      	adds	r6, #1
 800d344:	e7ee      	b.n	800d324 <__libc_init_array+0xc>
 800d346:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34a:	4798      	blx	r3
 800d34c:	3601      	adds	r6, #1
 800d34e:	e7f2      	b.n	800d336 <__libc_init_array+0x1e>
 800d350:	0800de30 	.word	0x0800de30
 800d354:	0800de30 	.word	0x0800de30
 800d358:	0800de30 	.word	0x0800de30
 800d35c:	0800de34 	.word	0x0800de34

0800d360 <__retarget_lock_acquire_recursive>:
 800d360:	4770      	bx	lr

0800d362 <__retarget_lock_release_recursive>:
 800d362:	4770      	bx	lr

0800d364 <strcpy>:
 800d364:	4603      	mov	r3, r0
 800d366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d36a:	f803 2b01 	strb.w	r2, [r3], #1
 800d36e:	2a00      	cmp	r2, #0
 800d370:	d1f9      	bne.n	800d366 <strcpy+0x2>
 800d372:	4770      	bx	lr

0800d374 <_free_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4605      	mov	r5, r0
 800d378:	2900      	cmp	r1, #0
 800d37a:	d040      	beq.n	800d3fe <_free_r+0x8a>
 800d37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d380:	1f0c      	subs	r4, r1, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	bfb8      	it	lt
 800d386:	18e4      	addlt	r4, r4, r3
 800d388:	f7ff ff18 	bl	800d1bc <__malloc_lock>
 800d38c:	4a1c      	ldr	r2, [pc, #112]	@ (800d400 <_free_r+0x8c>)
 800d38e:	6813      	ldr	r3, [r2, #0]
 800d390:	b933      	cbnz	r3, 800d3a0 <_free_r+0x2c>
 800d392:	6063      	str	r3, [r4, #4]
 800d394:	6014      	str	r4, [r2, #0]
 800d396:	4628      	mov	r0, r5
 800d398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d39c:	f7ff bf14 	b.w	800d1c8 <__malloc_unlock>
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	d908      	bls.n	800d3b6 <_free_r+0x42>
 800d3a4:	6820      	ldr	r0, [r4, #0]
 800d3a6:	1821      	adds	r1, r4, r0
 800d3a8:	428b      	cmp	r3, r1
 800d3aa:	bf01      	itttt	eq
 800d3ac:	6819      	ldreq	r1, [r3, #0]
 800d3ae:	685b      	ldreq	r3, [r3, #4]
 800d3b0:	1809      	addeq	r1, r1, r0
 800d3b2:	6021      	streq	r1, [r4, #0]
 800d3b4:	e7ed      	b.n	800d392 <_free_r+0x1e>
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	b10b      	cbz	r3, 800d3c0 <_free_r+0x4c>
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	d9fa      	bls.n	800d3b6 <_free_r+0x42>
 800d3c0:	6811      	ldr	r1, [r2, #0]
 800d3c2:	1850      	adds	r0, r2, r1
 800d3c4:	42a0      	cmp	r0, r4
 800d3c6:	d10b      	bne.n	800d3e0 <_free_r+0x6c>
 800d3c8:	6820      	ldr	r0, [r4, #0]
 800d3ca:	4401      	add	r1, r0
 800d3cc:	1850      	adds	r0, r2, r1
 800d3ce:	4283      	cmp	r3, r0
 800d3d0:	6011      	str	r1, [r2, #0]
 800d3d2:	d1e0      	bne.n	800d396 <_free_r+0x22>
 800d3d4:	6818      	ldr	r0, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	4408      	add	r0, r1
 800d3da:	6010      	str	r0, [r2, #0]
 800d3dc:	6053      	str	r3, [r2, #4]
 800d3de:	e7da      	b.n	800d396 <_free_r+0x22>
 800d3e0:	d902      	bls.n	800d3e8 <_free_r+0x74>
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	e7d6      	b.n	800d396 <_free_r+0x22>
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	1821      	adds	r1, r4, r0
 800d3ec:	428b      	cmp	r3, r1
 800d3ee:	bf01      	itttt	eq
 800d3f0:	6819      	ldreq	r1, [r3, #0]
 800d3f2:	685b      	ldreq	r3, [r3, #4]
 800d3f4:	1809      	addeq	r1, r1, r0
 800d3f6:	6021      	streq	r1, [r4, #0]
 800d3f8:	6063      	str	r3, [r4, #4]
 800d3fa:	6054      	str	r4, [r2, #4]
 800d3fc:	e7cb      	b.n	800d396 <_free_r+0x22>
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20001a34 	.word	0x20001a34

0800d404 <__ssputs_r>:
 800d404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d408:	461f      	mov	r7, r3
 800d40a:	688e      	ldr	r6, [r1, #8]
 800d40c:	4682      	mov	sl, r0
 800d40e:	42be      	cmp	r6, r7
 800d410:	460c      	mov	r4, r1
 800d412:	4690      	mov	r8, r2
 800d414:	680b      	ldr	r3, [r1, #0]
 800d416:	d82d      	bhi.n	800d474 <__ssputs_r+0x70>
 800d418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d41c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d420:	d026      	beq.n	800d470 <__ssputs_r+0x6c>
 800d422:	6965      	ldr	r5, [r4, #20]
 800d424:	6909      	ldr	r1, [r1, #16]
 800d426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d42a:	eba3 0901 	sub.w	r9, r3, r1
 800d42e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d432:	1c7b      	adds	r3, r7, #1
 800d434:	444b      	add	r3, r9
 800d436:	106d      	asrs	r5, r5, #1
 800d438:	429d      	cmp	r5, r3
 800d43a:	bf38      	it	cc
 800d43c:	461d      	movcc	r5, r3
 800d43e:	0553      	lsls	r3, r2, #21
 800d440:	d527      	bpl.n	800d492 <__ssputs_r+0x8e>
 800d442:	4629      	mov	r1, r5
 800d444:	f7ff fe3a 	bl	800d0bc <_malloc_r>
 800d448:	4606      	mov	r6, r0
 800d44a:	b360      	cbz	r0, 800d4a6 <__ssputs_r+0xa2>
 800d44c:	464a      	mov	r2, r9
 800d44e:	6921      	ldr	r1, [r4, #16]
 800d450:	f000 fb18 	bl	800da84 <memcpy>
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d45e:	81a3      	strh	r3, [r4, #12]
 800d460:	6126      	str	r6, [r4, #16]
 800d462:	444e      	add	r6, r9
 800d464:	6026      	str	r6, [r4, #0]
 800d466:	463e      	mov	r6, r7
 800d468:	6165      	str	r5, [r4, #20]
 800d46a:	eba5 0509 	sub.w	r5, r5, r9
 800d46e:	60a5      	str	r5, [r4, #8]
 800d470:	42be      	cmp	r6, r7
 800d472:	d900      	bls.n	800d476 <__ssputs_r+0x72>
 800d474:	463e      	mov	r6, r7
 800d476:	4632      	mov	r2, r6
 800d478:	4641      	mov	r1, r8
 800d47a:	6820      	ldr	r0, [r4, #0]
 800d47c:	f000 fada 	bl	800da34 <memmove>
 800d480:	2000      	movs	r0, #0
 800d482:	68a3      	ldr	r3, [r4, #8]
 800d484:	1b9b      	subs	r3, r3, r6
 800d486:	60a3      	str	r3, [r4, #8]
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	4433      	add	r3, r6
 800d48c:	6023      	str	r3, [r4, #0]
 800d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d492:	462a      	mov	r2, r5
 800d494:	f000 faa0 	bl	800d9d8 <_realloc_r>
 800d498:	4606      	mov	r6, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d1e0      	bne.n	800d460 <__ssputs_r+0x5c>
 800d49e:	4650      	mov	r0, sl
 800d4a0:	6921      	ldr	r1, [r4, #16]
 800d4a2:	f7ff ff67 	bl	800d374 <_free_r>
 800d4a6:	230c      	movs	r3, #12
 800d4a8:	f8ca 3000 	str.w	r3, [sl]
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	e7e9      	b.n	800d48e <__ssputs_r+0x8a>
	...

0800d4bc <_svfiprintf_r>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	4698      	mov	r8, r3
 800d4c2:	898b      	ldrh	r3, [r1, #12]
 800d4c4:	4607      	mov	r7, r0
 800d4c6:	061b      	lsls	r3, r3, #24
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	4614      	mov	r4, r2
 800d4cc:	b09d      	sub	sp, #116	@ 0x74
 800d4ce:	d510      	bpl.n	800d4f2 <_svfiprintf_r+0x36>
 800d4d0:	690b      	ldr	r3, [r1, #16]
 800d4d2:	b973      	cbnz	r3, 800d4f2 <_svfiprintf_r+0x36>
 800d4d4:	2140      	movs	r1, #64	@ 0x40
 800d4d6:	f7ff fdf1 	bl	800d0bc <_malloc_r>
 800d4da:	6028      	str	r0, [r5, #0]
 800d4dc:	6128      	str	r0, [r5, #16]
 800d4de:	b930      	cbnz	r0, 800d4ee <_svfiprintf_r+0x32>
 800d4e0:	230c      	movs	r3, #12
 800d4e2:	603b      	str	r3, [r7, #0]
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4e8:	b01d      	add	sp, #116	@ 0x74
 800d4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ee:	2340      	movs	r3, #64	@ 0x40
 800d4f0:	616b      	str	r3, [r5, #20]
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f6:	2320      	movs	r3, #32
 800d4f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4fc:	2330      	movs	r3, #48	@ 0x30
 800d4fe:	f04f 0901 	mov.w	r9, #1
 800d502:	f8cd 800c 	str.w	r8, [sp, #12]
 800d506:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d6a0 <_svfiprintf_r+0x1e4>
 800d50a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d50e:	4623      	mov	r3, r4
 800d510:	469a      	mov	sl, r3
 800d512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d516:	b10a      	cbz	r2, 800d51c <_svfiprintf_r+0x60>
 800d518:	2a25      	cmp	r2, #37	@ 0x25
 800d51a:	d1f9      	bne.n	800d510 <_svfiprintf_r+0x54>
 800d51c:	ebba 0b04 	subs.w	fp, sl, r4
 800d520:	d00b      	beq.n	800d53a <_svfiprintf_r+0x7e>
 800d522:	465b      	mov	r3, fp
 800d524:	4622      	mov	r2, r4
 800d526:	4629      	mov	r1, r5
 800d528:	4638      	mov	r0, r7
 800d52a:	f7ff ff6b 	bl	800d404 <__ssputs_r>
 800d52e:	3001      	adds	r0, #1
 800d530:	f000 80a7 	beq.w	800d682 <_svfiprintf_r+0x1c6>
 800d534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d536:	445a      	add	r2, fp
 800d538:	9209      	str	r2, [sp, #36]	@ 0x24
 800d53a:	f89a 3000 	ldrb.w	r3, [sl]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f000 809f 	beq.w	800d682 <_svfiprintf_r+0x1c6>
 800d544:	2300      	movs	r3, #0
 800d546:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d54e:	f10a 0a01 	add.w	sl, sl, #1
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	9307      	str	r3, [sp, #28]
 800d556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d55a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d55c:	4654      	mov	r4, sl
 800d55e:	2205      	movs	r2, #5
 800d560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d564:	484e      	ldr	r0, [pc, #312]	@ (800d6a0 <_svfiprintf_r+0x1e4>)
 800d566:	f000 fa7f 	bl	800da68 <memchr>
 800d56a:	9a04      	ldr	r2, [sp, #16]
 800d56c:	b9d8      	cbnz	r0, 800d5a6 <_svfiprintf_r+0xea>
 800d56e:	06d0      	lsls	r0, r2, #27
 800d570:	bf44      	itt	mi
 800d572:	2320      	movmi	r3, #32
 800d574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d578:	0711      	lsls	r1, r2, #28
 800d57a:	bf44      	itt	mi
 800d57c:	232b      	movmi	r3, #43	@ 0x2b
 800d57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d582:	f89a 3000 	ldrb.w	r3, [sl]
 800d586:	2b2a      	cmp	r3, #42	@ 0x2a
 800d588:	d015      	beq.n	800d5b6 <_svfiprintf_r+0xfa>
 800d58a:	4654      	mov	r4, sl
 800d58c:	2000      	movs	r0, #0
 800d58e:	f04f 0c0a 	mov.w	ip, #10
 800d592:	9a07      	ldr	r2, [sp, #28]
 800d594:	4621      	mov	r1, r4
 800d596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d59a:	3b30      	subs	r3, #48	@ 0x30
 800d59c:	2b09      	cmp	r3, #9
 800d59e:	d94b      	bls.n	800d638 <_svfiprintf_r+0x17c>
 800d5a0:	b1b0      	cbz	r0, 800d5d0 <_svfiprintf_r+0x114>
 800d5a2:	9207      	str	r2, [sp, #28]
 800d5a4:	e014      	b.n	800d5d0 <_svfiprintf_r+0x114>
 800d5a6:	eba0 0308 	sub.w	r3, r0, r8
 800d5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	46a2      	mov	sl, r4
 800d5b2:	9304      	str	r3, [sp, #16]
 800d5b4:	e7d2      	b.n	800d55c <_svfiprintf_r+0xa0>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	1d19      	adds	r1, r3, #4
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	9103      	str	r1, [sp, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	bfbb      	ittet	lt
 800d5c2:	425b      	neglt	r3, r3
 800d5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c8:	9307      	strge	r3, [sp, #28]
 800d5ca:	9307      	strlt	r3, [sp, #28]
 800d5cc:	bfb8      	it	lt
 800d5ce:	9204      	strlt	r2, [sp, #16]
 800d5d0:	7823      	ldrb	r3, [r4, #0]
 800d5d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5d4:	d10a      	bne.n	800d5ec <_svfiprintf_r+0x130>
 800d5d6:	7863      	ldrb	r3, [r4, #1]
 800d5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5da:	d132      	bne.n	800d642 <_svfiprintf_r+0x186>
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	3402      	adds	r4, #2
 800d5e0:	1d1a      	adds	r2, r3, #4
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	9203      	str	r2, [sp, #12]
 800d5e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5ea:	9305      	str	r3, [sp, #20]
 800d5ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d6a4 <_svfiprintf_r+0x1e8>
 800d5f0:	2203      	movs	r2, #3
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	7821      	ldrb	r1, [r4, #0]
 800d5f6:	f000 fa37 	bl	800da68 <memchr>
 800d5fa:	b138      	cbz	r0, 800d60c <_svfiprintf_r+0x150>
 800d5fc:	2240      	movs	r2, #64	@ 0x40
 800d5fe:	9b04      	ldr	r3, [sp, #16]
 800d600:	eba0 000a 	sub.w	r0, r0, sl
 800d604:	4082      	lsls	r2, r0
 800d606:	4313      	orrs	r3, r2
 800d608:	3401      	adds	r4, #1
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	2206      	movs	r2, #6
 800d612:	4825      	ldr	r0, [pc, #148]	@ (800d6a8 <_svfiprintf_r+0x1ec>)
 800d614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d618:	f000 fa26 	bl	800da68 <memchr>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d036      	beq.n	800d68e <_svfiprintf_r+0x1d2>
 800d620:	4b22      	ldr	r3, [pc, #136]	@ (800d6ac <_svfiprintf_r+0x1f0>)
 800d622:	bb1b      	cbnz	r3, 800d66c <_svfiprintf_r+0x1b0>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	3307      	adds	r3, #7
 800d628:	f023 0307 	bic.w	r3, r3, #7
 800d62c:	3308      	adds	r3, #8
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d632:	4433      	add	r3, r6
 800d634:	9309      	str	r3, [sp, #36]	@ 0x24
 800d636:	e76a      	b.n	800d50e <_svfiprintf_r+0x52>
 800d638:	460c      	mov	r4, r1
 800d63a:	2001      	movs	r0, #1
 800d63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d640:	e7a8      	b.n	800d594 <_svfiprintf_r+0xd8>
 800d642:	2300      	movs	r3, #0
 800d644:	f04f 0c0a 	mov.w	ip, #10
 800d648:	4619      	mov	r1, r3
 800d64a:	3401      	adds	r4, #1
 800d64c:	9305      	str	r3, [sp, #20]
 800d64e:	4620      	mov	r0, r4
 800d650:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d654:	3a30      	subs	r2, #48	@ 0x30
 800d656:	2a09      	cmp	r2, #9
 800d658:	d903      	bls.n	800d662 <_svfiprintf_r+0x1a6>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d0c6      	beq.n	800d5ec <_svfiprintf_r+0x130>
 800d65e:	9105      	str	r1, [sp, #20]
 800d660:	e7c4      	b.n	800d5ec <_svfiprintf_r+0x130>
 800d662:	4604      	mov	r4, r0
 800d664:	2301      	movs	r3, #1
 800d666:	fb0c 2101 	mla	r1, ip, r1, r2
 800d66a:	e7f0      	b.n	800d64e <_svfiprintf_r+0x192>
 800d66c:	ab03      	add	r3, sp, #12
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	462a      	mov	r2, r5
 800d672:	4638      	mov	r0, r7
 800d674:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b0 <_svfiprintf_r+0x1f4>)
 800d676:	a904      	add	r1, sp, #16
 800d678:	f3af 8000 	nop.w
 800d67c:	1c42      	adds	r2, r0, #1
 800d67e:	4606      	mov	r6, r0
 800d680:	d1d6      	bne.n	800d630 <_svfiprintf_r+0x174>
 800d682:	89ab      	ldrh	r3, [r5, #12]
 800d684:	065b      	lsls	r3, r3, #25
 800d686:	f53f af2d 	bmi.w	800d4e4 <_svfiprintf_r+0x28>
 800d68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d68c:	e72c      	b.n	800d4e8 <_svfiprintf_r+0x2c>
 800d68e:	ab03      	add	r3, sp, #12
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	462a      	mov	r2, r5
 800d694:	4638      	mov	r0, r7
 800d696:	4b06      	ldr	r3, [pc, #24]	@ (800d6b0 <_svfiprintf_r+0x1f4>)
 800d698:	a904      	add	r1, sp, #16
 800d69a:	f000 f87d 	bl	800d798 <_printf_i>
 800d69e:	e7ed      	b.n	800d67c <_svfiprintf_r+0x1c0>
 800d6a0:	0800ddf3 	.word	0x0800ddf3
 800d6a4:	0800ddf9 	.word	0x0800ddf9
 800d6a8:	0800ddfd 	.word	0x0800ddfd
 800d6ac:	00000000 	.word	0x00000000
 800d6b0:	0800d405 	.word	0x0800d405

0800d6b4 <_printf_common>:
 800d6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b8:	4616      	mov	r6, r2
 800d6ba:	4698      	mov	r8, r3
 800d6bc:	688a      	ldr	r2, [r1, #8]
 800d6be:	690b      	ldr	r3, [r1, #16]
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	bfb8      	it	lt
 800d6c6:	4613      	movlt	r3, r2
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6d4:	b10a      	cbz	r2, 800d6da <_printf_common+0x26>
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	6033      	str	r3, [r6, #0]
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	0699      	lsls	r1, r3, #26
 800d6de:	bf42      	ittt	mi
 800d6e0:	6833      	ldrmi	r3, [r6, #0]
 800d6e2:	3302      	addmi	r3, #2
 800d6e4:	6033      	strmi	r3, [r6, #0]
 800d6e6:	6825      	ldr	r5, [r4, #0]
 800d6e8:	f015 0506 	ands.w	r5, r5, #6
 800d6ec:	d106      	bne.n	800d6fc <_printf_common+0x48>
 800d6ee:	f104 0a19 	add.w	sl, r4, #25
 800d6f2:	68e3      	ldr	r3, [r4, #12]
 800d6f4:	6832      	ldr	r2, [r6, #0]
 800d6f6:	1a9b      	subs	r3, r3, r2
 800d6f8:	42ab      	cmp	r3, r5
 800d6fa:	dc2b      	bgt.n	800d754 <_printf_common+0xa0>
 800d6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d700:	6822      	ldr	r2, [r4, #0]
 800d702:	3b00      	subs	r3, #0
 800d704:	bf18      	it	ne
 800d706:	2301      	movne	r3, #1
 800d708:	0692      	lsls	r2, r2, #26
 800d70a:	d430      	bmi.n	800d76e <_printf_common+0xba>
 800d70c:	4641      	mov	r1, r8
 800d70e:	4638      	mov	r0, r7
 800d710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d714:	47c8      	blx	r9
 800d716:	3001      	adds	r0, #1
 800d718:	d023      	beq.n	800d762 <_printf_common+0xae>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	6922      	ldr	r2, [r4, #16]
 800d71e:	f003 0306 	and.w	r3, r3, #6
 800d722:	2b04      	cmp	r3, #4
 800d724:	bf14      	ite	ne
 800d726:	2500      	movne	r5, #0
 800d728:	6833      	ldreq	r3, [r6, #0]
 800d72a:	f04f 0600 	mov.w	r6, #0
 800d72e:	bf08      	it	eq
 800d730:	68e5      	ldreq	r5, [r4, #12]
 800d732:	f104 041a 	add.w	r4, r4, #26
 800d736:	bf08      	it	eq
 800d738:	1aed      	subeq	r5, r5, r3
 800d73a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d73e:	bf08      	it	eq
 800d740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d744:	4293      	cmp	r3, r2
 800d746:	bfc4      	itt	gt
 800d748:	1a9b      	subgt	r3, r3, r2
 800d74a:	18ed      	addgt	r5, r5, r3
 800d74c:	42b5      	cmp	r5, r6
 800d74e:	d11a      	bne.n	800d786 <_printf_common+0xd2>
 800d750:	2000      	movs	r0, #0
 800d752:	e008      	b.n	800d766 <_printf_common+0xb2>
 800d754:	2301      	movs	r3, #1
 800d756:	4652      	mov	r2, sl
 800d758:	4641      	mov	r1, r8
 800d75a:	4638      	mov	r0, r7
 800d75c:	47c8      	blx	r9
 800d75e:	3001      	adds	r0, #1
 800d760:	d103      	bne.n	800d76a <_printf_common+0xb6>
 800d762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d76a:	3501      	adds	r5, #1
 800d76c:	e7c1      	b.n	800d6f2 <_printf_common+0x3e>
 800d76e:	2030      	movs	r0, #48	@ 0x30
 800d770:	18e1      	adds	r1, r4, r3
 800d772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d77c:	4422      	add	r2, r4
 800d77e:	3302      	adds	r3, #2
 800d780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d784:	e7c2      	b.n	800d70c <_printf_common+0x58>
 800d786:	2301      	movs	r3, #1
 800d788:	4622      	mov	r2, r4
 800d78a:	4641      	mov	r1, r8
 800d78c:	4638      	mov	r0, r7
 800d78e:	47c8      	blx	r9
 800d790:	3001      	adds	r0, #1
 800d792:	d0e6      	beq.n	800d762 <_printf_common+0xae>
 800d794:	3601      	adds	r6, #1
 800d796:	e7d9      	b.n	800d74c <_printf_common+0x98>

0800d798 <_printf_i>:
 800d798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d79c:	7e0f      	ldrb	r7, [r1, #24]
 800d79e:	4691      	mov	r9, r2
 800d7a0:	2f78      	cmp	r7, #120	@ 0x78
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	460c      	mov	r4, r1
 800d7a6:	469a      	mov	sl, r3
 800d7a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7ae:	d807      	bhi.n	800d7c0 <_printf_i+0x28>
 800d7b0:	2f62      	cmp	r7, #98	@ 0x62
 800d7b2:	d80a      	bhi.n	800d7ca <_printf_i+0x32>
 800d7b4:	2f00      	cmp	r7, #0
 800d7b6:	f000 80d3 	beq.w	800d960 <_printf_i+0x1c8>
 800d7ba:	2f58      	cmp	r7, #88	@ 0x58
 800d7bc:	f000 80ba 	beq.w	800d934 <_printf_i+0x19c>
 800d7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7c8:	e03a      	b.n	800d840 <_printf_i+0xa8>
 800d7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7ce:	2b15      	cmp	r3, #21
 800d7d0:	d8f6      	bhi.n	800d7c0 <_printf_i+0x28>
 800d7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800d7d8 <_printf_i+0x40>)
 800d7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7d8:	0800d831 	.word	0x0800d831
 800d7dc:	0800d845 	.word	0x0800d845
 800d7e0:	0800d7c1 	.word	0x0800d7c1
 800d7e4:	0800d7c1 	.word	0x0800d7c1
 800d7e8:	0800d7c1 	.word	0x0800d7c1
 800d7ec:	0800d7c1 	.word	0x0800d7c1
 800d7f0:	0800d845 	.word	0x0800d845
 800d7f4:	0800d7c1 	.word	0x0800d7c1
 800d7f8:	0800d7c1 	.word	0x0800d7c1
 800d7fc:	0800d7c1 	.word	0x0800d7c1
 800d800:	0800d7c1 	.word	0x0800d7c1
 800d804:	0800d947 	.word	0x0800d947
 800d808:	0800d86f 	.word	0x0800d86f
 800d80c:	0800d901 	.word	0x0800d901
 800d810:	0800d7c1 	.word	0x0800d7c1
 800d814:	0800d7c1 	.word	0x0800d7c1
 800d818:	0800d969 	.word	0x0800d969
 800d81c:	0800d7c1 	.word	0x0800d7c1
 800d820:	0800d86f 	.word	0x0800d86f
 800d824:	0800d7c1 	.word	0x0800d7c1
 800d828:	0800d7c1 	.word	0x0800d7c1
 800d82c:	0800d909 	.word	0x0800d909
 800d830:	6833      	ldr	r3, [r6, #0]
 800d832:	1d1a      	adds	r2, r3, #4
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6032      	str	r2, [r6, #0]
 800d838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d840:	2301      	movs	r3, #1
 800d842:	e09e      	b.n	800d982 <_printf_i+0x1ea>
 800d844:	6833      	ldr	r3, [r6, #0]
 800d846:	6820      	ldr	r0, [r4, #0]
 800d848:	1d19      	adds	r1, r3, #4
 800d84a:	6031      	str	r1, [r6, #0]
 800d84c:	0606      	lsls	r6, r0, #24
 800d84e:	d501      	bpl.n	800d854 <_printf_i+0xbc>
 800d850:	681d      	ldr	r5, [r3, #0]
 800d852:	e003      	b.n	800d85c <_printf_i+0xc4>
 800d854:	0645      	lsls	r5, r0, #25
 800d856:	d5fb      	bpl.n	800d850 <_printf_i+0xb8>
 800d858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d85c:	2d00      	cmp	r5, #0
 800d85e:	da03      	bge.n	800d868 <_printf_i+0xd0>
 800d860:	232d      	movs	r3, #45	@ 0x2d
 800d862:	426d      	negs	r5, r5
 800d864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d868:	230a      	movs	r3, #10
 800d86a:	4859      	ldr	r0, [pc, #356]	@ (800d9d0 <_printf_i+0x238>)
 800d86c:	e011      	b.n	800d892 <_printf_i+0xfa>
 800d86e:	6821      	ldr	r1, [r4, #0]
 800d870:	6833      	ldr	r3, [r6, #0]
 800d872:	0608      	lsls	r0, r1, #24
 800d874:	f853 5b04 	ldr.w	r5, [r3], #4
 800d878:	d402      	bmi.n	800d880 <_printf_i+0xe8>
 800d87a:	0649      	lsls	r1, r1, #25
 800d87c:	bf48      	it	mi
 800d87e:	b2ad      	uxthmi	r5, r5
 800d880:	2f6f      	cmp	r7, #111	@ 0x6f
 800d882:	6033      	str	r3, [r6, #0]
 800d884:	bf14      	ite	ne
 800d886:	230a      	movne	r3, #10
 800d888:	2308      	moveq	r3, #8
 800d88a:	4851      	ldr	r0, [pc, #324]	@ (800d9d0 <_printf_i+0x238>)
 800d88c:	2100      	movs	r1, #0
 800d88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d892:	6866      	ldr	r6, [r4, #4]
 800d894:	2e00      	cmp	r6, #0
 800d896:	bfa8      	it	ge
 800d898:	6821      	ldrge	r1, [r4, #0]
 800d89a:	60a6      	str	r6, [r4, #8]
 800d89c:	bfa4      	itt	ge
 800d89e:	f021 0104 	bicge.w	r1, r1, #4
 800d8a2:	6021      	strge	r1, [r4, #0]
 800d8a4:	b90d      	cbnz	r5, 800d8aa <_printf_i+0x112>
 800d8a6:	2e00      	cmp	r6, #0
 800d8a8:	d04b      	beq.n	800d942 <_printf_i+0x1aa>
 800d8aa:	4616      	mov	r6, r2
 800d8ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8b0:	fb03 5711 	mls	r7, r3, r1, r5
 800d8b4:	5dc7      	ldrb	r7, [r0, r7]
 800d8b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8ba:	462f      	mov	r7, r5
 800d8bc:	42bb      	cmp	r3, r7
 800d8be:	460d      	mov	r5, r1
 800d8c0:	d9f4      	bls.n	800d8ac <_printf_i+0x114>
 800d8c2:	2b08      	cmp	r3, #8
 800d8c4:	d10b      	bne.n	800d8de <_printf_i+0x146>
 800d8c6:	6823      	ldr	r3, [r4, #0]
 800d8c8:	07df      	lsls	r7, r3, #31
 800d8ca:	d508      	bpl.n	800d8de <_printf_i+0x146>
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	6861      	ldr	r1, [r4, #4]
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	bfde      	ittt	le
 800d8d4:	2330      	movle	r3, #48	@ 0x30
 800d8d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d8de:	1b92      	subs	r2, r2, r6
 800d8e0:	6122      	str	r2, [r4, #16]
 800d8e2:	464b      	mov	r3, r9
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	f8cd a000 	str.w	sl, [sp]
 800d8ec:	aa03      	add	r2, sp, #12
 800d8ee:	f7ff fee1 	bl	800d6b4 <_printf_common>
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d14a      	bne.n	800d98c <_printf_i+0x1f4>
 800d8f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8fa:	b004      	add	sp, #16
 800d8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d900:	6823      	ldr	r3, [r4, #0]
 800d902:	f043 0320 	orr.w	r3, r3, #32
 800d906:	6023      	str	r3, [r4, #0]
 800d908:	2778      	movs	r7, #120	@ 0x78
 800d90a:	4832      	ldr	r0, [pc, #200]	@ (800d9d4 <_printf_i+0x23c>)
 800d90c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	6831      	ldr	r1, [r6, #0]
 800d914:	061f      	lsls	r7, r3, #24
 800d916:	f851 5b04 	ldr.w	r5, [r1], #4
 800d91a:	d402      	bmi.n	800d922 <_printf_i+0x18a>
 800d91c:	065f      	lsls	r7, r3, #25
 800d91e:	bf48      	it	mi
 800d920:	b2ad      	uxthmi	r5, r5
 800d922:	6031      	str	r1, [r6, #0]
 800d924:	07d9      	lsls	r1, r3, #31
 800d926:	bf44      	itt	mi
 800d928:	f043 0320 	orrmi.w	r3, r3, #32
 800d92c:	6023      	strmi	r3, [r4, #0]
 800d92e:	b11d      	cbz	r5, 800d938 <_printf_i+0x1a0>
 800d930:	2310      	movs	r3, #16
 800d932:	e7ab      	b.n	800d88c <_printf_i+0xf4>
 800d934:	4826      	ldr	r0, [pc, #152]	@ (800d9d0 <_printf_i+0x238>)
 800d936:	e7e9      	b.n	800d90c <_printf_i+0x174>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	f023 0320 	bic.w	r3, r3, #32
 800d93e:	6023      	str	r3, [r4, #0]
 800d940:	e7f6      	b.n	800d930 <_printf_i+0x198>
 800d942:	4616      	mov	r6, r2
 800d944:	e7bd      	b.n	800d8c2 <_printf_i+0x12a>
 800d946:	6833      	ldr	r3, [r6, #0]
 800d948:	6825      	ldr	r5, [r4, #0]
 800d94a:	1d18      	adds	r0, r3, #4
 800d94c:	6961      	ldr	r1, [r4, #20]
 800d94e:	6030      	str	r0, [r6, #0]
 800d950:	062e      	lsls	r6, r5, #24
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	d501      	bpl.n	800d95a <_printf_i+0x1c2>
 800d956:	6019      	str	r1, [r3, #0]
 800d958:	e002      	b.n	800d960 <_printf_i+0x1c8>
 800d95a:	0668      	lsls	r0, r5, #25
 800d95c:	d5fb      	bpl.n	800d956 <_printf_i+0x1be>
 800d95e:	8019      	strh	r1, [r3, #0]
 800d960:	2300      	movs	r3, #0
 800d962:	4616      	mov	r6, r2
 800d964:	6123      	str	r3, [r4, #16]
 800d966:	e7bc      	b.n	800d8e2 <_printf_i+0x14a>
 800d968:	6833      	ldr	r3, [r6, #0]
 800d96a:	2100      	movs	r1, #0
 800d96c:	1d1a      	adds	r2, r3, #4
 800d96e:	6032      	str	r2, [r6, #0]
 800d970:	681e      	ldr	r6, [r3, #0]
 800d972:	6862      	ldr	r2, [r4, #4]
 800d974:	4630      	mov	r0, r6
 800d976:	f000 f877 	bl	800da68 <memchr>
 800d97a:	b108      	cbz	r0, 800d980 <_printf_i+0x1e8>
 800d97c:	1b80      	subs	r0, r0, r6
 800d97e:	6060      	str	r0, [r4, #4]
 800d980:	6863      	ldr	r3, [r4, #4]
 800d982:	6123      	str	r3, [r4, #16]
 800d984:	2300      	movs	r3, #0
 800d986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d98a:	e7aa      	b.n	800d8e2 <_printf_i+0x14a>
 800d98c:	4632      	mov	r2, r6
 800d98e:	4649      	mov	r1, r9
 800d990:	4640      	mov	r0, r8
 800d992:	6923      	ldr	r3, [r4, #16]
 800d994:	47d0      	blx	sl
 800d996:	3001      	adds	r0, #1
 800d998:	d0ad      	beq.n	800d8f6 <_printf_i+0x15e>
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	079b      	lsls	r3, r3, #30
 800d99e:	d413      	bmi.n	800d9c8 <_printf_i+0x230>
 800d9a0:	68e0      	ldr	r0, [r4, #12]
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	4298      	cmp	r0, r3
 800d9a6:	bfb8      	it	lt
 800d9a8:	4618      	movlt	r0, r3
 800d9aa:	e7a6      	b.n	800d8fa <_printf_i+0x162>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4632      	mov	r2, r6
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	47d0      	blx	sl
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	d09d      	beq.n	800d8f6 <_printf_i+0x15e>
 800d9ba:	3501      	adds	r5, #1
 800d9bc:	68e3      	ldr	r3, [r4, #12]
 800d9be:	9903      	ldr	r1, [sp, #12]
 800d9c0:	1a5b      	subs	r3, r3, r1
 800d9c2:	42ab      	cmp	r3, r5
 800d9c4:	dcf2      	bgt.n	800d9ac <_printf_i+0x214>
 800d9c6:	e7eb      	b.n	800d9a0 <_printf_i+0x208>
 800d9c8:	2500      	movs	r5, #0
 800d9ca:	f104 0619 	add.w	r6, r4, #25
 800d9ce:	e7f5      	b.n	800d9bc <_printf_i+0x224>
 800d9d0:	0800de04 	.word	0x0800de04
 800d9d4:	0800de15 	.word	0x0800de15

0800d9d8 <_realloc_r>:
 800d9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9dc:	4680      	mov	r8, r0
 800d9de:	4615      	mov	r5, r2
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	b921      	cbnz	r1, 800d9ee <_realloc_r+0x16>
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ea:	f7ff bb67 	b.w	800d0bc <_malloc_r>
 800d9ee:	b92a      	cbnz	r2, 800d9fc <_realloc_r+0x24>
 800d9f0:	f7ff fcc0 	bl	800d374 <_free_r>
 800d9f4:	2400      	movs	r4, #0
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9fc:	f000 f850 	bl	800daa0 <_malloc_usable_size_r>
 800da00:	4285      	cmp	r5, r0
 800da02:	4606      	mov	r6, r0
 800da04:	d802      	bhi.n	800da0c <_realloc_r+0x34>
 800da06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da0a:	d8f4      	bhi.n	800d9f6 <_realloc_r+0x1e>
 800da0c:	4629      	mov	r1, r5
 800da0e:	4640      	mov	r0, r8
 800da10:	f7ff fb54 	bl	800d0bc <_malloc_r>
 800da14:	4607      	mov	r7, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d0ec      	beq.n	800d9f4 <_realloc_r+0x1c>
 800da1a:	42b5      	cmp	r5, r6
 800da1c:	462a      	mov	r2, r5
 800da1e:	4621      	mov	r1, r4
 800da20:	bf28      	it	cs
 800da22:	4632      	movcs	r2, r6
 800da24:	f000 f82e 	bl	800da84 <memcpy>
 800da28:	4621      	mov	r1, r4
 800da2a:	4640      	mov	r0, r8
 800da2c:	f7ff fca2 	bl	800d374 <_free_r>
 800da30:	463c      	mov	r4, r7
 800da32:	e7e0      	b.n	800d9f6 <_realloc_r+0x1e>

0800da34 <memmove>:
 800da34:	4288      	cmp	r0, r1
 800da36:	b510      	push	{r4, lr}
 800da38:	eb01 0402 	add.w	r4, r1, r2
 800da3c:	d902      	bls.n	800da44 <memmove+0x10>
 800da3e:	4284      	cmp	r4, r0
 800da40:	4623      	mov	r3, r4
 800da42:	d807      	bhi.n	800da54 <memmove+0x20>
 800da44:	1e43      	subs	r3, r0, #1
 800da46:	42a1      	cmp	r1, r4
 800da48:	d008      	beq.n	800da5c <memmove+0x28>
 800da4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da52:	e7f8      	b.n	800da46 <memmove+0x12>
 800da54:	4601      	mov	r1, r0
 800da56:	4402      	add	r2, r0
 800da58:	428a      	cmp	r2, r1
 800da5a:	d100      	bne.n	800da5e <memmove+0x2a>
 800da5c:	bd10      	pop	{r4, pc}
 800da5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da66:	e7f7      	b.n	800da58 <memmove+0x24>

0800da68 <memchr>:
 800da68:	4603      	mov	r3, r0
 800da6a:	b510      	push	{r4, lr}
 800da6c:	b2c9      	uxtb	r1, r1
 800da6e:	4402      	add	r2, r0
 800da70:	4293      	cmp	r3, r2
 800da72:	4618      	mov	r0, r3
 800da74:	d101      	bne.n	800da7a <memchr+0x12>
 800da76:	2000      	movs	r0, #0
 800da78:	e003      	b.n	800da82 <memchr+0x1a>
 800da7a:	7804      	ldrb	r4, [r0, #0]
 800da7c:	3301      	adds	r3, #1
 800da7e:	428c      	cmp	r4, r1
 800da80:	d1f6      	bne.n	800da70 <memchr+0x8>
 800da82:	bd10      	pop	{r4, pc}

0800da84 <memcpy>:
 800da84:	440a      	add	r2, r1
 800da86:	4291      	cmp	r1, r2
 800da88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800da8c:	d100      	bne.n	800da90 <memcpy+0xc>
 800da8e:	4770      	bx	lr
 800da90:	b510      	push	{r4, lr}
 800da92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da96:	4291      	cmp	r1, r2
 800da98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da9c:	d1f9      	bne.n	800da92 <memcpy+0xe>
 800da9e:	bd10      	pop	{r4, pc}

0800daa0 <_malloc_usable_size_r>:
 800daa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daa4:	1f18      	subs	r0, r3, #4
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	bfbc      	itt	lt
 800daaa:	580b      	ldrlt	r3, [r1, r0]
 800daac:	18c0      	addlt	r0, r0, r3
 800daae:	4770      	bx	lr

0800dab0 <_init>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	bf00      	nop
 800dab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab6:	bc08      	pop	{r3}
 800dab8:	469e      	mov	lr, r3
 800daba:	4770      	bx	lr

0800dabc <_fini>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	bf00      	nop
 800dac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac2:	bc08      	pop	{r3}
 800dac4:	469e      	mov	lr, r3
 800dac6:	4770      	bx	lr
