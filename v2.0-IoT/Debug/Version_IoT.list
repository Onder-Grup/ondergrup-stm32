
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c938  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cb1c  0800cb1c  0001cb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf8  0800daf8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800daf8  0800daf8  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800daf8  0800daf8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daf8  0800daf8  0001daf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800db00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  2000010c  0800dc0c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800dc0c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016657  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ec  00000000  00000000  000367cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00039cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e61  00000000  00000000  0003af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0ac  00000000  00000000  00058456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee90  00000000  00000000  00074502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052b0  00000000  00000000  00113394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cb04 	.word	0x0800cb04

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800cb04 	.word	0x0800cb04

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fa96 	bl	8009780 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f90e 	bl	8008478 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	2000028c 	.word	0x2000028c
 80004c0:	200001d5 	.word	0x200001d5
 80004c4:	200001fd 	.word	0x200001fd
 80004c8:	20000200 	.word	0x20000200
 80004cc:	20000201 	.word	0x20000201
 80004d0:	20000202 	.word	0x20000202
 80004d4:	20000203 	.word	0x20000203
 80004d8:	20000204 	.word	0x20000204
 80004dc:	20000205 	.word	0x20000205
 80004e0:	20000215 	.word	0x20000215
 80004e4:	20000206 	.word	0x20000206
 80004e8:	20000216 	.word	0x20000216
 80004ec:	20000207 	.word	0x20000207
 80004f0:	20000217 	.word	0x20000217
 80004f4:	2000020a 	.word	0x2000020a
 80004f8:	2000020b 	.word	0x2000020b
 80004fc:	2000020c 	.word	0x2000020c
 8000500:	2000020d 	.word	0x2000020d
 8000504:	2000020e 	.word	0x2000020e
 8000508:	2000020f 	.word	0x2000020f
 800050c:	20000210 	.word	0x20000210
 8000510:	20000211 	.word	0x20000211
 8000514:	20000212 	.word	0x20000212
 8000518:	20000213 	.word	0x20000213
 800051c:	20000214 	.word	0x20000214
 8000520:	20000218 	.word	0x20000218
 8000524:	2000021a 	.word	0x2000021a
 8000528:	200001f8 	.word	0x200001f8
 800052c:	200001f9 	.word	0x200001f9
 8000530:	200001fa 	.word	0x200001fa
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	200001fb 	.word	0x200001fb
 8000540:	2000021d 	.word	0x2000021d
 8000544:	2000021b 	.word	0x2000021b
 8000548:	20000209 	.word	0x20000209
 800054c:	2000021c 	.word	0x2000021c
 8000550:	20000208 	.word	0x20000208
 8000554:	2000021e 	.word	0x2000021e
 8000558:	2000021f 	.word	0x2000021f
 800055c:	20000220 	.word	0x20000220
 8000560:	20000221 	.word	0x20000221
 8000564:	20000222 	.word	0x20000222
 8000568:	20000223 	.word	0x20000223
 800056c:	20000224 	.word	0x20000224
 8000570:	20000225 	.word	0x20000225
 8000574:	20000226 	.word	0x20000226
 8000578:	20000227 	.word	0x20000227
 800057c:	200001d4 	.word	0x200001d4
	}

	if(kapi1AcSure>5) {
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <eepromKontrol+0x4b0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b56      	ldr	r3, [pc, #344]	; (80006e4 <eepromKontrol+0x4b0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <eepromKontrol+0x4b4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <eepromKontrol+0x4b4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <eepromKontrol+0x4b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b51      	ldr	r3, [pc, #324]	; (80006ec <eepromKontrol+0x4b8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <eepromKontrol+0x4bc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b49      	ldr	r3, [pc, #292]	; (80006fc <eepromKontrol+0x4c8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <eepromKontrol+0x4c8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <eepromKontrol+0x4cc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <eepromKontrol+0x4cc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <eepromKontrol+0x4d0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <eepromKontrol+0x4d0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <eepromKontrol+0x4d4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <eepromKontrol+0x4d4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <eepromKontrol+0x4d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <eepromKontrol+0x4d8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <eepromKontrol+0x4dc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <eepromKontrol+0x4dc>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <eepromKontrol+0x4e0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <eepromKontrol+0x4e0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <eepromKontrol+0x4e4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <eepromKontrol+0x4e4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <eepromKontrol+0x4e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <eepromKontrol+0x4e8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <eepromKontrol+0x4ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <eepromKontrol+0x4ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <eepromKontrol+0x4f0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <eepromKontrol+0x4f0>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <eepromKontrol+0x4f4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <eepromKontrol+0x4f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <eepromKontrol+0x4f8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <eepromKontrol+0x4f8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <eepromKontrol+0x4fc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <eepromKontrol+0x4fc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <eepromKontrol+0x500>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <eepromKontrol+0x500>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <eepromKontrol+0x504>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <eepromKontrol+0x504>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f851 	bl	800075c <readFromEEPROM>
	HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f007 fedb 	bl	8008478 <HAL_Delay>
	readFromEEPROM(2);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f84a 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f007 fed4 	bl	8008478 <HAL_Delay>
	readFromEEPROM(3);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f843 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f007 fecd 	bl	8008478 <HAL_Delay>
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000215 	.word	0x20000215
 80006e8:	20000206 	.word	0x20000206
 80006ec:	20000216 	.word	0x20000216
 80006f0:	20000207 	.word	0x20000207
 80006f4:	20000209 	.word	0x20000209
 80006f8:	20000217 	.word	0x20000217
 80006fc:	2000020a 	.word	0x2000020a
 8000700:	2000020b 	.word	0x2000020b
 8000704:	2000020c 	.word	0x2000020c
 8000708:	2000020d 	.word	0x2000020d
 800070c:	2000020e 	.word	0x2000020e
 8000710:	2000020f 	.word	0x2000020f
 8000714:	20000210 	.word	0x20000210
 8000718:	20000211 	.word	0x20000211
 800071c:	20000212 	.word	0x20000212
 8000720:	20000213 	.word	0x20000213
 8000724:	20000214 	.word	0x20000214
 8000728:	20000218 	.word	0x20000218
 800072c:	2000021a 	.word	0x2000021a
 8000730:	2000021c 	.word	0x2000021c
 8000734:	2000021d 	.word	0x2000021d
 8000738:	2000021b 	.word	0x2000021b

0800073c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <getCharFromCursorPosition+0x1c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c

0800075c <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d117      	bne.n	800079a <readFromEEPROM+0x3e>
		//MachineID Okuma
		uint8_t tempMachineIDStartPos = idStartPos;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <readFromEEPROM+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	e00d      	b.n	8000792 <readFromEEPROM+0x36>
			machineID[i] = eepromData[tempMachineIDStartPos];
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <readFromEEPROM+0xc8>)
 800077a:	5cd1      	ldrb	r1, [r2, r3]
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <readFromEEPROM+0xcc>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]

			tempMachineIDStartPos++;
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	3301      	adds	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	3301      	adds	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b0b      	cmp	r3, #11
 8000796:	ddee      	ble.n	8000776 <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 8000798:	e03e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 2) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11c      	bne.n	80007da <readFromEEPROM+0x7e>
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <readFromEEPROM+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e012      	b.n	80007d2 <readFromEEPROM+0x76>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <readFromEEPROM+0xc8>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffc2 	bl	800073c <getCharFromCursorPosition>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <readFromEEPROM+0xd4>)
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	3301      	adds	r3, #1
 80007ca:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b13      	cmp	r3, #19
 80007d6:	dde9      	ble.n	80007ac <readFromEEPROM+0x50>
}
 80007d8:	e01e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 3) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d11b      	bne.n	8000818 <readFromEEPROM+0xbc>
		uint8_t tempPassStartPos = passStartPos;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <readFromEEPROM+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e012      	b.n	8000812 <readFromEEPROM+0xb6>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <readFromEEPROM+0xc8>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa2 	bl	800073c <getCharFromCursorPosition>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <readFromEEPROM+0xdc>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3301      	adds	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde9      	ble.n	80007ec <readFromEEPROM+0x90>
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000128 	.word	0x20000128
 8000828:	200001a0 	.word	0x200001a0
 800082c:	20000010 	.word	0x20000010
 8000830:	200001ac 	.word	0x200001ac
 8000834:	20000014 	.word	0x20000014
 8000838:	200001c0 	.word	0x200001c0

0800083c <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f7ff fcea 	bl	8000224 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f00a fed9 	bl	800b610 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4618      	mov	r0, r3
 8000862:	f007 fe09 	bl	8008478 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a0      	sub	sp, #128	; 0x80
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 800087c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000880:	4915      	ldr	r1, [pc, #84]	; (80008d8 <ESP8266_Init+0x68>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffda 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <ESP8266_Init+0x6c>)
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffd4 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 8000894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000898:	4911      	ldr	r1, [pc, #68]	; (80008e0 <ESP8266_Init+0x70>)
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ffce 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 80008a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a4:	490f      	ldr	r1, [pc, #60]	; (80008e4 <ESP8266_Init+0x74>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff ffc8 	bl	800083c <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 80008ac:	f107 0014 	add.w	r0, r7, #20
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <ESP8266_Init+0x78>)
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	f00b fc83 	bl	800c1c4 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ffb7 	bl	800083c <sendATCommand>
}
 80008ce:	bf00      	nop
 80008d0:	3778      	adds	r7, #120	; 0x78
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	0800cb1c 	.word	0x0800cb1c
 80008dc:	0800cb2c 	.word	0x0800cb2c
 80008e0:	0800cb38 	.word	0x0800cb38
 80008e4:	0800cb40 	.word	0x0800cb40
 80008e8:	0800cb50 	.word	0x0800cb50

080008ec <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0c6      	sub	sp, #280	; 0x118
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000904:	6019      	str	r1, [r3, #0]
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800090e:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000910:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <sendMachineData+0xb8>)
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <sendMachineData+0xbc>)
 8000918:	21c8      	movs	r1, #200	; 0xc8
 800091a:	f00b fc53 	bl	800c1c4 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 800091e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	f7ff ff84 	bl	800083c <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800093c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <sendMachineData+0xc0>)
 8000942:	9201      	str	r2, [sp, #4]
 8000944:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000948:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <sendMachineData+0xc4>)
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f00b fc35 	bl	800c1c4 <sniprintf>
 800095a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 800095e:	f107 0010 	add.w	r0, r7, #16
 8000962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000966:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <sendMachineData+0xc8>)
 8000968:	2132      	movs	r1, #50	; 0x32
 800096a:	f00b fc2b 	bl	800c1c4 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 800096e:	f107 0110 	add.w	r1, r7, #16
 8000972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	f7ff ff5c 	bl	800083c <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000984:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000990:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f7ff ff51 	bl	800083c <sendATCommand>
}
 800099a:	bf00      	nop
 800099c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0800cb6c 	.word	0x0800cb6c
 80009a8:	0800cb7c 	.word	0x0800cb7c
 80009ac:	0800cbf8 	.word	0x0800cbf8
 80009b0:	0800cb9c 	.word	0x0800cb9c
 80009b4:	0800cc0c 	.word	0x0800cc0c

080009b8 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af04      	add	r7, sp, #16
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <hata2EEPROM+0xa4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <hata2EEPROM+0xa8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <hata2EEPROM+0xac>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009d6:	f000 f92b 	bl	8000c30 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009da:	e000      	b.n	80009de <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009dc:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e012      	b.n	8000a0a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <hata2EEPROM+0xa8>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <hata2EEPROM+0xac>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d107      	bne.n	8000a04 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <hata2EEPROM+0xa8>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	4919      	ldr	r1, [pc, #100]	; (8000a64 <hata2EEPROM+0xac>)
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	54ca      	strb	r2, [r1, r3]
					break;
 8000a02:	e007      	b.n	8000a14 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <hata2EEPROM+0xa4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbe7      	blt.n	80009e4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <hata2EEPROM+0xa8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <hata2EEPROM+0xa4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b298      	uxth	r0, r3
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <hata2EEPROM+0xa8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <hata2EEPROM+0xac>)
 8000a26:	4413      	add	r3, r2
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <hata2EEPROM+0xa4>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	b292      	uxth	r2, r2
 8000a2e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a32:	9402      	str	r4, [sp, #8]
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	21a0      	movs	r1, #160	; 0xa0
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <hata2EEPROM+0xb0>)
 8000a40:	f008 fda4 	bl	800958c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f007 fd16 	bl	8008478 <HAL_Delay>
	eepromKontrol(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fbf1 	bl	8000234 <eepromKontrol>
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000a8 	.word	0x200000a8
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	20000128 	.word	0x20000128
 8000a68:	2000028c 	.word	0x2000028c

08000a6c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d11d      	bne.n	8000ab8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a7c:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a84:	4a61      	ldr	r2, [pc, #388]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f006 ff9f 	bl	80079cc <lcd_print>
 8000a8e:	e008      	b.n	8000aa2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a90:	4b5d      	ldr	r3, [pc, #372]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d104      	bne.n	8000aa2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a98:	4a5d      	ldr	r2, [pc, #372]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f006 ff95 	bl	80079cc <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000aa2:	4a5c      	ldr	r2, [pc, #368]	; (8000c14 <hataKoduLcdGoster+0x1a8>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f006 ff90 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "          ");
 8000aac:	4a5a      	ldr	r2, [pc, #360]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000aae:	2107      	movs	r1, #7
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f006 ff8b 	bl	80079cc <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000ab6:	e0a3      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d11d      	bne.n	8000afa <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000abe:	4b52      	ldr	r3, [pc, #328]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d105      	bne.n	8000ad2 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000ac6:	4a51      	ldr	r2, [pc, #324]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	2001      	movs	r0, #1
 8000acc:	f006 ff7e 	bl	80079cc <lcd_print>
 8000ad0:	e008      	b.n	8000ae4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000ad2:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000ada:	4a4d      	ldr	r2, [pc, #308]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f006 ff74 	bl	80079cc <lcd_print>
		lcd_print(2, 2, "2");
 8000ae4:	4a4d      	ldr	r2, [pc, #308]	; (8000c1c <hataKoduLcdGoster+0x1b0>)
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f006 ff6f 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "          ");
 8000aee:	4a4a      	ldr	r2, [pc, #296]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000af0:	2107      	movs	r1, #7
 8000af2:	2002      	movs	r0, #2
 8000af4:	f006 ff6a 	bl	80079cc <lcd_print>
}
 8000af8:	e082      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d11d      	bne.n	8000b3c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b00:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b08:	4a40      	ldr	r2, [pc, #256]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f006 ff5d 	bl	80079cc <lcd_print>
 8000b12:	e008      	b.n	8000b26 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d104      	bne.n	8000b26 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1c:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f006 ff53 	bl	80079cc <lcd_print>
		lcd_print(2, 3, "3");
 8000b26:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <hataKoduLcdGoster+0x1b4>)
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f006 ff4e 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "          ");
 8000b30:	4a39      	ldr	r2, [pc, #228]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000b32:	2107      	movs	r1, #7
 8000b34:	2002      	movs	r0, #2
 8000b36:	f006 ff49 	bl	80079cc <lcd_print>
}
 8000b3a:	e061      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d11d      	bne.n	8000b7e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f006 ff3c 	bl	80079cc <lcd_print>
 8000b54:	e008      	b.n	8000b68 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f006 ff32 	bl	80079cc <lcd_print>
		lcd_print(2, 4, "4");
 8000b68:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <hataKoduLcdGoster+0x1b8>)
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f006 ff2d 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "          ");
 8000b72:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000b74:	2107      	movs	r1, #7
 8000b76:	2002      	movs	r0, #2
 8000b78:	f006 ff28 	bl	80079cc <lcd_print>
}
 8000b7c:	e040      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	d11d      	bne.n	8000bc0 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2001      	movs	r0, #1
 8000b92:	f006 ff1b 	bl	80079cc <lcd_print>
 8000b96:	e008      	b.n	8000baa <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f006 ff11 	bl	80079cc <lcd_print>
		lcd_print(2, 5, "5");
 8000baa:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <hataKoduLcdGoster+0x1bc>)
 8000bac:	2105      	movs	r1, #5
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f006 ff0c 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f006 ff07 	bl	80079cc <lcd_print>
}
 8000bbe:	e01f      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d11c      	bne.n	8000c00 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f006 fefa 	bl	80079cc <lcd_print>
 8000bd8:	e008      	b.n	8000bec <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d104      	bne.n	8000bec <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f006 fef0 	bl	80079cc <lcd_print>
		lcd_print(2, 6, "6");
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <hataKoduLcdGoster+0x1c0>)
 8000bee:	2106      	movs	r1, #6
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f006 feeb 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f006 fee6 	bl	80079cc <lcd_print>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000021d 	.word	0x2000021d
 8000c0c:	0800cc98 	.word	0x0800cc98
 8000c10:	0800cca8 	.word	0x0800cca8
 8000c14:	0800ccb8 	.word	0x0800ccb8
 8000c18:	0800ccbc 	.word	0x0800ccbc
 8000c1c:	0800ccc8 	.word	0x0800ccc8
 8000c20:	0800cccc 	.word	0x0800cccc
 8000c24:	0800ccd0 	.word	0x0800ccd0
 8000c28:	0800ccd4 	.word	0x0800ccd4
 8000c2c:	0800ccd8 	.word	0x0800ccd8

08000c30 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e009      	b.n	8000c50 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <eepromDataFillWithEmpty+0x38>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <eepromDataFillWithEmpty+0x3c>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <eepromDataFillWithEmpty+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbf0      	blt.n	8000c3c <eepromDataFillWithEmpty+0xc>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000080 	.word	0x20000080
 8000c6c:	20000128 	.word	0x20000128
 8000c70:	200000a8 	.word	0x200000a8

08000c74 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c86:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <i2cTest+0x154>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <i2cTest+0x154>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0201 	bic.w	r2, r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c96:	484c      	ldr	r0, [pc, #304]	; (8000dc8 <i2cTest+0x154>)
 8000c98:	f008 fb4a 	bl	8009330 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9c:	23c0      	movs	r3, #192	; 0xc0
 8000c9e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000ca0:	2311      	movs	r3, #17
 8000ca2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <i2cTest+0x158>)
 8000cb2:	f007 ff51 	bl	8008b58 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	4844      	ldr	r0, [pc, #272]	; (8000dcc <i2cTest+0x158>)
 8000cbc:	f008 f9c3 	bl	8009046 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	4841      	ldr	r0, [pc, #260]	; (8000dcc <i2cTest+0x158>)
 8000cc6:	f008 f9be 	bl	8009046 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f007 fbd4 	bl	8008478 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cd0:	bf00      	nop
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	483d      	ldr	r0, [pc, #244]	; (8000dcc <i2cTest+0x158>)
 8000cd6:	f008 f99f 	bl	8009018 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d006      	beq.n	8000cee <i2cTest+0x7a>
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	483a      	ldr	r0, [pc, #232]	; (8000dcc <i2cTest+0x158>)
 8000ce4:	f008 f998 	bl	8009018 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d1f1      	bne.n	8000cd2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	4836      	ldr	r0, [pc, #216]	; (8000dcc <i2cTest+0x158>)
 8000cf4:	f008 f9a7 	bl	8009046 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f007 fbbd 	bl	8008478 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cfe:	bf00      	nop
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	4832      	ldr	r0, [pc, #200]	; (8000dcc <i2cTest+0x158>)
 8000d04:	f008 f988 	bl	8009018 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d0f8      	beq.n	8000d00 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	482e      	ldr	r0, [pc, #184]	; (8000dcc <i2cTest+0x158>)
 8000d14:	f008 f997 	bl	8009046 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f007 fbad 	bl	8008478 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d1e:	bf00      	nop
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	482a      	ldr	r0, [pc, #168]	; (8000dcc <i2cTest+0x158>)
 8000d24:	f008 f978 	bl	8009018 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d0f8      	beq.n	8000d20 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	4826      	ldr	r0, [pc, #152]	; (8000dcc <i2cTest+0x158>)
 8000d34:	f008 f987 	bl	8009046 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f007 fb9d 	bl	8008478 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d3e:	bf00      	nop
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	4822      	ldr	r0, [pc, #136]	; (8000dcc <i2cTest+0x158>)
 8000d44:	f008 f968 	bl	8009018 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d1f8      	bne.n	8000d40 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	481e      	ldr	r0, [pc, #120]	; (8000dcc <i2cTest+0x158>)
 8000d54:	f008 f977 	bl	8009046 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f007 fb8d 	bl	8008478 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d5e:	bf00      	nop
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <i2cTest+0x158>)
 8000d64:	f008 f958 	bl	8009018 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d1f8      	bne.n	8000d60 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <i2cTest+0x158>)
 8000d84:	f007 fee8 	bl	8008b58 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <i2cTest+0x154>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <i2cTest+0x154>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d96:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <i2cTest+0x154>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <i2cTest+0x154>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000da6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <i2cTest+0x154>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <i2cTest+0x154>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <i2cTest+0x154>)
 8000dba:	f008 f975 	bl	80090a8 <HAL_I2C_Init>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000028c 	.word	0x2000028c
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dda:	20c8      	movs	r0, #200	; 0xc8
 8000ddc:	f007 fb4c 	bl	8008478 <HAL_Delay>
	lcd_clear();
 8000de0:	f006 fe20 	bl	8007a24 <lcd_clear>
	if(type == 1 && page == 0) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d143      	bne.n	8000e72 <printTemplate+0xa2>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d140      	bne.n	8000e72 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000df0:	4a9d      	ldr	r2, [pc, #628]	; (8001068 <printTemplate+0x298>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	2001      	movs	r0, #1
 8000df6:	f006 fde9 	bl	80079cc <lcd_print>
		lcd_print(2, 3, "0");
 8000dfa:	4a9c      	ldr	r2, [pc, #624]	; (800106c <printTemplate+0x29c>)
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f006 fde4 	bl	80079cc <lcd_print>
		lcd_print(2, 4, "1");
 8000e04:	4a9a      	ldr	r2, [pc, #616]	; (8001070 <printTemplate+0x2a0>)
 8000e06:	2104      	movs	r1, #4
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f006 fddf 	bl	80079cc <lcd_print>
		lcd_print(2, 5, "2");
 8000e0e:	4a99      	ldr	r2, [pc, #612]	; (8001074 <printTemplate+0x2a4>)
 8000e10:	2105      	movs	r1, #5
 8000e12:	2002      	movs	r0, #2
 8000e14:	f006 fdda 	bl	80079cc <lcd_print>
		lcd_print(2, 6, "3");
 8000e18:	4a97      	ldr	r2, [pc, #604]	; (8001078 <printTemplate+0x2a8>)
 8000e1a:	2106      	movs	r1, #6
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f006 fdd5 	bl	80079cc <lcd_print>
		lcd_print(2, 7, "4");
 8000e22:	4a96      	ldr	r2, [pc, #600]	; (800107c <printTemplate+0x2ac>)
 8000e24:	2107      	movs	r1, #7
 8000e26:	2002      	movs	r0, #2
 8000e28:	f006 fdd0 	bl	80079cc <lcd_print>
		lcd_print(2, 10, "5");
 8000e2c:	4a94      	ldr	r2, [pc, #592]	; (8001080 <printTemplate+0x2b0>)
 8000e2e:	210a      	movs	r1, #10
 8000e30:	2002      	movs	r0, #2
 8000e32:	f006 fdcb 	bl	80079cc <lcd_print>
		lcd_print(2, 11, "6");
 8000e36:	4a93      	ldr	r2, [pc, #588]	; (8001084 <printTemplate+0x2b4>)
 8000e38:	210b      	movs	r1, #11
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f006 fdc6 	bl	80079cc <lcd_print>
		lcd_print(2, 12, "7");
 8000e40:	4a91      	ldr	r2, [pc, #580]	; (8001088 <printTemplate+0x2b8>)
 8000e42:	210c      	movs	r1, #12
 8000e44:	2002      	movs	r0, #2
 8000e46:	f006 fdc1 	bl	80079cc <lcd_print>
		lcd_print(2, 13, "8");
 8000e4a:	4a90      	ldr	r2, [pc, #576]	; (800108c <printTemplate+0x2bc>)
 8000e4c:	210d      	movs	r1, #13
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f006 fdbc 	bl	80079cc <lcd_print>
		lcd_print(2, 14, "9");
 8000e54:	4a8e      	ldr	r2, [pc, #568]	; (8001090 <printTemplate+0x2c0>)
 8000e56:	210e      	movs	r1, #14
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f006 fdb7 	bl	80079cc <lcd_print>
		lcd_print(1, 5, machineID);
 8000e5e:	4a8d      	ldr	r2, [pc, #564]	; (8001094 <printTemplate+0x2c4>)
 8000e60:	2105      	movs	r1, #5
 8000e62:	2001      	movs	r0, #1
 8000e64:	f006 fdb2 	bl	80079cc <lcd_print>
		lcd_gotoxy(2, 3);
 8000e68:	2103      	movs	r1, #3
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f006 fd8f 	bl	800798e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e70:	e0f5      	b.n	800105e <printTemplate+0x28e>
	} else if(type == 2) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d178      	bne.n	8000f6a <printTemplate+0x19a>
		if(page == 1) {
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d114      	bne.n	8000ea8 <printTemplate+0xd8>
			lcd_clear();
 8000e7e:	f006 fdd1 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f007 faf8 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e88:	4a83      	ldr	r2, [pc, #524]	; (8001098 <printTemplate+0x2c8>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f006 fd9d 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e92:	4a82      	ldr	r2, [pc, #520]	; (800109c <printTemplate+0x2cc>)
 8000e94:	2107      	movs	r1, #7
 8000e96:	2001      	movs	r0, #1
 8000e98:	f006 fd98 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e9c:	4a80      	ldr	r2, [pc, #512]	; (80010a0 <printTemplate+0x2d0>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f006 fd93 	bl	80079cc <lcd_print>
}
 8000ea6:	e0da      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 2) {
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d114      	bne.n	8000ed8 <printTemplate+0x108>
			lcd_clear();
 8000eae:	f006 fdb9 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000eb2:	2064      	movs	r0, #100	; 0x64
 8000eb4:	f007 fae0 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb8:	4a77      	ldr	r2, [pc, #476]	; (8001098 <printTemplate+0x2c8>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f006 fd85 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ec2:	4a76      	ldr	r2, [pc, #472]	; (800109c <printTemplate+0x2cc>)
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f006 fd80 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ecc:	4a75      	ldr	r2, [pc, #468]	; (80010a4 <printTemplate+0x2d4>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f006 fd7b 	bl	80079cc <lcd_print>
}
 8000ed6:	e0c2      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 3) {
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d114      	bne.n	8000f08 <printTemplate+0x138>
			lcd_clear();
 8000ede:	f006 fda1 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f007 fac8 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ee8:	4a6b      	ldr	r2, [pc, #428]	; (8001098 <printTemplate+0x2c8>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2001      	movs	r0, #1
 8000eee:	f006 fd6d 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ef2:	4a6a      	ldr	r2, [pc, #424]	; (800109c <printTemplate+0x2cc>)
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f006 fd68 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000efc:	4a6a      	ldr	r2, [pc, #424]	; (80010a8 <printTemplate+0x2d8>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	2002      	movs	r0, #2
 8000f02:	f006 fd63 	bl	80079cc <lcd_print>
}
 8000f06:	e0aa      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 4) {
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d114      	bne.n	8000f38 <printTemplate+0x168>
			lcd_clear();
 8000f0e:	f006 fd89 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f007 fab0 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f18:	4a5f      	ldr	r2, [pc, #380]	; (8001098 <printTemplate+0x2c8>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f006 fd55 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f22:	4a5e      	ldr	r2, [pc, #376]	; (800109c <printTemplate+0x2cc>)
 8000f24:	2107      	movs	r1, #7
 8000f26:	2001      	movs	r0, #1
 8000f28:	f006 fd50 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f2c:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <printTemplate+0x2dc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 fd4b 	bl	80079cc <lcd_print>
}
 8000f36:	e092      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 5) {
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b05      	cmp	r3, #5
 8000f3c:	f040 808f 	bne.w	800105e <printTemplate+0x28e>
			lcd_clear();
 8000f40:	f006 fd70 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f007 fa97 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f4a:	4a53      	ldr	r2, [pc, #332]	; (8001098 <printTemplate+0x2c8>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f006 fd3c 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f54:	4a51      	ldr	r2, [pc, #324]	; (800109c <printTemplate+0x2cc>)
 8000f56:	2107      	movs	r1, #7
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 fd37 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f5e:	4a54      	ldr	r2, [pc, #336]	; (80010b0 <printTemplate+0x2e0>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 fd32 	bl	80079cc <lcd_print>
}
 8000f68:	e079      	b.n	800105e <printTemplate+0x28e>
	} else if(type == 3) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d176      	bne.n	800105e <printTemplate+0x28e>
		if(page == 1) {
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d114      	bne.n	8000fa0 <printTemplate+0x1d0>
			lcd_clear();
 8000f76:	f006 fd55 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f007 fa7c 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <printTemplate+0x2e4>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2001      	movs	r0, #1
 8000f86:	f006 fd21 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <printTemplate+0x2e8>)
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f006 fd1c 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <printTemplate+0x2d0>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f006 fd17 	bl	80079cc <lcd_print>
}
 8000f9e:	e05e      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 2) {
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d114      	bne.n	8000fd0 <printTemplate+0x200>
			lcd_clear();
 8000fa6:	f006 fd3d 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f007 fa64 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fb0:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <printTemplate+0x2e4>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f006 fd09 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <printTemplate+0x2e8>)
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f006 fd04 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fc4:	4a37      	ldr	r2, [pc, #220]	; (80010a4 <printTemplate+0x2d4>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f006 fcff 	bl	80079cc <lcd_print>
}
 8000fce:	e046      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 3) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d114      	bne.n	8001000 <printTemplate+0x230>
			lcd_clear();
 8000fd6:	f006 fd25 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f007 fa4c 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fe0:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <printTemplate+0x2e4>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f006 fcf1 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fea:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <printTemplate+0x2e8>)
 8000fec:	2107      	movs	r1, #7
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f006 fcec 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <printTemplate+0x2d8>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f006 fce7 	bl	80079cc <lcd_print>
}
 8000ffe:	e02e      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 4) {
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d114      	bne.n	8001030 <printTemplate+0x260>
			lcd_clear();
 8001006:	f006 fd0d 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 800100a:	2064      	movs	r0, #100	; 0x64
 800100c:	f007 fa34 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001010:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <printTemplate+0x2e4>)
 8001012:	2101      	movs	r1, #1
 8001014:	2001      	movs	r0, #1
 8001016:	f006 fcd9 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiPass);
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <printTemplate+0x2e8>)
 800101c:	2107      	movs	r1, #7
 800101e:	2001      	movs	r0, #1
 8001020:	f006 fcd4 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <printTemplate+0x2dc>)
 8001026:	2101      	movs	r1, #1
 8001028:	2002      	movs	r0, #2
 800102a:	f006 fccf 	bl	80079cc <lcd_print>
}
 800102e:	e016      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 5) {
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d113      	bne.n	800105e <printTemplate+0x28e>
			lcd_clear();
 8001036:	f006 fcf5 	bl	8007a24 <lcd_clear>
			HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f007 fa1c 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <printTemplate+0x2e4>)
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f006 fcc1 	bl	80079cc <lcd_print>
			lcd_print(1, 7, wifiPass);
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <printTemplate+0x2e8>)
 800104c:	2107      	movs	r1, #7
 800104e:	2001      	movs	r0, #1
 8001050:	f006 fcbc 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <printTemplate+0x2e0>)
 8001056:	2101      	movs	r1, #1
 8001058:	2002      	movs	r0, #2
 800105a:	f006 fcb7 	bl	80079cc <lcd_print>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800ccdc 	.word	0x0800ccdc
 800106c:	0800cce4 	.word	0x0800cce4
 8001070:	0800cce8 	.word	0x0800cce8
 8001074:	0800ccec 	.word	0x0800ccec
 8001078:	0800ccf0 	.word	0x0800ccf0
 800107c:	0800ccf4 	.word	0x0800ccf4
 8001080:	0800ccf8 	.word	0x0800ccf8
 8001084:	0800ccfc 	.word	0x0800ccfc
 8001088:	0800cd00 	.word	0x0800cd00
 800108c:	0800cd04 	.word	0x0800cd04
 8001090:	0800cd08 	.word	0x0800cd08
 8001094:	200001a0 	.word	0x200001a0
 8001098:	0800cd0c 	.word	0x0800cd0c
 800109c:	200001ac 	.word	0x200001ac
 80010a0:	0800cd14 	.word	0x0800cd14
 80010a4:	0800cd28 	.word	0x0800cd28
 80010a8:	0800cd3c 	.word	0x0800cd3c
 80010ac:	0800cd50 	.word	0x0800cd50
 80010b0:	0800cd64 	.word	0x0800cd64
 80010b4:	0800cd78 	.word	0x0800cd78
 80010b8:	200001c0 	.word	0x200001c0

080010bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010c0:	f3bf 8f4f 	dsb	sy
}
 80010c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <__NVIC_SystemReset+0x24>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010ce:	4904      	ldr	r1, [pc, #16]	; (80010e0 <__NVIC_SystemReset+0x24>)
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_SystemReset+0x28>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010d6:	f3bf 8f4f 	dsb	sy
}
 80010da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <__NVIC_SystemReset+0x20>
 80010e0:	e000ed00 	.word	0xe000ed00
 80010e4:	05fa0004 	.word	0x05fa0004

080010e8 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80010ee:	2101      	movs	r1, #1
 80010f0:	488e      	ldr	r0, [pc, #568]	; (800132c <menu+0x244>)
 80010f2:	f007 ff91 	bl	8009018 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	f040 808e 	bne.w	800121a <menu+0x132>
 80010fe:	4b8c      	ldr	r3, [pc, #560]	; (8001330 <menu+0x248>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f083 0301 	eor.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 8086 	beq.w	800121a <menu+0x132>
		menuSayac = menuSayac+1;
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <menu+0x24c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b87      	ldr	r3, [pc, #540]	; (8001334 <menu+0x24c>)
 8001118:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800111a:	4b86      	ldr	r3, [pc, #536]	; (8001334 <menu+0x24c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b24      	cmp	r3, #36	; 0x24
 8001120:	d102      	bne.n	8001128 <menu+0x40>
			menuSayac = 1;
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <menu+0x24c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001128:	4b82      	ldr	r3, [pc, #520]	; (8001334 <menu+0x24c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b12      	cmp	r3, #18
 800112e:	d106      	bne.n	800113e <menu+0x56>
 8001130:	4b81      	ldr	r3, [pc, #516]	; (8001338 <menu+0x250>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <menu+0x56>
			menuSayac = 21;
 8001138:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <menu+0x24c>)
 800113a:	2215      	movs	r2, #21
 800113c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800113e:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <menu+0x24c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b08      	cmp	r3, #8
 8001144:	d106      	bne.n	8001154 <menu+0x6c>
 8001146:	4b7d      	ldr	r3, [pc, #500]	; (800133c <menu+0x254>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <menu+0x6c>
			menuSayac = 16;
 800114e:	4b79      	ldr	r3, [pc, #484]	; (8001334 <menu+0x24c>)
 8001150:	2210      	movs	r2, #16
 8001152:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001154:	4b77      	ldr	r3, [pc, #476]	; (8001334 <menu+0x24c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b0d      	cmp	r3, #13
 800115a:	d106      	bne.n	800116a <menu+0x82>
 800115c:	4b77      	ldr	r3, [pc, #476]	; (800133c <menu+0x254>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <menu+0x82>
			menuSayac = 16;
 8001164:	4b73      	ldr	r3, [pc, #460]	; (8001334 <menu+0x24c>)
 8001166:	2210      	movs	r2, #16
 8001168:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800116a:	4b72      	ldr	r3, [pc, #456]	; (8001334 <menu+0x24c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b09      	cmp	r3, #9
 8001170:	d106      	bne.n	8001180 <menu+0x98>
 8001172:	4b72      	ldr	r3, [pc, #456]	; (800133c <menu+0x254>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d102      	bne.n	8001180 <menu+0x98>
			menuSayac = 13;
 800117a:	4b6e      	ldr	r3, [pc, #440]	; (8001334 <menu+0x24c>)
 800117c:	220d      	movs	r2, #13
 800117e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <menu+0x24c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b0a      	cmp	r3, #10
 8001186:	d10a      	bne.n	800119e <menu+0xb6>
 8001188:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <menu+0x258>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <menu+0xb0>
 8001190:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <menu+0x258>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d102      	bne.n	800119e <menu+0xb6>
			menuSayac = 11;
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <menu+0x24c>)
 800119a:	220b      	movs	r2, #11
 800119c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <menu+0x24c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b0c      	cmp	r3, #12
 80011a4:	d10e      	bne.n	80011c4 <menu+0xdc>
 80011a6:	4b67      	ldr	r3, [pc, #412]	; (8001344 <menu+0x25c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d003      	beq.n	80011b6 <menu+0xce>
 80011ae:	4b65      	ldr	r3, [pc, #404]	; (8001344 <menu+0x25c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d106      	bne.n	80011c4 <menu+0xdc>
 80011b6:	4b61      	ldr	r3, [pc, #388]	; (800133c <menu+0x254>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <menu+0xdc>
			menuSayac = 16;
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <menu+0x24c>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <menu+0x24c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d10e      	bne.n	80011ea <menu+0x102>
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <menu+0x25c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d003      	beq.n	80011dc <menu+0xf4>
 80011d4:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <menu+0x25c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d106      	bne.n	80011ea <menu+0x102>
 80011dc:	4b57      	ldr	r3, [pc, #348]	; (800133c <menu+0x254>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d102      	bne.n	80011ea <menu+0x102>
			menuSayac = 13;
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <menu+0x24c>)
 80011e6:	220d      	movs	r2, #13
 80011e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <menu+0x24c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	d106      	bne.n	8001200 <menu+0x118>
 80011f2:	4b55      	ldr	r3, [pc, #340]	; (8001348 <menu+0x260>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <menu+0x118>
			menuSayac = 16;
 80011fa:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <menu+0x24c>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001200:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <menu+0x24c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b18      	cmp	r3, #24
 8001206:	d106      	bne.n	8001216 <menu+0x12e>
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <menu+0x250>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <menu+0x12e>
			menuSayac = 26;
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <menu+0x24c>)
 8001212:	221a      	movs	r2, #26
 8001214:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001216:	f003 faef 	bl	80047f8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800121a:	2108      	movs	r1, #8
 800121c:	484b      	ldr	r0, [pc, #300]	; (800134c <menu+0x264>)
 800121e:	f007 fefb 	bl	8009018 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d175      	bne.n	8001314 <menu+0x22c>
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <menu+0x248>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f083 0301 	eor.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d06e      	beq.n	8001314 <menu+0x22c>
		if (menuSayac <= 1) {
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <menu+0x24c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d802      	bhi.n	8001244 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <menu+0x24c>)
 8001240:	2224      	movs	r2, #36	; 0x24
 8001242:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <menu+0x24c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <menu+0x24c>)
 800124e:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001250:	4b38      	ldr	r3, [pc, #224]	; (8001334 <menu+0x24c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b14      	cmp	r3, #20
 8001256:	d106      	bne.n	8001266 <menu+0x17e>
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <menu+0x250>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <menu+0x17e>
			menuSayac = 17;
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <menu+0x24c>)
 8001262:	2211      	movs	r2, #17
 8001264:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <menu+0x24c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	d106      	bne.n	800127c <menu+0x194>
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <menu+0x254>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <menu+0x194>
			menuSayac = 7;
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <menu+0x24c>)
 8001278:	2207      	movs	r2, #7
 800127a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <menu+0x24c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d106      	bne.n	8001292 <menu+0x1aa>
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <menu+0x254>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <menu+0x1aa>
			menuSayac = 12;
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <menu+0x24c>)
 800128e:	220c      	movs	r2, #12
 8001290:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <menu+0x24c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	d106      	bne.n	80012a8 <menu+0x1c0>
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <menu+0x254>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d102      	bne.n	80012a8 <menu+0x1c0>
			menuSayac = 8;
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <menu+0x24c>)
 80012a4:	2208      	movs	r2, #8
 80012a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <menu+0x24c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	d10a      	bne.n	80012c6 <menu+0x1de>
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <menu+0x258>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d003      	beq.n	80012c0 <menu+0x1d8>
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <menu+0x258>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d102      	bne.n	80012c6 <menu+0x1de>
			menuSayac = 9;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <menu+0x24c>)
 80012c2:	2209      	movs	r2, #9
 80012c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <menu+0x24c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d10a      	bne.n	80012e4 <menu+0x1fc>
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <menu+0x25c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d003      	beq.n	80012de <menu+0x1f6>
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <menu+0x25c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d102      	bne.n	80012e4 <menu+0x1fc>
			menuSayac = 11;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <menu+0x24c>)
 80012e0:	220b      	movs	r2, #11
 80012e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <menu+0x24c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d106      	bne.n	80012fa <menu+0x212>
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <menu+0x260>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d102      	bne.n	80012fa <menu+0x212>
			menuSayac = 14;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <menu+0x24c>)
 80012f6:	220e      	movs	r2, #14
 80012f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <menu+0x24c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b19      	cmp	r3, #25
 8001300:	d106      	bne.n	8001310 <menu+0x228>
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <menu+0x250>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <menu+0x228>
			menuSayac = 23;
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <menu+0x24c>)
 800130c:	2217      	movs	r2, #23
 800130e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001310:	f003 fa72 	bl	80047f8 <bekle>
	}

	if (menuSayac == 0) {
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <menu+0x24c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d133      	bne.n	8001384 <menu+0x29c>
		if(dilSecim == 0) {
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <menu+0x268>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d121      	bne.n	8001368 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <menu+0x26c>)
 8001326:	2101      	movs	r1, #1
 8001328:	2001      	movs	r0, #1
 800132a:	e015      	b.n	8001358 <menu+0x270>
 800132c:	40010800 	.word	0x40010800
 8001330:	2000022b 	.word	0x2000022b
 8001334:	200001fc 	.word	0x200001fc
 8001338:	2000020b 	.word	0x2000020b
 800133c:	20000204 	.word	0x20000204
 8001340:	20000205 	.word	0x20000205
 8001344:	20000206 	.word	0x20000206
 8001348:	20000207 	.word	0x20000207
 800134c:	40011000 	.word	0x40011000
 8001350:	2000021d 	.word	0x2000021d
 8001354:	0800cd80 	.word	0x0800cd80
 8001358:	f006 fb38 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800135c:	4a94      	ldr	r2, [pc, #592]	; (80015b0 <menu+0x4c8>)
 800135e:	2101      	movs	r1, #1
 8001360:	2002      	movs	r0, #2
 8001362:	f006 fb33 	bl	80079cc <lcd_print>
 8001366:	e00d      	b.n	8001384 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001368:	4b92      	ldr	r3, [pc, #584]	; (80015b4 <menu+0x4cc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d109      	bne.n	8001384 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001370:	4a91      	ldr	r2, [pc, #580]	; (80015b8 <menu+0x4d0>)
 8001372:	2101      	movs	r1, #1
 8001374:	2001      	movs	r0, #1
 8001376:	f006 fb29 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800137a:	4a90      	ldr	r2, [pc, #576]	; (80015bc <menu+0x4d4>)
 800137c:	2101      	movs	r1, #1
 800137e:	2002      	movs	r0, #2
 8001380:	f006 fb24 	bl	80079cc <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001384:	4b8e      	ldr	r3, [pc, #568]	; (80015c0 <menu+0x4d8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 82b5 	bne.w	80018f8 <menu+0x810>
		if(dilSecim == 0) {
 800138e:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <menu+0x4cc>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001396:	4a8b      	ldr	r2, [pc, #556]	; (80015c4 <menu+0x4dc>)
 8001398:	2101      	movs	r1, #1
 800139a:	2001      	movs	r0, #1
 800139c:	f006 fb16 	bl	80079cc <lcd_print>
 80013a0:	e008      	b.n	80013b4 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80013a2:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <menu+0x4cc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d104      	bne.n	80013b4 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80013aa:	4a87      	ldr	r2, [pc, #540]	; (80015c8 <menu+0x4e0>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	2001      	movs	r0, #1
 80013b0:	f006 fb0c 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80013b4:	4b85      	ldr	r3, [pc, #532]	; (80015cc <menu+0x4e4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d123      	bne.n	8001404 <menu+0x31c>
			if(dilSecim == 0) {
 80013bc:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <menu+0x4cc>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80013c4:	4a82      	ldr	r2, [pc, #520]	; (80015d0 <menu+0x4e8>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	2002      	movs	r0, #2
 80013ca:	f006 faff 	bl	80079cc <lcd_print>
 80013ce:	e008      	b.n	80013e2 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80013d0:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <menu+0x4cc>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d104      	bne.n	80013e2 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80013d8:	4a7e      	ldr	r2, [pc, #504]	; (80015d4 <menu+0x4ec>)
 80013da:	2101      	movs	r1, #1
 80013dc:	2002      	movs	r0, #2
 80013de:	f006 faf5 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80013e2:	4a7d      	ldr	r2, [pc, #500]	; (80015d8 <menu+0x4f0>)
 80013e4:	210f      	movs	r1, #15
 80013e6:	2002      	movs	r0, #2
 80013e8:	f006 faf0 	bl	80079cc <lcd_print>
			itoa(hataKayit1, snum, 10);
 80013ec:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <menu+0x4f4>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	220a      	movs	r2, #10
 80013f2:	497b      	ldr	r1, [pc, #492]	; (80015e0 <menu+0x4f8>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00a fe3b 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 80013fa:	4a79      	ldr	r2, [pc, #484]	; (80015e0 <menu+0x4f8>)
 80013fc:	210e      	movs	r1, #14
 80013fe:	2002      	movs	r0, #2
 8001400:	f006 fae4 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001404:	4b71      	ldr	r3, [pc, #452]	; (80015cc <menu+0x4e4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d123      	bne.n	8001454 <menu+0x36c>
			if(dilSecim == 0) {
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <menu+0x4cc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001414:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <menu+0x4fc>)
 8001416:	2101      	movs	r1, #1
 8001418:	2002      	movs	r0, #2
 800141a:	f006 fad7 	bl	80079cc <lcd_print>
 800141e:	e008      	b.n	8001432 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <menu+0x4cc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d104      	bne.n	8001432 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001428:	4a6f      	ldr	r2, [pc, #444]	; (80015e8 <menu+0x500>)
 800142a:	2101      	movs	r1, #1
 800142c:	2002      	movs	r0, #2
 800142e:	f006 facd 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <menu+0x504>)
 8001434:	210f      	movs	r1, #15
 8001436:	2002      	movs	r0, #2
 8001438:	f006 fac8 	bl	80079cc <lcd_print>
			itoa(hataKayit2, snum, 10);
 800143c:	4b6c      	ldr	r3, [pc, #432]	; (80015f0 <menu+0x508>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	220a      	movs	r2, #10
 8001442:	4967      	ldr	r1, [pc, #412]	; (80015e0 <menu+0x4f8>)
 8001444:	4618      	mov	r0, r3
 8001446:	f00a fe13 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 800144a:	4a65      	ldr	r2, [pc, #404]	; (80015e0 <menu+0x4f8>)
 800144c:	210e      	movs	r1, #14
 800144e:	2002      	movs	r0, #2
 8001450:	f006 fabc 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <menu+0x4e4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <menu+0x3bc>
			if(dilSecim == 0) {
 800145c:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <menu+0x4cc>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001464:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <menu+0x50c>)
 8001466:	2101      	movs	r1, #1
 8001468:	2002      	movs	r0, #2
 800146a:	f006 faaf 	bl	80079cc <lcd_print>
 800146e:	e008      	b.n	8001482 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <menu+0x4cc>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d104      	bne.n	8001482 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001478:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <menu+0x510>)
 800147a:	2101      	movs	r1, #1
 800147c:	2002      	movs	r0, #2
 800147e:	f006 faa5 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001482:	4a5a      	ldr	r2, [pc, #360]	; (80015ec <menu+0x504>)
 8001484:	210f      	movs	r1, #15
 8001486:	2002      	movs	r0, #2
 8001488:	f006 faa0 	bl	80079cc <lcd_print>
			itoa(hataKayit3, snum, 10);
 800148c:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <menu+0x514>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	220a      	movs	r2, #10
 8001492:	4953      	ldr	r1, [pc, #332]	; (80015e0 <menu+0x4f8>)
 8001494:	4618      	mov	r0, r3
 8001496:	f00a fdeb 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 800149a:	4a51      	ldr	r2, [pc, #324]	; (80015e0 <menu+0x4f8>)
 800149c:	210e      	movs	r1, #14
 800149e:	2002      	movs	r0, #2
 80014a0:	f006 fa94 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <menu+0x4e4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d123      	bne.n	80014f4 <menu+0x40c>
			if(dilSecim == 0) {
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <menu+0x4cc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <menu+0x518>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2002      	movs	r0, #2
 80014ba:	f006 fa87 	bl	80079cc <lcd_print>
 80014be:	e008      	b.n	80014d2 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80014c0:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <menu+0x4cc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d104      	bne.n	80014d2 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <menu+0x51c>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	2002      	movs	r0, #2
 80014ce:	f006 fa7d 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014d2:	4a46      	ldr	r2, [pc, #280]	; (80015ec <menu+0x504>)
 80014d4:	210f      	movs	r1, #15
 80014d6:	2002      	movs	r0, #2
 80014d8:	f006 fa78 	bl	80079cc <lcd_print>
			itoa(hataKayit4, snum, 10);
 80014dc:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <menu+0x520>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	220a      	movs	r2, #10
 80014e2:	493f      	ldr	r1, [pc, #252]	; (80015e0 <menu+0x4f8>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a fdc3 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 80014ea:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <menu+0x4f8>)
 80014ec:	210e      	movs	r1, #14
 80014ee:	2002      	movs	r0, #2
 80014f0:	f006 fa6c 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <menu+0x4e4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d123      	bne.n	8001544 <menu+0x45c>
			if(dilSecim == 0) {
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <menu+0x4cc>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001504:	4a41      	ldr	r2, [pc, #260]	; (800160c <menu+0x524>)
 8001506:	2101      	movs	r1, #1
 8001508:	2002      	movs	r0, #2
 800150a:	f006 fa5f 	bl	80079cc <lcd_print>
 800150e:	e008      	b.n	8001522 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <menu+0x4cc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d104      	bne.n	8001522 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <menu+0x528>)
 800151a:	2101      	movs	r1, #1
 800151c:	2002      	movs	r0, #2
 800151e:	f006 fa55 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001522:	4a32      	ldr	r2, [pc, #200]	; (80015ec <menu+0x504>)
 8001524:	210f      	movs	r1, #15
 8001526:	2002      	movs	r0, #2
 8001528:	f006 fa50 	bl	80079cc <lcd_print>
			itoa(hataKayit5, snum, 10);
 800152c:	4b39      	ldr	r3, [pc, #228]	; (8001614 <menu+0x52c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	220a      	movs	r2, #10
 8001532:	492b      	ldr	r1, [pc, #172]	; (80015e0 <menu+0x4f8>)
 8001534:	4618      	mov	r0, r3
 8001536:	f00a fd9b 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <menu+0x4f8>)
 800153c:	210e      	movs	r1, #14
 800153e:	2002      	movs	r0, #2
 8001540:	f006 fa44 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <menu+0x4e4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d123      	bne.n	8001594 <menu+0x4ac>
			if(dilSecim == 0) {
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <menu+0x4cc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001554:	4a30      	ldr	r2, [pc, #192]	; (8001618 <menu+0x530>)
 8001556:	2101      	movs	r1, #1
 8001558:	2002      	movs	r0, #2
 800155a:	f006 fa37 	bl	80079cc <lcd_print>
 800155e:	e008      	b.n	8001572 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <menu+0x4cc>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d104      	bne.n	8001572 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001568:	4a2c      	ldr	r2, [pc, #176]	; (800161c <menu+0x534>)
 800156a:	2101      	movs	r1, #1
 800156c:	2002      	movs	r0, #2
 800156e:	f006 fa2d 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001572:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <menu+0x504>)
 8001574:	210f      	movs	r1, #15
 8001576:	2002      	movs	r0, #2
 8001578:	f006 fa28 	bl	80079cc <lcd_print>
			itoa(hataKayit6, snum, 10);
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <menu+0x538>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	220a      	movs	r2, #10
 8001582:	4917      	ldr	r1, [pc, #92]	; (80015e0 <menu+0x4f8>)
 8001584:	4618      	mov	r0, r3
 8001586:	f00a fd73 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <menu+0x4f8>)
 800158c:	210e      	movs	r1, #14
 800158e:	2002      	movs	r0, #2
 8001590:	f006 fa1c 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <menu+0x4e4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b06      	cmp	r3, #6
 800159a:	d15f      	bne.n	800165c <menu+0x574>
			if(dilSecim == 0) {
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <menu+0x4cc>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d141      	bne.n	8001628 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <menu+0x53c>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	2002      	movs	r0, #2
 80015aa:	f006 fa0f 	bl	80079cc <lcd_print>
 80015ae:	e044      	b.n	800163a <menu+0x552>
 80015b0:	0800cd94 	.word	0x0800cd94
 80015b4:	2000021d 	.word	0x2000021d
 80015b8:	0800cda8 	.word	0x0800cda8
 80015bc:	0800cdbc 	.word	0x0800cdbc
 80015c0:	200001fc 	.word	0x200001fc
 80015c4:	0800cdd0 	.word	0x0800cdd0
 80015c8:	0800cde4 	.word	0x0800cde4
 80015cc:	200001fe 	.word	0x200001fe
 80015d0:	0800cdf8 	.word	0x0800cdf8
 80015d4:	0800ce08 	.word	0x0800ce08
 80015d8:	0800ce18 	.word	0x0800ce18
 80015dc:	2000021e 	.word	0x2000021e
 80015e0:	20000198 	.word	0x20000198
 80015e4:	0800ce1c 	.word	0x0800ce1c
 80015e8:	0800ce2c 	.word	0x0800ce2c
 80015ec:	0800ce3c 	.word	0x0800ce3c
 80015f0:	2000021f 	.word	0x2000021f
 80015f4:	0800ce40 	.word	0x0800ce40
 80015f8:	0800ce50 	.word	0x0800ce50
 80015fc:	20000220 	.word	0x20000220
 8001600:	0800ce60 	.word	0x0800ce60
 8001604:	0800ce70 	.word	0x0800ce70
 8001608:	20000221 	.word	0x20000221
 800160c:	0800ce80 	.word	0x0800ce80
 8001610:	0800ce90 	.word	0x0800ce90
 8001614:	20000222 	.word	0x20000222
 8001618:	0800cea0 	.word	0x0800cea0
 800161c:	0800ceb0 	.word	0x0800ceb0
 8001620:	20000223 	.word	0x20000223
 8001624:	0800cec0 	.word	0x0800cec0
			} else if(dilSecim == 1) {
 8001628:	4b4f      	ldr	r3, [pc, #316]	; (8001768 <menu+0x680>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d104      	bne.n	800163a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001630:	4a4e      	ldr	r2, [pc, #312]	; (800176c <menu+0x684>)
 8001632:	2101      	movs	r1, #1
 8001634:	2002      	movs	r0, #2
 8001636:	f006 f9c9 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800163a:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <menu+0x688>)
 800163c:	210f      	movs	r1, #15
 800163e:	2002      	movs	r0, #2
 8001640:	f006 f9c4 	bl	80079cc <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <menu+0x68c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	220a      	movs	r2, #10
 800164a:	494b      	ldr	r1, [pc, #300]	; (8001778 <menu+0x690>)
 800164c:	4618      	mov	r0, r3
 800164e:	f00a fd0f 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 8001652:	4a49      	ldr	r2, [pc, #292]	; (8001778 <menu+0x690>)
 8001654:	210e      	movs	r1, #14
 8001656:	2002      	movs	r0, #2
 8001658:	f006 f9b8 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <menu+0x694>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d123      	bne.n	80016ac <menu+0x5c4>
			if(dilSecim == 0) {
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <menu+0x680>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <menu+0x698>)
 800166e:	2101      	movs	r1, #1
 8001670:	2002      	movs	r0, #2
 8001672:	f006 f9ab 	bl	80079cc <lcd_print>
 8001676:	e008      	b.n	800168a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <menu+0x680>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d104      	bne.n	800168a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001680:	4a40      	ldr	r2, [pc, #256]	; (8001784 <menu+0x69c>)
 8001682:	2101      	movs	r1, #1
 8001684:	2002      	movs	r0, #2
 8001686:	f006 f9a1 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800168a:	4a39      	ldr	r2, [pc, #228]	; (8001770 <menu+0x688>)
 800168c:	210f      	movs	r1, #15
 800168e:	2002      	movs	r0, #2
 8001690:	f006 f99c 	bl	80079cc <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <menu+0x6a0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	220a      	movs	r2, #10
 800169a:	4937      	ldr	r1, [pc, #220]	; (8001778 <menu+0x690>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fce7 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 80016a2:	4a35      	ldr	r2, [pc, #212]	; (8001778 <menu+0x690>)
 80016a4:	210e      	movs	r1, #14
 80016a6:	2002      	movs	r0, #2
 80016a8:	f006 f990 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <menu+0x694>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d123      	bne.n	80016fc <menu+0x614>
			if(dilSecim == 0) {
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <menu+0x680>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80016bc:	4a33      	ldr	r2, [pc, #204]	; (800178c <menu+0x6a4>)
 80016be:	2101      	movs	r1, #1
 80016c0:	2002      	movs	r0, #2
 80016c2:	f006 f983 	bl	80079cc <lcd_print>
 80016c6:	e008      	b.n	80016da <menu+0x5f2>
			} else if(dilSecim == 1) {
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <menu+0x680>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d104      	bne.n	80016da <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <menu+0x6a8>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	2002      	movs	r0, #2
 80016d6:	f006 f979 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016da:	4a25      	ldr	r2, [pc, #148]	; (8001770 <menu+0x688>)
 80016dc:	210f      	movs	r1, #15
 80016de:	2002      	movs	r0, #2
 80016e0:	f006 f974 	bl	80079cc <lcd_print>
			itoa(hataKayit9, snum, 10);
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <menu+0x6ac>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	220a      	movs	r2, #10
 80016ea:	4923      	ldr	r1, [pc, #140]	; (8001778 <menu+0x690>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00a fcbf 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <menu+0x690>)
 80016f4:	210e      	movs	r1, #14
 80016f6:	2002      	movs	r0, #2
 80016f8:	f006 f968 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <menu+0x694>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b09      	cmp	r3, #9
 8001702:	d123      	bne.n	800174c <menu+0x664>
			if(dilSecim == 0) {
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <menu+0x680>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <menu+0x6b0>)
 800170e:	2101      	movs	r1, #1
 8001710:	2002      	movs	r0, #2
 8001712:	f006 f95b 	bl	80079cc <lcd_print>
 8001716:	e008      	b.n	800172a <menu+0x642>
			} else if(dilSecim == 1) {
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <menu+0x680>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d104      	bne.n	800172a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <menu+0x6b4>)
 8001722:	2101      	movs	r1, #1
 8001724:	2002      	movs	r0, #2
 8001726:	f006 f951 	bl	80079cc <lcd_print>
			}
			lcd_print(2, 16, " ");
 800172a:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <menu+0x6b8>)
 800172c:	2110      	movs	r1, #16
 800172e:	2002      	movs	r0, #2
 8001730:	f006 f94c 	bl	80079cc <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <menu+0x6bc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	220a      	movs	r2, #10
 800173a:	490f      	ldr	r1, [pc, #60]	; (8001778 <menu+0x690>)
 800173c:	4618      	mov	r0, r3
 800173e:	f00a fc97 	bl	800c070 <itoa>
			lcd_print(2, 15, snum);
 8001742:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <menu+0x690>)
 8001744:	210f      	movs	r1, #15
 8001746:	2002      	movs	r0, #2
 8001748:	f006 f940 	bl	80079cc <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <menu+0x694>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b0a      	cmp	r3, #10
 8001752:	d134      	bne.n	80017be <menu+0x6d6>
			if(dilSecim == 0) {
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <menu+0x680>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d127      	bne.n	80017ac <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <menu+0x6c0>)
 800175e:	2101      	movs	r1, #1
 8001760:	2002      	movs	r0, #2
 8001762:	f006 f933 	bl	80079cc <lcd_print>
 8001766:	e02a      	b.n	80017be <menu+0x6d6>
 8001768:	2000021d 	.word	0x2000021d
 800176c:	0800ced0 	.word	0x0800ced0
 8001770:	0800ce3c 	.word	0x0800ce3c
 8001774:	20000224 	.word	0x20000224
 8001778:	20000198 	.word	0x20000198
 800177c:	200001fe 	.word	0x200001fe
 8001780:	0800cee0 	.word	0x0800cee0
 8001784:	0800cef0 	.word	0x0800cef0
 8001788:	20000225 	.word	0x20000225
 800178c:	0800cf00 	.word	0x0800cf00
 8001790:	0800cf10 	.word	0x0800cf10
 8001794:	20000226 	.word	0x20000226
 8001798:	0800cf20 	.word	0x0800cf20
 800179c:	0800cf30 	.word	0x0800cf30
 80017a0:	0800cf40 	.word	0x0800cf40
 80017a4:	20000227 	.word	0x20000227
 80017a8:	0800cf44 	.word	0x0800cf44
			} else if(dilSecim == 1) {
 80017ac:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <menu+0x8d0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d104      	bne.n	80017be <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80017b4:	4a81      	ldr	r2, [pc, #516]	; (80019bc <menu+0x8d4>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f006 f907 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017be:	2102      	movs	r1, #2
 80017c0:	487f      	ldr	r0, [pc, #508]	; (80019c0 <menu+0x8d8>)
 80017c2:	f007 fc29 	bl	8009018 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d119      	bne.n	8001800 <menu+0x718>
 80017cc:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <menu+0x8dc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d012      	beq.n	8001800 <menu+0x718>
 80017da:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <menu+0x8e0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <menu+0x8e4>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <menu+0x8e4>)
 80017ec:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017ee:	4b77      	ldr	r3, [pc, #476]	; (80019cc <menu+0x8e4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b0a      	cmp	r3, #10
 80017f4:	d902      	bls.n	80017fc <menu+0x714>
				hataGostermeSirasi = 0;
 80017f6:	4b75      	ldr	r3, [pc, #468]	; (80019cc <menu+0x8e4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017fc:	f002 fffc 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001800:	2104      	movs	r1, #4
 8001802:	486f      	ldr	r0, [pc, #444]	; (80019c0 <menu+0x8d8>)
 8001804:	f007 fc08 	bl	8009018 <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	2b01      	cmp	r3, #1
 800180c:	d119      	bne.n	8001842 <menu+0x75a>
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <menu+0x8dc>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d012      	beq.n	8001842 <menu+0x75a>
 800181c:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <menu+0x8e0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10e      	bne.n	8001842 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001824:	4b69      	ldr	r3, [pc, #420]	; (80019cc <menu+0x8e4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b67      	ldr	r3, [pc, #412]	; (80019cc <menu+0x8e4>)
 800182e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001830:	4b66      	ldr	r3, [pc, #408]	; (80019cc <menu+0x8e4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b0b      	cmp	r3, #11
 8001836:	d902      	bls.n	800183e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001838:	4b64      	ldr	r3, [pc, #400]	; (80019cc <menu+0x8e4>)
 800183a:	220a      	movs	r2, #10
 800183c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800183e:	f002 ffdb 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001842:	2108      	movs	r1, #8
 8001844:	485e      	ldr	r0, [pc, #376]	; (80019c0 <menu+0x8d8>)
 8001846:	f007 fbe7 	bl	8009018 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	2b01      	cmp	r3, #1
 800184e:	d153      	bne.n	80018f8 <menu+0x810>
 8001850:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <menu+0x8dc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <menu+0x810>
 800185e:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <menu+0x8e4>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b0a      	cmp	r3, #10
 8001864:	d148      	bne.n	80018f8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <menu+0x8e8>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <menu+0x8ec>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <menu+0x8f0>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <menu+0x8ec>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001882:	4b56      	ldr	r3, [pc, #344]	; (80019dc <menu+0x8f4>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <menu+0x8ec>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <menu+0x8f8>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <menu+0x8ec>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800189e:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <menu+0x8fc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <menu+0x8ec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80018ac:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <menu+0x900>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <menu+0x8ec>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80018ba:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <menu+0x904>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <menu+0x8ec>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <menu+0x908>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <menu+0x8ec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <menu+0x90c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <menu+0x8ec>)
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <menu+0x910>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <menu+0x8ec>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <menu+0x914>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <menu+0x918>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 80fc 	bne.w	8001afa <menu+0xa12>
		if(dilSecim == 0) {
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <menu+0x8d0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 800190a:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <menu+0x91c>)
 800190c:	2101      	movs	r1, #1
 800190e:	2001      	movs	r0, #1
 8001910:	f006 f85c 	bl	80079cc <lcd_print>
 8001914:	e008      	b.n	8001928 <menu+0x840>
		} else if(dilSecim == 1) {
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <menu+0x8d0>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d104      	bne.n	8001928 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <menu+0x920>)
 8001920:	2101      	movs	r1, #1
 8001922:	2001      	movs	r0, #1
 8001924:	f006 f852 	bl	80079cc <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <menu+0x8e0>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d003      	beq.n	8001938 <menu+0x850>
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <menu+0x8e0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d112      	bne.n	800195e <menu+0x876>
			if(dilSecim == 0) {
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <menu+0x8d0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001940:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <menu+0x924>)
 8001942:	2101      	movs	r1, #1
 8001944:	2002      	movs	r0, #2
 8001946:	f006 f841 	bl	80079cc <lcd_print>
 800194a:	e008      	b.n	800195e <menu+0x876>
			} else if(dilSecim == 1) {
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <menu+0x8d0>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d104      	bne.n	800195e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001954:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <menu+0x928>)
 8001956:	2101      	movs	r1, #1
 8001958:	2002      	movs	r0, #2
 800195a:	f006 f837 	bl	80079cc <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <menu+0x92c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <menu+0x8ac>
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <menu+0x8e0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d112      	bne.n	8001994 <menu+0x8ac>
			if(dilSecim == 0) {
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <menu+0x8d0>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001976:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <menu+0x930>)
 8001978:	2101      	movs	r1, #1
 800197a:	2002      	movs	r0, #2
 800197c:	f006 f826 	bl	80079cc <lcd_print>
 8001980:	e008      	b.n	8001994 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <menu+0x8d0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d104      	bne.n	8001994 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 800198a:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <menu+0x934>)
 800198c:	2101      	movs	r1, #1
 800198e:	2002      	movs	r0, #2
 8001990:	f006 f81c 	bl	80079cc <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <menu+0x92c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d14c      	bne.n	8001a36 <menu+0x94e>
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <menu+0x8e0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d148      	bne.n	8001a36 <menu+0x94e>
			if(dilSecim == 0) {
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <menu+0x8d0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13b      	bne.n	8001a24 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <menu+0x938>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	2002      	movs	r0, #2
 80019b2:	f006 f80b 	bl	80079cc <lcd_print>
 80019b6:	e03e      	b.n	8001a36 <menu+0x94e>
 80019b8:	2000021d 	.word	0x2000021d
 80019bc:	0800cf58 	.word	0x0800cf58
 80019c0:	40010800 	.word	0x40010800
 80019c4:	2000022b 	.word	0x2000022b
 80019c8:	2000020b 	.word	0x2000020b
 80019cc:	200001fe 	.word	0x200001fe
 80019d0:	2000021e 	.word	0x2000021e
 80019d4:	20000128 	.word	0x20000128
 80019d8:	2000021f 	.word	0x2000021f
 80019dc:	20000220 	.word	0x20000220
 80019e0:	20000221 	.word	0x20000221
 80019e4:	20000222 	.word	0x20000222
 80019e8:	20000223 	.word	0x20000223
 80019ec:	20000224 	.word	0x20000224
 80019f0:	20000225 	.word	0x20000225
 80019f4:	20000226 	.word	0x20000226
 80019f8:	20000227 	.word	0x20000227
 80019fc:	20000228 	.word	0x20000228
 8001a00:	200001fc 	.word	0x200001fc
 8001a04:	0800cf6c 	.word	0x0800cf6c
 8001a08:	0800cf80 	.word	0x0800cf80
 8001a0c:	0800cf94 	.word	0x0800cf94
 8001a10:	0800cfa8 	.word	0x0800cfa8
 8001a14:	200001fd 	.word	0x200001fd
 8001a18:	0800cfbc 	.word	0x0800cfbc
 8001a1c:	0800cfcc 	.word	0x0800cfcc
 8001a20:	0800cfdc 	.word	0x0800cfdc
			} else if(dilSecim == 1) {
 8001a24:	4b98      	ldr	r3, [pc, #608]	; (8001c88 <menu+0xba0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d104      	bne.n	8001a36 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001a2c:	4a97      	ldr	r2, [pc, #604]	; (8001c8c <menu+0xba4>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	2002      	movs	r0, #2
 8001a32:	f005 ffcb 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a36:	2102      	movs	r1, #2
 8001a38:	4895      	ldr	r0, [pc, #596]	; (8001c90 <menu+0xba8>)
 8001a3a:	f007 faed 	bl	8009018 <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d119      	bne.n	8001a78 <menu+0x990>
 8001a44:	4b93      	ldr	r3, [pc, #588]	; (8001c94 <menu+0xbac>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	f083 0301 	eor.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <menu+0x990>
 8001a52:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <menu+0xbb0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10e      	bne.n	8001a78 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001a5a:	4b90      	ldr	r3, [pc, #576]	; (8001c9c <menu+0xbb4>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <menu+0xbb4>)
 8001a64:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a66:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <menu+0xbb4>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d902      	bls.n	8001a74 <menu+0x98c>
				calismaSekli = 0;
 8001a6e:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <menu+0xbb4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a74:	f002 fec0 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4885      	ldr	r0, [pc, #532]	; (8001c90 <menu+0xba8>)
 8001a7c:	f007 facc 	bl	8009018 <HAL_GPIO_ReadPin>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d119      	bne.n	8001aba <menu+0x9d2>
 8001a86:	4b83      	ldr	r3, [pc, #524]	; (8001c94 <menu+0xbac>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <menu+0x9d2>
 8001a94:	4b80      	ldr	r3, [pc, #512]	; (8001c98 <menu+0xbb0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10e      	bne.n	8001aba <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001a9c:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <menu+0xbb4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <menu+0xbb4>)
 8001aa6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <menu+0xbb4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <menu+0x9ce>
	    		calismaSekli = 1;
 8001ab0:	4b7a      	ldr	r3, [pc, #488]	; (8001c9c <menu+0xbb4>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ab6:	f002 fe9f 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001aba:	2108      	movs	r1, #8
 8001abc:	4874      	ldr	r0, [pc, #464]	; (8001c90 <menu+0xba8>)
 8001abe:	f007 faab 	bl	8009018 <HAL_GPIO_ReadPin>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d118      	bne.n	8001afa <menu+0xa12>
 8001ac8:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <menu+0xbac>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d011      	beq.n	8001afa <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001ad6:	4b71      	ldr	r3, [pc, #452]	; (8001c9c <menu+0xbb4>)
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	4b71      	ldr	r3, [pc, #452]	; (8001ca0 <menu+0xbb8>)
 8001adc:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <menu+0xbb4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d106      	bne.n	8001af4 <menu+0xa0c>
				altLimit = 1;
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <menu+0xbbc>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <menu+0xbbc>)
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <menu+0xbb8>)
 8001af2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001af4:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <menu+0xbc0>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <menu+0xbc4>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	f040 8083 	bne.w	8001c0a <menu+0xb22>
		if(dilSecim == 0) {
 8001b04:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <menu+0xba0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001b0c:	4a68      	ldr	r2, [pc, #416]	; (8001cb0 <menu+0xbc8>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2001      	movs	r0, #1
 8001b12:	f005 ff5b 	bl	80079cc <lcd_print>
 8001b16:	e008      	b.n	8001b2a <menu+0xa42>
		} else if(dilSecim == 1) {
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <menu+0xba0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d104      	bne.n	8001b2a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001b20:	4a64      	ldr	r2, [pc, #400]	; (8001cb4 <menu+0xbcc>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	2001      	movs	r0, #1
 8001b26:	f005 ff51 	bl	80079cc <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <menu+0xbd0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d113      	bne.n	8001b5a <menu+0xa72>
			if(dilSecim == 0) {
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <menu+0xba0>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001b3a:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <menu+0xbd4>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f005 ff44 	bl	80079cc <lcd_print>
 8001b44:	e012      	b.n	8001b6c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <menu+0xba0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10e      	bne.n	8001b6c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001b4e:	4a5c      	ldr	r2, [pc, #368]	; (8001cc0 <menu+0xbd8>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	2002      	movs	r0, #2
 8001b54:	f005 ff3a 	bl	80079cc <lcd_print>
 8001b58:	e008      	b.n	8001b6c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <menu+0xbd0>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d104      	bne.n	8001b6c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <menu+0xbdc>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	2002      	movs	r0, #2
 8001b68:	f005 ff30 	bl	80079cc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4848      	ldr	r0, [pc, #288]	; (8001c90 <menu+0xba8>)
 8001b70:	f007 fa52 	bl	8009018 <HAL_GPIO_ReadPin>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d115      	bne.n	8001ba6 <menu+0xabe>
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <menu+0xbac>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <menu+0xbd0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <menu+0xbd0>)
 8001b92:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <menu+0xbd0>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d902      	bls.n	8001ba2 <menu+0xaba>
				emniyetCercevesi = 0;
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <menu+0xbd0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ba2:	f002 fe29 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	4839      	ldr	r0, [pc, #228]	; (8001c90 <menu+0xba8>)
 8001baa:	f007 fa35 	bl	8009018 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d115      	bne.n	8001be0 <menu+0xaf8>
 8001bb4:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <menu+0xbac>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f083 0301 	eor.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00e      	beq.n	8001be0 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <menu+0xbd0>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <menu+0xbd0>)
 8001bcc:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <menu+0xbd0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <menu+0xbd0>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bdc:	f002 fe0c 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001be0:	2108      	movs	r1, #8
 8001be2:	482b      	ldr	r0, [pc, #172]	; (8001c90 <menu+0xba8>)
 8001be4:	f007 fa18 	bl	8009018 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10d      	bne.n	8001c0a <menu+0xb22>
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <menu+0xbac>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <menu+0xbd0>)
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <menu+0xbb8>)
 8001c02:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <menu+0xbc0>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <menu+0xbc4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	f040 80ba 	bne.w	8001d88 <menu+0xca0>
		if(dilSecim == 0) {
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <menu+0xba0>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <menu+0xbe0>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2001      	movs	r0, #1
 8001c22:	f005 fed3 	bl	80079cc <lcd_print>
 8001c26:	e008      	b.n	8001c3a <menu+0xb52>
		} else if(dilSecim == 1) {
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <menu+0xba0>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d104      	bne.n	8001c3a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <menu+0xbe4>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	2001      	movs	r0, #1
 8001c36:	f005 fec9 	bl	80079cc <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <menu+0xbe8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d113      	bne.n	8001c6a <menu+0xb82>
			if(dilSecim == 0) {
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <menu+0xba0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <menu+0xbd4>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f005 febc 	bl	80079cc <lcd_print>
 8001c54:	e049      	b.n	8001cea <menu+0xc02>
			} else if(dilSecim == 1) {
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <menu+0xba0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d145      	bne.n	8001cea <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <menu+0xbd8>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	2002      	movs	r0, #2
 8001c64:	f005 feb2 	bl	80079cc <lcd_print>
 8001c68:	e03f      	b.n	8001cea <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <menu+0xbe8>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d13b      	bne.n	8001cea <menu+0xc02>
			if(dilSecim == 0) {
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <menu+0xba0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12e      	bne.n	8001cd8 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <menu+0xbec>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f005 fea4 	bl	80079cc <lcd_print>
 8001c84:	e031      	b.n	8001cea <menu+0xc02>
 8001c86:	bf00      	nop
 8001c88:	2000021d 	.word	0x2000021d
 8001c8c:	0800cfec 	.word	0x0800cfec
 8001c90:	40010800 	.word	0x40010800
 8001c94:	2000022b 	.word	0x2000022b
 8001c98:	2000020b 	.word	0x2000020b
 8001c9c:	200001fd 	.word	0x200001fd
 8001ca0:	20000128 	.word	0x20000128
 8001ca4:	20000202 	.word	0x20000202
 8001ca8:	20000228 	.word	0x20000228
 8001cac:	200001fc 	.word	0x200001fc
 8001cb0:	0800cffc 	.word	0x0800cffc
 8001cb4:	0800d010 	.word	0x0800d010
 8001cb8:	20000200 	.word	0x20000200
 8001cbc:	0800d024 	.word	0x0800d024
 8001cc0:	0800d038 	.word	0x0800d038
 8001cc4:	0800d04c 	.word	0x0800d04c
 8001cc8:	0800d05c 	.word	0x0800d05c
 8001ccc:	0800d070 	.word	0x0800d070
 8001cd0:	20000201 	.word	0x20000201
 8001cd4:	0800d084 	.word	0x0800d084
			} else if(dilSecim == 1) {
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <menu+0xe3c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d104      	bne.n	8001cea <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001ce0:	4a91      	ldr	r2, [pc, #580]	; (8001f28 <menu+0xe40>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f005 fe71 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cea:	2102      	movs	r1, #2
 8001cec:	488f      	ldr	r0, [pc, #572]	; (8001f2c <menu+0xe44>)
 8001cee:	f007 f993 	bl	8009018 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d115      	bne.n	8001d24 <menu+0xc3c>
 8001cf8:	4b8d      	ldr	r3, [pc, #564]	; (8001f30 <menu+0xe48>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00e      	beq.n	8001d24 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001d06:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <menu+0xe4c>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <menu+0xe4c>)
 8001d10:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <menu+0xe4c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d902      	bls.n	8001d20 <menu+0xc38>
				yavaslamaLimit = 0;
 8001d1a:	4b86      	ldr	r3, [pc, #536]	; (8001f34 <menu+0xe4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d20:	f002 fd6a 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d24:	2104      	movs	r1, #4
 8001d26:	4881      	ldr	r0, [pc, #516]	; (8001f2c <menu+0xe44>)
 8001d28:	f007 f976 	bl	8009018 <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d115      	bne.n	8001d5e <menu+0xc76>
 8001d32:	4b7f      	ldr	r3, [pc, #508]	; (8001f30 <menu+0xe48>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	f083 0301 	eor.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001d40:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <menu+0xe4c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b7a      	ldr	r3, [pc, #488]	; (8001f34 <menu+0xe4c>)
 8001d4a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d4c:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <menu+0xe4c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001d54:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <menu+0xe4c>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d5a:	f002 fd4d 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d5e:	2108      	movs	r1, #8
 8001d60:	4872      	ldr	r0, [pc, #456]	; (8001f2c <menu+0xe44>)
 8001d62:	f007 f959 	bl	8009018 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10d      	bne.n	8001d88 <menu+0xca0>
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <menu+0xe48>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <menu+0xe4c>)
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <menu+0xe50>)
 8001d80:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d82:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <menu+0xe54>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d88:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <menu+0xe58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	f040 80b9 	bne.w	8001f04 <menu+0xe1c>
		if(dilSecim == 0) {
 8001d92:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <menu+0xe3c>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001d9a:	4a6a      	ldr	r2, [pc, #424]	; (8001f44 <menu+0xe5c>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f005 fe14 	bl	80079cc <lcd_print>
 8001da4:	e008      	b.n	8001db8 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001da6:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <menu+0xe3c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d104      	bne.n	8001db8 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001dae:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <menu+0xe60>)
 8001db0:	2101      	movs	r1, #1
 8001db2:	2001      	movs	r0, #1
 8001db4:	f005 fe0a 	bl	80079cc <lcd_print>
		}

		if(altLimit == 0) {
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <menu+0xe64>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d113      	bne.n	8001de8 <menu+0xd00>
			if(dilSecim == 0) {
 8001dc0:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <menu+0xe3c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001dc8:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <menu+0xe68>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f005 fdfd 	bl	80079cc <lcd_print>
 8001dd2:	e020      	b.n	8001e16 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <menu+0xe3c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d11c      	bne.n	8001e16 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001ddc:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <menu+0xe6c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	2002      	movs	r0, #2
 8001de2:	f005 fdf3 	bl	80079cc <lcd_print>
 8001de6:	e016      	b.n	8001e16 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001de8:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <menu+0xe64>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d112      	bne.n	8001e16 <menu+0xd2e>
			if(dilSecim == 0){
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <menu+0xe3c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001df8:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <menu+0xe70>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f005 fde5 	bl	80079cc <lcd_print>
 8001e02:	e008      	b.n	8001e16 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001e04:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <menu+0xe3c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d104      	bne.n	8001e16 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <menu+0xe40>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2002      	movs	r0, #2
 8001e12:	f005 fddb 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e16:	2102      	movs	r1, #2
 8001e18:	4844      	ldr	r0, [pc, #272]	; (8001f2c <menu+0xe44>)
 8001e1a:	f007 f8fd 	bl	8009018 <HAL_GPIO_ReadPin>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d119      	bne.n	8001e58 <menu+0xd70>
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <menu+0xe48>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f083 0301 	eor.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <menu+0xd70>
 8001e32:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <menu+0xe74>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10e      	bne.n	8001e58 <menu+0xd70>
			altLimit = altLimit + 1;
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <menu+0xe64>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <menu+0xe64>)
 8001e44:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <menu+0xe64>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d902      	bls.n	8001e54 <menu+0xd6c>
				altLimit = 0;
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <menu+0xe64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e54:	f002 fcd0 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001e58:	2104      	movs	r1, #4
 8001e5a:	4834      	ldr	r0, [pc, #208]	; (8001f2c <menu+0xe44>)
 8001e5c:	f007 f8dc 	bl	8009018 <HAL_GPIO_ReadPin>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d119      	bne.n	8001e9a <menu+0xdb2>
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <menu+0xe48>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <menu+0xdb2>
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <menu+0xe74>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10e      	bne.n	8001e9a <menu+0xdb2>
			altLimit = altLimit - 1;
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <menu+0xe64>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <menu+0xe64>)
 8001e86:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <menu+0xe64>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <menu+0xdae>
		   		altLimit = 1;
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <menu+0xe64>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e96:	f002 fcaf 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4823      	ldr	r0, [pc, #140]	; (8001f2c <menu+0xe44>)
 8001e9e:	f007 f8bb 	bl	8009018 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d12d      	bne.n	8001f04 <menu+0xe1c>
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <menu+0xe48>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d026      	beq.n	8001f04 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <menu+0xe64>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <menu+0xe50>)
 8001ebc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <menu+0xe64>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d110      	bne.n	8001ee8 <menu+0xe00>
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <menu+0xe78>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <menu+0xdee>
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <menu+0xe78>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d108      	bne.n	8001ee8 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <menu+0xe78>)
 8001ed8:	2203      	movs	r2, #3
 8001eda:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <menu+0xe78>)
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <menu+0xe50>)
 8001ee2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ee6:	e00a      	b.n	8001efe <menu+0xe16>
			} else if(altLimit == 0) {
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <menu+0xe64>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <menu+0xe16>
				platformSilindirTipi = 0;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <menu+0xe7c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <menu+0xe7c>)
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <menu+0xe50>)
 8001efc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <menu+0xe54>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <menu+0xe58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b06      	cmp	r3, #6
 8001f0a:	f040 80b6 	bne.w	800207a <menu+0xf92>
		if(dilSecim == 0) {
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <menu+0xe3c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d12a      	bne.n	8001f6c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001f16:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <menu+0xe80>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f005 fd56 	bl	80079cc <lcd_print>
 8001f20:	e02d      	b.n	8001f7e <menu+0xe96>
 8001f22:	bf00      	nop
 8001f24:	2000021d 	.word	0x2000021d
 8001f28:	0800d098 	.word	0x0800d098
 8001f2c:	40010800 	.word	0x40010800
 8001f30:	2000022b 	.word	0x2000022b
 8001f34:	20000201 	.word	0x20000201
 8001f38:	20000128 	.word	0x20000128
 8001f3c:	20000228 	.word	0x20000228
 8001f40:	200001fc 	.word	0x200001fc
 8001f44:	0800d0ac 	.word	0x0800d0ac
 8001f48:	0800d0c0 	.word	0x0800d0c0
 8001f4c:	20000202 	.word	0x20000202
 8001f50:	0800d024 	.word	0x0800d024
 8001f54:	0800d038 	.word	0x0800d038
 8001f58:	0800d084 	.word	0x0800d084
 8001f5c:	200001fd 	.word	0x200001fd
 8001f60:	20000209 	.word	0x20000209
 8001f64:	2000020f 	.word	0x2000020f
 8001f68:	0800d0d4 	.word	0x0800d0d4
		} else if(dilSecim == 1){
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <menu+0x1070>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d104      	bne.n	8001f7e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001f74:	4a79      	ldr	r2, [pc, #484]	; (800215c <menu+0x1074>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f005 fd27 	bl	80079cc <lcd_print>
		}
		if(basincSalteri == 0){
 8001f7e:	4b78      	ldr	r3, [pc, #480]	; (8002160 <menu+0x1078>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <menu+0xec6>
			if(dilSecim == 0) {
 8001f86:	4b74      	ldr	r3, [pc, #464]	; (8002158 <menu+0x1070>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001f8e:	4a75      	ldr	r2, [pc, #468]	; (8002164 <menu+0x107c>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f005 fd1a 	bl	80079cc <lcd_print>
 8001f98:	e020      	b.n	8001fdc <menu+0xef4>
			} else if(dilSecim == 1){
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <menu+0x1070>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d11c      	bne.n	8001fdc <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001fa2:	4a71      	ldr	r2, [pc, #452]	; (8002168 <menu+0x1080>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	f005 fd10 	bl	80079cc <lcd_print>
 8001fac:	e016      	b.n	8001fdc <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001fae:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <menu+0x1078>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d112      	bne.n	8001fdc <menu+0xef4>
			if(dilSecim == 0) {
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <menu+0x1070>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001fbe:	4a6b      	ldr	r2, [pc, #428]	; (800216c <menu+0x1084>)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f005 fd02 	bl	80079cc <lcd_print>
 8001fc8:	e008      	b.n	8001fdc <menu+0xef4>
			} else if(dilSecim == 1) {
 8001fca:	4b63      	ldr	r3, [pc, #396]	; (8002158 <menu+0x1070>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d104      	bne.n	8001fdc <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8001fd2:	4a67      	ldr	r2, [pc, #412]	; (8002170 <menu+0x1088>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f005 fcf8 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4865      	ldr	r0, [pc, #404]	; (8002174 <menu+0x108c>)
 8001fe0:	f007 f81a 	bl	8009018 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d115      	bne.n	8002016 <menu+0xf2e>
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <menu+0x1090>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <menu+0x1078>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <menu+0x1078>)
 8002002:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <menu+0x1078>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d902      	bls.n	8002012 <menu+0xf2a>
				basincSalteri = 0;
 800200c:	4b54      	ldr	r3, [pc, #336]	; (8002160 <menu+0x1078>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002012:	f002 fbf1 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002016:	2104      	movs	r1, #4
 8002018:	4856      	ldr	r0, [pc, #344]	; (8002174 <menu+0x108c>)
 800201a:	f006 fffd 	bl	8009018 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b01      	cmp	r3, #1
 8002022:	d115      	bne.n	8002050 <menu+0xf68>
 8002024:	4b54      	ldr	r3, [pc, #336]	; (8002178 <menu+0x1090>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f083 0301 	eor.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00e      	beq.n	8002050 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002032:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <menu+0x1078>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <menu+0x1078>)
 800203c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <menu+0x1078>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <menu+0xf64>
		   		basincSalteri = 1;
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <menu+0x1078>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204c:	f002 fbd4 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002050:	2108      	movs	r1, #8
 8002052:	4848      	ldr	r0, [pc, #288]	; (8002174 <menu+0x108c>)
 8002054:	f006 ffe0 	bl	8009018 <HAL_GPIO_ReadPin>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10d      	bne.n	800207a <menu+0xf92>
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <menu+0x1090>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800206c:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <menu+0x1078>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <menu+0x1094>)
 8002072:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <menu+0x1098>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <menu+0x109c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b07      	cmp	r3, #7
 8002080:	f040 80f5 	bne.w	800226e <menu+0x1186>
		if(dilSecim == 0) {
 8002084:	4b34      	ldr	r3, [pc, #208]	; (8002158 <menu+0x1070>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800208c:	4a3e      	ldr	r2, [pc, #248]	; (8002188 <menu+0x10a0>)
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f005 fc9b 	bl	80079cc <lcd_print>
 8002096:	e008      	b.n	80020aa <menu+0xfc2>
		} else if(dilSecim == 1){
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <menu+0x1070>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d104      	bne.n	80020aa <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80020a0:	4a3a      	ldr	r2, [pc, #232]	; (800218c <menu+0x10a4>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	2001      	movs	r0, #1
 80020a6:	f005 fc91 	bl	80079cc <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80020aa:	4b39      	ldr	r3, [pc, #228]	; (8002190 <menu+0x10a8>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d113      	bne.n	80020da <menu+0xff2>
			if(dilSecim == 0) {
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <menu+0x1070>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80020ba:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <menu+0x107c>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f005 fc84 	bl	80079cc <lcd_print>
 80020c4:	e079      	b.n	80021ba <menu+0x10d2>
			} else if(dilSecim == 1){
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <menu+0x1070>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d175      	bne.n	80021ba <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <menu+0x1080>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f005 fc7a 	bl	80079cc <lcd_print>
 80020d8:	e06f      	b.n	80021ba <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <menu+0x10a8>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d113      	bne.n	800210a <menu+0x1022>
			if(dilSecim == 0) {
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <menu+0x1070>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <menu+0x10ac>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f005 fc6c 	bl	80079cc <lcd_print>
 80020f4:	e061      	b.n	80021ba <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <menu+0x1070>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d15d      	bne.n	80021ba <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80020fe:	4a26      	ldr	r2, [pc, #152]	; (8002198 <menu+0x10b0>)
 8002100:	2101      	movs	r1, #1
 8002102:	2002      	movs	r0, #2
 8002104:	f005 fc62 	bl	80079cc <lcd_print>
 8002108:	e057      	b.n	80021ba <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <menu+0x10a8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d113      	bne.n	800213a <menu+0x1052>
			if(dilSecim == 0) {
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <menu+0x1070>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800211a:	4a20      	ldr	r2, [pc, #128]	; (800219c <menu+0x10b4>)
 800211c:	2101      	movs	r1, #1
 800211e:	2002      	movs	r0, #2
 8002120:	f005 fc54 	bl	80079cc <lcd_print>
 8002124:	e049      	b.n	80021ba <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <menu+0x1070>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d145      	bne.n	80021ba <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <menu+0x10b8>)
 8002130:	2101      	movs	r1, #1
 8002132:	2002      	movs	r0, #2
 8002134:	f005 fc4a 	bl	80079cc <lcd_print>
 8002138:	e03f      	b.n	80021ba <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <menu+0x10a8>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d13b      	bne.n	80021ba <menu+0x10d2>
			if(dilSecim == 0) {
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <menu+0x1070>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d12e      	bne.n	80021a8 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800214a:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <menu+0x10bc>)
 800214c:	2101      	movs	r1, #1
 800214e:	2002      	movs	r0, #2
 8002150:	f005 fc3c 	bl	80079cc <lcd_print>
 8002154:	e031      	b.n	80021ba <menu+0x10d2>
 8002156:	bf00      	nop
 8002158:	2000021d 	.word	0x2000021d
 800215c:	0800d0e4 	.word	0x0800d0e4
 8002160:	20000203 	.word	0x20000203
 8002164:	0800d024 	.word	0x0800d024
 8002168:	0800d038 	.word	0x0800d038
 800216c:	0800d084 	.word	0x0800d084
 8002170:	0800d098 	.word	0x0800d098
 8002174:	40010800 	.word	0x40010800
 8002178:	2000022b 	.word	0x2000022b
 800217c:	20000128 	.word	0x20000128
 8002180:	20000228 	.word	0x20000228
 8002184:	200001fc 	.word	0x200001fc
 8002188:	0800d0f4 	.word	0x0800d0f4
 800218c:	0800d108 	.word	0x0800d108
 8002190:	20000204 	.word	0x20000204
 8002194:	0800d11c 	.word	0x0800d11c
 8002198:	0800d130 	.word	0x0800d130
 800219c:	0800d144 	.word	0x0800d144
 80021a0:	0800d158 	.word	0x0800d158
 80021a4:	0800d16c 	.word	0x0800d16c
			} else if(dilSecim == 1){
 80021a8:	4b99      	ldr	r3, [pc, #612]	; (8002410 <menu+0x1328>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d104      	bne.n	80021ba <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80021b0:	4a98      	ldr	r2, [pc, #608]	; (8002414 <menu+0x132c>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2002      	movs	r0, #2
 80021b6:	f005 fc09 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ba:	2102      	movs	r1, #2
 80021bc:	4896      	ldr	r0, [pc, #600]	; (8002418 <menu+0x1330>)
 80021be:	f006 ff2b 	bl	8009018 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d115      	bne.n	80021f4 <menu+0x110c>
 80021c8:	4b94      	ldr	r3, [pc, #592]	; (800241c <menu+0x1334>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80021d6:	4b92      	ldr	r3, [pc, #584]	; (8002420 <menu+0x1338>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b90      	ldr	r3, [pc, #576]	; (8002420 <menu+0x1338>)
 80021e0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80021e2:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <menu+0x1338>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d902      	bls.n	80021f0 <menu+0x1108>
				kapiSecimleri = 0;
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <menu+0x1338>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021f0:	f002 fb02 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f4:	2104      	movs	r1, #4
 80021f6:	4888      	ldr	r0, [pc, #544]	; (8002418 <menu+0x1330>)
 80021f8:	f006 ff0e 	bl	8009018 <HAL_GPIO_ReadPin>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d115      	bne.n	800222e <menu+0x1146>
 8002202:	4b86      	ldr	r3, [pc, #536]	; (800241c <menu+0x1334>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f083 0301 	eor.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002210:	4b83      	ldr	r3, [pc, #524]	; (8002420 <menu+0x1338>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	3b01      	subs	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b81      	ldr	r3, [pc, #516]	; (8002420 <menu+0x1338>)
 800221a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <menu+0x1338>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d902      	bls.n	800222a <menu+0x1142>
		   		kapiSecimleri = 3;
 8002224:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <menu+0x1338>)
 8002226:	2203      	movs	r2, #3
 8002228:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800222a:	f002 fae5 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800222e:	2108      	movs	r1, #8
 8002230:	4879      	ldr	r0, [pc, #484]	; (8002418 <menu+0x1330>)
 8002232:	f006 fef1 	bl	8009018 <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
 8002238:	2b01      	cmp	r3, #1
 800223a:	d118      	bne.n	800226e <menu+0x1186>
 800223c:	4b77      	ldr	r3, [pc, #476]	; (800241c <menu+0x1334>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800224a:	4b75      	ldr	r3, [pc, #468]	; (8002420 <menu+0x1338>)
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	4b75      	ldr	r3, [pc, #468]	; (8002424 <menu+0x133c>)
 8002250:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <menu+0x1338>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <menu+0x1180>
				altLimit = 1;
 800225a:	4b73      	ldr	r3, [pc, #460]	; (8002428 <menu+0x1340>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002260:	4b71      	ldr	r3, [pc, #452]	; (8002428 <menu+0x1340>)
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <menu+0x133c>)
 8002266:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002268:	4b70      	ldr	r3, [pc, #448]	; (800242c <menu+0x1344>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <menu+0x1348>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b08      	cmp	r3, #8
 8002274:	f040 8092 	bne.w	800239c <menu+0x12b4>
		if(dilSecim == 0) {
 8002278:	4b65      	ldr	r3, [pc, #404]	; (8002410 <menu+0x1328>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002280:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <menu+0x134c>)
 8002282:	2101      	movs	r1, #1
 8002284:	2001      	movs	r0, #1
 8002286:	f005 fba1 	bl	80079cc <lcd_print>
 800228a:	e008      	b.n	800229e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <menu+0x1328>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d104      	bne.n	800229e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002294:	4a68      	ldr	r2, [pc, #416]	; (8002438 <menu+0x1350>)
 8002296:	2101      	movs	r1, #1
 8002298:	2001      	movs	r0, #1
 800229a:	f005 fb97 	bl	80079cc <lcd_print>
		}

		if(kapiAcTipi == 0){
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <menu+0x1354>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <menu+0x11e6>
			if(dilSecim == 0) {
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <menu+0x1328>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80022ae:	4a64      	ldr	r2, [pc, #400]	; (8002440 <menu+0x1358>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2002      	movs	r0, #2
 80022b4:	f005 fb8a 	bl	80079cc <lcd_print>
 80022b8:	e020      	b.n	80022fc <menu+0x1214>
			} else if(dilSecim == 1) {
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <menu+0x1328>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d11c      	bne.n	80022fc <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80022c2:	4a60      	ldr	r2, [pc, #384]	; (8002444 <menu+0x135c>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	2002      	movs	r0, #2
 80022c8:	f005 fb80 	bl	80079cc <lcd_print>
 80022cc:	e016      	b.n	80022fc <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80022ce:	4b5b      	ldr	r3, [pc, #364]	; (800243c <menu+0x1354>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d112      	bne.n	80022fc <menu+0x1214>
			if(dilSecim == 0){
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <menu+0x1328>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80022de:	4a5a      	ldr	r2, [pc, #360]	; (8002448 <menu+0x1360>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f005 fb72 	bl	80079cc <lcd_print>
 80022e8:	e008      	b.n	80022fc <menu+0x1214>
			} else if(dilSecim == 1){
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <menu+0x1328>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d104      	bne.n	80022fc <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80022f2:	4a56      	ldr	r2, [pc, #344]	; (800244c <menu+0x1364>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f005 fb68 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022fc:	2102      	movs	r1, #2
 80022fe:	4846      	ldr	r0, [pc, #280]	; (8002418 <menu+0x1330>)
 8002300:	f006 fe8a 	bl	8009018 <HAL_GPIO_ReadPin>
 8002304:	4603      	mov	r3, r0
 8002306:	2b01      	cmp	r3, #1
 8002308:	d115      	bne.n	8002336 <menu+0x124e>
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <menu+0x1334>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00e      	beq.n	8002336 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <menu+0x1354>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b46      	ldr	r3, [pc, #280]	; (800243c <menu+0x1354>)
 8002322:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002324:	4b45      	ldr	r3, [pc, #276]	; (800243c <menu+0x1354>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d902      	bls.n	8002332 <menu+0x124a>
				kapiAcTipi = 0;
 800232c:	4b43      	ldr	r3, [pc, #268]	; (800243c <menu+0x1354>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002332:	f002 fa61 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002336:	2104      	movs	r1, #4
 8002338:	4837      	ldr	r0, [pc, #220]	; (8002418 <menu+0x1330>)
 800233a:	f006 fe6d 	bl	8009018 <HAL_GPIO_ReadPin>
 800233e:	4603      	mov	r3, r0
 8002340:	2b01      	cmp	r3, #1
 8002342:	d115      	bne.n	8002370 <menu+0x1288>
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <menu+0x1334>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f083 0301 	eor.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00e      	beq.n	8002370 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002352:	4b3a      	ldr	r3, [pc, #232]	; (800243c <menu+0x1354>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	3b01      	subs	r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <menu+0x1354>)
 800235c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <menu+0x1354>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <menu+0x1354>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800236c:	f002 fa44 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002370:	2108      	movs	r1, #8
 8002372:	4829      	ldr	r0, [pc, #164]	; (8002418 <menu+0x1330>)
 8002374:	f006 fe50 	bl	8009018 <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <menu+0x12b4>
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <menu+0x1334>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	f083 0301 	eor.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <menu+0x1354>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <menu+0x133c>)
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <menu+0x1344>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <menu+0x1348>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	f040 80b9 	bne.w	8002518 <menu+0x1430>
		if(dilSecim == 0){
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <menu+0x1328>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80023ae:	4a28      	ldr	r2, [pc, #160]	; (8002450 <menu+0x1368>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2001      	movs	r0, #1
 80023b4:	f005 fb0a 	bl	80079cc <lcd_print>
 80023b8:	e008      	b.n	80023cc <menu+0x12e4>
		} else if(dilSecim == 1) {
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <menu+0x1328>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d104      	bne.n	80023cc <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <menu+0x136c>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	2001      	movs	r0, #1
 80023c8:	f005 fb00 	bl	80079cc <lcd_print>
		}

		if(kapi1Tip == 0) {
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <menu+0x1370>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <menu+0x1374>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2002      	movs	r0, #2
 80023da:	f005 faf7 	bl	80079cc <lcd_print>
 80023de:	e04c      	b.n	800247a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <menu+0x1370>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d13f      	bne.n	8002468 <menu+0x1380>
			if(dilSecim == 0){
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <menu+0x1328>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <menu+0x1378>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	2002      	movs	r0, #2
 80023f6:	f005 fae9 	bl	80079cc <lcd_print>
 80023fa:	e03e      	b.n	800247a <menu+0x1392>
			} else if(dilSecim == 1) {
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <menu+0x1328>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d13a      	bne.n	800247a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <menu+0x137c>)
 8002406:	2101      	movs	r1, #1
 8002408:	2002      	movs	r0, #2
 800240a:	f005 fadf 	bl	80079cc <lcd_print>
 800240e:	e034      	b.n	800247a <menu+0x1392>
 8002410:	2000021d 	.word	0x2000021d
 8002414:	0800d180 	.word	0x0800d180
 8002418:	40010800 	.word	0x40010800
 800241c:	2000022b 	.word	0x2000022b
 8002420:	20000204 	.word	0x20000204
 8002424:	20000128 	.word	0x20000128
 8002428:	20000202 	.word	0x20000202
 800242c:	20000228 	.word	0x20000228
 8002430:	200001fc 	.word	0x200001fc
 8002434:	0800d194 	.word	0x0800d194
 8002438:	0800d1a8 	.word	0x0800d1a8
 800243c:	20000208 	.word	0x20000208
 8002440:	0800d1bc 	.word	0x0800d1bc
 8002444:	0800d1cc 	.word	0x0800d1cc
 8002448:	0800d1dc 	.word	0x0800d1dc
 800244c:	0800d1f0 	.word	0x0800d1f0
 8002450:	0800d204 	.word	0x0800d204
 8002454:	0800d218 	.word	0x0800d218
 8002458:	20000205 	.word	0x20000205
 800245c:	0800d22c 	.word	0x0800d22c
 8002460:	0800d240 	.word	0x0800d240
 8002464:	0800d250 	.word	0x0800d250
			}
		} else if(kapi1Tip == 2) {
 8002468:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <menu+0x15ac>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d104      	bne.n	800247a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002470:	4a89      	ldr	r2, [pc, #548]	; (8002698 <menu+0x15b0>)
 8002472:	2101      	movs	r1, #1
 8002474:	2002      	movs	r0, #2
 8002476:	f005 faa9 	bl	80079cc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800247a:	2102      	movs	r1, #2
 800247c:	4887      	ldr	r0, [pc, #540]	; (800269c <menu+0x15b4>)
 800247e:	f006 fdcb 	bl	8009018 <HAL_GPIO_ReadPin>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d115      	bne.n	80024b4 <menu+0x13cc>
 8002488:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <menu+0x15b8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00e      	beq.n	80024b4 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <menu+0x15ac>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <menu+0x15ac>)
 80024a0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80024a2:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <menu+0x15ac>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d902      	bls.n	80024b0 <menu+0x13c8>
				kapi1Tip = 0;
 80024aa:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <menu+0x15ac>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024b0:	f002 f9a2 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b4:	2104      	movs	r1, #4
 80024b6:	4879      	ldr	r0, [pc, #484]	; (800269c <menu+0x15b4>)
 80024b8:	f006 fdae 	bl	8009018 <HAL_GPIO_ReadPin>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d115      	bne.n	80024ee <menu+0x1406>
 80024c2:	4b77      	ldr	r3, [pc, #476]	; (80026a0 <menu+0x15b8>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80024d0:	4b70      	ldr	r3, [pc, #448]	; (8002694 <menu+0x15ac>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b6e      	ldr	r3, [pc, #440]	; (8002694 <menu+0x15ac>)
 80024da:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024dc:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <menu+0x15ac>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d902      	bls.n	80024ea <menu+0x1402>
		   		kapi1Tip = 2;
 80024e4:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <menu+0x15ac>)
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ea:	f002 f985 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ee:	2108      	movs	r1, #8
 80024f0:	486a      	ldr	r0, [pc, #424]	; (800269c <menu+0x15b4>)
 80024f2:	f006 fd91 	bl	8009018 <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10d      	bne.n	8002518 <menu+0x1430>
 80024fc:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <menu+0x15b8>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f083 0301 	eor.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <menu+0x15ac>)
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <menu+0x15bc>)
 8002510:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <menu+0x15c0>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <menu+0x15c4>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b0a      	cmp	r3, #10
 800251e:	d17f      	bne.n	8002620 <menu+0x1538>
		if(dilSecim == 0) {
 8002520:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <menu+0x15c8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002528:	4a62      	ldr	r2, [pc, #392]	; (80026b4 <menu+0x15cc>)
 800252a:	2101      	movs	r1, #1
 800252c:	2001      	movs	r0, #1
 800252e:	f005 fa4d 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002532:	4a61      	ldr	r2, [pc, #388]	; (80026b8 <menu+0x15d0>)
 8002534:	2101      	movs	r1, #1
 8002536:	2002      	movs	r0, #2
 8002538:	f005 fa48 	bl	80079cc <lcd_print>
 800253c:	e00d      	b.n	800255a <menu+0x1472>
		} else if(dilSecim == 1) {
 800253e:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <menu+0x15c8>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d109      	bne.n	800255a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002546:	4a5d      	ldr	r2, [pc, #372]	; (80026bc <menu+0x15d4>)
 8002548:	2101      	movs	r1, #1
 800254a:	2001      	movs	r0, #1
 800254c:	f005 fa3e 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002550:	4a5b      	ldr	r2, [pc, #364]	; (80026c0 <menu+0x15d8>)
 8002552:	2101      	movs	r1, #1
 8002554:	2002      	movs	r0, #2
 8002556:	f005 fa39 	bl	80079cc <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800255a:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <menu+0x15dc>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	220a      	movs	r2, #10
 8002560:	4959      	ldr	r1, [pc, #356]	; (80026c8 <menu+0x15e0>)
 8002562:	4618      	mov	r0, r3
 8002564:	f009 fd84 	bl	800c070 <itoa>
		lcd_print(2,16,snum);
 8002568:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <menu+0x15e0>)
 800256a:	2110      	movs	r1, #16
 800256c:	2002      	movs	r0, #2
 800256e:	f005 fa2d 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002572:	2102      	movs	r1, #2
 8002574:	4849      	ldr	r0, [pc, #292]	; (800269c <menu+0x15b4>)
 8002576:	f006 fd4f 	bl	8009018 <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d119      	bne.n	80025b4 <menu+0x14cc>
 8002580:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <menu+0x15b8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <menu+0x14cc>
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <menu+0x15ac>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002596:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <menu+0x15dc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <menu+0x15dc>)
 80025a0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80025a2:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <menu+0x15dc>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d902      	bls.n	80025b0 <menu+0x14c8>
				kapi1AcSure = 0;
 80025aa:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <menu+0x15dc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025b0:	f002 f922 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80025b4:	2104      	movs	r1, #4
 80025b6:	4839      	ldr	r0, [pc, #228]	; (800269c <menu+0x15b4>)
 80025b8:	f006 fd2e 	bl	8009018 <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d119      	bne.n	80025f6 <menu+0x150e>
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <menu+0x15b8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <menu+0x150e>
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <menu+0x15ac>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10e      	bne.n	80025f6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <menu+0x15dc>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <menu+0x15dc>)
 80025e2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <menu+0x15dc>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d902      	bls.n	80025f2 <menu+0x150a>
		   		kapi1AcSure = 5;
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <menu+0x15dc>)
 80025ee:	2205      	movs	r2, #5
 80025f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025f2:	f002 f901 	bl	80047f8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f6:	2108      	movs	r1, #8
 80025f8:	4828      	ldr	r0, [pc, #160]	; (800269c <menu+0x15b4>)
 80025fa:	f006 fd0d 	bl	8009018 <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d10d      	bne.n	8002620 <menu+0x1538>
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <menu+0x15b8>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <menu+0x15dc>)
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <menu+0x15bc>)
 8002618:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <menu+0x15c0>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <menu+0x15c4>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b0b      	cmp	r3, #11
 8002626:	f040 80b5 	bne.w	8002794 <menu+0x16ac>
		if(dilSecim == 0) {
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <menu+0x15c8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002632:	4a26      	ldr	r2, [pc, #152]	; (80026cc <menu+0x15e4>)
 8002634:	2101      	movs	r1, #1
 8002636:	2001      	movs	r0, #1
 8002638:	f005 f9c8 	bl	80079cc <lcd_print>
 800263c:	e008      	b.n	8002650 <menu+0x1568>
		} else if(dilSecim == 1) {
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <menu+0x15c8>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d104      	bne.n	8002650 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <menu+0x15e8>)
 8002648:	2101      	movs	r1, #1
 800264a:	2001      	movs	r0, #1
 800264c:	f005 f9be 	bl	80079cc <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <menu+0x15ec>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002658:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <menu+0x15f0>)
 800265a:	2101      	movs	r1, #1
 800265c:	2002      	movs	r0, #2
 800265e:	f005 f9b5 	bl	80079cc <lcd_print>
 8002662:	e048      	b.n	80026f6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <menu+0x15ec>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d13b      	bne.n	80026e4 <menu+0x15fc>
			if(dilSecim == 0) {
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <menu+0x15c8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <menu+0x15f4>)
 8002676:	2101      	movs	r1, #1
 8002678:	2002      	movs	r0, #2
 800267a:	f005 f9a7 	bl	80079cc <lcd_print>
 800267e:	e03a      	b.n	80026f6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <menu+0x15c8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d136      	bne.n	80026f6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002688:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <menu+0x15f8>)
 800268a:	2101      	movs	r1, #1
 800268c:	2002      	movs	r0, #2
 800268e:	f005 f99d 	bl	80079cc <lcd_print>
 8002692:	e030      	b.n	80026f6 <menu+0x160e>
 8002694:	20000205 	.word	0x20000205
 8002698:	0800d264 	.word	0x0800d264
 800269c:	40010800 	.word	0x40010800
 80026a0:	2000022b 	.word	0x2000022b
 80026a4:	20000128 	.word	0x20000128
 80026a8:	20000228 	.word	0x20000228
 80026ac:	200001fc 	.word	0x200001fc
 80026b0:	2000021d 	.word	0x2000021d
 80026b4:	0800d274 	.word	0x0800d274
 80026b8:	0800d288 	.word	0x0800d288
 80026bc:	0800d298 	.word	0x0800d298
 80026c0:	0800d2ac 	.word	0x0800d2ac
 80026c4:	20000215 	.word	0x20000215
 80026c8:	20000198 	.word	0x20000198
 80026cc:	0800d2bc 	.word	0x0800d2bc
 80026d0:	0800d2d0 	.word	0x0800d2d0
 80026d4:	20000206 	.word	0x20000206
 80026d8:	0800d22c 	.word	0x0800d22c
 80026dc:	0800d240 	.word	0x0800d240
 80026e0:	0800d250 	.word	0x0800d250
			}
		} else if(kapi2Tip == 2) {
 80026e4:	4b8a      	ldr	r3, [pc, #552]	; (8002910 <menu+0x1828>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d104      	bne.n	80026f6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80026ec:	4a89      	ldr	r2, [pc, #548]	; (8002914 <menu+0x182c>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	2002      	movs	r0, #2
 80026f2:	f005 f96b 	bl	80079cc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f6:	2102      	movs	r1, #2
 80026f8:	4887      	ldr	r0, [pc, #540]	; (8002918 <menu+0x1830>)
 80026fa:	f006 fc8d 	bl	8009018 <HAL_GPIO_ReadPin>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d115      	bne.n	8002730 <menu+0x1648>
 8002704:	4b85      	ldr	r3, [pc, #532]	; (800291c <menu+0x1834>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00e      	beq.n	8002730 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <menu+0x1828>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <menu+0x1828>)
 800271c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <menu+0x1828>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <menu+0x1644>
				kapi2Tip = 0;
 8002726:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <menu+0x1828>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800272c:	f002 f864 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002730:	2104      	movs	r1, #4
 8002732:	4879      	ldr	r0, [pc, #484]	; (8002918 <menu+0x1830>)
 8002734:	f006 fc70 	bl	8009018 <HAL_GPIO_ReadPin>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d115      	bne.n	800276a <menu+0x1682>
 800273e:	4b77      	ldr	r3, [pc, #476]	; (800291c <menu+0x1834>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f083 0301 	eor.w	r3, r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 800274c:	4b70      	ldr	r3, [pc, #448]	; (8002910 <menu+0x1828>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	3b01      	subs	r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b6e      	ldr	r3, [pc, #440]	; (8002910 <menu+0x1828>)
 8002756:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002758:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <menu+0x1828>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d902      	bls.n	8002766 <menu+0x167e>
		   		kapi2Tip = 2;
 8002760:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <menu+0x1828>)
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002766:	f002 f847 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800276a:	2108      	movs	r1, #8
 800276c:	486a      	ldr	r0, [pc, #424]	; (8002918 <menu+0x1830>)
 800276e:	f006 fc53 	bl	8009018 <HAL_GPIO_ReadPin>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10d      	bne.n	8002794 <menu+0x16ac>
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <menu+0x1834>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002786:	4b62      	ldr	r3, [pc, #392]	; (8002910 <menu+0x1828>)
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	4b65      	ldr	r3, [pc, #404]	; (8002920 <menu+0x1838>)
 800278c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <menu+0x183c>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002794:	4b64      	ldr	r3, [pc, #400]	; (8002928 <menu+0x1840>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d17f      	bne.n	800289c <menu+0x17b4>
		if(dilSecim == 0) {
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <menu+0x1844>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80027a4:	4a62      	ldr	r2, [pc, #392]	; (8002930 <menu+0x1848>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	2001      	movs	r0, #1
 80027aa:	f005 f90f 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027ae:	4a61      	ldr	r2, [pc, #388]	; (8002934 <menu+0x184c>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	2002      	movs	r0, #2
 80027b4:	f005 f90a 	bl	80079cc <lcd_print>
 80027b8:	e00d      	b.n	80027d6 <menu+0x16ee>
		} else if(dilSecim == 1) {
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <menu+0x1844>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d109      	bne.n	80027d6 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80027c2:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <menu+0x1850>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	2001      	movs	r0, #1
 80027c8:	f005 f900 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80027cc:	4a5b      	ldr	r2, [pc, #364]	; (800293c <menu+0x1854>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f005 f8fb 	bl	80079cc <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <menu+0x1858>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	220a      	movs	r2, #10
 80027dc:	4959      	ldr	r1, [pc, #356]	; (8002944 <menu+0x185c>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f009 fc46 	bl	800c070 <itoa>
		lcd_print(2,16,snum);
 80027e4:	4a57      	ldr	r2, [pc, #348]	; (8002944 <menu+0x185c>)
 80027e6:	2110      	movs	r1, #16
 80027e8:	2002      	movs	r0, #2
 80027ea:	f005 f8ef 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027ee:	2102      	movs	r1, #2
 80027f0:	4849      	ldr	r0, [pc, #292]	; (8002918 <menu+0x1830>)
 80027f2:	f006 fc11 	bl	8009018 <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d119      	bne.n	8002830 <menu+0x1748>
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <menu+0x1834>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <menu+0x1748>
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <menu+0x1828>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10e      	bne.n	8002830 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002812:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <menu+0x1858>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <menu+0x1858>)
 800281c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800281e:	4b48      	ldr	r3, [pc, #288]	; (8002940 <menu+0x1858>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d902      	bls.n	800282c <menu+0x1744>
				kapi2AcSure = 0;
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <menu+0x1858>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800282c:	f001 ffe4 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002830:	2104      	movs	r1, #4
 8002832:	4839      	ldr	r0, [pc, #228]	; (8002918 <menu+0x1830>)
 8002834:	f006 fbf0 	bl	8009018 <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d119      	bne.n	8002872 <menu+0x178a>
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <menu+0x1834>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f083 0301 	eor.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <menu+0x178a>
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <menu+0x1828>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10e      	bne.n	8002872 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002854:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <menu+0x1858>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <menu+0x1858>)
 800285e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <menu+0x1858>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d902      	bls.n	800286e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <menu+0x1858>)
 800286a:	2205      	movs	r2, #5
 800286c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800286e:	f001 ffc3 	bl	80047f8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2108      	movs	r1, #8
 8002874:	4828      	ldr	r0, [pc, #160]	; (8002918 <menu+0x1830>)
 8002876:	f006 fbcf 	bl	8009018 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10d      	bne.n	800289c <menu+0x17b4>
 8002880:	4b26      	ldr	r3, [pc, #152]	; (800291c <menu+0x1834>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <menu+0x1858>)
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <menu+0x1838>)
 8002894:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <menu+0x183c>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <menu+0x1840>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b0d      	cmp	r3, #13
 80028a2:	f040 80b5 	bne.w	8002a10 <menu+0x1928>
		if(dilSecim == 0) {
 80028a6:	4b21      	ldr	r3, [pc, #132]	; (800292c <menu+0x1844>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80028ae:	4a26      	ldr	r2, [pc, #152]	; (8002948 <menu+0x1860>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2001      	movs	r0, #1
 80028b4:	f005 f88a 	bl	80079cc <lcd_print>
 80028b8:	e008      	b.n	80028cc <menu+0x17e4>
		} else if(dilSecim == 1){
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <menu+0x1844>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d104      	bne.n	80028cc <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80028c2:	4a22      	ldr	r2, [pc, #136]	; (800294c <menu+0x1864>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	2001      	movs	r0, #1
 80028c8:	f005 f880 	bl	80079cc <lcd_print>
		}

		if(kapitablaTip == 0) {
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <menu+0x1868>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <menu+0x186c>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	2002      	movs	r0, #2
 80028da:	f005 f877 	bl	80079cc <lcd_print>
 80028de:	e048      	b.n	8002972 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <menu+0x1868>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d13b      	bne.n	8002960 <menu+0x1878>
			if(dilSecim == 0) {
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <menu+0x1844>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <menu+0x1870>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	2002      	movs	r0, #2
 80028f6:	f005 f869 	bl	80079cc <lcd_print>
 80028fa:	e03a      	b.n	8002972 <menu+0x188a>
			} else if(dilSecim == 1) {
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <menu+0x1844>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d136      	bne.n	8002972 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <menu+0x1874>)
 8002906:	2101      	movs	r1, #1
 8002908:	2002      	movs	r0, #2
 800290a:	f005 f85f 	bl	80079cc <lcd_print>
 800290e:	e030      	b.n	8002972 <menu+0x188a>
 8002910:	20000206 	.word	0x20000206
 8002914:	0800d264 	.word	0x0800d264
 8002918:	40010800 	.word	0x40010800
 800291c:	2000022b 	.word	0x2000022b
 8002920:	20000128 	.word	0x20000128
 8002924:	20000228 	.word	0x20000228
 8002928:	200001fc 	.word	0x200001fc
 800292c:	2000021d 	.word	0x2000021d
 8002930:	0800d2e4 	.word	0x0800d2e4
 8002934:	0800d288 	.word	0x0800d288
 8002938:	0800d2f8 	.word	0x0800d2f8
 800293c:	0800d2ac 	.word	0x0800d2ac
 8002940:	20000216 	.word	0x20000216
 8002944:	20000198 	.word	0x20000198
 8002948:	0800d30c 	.word	0x0800d30c
 800294c:	0800d320 	.word	0x0800d320
 8002950:	20000207 	.word	0x20000207
 8002954:	0800d22c 	.word	0x0800d22c
 8002958:	0800d240 	.word	0x0800d240
 800295c:	0800d250 	.word	0x0800d250
			}
		} else if(kapitablaTip == 2) {
 8002960:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <menu+0x19e8>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d104      	bne.n	8002972 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002968:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <menu+0x19ec>)
 800296a:	2101      	movs	r1, #1
 800296c:	2002      	movs	r0, #2
 800296e:	f005 f82d 	bl	80079cc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002972:	2102      	movs	r1, #2
 8002974:	4858      	ldr	r0, [pc, #352]	; (8002ad8 <menu+0x19f0>)
 8002976:	f006 fb4f 	bl	8009018 <HAL_GPIO_ReadPin>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d115      	bne.n	80029ac <menu+0x18c4>
 8002980:	4b56      	ldr	r3, [pc, #344]	; (8002adc <menu+0x19f4>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f083 0301 	eor.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00e      	beq.n	80029ac <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 800298e:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <menu+0x19e8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <menu+0x19e8>)
 8002998:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800299a:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <menu+0x19e8>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <menu+0x18c0>
				kapitablaTip = 0;
 80029a2:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <menu+0x19e8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029a8:	f001 ff26 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ac:	2104      	movs	r1, #4
 80029ae:	484a      	ldr	r0, [pc, #296]	; (8002ad8 <menu+0x19f0>)
 80029b0:	f006 fb32 	bl	8009018 <HAL_GPIO_ReadPin>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d115      	bne.n	80029e6 <menu+0x18fe>
 80029ba:	4b48      	ldr	r3, [pc, #288]	; (8002adc <menu+0x19f4>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <menu+0x19e8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <menu+0x19e8>)
 80029d2:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <menu+0x19e8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d902      	bls.n	80029e2 <menu+0x18fa>
		   		kapitablaTip = 2;
 80029dc:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <menu+0x19e8>)
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029e2:	f001 ff09 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e6:	2108      	movs	r1, #8
 80029e8:	483b      	ldr	r0, [pc, #236]	; (8002ad8 <menu+0x19f0>)
 80029ea:	f006 fb15 	bl	8009018 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10d      	bne.n	8002a10 <menu+0x1928>
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <menu+0x19f4>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <menu+0x19e8>)
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <menu+0x19f8>)
 8002a08:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <menu+0x19fc>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <menu+0x1a00>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b0e      	cmp	r3, #14
 8002a16:	f040 80f2 	bne.w	8002bfe <menu+0x1b16>
		if(dilSecim == 0) {
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <menu+0x1a04>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002a22:	4a33      	ldr	r2, [pc, #204]	; (8002af0 <menu+0x1a08>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	2001      	movs	r0, #1
 8002a28:	f004 ffd0 	bl	80079cc <lcd_print>
 8002a2c:	e008      	b.n	8002a40 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <menu+0x1a04>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d104      	bne.n	8002a40 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002a36:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <menu+0x1a0c>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f004 ffc6 	bl	80079cc <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <menu+0x1a10>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d113      	bne.n	8002a70 <menu+0x1988>
			if(dilSecim == 0){
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <menu+0x1a04>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <menu+0x1a14>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2002      	movs	r0, #2
 8002a56:	f004 ffb9 	bl	80079cc <lcd_print>
 8002a5a:	e071      	b.n	8002b40 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <menu+0x1a04>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d16d      	bne.n	8002b40 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002a64:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <menu+0x1a18>)
 8002a66:	2101      	movs	r1, #1
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f004 ffaf 	bl	80079cc <lcd_print>
 8002a6e:	e067      	b.n	8002b40 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <menu+0x1a10>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d112      	bne.n	8002a9e <menu+0x19b6>
			if(dilSecim == 0){
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <menu+0x1a04>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <menu+0x1a1c>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	2002      	movs	r0, #2
 8002a86:	f004 ffa1 	bl	80079cc <lcd_print>
			}
			if(dilSecim == 1){
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <menu+0x1a04>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d156      	bne.n	8002b40 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <menu+0x1a20>)
 8002a94:	2101      	movs	r1, #1
 8002a96:	2002      	movs	r0, #2
 8002a98:	f004 ff98 	bl	80079cc <lcd_print>
 8002a9c:	e050      	b.n	8002b40 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <menu+0x1a10>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d136      	bne.n	8002b14 <menu+0x1a2c>
			if(dilSecim == 0){
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <menu+0x1a04>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002aae:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <menu+0x1a24>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2002      	movs	r0, #2
 8002ab4:	f004 ff8a 	bl	80079cc <lcd_print>
 8002ab8:	e042      	b.n	8002b40 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <menu+0x1a04>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d13e      	bne.n	8002b40 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <menu+0x1a28>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f004 ff80 	bl	80079cc <lcd_print>
 8002acc:	e038      	b.n	8002b40 <menu+0x1a58>
 8002ace:	bf00      	nop
 8002ad0:	20000207 	.word	0x20000207
 8002ad4:	0800d264 	.word	0x0800d264
 8002ad8:	40010800 	.word	0x40010800
 8002adc:	2000022b 	.word	0x2000022b
 8002ae0:	20000128 	.word	0x20000128
 8002ae4:	20000228 	.word	0x20000228
 8002ae8:	200001fc 	.word	0x200001fc
 8002aec:	2000021d 	.word	0x2000021d
 8002af0:	0800d334 	.word	0x0800d334
 8002af4:	0800d348 	.word	0x0800d348
 8002af8:	20000209 	.word	0x20000209
 8002afc:	0800d35c 	.word	0x0800d35c
 8002b00:	0800d36c 	.word	0x0800d36c
 8002b04:	0800d37c 	.word	0x0800d37c
 8002b08:	0800d38c 	.word	0x0800d38c
 8002b0c:	0800d39c 	.word	0x0800d39c
 8002b10:	0800d3b0 	.word	0x0800d3b0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002b14:	4b9b      	ldr	r3, [pc, #620]	; (8002d84 <menu+0x1c9c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d111      	bne.n	8002b40 <menu+0x1a58>
			if(dilSecim == 0) {
 8002b1c:	4b9a      	ldr	r3, [pc, #616]	; (8002d88 <menu+0x1ca0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002b24:	4a99      	ldr	r2, [pc, #612]	; (8002d8c <menu+0x1ca4>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f004 ff4f 	bl	80079cc <lcd_print>
			}
			if(dilSecim == 1) {
 8002b2e:	4b96      	ldr	r3, [pc, #600]	; (8002d88 <menu+0x1ca0>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d104      	bne.n	8002b40 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002b36:	4a96      	ldr	r2, [pc, #600]	; (8002d90 <menu+0x1ca8>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	f004 ff46 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b40:	2102      	movs	r1, #2
 8002b42:	4894      	ldr	r0, [pc, #592]	; (8002d94 <menu+0x1cac>)
 8002b44:	f006 fa68 	bl	8009018 <HAL_GPIO_ReadPin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d115      	bne.n	8002b7a <menu+0x1a92>
 8002b4e:	4b92      	ldr	r3, [pc, #584]	; (8002d98 <menu+0x1cb0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f083 0301 	eor.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00e      	beq.n	8002b7a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002b5c:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <menu+0x1c9c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b87      	ldr	r3, [pc, #540]	; (8002d84 <menu+0x1c9c>)
 8002b66:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b68:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <menu+0x1c9c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d902      	bls.n	8002b76 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002b70:	4b84      	ldr	r3, [pc, #528]	; (8002d84 <menu+0x1c9c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b76:	f001 fe3f 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	4885      	ldr	r0, [pc, #532]	; (8002d94 <menu+0x1cac>)
 8002b7e:	f006 fa4b 	bl	8009018 <HAL_GPIO_ReadPin>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d115      	bne.n	8002bb4 <menu+0x1acc>
 8002b88:	4b83      	ldr	r3, [pc, #524]	; (8002d98 <menu+0x1cb0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	f083 0301 	eor.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b96:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <menu+0x1c9c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <menu+0x1c9c>)
 8002ba0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002ba2:	4b78      	ldr	r3, [pc, #480]	; (8002d84 <menu+0x1c9c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d902      	bls.n	8002bb0 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <menu+0x1c9c>)
 8002bac:	2202      	movs	r2, #2
 8002bae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bb0:	f001 fe22 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	4877      	ldr	r0, [pc, #476]	; (8002d94 <menu+0x1cac>)
 8002bb8:	f006 fa2e 	bl	8009018 <HAL_GPIO_ReadPin>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d11d      	bne.n	8002bfe <menu+0x1b16>
 8002bc2:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <menu+0x1cb0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002bd0:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <menu+0x1c9c>)
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <menu+0x1cb4>)
 8002bd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <menu+0x1c9c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <menu+0x1b02>
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <menu+0x1c9c>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d106      	bne.n	8002bf8 <menu+0x1b10>
				altLimit = 1;
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <menu+0x1cb8>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002bf0:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <menu+0x1cb8>)
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <menu+0x1cb4>)
 8002bf6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <menu+0x1cbc>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <menu+0x1cc0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d17f      	bne.n	8002d06 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002c06:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <menu+0x1ca0>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002c0e:	4a67      	ldr	r2, [pc, #412]	; (8002dac <menu+0x1cc4>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	2001      	movs	r0, #1
 8002c14:	f004 feda 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c18:	4a65      	ldr	r2, [pc, #404]	; (8002db0 <menu+0x1cc8>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f004 fed5 	bl	80079cc <lcd_print>
 8002c22:	e00d      	b.n	8002c40 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002c24:	4b58      	ldr	r3, [pc, #352]	; (8002d88 <menu+0x1ca0>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d109      	bne.n	8002c40 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002c2c:	4a61      	ldr	r2, [pc, #388]	; (8002db4 <menu+0x1ccc>)
 8002c2e:	2101      	movs	r1, #1
 8002c30:	2001      	movs	r0, #1
 8002c32:	f004 fecb 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c36:	4a60      	ldr	r2, [pc, #384]	; (8002db8 <menu+0x1cd0>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	f004 fec6 	bl	80079cc <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <menu+0x1cd4>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	220a      	movs	r2, #10
 8002c46:	495e      	ldr	r1, [pc, #376]	; (8002dc0 <menu+0x1cd8>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f009 fa11 	bl	800c070 <itoa>
		lcd_print(2,16,snum);
 8002c4e:	4a5c      	ldr	r2, [pc, #368]	; (8002dc0 <menu+0x1cd8>)
 8002c50:	2110      	movs	r1, #16
 8002c52:	2002      	movs	r0, #2
 8002c54:	f004 feba 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c58:	2102      	movs	r1, #2
 8002c5a:	484e      	ldr	r0, [pc, #312]	; (8002d94 <menu+0x1cac>)
 8002c5c:	f006 f9dc 	bl	8009018 <HAL_GPIO_ReadPin>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d119      	bne.n	8002c9a <menu+0x1bb2>
 8002c66:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <menu+0x1cb0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <menu+0x1bb2>
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <menu+0x1cdc>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <menu+0x1cd4>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <menu+0x1cd4>)
 8002c86:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <menu+0x1cd4>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d902      	bls.n	8002c96 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <menu+0x1cd4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c96:	f001 fdaf 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	483d      	ldr	r0, [pc, #244]	; (8002d94 <menu+0x1cac>)
 8002c9e:	f006 f9bb 	bl	8009018 <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d119      	bne.n	8002cdc <menu+0x1bf4>
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <menu+0x1cb0>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	f083 0301 	eor.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d012      	beq.n	8002cdc <menu+0x1bf4>
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <menu+0x1cdc>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <menu+0x1cd4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <menu+0x1cd4>)
 8002cc8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002cca:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <menu+0x1cd4>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <menu+0x1cd4>)
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002cd8:	f001 fd8e 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cdc:	2108      	movs	r1, #8
 8002cde:	482d      	ldr	r0, [pc, #180]	; (8002d94 <menu+0x1cac>)
 8002ce0:	f006 f99a 	bl	8009018 <HAL_GPIO_ReadPin>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10d      	bne.n	8002d06 <menu+0x1c1e>
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <menu+0x1cb0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <menu+0x1cd4>)
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <menu+0x1cb4>)
 8002cfe:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <menu+0x1cbc>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <menu+0x1cc0>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	f040 80bc 	bne.w	8002e88 <menu+0x1da0>
		if(dilSecim == 0) {
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <menu+0x1ca0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002d18:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <menu+0x1ce0>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f004 fe55 	bl	80079cc <lcd_print>
 8002d22:	e008      	b.n	8002d36 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <menu+0x1ca0>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d104      	bne.n	8002d36 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002d2c:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <menu+0x1ce4>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2001      	movs	r0, #1
 8002d32:	f004 fe4b 	bl	80079cc <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <menu+0x1ce8>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <menu+0x1ca0>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <menu+0x1ca4>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	f004 fe3e 	bl	80079cc <lcd_print>
 8002d50:	e04b      	b.n	8002dea <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <menu+0x1ca0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d147      	bne.n	8002dea <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002d5a:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <menu+0x1ca8>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2002      	movs	r0, #2
 8002d60:	f004 fe34 	bl	80079cc <lcd_print>
 8002d64:	e041      	b.n	8002dea <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <menu+0x1ce8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d13d      	bne.n	8002dea <menu+0x1d02>
			if(dilSecim == 0) {
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <menu+0x1ca0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d130      	bne.n	8002dd8 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <menu+0x1cec>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f004 fe26 	bl	80079cc <lcd_print>
 8002d80:	e033      	b.n	8002dea <menu+0x1d02>
 8002d82:	bf00      	nop
 8002d84:	20000209 	.word	0x20000209
 8002d88:	2000021d 	.word	0x2000021d
 8002d8c:	0800d024 	.word	0x0800d024
 8002d90:	0800d038 	.word	0x0800d038
 8002d94:	40010800 	.word	0x40010800
 8002d98:	2000022b 	.word	0x2000022b
 8002d9c:	20000128 	.word	0x20000128
 8002da0:	20000202 	.word	0x20000202
 8002da4:	20000228 	.word	0x20000228
 8002da8:	200001fc 	.word	0x200001fc
 8002dac:	0800d3c4 	.word	0x0800d3c4
 8002db0:	0800d288 	.word	0x0800d288
 8002db4:	0800d3d8 	.word	0x0800d3d8
 8002db8:	0800d2ac 	.word	0x0800d2ac
 8002dbc:	20000217 	.word	0x20000217
 8002dc0:	20000198 	.word	0x20000198
 8002dc4:	20000207 	.word	0x20000207
 8002dc8:	0800d3ec 	.word	0x0800d3ec
 8002dcc:	0800d400 	.word	0x0800d400
 8002dd0:	2000020a 	.word	0x2000020a
 8002dd4:	0800d084 	.word	0x0800d084
			} else if(dilSecim == 1) {
 8002dd8:	4b99      	ldr	r3, [pc, #612]	; (8003040 <menu+0x1f58>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d104      	bne.n	8002dea <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002de0:	4a98      	ldr	r2, [pc, #608]	; (8003044 <menu+0x1f5c>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f004 fdf1 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dea:	2102      	movs	r1, #2
 8002dec:	4896      	ldr	r0, [pc, #600]	; (8003048 <menu+0x1f60>)
 8002dee:	f006 f913 	bl	8009018 <HAL_GPIO_ReadPin>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d115      	bne.n	8002e24 <menu+0x1d3c>
 8002df8:	4b94      	ldr	r3, [pc, #592]	; (800304c <menu+0x1f64>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002e06:	4b92      	ldr	r3, [pc, #584]	; (8003050 <menu+0x1f68>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b90      	ldr	r3, [pc, #576]	; (8003050 <menu+0x1f68>)
 8002e10:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002e12:	4b8f      	ldr	r3, [pc, #572]	; (8003050 <menu+0x1f68>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d902      	bls.n	8002e20 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002e1a:	4b8d      	ldr	r3, [pc, #564]	; (8003050 <menu+0x1f68>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e20:	f001 fcea 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e24:	2104      	movs	r1, #4
 8002e26:	4888      	ldr	r0, [pc, #544]	; (8003048 <menu+0x1f60>)
 8002e28:	f006 f8f6 	bl	8009018 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d115      	bne.n	8002e5e <menu+0x1d76>
 8002e32:	4b86      	ldr	r3, [pc, #536]	; (800304c <menu+0x1f64>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002e40:	4b83      	ldr	r3, [pc, #524]	; (8003050 <menu+0x1f68>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b81      	ldr	r3, [pc, #516]	; (8003050 <menu+0x1f68>)
 8002e4a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e4c:	4b80      	ldr	r3, [pc, #512]	; (8003050 <menu+0x1f68>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002e54:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <menu+0x1f68>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e5a:	f001 fccd 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e5e:	2108      	movs	r1, #8
 8002e60:	4879      	ldr	r0, [pc, #484]	; (8003048 <menu+0x1f60>)
 8002e62:	f006 f8d9 	bl	8009018 <HAL_GPIO_ReadPin>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <menu+0x1da0>
 8002e6c:	4b77      	ldr	r3, [pc, #476]	; (800304c <menu+0x1f64>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	f083 0301 	eor.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002e7a:	4b75      	ldr	r3, [pc, #468]	; (8003050 <menu+0x1f68>)
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	4b75      	ldr	r3, [pc, #468]	; (8003054 <menu+0x1f6c>)
 8002e80:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002e82:	4b75      	ldr	r3, [pc, #468]	; (8003058 <menu+0x1f70>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002e88:	4b74      	ldr	r3, [pc, #464]	; (800305c <menu+0x1f74>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b11      	cmp	r3, #17
 8002e8e:	f040 80c3 	bne.w	8003018 <menu+0x1f30>
		if(dilSecim == 0) {
 8002e92:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <menu+0x1f58>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002e9a:	4a71      	ldr	r2, [pc, #452]	; (8003060 <menu+0x1f78>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f004 fd94 	bl	80079cc <lcd_print>
 8002ea4:	e008      	b.n	8002eb8 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <menu+0x1f58>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002eae:	4a6d      	ldr	r2, [pc, #436]	; (8003064 <menu+0x1f7c>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f004 fd8a 	bl	80079cc <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <menu+0x1f80>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d113      	bne.n	8002ee8 <menu+0x1e00>
			if(dilSecim == 0){
 8002ec0:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <menu+0x1f58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002ec8:	4a68      	ldr	r2, [pc, #416]	; (800306c <menu+0x1f84>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f004 fd7d 	bl	80079cc <lcd_print>
 8002ed2:	e038      	b.n	8002f46 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <menu+0x1f58>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d134      	bne.n	8002f46 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002edc:	4a64      	ldr	r2, [pc, #400]	; (8003070 <menu+0x1f88>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	f004 fd73 	bl	80079cc <lcd_print>
 8002ee6:	e02e      	b.n	8002f46 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <menu+0x1f80>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d113      	bne.n	8002f18 <menu+0x1e30>
			if(dilSecim == 0){
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <menu+0x1f58>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002ef8:	4a5e      	ldr	r2, [pc, #376]	; (8003074 <menu+0x1f8c>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f004 fd65 	bl	80079cc <lcd_print>
 8002f02:	e020      	b.n	8002f46 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f04:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <menu+0x1f58>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d11c      	bne.n	8002f46 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002f0c:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <menu+0x1f90>)
 8002f0e:	2101      	movs	r1, #1
 8002f10:	2002      	movs	r0, #2
 8002f12:	f004 fd5b 	bl	80079cc <lcd_print>
 8002f16:	e016      	b.n	8002f46 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <menu+0x1f80>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d112      	bne.n	8002f46 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002f20:	4b47      	ldr	r3, [pc, #284]	; (8003040 <menu+0x1f58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002f28:	4a54      	ldr	r2, [pc, #336]	; (800307c <menu+0x1f94>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f004 fd4d 	bl	80079cc <lcd_print>
 8002f32:	e008      	b.n	8002f46 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <menu+0x1f58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d104      	bne.n	8002f46 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002f3c:	4a50      	ldr	r2, [pc, #320]	; (8003080 <menu+0x1f98>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2002      	movs	r0, #2
 8002f42:	f004 fd43 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f46:	2102      	movs	r1, #2
 8002f48:	483f      	ldr	r0, [pc, #252]	; (8003048 <menu+0x1f60>)
 8002f4a:	f006 f865 	bl	8009018 <HAL_GPIO_ReadPin>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d115      	bne.n	8002f80 <menu+0x1e98>
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <menu+0x1f64>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	f083 0301 	eor.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <menu+0x1f80>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <menu+0x1f80>)
 8002f6c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <menu+0x1f80>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d902      	bls.n	8002f7c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <menu+0x1f80>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f7c:	f001 fc3c 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f80:	2104      	movs	r1, #4
 8002f82:	4831      	ldr	r0, [pc, #196]	; (8003048 <menu+0x1f60>)
 8002f84:	f006 f848 	bl	8009018 <HAL_GPIO_ReadPin>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <menu+0x1ed2>
 8002f8e:	4b2f      	ldr	r3, [pc, #188]	; (800304c <menu+0x1f64>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	f083 0301 	eor.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00e      	beq.n	8002fba <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002f9c:	4b32      	ldr	r3, [pc, #200]	; (8003068 <menu+0x1f80>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <menu+0x1f80>)
 8002fa6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <menu+0x1f80>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d902      	bls.n	8002fb6 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002fb0:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <menu+0x1f80>)
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fb6:	f001 fc1f 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fba:	2108      	movs	r1, #8
 8002fbc:	4822      	ldr	r0, [pc, #136]	; (8003048 <menu+0x1f60>)
 8002fbe:	f006 f82b 	bl	8009018 <HAL_GPIO_ReadPin>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d127      	bne.n	8003018 <menu+0x1f30>
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <menu+0x1f64>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <menu+0x1f80>)
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <menu+0x1f6c>)
 8002fdc:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <menu+0x1f80>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d003      	beq.n	8002fee <menu+0x1f06>
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <menu+0x1f80>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <menu+0x1f14>
				calismaSekli = 0;
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <menu+0x1f9c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <menu+0x1f9c>)
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <menu+0x1f6c>)
 8002ffa:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <menu+0x1f80>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d106      	bne.n	8003012 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <menu+0x1fa0>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <menu+0x1fa0>)
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <menu+0x1f6c>)
 8003010:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <menu+0x1f70>)
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <menu+0x1f74>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b12      	cmp	r3, #18
 800301e:	f040 80d5 	bne.w	80031cc <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <menu+0x1f80>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d13c      	bne.n	80030a4 <menu+0x1fbc>
			if(dilSecim == 0) {
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <menu+0x1f58>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d12e      	bne.n	8003090 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <menu+0x1fa4>)
 8003034:	2101      	movs	r1, #1
 8003036:	2001      	movs	r0, #1
 8003038:	f004 fcc8 	bl	80079cc <lcd_print>
 800303c:	e048      	b.n	80030d0 <menu+0x1fe8>
 800303e:	bf00      	nop
 8003040:	2000021d 	.word	0x2000021d
 8003044:	0800d098 	.word	0x0800d098
 8003048:	40010800 	.word	0x40010800
 800304c:	2000022b 	.word	0x2000022b
 8003050:	2000020a 	.word	0x2000020a
 8003054:	20000128 	.word	0x20000128
 8003058:	20000228 	.word	0x20000228
 800305c:	200001fc 	.word	0x200001fc
 8003060:	0800d414 	.word	0x0800d414
 8003064:	0800d428 	.word	0x0800d428
 8003068:	2000020b 	.word	0x2000020b
 800306c:	0800d43c 	.word	0x0800d43c
 8003070:	0800d44c 	.word	0x0800d44c
 8003074:	0800d45c 	.word	0x0800d45c
 8003078:	0800d46c 	.word	0x0800d46c
 800307c:	0800d024 	.word	0x0800d024
 8003080:	0800d038 	.word	0x0800d038
 8003084:	200001fd 	.word	0x200001fd
 8003088:	2000020e 	.word	0x2000020e
 800308c:	0800d47c 	.word	0x0800d47c
			} else if(dilSecim == 1) {
 8003090:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <menu+0x2198>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d11b      	bne.n	80030d0 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003098:	4a7a      	ldr	r2, [pc, #488]	; (8003284 <menu+0x219c>)
 800309a:	2101      	movs	r1, #1
 800309c:	2001      	movs	r0, #1
 800309e:	f004 fc95 	bl	80079cc <lcd_print>
 80030a2:	e015      	b.n	80030d0 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80030a4:	4b78      	ldr	r3, [pc, #480]	; (8003288 <menu+0x21a0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d111      	bne.n	80030d0 <menu+0x1fe8>
			if(dilSecim == 0){
 80030ac:	4b74      	ldr	r3, [pc, #464]	; (8003280 <menu+0x2198>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d104      	bne.n	80030be <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80030b4:	4a75      	ldr	r2, [pc, #468]	; (800328c <menu+0x21a4>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	2001      	movs	r0, #1
 80030ba:	f004 fc87 	bl	80079cc <lcd_print>
			}
			if(dilSecim == 1){
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <menu+0x2198>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d104      	bne.n	80030d0 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80030c6:	4a72      	ldr	r2, [pc, #456]	; (8003290 <menu+0x21a8>)
 80030c8:	2101      	movs	r1, #1
 80030ca:	2001      	movs	r0, #1
 80030cc:	f004 fc7e 	bl	80079cc <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80030d0:	4b70      	ldr	r3, [pc, #448]	; (8003294 <menu+0x21ac>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <menu+0x2018>
			if(dilSecim == 0) {
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <menu+0x2198>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80030e0:	4a6d      	ldr	r2, [pc, #436]	; (8003298 <menu+0x21b0>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2002      	movs	r0, #2
 80030e6:	f004 fc71 	bl	80079cc <lcd_print>
 80030ea:	e020      	b.n	800312e <menu+0x2046>
			} else if(dilSecim == 1){
 80030ec:	4b64      	ldr	r3, [pc, #400]	; (8003280 <menu+0x2198>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d11c      	bne.n	800312e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80030f4:	4a69      	ldr	r2, [pc, #420]	; (800329c <menu+0x21b4>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	2002      	movs	r0, #2
 80030fa:	f004 fc67 	bl	80079cc <lcd_print>
 80030fe:	e016      	b.n	800312e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <menu+0x21ac>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d112      	bne.n	800312e <menu+0x2046>
			if(dilSecim == 0){
 8003108:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <menu+0x2198>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003110:	4a63      	ldr	r2, [pc, #396]	; (80032a0 <menu+0x21b8>)
 8003112:	2101      	movs	r1, #1
 8003114:	2002      	movs	r0, #2
 8003116:	f004 fc59 	bl	80079cc <lcd_print>
 800311a:	e008      	b.n	800312e <menu+0x2046>
			} else if(dilSecim == 1){
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <menu+0x2198>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d104      	bne.n	800312e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <menu+0x21bc>)
 8003126:	2101      	movs	r1, #1
 8003128:	2002      	movs	r0, #2
 800312a:	f004 fc4f 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800312e:	2102      	movs	r1, #2
 8003130:	485d      	ldr	r0, [pc, #372]	; (80032a8 <menu+0x21c0>)
 8003132:	f005 ff71 	bl	8009018 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d115      	bne.n	8003168 <menu+0x2080>
 800313c:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <menu+0x21c4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f083 0301 	eor.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00e      	beq.n	8003168 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800314a:	4b52      	ldr	r3, [pc, #328]	; (8003294 <menu+0x21ac>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b50      	ldr	r3, [pc, #320]	; (8003294 <menu+0x21ac>)
 8003154:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003156:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <menu+0x21ac>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d902      	bls.n	8003164 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800315e:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <menu+0x21ac>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003164:	f001 fb48 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003168:	2104      	movs	r1, #4
 800316a:	484f      	ldr	r0, [pc, #316]	; (80032a8 <menu+0x21c0>)
 800316c:	f005 ff54 	bl	8009018 <HAL_GPIO_ReadPin>
 8003170:	4603      	mov	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d115      	bne.n	80031a2 <menu+0x20ba>
 8003176:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <menu+0x21c4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003184:	4b43      	ldr	r3, [pc, #268]	; (8003294 <menu+0x21ac>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	3b01      	subs	r3, #1
 800318a:	b2da      	uxtb	r2, r3
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <menu+0x21ac>)
 800318e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003190:	4b40      	ldr	r3, [pc, #256]	; (8003294 <menu+0x21ac>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003198:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <menu+0x21ac>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800319e:	f001 fb2b 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a2:	2108      	movs	r1, #8
 80031a4:	4840      	ldr	r0, [pc, #256]	; (80032a8 <menu+0x21c0>)
 80031a6:	f005 ff37 	bl	8009018 <HAL_GPIO_ReadPin>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10d      	bne.n	80031cc <menu+0x20e4>
 80031b0:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <menu+0x21c4>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80031be:	4b35      	ldr	r3, [pc, #212]	; (8003294 <menu+0x21ac>)
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <menu+0x21c8>)
 80031c4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <menu+0x21cc>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80031cc:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <menu+0x21d0>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b13      	cmp	r3, #19
 80031d2:	f040 80d5 	bne.w	8003380 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80031d6:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <menu+0x21a0>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d113      	bne.n	8003206 <menu+0x211e>
			if(dilSecim == 0) {
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <menu+0x2198>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80031e6:	4a35      	ldr	r2, [pc, #212]	; (80032bc <menu+0x21d4>)
 80031e8:	2101      	movs	r1, #1
 80031ea:	2001      	movs	r0, #1
 80031ec:	f004 fbee 	bl	80079cc <lcd_print>
 80031f0:	e01f      	b.n	8003232 <menu+0x214a>
			} else if(dilSecim == 1) {
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <menu+0x2198>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d11b      	bne.n	8003232 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80031fa:	4a31      	ldr	r2, [pc, #196]	; (80032c0 <menu+0x21d8>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	2001      	movs	r0, #1
 8003200:	f004 fbe4 	bl	80079cc <lcd_print>
 8003204:	e015      	b.n	8003232 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <menu+0x21a0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d111      	bne.n	8003232 <menu+0x214a>
			if(dilSecim == 0) {
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <menu+0x2198>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003216:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <menu+0x21dc>)
 8003218:	2101      	movs	r1, #1
 800321a:	2001      	movs	r0, #1
 800321c:	f004 fbd6 	bl	80079cc <lcd_print>
			}
			if(dilSecim == 1) {
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <menu+0x2198>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d104      	bne.n	8003232 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003228:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <menu+0x21e0>)
 800322a:	2101      	movs	r1, #1
 800322c:	2001      	movs	r0, #1
 800322e:	f004 fbcd 	bl	80079cc <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <menu+0x21e4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <menu+0x217a>
			if(dilSecim == 0) {
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <menu+0x2198>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003242:	4a15      	ldr	r2, [pc, #84]	; (8003298 <menu+0x21b0>)
 8003244:	2101      	movs	r1, #1
 8003246:	2002      	movs	r0, #2
 8003248:	f004 fbc0 	bl	80079cc <lcd_print>
 800324c:	e049      	b.n	80032e2 <menu+0x21fa>
			} else if(dilSecim == 1) {
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <menu+0x2198>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d145      	bne.n	80032e2 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <menu+0x21b4>)
 8003258:	2101      	movs	r1, #1
 800325a:	2002      	movs	r0, #2
 800325c:	f004 fbb6 	bl	80079cc <lcd_print>
 8003260:	e03f      	b.n	80032e2 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <menu+0x21e4>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d13b      	bne.n	80032e2 <menu+0x21fa>
			if(dilSecim == 0) {
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <menu+0x2198>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d12e      	bne.n	80032d0 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <menu+0x21b8>)
 8003274:	2101      	movs	r1, #1
 8003276:	2002      	movs	r0, #2
 8003278:	f004 fba8 	bl	80079cc <lcd_print>
 800327c:	e031      	b.n	80032e2 <menu+0x21fa>
 800327e:	bf00      	nop
 8003280:	2000021d 	.word	0x2000021d
 8003284:	0800d490 	.word	0x0800d490
 8003288:	2000020b 	.word	0x2000020b
 800328c:	0800d4a0 	.word	0x0800d4a0
 8003290:	0800d4b4 	.word	0x0800d4b4
 8003294:	2000020c 	.word	0x2000020c
 8003298:	0800d024 	.word	0x0800d024
 800329c:	0800d038 	.word	0x0800d038
 80032a0:	0800d084 	.word	0x0800d084
 80032a4:	0800d098 	.word	0x0800d098
 80032a8:	40010800 	.word	0x40010800
 80032ac:	2000022b 	.word	0x2000022b
 80032b0:	20000128 	.word	0x20000128
 80032b4:	20000228 	.word	0x20000228
 80032b8:	200001fc 	.word	0x200001fc
 80032bc:	0800d4c8 	.word	0x0800d4c8
 80032c0:	0800d4dc 	.word	0x0800d4dc
 80032c4:	0800d4f0 	.word	0x0800d4f0
 80032c8:	0800d504 	.word	0x0800d504
 80032cc:	2000020d 	.word	0x2000020d
			} else if(dilSecim == 1) {
 80032d0:	4b90      	ldr	r3, [pc, #576]	; (8003514 <menu+0x242c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d104      	bne.n	80032e2 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80032d8:	4a8f      	ldr	r2, [pc, #572]	; (8003518 <menu+0x2430>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2002      	movs	r0, #2
 80032de:	f004 fb75 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e2:	2102      	movs	r1, #2
 80032e4:	488d      	ldr	r0, [pc, #564]	; (800351c <menu+0x2434>)
 80032e6:	f005 fe97 	bl	8009018 <HAL_GPIO_ReadPin>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d115      	bne.n	800331c <menu+0x2234>
 80032f0:	4b8b      	ldr	r3, [pc, #556]	; (8003520 <menu+0x2438>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f083 0301 	eor.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00e      	beq.n	800331c <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80032fe:	4b89      	ldr	r3, [pc, #548]	; (8003524 <menu+0x243c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b87      	ldr	r3, [pc, #540]	; (8003524 <menu+0x243c>)
 8003308:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800330a:	4b86      	ldr	r3, [pc, #536]	; (8003524 <menu+0x243c>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d902      	bls.n	8003318 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003312:	4b84      	ldr	r3, [pc, #528]	; (8003524 <menu+0x243c>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003318:	f001 fa6e 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800331c:	2104      	movs	r1, #4
 800331e:	487f      	ldr	r0, [pc, #508]	; (800351c <menu+0x2434>)
 8003320:	f005 fe7a 	bl	8009018 <HAL_GPIO_ReadPin>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d115      	bne.n	8003356 <menu+0x226e>
 800332a:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <menu+0x2438>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	f083 0301 	eor.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003338:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <menu+0x243c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b78      	ldr	r3, [pc, #480]	; (8003524 <menu+0x243c>)
 8003342:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003344:	4b77      	ldr	r3, [pc, #476]	; (8003524 <menu+0x243c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 800334c:	4b75      	ldr	r3, [pc, #468]	; (8003524 <menu+0x243c>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003352:	f001 fa51 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003356:	2108      	movs	r1, #8
 8003358:	4870      	ldr	r0, [pc, #448]	; (800351c <menu+0x2434>)
 800335a:	f005 fe5d 	bl	8009018 <HAL_GPIO_ReadPin>
 800335e:	4603      	mov	r3, r0
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10d      	bne.n	8003380 <menu+0x2298>
 8003364:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <menu+0x2438>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003372:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <menu+0x243c>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <menu+0x2440>)
 8003378:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800337a:	4b6c      	ldr	r3, [pc, #432]	; (800352c <menu+0x2444>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003380:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <menu+0x2448>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b14      	cmp	r3, #20
 8003386:	f040 80b5 	bne.w	80034f4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800338a:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <menu+0x244c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d113      	bne.n	80033ba <menu+0x22d2>
			if(dilSecim == 0) {
 8003392:	4b60      	ldr	r3, [pc, #384]	; (8003514 <menu+0x242c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800339a:	4a67      	ldr	r2, [pc, #412]	; (8003538 <menu+0x2450>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f004 fb14 	bl	80079cc <lcd_print>
 80033a4:	e020      	b.n	80033e8 <menu+0x2300>
			} else if(dilSecim == 1) {
 80033a6:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <menu+0x242c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11c      	bne.n	80033e8 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80033ae:	4a63      	ldr	r2, [pc, #396]	; (800353c <menu+0x2454>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	2001      	movs	r0, #1
 80033b4:	f004 fb0a 	bl	80079cc <lcd_print>
 80033b8:	e016      	b.n	80033e8 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <menu+0x244c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d112      	bne.n	80033e8 <menu+0x2300>
			if(dilSecim == 0) {
 80033c2:	4b54      	ldr	r3, [pc, #336]	; (8003514 <menu+0x242c>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80033ca:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <menu+0x2458>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	2001      	movs	r0, #1
 80033d0:	f004 fafc 	bl	80079cc <lcd_print>
 80033d4:	e008      	b.n	80033e8 <menu+0x2300>
			} else if(dilSecim == 1) {
 80033d6:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <menu+0x242c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d104      	bne.n	80033e8 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80033de:	4a59      	ldr	r2, [pc, #356]	; (8003544 <menu+0x245c>)
 80033e0:	2101      	movs	r1, #1
 80033e2:	2001      	movs	r0, #1
 80033e4:	f004 faf2 	bl	80079cc <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80033e8:	4b57      	ldr	r3, [pc, #348]	; (8003548 <menu+0x2460>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d113      	bne.n	8003418 <menu+0x2330>
			if(dilSecim == 0) {
 80033f0:	4b48      	ldr	r3, [pc, #288]	; (8003514 <menu+0x242c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80033f8:	4a54      	ldr	r2, [pc, #336]	; (800354c <menu+0x2464>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2002      	movs	r0, #2
 80033fe:	f004 fae5 	bl	80079cc <lcd_print>
 8003402:	e020      	b.n	8003446 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <menu+0x242c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d11c      	bne.n	8003446 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 800340c:	4a50      	ldr	r2, [pc, #320]	; (8003550 <menu+0x2468>)
 800340e:	2101      	movs	r1, #1
 8003410:	2002      	movs	r0, #2
 8003412:	f004 fadb 	bl	80079cc <lcd_print>
 8003416:	e016      	b.n	8003446 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <menu+0x2460>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d112      	bne.n	8003446 <menu+0x235e>
			if(dilSecim == 0) {
 8003420:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <menu+0x242c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003428:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <menu+0x246c>)
 800342a:	2101      	movs	r1, #1
 800342c:	2002      	movs	r0, #2
 800342e:	f004 facd 	bl	80079cc <lcd_print>
 8003432:	e008      	b.n	8003446 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003434:	4b37      	ldr	r3, [pc, #220]	; (8003514 <menu+0x242c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d104      	bne.n	8003446 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 800343c:	4a46      	ldr	r2, [pc, #280]	; (8003558 <menu+0x2470>)
 800343e:	2101      	movs	r1, #1
 8003440:	2002      	movs	r0, #2
 8003442:	f004 fac3 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003446:	2102      	movs	r1, #2
 8003448:	4834      	ldr	r0, [pc, #208]	; (800351c <menu+0x2434>)
 800344a:	f005 fde5 	bl	8009018 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d119      	bne.n	8003488 <menu+0x23a0>
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <menu+0x2438>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	f083 0301 	eor.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <menu+0x23a0>
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <menu+0x244c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d10e      	bne.n	8003488 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <menu+0x2460>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b35      	ldr	r3, [pc, #212]	; (8003548 <menu+0x2460>)
 8003474:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <menu+0x2460>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d902      	bls.n	8003484 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <menu+0x2460>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003484:	f001 f9b8 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003488:	2104      	movs	r1, #4
 800348a:	4824      	ldr	r0, [pc, #144]	; (800351c <menu+0x2434>)
 800348c:	f005 fdc4 	bl	8009018 <HAL_GPIO_ReadPin>
 8003490:	4603      	mov	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d119      	bne.n	80034ca <menu+0x23e2>
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <menu+0x2438>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <menu+0x23e2>
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <menu+0x244c>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d10e      	bne.n	80034ca <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80034ac:	4b26      	ldr	r3, [pc, #152]	; (8003548 <menu+0x2460>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <menu+0x2460>)
 80034b6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <menu+0x2460>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <menu+0x2460>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034c6:	f001 f997 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ca:	2108      	movs	r1, #8
 80034cc:	4813      	ldr	r0, [pc, #76]	; (800351c <menu+0x2434>)
 80034ce:	f005 fda3 	bl	8009018 <HAL_GPIO_ReadPin>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10d      	bne.n	80034f4 <menu+0x240c>
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <menu+0x2438>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d006      	beq.n	80034f4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <menu+0x2460>)
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <menu+0x2440>)
 80034ec:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80034ee:	4b0f      	ldr	r3, [pc, #60]	; (800352c <menu+0x2444>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <menu+0x2448>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b15      	cmp	r3, #21
 80034fa:	f040 80c2 	bne.w	8003682 <menu+0x259a>
		if(dilSecim == 0) {
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <menu+0x242c>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d12c      	bne.n	8003560 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <menu+0x2474>)
 8003508:	2101      	movs	r1, #1
 800350a:	2001      	movs	r0, #1
 800350c:	f004 fa5e 	bl	80079cc <lcd_print>
 8003510:	e02f      	b.n	8003572 <menu+0x248a>
 8003512:	bf00      	nop
 8003514:	2000021d 	.word	0x2000021d
 8003518:	0800d098 	.word	0x0800d098
 800351c:	40010800 	.word	0x40010800
 8003520:	2000022b 	.word	0x2000022b
 8003524:	2000020d 	.word	0x2000020d
 8003528:	20000128 	.word	0x20000128
 800352c:	20000228 	.word	0x20000228
 8003530:	200001fc 	.word	0x200001fc
 8003534:	2000020b 	.word	0x2000020b
 8003538:	0800d518 	.word	0x0800d518
 800353c:	0800d52c 	.word	0x0800d52c
 8003540:	0800d540 	.word	0x0800d540
 8003544:	0800d554 	.word	0x0800d554
 8003548:	2000020e 	.word	0x2000020e
 800354c:	0800d568 	.word	0x0800d568
 8003550:	0800d57c 	.word	0x0800d57c
 8003554:	0800d58c 	.word	0x0800d58c
 8003558:	0800d5a0 	.word	0x0800d5a0
 800355c:	0800d5b0 	.word	0x0800d5b0
		} else if(dilSecim == 1) {
 8003560:	4b9c      	ldr	r3, [pc, #624]	; (80037d4 <menu+0x26ec>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d104      	bne.n	8003572 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003568:	4a9b      	ldr	r2, [pc, #620]	; (80037d8 <menu+0x26f0>)
 800356a:	2101      	movs	r1, #1
 800356c:	2001      	movs	r0, #1
 800356e:	f004 fa2d 	bl	80079cc <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003572:	4b9a      	ldr	r3, [pc, #616]	; (80037dc <menu+0x26f4>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d112      	bne.n	80035a0 <menu+0x24b8>
			if(dilSecim == 0) {
 800357a:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <menu+0x26ec>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003582:	4a97      	ldr	r2, [pc, #604]	; (80037e0 <menu+0x26f8>)
 8003584:	2101      	movs	r1, #1
 8003586:	2002      	movs	r0, #2
 8003588:	f004 fa20 	bl	80079cc <lcd_print>
			}
			if(dilSecim == 1) {
 800358c:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <menu+0x26ec>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d11c      	bne.n	80035ce <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003594:	4a93      	ldr	r2, [pc, #588]	; (80037e4 <menu+0x26fc>)
 8003596:	2101      	movs	r1, #1
 8003598:	2002      	movs	r0, #2
 800359a:	f004 fa17 	bl	80079cc <lcd_print>
 800359e:	e016      	b.n	80035ce <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80035a0:	4b8e      	ldr	r3, [pc, #568]	; (80037dc <menu+0x26f4>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d112      	bne.n	80035ce <menu+0x24e6>
			if(dilSecim == 0) {
 80035a8:	4b8a      	ldr	r3, [pc, #552]	; (80037d4 <menu+0x26ec>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80035b0:	4a8d      	ldr	r2, [pc, #564]	; (80037e8 <menu+0x2700>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	2002      	movs	r0, #2
 80035b6:	f004 fa09 	bl	80079cc <lcd_print>
 80035ba:	e008      	b.n	80035ce <menu+0x24e6>
			} else if(dilSecim == 1) {
 80035bc:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <menu+0x26ec>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d104      	bne.n	80035ce <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80035c4:	4a89      	ldr	r2, [pc, #548]	; (80037ec <menu+0x2704>)
 80035c6:	2101      	movs	r1, #1
 80035c8:	2002      	movs	r0, #2
 80035ca:	f004 f9ff 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ce:	2102      	movs	r1, #2
 80035d0:	4887      	ldr	r0, [pc, #540]	; (80037f0 <menu+0x2708>)
 80035d2:	f005 fd21 	bl	8009018 <HAL_GPIO_ReadPin>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d115      	bne.n	8003608 <menu+0x2520>
 80035dc:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <menu+0x270c>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f083 0301 	eor.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80035ea:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <menu+0x26f4>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <menu+0x26f4>)
 80035f4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80035f6:	4b79      	ldr	r3, [pc, #484]	; (80037dc <menu+0x26f4>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d902      	bls.n	8003604 <menu+0x251c>
				platformSilindirTipi = 0;
 80035fe:	4b77      	ldr	r3, [pc, #476]	; (80037dc <menu+0x26f4>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003604:	f001 f8f8 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003608:	2104      	movs	r1, #4
 800360a:	4879      	ldr	r0, [pc, #484]	; (80037f0 <menu+0x2708>)
 800360c:	f005 fd04 	bl	8009018 <HAL_GPIO_ReadPin>
 8003610:	4603      	mov	r3, r0
 8003612:	2b01      	cmp	r3, #1
 8003614:	d115      	bne.n	8003642 <menu+0x255a>
 8003616:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <menu+0x270c>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	f083 0301 	eor.w	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003624:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <menu+0x26f4>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	3b01      	subs	r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <menu+0x26f4>)
 800362e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <menu+0x26f4>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003638:	4b68      	ldr	r3, [pc, #416]	; (80037dc <menu+0x26f4>)
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800363e:	f001 f8db 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003642:	2108      	movs	r1, #8
 8003644:	486a      	ldr	r0, [pc, #424]	; (80037f0 <menu+0x2708>)
 8003646:	f005 fce7 	bl	8009018 <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d118      	bne.n	8003682 <menu+0x259a>
 8003650:	4b68      	ldr	r3, [pc, #416]	; (80037f4 <menu+0x270c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d011      	beq.n	8003682 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <menu+0x26f4>)
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	4b65      	ldr	r3, [pc, #404]	; (80037f8 <menu+0x2710>)
 8003664:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <menu+0x26f4>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d106      	bne.n	800367c <menu+0x2594>
				altLimit = 1;
 800366e:	4b63      	ldr	r3, [pc, #396]	; (80037fc <menu+0x2714>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <menu+0x2714>)
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	4b5f      	ldr	r3, [pc, #380]	; (80037f8 <menu+0x2710>)
 800367a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800367c:	4b60      	ldr	r3, [pc, #384]	; (8003800 <menu+0x2718>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003682:	4b60      	ldr	r3, [pc, #384]	; (8003804 <menu+0x271c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b16      	cmp	r3, #22
 8003688:	f040 8081 	bne.w	800378e <menu+0x26a6>
		if(dilSecim == 0) {
 800368c:	4b51      	ldr	r3, [pc, #324]	; (80037d4 <menu+0x26ec>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003694:	4a5c      	ldr	r2, [pc, #368]	; (8003808 <menu+0x2720>)
 8003696:	2101      	movs	r1, #1
 8003698:	2001      	movs	r0, #1
 800369a:	f004 f997 	bl	80079cc <lcd_print>
 800369e:	e008      	b.n	80036b2 <menu+0x25ca>
		} else if(dilSecim == 1) {
 80036a0:	4b4c      	ldr	r3, [pc, #304]	; (80037d4 <menu+0x26ec>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d104      	bne.n	80036b2 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80036a8:	4a58      	ldr	r2, [pc, #352]	; (800380c <menu+0x2724>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2001      	movs	r0, #1
 80036ae:	f004 f98d 	bl	80079cc <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80036b2:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <menu+0x26ec>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80036ba:	4a55      	ldr	r2, [pc, #340]	; (8003810 <menu+0x2728>)
 80036bc:	2101      	movs	r1, #1
 80036be:	2002      	movs	r0, #2
 80036c0:	f004 f984 	bl	80079cc <lcd_print>
 80036c4:	e008      	b.n	80036d8 <menu+0x25f0>
			} else if(dilSecim == 1){
 80036c6:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <menu+0x26ec>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d104      	bne.n	80036d8 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80036ce:	4a51      	ldr	r2, [pc, #324]	; (8003814 <menu+0x272c>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	2002      	movs	r0, #2
 80036d4:	f004 f97a 	bl	80079cc <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80036d8:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <menu+0x2730>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	220a      	movs	r2, #10
 80036de:	494f      	ldr	r1, [pc, #316]	; (800381c <menu+0x2734>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f008 fcc5 	bl	800c070 <itoa>
		lcd_print(2,16,snum);
 80036e6:	4a4d      	ldr	r2, [pc, #308]	; (800381c <menu+0x2734>)
 80036e8:	2110      	movs	r1, #16
 80036ea:	2002      	movs	r0, #2
 80036ec:	f004 f96e 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f0:	2102      	movs	r1, #2
 80036f2:	483f      	ldr	r0, [pc, #252]	; (80037f0 <menu+0x2708>)
 80036f4:	f005 fc90 	bl	8009018 <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d115      	bne.n	800372a <menu+0x2642>
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <menu+0x270c>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 800370c:	4b42      	ldr	r3, [pc, #264]	; (8003818 <menu+0x2730>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b40      	ldr	r3, [pc, #256]	; (8003818 <menu+0x2730>)
 8003716:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003718:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <menu+0x2730>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d902      	bls.n	8003726 <menu+0x263e>
				yukariValfTmr = 0;
 8003720:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <menu+0x2730>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003726:	f001 f867 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800372a:	2104      	movs	r1, #4
 800372c:	4830      	ldr	r0, [pc, #192]	; (80037f0 <menu+0x2708>)
 800372e:	f005 fc73 	bl	8009018 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d115      	bne.n	8003764 <menu+0x267c>
 8003738:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <menu+0x270c>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <menu+0x2730>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	3b01      	subs	r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b32      	ldr	r3, [pc, #200]	; (8003818 <menu+0x2730>)
 8003750:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <menu+0x2730>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d902      	bls.n	8003760 <menu+0x2678>
		   		yukariValfTmr = 5;
 800375a:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <menu+0x2730>)
 800375c:	2205      	movs	r2, #5
 800375e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003760:	f001 f84a 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003764:	2108      	movs	r1, #8
 8003766:	4822      	ldr	r0, [pc, #136]	; (80037f0 <menu+0x2708>)
 8003768:	f005 fc56 	bl	8009018 <HAL_GPIO_ReadPin>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <menu+0x26a6>
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <menu+0x270c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	f083 0301 	eor.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <menu+0x2730>)
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <menu+0x2710>)
 8003786:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <menu+0x2718>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <menu+0x271c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b17      	cmp	r3, #23
 8003794:	f040 80ac 	bne.w	80038f0 <menu+0x2808>
		if(dilSecim == 0) {
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <menu+0x26ec>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80037a0:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <menu+0x2738>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	2001      	movs	r0, #1
 80037a6:	f004 f911 	bl	80079cc <lcd_print>
 80037aa:	e008      	b.n	80037be <menu+0x26d6>
		} else if(dilSecim == 1) {
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <menu+0x26ec>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d104      	bne.n	80037be <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <menu+0x273c>)
 80037b6:	2101      	movs	r1, #1
 80037b8:	2001      	movs	r0, #1
 80037ba:	f004 f907 	bl	80079cc <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <menu+0x26ec>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d130      	bne.n	8003828 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <menu+0x2728>)
 80037c8:	2101      	movs	r1, #1
 80037ca:	2002      	movs	r0, #2
 80037cc:	f004 f8fe 	bl	80079cc <lcd_print>
 80037d0:	e033      	b.n	800383a <menu+0x2752>
 80037d2:	bf00      	nop
 80037d4:	2000021d 	.word	0x2000021d
 80037d8:	0800d5c4 	.word	0x0800d5c4
 80037dc:	2000020f 	.word	0x2000020f
 80037e0:	0800d568 	.word	0x0800d568
 80037e4:	0800d57c 	.word	0x0800d57c
 80037e8:	0800d58c 	.word	0x0800d58c
 80037ec:	0800d5a0 	.word	0x0800d5a0
 80037f0:	40010800 	.word	0x40010800
 80037f4:	2000022b 	.word	0x2000022b
 80037f8:	20000128 	.word	0x20000128
 80037fc:	20000202 	.word	0x20000202
 8003800:	20000228 	.word	0x20000228
 8003804:	200001fc 	.word	0x200001fc
 8003808:	0800d5d4 	.word	0x0800d5d4
 800380c:	0800d5e8 	.word	0x0800d5e8
 8003810:	0800d288 	.word	0x0800d288
 8003814:	0800d5fc 	.word	0x0800d5fc
 8003818:	20000210 	.word	0x20000210
 800381c:	20000198 	.word	0x20000198
 8003820:	0800d60c 	.word	0x0800d60c
 8003824:	0800d620 	.word	0x0800d620
			} else if(dilSecim == 1) {
 8003828:	4b98      	ldr	r3, [pc, #608]	; (8003a8c <menu+0x29a4>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d104      	bne.n	800383a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003830:	4a97      	ldr	r2, [pc, #604]	; (8003a90 <menu+0x29a8>)
 8003832:	2101      	movs	r1, #1
 8003834:	2002      	movs	r0, #2
 8003836:	f004 f8c9 	bl	80079cc <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 800383a:	4b96      	ldr	r3, [pc, #600]	; (8003a94 <menu+0x29ac>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	220a      	movs	r2, #10
 8003840:	4995      	ldr	r1, [pc, #596]	; (8003a98 <menu+0x29b0>)
 8003842:	4618      	mov	r0, r3
 8003844:	f008 fc14 	bl	800c070 <itoa>
		lcd_print(2,16,snum);
 8003848:	4a93      	ldr	r2, [pc, #588]	; (8003a98 <menu+0x29b0>)
 800384a:	2110      	movs	r1, #16
 800384c:	2002      	movs	r0, #2
 800384e:	f004 f8bd 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003852:	2102      	movs	r1, #2
 8003854:	4891      	ldr	r0, [pc, #580]	; (8003a9c <menu+0x29b4>)
 8003856:	f005 fbdf 	bl	8009018 <HAL_GPIO_ReadPin>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d115      	bne.n	800388c <menu+0x27a4>
 8003860:	4b8f      	ldr	r3, [pc, #572]	; (8003aa0 <menu+0x29b8>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <menu+0x29ac>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b87      	ldr	r3, [pc, #540]	; (8003a94 <menu+0x29ac>)
 8003878:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800387a:	4b86      	ldr	r3, [pc, #536]	; (8003a94 <menu+0x29ac>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b05      	cmp	r3, #5
 8003880:	d902      	bls.n	8003888 <menu+0x27a0>
				asagiValfTmr = 0;
 8003882:	4b84      	ldr	r3, [pc, #528]	; (8003a94 <menu+0x29ac>)
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003888:	f000 ffb6 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800388c:	2104      	movs	r1, #4
 800388e:	4883      	ldr	r0, [pc, #524]	; (8003a9c <menu+0x29b4>)
 8003890:	f005 fbc2 	bl	8009018 <HAL_GPIO_ReadPin>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d115      	bne.n	80038c6 <menu+0x27de>
 800389a:	4b81      	ldr	r3, [pc, #516]	; (8003aa0 <menu+0x29b8>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80038a8:	4b7a      	ldr	r3, [pc, #488]	; (8003a94 <menu+0x29ac>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b78      	ldr	r3, [pc, #480]	; (8003a94 <menu+0x29ac>)
 80038b2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80038b4:	4b77      	ldr	r3, [pc, #476]	; (8003a94 <menu+0x29ac>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d902      	bls.n	80038c2 <menu+0x27da>
		   		asagiValfTmr = 5;
 80038bc:	4b75      	ldr	r3, [pc, #468]	; (8003a94 <menu+0x29ac>)
 80038be:	2205      	movs	r2, #5
 80038c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038c2:	f000 ff99 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c6:	2108      	movs	r1, #8
 80038c8:	4874      	ldr	r0, [pc, #464]	; (8003a9c <menu+0x29b4>)
 80038ca:	f005 fba5 	bl	8009018 <HAL_GPIO_ReadPin>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d10d      	bne.n	80038f0 <menu+0x2808>
 80038d4:	4b72      	ldr	r3, [pc, #456]	; (8003aa0 <menu+0x29b8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80038e2:	4b6c      	ldr	r3, [pc, #432]	; (8003a94 <menu+0x29ac>)
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <menu+0x29bc>)
 80038e8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80038ea:	4b6f      	ldr	r3, [pc, #444]	; (8003aa8 <menu+0x29c0>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80038f0:	4b6e      	ldr	r3, [pc, #440]	; (8003aac <menu+0x29c4>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b18      	cmp	r3, #24
 80038f6:	f040 809d 	bne.w	8003a34 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80038fa:	4b6d      	ldr	r3, [pc, #436]	; (8003ab0 <menu+0x29c8>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d113      	bne.n	800392a <menu+0x2842>
			if(dilSecim == 0) {
 8003902:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <menu+0x29a4>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 800390a:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <menu+0x29cc>)
 800390c:	2101      	movs	r1, #1
 800390e:	2001      	movs	r0, #1
 8003910:	f004 f85c 	bl	80079cc <lcd_print>
 8003914:	e020      	b.n	8003958 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <menu+0x29a4>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11c      	bne.n	8003958 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800391e:	4a66      	ldr	r2, [pc, #408]	; (8003ab8 <menu+0x29d0>)
 8003920:	2101      	movs	r1, #1
 8003922:	2001      	movs	r0, #1
 8003924:	f004 f852 	bl	80079cc <lcd_print>
 8003928:	e016      	b.n	8003958 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800392a:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <menu+0x29c8>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d112      	bne.n	8003958 <menu+0x2870>
			if(dilSecim == 0) {
 8003932:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <menu+0x29a4>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800393a:	4a60      	ldr	r2, [pc, #384]	; (8003abc <menu+0x29d4>)
 800393c:	2101      	movs	r1, #1
 800393e:	2001      	movs	r0, #1
 8003940:	f004 f844 	bl	80079cc <lcd_print>
 8003944:	e008      	b.n	8003958 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003946:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <menu+0x29a4>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d104      	bne.n	8003958 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <menu+0x29d8>)
 8003950:	2101      	movs	r1, #1
 8003952:	2001      	movs	r0, #1
 8003954:	f004 f83a 	bl	80079cc <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003958:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <menu+0x29a4>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <menu+0x29dc>)
 8003962:	2101      	movs	r1, #1
 8003964:	2002      	movs	r0, #2
 8003966:	f004 f831 	bl	80079cc <lcd_print>
 800396a:	e008      	b.n	800397e <menu+0x2896>
			} else if(dilSecim == 1) {
 800396c:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <menu+0x29a4>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d104      	bne.n	800397e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003974:	4a46      	ldr	r2, [pc, #280]	; (8003a90 <menu+0x29a8>)
 8003976:	2101      	movs	r1, #1
 8003978:	2002      	movs	r0, #2
 800397a:	f004 f827 	bl	80079cc <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800397e:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <menu+0x29e0>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	220a      	movs	r2, #10
 8003984:	4944      	ldr	r1, [pc, #272]	; (8003a98 <menu+0x29b0>)
 8003986:	4618      	mov	r0, r3
 8003988:	f008 fb72 	bl	800c070 <itoa>
		lcd_print(2, 16, snum);
 800398c:	4a42      	ldr	r2, [pc, #264]	; (8003a98 <menu+0x29b0>)
 800398e:	2110      	movs	r1, #16
 8003990:	2002      	movs	r0, #2
 8003992:	f004 f81b 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003996:	2102      	movs	r1, #2
 8003998:	4840      	ldr	r0, [pc, #256]	; (8003a9c <menu+0x29b4>)
 800399a:	f005 fb3d 	bl	8009018 <HAL_GPIO_ReadPin>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d115      	bne.n	80039d0 <menu+0x28e8>
 80039a4:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <menu+0x29b8>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	f083 0301 	eor.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00e      	beq.n	80039d0 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80039b2:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <menu+0x29e0>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <menu+0x29e0>)
 80039bc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <menu+0x29e0>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d902      	bls.n	80039cc <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 80039c6:	4b40      	ldr	r3, [pc, #256]	; (8003ac8 <menu+0x29e0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039cc:	f000 ff14 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d0:	2104      	movs	r1, #4
 80039d2:	4832      	ldr	r0, [pc, #200]	; (8003a9c <menu+0x29b4>)
 80039d4:	f005 fb20 	bl	8009018 <HAL_GPIO_ReadPin>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d115      	bne.n	8003a0a <menu+0x2922>
 80039de:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <menu+0x29b8>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80039ec:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <menu+0x29e0>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <menu+0x29e0>)
 80039f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <menu+0x29e0>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d902      	bls.n	8003a06 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003a00:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <menu+0x29e0>)
 8003a02:	2205      	movs	r2, #5
 8003a04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a06:	f000 fef7 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a0a:	2108      	movs	r1, #8
 8003a0c:	4823      	ldr	r0, [pc, #140]	; (8003a9c <menu+0x29b4>)
 8003a0e:	f005 fb03 	bl	8009018 <HAL_GPIO_ReadPin>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10d      	bne.n	8003a34 <menu+0x294c>
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <menu+0x29b8>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f083 0301 	eor.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003a26:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <menu+0x29e0>)
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <menu+0x29bc>)
 8003a2c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <menu+0x29c0>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <menu+0x29c4>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b19      	cmp	r3, #25
 8003a3a:	f040 80c4 	bne.w	8003bc6 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <menu+0x29c8>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d113      	bne.n	8003a6e <menu+0x2986>
			if(dilSecim == 0) {
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <menu+0x29a4>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <menu+0x29e4>)
 8003a50:	2101      	movs	r1, #1
 8003a52:	2001      	movs	r0, #1
 8003a54:	f003 ffba 	bl	80079cc <lcd_print>
 8003a58:	e047      	b.n	8003aea <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <menu+0x29a4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d143      	bne.n	8003aea <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <menu+0x29e8>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	2001      	movs	r0, #1
 8003a68:	f003 ffb0 	bl	80079cc <lcd_print>
 8003a6c:	e03d      	b.n	8003aea <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <menu+0x29c8>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d139      	bne.n	8003aea <menu+0x2a02>
			if(dilSecim == 0) {
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <menu+0x29a4>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d12c      	bne.n	8003ad8 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <menu+0x29ec>)
 8003a80:	2101      	movs	r1, #1
 8003a82:	2001      	movs	r0, #1
 8003a84:	f003 ffa2 	bl	80079cc <lcd_print>
 8003a88:	e02f      	b.n	8003aea <menu+0x2a02>
 8003a8a:	bf00      	nop
 8003a8c:	2000021d 	.word	0x2000021d
 8003a90:	0800d5fc 	.word	0x0800d5fc
 8003a94:	20000211 	.word	0x20000211
 8003a98:	20000198 	.word	0x20000198
 8003a9c:	40010800 	.word	0x40010800
 8003aa0:	2000022b 	.word	0x2000022b
 8003aa4:	20000128 	.word	0x20000128
 8003aa8:	20000228 	.word	0x20000228
 8003aac:	200001fc 	.word	0x200001fc
 8003ab0:	2000020b 	.word	0x2000020b
 8003ab4:	0800d634 	.word	0x0800d634
 8003ab8:	0800d648 	.word	0x0800d648
 8003abc:	0800d65c 	.word	0x0800d65c
 8003ac0:	0800d670 	.word	0x0800d670
 8003ac4:	0800d288 	.word	0x0800d288
 8003ac8:	20000212 	.word	0x20000212
 8003acc:	0800d684 	.word	0x0800d684
 8003ad0:	0800d698 	.word	0x0800d698
 8003ad4:	0800d6ac 	.word	0x0800d6ac
			} else if(dilSecim == 1) {
 8003ad8:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <menu+0x2bc0>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d104      	bne.n	8003aea <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003ae0:	4a72      	ldr	r2, [pc, #456]	; (8003cac <menu+0x2bc4>)
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f003 ff71 	bl	80079cc <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003aea:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <menu+0x2bc0>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003af2:	4a6f      	ldr	r2, [pc, #444]	; (8003cb0 <menu+0x2bc8>)
 8003af4:	2101      	movs	r1, #1
 8003af6:	2002      	movs	r0, #2
 8003af8:	f003 ff68 	bl	80079cc <lcd_print>
 8003afc:	e008      	b.n	8003b10 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003afe:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <menu+0x2bc0>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d104      	bne.n	8003b10 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003b06:	4a6b      	ldr	r2, [pc, #428]	; (8003cb4 <menu+0x2bcc>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f003 ff5e 	bl	80079cc <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003b10:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <menu+0x2bd0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	220a      	movs	r2, #10
 8003b16:	4969      	ldr	r1, [pc, #420]	; (8003cbc <menu+0x2bd4>)
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f008 faa9 	bl	800c070 <itoa>
		lcd_print(2,16,snum);
 8003b1e:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <menu+0x2bd4>)
 8003b20:	2110      	movs	r1, #16
 8003b22:	2002      	movs	r0, #2
 8003b24:	f003 ff52 	bl	80079cc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4865      	ldr	r0, [pc, #404]	; (8003cc0 <menu+0x2bd8>)
 8003b2c:	f005 fa74 	bl	8009018 <HAL_GPIO_ReadPin>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d115      	bne.n	8003b62 <menu+0x2a7a>
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <menu+0x2bdc>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003b44:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <menu+0x2bd0>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <menu+0x2bd0>)
 8003b4e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <menu+0x2bd0>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d902      	bls.n	8003b5e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003b58:	4b57      	ldr	r3, [pc, #348]	; (8003cb8 <menu+0x2bd0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b5e:	f000 fe4b 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b62:	2104      	movs	r1, #4
 8003b64:	4856      	ldr	r0, [pc, #344]	; (8003cc0 <menu+0x2bd8>)
 8003b66:	f005 fa57 	bl	8009018 <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d115      	bne.n	8003b9c <menu+0x2ab4>
 8003b70:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <menu+0x2bdc>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <menu+0x2bd0>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <menu+0x2bd0>)
 8003b88:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	; (8003cb8 <menu+0x2bd0>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d902      	bls.n	8003b98 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003b92:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <menu+0x2bd0>)
 8003b94:	2205      	movs	r2, #5
 8003b96:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b98:	f000 fe2e 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b9c:	2108      	movs	r1, #8
 8003b9e:	4848      	ldr	r0, [pc, #288]	; (8003cc0 <menu+0x2bd8>)
 8003ba0:	f005 fa3a 	bl	8009018 <HAL_GPIO_ReadPin>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d10d      	bne.n	8003bc6 <menu+0x2ade>
 8003baa:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <menu+0x2bdc>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	f083 0301 	eor.w	r3, r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <menu+0x2bd0>)
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <menu+0x2be0>)
 8003bbe:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003bc0:	4b42      	ldr	r3, [pc, #264]	; (8003ccc <menu+0x2be4>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003bc6:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <menu+0x2be8>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b1a      	cmp	r3, #26
 8003bcc:	f040 80ec 	bne.w	8003da8 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <menu+0x2bc0>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003bd8:	4a3e      	ldr	r2, [pc, #248]	; (8003cd4 <menu+0x2bec>)
 8003bda:	2101      	movs	r1, #1
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f003 fef5 	bl	80079cc <lcd_print>
 8003be2:	e008      	b.n	8003bf6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003be4:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <menu+0x2bc0>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d104      	bne.n	8003bf6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003bec:	4a3a      	ldr	r2, [pc, #232]	; (8003cd8 <menu+0x2bf0>)
 8003bee:	2101      	movs	r1, #1
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f003 feeb 	bl	80079cc <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003bf6:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <menu+0x2bf4>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b63      	cmp	r3, #99	; 0x63
 8003bfc:	d91e      	bls.n	8003c3c <menu+0x2b54>
			if(dilSecim == 0) {
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <menu+0x2bc0>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c06:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <menu+0x2bc8>)
 8003c08:	2101      	movs	r1, #1
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	f003 fede 	bl	80079cc <lcd_print>
			}
			if(dilSecim == 1) {
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <menu+0x2bc0>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d104      	bne.n	8003c22 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003c18:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <menu+0x2bcc>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f003 fed5 	bl	80079cc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c22:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <menu+0x2bf4>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	220a      	movs	r2, #10
 8003c28:	4924      	ldr	r1, [pc, #144]	; (8003cbc <menu+0x2bd4>)
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f008 fa20 	bl	800c070 <itoa>
			lcd_print(2,14,snum);
 8003c30:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <menu+0x2bd4>)
 8003c32:	210e      	movs	r1, #14
 8003c34:	2002      	movs	r0, #2
 8003c36:	f003 fec9 	bl	80079cc <lcd_print>
 8003c3a:	e066      	b.n	8003d0a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003c3c:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <menu+0x2bf4>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b09      	cmp	r3, #9
 8003c42:	d923      	bls.n	8003c8c <menu+0x2ba4>
 8003c44:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <menu+0x2bf4>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b63      	cmp	r3, #99	; 0x63
 8003c4a:	d81f      	bhi.n	8003c8c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <menu+0x2bc0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c54:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <menu+0x2bc8>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f003 feb7 	bl	80079cc <lcd_print>
 8003c5e:	e008      	b.n	8003c72 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <menu+0x2bc0>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d104      	bne.n	8003c72 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <menu+0x2bcc>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f003 fead 	bl	80079cc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <menu+0x2bf4>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	220a      	movs	r2, #10
 8003c78:	4910      	ldr	r1, [pc, #64]	; (8003cbc <menu+0x2bd4>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f008 f9f8 	bl	800c070 <itoa>
			lcd_print(2, 15, snum);
 8003c80:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <menu+0x2bd4>)
 8003c82:	210f      	movs	r1, #15
 8003c84:	2002      	movs	r0, #2
 8003c86:	f003 fea1 	bl	80079cc <lcd_print>
 8003c8a:	e03e      	b.n	8003d0a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <menu+0x2bf4>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b09      	cmp	r3, #9
 8003c92:	d83a      	bhi.n	8003d0a <menu+0x2c22>
			if(dilSecim == 0) {
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <menu+0x2bc0>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d121      	bne.n	8003ce0 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <menu+0x2bc8>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	2002      	movs	r0, #2
 8003ca2:	f003 fe93 	bl	80079cc <lcd_print>
 8003ca6:	e024      	b.n	8003cf2 <menu+0x2c0a>
 8003ca8:	2000021d 	.word	0x2000021d
 8003cac:	0800d6c0 	.word	0x0800d6c0
 8003cb0:	0800d288 	.word	0x0800d288
 8003cb4:	0800d5fc 	.word	0x0800d5fc
 8003cb8:	20000213 	.word	0x20000213
 8003cbc:	20000198 	.word	0x20000198
 8003cc0:	40010800 	.word	0x40010800
 8003cc4:	2000022b 	.word	0x2000022b
 8003cc8:	20000128 	.word	0x20000128
 8003ccc:	20000228 	.word	0x20000228
 8003cd0:	200001fc 	.word	0x200001fc
 8003cd4:	0800d6d4 	.word	0x0800d6d4
 8003cd8:	0800d6e8 	.word	0x0800d6e8
 8003cdc:	20000214 	.word	0x20000214
			} else if(dilSecim == 1) {
 8003ce0:	4b8f      	ldr	r3, [pc, #572]	; (8003f20 <menu+0x2e38>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d104      	bne.n	8003cf2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003ce8:	4a8e      	ldr	r2, [pc, #568]	; (8003f24 <menu+0x2e3c>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	2002      	movs	r0, #2
 8003cee:	f003 fe6d 	bl	80079cc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cf2:	4b8d      	ldr	r3, [pc, #564]	; (8003f28 <menu+0x2e40>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	220a      	movs	r2, #10
 8003cf8:	498c      	ldr	r1, [pc, #560]	; (8003f2c <menu+0x2e44>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f008 f9b8 	bl	800c070 <itoa>
			lcd_print(2, 16, snum);
 8003d00:	4a8a      	ldr	r2, [pc, #552]	; (8003f2c <menu+0x2e44>)
 8003d02:	2110      	movs	r1, #16
 8003d04:	2002      	movs	r0, #2
 8003d06:	f003 fe61 	bl	80079cc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4888      	ldr	r0, [pc, #544]	; (8003f30 <menu+0x2e48>)
 8003d0e:	f005 f983 	bl	8009018 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d115      	bne.n	8003d44 <menu+0x2c5c>
 8003d18:	4b86      	ldr	r3, [pc, #536]	; (8003f34 <menu+0x2e4c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003d26:	4b80      	ldr	r3, [pc, #512]	; (8003f28 <menu+0x2e40>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4b7e      	ldr	r3, [pc, #504]	; (8003f28 <menu+0x2e40>)
 8003d30:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003d32:	4b7d      	ldr	r3, [pc, #500]	; (8003f28 <menu+0x2e40>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2bb4      	cmp	r3, #180	; 0xb4
 8003d38:	d902      	bls.n	8003d40 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <menu+0x2e40>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d40:	f000 fd5a 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d44:	2104      	movs	r1, #4
 8003d46:	487a      	ldr	r0, [pc, #488]	; (8003f30 <menu+0x2e48>)
 8003d48:	f005 f966 	bl	8009018 <HAL_GPIO_ReadPin>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d115      	bne.n	8003d7e <menu+0x2c96>
 8003d52:	4b78      	ldr	r3, [pc, #480]	; (8003f34 <menu+0x2e4c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003d60:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <menu+0x2e40>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	4b6f      	ldr	r3, [pc, #444]	; (8003f28 <menu+0x2e40>)
 8003d6a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003d6c:	4b6e      	ldr	r3, [pc, #440]	; (8003f28 <menu+0x2e40>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2bb5      	cmp	r3, #181	; 0xb5
 8003d72:	d902      	bls.n	8003d7a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003d74:	4b6c      	ldr	r3, [pc, #432]	; (8003f28 <menu+0x2e40>)
 8003d76:	22b4      	movs	r2, #180	; 0xb4
 8003d78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d7a:	f000 fd3d 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d7e:	2108      	movs	r1, #8
 8003d80:	486b      	ldr	r0, [pc, #428]	; (8003f30 <menu+0x2e48>)
 8003d82:	f005 f949 	bl	8009018 <HAL_GPIO_ReadPin>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10d      	bne.n	8003da8 <menu+0x2cc0>
 8003d8c:	4b69      	ldr	r3, [pc, #420]	; (8003f34 <menu+0x2e4c>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f083 0301 	eor.w	r3, r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <menu+0x2e40>)
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <menu+0x2e50>)
 8003da0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003da2:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <menu+0x2e54>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003da8:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <menu+0x2e58>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b1b      	cmp	r3, #27
 8003dae:	f040 8083 	bne.w	8003eb8 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003db2:	4a64      	ldr	r2, [pc, #400]	; (8003f44 <menu+0x2e5c>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	2001      	movs	r0, #1
 8003db8:	f003 fe08 	bl	80079cc <lcd_print>

		if(buzzer == 0) {
 8003dbc:	4b62      	ldr	r3, [pc, #392]	; (8003f48 <menu+0x2e60>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d113      	bne.n	8003dec <menu+0x2d04>
			if(dilSecim == 0) {
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <menu+0x2e38>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003dcc:	4a5f      	ldr	r2, [pc, #380]	; (8003f4c <menu+0x2e64>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f003 fdfb 	bl	80079cc <lcd_print>
 8003dd6:	e020      	b.n	8003e1a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <menu+0x2e38>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d11c      	bne.n	8003e1a <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003de0:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <menu+0x2e68>)
 8003de2:	2101      	movs	r1, #1
 8003de4:	2002      	movs	r0, #2
 8003de6:	f003 fdf1 	bl	80079cc <lcd_print>
 8003dea:	e016      	b.n	8003e1a <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003dec:	4b56      	ldr	r3, [pc, #344]	; (8003f48 <menu+0x2e60>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d112      	bne.n	8003e1a <menu+0x2d32>
			if(dilSecim == 0) {
 8003df4:	4b4a      	ldr	r3, [pc, #296]	; (8003f20 <menu+0x2e38>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003dfc:	4a55      	ldr	r2, [pc, #340]	; (8003f54 <menu+0x2e6c>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	2002      	movs	r0, #2
 8003e02:	f003 fde3 	bl	80079cc <lcd_print>
 8003e06:	e008      	b.n	8003e1a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e08:	4b45      	ldr	r3, [pc, #276]	; (8003f20 <menu+0x2e38>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d104      	bne.n	8003e1a <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003e10:	4a51      	ldr	r2, [pc, #324]	; (8003f58 <menu+0x2e70>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	2002      	movs	r0, #2
 8003e16:	f003 fdd9 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	4844      	ldr	r0, [pc, #272]	; (8003f30 <menu+0x2e48>)
 8003e1e:	f005 f8fb 	bl	8009018 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d115      	bne.n	8003e54 <menu+0x2d6c>
 8003e28:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <menu+0x2e4c>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	f083 0301 	eor.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <menu+0x2e60>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <menu+0x2e60>)
 8003e40:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <menu+0x2e60>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d902      	bls.n	8003e50 <menu+0x2d68>
				buzzer = 0;
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <menu+0x2e60>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e50:	f000 fcd2 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e54:	2104      	movs	r1, #4
 8003e56:	4836      	ldr	r0, [pc, #216]	; (8003f30 <menu+0x2e48>)
 8003e58:	f005 f8de 	bl	8009018 <HAL_GPIO_ReadPin>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d115      	bne.n	8003e8e <menu+0x2da6>
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <menu+0x2e4c>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	f083 0301 	eor.w	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <menu+0x2da6>
			buzzer = buzzer - 1;
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <menu+0x2e60>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <menu+0x2e60>)
 8003e7a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <menu+0x2e60>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <menu+0x2da2>
		   		buzzer = 1;
 8003e84:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <menu+0x2e60>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e8a:	f000 fcb5 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e8e:	2108      	movs	r1, #8
 8003e90:	4827      	ldr	r0, [pc, #156]	; (8003f30 <menu+0x2e48>)
 8003e92:	f005 f8c1 	bl	8009018 <HAL_GPIO_ReadPin>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10d      	bne.n	8003eb8 <menu+0x2dd0>
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <menu+0x2e4c>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <menu+0x2e60>)
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <menu+0x2e50>)
 8003eb0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <menu+0x2e54>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <menu+0x2e58>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b1c      	cmp	r3, #28
 8003ebe:	f040 80ab 	bne.w	8004018 <menu+0x2f30>
		calismaSayModu = 0;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <menu+0x2e74>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <menu+0x2e78>)
 8003eca:	2101      	movs	r1, #1
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f003 fd7d 	bl	80079cc <lcd_print>

		if(demoMode == 0) {
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <menu+0x2e7c>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d113      	bne.n	8003f02 <menu+0x2e1a>
			if(dilSecim == 0) {
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <menu+0x2e38>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <menu+0x2e64>)
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	f003 fd70 	bl	80079cc <lcd_print>
 8003eec:	e045      	b.n	8003f7a <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <menu+0x2e38>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d141      	bne.n	8003f7a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <menu+0x2e68>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2002      	movs	r0, #2
 8003efc:	f003 fd66 	bl	80079cc <lcd_print>
 8003f00:	e03b      	b.n	8003f7a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <menu+0x2e7c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d137      	bne.n	8003f7a <menu+0x2e92>
			if(dilSecim == 0){
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <menu+0x2e38>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d12a      	bne.n	8003f68 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <menu+0x2e6c>)
 8003f14:	2101      	movs	r1, #1
 8003f16:	2002      	movs	r0, #2
 8003f18:	f003 fd58 	bl	80079cc <lcd_print>
 8003f1c:	e02d      	b.n	8003f7a <menu+0x2e92>
 8003f1e:	bf00      	nop
 8003f20:	2000021d 	.word	0x2000021d
 8003f24:	0800d5fc 	.word	0x0800d5fc
 8003f28:	20000214 	.word	0x20000214
 8003f2c:	20000198 	.word	0x20000198
 8003f30:	40010800 	.word	0x40010800
 8003f34:	2000022b 	.word	0x2000022b
 8003f38:	20000128 	.word	0x20000128
 8003f3c:	20000228 	.word	0x20000228
 8003f40:	200001fc 	.word	0x200001fc
 8003f44:	0800d6fc 	.word	0x0800d6fc
 8003f48:	20000218 	.word	0x20000218
 8003f4c:	0800d024 	.word	0x0800d024
 8003f50:	0800d038 	.word	0x0800d038
 8003f54:	0800d084 	.word	0x0800d084
 8003f58:	0800d098 	.word	0x0800d098
 8003f5c:	2000021c 	.word	0x2000021c
 8003f60:	0800d710 	.word	0x0800d710
 8003f64:	2000021a 	.word	0x2000021a
			} else if(dilSecim == 1) {
 8003f68:	4b71      	ldr	r3, [pc, #452]	; (8004130 <menu+0x3048>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d104      	bne.n	8003f7a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003f70:	4a70      	ldr	r2, [pc, #448]	; (8004134 <menu+0x304c>)
 8003f72:	2101      	movs	r1, #1
 8003f74:	2002      	movs	r0, #2
 8003f76:	f003 fd29 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	486e      	ldr	r0, [pc, #440]	; (8004138 <menu+0x3050>)
 8003f7e:	f005 f84b 	bl	8009018 <HAL_GPIO_ReadPin>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d115      	bne.n	8003fb4 <menu+0x2ecc>
 8003f88:	4b6c      	ldr	r3, [pc, #432]	; (800413c <menu+0x3054>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f083 0301 	eor.w	r3, r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00e      	beq.n	8003fb4 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003f96:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <menu+0x3058>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b68      	ldr	r3, [pc, #416]	; (8004140 <menu+0x3058>)
 8003fa0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003fa2:	4b67      	ldr	r3, [pc, #412]	; (8004140 <menu+0x3058>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d902      	bls.n	8003fb0 <menu+0x2ec8>
				demoMode = 0;
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <menu+0x3058>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fb0:	f000 fc22 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4860      	ldr	r0, [pc, #384]	; (8004138 <menu+0x3050>)
 8003fb8:	f005 f82e 	bl	8009018 <HAL_GPIO_ReadPin>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d115      	bne.n	8003fee <menu+0x2f06>
 8003fc2:	4b5e      	ldr	r3, [pc, #376]	; (800413c <menu+0x3054>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	f083 0301 	eor.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <menu+0x2f06>
			demoMode = demoMode - 1;
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <menu+0x3058>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <menu+0x3058>)
 8003fda:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003fdc:	4b58      	ldr	r3, [pc, #352]	; (8004140 <menu+0x3058>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <menu+0x2f02>
		   		demoMode = 1;
 8003fe4:	4b56      	ldr	r3, [pc, #344]	; (8004140 <menu+0x3058>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fea:	f000 fc05 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fee:	2108      	movs	r1, #8
 8003ff0:	4851      	ldr	r0, [pc, #324]	; (8004138 <menu+0x3050>)
 8003ff2:	f005 f811 	bl	8009018 <HAL_GPIO_ReadPin>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10d      	bne.n	8004018 <menu+0x2f30>
 8003ffc:	4b4f      	ldr	r3, [pc, #316]	; (800413c <menu+0x3054>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f083 0301 	eor.w	r3, r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <menu+0x2f30>
			eepromData[26] = demoMode;
 800400a:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <menu+0x3058>)
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	4b4d      	ldr	r3, [pc, #308]	; (8004144 <menu+0x305c>)
 8004010:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004012:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <menu+0x3060>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <menu+0x3064>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b1d      	cmp	r3, #29
 800401e:	f040 8132 	bne.w	8004286 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004022:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <menu+0x3068>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d113      	bne.n	8004052 <menu+0x2f6a>
 800402a:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <menu+0x306c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <menu+0x2f6a>
 8004032:	4b49      	ldr	r3, [pc, #292]	; (8004158 <menu+0x3070>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <menu+0x2f6a>
 800403a:	4b48      	ldr	r3, [pc, #288]	; (800415c <menu+0x3074>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <menu+0x2f6a>
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <menu+0x3078>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800404a:	4b46      	ldr	r3, [pc, #280]	; (8004164 <menu+0x307c>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e002      	b.n	8004058 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004052:	4b44      	ldr	r3, [pc, #272]	; (8004164 <menu+0x307c>)
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <menu+0x3080>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d154      	bne.n	800410a <menu+0x3022>
			if(dilSecim == 0) {
 8004060:	4b33      	ldr	r3, [pc, #204]	; (8004130 <menu+0x3048>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004068:	4a40      	ldr	r2, [pc, #256]	; (800416c <menu+0x3084>)
 800406a:	2101      	movs	r1, #1
 800406c:	2001      	movs	r0, #1
 800406e:	f003 fcad 	bl	80079cc <lcd_print>
 8004072:	e008      	b.n	8004086 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004074:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <menu+0x3048>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d104      	bne.n	8004086 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800407c:	4a3c      	ldr	r2, [pc, #240]	; (8004170 <menu+0x3088>)
 800407e:	2101      	movs	r1, #1
 8004080:	2001      	movs	r0, #1
 8004082:	f003 fca3 	bl	80079cc <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <menu+0x3078>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	220a      	movs	r2, #10
 800408c:	4939      	ldr	r1, [pc, #228]	; (8004174 <menu+0x308c>)
 800408e:	4618      	mov	r0, r3
 8004090:	f007 ffee 	bl	800c070 <itoa>
			lcd_print(2, 12, snum);
 8004094:	4a37      	ldr	r2, [pc, #220]	; (8004174 <menu+0x308c>)
 8004096:	210c      	movs	r1, #12
 8004098:	2002      	movs	r0, #2
 800409a:	f003 fc97 	bl	80079cc <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800409e:	4b2f      	ldr	r3, [pc, #188]	; (800415c <menu+0x3074>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	220a      	movs	r2, #10
 80040a4:	4933      	ldr	r1, [pc, #204]	; (8004174 <menu+0x308c>)
 80040a6:	4618      	mov	r0, r3
 80040a8:	f007 ffe2 	bl	800c070 <itoa>
			lcd_print(2, 13, snum);
 80040ac:	4a31      	ldr	r2, [pc, #196]	; (8004174 <menu+0x308c>)
 80040ae:	210d      	movs	r1, #13
 80040b0:	2002      	movs	r0, #2
 80040b2:	f003 fc8b 	bl	80079cc <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <menu+0x3070>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	220a      	movs	r2, #10
 80040bc:	492d      	ldr	r1, [pc, #180]	; (8004174 <menu+0x308c>)
 80040be:	4618      	mov	r0, r3
 80040c0:	f007 ffd6 	bl	800c070 <itoa>
			lcd_print(2, 14, snum);
 80040c4:	4a2b      	ldr	r2, [pc, #172]	; (8004174 <menu+0x308c>)
 80040c6:	210e      	movs	r1, #14
 80040c8:	2002      	movs	r0, #2
 80040ca:	f003 fc7f 	bl	80079cc <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <menu+0x306c>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	220a      	movs	r2, #10
 80040d4:	4927      	ldr	r1, [pc, #156]	; (8004174 <menu+0x308c>)
 80040d6:	4618      	mov	r0, r3
 80040d8:	f007 ffca 	bl	800c070 <itoa>
			lcd_print(2, 15, snum);
 80040dc:	4a25      	ldr	r2, [pc, #148]	; (8004174 <menu+0x308c>)
 80040de:	210f      	movs	r1, #15
 80040e0:	2002      	movs	r0, #2
 80040e2:	f003 fc73 	bl	80079cc <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80040e6:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <menu+0x3068>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	220a      	movs	r2, #10
 80040ec:	4921      	ldr	r1, [pc, #132]	; (8004174 <menu+0x308c>)
 80040ee:	4618      	mov	r0, r3
 80040f0:	f007 ffbe 	bl	800c070 <itoa>
			lcd_print(2, 16, snum);
 80040f4:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <menu+0x308c>)
 80040f6:	2110      	movs	r1, #16
 80040f8:	2002      	movs	r0, #2
 80040fa:	f003 fc67 	bl	80079cc <lcd_print>

			lcd_print(2, 1, "           ");
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <menu+0x3090>)
 8004100:	2101      	movs	r1, #1
 8004102:	2002      	movs	r0, #2
 8004104:	f003 fc62 	bl	80079cc <lcd_print>
 8004108:	e048      	b.n	800419c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <menu+0x3080>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d144      	bne.n	800419c <menu+0x30b4>
			if(dilSecim == 0) {
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <menu+0x3048>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d132      	bne.n	8004180 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800411a:	4a14      	ldr	r2, [pc, #80]	; (800416c <menu+0x3084>)
 800411c:	2101      	movs	r1, #1
 800411e:	2001      	movs	r0, #1
 8004120:	f003 fc54 	bl	80079cc <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <menu+0x3094>)
 8004126:	2101      	movs	r1, #1
 8004128:	2002      	movs	r0, #2
 800412a:	f003 fc4f 	bl	80079cc <lcd_print>
 800412e:	e035      	b.n	800419c <menu+0x30b4>
 8004130:	2000021d 	.word	0x2000021d
 8004134:	0800d098 	.word	0x0800d098
 8004138:	40010800 	.word	0x40010800
 800413c:	2000022b 	.word	0x2000022b
 8004140:	2000021a 	.word	0x2000021a
 8004144:	20000128 	.word	0x20000128
 8004148:	20000228 	.word	0x20000228
 800414c:	200001fc 	.word	0x200001fc
 8004150:	200001f9 	.word	0x200001f9
 8004154:	200001fa 	.word	0x200001fa
 8004158:	20000008 	.word	0x20000008
 800415c:	20000009 	.word	0x20000009
 8004160:	200001fb 	.word	0x200001fb
 8004164:	2000023d 	.word	0x2000023d
 8004168:	2000021c 	.word	0x2000021c
 800416c:	0800d720 	.word	0x0800d720
 8004170:	0800d734 	.word	0x0800d734
 8004174:	20000198 	.word	0x20000198
 8004178:	0800d748 	.word	0x0800d748
 800417c:	0800d754 	.word	0x0800d754
			} else if(dilSecim == 1) {
 8004180:	4b94      	ldr	r3, [pc, #592]	; (80043d4 <menu+0x32ec>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d109      	bne.n	800419c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004188:	4a93      	ldr	r2, [pc, #588]	; (80043d8 <menu+0x32f0>)
 800418a:	2101      	movs	r1, #1
 800418c:	2001      	movs	r0, #1
 800418e:	f003 fc1d 	bl	80079cc <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004192:	4a92      	ldr	r2, [pc, #584]	; (80043dc <menu+0x32f4>)
 8004194:	2101      	movs	r1, #1
 8004196:	2002      	movs	r0, #2
 8004198:	f003 fc18 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800419c:	2102      	movs	r1, #2
 800419e:	4890      	ldr	r0, [pc, #576]	; (80043e0 <menu+0x32f8>)
 80041a0:	f004 ff3a 	bl	8009018 <HAL_GPIO_ReadPin>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d119      	bne.n	80041de <menu+0x30f6>
 80041aa:	4b8e      	ldr	r3, [pc, #568]	; (80043e4 <menu+0x32fc>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	f083 0301 	eor.w	r3, r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <menu+0x30f6>
 80041b8:	4b8b      	ldr	r3, [pc, #556]	; (80043e8 <menu+0x3300>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80041c0:	4b8a      	ldr	r3, [pc, #552]	; (80043ec <menu+0x3304>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	4b88      	ldr	r3, [pc, #544]	; (80043ec <menu+0x3304>)
 80041ca:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80041cc:	4b87      	ldr	r3, [pc, #540]	; (80043ec <menu+0x3304>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d902      	bls.n	80041da <menu+0x30f2>
				calismaSayModu = 0;
 80041d4:	4b85      	ldr	r3, [pc, #532]	; (80043ec <menu+0x3304>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041da:	f000 fb0d 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80041de:	2104      	movs	r1, #4
 80041e0:	487f      	ldr	r0, [pc, #508]	; (80043e0 <menu+0x32f8>)
 80041e2:	f004 ff19 	bl	8009018 <HAL_GPIO_ReadPin>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d119      	bne.n	8004220 <menu+0x3138>
 80041ec:	4b7d      	ldr	r3, [pc, #500]	; (80043e4 <menu+0x32fc>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f083 0301 	eor.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d012      	beq.n	8004220 <menu+0x3138>
 80041fa:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <menu+0x3300>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00e      	beq.n	8004220 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004202:	4b7a      	ldr	r3, [pc, #488]	; (80043ec <menu+0x3304>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3b01      	subs	r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b78      	ldr	r3, [pc, #480]	; (80043ec <menu+0x3304>)
 800420c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800420e:	4b77      	ldr	r3, [pc, #476]	; (80043ec <menu+0x3304>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <menu+0x3134>
		   		calismaSayModu = 1;
 8004216:	4b75      	ldr	r3, [pc, #468]	; (80043ec <menu+0x3304>)
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800421c:	f000 faec 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004220:	2108      	movs	r1, #8
 8004222:	486f      	ldr	r0, [pc, #444]	; (80043e0 <menu+0x32f8>)
 8004224:	f004 fef8 	bl	8009018 <HAL_GPIO_ReadPin>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d12b      	bne.n	8004286 <menu+0x319e>
 800422e:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <menu+0x32fc>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	f083 0301 	eor.w	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d024      	beq.n	8004286 <menu+0x319e>
			eepromData[32] = 0;
 800423c:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <menu+0x3308>)
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <menu+0x3308>)
 8004246:	2200      	movs	r2, #0
 8004248:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800424a:	4b69      	ldr	r3, [pc, #420]	; (80043f0 <menu+0x3308>)
 800424c:	2200      	movs	r2, #0
 800424e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004250:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <menu+0x3308>)
 8004252:	2200      	movs	r2, #0
 8004254:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004256:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <menu+0x3308>)
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800425c:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <menu+0x330c>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <menu+0x3310>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004268:	4b64      	ldr	r3, [pc, #400]	; (80043fc <menu+0x3314>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800426e:	4b64      	ldr	r3, [pc, #400]	; (8004400 <menu+0x3318>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004274:	4b63      	ldr	r3, [pc, #396]	; (8004404 <menu+0x331c>)
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800427a:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <menu+0x3304>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004280:	4b61      	ldr	r3, [pc, #388]	; (8004408 <menu+0x3320>)
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004286:	4b61      	ldr	r3, [pc, #388]	; (800440c <menu+0x3324>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b1e      	cmp	r3, #30
 800428c:	d16f      	bne.n	800436e <menu+0x3286>
		calismaSayModu = 0;
 800428e:	4b57      	ldr	r3, [pc, #348]	; (80043ec <menu+0x3304>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004294:	4b4f      	ldr	r3, [pc, #316]	; (80043d4 <menu+0x32ec>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800429c:	4a5c      	ldr	r2, [pc, #368]	; (8004410 <menu+0x3328>)
 800429e:	2101      	movs	r1, #1
 80042a0:	2001      	movs	r0, #1
 80042a2:	f003 fb93 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80042a6:	4a5b      	ldr	r2, [pc, #364]	; (8004414 <menu+0x332c>)
 80042a8:	2101      	movs	r1, #1
 80042aa:	2002      	movs	r0, #2
 80042ac:	f003 fb8e 	bl	80079cc <lcd_print>
 80042b0:	e00d      	b.n	80042ce <menu+0x31e6>
		} else if(dilSecim == 1) {
 80042b2:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <menu+0x32ec>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d109      	bne.n	80042ce <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <menu+0x3330>)
 80042bc:	2101      	movs	r1, #1
 80042be:	2001      	movs	r0, #1
 80042c0:	f003 fb84 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80042c4:	4a55      	ldr	r2, [pc, #340]	; (800441c <menu+0x3334>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	2002      	movs	r0, #2
 80042ca:	f003 fb7f 	bl	80079cc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ce:	2102      	movs	r1, #2
 80042d0:	4843      	ldr	r0, [pc, #268]	; (80043e0 <menu+0x32f8>)
 80042d2:	f004 fea1 	bl	8009018 <HAL_GPIO_ReadPin>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d115      	bne.n	8004308 <menu+0x3220>
 80042dc:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <menu+0x32fc>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f083 0301 	eor.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00e      	beq.n	8004308 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80042ea:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <menu+0x32ec>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b38      	ldr	r3, [pc, #224]	; (80043d4 <menu+0x32ec>)
 80042f4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <menu+0x32ec>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d902      	bls.n	8004304 <menu+0x321c>
				dilSecim = 0;
 80042fe:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <menu+0x32ec>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004304:	f000 fa78 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004308:	2104      	movs	r1, #4
 800430a:	4835      	ldr	r0, [pc, #212]	; (80043e0 <menu+0x32f8>)
 800430c:	f004 fe84 	bl	8009018 <HAL_GPIO_ReadPin>
 8004310:	4603      	mov	r3, r0
 8004312:	2b01      	cmp	r3, #1
 8004314:	d115      	bne.n	8004342 <menu+0x325a>
 8004316:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <menu+0x32fc>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	f083 0301 	eor.w	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00e      	beq.n	8004342 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004324:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <menu+0x32ec>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	3b01      	subs	r3, #1
 800432a:	b2da      	uxtb	r2, r3
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <menu+0x32ec>)
 800432e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <menu+0x32ec>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <menu+0x3256>
		   		dilSecim = 1;
 8004338:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <menu+0x32ec>)
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800433e:	f000 fa5b 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004342:	2108      	movs	r1, #8
 8004344:	4826      	ldr	r0, [pc, #152]	; (80043e0 <menu+0x32f8>)
 8004346:	f004 fe67 	bl	8009018 <HAL_GPIO_ReadPin>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10e      	bne.n	800436e <menu+0x3286>
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <menu+0x32fc>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	f083 0301 	eor.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <menu+0x3286>
			eepromData[33] = dilSecim;
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <menu+0x32ec>)
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <menu+0x3308>)
 8004364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <menu+0x3320>)
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800436e:	4b27      	ldr	r3, [pc, #156]	; (800440c <menu+0x3324>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b1f      	cmp	r3, #31
 8004374:	f040 80b7 	bne.w	80044e6 <menu+0x33fe>
		calismaSayModu = 0;
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <menu+0x3304>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800437e:	4a28      	ldr	r2, [pc, #160]	; (8004420 <menu+0x3338>)
 8004380:	2101      	movs	r1, #1
 8004382:	2001      	movs	r0, #1
 8004384:	f003 fb22 	bl	80079cc <lcd_print>

		if(iotMode == 0) {
 8004388:	4b26      	ldr	r3, [pc, #152]	; (8004424 <menu+0x333c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d113      	bne.n	80043b8 <menu+0x32d0>
			if(dilSecim == 0) {
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <menu+0x32ec>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004398:	4a23      	ldr	r2, [pc, #140]	; (8004428 <menu+0x3340>)
 800439a:	2101      	movs	r1, #1
 800439c:	2002      	movs	r0, #2
 800439e:	f003 fb15 	bl	80079cc <lcd_print>
 80043a2:	e050      	b.n	8004446 <menu+0x335e>
			} else if(dilSecim == 1) {
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <menu+0x32ec>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d14c      	bne.n	8004446 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <menu+0x3344>)
 80043ae:	2101      	movs	r1, #1
 80043b0:	2002      	movs	r0, #2
 80043b2:	f003 fb0b 	bl	80079cc <lcd_print>
 80043b6:	e046      	b.n	8004446 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <menu+0x333c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d142      	bne.n	8004446 <menu+0x335e>
			if(dilSecim == 0) {
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <menu+0x32ec>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d135      	bne.n	8004434 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <menu+0x3348>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	2002      	movs	r0, #2
 80043ce:	f003 fafd 	bl	80079cc <lcd_print>
 80043d2:	e038      	b.n	8004446 <menu+0x335e>
 80043d4:	2000021d 	.word	0x2000021d
 80043d8:	0800d734 	.word	0x0800d734
 80043dc:	0800d768 	.word	0x0800d768
 80043e0:	40010800 	.word	0x40010800
 80043e4:	2000022b 	.word	0x2000022b
 80043e8:	2000023d 	.word	0x2000023d
 80043ec:	2000021c 	.word	0x2000021c
 80043f0:	20000128 	.word	0x20000128
 80043f4:	200001fb 	.word	0x200001fb
 80043f8:	20000009 	.word	0x20000009
 80043fc:	20000008 	.word	0x20000008
 8004400:	200001fa 	.word	0x200001fa
 8004404:	200001f9 	.word	0x200001f9
 8004408:	20000228 	.word	0x20000228
 800440c:	200001fc 	.word	0x200001fc
 8004410:	0800d77c 	.word	0x0800d77c
 8004414:	0800d790 	.word	0x0800d790
 8004418:	0800d7a4 	.word	0x0800d7a4
 800441c:	0800d7b8 	.word	0x0800d7b8
 8004420:	0800d7cc 	.word	0x0800d7cc
 8004424:	2000021b 	.word	0x2000021b
 8004428:	0800d024 	.word	0x0800d024
 800442c:	0800d038 	.word	0x0800d038
 8004430:	0800d084 	.word	0x0800d084
			} else if(dilSecim == 1) {
 8004434:	4bae      	ldr	r3, [pc, #696]	; (80046f0 <menu+0x3608>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d104      	bne.n	8004446 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 800443c:	4aad      	ldr	r2, [pc, #692]	; (80046f4 <menu+0x360c>)
 800443e:	2101      	movs	r1, #1
 8004440:	2002      	movs	r0, #2
 8004442:	f003 fac3 	bl	80079cc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004446:	2102      	movs	r1, #2
 8004448:	48ab      	ldr	r0, [pc, #684]	; (80046f8 <menu+0x3610>)
 800444a:	f004 fde5 	bl	8009018 <HAL_GPIO_ReadPin>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d115      	bne.n	8004480 <menu+0x3398>
 8004454:	4ba9      	ldr	r3, [pc, #676]	; (80046fc <menu+0x3614>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <menu+0x3398>
			iotMode = iotMode + 1;
 8004462:	4ba7      	ldr	r3, [pc, #668]	; (8004700 <menu+0x3618>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4ba5      	ldr	r3, [pc, #660]	; (8004700 <menu+0x3618>)
 800446c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800446e:	4ba4      	ldr	r3, [pc, #656]	; (8004700 <menu+0x3618>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d902      	bls.n	800447c <menu+0x3394>
				iotMode = 0;
 8004476:	4ba2      	ldr	r3, [pc, #648]	; (8004700 <menu+0x3618>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800447c:	f000 f9bc 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004480:	2104      	movs	r1, #4
 8004482:	489d      	ldr	r0, [pc, #628]	; (80046f8 <menu+0x3610>)
 8004484:	f004 fdc8 	bl	8009018 <HAL_GPIO_ReadPin>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d115      	bne.n	80044ba <menu+0x33d2>
 800448e:	4b9b      	ldr	r3, [pc, #620]	; (80046fc <menu+0x3614>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	f083 0301 	eor.w	r3, r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <menu+0x33d2>
			iotMode = iotMode - 1;
 800449c:	4b98      	ldr	r3, [pc, #608]	; (8004700 <menu+0x3618>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b96      	ldr	r3, [pc, #600]	; (8004700 <menu+0x3618>)
 80044a6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80044a8:	4b95      	ldr	r3, [pc, #596]	; (8004700 <menu+0x3618>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <menu+0x33ce>
		   		iotMode = 1;
 80044b0:	4b93      	ldr	r3, [pc, #588]	; (8004700 <menu+0x3618>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80044b6:	f000 f99f 	bl	80047f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ba:	2108      	movs	r1, #8
 80044bc:	488e      	ldr	r0, [pc, #568]	; (80046f8 <menu+0x3610>)
 80044be:	f004 fdab 	bl	8009018 <HAL_GPIO_ReadPin>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10e      	bne.n	80044e6 <menu+0x33fe>
 80044c8:	4b8c      	ldr	r3, [pc, #560]	; (80046fc <menu+0x3614>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <menu+0x33fe>
			eepromData[48] = iotMode;
 80044d6:	4b8a      	ldr	r3, [pc, #552]	; (8004700 <menu+0x3618>)
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	4b8a      	ldr	r3, [pc, #552]	; (8004704 <menu+0x361c>)
 80044dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80044e0:	4b89      	ldr	r3, [pc, #548]	; (8004708 <menu+0x3620>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80044e6:	4b89      	ldr	r3, [pc, #548]	; (800470c <menu+0x3624>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d134      	bne.n	8004558 <menu+0x3470>
		calismaSayModu = 0;
 80044ee:	4b88      	ldr	r3, [pc, #544]	; (8004710 <menu+0x3628>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044f4:	4b7e      	ldr	r3, [pc, #504]	; (80046f0 <menu+0x3608>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80044fc:	4a85      	ldr	r2, [pc, #532]	; (8004714 <menu+0x362c>)
 80044fe:	2101      	movs	r1, #1
 8004500:	2001      	movs	r0, #1
 8004502:	f003 fa63 	bl	80079cc <lcd_print>
 8004506:	e004      	b.n	8004512 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004508:	4a83      	ldr	r2, [pc, #524]	; (8004718 <menu+0x3630>)
 800450a:	2101      	movs	r1, #1
 800450c:	2001      	movs	r0, #1
 800450e:	f003 fa5d 	bl	80079cc <lcd_print>
		}

		//lcd_print(2, 1, machineID);
		//lcd_print(2, 13, "    ");

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004512:	2102      	movs	r1, #2
 8004514:	4878      	ldr	r0, [pc, #480]	; (80046f8 <menu+0x3610>)
 8004516:	f004 fd7f 	bl	8009018 <HAL_GPIO_ReadPin>
 800451a:	4603      	mov	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d11b      	bne.n	8004558 <menu+0x3470>
 8004520:	2104      	movs	r1, #4
 8004522:	4875      	ldr	r0, [pc, #468]	; (80046f8 <menu+0x3610>)
 8004524:	f004 fd78 	bl	8009018 <HAL_GPIO_ReadPin>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d114      	bne.n	8004558 <menu+0x3470>
 800452e:	4b73      	ldr	r3, [pc, #460]	; (80046fc <menu+0x3614>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	f083 0301 	eor.w	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <menu+0x3470>
			takeMachineID();
 800453c:	f002 fa68 	bl	8006a10 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004540:	4a76      	ldr	r2, [pc, #472]	; (800471c <menu+0x3634>)
 8004542:	2101      	movs	r1, #1
 8004544:	2002      	movs	r0, #2
 8004546:	f003 fa41 	bl	80079cc <lcd_print>
			lcd_print(2, 13, "    ");
 800454a:	4a75      	ldr	r2, [pc, #468]	; (8004720 <menu+0x3638>)
 800454c:	210d      	movs	r1, #13
 800454e:	2002      	movs	r0, #2
 8004550:	f003 fa3c 	bl	80079cc <lcd_print>

			bekle();
 8004554:	f000 f950 	bl	80047f8 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004558:	4b6c      	ldr	r3, [pc, #432]	; (800470c <menu+0x3624>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b21      	cmp	r3, #33	; 0x21
 800455e:	d136      	bne.n	80045ce <menu+0x34e6>
		calismaSayModu = 0;
 8004560:	4b6b      	ldr	r3, [pc, #428]	; (8004710 <menu+0x3628>)
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004566:	486f      	ldr	r0, [pc, #444]	; (8004724 <menu+0x363c>)
 8004568:	f7fb fe5c 	bl	8000224 <strlen>
 800456c:	4603      	mov	r3, r0
 800456e:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004570:	4a6d      	ldr	r2, [pc, #436]	; (8004728 <menu+0x3640>)
 8004572:	2101      	movs	r1, #1
 8004574:	2001      	movs	r0, #1
 8004576:	f003 fa29 	bl	80079cc <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
		} else {
			slideText(wifiSSID, 1, 2, 0);
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800457a:	2102      	movs	r1, #2
 800457c:	485e      	ldr	r0, [pc, #376]	; (80046f8 <menu+0x3610>)
 800457e:	f004 fd4b 	bl	8009018 <HAL_GPIO_ReadPin>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	d122      	bne.n	80045ce <menu+0x34e6>
 8004588:	2104      	movs	r1, #4
 800458a:	485b      	ldr	r0, [pc, #364]	; (80046f8 <menu+0x3610>)
 800458c:	f004 fd44 	bl	8009018 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d11b      	bne.n	80045ce <menu+0x34e6>
 8004596:	4b59      	ldr	r3, [pc, #356]	; (80046fc <menu+0x3614>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d014      	beq.n	80045ce <menu+0x34e6>
			takeWifiSSID();
 80045a4:	f002 fb86 	bl	8006cb4 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 80045a8:	4a5e      	ldr	r2, [pc, #376]	; (8004724 <menu+0x363c>)
 80045aa:	2101      	movs	r1, #1
 80045ac:	2002      	movs	r0, #2
 80045ae:	f003 fa0d 	bl	80079cc <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80045b2:	485c      	ldr	r0, [pc, #368]	; (8004724 <menu+0x363c>)
 80045b4:	f7fb fe36 	bl	8000224 <strlen>
 80045b8:	4603      	mov	r3, r0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4a5a      	ldr	r2, [pc, #360]	; (800472c <menu+0x3644>)
 80045c2:	4619      	mov	r1, r3
 80045c4:	2002      	movs	r0, #2
 80045c6:	f003 fa01 	bl	80079cc <lcd_print>

			bekle();
 80045ca:	f000 f915 	bl	80047f8 <bekle>
		}
	}

	if (menuSayac == 34) {
 80045ce:	4b4f      	ldr	r3, [pc, #316]	; (800470c <menu+0x3624>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b22      	cmp	r3, #34	; 0x22
 80045d4:	d136      	bne.n	8004644 <menu+0x355c>
		calismaSayModu = 0;
 80045d6:	4b4e      	ldr	r3, [pc, #312]	; (8004710 <menu+0x3628>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80045dc:	4854      	ldr	r0, [pc, #336]	; (8004730 <menu+0x3648>)
 80045de:	f7fb fe21 	bl	8000224 <strlen>
 80045e2:	4603      	mov	r3, r0
 80045e4:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80045e6:	4a53      	ldr	r2, [pc, #332]	; (8004734 <menu+0x364c>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	2001      	movs	r0, #1
 80045ec:	f003 f9ee 	bl	80079cc <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
		} else {
			slideText(wifiPass, 1, 2, 1);
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045f0:	2102      	movs	r1, #2
 80045f2:	4841      	ldr	r0, [pc, #260]	; (80046f8 <menu+0x3610>)
 80045f4:	f004 fd10 	bl	8009018 <HAL_GPIO_ReadPin>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d122      	bne.n	8004644 <menu+0x355c>
 80045fe:	2104      	movs	r1, #4
 8004600:	483d      	ldr	r0, [pc, #244]	; (80046f8 <menu+0x3610>)
 8004602:	f004 fd09 	bl	8009018 <HAL_GPIO_ReadPin>
 8004606:	4603      	mov	r3, r0
 8004608:	2b01      	cmp	r3, #1
 800460a:	d11b      	bne.n	8004644 <menu+0x355c>
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <menu+0x3614>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <menu+0x355c>
			takeWifiPass();
 800461a:	f002 fcfd 	bl	8007018 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 800461e:	4a44      	ldr	r2, [pc, #272]	; (8004730 <menu+0x3648>)
 8004620:	2101      	movs	r1, #1
 8004622:	2002      	movs	r0, #2
 8004624:	f003 f9d2 	bl	80079cc <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004628:	4841      	ldr	r0, [pc, #260]	; (8004730 <menu+0x3648>)
 800462a:	f7fb fdfb 	bl	8000224 <strlen>
 800462e:	4603      	mov	r3, r0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3301      	adds	r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	4a3d      	ldr	r2, [pc, #244]	; (800472c <menu+0x3644>)
 8004638:	4619      	mov	r1, r3
 800463a:	2002      	movs	r0, #2
 800463c:	f003 f9c6 	bl	80079cc <lcd_print>

			bekle();
 8004640:	f000 f8da 	bl	80047f8 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004644:	4b31      	ldr	r3, [pc, #196]	; (800470c <menu+0x3624>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b23      	cmp	r3, #35	; 0x23
 800464a:	d14d      	bne.n	80046e8 <menu+0x3600>
		if(dilSecim == 0) {
 800464c:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <menu+0x3608>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <menu+0x3582>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004654:	4a38      	ldr	r2, [pc, #224]	; (8004738 <menu+0x3650>)
 8004656:	2101      	movs	r1, #1
 8004658:	2001      	movs	r0, #1
 800465a:	f003 f9b7 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800465e:	4a37      	ldr	r2, [pc, #220]	; (800473c <menu+0x3654>)
 8004660:	2101      	movs	r1, #1
 8004662:	2002      	movs	r0, #2
 8004664:	f003 f9b2 	bl	80079cc <lcd_print>
 8004668:	e00d      	b.n	8004686 <menu+0x359e>
		} else if(dilSecim == 1) {
 800466a:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <menu+0x3608>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d109      	bne.n	8004686 <menu+0x359e>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004672:	4a33      	ldr	r2, [pc, #204]	; (8004740 <menu+0x3658>)
 8004674:	2101      	movs	r1, #1
 8004676:	2001      	movs	r0, #1
 8004678:	f003 f9a8 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800467c:	4a31      	ldr	r2, [pc, #196]	; (8004744 <menu+0x365c>)
 800467e:	2101      	movs	r1, #1
 8004680:	2002      	movs	r0, #2
 8004682:	f003 f9a3 	bl	80079cc <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004686:	2108      	movs	r1, #8
 8004688:	481b      	ldr	r0, [pc, #108]	; (80046f8 <menu+0x3610>)
 800468a:	f004 fcc5 	bl	8009018 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	2b01      	cmp	r3, #1
 8004692:	d129      	bne.n	80046e8 <menu+0x3600>
			menuGiris = 0;
 8004694:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <menu+0x3660>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800469a:	bf00      	nop
 800469c:	482b      	ldr	r0, [pc, #172]	; (800474c <menu+0x3664>)
 800469e:	f005 fae4 	bl	8009c6a <HAL_I2C_GetError>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d0f9      	beq.n	800469c <menu+0x35b4>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80046a8:	bf00      	nop
 80046aa:	4828      	ldr	r0, [pc, #160]	; (800474c <menu+0x3664>)
 80046ac:	f005 fad0 	bl	8009c50 <HAL_I2C_GetState>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d1f9      	bne.n	80046aa <menu+0x35c2>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80046b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046ba:	9302      	str	r3, [sp, #8]
 80046bc:	236e      	movs	r3, #110	; 0x6e
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <menu+0x361c>)
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	236e      	movs	r3, #110	; 0x6e
 80046c6:	2200      	movs	r2, #0
 80046c8:	21a0      	movs	r1, #160	; 0xa0
 80046ca:	4820      	ldr	r0, [pc, #128]	; (800474c <menu+0x3664>)
 80046cc:	f004 ff5e 	bl	800958c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80046d0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80046d4:	f003 fed0 	bl	8008478 <HAL_Delay>

			lcd_clear();
 80046d8:	f003 f9a4 	bl	8007a24 <lcd_clear>
			HAL_Delay(500);
 80046dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046e0:	f003 feca 	bl	8008478 <HAL_Delay>
			NVIC_SystemReset();
 80046e4:	f7fc fcea 	bl	80010bc <__NVIC_SystemReset>
		}
	}
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	2000021d 	.word	0x2000021d
 80046f4:	0800d098 	.word	0x0800d098
 80046f8:	40010800 	.word	0x40010800
 80046fc:	2000022b 	.word	0x2000022b
 8004700:	2000021b 	.word	0x2000021b
 8004704:	20000128 	.word	0x20000128
 8004708:	20000228 	.word	0x20000228
 800470c:	200001fc 	.word	0x200001fc
 8004710:	2000021c 	.word	0x2000021c
 8004714:	0800d7e0 	.word	0x0800d7e0
 8004718:	0800d7f4 	.word	0x0800d7f4
 800471c:	200001a0 	.word	0x200001a0
 8004720:	0800d808 	.word	0x0800d808
 8004724:	200001ac 	.word	0x200001ac
 8004728:	0800d810 	.word	0x0800d810
 800472c:	20000018 	.word	0x20000018
 8004730:	200001c0 	.word	0x200001c0
 8004734:	0800d824 	.word	0x0800d824
 8004738:	0800d838 	.word	0x0800d838
 800473c:	0800d84c 	.word	0x0800d84c
 8004740:	0800d860 	.word	0x0800d860
 8004744:	0800d874 	.word	0x0800d874
 8004748:	20000219 	.word	0x20000219
 800474c:	2000028c 	.word	0x2000028c

08004750 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d105      	bne.n	800476c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004760:	4a22      	ldr	r2, [pc, #136]	; (80047ec <lcdUpdate+0x9c>)
 8004762:	2101      	movs	r1, #1
 8004764:	2002      	movs	r0, #2
 8004766:	f003 f931 	bl	80079cc <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 800476a:	e03b      	b.n	80047e4 <lcdUpdate+0x94>
	} else if(y==2) {
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d105      	bne.n	800477e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004772:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <lcdUpdate+0x9c>)
 8004774:	2102      	movs	r1, #2
 8004776:	2002      	movs	r0, #2
 8004778:	f003 f928 	bl	80079cc <lcd_print>
}
 800477c:	e032      	b.n	80047e4 <lcdUpdate+0x94>
	} else if(y==3) {
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d105      	bne.n	8004790 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <lcdUpdate+0x9c>)
 8004786:	2103      	movs	r1, #3
 8004788:	2002      	movs	r0, #2
 800478a:	f003 f91f 	bl	80079cc <lcd_print>
}
 800478e:	e029      	b.n	80047e4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d105      	bne.n	80047a2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004796:	4a15      	ldr	r2, [pc, #84]	; (80047ec <lcdUpdate+0x9c>)
 8004798:	2104      	movs	r1, #4
 800479a:	2002      	movs	r0, #2
 800479c:	f003 f916 	bl	80079cc <lcd_print>
}
 80047a0:	e020      	b.n	80047e4 <lcdUpdate+0x94>
	} else if(y==5) {
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d105      	bne.n	80047b4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80047a8:	4a10      	ldr	r2, [pc, #64]	; (80047ec <lcdUpdate+0x9c>)
 80047aa:	2105      	movs	r1, #5
 80047ac:	2002      	movs	r0, #2
 80047ae:	f003 f90d 	bl	80079cc <lcd_print>
}
 80047b2:	e017      	b.n	80047e4 <lcdUpdate+0x94>
	} else if(y==6) {
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	2b06      	cmp	r3, #6
 80047b8:	d105      	bne.n	80047c6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <lcdUpdate+0x9c>)
 80047bc:	2106      	movs	r1, #6
 80047be:	2002      	movs	r0, #2
 80047c0:	f003 f904 	bl	80079cc <lcd_print>
}
 80047c4:	e00e      	b.n	80047e4 <lcdUpdate+0x94>
	} else if (y==7) {
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	2b07      	cmp	r3, #7
 80047ca:	d10b      	bne.n	80047e4 <lcdUpdate+0x94>
		lcd_clear();
 80047cc:	f003 f92a 	bl	8007a24 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 80047d0:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <lcdUpdate+0xa0>)
 80047d2:	2104      	movs	r1, #4
 80047d4:	2001      	movs	r0, #1
 80047d6:	f003 f8f9 	bl	80079cc <lcd_print>
		lcd_print(2, 6, "RUN");
 80047da:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <lcdUpdate+0xa4>)
 80047dc:	2106      	movs	r1, #6
 80047de:	2002      	movs	r0, #2
 80047e0:	f003 f8f4 	bl	80079cc <lcd_print>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	0800d888 	.word	0x0800d888
 80047f0:	0800d88c 	.word	0x0800d88c
 80047f4:	0800d894 	.word	0x0800d894

080047f8 <bekle>:

void bekle() {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
	timer1=millis;
 80047fc:	4b47      	ldr	r3, [pc, #284]	; (800491c <bekle+0x124>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a47      	ldr	r2, [pc, #284]	; (8004920 <bekle+0x128>)
 8004802:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004804:	e002      	b.n	800480c <bekle+0x14>
    	butonKontrol = 1;
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <bekle+0x12c>)
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800480c:	2101      	movs	r1, #1
 800480e:	4846      	ldr	r0, [pc, #280]	; (8004928 <bekle+0x130>)
 8004810:	f004 fc02 	bl	8009018 <HAL_GPIO_ReadPin>
 8004814:	4603      	mov	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d109      	bne.n	800482e <bekle+0x36>
 800481a:	4b40      	ldr	r3, [pc, #256]	; (800491c <bekle+0x124>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b40      	ldr	r3, [pc, #256]	; (8004920 <bekle+0x128>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d0ef      	beq.n	8004806 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004826:	e002      	b.n	800482e <bekle+0x36>
    	butonKontrol = 1;
 8004828:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <bekle+0x12c>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800482e:	2108      	movs	r1, #8
 8004830:	483e      	ldr	r0, [pc, #248]	; (800492c <bekle+0x134>)
 8004832:	f004 fbf1 	bl	8009018 <HAL_GPIO_ReadPin>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d109      	bne.n	8004850 <bekle+0x58>
 800483c:	4b37      	ldr	r3, [pc, #220]	; (800491c <bekle+0x124>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b37      	ldr	r3, [pc, #220]	; (8004920 <bekle+0x128>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d0ef      	beq.n	8004828 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004848:	e002      	b.n	8004850 <bekle+0x58>
    	butonKontrol = 1;
 800484a:	4b36      	ldr	r3, [pc, #216]	; (8004924 <bekle+0x12c>)
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004850:	2102      	movs	r1, #2
 8004852:	4835      	ldr	r0, [pc, #212]	; (8004928 <bekle+0x130>)
 8004854:	f004 fbe0 	bl	8009018 <HAL_GPIO_ReadPin>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d109      	bne.n	8004872 <bekle+0x7a>
 800485e:	4b2f      	ldr	r3, [pc, #188]	; (800491c <bekle+0x124>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <bekle+0x128>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d0ef      	beq.n	800484a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800486a:	e002      	b.n	8004872 <bekle+0x7a>
    	butonKontrol = 1;
 800486c:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <bekle+0x12c>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004872:	2104      	movs	r1, #4
 8004874:	482c      	ldr	r0, [pc, #176]	; (8004928 <bekle+0x130>)
 8004876:	f004 fbcf 	bl	8009018 <HAL_GPIO_ReadPin>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d109      	bne.n	8004894 <bekle+0x9c>
 8004880:	4b26      	ldr	r3, [pc, #152]	; (800491c <bekle+0x124>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b26      	ldr	r3, [pc, #152]	; (8004920 <bekle+0x128>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d0ef      	beq.n	800486c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800488c:	e002      	b.n	8004894 <bekle+0x9c>
    	butonKontrol = 1;
 800488e:	4b25      	ldr	r3, [pc, #148]	; (8004924 <bekle+0x12c>)
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004894:	2108      	movs	r1, #8
 8004896:	4824      	ldr	r0, [pc, #144]	; (8004928 <bekle+0x130>)
 8004898:	f004 fbbe 	bl	8009018 <HAL_GPIO_ReadPin>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d109      	bne.n	80048b6 <bekle+0xbe>
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <bekle+0x124>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <bekle+0x128>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d0ef      	beq.n	800488e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80048ae:	e002      	b.n	80048b6 <bekle+0xbe>
    	butonKontrol = 1;
 80048b0:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <bekle+0x12c>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	481c      	ldr	r0, [pc, #112]	; (800492c <bekle+0x134>)
 80048ba:	f004 fbad 	bl	8009018 <HAL_GPIO_ReadPin>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <bekle+0xe0>
 80048c4:	4b15      	ldr	r3, [pc, #84]	; (800491c <bekle+0x124>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <bekle+0x128>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d0ef      	beq.n	80048b0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80048d0:	e002      	b.n	80048d8 <bekle+0xe0>
    	butonKontrol = 1;
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <bekle+0x12c>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80048d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048dc:	4813      	ldr	r0, [pc, #76]	; (800492c <bekle+0x134>)
 80048de:	f004 fb9b 	bl	8009018 <HAL_GPIO_ReadPin>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <bekle+0x104>
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <bekle+0x124>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <bekle+0x128>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0ee      	beq.n	80048d2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80048f4:	e002      	b.n	80048fc <bekle+0x104>
    	butonKontrol = 1;
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <bekle+0x12c>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80048fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004900:	480a      	ldr	r0, [pc, #40]	; (800492c <bekle+0x134>)
 8004902:	f004 fb89 	bl	8009018 <HAL_GPIO_ReadPin>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <bekle+0x120>
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <bekle+0x124>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <bekle+0x128>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d0ee      	beq.n	80048f6 <bekle+0xfe>
    }

}
 8004918:	bf00      	nop
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200001d8 	.word	0x200001d8
 8004920:	200001e0 	.word	0x200001e0
 8004924:	2000022b 	.word	0x2000022b
 8004928:	40010800 	.word	0x40010800
 800492c:	40011000 	.word	0x40011000

08004930 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <checkLCDBacklight+0x24>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <checkLCDBacklight+0x28>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b3b      	cmp	r3, #59	; 0x3b
 8004940:	d903      	bls.n	800494a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004942:	2000      	movs	r0, #0
 8004944:	f003 f88e 	bl	8007a64 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004948:	e002      	b.n	8004950 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 800494a:	2001      	movs	r0, #1
 800494c:	f003 f88a 	bl	8007a64 <lcd_backlight>
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200001d8 	.word	0x200001d8
 8004958:	200001f4 	.word	0x200001f4

0800495c <checkBasincSalteri>:

void checkBasincSalteri() {
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <checkBasincSalteri+0x54>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <checkBasincSalteri+0x12>
		basincVar=1;
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <checkBasincSalteri+0x58>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <checkBasincSalteri+0x54>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d119      	bne.n	80049aa <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800497a:	480f      	ldr	r0, [pc, #60]	; (80049b8 <checkBasincSalteri+0x5c>)
 800497c:	f004 fb4c 	bl	8009018 <HAL_GPIO_ReadPin>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <checkBasincSalteri+0x60>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <checkBasincSalteri+0x64>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d90a      	bls.n	80049aa <checkBasincSalteri+0x4e>
				basincVar=1;
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <checkBasincSalteri+0x58>)
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800499a:	e006      	b.n	80049aa <checkBasincSalteri+0x4e>
			timer5=millis;
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <checkBasincSalteri+0x60>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <checkBasincSalteri+0x64>)
 80049a2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <checkBasincSalteri+0x58>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000203 	.word	0x20000203
 80049b4:	200001ff 	.word	0x200001ff
 80049b8:	40011000 	.word	0x40011000
 80049bc:	200001d8 	.word	0x200001d8
 80049c0:	200001f0 	.word	0x200001f0

080049c4 <checkBasGonder>:

void checkBasGonder() {
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <checkBasGonder+0x74>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10b      	bne.n	80049e8 <checkBasGonder+0x24>
 80049d0:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <checkBasGonder+0x78>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <checkBasGonder+0x24>
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <checkBasGonder+0x7c>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <checkBasGonder+0x80>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e009      	b.n	80049fc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <checkBasGonder+0x78>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	f083 0301 	eor.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <checkBasGonder+0x80>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <checkBasGonder+0x74>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10b      	bne.n	8004a1c <checkBasGonder+0x58>
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <checkBasGonder+0x84>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <checkBasGonder+0x58>
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <checkBasGonder+0x7c>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <checkBasGonder+0x88>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004a1a:	e009      	b.n	8004a30 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <checkBasGonder+0x84>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f083 0301 	eor.w	r3, r3, #1
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <checkBasGonder+0x88>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	200001fd 	.word	0x200001fd
 8004a3c:	20000231 	.word	0x20000231
 8004a40:	2000020b 	.word	0x2000020b
 8004a44:	20000238 	.word	0x20000238
 8004a48:	20000234 	.word	0x20000234
 8004a4c:	20000239 	.word	0x20000239

08004a50 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <checkKapiSecimleri+0x98>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <checkKapiSecimleri+0x98>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10e      	bne.n	8004a88 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a6e:	4820      	ldr	r0, [pc, #128]	; (8004af0 <checkKapiSecimleri+0xa0>)
 8004a70:	f004 fad2 	bl	8009018 <HAL_GPIO_ReadPin>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e002      	b.n	8004a88 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <checkKapiSecimleri+0x98>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d10e      	bne.n	8004aae <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a94:	4816      	ldr	r0, [pc, #88]	; (8004af0 <checkKapiSecimleri+0xa0>)
 8004a96:	f004 fabf 	bl	8009018 <HAL_GPIO_ReadPin>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004aa8:	4b10      	ldr	r3, [pc, #64]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <checkKapiSecimleri+0x98>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d116      	bne.n	8004ae4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aba:	480d      	ldr	r0, [pc, #52]	; (8004af0 <checkKapiSecimleri+0xa0>)
 8004abc:	f004 faac 	bl	8009018 <HAL_GPIO_ReadPin>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <checkKapiSecimleri+0x8e>
 8004ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aca:	4809      	ldr	r0, [pc, #36]	; (8004af0 <checkKapiSecimleri+0xa0>)
 8004acc:	f004 faa4 	bl	8009018 <HAL_GPIO_ReadPin>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004adc:	e002      	b.n	8004ae4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004ade:	4b03      	ldr	r3, [pc, #12]	; (8004aec <checkKapiSecimleri+0x9c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000204 	.word	0x20000204
 8004aec:	2000024f 	.word	0x2000024f
 8004af0:	40010800 	.word	0x40010800

08004af4 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004af8:	4b62      	ldr	r3, [pc, #392]	; (8004c84 <checkAktifCalisma+0x190>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f041 833e 	bne.w	800617e <checkAktifCalisma+0x168a>
 8004b02:	4b61      	ldr	r3, [pc, #388]	; (8004c88 <checkAktifCalisma+0x194>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f041 8339 	bne.w	800617e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004b0c:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <checkAktifCalisma+0x198>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11a      	bne.n	8004b4a <checkAktifCalisma+0x56>
 8004b14:	4b5e      	ldr	r3, [pc, #376]	; (8004c90 <checkAktifCalisma+0x19c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d116      	bne.n	8004b4a <checkAktifCalisma+0x56>
 8004b1c:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <checkAktifCalisma+0x1a0>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <checkAktifCalisma+0x46>
 8004b24:	4b5c      	ldr	r3, [pc, #368]	; (8004c98 <checkAktifCalisma+0x1a4>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f083 0301 	eor.w	r3, r3, #1
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <checkAktifCalisma+0x46>
 8004b32:	4b5a      	ldr	r3, [pc, #360]	; (8004c9c <checkAktifCalisma+0x1a8>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d007      	beq.n	8004b4a <checkAktifCalisma+0x56>
 8004b3a:	4b59      	ldr	r3, [pc, #356]	; (8004ca0 <checkAktifCalisma+0x1ac>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <checkAktifCalisma+0x80>
 8004b42:	4b58      	ldr	r3, [pc, #352]	; (8004ca4 <checkAktifCalisma+0x1b0>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d114      	bne.n	8004b74 <checkAktifCalisma+0x80>
 8004b4a:	4b57      	ldr	r3, [pc, #348]	; (8004ca8 <checkAktifCalisma+0x1b4>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d010      	beq.n	8004b74 <checkAktifCalisma+0x80>
 8004b52:	4b56      	ldr	r3, [pc, #344]	; (8004cac <checkAktifCalisma+0x1b8>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b60:	4853      	ldr	r0, [pc, #332]	; (8004cb0 <checkAktifCalisma+0x1bc>)
 8004b62:	f004 fa70 	bl	8009046 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004b66:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <checkAktifCalisma+0x1c0>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004b6c:	4b52      	ldr	r3, [pc, #328]	; (8004cb8 <checkAktifCalisma+0x1c4>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e008      	b.n	8004b86 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b7a:	484d      	ldr	r0, [pc, #308]	; (8004cb0 <checkAktifCalisma+0x1bc>)
 8004b7c:	f004 fa63 	bl	8009046 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <checkAktifCalisma+0x1c0>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004b86:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <checkAktifCalisma+0x194>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d160      	bne.n	8004c50 <checkAktifCalisma+0x15c>
 8004b8e:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <checkAktifCalisma+0x1b4>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d05c      	beq.n	8004c50 <checkAktifCalisma+0x15c>
 8004b96:	4b45      	ldr	r3, [pc, #276]	; (8004cac <checkAktifCalisma+0x1b8>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d058      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba2:	4843      	ldr	r0, [pc, #268]	; (8004cb0 <checkAktifCalisma+0x1bc>)
 8004ba4:	f004 fa38 	bl	8009018 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <checkAktifCalisma+0xc2>
 8004bae:	4b43      	ldr	r3, [pc, #268]	; (8004cbc <checkAktifCalisma+0x1c8>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04c      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4841      	ldr	r0, [pc, #260]	; (8004cc0 <checkAktifCalisma+0x1cc>)
 8004bba:	f004 fa2d 	bl	8009018 <HAL_GPIO_ReadPin>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d145      	bne.n	8004c50 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004bc4:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <checkAktifCalisma+0x1d0>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d041      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004bcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bd0:	4837      	ldr	r0, [pc, #220]	; (8004cb0 <checkAktifCalisma+0x1bc>)
 8004bd2:	f004 fa21 	bl	8009018 <HAL_GPIO_ReadPin>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10e      	bne.n	8004bfa <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004be0:	4833      	ldr	r0, [pc, #204]	; (8004cb0 <checkAktifCalisma+0x1bc>)
 8004be2:	f004 fa19 	bl	8009018 <HAL_GPIO_ReadPin>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d106      	bne.n	8004bfa <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004bec:	2140      	movs	r1, #64	; 0x40
 8004bee:	4834      	ldr	r0, [pc, #208]	; (8004cc0 <checkAktifCalisma+0x1cc>)
 8004bf0:	f004 fa12 	bl	8009018 <HAL_GPIO_ReadPin>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <checkAktifCalisma+0x10e>
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <checkAktifCalisma+0x198>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d026      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <checkAktifCalisma+0x1a0>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01f      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004c10:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <checkAktifCalisma+0x19c>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f083 0301 	eor.w	r3, r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <checkAktifCalisma+0x1ac>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f083 0301 	eor.w	r3, r3, #1
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d011      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004c2c:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <checkAktifCalisma+0x1d4>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	f083 0301 	eor.w	r3, r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <checkAktifCalisma+0x1d8>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f083 0301 	eor.w	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <checkAktifCalisma+0x198>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e002      	b.n	8004c56 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <checkAktifCalisma+0x198>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <checkAktifCalisma+0x198>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03a      	beq.n	8004cd4 <checkAktifCalisma+0x1e0>
 8004c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c62:	4817      	ldr	r0, [pc, #92]	; (8004cc0 <checkAktifCalisma+0x1cc>)
 8004c64:	f004 f9d8 	bl	8009018 <HAL_GPIO_ReadPin>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d132      	bne.n	8004cd4 <checkAktifCalisma+0x1e0>
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <checkAktifCalisma+0x1dc>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02e      	beq.n	8004cd4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004c76:	2201      	movs	r2, #1
 8004c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c7c:	480c      	ldr	r0, [pc, #48]	; (8004cb0 <checkAktifCalisma+0x1bc>)
 8004c7e:	f004 f9e2 	bl	8009046 <HAL_GPIO_WritePin>
 8004c82:	e02d      	b.n	8004ce0 <checkAktifCalisma+0x1ec>
 8004c84:	2000021a 	.word	0x2000021a
 8004c88:	20000219 	.word	0x20000219
 8004c8c:	20000231 	.word	0x20000231
 8004c90:	20000232 	.word	0x20000232
 8004c94:	20000234 	.word	0x20000234
 8004c98:	2000022c 	.word	0x2000022c
 8004c9c:	2000020f 	.word	0x2000020f
 8004ca0:	20000233 	.word	0x20000233
 8004ca4:	2000020e 	.word	0x2000020e
 8004ca8:	2000024e 	.word	0x2000024e
 8004cac:	2000024f 	.word	0x2000024f
 8004cb0:	40010c00 	.word	0x40010c00
 8004cb4:	20000250 	.word	0x20000250
 8004cb8:	2000023b 	.word	0x2000023b
 8004cbc:	20000238 	.word	0x20000238
 8004cc0:	40011000 	.word	0x40011000
 8004cc4:	200001ff 	.word	0x200001ff
 8004cc8:	20000236 	.word	0x20000236
 8004ccc:	20000237 	.word	0x20000237
 8004cd0:	2000020a 	.word	0x2000020a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cda:	4860      	ldr	r0, [pc, #384]	; (8004e5c <checkAktifCalisma+0x368>)
 8004cdc:	f004 f9b3 	bl	8009046 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004ce0:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <checkAktifCalisma+0x36c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <checkAktifCalisma+0x21c>
 8004ce8:	4b5e      	ldr	r3, [pc, #376]	; (8004e64 <checkAktifCalisma+0x370>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d007      	beq.n	8004d00 <checkAktifCalisma+0x20c>
 8004cf0:	4b5c      	ldr	r3, [pc, #368]	; (8004e64 <checkAktifCalisma+0x370>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d003      	beq.n	8004d00 <checkAktifCalisma+0x20c>
 8004cf8:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <checkAktifCalisma+0x374>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004d00:	2201      	movs	r2, #1
 8004d02:	2104      	movs	r1, #4
 8004d04:	4855      	ldr	r0, [pc, #340]	; (8004e5c <checkAktifCalisma+0x368>)
 8004d06:	f004 f99e 	bl	8009046 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004d0a:	4b58      	ldr	r3, [pc, #352]	; (8004e6c <checkAktifCalisma+0x378>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <checkAktifCalisma+0x378>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02f      	beq.n	8004d78 <checkAktifCalisma+0x284>
 8004d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d1c:	484f      	ldr	r0, [pc, #316]	; (8004e5c <checkAktifCalisma+0x368>)
 8004d1e:	f004 f97b 	bl	8009018 <HAL_GPIO_ReadPin>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d106      	bne.n	8004d36 <checkAktifCalisma+0x242>
 8004d28:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <checkAktifCalisma+0x37c>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f083 0301 	eor.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <checkAktifCalisma+0x250>
 8004d36:	2102      	movs	r1, #2
 8004d38:	484e      	ldr	r0, [pc, #312]	; (8004e74 <checkAktifCalisma+0x380>)
 8004d3a:	f004 f96d 	bl	8009018 <HAL_GPIO_ReadPin>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d119      	bne.n	8004d78 <checkAktifCalisma+0x284>
 8004d44:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <checkAktifCalisma+0x384>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <checkAktifCalisma+0x284>
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	; (8004e7c <checkAktifCalisma+0x388>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d011      	beq.n	8004d78 <checkAktifCalisma+0x284>
 8004d54:	4b4a      	ldr	r3, [pc, #296]	; (8004e80 <checkAktifCalisma+0x38c>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <checkAktifCalisma+0x284>
 8004d5c:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <checkAktifCalisma+0x390>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d006      	beq.n	8004d78 <checkAktifCalisma+0x284>
			timer2=millis;
 8004d6a:	4b47      	ldr	r3, [pc, #284]	; (8004e88 <checkAktifCalisma+0x394>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a47      	ldr	r2, [pc, #284]	; (8004e8c <checkAktifCalisma+0x398>)
 8004d70:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004d72:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <checkAktifCalisma+0x390>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004d78:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <checkAktifCalisma+0x394>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <checkAktifCalisma+0x398>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a43      	ldr	r2, [pc, #268]	; (8004e90 <checkAktifCalisma+0x39c>)
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d303      	bcc.n	8004d92 <checkAktifCalisma+0x29e>
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <checkAktifCalisma+0x390>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d111      	bne.n	8004db6 <checkAktifCalisma+0x2c2>
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <checkAktifCalisma+0x384>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f083 0301 	eor.w	r3, r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <checkAktifCalisma+0x2c2>
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <checkAktifCalisma+0x388>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f083 0301 	eor.w	r3, r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <checkAktifCalisma+0x2c2>
 8004dae:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <checkAktifCalisma+0x38c>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2104      	movs	r1, #4
 8004dba:	4828      	ldr	r0, [pc, #160]	; (8004e5c <checkAktifCalisma+0x368>)
 8004dbc:	f004 f943 	bl	8009046 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004dc0:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <checkAktifCalisma+0x378>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <checkAktifCalisma+0x390>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004dcc:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <checkAktifCalisma+0x3a0>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004dd4:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <checkAktifCalisma+0x3a4>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004dda:	4b2e      	ldr	r3, [pc, #184]	; (8004e94 <checkAktifCalisma+0x3a0>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d116      	bne.n	8004e10 <checkAktifCalisma+0x31c>
 8004de2:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <checkAktifCalisma+0x3a8>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d112      	bne.n	8004e10 <checkAktifCalisma+0x31c>
 8004dea:	2101      	movs	r1, #1
 8004dec:	4821      	ldr	r0, [pc, #132]	; (8004e74 <checkAktifCalisma+0x380>)
 8004dee:	f004 f913 	bl	8009018 <HAL_GPIO_ReadPin>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <checkAktifCalisma+0x31c>
 8004df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dfc:	4817      	ldr	r0, [pc, #92]	; (8004e5c <checkAktifCalisma+0x368>)
 8004dfe:	f004 f90b 	bl	8009018 <HAL_GPIO_ReadPin>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d103      	bne.n	8004e10 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004e08:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <checkAktifCalisma+0x3a4>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e011      	b.n	8004e34 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004e10:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <checkAktifCalisma+0x3a0>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d10d      	bne.n	8004e34 <checkAktifCalisma+0x340>
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4816      	ldr	r0, [pc, #88]	; (8004e74 <checkAktifCalisma+0x380>)
 8004e1c:	f004 f8fc 	bl	8009018 <HAL_GPIO_ReadPin>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d106      	bne.n	8004e34 <checkAktifCalisma+0x340>
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <checkAktifCalisma+0x3a8>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <checkAktifCalisma+0x3a4>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <checkAktifCalisma+0x3a0>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d134      	bne.n	8004ea6 <checkAktifCalisma+0x3b2>
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <checkAktifCalisma+0x3a8>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d130      	bne.n	8004ea6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004e44:	2101      	movs	r1, #1
 8004e46:	480b      	ldr	r0, [pc, #44]	; (8004e74 <checkAktifCalisma+0x380>)
 8004e48:	f004 f8e6 	bl	8009018 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d126      	bne.n	8004ea0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <checkAktifCalisma+0x3a4>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e025      	b.n	8004ea6 <checkAktifCalisma+0x3b2>
 8004e5a:	bf00      	nop
 8004e5c:	40010c00 	.word	0x40010c00
 8004e60:	20000231 	.word	0x20000231
 8004e64:	2000020b 	.word	0x2000020b
 8004e68:	2000020f 	.word	0x2000020f
 8004e6c:	20000235 	.word	0x20000235
 8004e70:	20000238 	.word	0x20000238
 8004e74:	40011000 	.word	0x40011000
 8004e78:	2000024e 	.word	0x2000024e
 8004e7c:	2000024f 	.word	0x2000024f
 8004e80:	200001ff 	.word	0x200001ff
 8004e84:	2000022d 	.word	0x2000022d
 8004e88:	200001d8 	.word	0x200001d8
 8004e8c:	200001e4 	.word	0x200001e4
 8004e90:	20000210 	.word	0x20000210
 8004e94:	20000200 	.word	0x20000200
 8004e98:	20000253 	.word	0x20000253
 8004e9c:	200001fd 	.word	0x200001fd
			} else {
				cerceveVar=0;
 8004ea0:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <checkAktifCalisma+0x5ac>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004ea6:	4b7f      	ldr	r3, [pc, #508]	; (80050a4 <checkAktifCalisma+0x5b0>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d17c      	bne.n	8004fa8 <checkAktifCalisma+0x4b4>
 8004eae:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <checkAktifCalisma+0x5b4>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d078      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
 8004eb6:	4b7d      	ldr	r3, [pc, #500]	; (80050ac <checkAktifCalisma+0x5b8>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d074      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ec2:	487b      	ldr	r0, [pc, #492]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8004ec4:	f004 f8a8 	bl	8009018 <HAL_GPIO_ReadPin>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <checkAktifCalisma+0x3e2>
 8004ece:	4b79      	ldr	r3, [pc, #484]	; (80050b4 <checkAktifCalisma+0x5c0>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d068      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004ed6:	4b72      	ldr	r3, [pc, #456]	; (80050a0 <checkAktifCalisma+0x5ac>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d064      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
 8004ede:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <checkAktifCalisma+0x5c4>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f083 0301 	eor.w	r3, r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05d      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004eec:	2104      	movs	r1, #4
 8004eee:	4873      	ldr	r0, [pc, #460]	; (80050bc <checkAktifCalisma+0x5c8>)
 8004ef0:	f004 f892 	bl	8009018 <HAL_GPIO_ReadPin>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <checkAktifCalisma+0x40e>
 8004efa:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <checkAktifCalisma+0x5cc>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d152      	bne.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f06:	486a      	ldr	r0, [pc, #424]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8004f08:	f004 f886 	bl	8009018 <HAL_GPIO_ReadPin>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10e      	bne.n	8004f30 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f16:	4866      	ldr	r0, [pc, #408]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8004f18:	f004 f87e 	bl	8009018 <HAL_GPIO_ReadPin>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d106      	bne.n	8004f30 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004f22:	2140      	movs	r1, #64	; 0x40
 8004f24:	4865      	ldr	r0, [pc, #404]	; (80050bc <checkAktifCalisma+0x5c8>)
 8004f26:	f004 f877 	bl	8009018 <HAL_GPIO_ReadPin>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d003      	beq.n	8004f38 <checkAktifCalisma+0x444>
 8004f30:	4b64      	ldr	r3, [pc, #400]	; (80050c4 <checkAktifCalisma+0x5d0>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d037      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004f38:	4b63      	ldr	r3, [pc, #396]	; (80050c8 <checkAktifCalisma+0x5d4>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	f083 0301 	eor.w	r3, r3, #1
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d030      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004f46:	4b61      	ldr	r3, [pc, #388]	; (80050cc <checkAktifCalisma+0x5d8>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	f083 0301 	eor.w	r3, r3, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d029      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004f54:	4b5e      	ldr	r3, [pc, #376]	; (80050d0 <checkAktifCalisma+0x5dc>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f083 0301 	eor.w	r3, r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d022      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004f62:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <checkAktifCalisma+0x5e0>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f083 0301 	eor.w	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01b      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <checkAktifCalisma+0x5e4>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f083 0301 	eor.w	r3, r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d014      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8004f7e:	4b57      	ldr	r3, [pc, #348]	; (80050dc <checkAktifCalisma+0x5e8>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	f083 0301 	eor.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4847      	ldr	r0, [pc, #284]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8004f92:	f004 f858 	bl	8009046 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004f96:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <checkAktifCalisma+0x5d0>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004f9c:	4b50      	ldr	r3, [pc, #320]	; (80050e0 <checkAktifCalisma+0x5ec>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8004fa2:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <checkAktifCalisma+0x5f0>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004fa8:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <checkAktifCalisma+0x5d0>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d033      	beq.n	8005018 <checkAktifCalisma+0x524>
 8004fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fb4:	483e      	ldr	r0, [pc, #248]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8004fb6:	f004 f82f 	bl	8009018 <HAL_GPIO_ReadPin>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <checkAktifCalisma+0x4da>
 8004fc0:	4b3c      	ldr	r3, [pc, #240]	; (80050b4 <checkAktifCalisma+0x5c0>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f083 0301 	eor.w	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <checkAktifCalisma+0x4f0>
 8004fce:	2104      	movs	r1, #4
 8004fd0:	483a      	ldr	r0, [pc, #232]	; (80050bc <checkAktifCalisma+0x5c8>)
 8004fd2:	f004 f821 	bl	8009018 <HAL_GPIO_ReadPin>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d11d      	bne.n	8005018 <checkAktifCalisma+0x524>
 8004fdc:	4b38      	ldr	r3, [pc, #224]	; (80050c0 <checkAktifCalisma+0x5cc>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d019      	beq.n	8005018 <checkAktifCalisma+0x524>
 8004fe4:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <checkAktifCalisma+0x5b4>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d015      	beq.n	8005018 <checkAktifCalisma+0x524>
 8004fec:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <checkAktifCalisma+0x5b8>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d011      	beq.n	8005018 <checkAktifCalisma+0x524>
 8004ff4:	4b2a      	ldr	r3, [pc, #168]	; (80050a0 <checkAktifCalisma+0x5ac>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <checkAktifCalisma+0x524>
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <checkAktifCalisma+0x5f4>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f083 0301 	eor.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <checkAktifCalisma+0x524>
			timer2=millis;
 800500a:	4b38      	ldr	r3, [pc, #224]	; (80050ec <checkAktifCalisma+0x5f8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <checkAktifCalisma+0x5fc>)
 8005010:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005012:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <checkAktifCalisma+0x5f4>)
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005018:	4b34      	ldr	r3, [pc, #208]	; (80050ec <checkAktifCalisma+0x5f8>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <checkAktifCalisma+0x5fc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <checkAktifCalisma+0x600>)
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	4293      	cmp	r3, r2
 8005028:	d303      	bcc.n	8005032 <checkAktifCalisma+0x53e>
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <checkAktifCalisma+0x5f4>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d114      	bne.n	800505c <checkAktifCalisma+0x568>
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <checkAktifCalisma+0x5b4>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10d      	bne.n	800505c <checkAktifCalisma+0x568>
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <checkAktifCalisma+0x5b8>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f083 0301 	eor.w	r3, r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <checkAktifCalisma+0x568>
 800504e:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <checkAktifCalisma+0x5ac>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f083 0301 	eor.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800505c:	2200      	movs	r2, #0
 800505e:	2102      	movs	r1, #2
 8005060:	4813      	ldr	r0, [pc, #76]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8005062:	f003 fff0 	bl	8009046 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005066:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <checkAktifCalisma+0x5d0>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800506c:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <checkAktifCalisma+0x5f4>)
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005072:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <checkAktifCalisma+0x5d0>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d040      	beq.n	80050fc <checkAktifCalisma+0x608>
 800507a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800507e:	480f      	ldr	r0, [pc, #60]	; (80050bc <checkAktifCalisma+0x5c8>)
 8005080:	f003 ffca 	bl	8009018 <HAL_GPIO_ReadPin>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d138      	bne.n	80050fc <checkAktifCalisma+0x608>
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <checkAktifCalisma+0x604>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d034      	beq.n	80050fc <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005092:	2201      	movs	r2, #1
 8005094:	2101      	movs	r1, #1
 8005096:	4806      	ldr	r0, [pc, #24]	; (80050b0 <checkAktifCalisma+0x5bc>)
 8005098:	f003 ffd5 	bl	8009046 <HAL_GPIO_WritePin>
 800509c:	e033      	b.n	8005106 <checkAktifCalisma+0x612>
 800509e:	bf00      	nop
 80050a0:	20000253 	.word	0x20000253
 80050a4:	20000219 	.word	0x20000219
 80050a8:	2000024e 	.word	0x2000024e
 80050ac:	2000024f 	.word	0x2000024f
 80050b0:	40010c00 	.word	0x40010c00
 80050b4:	20000239 	.word	0x20000239
 80050b8:	2000024d 	.word	0x2000024d
 80050bc:	40011000 	.word	0x40011000
 80050c0:	20000202 	.word	0x20000202
 80050c4:	20000234 	.word	0x20000234
 80050c8:	20000231 	.word	0x20000231
 80050cc:	20000235 	.word	0x20000235
 80050d0:	20000232 	.word	0x20000232
 80050d4:	20000233 	.word	0x20000233
 80050d8:	20000236 	.word	0x20000236
 80050dc:	20000237 	.word	0x20000237
 80050e0:	2000023c 	.word	0x2000023c
 80050e4:	2000025d 	.word	0x2000025d
 80050e8:	2000022c 	.word	0x2000022c
 80050ec:	200001d8 	.word	0x200001d8
 80050f0:	200001e4 	.word	0x200001e4
 80050f4:	20000211 	.word	0x20000211
 80050f8:	20000201 	.word	0x20000201
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80050fc:	2200      	movs	r2, #0
 80050fe:	2101      	movs	r1, #1
 8005100:	4836      	ldr	r0, [pc, #216]	; (80051dc <checkAktifCalisma+0x6e8>)
 8005102:	f003 ffa0 	bl	8009046 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005106:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <checkAktifCalisma+0x6ec>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 8080 	bne.w	8005210 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005110:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <checkAktifCalisma+0x6f0>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d003      	beq.n	8005120 <checkAktifCalisma+0x62c>
 8005118:	4b32      	ldr	r3, [pc, #200]	; (80051e4 <checkAktifCalisma+0x6f0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d177      	bne.n	8005210 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005120:	4b31      	ldr	r3, [pc, #196]	; (80051e8 <checkAktifCalisma+0x6f4>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d073      	beq.n	8005210 <checkAktifCalisma+0x71c>
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <checkAktifCalisma+0x6f8>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d06f      	beq.n	8005210 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005134:	4829      	ldr	r0, [pc, #164]	; (80051dc <checkAktifCalisma+0x6e8>)
 8005136:	f003 ff6f 	bl	8009018 <HAL_GPIO_ReadPin>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d167      	bne.n	8005210 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005144:	482a      	ldr	r0, [pc, #168]	; (80051f0 <checkAktifCalisma+0x6fc>)
 8005146:	f003 ff67 	bl	8009018 <HAL_GPIO_ReadPin>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <checkAktifCalisma+0x664>
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <checkAktifCalisma+0x700>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d15b      	bne.n	8005210 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005158:	2140      	movs	r1, #64	; 0x40
 800515a:	4825      	ldr	r0, [pc, #148]	; (80051f0 <checkAktifCalisma+0x6fc>)
 800515c:	f003 ff5c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10f      	bne.n	8005186 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800516a:	481c      	ldr	r0, [pc, #112]	; (80051dc <checkAktifCalisma+0x6e8>)
 800516c:	f003 ff54 	bl	8009018 <HAL_GPIO_ReadPin>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800517a:	4818      	ldr	r0, [pc, #96]	; (80051dc <checkAktifCalisma+0x6e8>)
 800517c:	f003 ff4c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d003      	beq.n	800518e <checkAktifCalisma+0x69a>
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <checkAktifCalisma+0x704>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d040      	beq.n	8005210 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <checkAktifCalisma+0x708>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f083 0301 	eor.w	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d039      	beq.n	8005210 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <checkAktifCalisma+0x70c>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f083 0301 	eor.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d032      	beq.n	8005210 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <checkAktifCalisma+0x710>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	f083 0301 	eor.w	r3, r3, #1
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d02b      	beq.n	8005210 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <checkAktifCalisma+0x714>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f083 0301 	eor.w	r3, r3, #1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d024      	beq.n	8005210 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <checkAktifCalisma+0x718>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f083 0301 	eor.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01d      	beq.n	8005210 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <checkAktifCalisma+0x704>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e01c      	b.n	8005216 <checkAktifCalisma+0x722>
 80051dc:	40010c00 	.word	0x40010c00
 80051e0:	20000219 	.word	0x20000219
 80051e4:	2000020b 	.word	0x2000020b
 80051e8:	2000024e 	.word	0x2000024e
 80051ec:	2000024f 	.word	0x2000024f
 80051f0:	40011000 	.word	0x40011000
 80051f4:	2000020c 	.word	0x2000020c
 80051f8:	20000232 	.word	0x20000232
 80051fc:	20000231 	.word	0x20000231
 8005200:	20000235 	.word	0x20000235
 8005204:	20000234 	.word	0x20000234
 8005208:	20000233 	.word	0x20000233
 800520c:	20000237 	.word	0x20000237
		} else {
			devmotoryukaricalisiyor=0;
 8005210:	4b64      	ldr	r3, [pc, #400]	; (80053a4 <checkAktifCalisma+0x8b0>)
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005216:	4b63      	ldr	r3, [pc, #396]	; (80053a4 <checkAktifCalisma+0x8b0>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800521e:	2201      	movs	r2, #1
 8005220:	2120      	movs	r1, #32
 8005222:	4861      	ldr	r0, [pc, #388]	; (80053a8 <checkAktifCalisma+0x8b4>)
 8005224:	f003 ff0f 	bl	8009046 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005228:	4b60      	ldr	r3, [pc, #384]	; (80053ac <checkAktifCalisma+0x8b8>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800522e:	4b5f      	ldr	r3, [pc, #380]	; (80053ac <checkAktifCalisma+0x8b8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d025      	beq.n	8005282 <checkAktifCalisma+0x78e>
 8005236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800523a:	485d      	ldr	r0, [pc, #372]	; (80053b0 <checkAktifCalisma+0x8bc>)
 800523c:	f003 feec 	bl	8009018 <HAL_GPIO_ReadPin>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d007      	beq.n	8005256 <checkAktifCalisma+0x762>
 8005246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800524a:	4857      	ldr	r0, [pc, #348]	; (80053a8 <checkAktifCalisma+0x8b4>)
 800524c:	f003 fee4 	bl	8009018 <HAL_GPIO_ReadPin>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d115      	bne.n	8005282 <checkAktifCalisma+0x78e>
 8005256:	4b57      	ldr	r3, [pc, #348]	; (80053b4 <checkAktifCalisma+0x8c0>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <checkAktifCalisma+0x78e>
 800525e:	4b56      	ldr	r3, [pc, #344]	; (80053b8 <checkAktifCalisma+0x8c4>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <checkAktifCalisma+0x78e>
 8005266:	4b55      	ldr	r3, [pc, #340]	; (80053bc <checkAktifCalisma+0x8c8>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f083 0301 	eor.w	r3, r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005274:	4b52      	ldr	r3, [pc, #328]	; (80053c0 <checkAktifCalisma+0x8cc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a52      	ldr	r2, [pc, #328]	; (80053c4 <checkAktifCalisma+0x8d0>)
 800527a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <checkAktifCalisma+0x8c8>)
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005282:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <checkAktifCalisma+0x8cc>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <checkAktifCalisma+0x8d0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	4a4e      	ldr	r2, [pc, #312]	; (80053c8 <checkAktifCalisma+0x8d4>)
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	4293      	cmp	r3, r2
 8005292:	d303      	bcc.n	800529c <checkAktifCalisma+0x7a8>
 8005294:	4b49      	ldr	r3, [pc, #292]	; (80053bc <checkAktifCalisma+0x8c8>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <checkAktifCalisma+0x7c4>
 800529c:	4b45      	ldr	r3, [pc, #276]	; (80053b4 <checkAktifCalisma+0x8c0>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f083 0301 	eor.w	r3, r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <checkAktifCalisma+0x7c4>
 80052aa:	4b43      	ldr	r3, [pc, #268]	; (80053b8 <checkAktifCalisma+0x8c4>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f083 0301 	eor.w	r3, r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80052b8:	2200      	movs	r2, #0
 80052ba:	2120      	movs	r1, #32
 80052bc:	483a      	ldr	r0, [pc, #232]	; (80053a8 <checkAktifCalisma+0x8b4>)
 80052be:	f003 fec2 	bl	8009046 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80052c2:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <checkAktifCalisma+0x8b8>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80052c8:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <checkAktifCalisma+0x8c8>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <checkAktifCalisma+0x8d8>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 8088 	bne.w	80053e8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80052d8:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <checkAktifCalisma+0x8dc>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d003      	beq.n	80052e8 <checkAktifCalisma+0x7f4>
 80052e0:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <checkAktifCalisma+0x8dc>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d17f      	bne.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80052e8:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <checkAktifCalisma+0x8c0>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d07b      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
 80052f0:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <checkAktifCalisma+0x8c4>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d077      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80052f8:	2140      	movs	r1, #64	; 0x40
 80052fa:	482b      	ldr	r0, [pc, #172]	; (80053a8 <checkAktifCalisma+0x8b4>)
 80052fc:	f003 fe8c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d170      	bne.n	80053e8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800530a:	4827      	ldr	r0, [pc, #156]	; (80053a8 <checkAktifCalisma+0x8b4>)
 800530c:	f003 fe84 	bl	8009018 <HAL_GPIO_ReadPin>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <checkAktifCalisma+0x82a>
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <checkAktifCalisma+0x8e0>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d164      	bne.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800531e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005322:	4823      	ldr	r0, [pc, #140]	; (80053b0 <checkAktifCalisma+0x8bc>)
 8005324:	f003 fe78 	bl	8009018 <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d10f      	bne.n	800534e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800532e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005332:	481f      	ldr	r0, [pc, #124]	; (80053b0 <checkAktifCalisma+0x8bc>)
 8005334:	f003 fe70 	bl	8009018 <HAL_GPIO_ReadPin>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d107      	bne.n	800534e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800533e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005342:	481b      	ldr	r0, [pc, #108]	; (80053b0 <checkAktifCalisma+0x8bc>)
 8005344:	f003 fe68 	bl	8009018 <HAL_GPIO_ReadPin>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d003      	beq.n	8005356 <checkAktifCalisma+0x862>
 800534e:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <checkAktifCalisma+0x8e4>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d048      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005356:	4b21      	ldr	r3, [pc, #132]	; (80053dc <checkAktifCalisma+0x8e8>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	f083 0301 	eor.w	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d041      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005364:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <checkAktifCalisma+0x8ec>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f083 0301 	eor.w	r3, r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03a      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <checkAktifCalisma+0x8f0>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	f083 0301 	eor.w	r3, r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d033      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <checkAktifCalisma+0x8b8>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f083 0301 	eor.w	r3, r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02c      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <checkAktifCalisma+0x8b0>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	f083 0301 	eor.w	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d025      	beq.n	80053e8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <checkAktifCalisma+0x8e4>)
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e024      	b.n	80053ee <checkAktifCalisma+0x8fa>
 80053a4:	20000232 	.word	0x20000232
 80053a8:	40011000 	.word	0x40011000
 80053ac:	20000236 	.word	0x20000236
 80053b0:	40010c00 	.word	0x40010c00
 80053b4:	2000024e 	.word	0x2000024e
 80053b8:	2000024f 	.word	0x2000024f
 80053bc:	2000022e 	.word	0x2000022e
 80053c0:	200001d8 	.word	0x200001d8
 80053c4:	200001e4 	.word	0x200001e4
 80053c8:	20000212 	.word	0x20000212
 80053cc:	20000219 	.word	0x20000219
 80053d0:	2000020b 	.word	0x2000020b
 80053d4:	2000020d 	.word	0x2000020d
 80053d8:	20000233 	.word	0x20000233
 80053dc:	20000231 	.word	0x20000231
 80053e0:	20000235 	.word	0x20000235
 80053e4:	20000234 	.word	0x20000234
		} else {
			devmotorasagicalisiyor=0;
 80053e8:	4b96      	ldr	r3, [pc, #600]	; (8005644 <checkAktifCalisma+0xb50>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80053ee:	4b95      	ldr	r3, [pc, #596]	; (8005644 <checkAktifCalisma+0xb50>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80053f6:	2201      	movs	r2, #1
 80053f8:	2110      	movs	r1, #16
 80053fa:	4893      	ldr	r0, [pc, #588]	; (8005648 <checkAktifCalisma+0xb54>)
 80053fc:	f003 fe23 	bl	8009046 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005400:	4b92      	ldr	r3, [pc, #584]	; (800564c <checkAktifCalisma+0xb58>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005406:	4b91      	ldr	r3, [pc, #580]	; (800564c <checkAktifCalisma+0xb58>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d024      	beq.n	8005458 <checkAktifCalisma+0x964>
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	488d      	ldr	r0, [pc, #564]	; (8005648 <checkAktifCalisma+0xb54>)
 8005412:	f003 fe01 	bl	8009018 <HAL_GPIO_ReadPin>
 8005416:	4603      	mov	r3, r0
 8005418:	2b01      	cmp	r3, #1
 800541a:	d007      	beq.n	800542c <checkAktifCalisma+0x938>
 800541c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005420:	4889      	ldr	r0, [pc, #548]	; (8005648 <checkAktifCalisma+0xb54>)
 8005422:	f003 fdf9 	bl	8009018 <HAL_GPIO_ReadPin>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d115      	bne.n	8005458 <checkAktifCalisma+0x964>
 800542c:	4b88      	ldr	r3, [pc, #544]	; (8005650 <checkAktifCalisma+0xb5c>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <checkAktifCalisma+0x964>
 8005434:	4b87      	ldr	r3, [pc, #540]	; (8005654 <checkAktifCalisma+0xb60>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00d      	beq.n	8005458 <checkAktifCalisma+0x964>
 800543c:	4b86      	ldr	r3, [pc, #536]	; (8005658 <checkAktifCalisma+0xb64>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d006      	beq.n	8005458 <checkAktifCalisma+0x964>
			timer2=millis;
 800544a:	4b84      	ldr	r3, [pc, #528]	; (800565c <checkAktifCalisma+0xb68>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a84      	ldr	r2, [pc, #528]	; (8005660 <checkAktifCalisma+0xb6c>)
 8005450:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005452:	4b81      	ldr	r3, [pc, #516]	; (8005658 <checkAktifCalisma+0xb64>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005458:	4b80      	ldr	r3, [pc, #512]	; (800565c <checkAktifCalisma+0xb68>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b80      	ldr	r3, [pc, #512]	; (8005660 <checkAktifCalisma+0xb6c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	4a80      	ldr	r2, [pc, #512]	; (8005664 <checkAktifCalisma+0xb70>)
 8005464:	7812      	ldrb	r2, [r2, #0]
 8005466:	4293      	cmp	r3, r2
 8005468:	d303      	bcc.n	8005472 <checkAktifCalisma+0x97e>
 800546a:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <checkAktifCalisma+0xb64>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10d      	bne.n	800548e <checkAktifCalisma+0x99a>
 8005472:	4b77      	ldr	r3, [pc, #476]	; (8005650 <checkAktifCalisma+0xb5c>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f083 0301 	eor.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <checkAktifCalisma+0x99a>
 8005480:	4b74      	ldr	r3, [pc, #464]	; (8005654 <checkAktifCalisma+0xb60>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	f083 0301 	eor.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800548e:	2200      	movs	r2, #0
 8005490:	2110      	movs	r1, #16
 8005492:	486d      	ldr	r0, [pc, #436]	; (8005648 <checkAktifCalisma+0xb54>)
 8005494:	f003 fdd7 	bl	8009046 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005498:	4b6c      	ldr	r3, [pc, #432]	; (800564c <checkAktifCalisma+0xb58>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800549e:	4b6e      	ldr	r3, [pc, #440]	; (8005658 <checkAktifCalisma+0xb64>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80054a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054a8:	486f      	ldr	r0, [pc, #444]	; (8005668 <checkAktifCalisma+0xb74>)
 80054aa:	f003 fdb5 	bl	8009018 <HAL_GPIO_ReadPin>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d120      	bne.n	80054f6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80054b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054b8:	486b      	ldr	r0, [pc, #428]	; (8005668 <checkAktifCalisma+0xb74>)
 80054ba:	f003 fdad 	bl	8009018 <HAL_GPIO_ReadPin>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d118      	bne.n	80054f6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80054c4:	2104      	movs	r1, #4
 80054c6:	4868      	ldr	r0, [pc, #416]	; (8005668 <checkAktifCalisma+0xb74>)
 80054c8:	f003 fda6 	bl	8009018 <HAL_GPIO_ReadPin>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d111      	bne.n	80054f6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80054d2:	2102      	movs	r1, #2
 80054d4:	4864      	ldr	r0, [pc, #400]	; (8005668 <checkAktifCalisma+0xb74>)
 80054d6:	f003 fd9f 	bl	8009018 <HAL_GPIO_ReadPin>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80054e0:	2101      	movs	r1, #1
 80054e2:	4861      	ldr	r0, [pc, #388]	; (8005668 <checkAktifCalisma+0xb74>)
 80054e4:	f003 fd98 	bl	8009018 <HAL_GPIO_ReadPin>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <checkAktifCalisma+0xa02>
			makineStop=1;
 80054ee:	4b5f      	ldr	r3, [pc, #380]	; (800566c <checkAktifCalisma+0xb78>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e002      	b.n	80054fc <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80054f6:	4b5d      	ldr	r3, [pc, #372]	; (800566c <checkAktifCalisma+0xb78>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80054fc:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <checkAktifCalisma+0xb7c>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d144      	bne.n	800558e <checkAktifCalisma+0xa9a>
 8005504:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <checkAktifCalisma+0xb80>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d003      	beq.n	8005514 <checkAktifCalisma+0xa20>
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <checkAktifCalisma+0xb80>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d13c      	bne.n	800558e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	484c      	ldr	r0, [pc, #304]	; (8005648 <checkAktifCalisma+0xb54>)
 8005518:	f003 fd7e 	bl	8009018 <HAL_GPIO_ReadPin>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <checkAktifCalisma+0xa36>
 8005522:	4b55      	ldr	r3, [pc, #340]	; (8005678 <checkAktifCalisma+0xb84>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <checkAktifCalisma+0xa4e>
 800552a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800552e:	484e      	ldr	r0, [pc, #312]	; (8005668 <checkAktifCalisma+0xb74>)
 8005530:	f003 fd72 	bl	8009018 <HAL_GPIO_ReadPin>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d129      	bne.n	800558e <checkAktifCalisma+0xa9a>
 800553a:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <checkAktifCalisma+0xb84>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d125      	bne.n	800558e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005542:	2104      	movs	r1, #4
 8005544:	4840      	ldr	r0, [pc, #256]	; (8005648 <checkAktifCalisma+0xb54>)
 8005546:	f003 fd67 	bl	8009018 <HAL_GPIO_ReadPin>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d003      	beq.n	8005558 <checkAktifCalisma+0xa64>
 8005550:	4b4a      	ldr	r3, [pc, #296]	; (800567c <checkAktifCalisma+0xb88>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11a      	bne.n	800558e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005558:	2102      	movs	r1, #2
 800555a:	483b      	ldr	r0, [pc, #236]	; (8005648 <checkAktifCalisma+0xb54>)
 800555c:	f003 fd5c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d113      	bne.n	800558e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005566:	4b46      	ldr	r3, [pc, #280]	; (8005680 <checkAktifCalisma+0xb8c>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f083 0301 	eor.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00c      	beq.n	800558e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005574:	4b3d      	ldr	r3, [pc, #244]	; (800566c <checkAktifCalisma+0xb78>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800557c:	4b41      	ldr	r3, [pc, #260]	; (8005684 <checkAktifCalisma+0xb90>)
 800557e:	2201      	movs	r2, #1
 8005580:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005582:	4b36      	ldr	r3, [pc, #216]	; (800565c <checkAktifCalisma+0xb68>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a40      	ldr	r2, [pc, #256]	; (8005688 <checkAktifCalisma+0xb94>)
 8005588:	6013      	str	r3, [r2, #0]
			bekle();
 800558a:	f7ff f935 	bl	80047f8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800558e:	4b33      	ldr	r3, [pc, #204]	; (800565c <checkAktifCalisma+0xb68>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <checkAktifCalisma+0xb94>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	4a3c      	ldr	r2, [pc, #240]	; (800568c <checkAktifCalisma+0xb98>)
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	4293      	cmp	r3, r2
 800559e:	d211      	bcs.n	80055c4 <checkAktifCalisma+0xad0>
 80055a0:	2104      	movs	r1, #4
 80055a2:	4829      	ldr	r0, [pc, #164]	; (8005648 <checkAktifCalisma+0xb54>)
 80055a4:	f003 fd38 	bl	8009018 <HAL_GPIO_ReadPin>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <checkAktifCalisma+0xad0>
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <checkAktifCalisma+0xb88>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <checkAktifCalisma+0xad0>
 80055b6:	4b2d      	ldr	r3, [pc, #180]	; (800566c <checkAktifCalisma+0xb78>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f083 0301 	eor.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80055c4:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <checkAktifCalisma+0xb90>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <checkAktifCalisma+0xb7c>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d160      	bne.n	8005694 <checkAktifCalisma+0xba0>
 80055d2:	4b28      	ldr	r3, [pc, #160]	; (8005674 <checkAktifCalisma+0xb80>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <checkAktifCalisma+0xaee>
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <checkAktifCalisma+0xb80>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d158      	bne.n	8005694 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80055e2:	2104      	movs	r1, #4
 80055e4:	4818      	ldr	r0, [pc, #96]	; (8005648 <checkAktifCalisma+0xb54>)
 80055e6:	f003 fd17 	bl	8009018 <HAL_GPIO_ReadPin>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d003      	beq.n	80055f8 <checkAktifCalisma+0xb04>
 80055f0:	4b22      	ldr	r3, [pc, #136]	; (800567c <checkAktifCalisma+0xb88>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d14d      	bne.n	8005694 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055f8:	2102      	movs	r1, #2
 80055fa:	4813      	ldr	r0, [pc, #76]	; (8005648 <checkAktifCalisma+0xb54>)
 80055fc:	f003 fd0c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d146      	bne.n	8005694 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005606:	2180      	movs	r1, #128	; 0x80
 8005608:	480f      	ldr	r0, [pc, #60]	; (8005648 <checkAktifCalisma+0xb54>)
 800560a:	f003 fd05 	bl	8009018 <HAL_GPIO_ReadPin>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <checkAktifCalisma+0xb28>
 8005614:	4b18      	ldr	r3, [pc, #96]	; (8005678 <checkAktifCalisma+0xb84>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <checkAktifCalisma+0xb40>
 800561c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005620:	4811      	ldr	r0, [pc, #68]	; (8005668 <checkAktifCalisma+0xb74>)
 8005622:	f003 fcf9 	bl	8009018 <HAL_GPIO_ReadPin>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d133      	bne.n	8005694 <checkAktifCalisma+0xba0>
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <checkAktifCalisma+0xb84>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d12f      	bne.n	8005694 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005634:	4b0d      	ldr	r3, [pc, #52]	; (800566c <checkAktifCalisma+0xb78>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02b      	beq.n	8005694 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <checkAktifCalisma+0xb9c>)
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e02a      	b.n	800569a <checkAktifCalisma+0xba6>
 8005644:	20000233 	.word	0x20000233
 8005648:	40011000 	.word	0x40011000
 800564c:	20000237 	.word	0x20000237
 8005650:	2000024e 	.word	0x2000024e
 8005654:	2000024f 	.word	0x2000024f
 8005658:	2000022f 	.word	0x2000022f
 800565c:	200001d8 	.word	0x200001d8
 8005660:	200001e4 	.word	0x200001e4
 8005664:	20000212 	.word	0x20000212
 8005668:	40010c00 	.word	0x40010c00
 800566c:	2000023e 	.word	0x2000023e
 8005670:	20000205 	.word	0x20000205
 8005674:	20000204 	.word	0x20000204
 8005678:	20000208 	.word	0x20000208
 800567c:	20000202 	.word	0x20000202
 8005680:	2000022b 	.word	0x2000022b
 8005684:	2000023f 	.word	0x2000023f
 8005688:	200001dc 	.word	0x200001dc
 800568c:	20000215 	.word	0x20000215
 8005690:	20000240 	.word	0x20000240
		} else {
			kapi1butonkontrol=0;
 8005694:	4b8b      	ldr	r3, [pc, #556]	; (80058c4 <checkAktifCalisma+0xdd0>)
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800569a:	4b8b      	ldr	r3, [pc, #556]	; (80058c8 <checkAktifCalisma+0xdd4>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d121      	bne.n	80056e6 <checkAktifCalisma+0xbf2>
 80056a2:	4b8a      	ldr	r3, [pc, #552]	; (80058cc <checkAktifCalisma+0xdd8>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d003      	beq.n	80056b2 <checkAktifCalisma+0xbbe>
 80056aa:	4b88      	ldr	r3, [pc, #544]	; (80058cc <checkAktifCalisma+0xdd8>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d119      	bne.n	80056e6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80056b2:	2104      	movs	r1, #4
 80056b4:	4886      	ldr	r0, [pc, #536]	; (80058d0 <checkAktifCalisma+0xddc>)
 80056b6:	f003 fcaf 	bl	8009018 <HAL_GPIO_ReadPin>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d003      	beq.n	80056c8 <checkAktifCalisma+0xbd4>
 80056c0:	4b84      	ldr	r3, [pc, #528]	; (80058d4 <checkAktifCalisma+0xde0>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10e      	bne.n	80056e6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056c8:	2102      	movs	r1, #2
 80056ca:	4881      	ldr	r0, [pc, #516]	; (80058d0 <checkAktifCalisma+0xddc>)
 80056cc:	f003 fca4 	bl	8009018 <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d107      	bne.n	80056e6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80056d6:	4b80      	ldr	r3, [pc, #512]	; (80058d8 <checkAktifCalisma+0xde4>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80056de:	4b7f      	ldr	r3, [pc, #508]	; (80058dc <checkAktifCalisma+0xde8>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e002      	b.n	80056ec <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80056e6:	4b7d      	ldr	r3, [pc, #500]	; (80058dc <checkAktifCalisma+0xde8>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80056ec:	4b75      	ldr	r3, [pc, #468]	; (80058c4 <checkAktifCalisma+0xdd0>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <checkAktifCalisma+0xc10>
 80056f4:	4b79      	ldr	r3, [pc, #484]	; (80058dc <checkAktifCalisma+0xde8>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <checkAktifCalisma+0xc10>
 80056fc:	4b78      	ldr	r3, [pc, #480]	; (80058e0 <checkAktifCalisma+0xdec>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005704:	2201      	movs	r2, #1
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	4876      	ldr	r0, [pc, #472]	; (80058e4 <checkAktifCalisma+0xdf0>)
 800570a:	f003 fc9c 	bl	8009046 <HAL_GPIO_WritePin>
 800570e:	e004      	b.n	800571a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005710:	2200      	movs	r2, #0
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	4873      	ldr	r0, [pc, #460]	; (80058e4 <checkAktifCalisma+0xdf0>)
 8005716:	f003 fc96 	bl	8009046 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800571a:	4b73      	ldr	r3, [pc, #460]	; (80058e8 <checkAktifCalisma+0xdf4>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d141      	bne.n	80057a6 <checkAktifCalisma+0xcb2>
 8005722:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <checkAktifCalisma+0xdd8>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d003      	beq.n	8005732 <checkAktifCalisma+0xc3e>
 800572a:	4b68      	ldr	r3, [pc, #416]	; (80058cc <checkAktifCalisma+0xdd8>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d139      	bne.n	80057a6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005736:	4866      	ldr	r0, [pc, #408]	; (80058d0 <checkAktifCalisma+0xddc>)
 8005738:	f003 fc6e 	bl	8009018 <HAL_GPIO_ReadPin>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <checkAktifCalisma+0xc56>
 8005742:	4b6a      	ldr	r3, [pc, #424]	; (80058ec <checkAktifCalisma+0xdf8>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <checkAktifCalisma+0xc6e>
 800574a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800574e:	4868      	ldr	r0, [pc, #416]	; (80058f0 <checkAktifCalisma+0xdfc>)
 8005750:	f003 fc62 	bl	8009018 <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d125      	bne.n	80057a6 <checkAktifCalisma+0xcb2>
 800575a:	4b64      	ldr	r3, [pc, #400]	; (80058ec <checkAktifCalisma+0xdf8>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d121      	bne.n	80057a6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005762:	2102      	movs	r1, #2
 8005764:	485a      	ldr	r0, [pc, #360]	; (80058d0 <checkAktifCalisma+0xddc>)
 8005766:	f003 fc57 	bl	8009018 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11a      	bne.n	80057a6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005770:	2104      	movs	r1, #4
 8005772:	4857      	ldr	r0, [pc, #348]	; (80058d0 <checkAktifCalisma+0xddc>)
 8005774:	f003 fc50 	bl	8009018 <HAL_GPIO_ReadPin>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d113      	bne.n	80057a6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800577e:	4b56      	ldr	r3, [pc, #344]	; (80058d8 <checkAktifCalisma+0xde4>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00f      	beq.n	80057a6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005786:	4b5b      	ldr	r3, [pc, #364]	; (80058f4 <checkAktifCalisma+0xe00>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	f083 0301 	eor.w	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005794:	4b58      	ldr	r3, [pc, #352]	; (80058f8 <checkAktifCalisma+0xe04>)
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800579a:	4b58      	ldr	r3, [pc, #352]	; (80058fc <checkAktifCalisma+0xe08>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a58      	ldr	r2, [pc, #352]	; (8005900 <checkAktifCalisma+0xe0c>)
 80057a0:	6013      	str	r3, [r2, #0]
			bekle();
 80057a2:	f7ff f829 	bl	80047f8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80057a6:	4b55      	ldr	r3, [pc, #340]	; (80058fc <checkAktifCalisma+0xe08>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b55      	ldr	r3, [pc, #340]	; (8005900 <checkAktifCalisma+0xe0c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	4a54      	ldr	r2, [pc, #336]	; (8005904 <checkAktifCalisma+0xe10>)
 80057b2:	7812      	ldrb	r2, [r2, #0]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d20d      	bcs.n	80057d4 <checkAktifCalisma+0xce0>
 80057b8:	2102      	movs	r1, #2
 80057ba:	4845      	ldr	r0, [pc, #276]	; (80058d0 <checkAktifCalisma+0xddc>)
 80057bc:	f003 fc2c 	bl	8009018 <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <checkAktifCalisma+0xce0>
 80057c6:	4b44      	ldr	r3, [pc, #272]	; (80058d8 <checkAktifCalisma+0xde4>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80057d4:	4b48      	ldr	r3, [pc, #288]	; (80058f8 <checkAktifCalisma+0xe04>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057da:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <checkAktifCalisma+0xdf4>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d135      	bne.n	800584e <checkAktifCalisma+0xd5a>
 80057e2:	4b3a      	ldr	r3, [pc, #232]	; (80058cc <checkAktifCalisma+0xdd8>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d003      	beq.n	80057f2 <checkAktifCalisma+0xcfe>
 80057ea:	4b38      	ldr	r3, [pc, #224]	; (80058cc <checkAktifCalisma+0xdd8>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d12d      	bne.n	800584e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057f6:	4836      	ldr	r0, [pc, #216]	; (80058d0 <checkAktifCalisma+0xddc>)
 80057f8:	f003 fc0e 	bl	8009018 <HAL_GPIO_ReadPin>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <checkAktifCalisma+0xd16>
 8005802:	4b3a      	ldr	r3, [pc, #232]	; (80058ec <checkAktifCalisma+0xdf8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <checkAktifCalisma+0xd2e>
 800580a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800580e:	4838      	ldr	r0, [pc, #224]	; (80058f0 <checkAktifCalisma+0xdfc>)
 8005810:	f003 fc02 	bl	8009018 <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d119      	bne.n	800584e <checkAktifCalisma+0xd5a>
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <checkAktifCalisma+0xdf8>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d115      	bne.n	800584e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005822:	2102      	movs	r1, #2
 8005824:	482a      	ldr	r0, [pc, #168]	; (80058d0 <checkAktifCalisma+0xddc>)
 8005826:	f003 fbf7 	bl	8009018 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10e      	bne.n	800584e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005830:	2104      	movs	r1, #4
 8005832:	4827      	ldr	r0, [pc, #156]	; (80058d0 <checkAktifCalisma+0xddc>)
 8005834:	f003 fbf0 	bl	8009018 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800583e:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <checkAktifCalisma+0xde4>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005846:	4b30      	ldr	r3, [pc, #192]	; (8005908 <checkAktifCalisma+0xe14>)
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e002      	b.n	8005854 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <checkAktifCalisma+0xe14>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <checkAktifCalisma+0xdf4>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11d      	bne.n	8005898 <checkAktifCalisma+0xda4>
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <checkAktifCalisma+0xdd8>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d003      	beq.n	800586c <checkAktifCalisma+0xd78>
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <checkAktifCalisma+0xdd8>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d115      	bne.n	8005898 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800586c:	2102      	movs	r1, #2
 800586e:	4818      	ldr	r0, [pc, #96]	; (80058d0 <checkAktifCalisma+0xddc>)
 8005870:	f003 fbd2 	bl	8009018 <HAL_GPIO_ReadPin>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10e      	bne.n	8005898 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800587a:	2104      	movs	r1, #4
 800587c:	4814      	ldr	r0, [pc, #80]	; (80058d0 <checkAktifCalisma+0xddc>)
 800587e:	f003 fbcb 	bl	8009018 <HAL_GPIO_ReadPin>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005888:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <checkAktifCalisma+0xde4>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <checkAktifCalisma+0xe18>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e002      	b.n	800589e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <checkAktifCalisma+0xe18>)
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800589e:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <checkAktifCalisma+0xe14>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <checkAktifCalisma+0xdc2>
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <checkAktifCalisma+0xe18>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <checkAktifCalisma+0xdc2>
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <checkAktifCalisma+0xe04>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02c      	beq.n	8005910 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80058b6:	2201      	movs	r2, #1
 80058b8:	2140      	movs	r1, #64	; 0x40
 80058ba:	480a      	ldr	r0, [pc, #40]	; (80058e4 <checkAktifCalisma+0xdf0>)
 80058bc:	f003 fbc3 	bl	8009046 <HAL_GPIO_WritePin>
 80058c0:	e02b      	b.n	800591a <checkAktifCalisma+0xe26>
 80058c2:	bf00      	nop
 80058c4:	20000240 	.word	0x20000240
 80058c8:	20000205 	.word	0x20000205
 80058cc:	20000204 	.word	0x20000204
 80058d0:	40011000 	.word	0x40011000
 80058d4:	20000202 	.word	0x20000202
 80058d8:	2000023e 	.word	0x2000023e
 80058dc:	20000241 	.word	0x20000241
 80058e0:	2000023f 	.word	0x2000023f
 80058e4:	40010800 	.word	0x40010800
 80058e8:	20000206 	.word	0x20000206
 80058ec:	20000208 	.word	0x20000208
 80058f0:	40010c00 	.word	0x40010c00
 80058f4:	2000022b 	.word	0x2000022b
 80058f8:	20000242 	.word	0x20000242
 80058fc:	200001d8 	.word	0x200001d8
 8005900:	200001dc 	.word	0x200001dc
 8005904:	20000216 	.word	0x20000216
 8005908:	20000243 	.word	0x20000243
 800590c:	20000244 	.word	0x20000244
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005910:	2200      	movs	r2, #0
 8005912:	2140      	movs	r1, #64	; 0x40
 8005914:	488d      	ldr	r0, [pc, #564]	; (8005b4c <checkAktifCalisma+0x1058>)
 8005916:	f003 fb96 	bl	8009046 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800591a:	4b8d      	ldr	r3, [pc, #564]	; (8005b50 <checkAktifCalisma+0x105c>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <checkAktifCalisma+0xe36>
 8005922:	4b8b      	ldr	r3, [pc, #556]	; (8005b50 <checkAktifCalisma+0x105c>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d115      	bne.n	8005956 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800592a:	2104      	movs	r1, #4
 800592c:	4889      	ldr	r0, [pc, #548]	; (8005b54 <checkAktifCalisma+0x1060>)
 800592e:	f003 fb73 	bl	8009018 <HAL_GPIO_ReadPin>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d003      	beq.n	8005940 <checkAktifCalisma+0xe4c>
 8005938:	4b87      	ldr	r3, [pc, #540]	; (8005b58 <checkAktifCalisma+0x1064>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005940:	2102      	movs	r1, #2
 8005942:	4884      	ldr	r0, [pc, #528]	; (8005b54 <checkAktifCalisma+0x1060>)
 8005944:	f003 fb68 	bl	8009018 <HAL_GPIO_ReadPin>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800594e:	4b83      	ldr	r3, [pc, #524]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005950:	2201      	movs	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e002      	b.n	800595c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005956:	4b81      	ldr	r3, [pc, #516]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800595c:	4b7c      	ldr	r3, [pc, #496]	; (8005b50 <checkAktifCalisma+0x105c>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d003      	beq.n	800596c <checkAktifCalisma+0xe78>
 8005964:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <checkAktifCalisma+0x105c>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d111      	bne.n	8005990 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800596c:	2102      	movs	r1, #2
 800596e:	4879      	ldr	r0, [pc, #484]	; (8005b54 <checkAktifCalisma+0x1060>)
 8005970:	f003 fb52 	bl	8009018 <HAL_GPIO_ReadPin>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10a      	bne.n	8005990 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800597a:	2104      	movs	r1, #4
 800597c:	4875      	ldr	r0, [pc, #468]	; (8005b54 <checkAktifCalisma+0x1060>)
 800597e:	f003 fb4b 	bl	8009018 <HAL_GPIO_ReadPin>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005988:	4b75      	ldr	r3, [pc, #468]	; (8005b60 <checkAktifCalisma+0x106c>)
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e002      	b.n	8005996 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005990:	4b73      	ldr	r3, [pc, #460]	; (8005b60 <checkAktifCalisma+0x106c>)
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005996:	4b71      	ldr	r3, [pc, #452]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00f      	beq.n	80059be <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800599e:	4b71      	ldr	r3, [pc, #452]	; (8005b64 <checkAktifCalisma+0x1070>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10b      	bne.n	80059be <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80059a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059aa:	486f      	ldr	r0, [pc, #444]	; (8005b68 <checkAktifCalisma+0x1074>)
 80059ac:	f003 fb34 	bl	8009018 <HAL_GPIO_ReadPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80059b6:	4b6d      	ldr	r3, [pc, #436]	; (8005b6c <checkAktifCalisma+0x1078>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e002      	b.n	80059c4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80059be:	4b6b      	ldr	r3, [pc, #428]	; (8005b6c <checkAktifCalisma+0x1078>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80059c4:	4b66      	ldr	r3, [pc, #408]	; (8005b60 <checkAktifCalisma+0x106c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80059cc:	4b65      	ldr	r3, [pc, #404]	; (8005b64 <checkAktifCalisma+0x1070>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d10b      	bne.n	80059ec <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80059d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059d8:	4863      	ldr	r0, [pc, #396]	; (8005b68 <checkAktifCalisma+0x1074>)
 80059da:	f003 fb1d 	bl	8009018 <HAL_GPIO_ReadPin>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80059e4:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <checkAktifCalisma+0x107c>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80059ec:	4b60      	ldr	r3, [pc, #384]	; (8005b70 <checkAktifCalisma+0x107c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80059f2:	4b60      	ldr	r3, [pc, #384]	; (8005b74 <checkAktifCalisma+0x1080>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d137      	bne.n	8005a6a <checkAktifCalisma+0xf76>
 80059fa:	4b5f      	ldr	r3, [pc, #380]	; (8005b78 <checkAktifCalisma+0x1084>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d003      	beq.n	8005a0a <checkAktifCalisma+0xf16>
 8005a02:	4b5d      	ldr	r3, [pc, #372]	; (8005b78 <checkAktifCalisma+0x1084>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d12f      	bne.n	8005a6a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005a0a:	4b54      	ldr	r3, [pc, #336]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <checkAktifCalisma+0xf26>
 8005a12:	4b53      	ldr	r3, [pc, #332]	; (8005b60 <checkAktifCalisma+0x106c>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d027      	beq.n	8005a6a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a1e:	484d      	ldr	r0, [pc, #308]	; (8005b54 <checkAktifCalisma+0x1060>)
 8005a20:	f003 fafa 	bl	8009018 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <checkAktifCalisma+0xf3e>
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <checkAktifCalisma+0x1070>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005a32:	4b4e      	ldr	r3, [pc, #312]	; (8005b6c <checkAktifCalisma+0x1078>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <checkAktifCalisma+0xf4e>
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <checkAktifCalisma+0x107c>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d013      	beq.n	8005a6a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005a42:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <checkAktifCalisma+0x1088>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00f      	beq.n	8005a6a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005a4a:	4b4d      	ldr	r3, [pc, #308]	; (8005b80 <checkAktifCalisma+0x108c>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005a58:	4b4a      	ldr	r3, [pc, #296]	; (8005b84 <checkAktifCalisma+0x1090>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a5e:	4b4a      	ldr	r3, [pc, #296]	; (8005b88 <checkAktifCalisma+0x1094>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a4a      	ldr	r2, [pc, #296]	; (8005b8c <checkAktifCalisma+0x1098>)
 8005a64:	6013      	str	r3, [r2, #0]
			bekle();
 8005a66:	f7fe fec7 	bl	80047f8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005a6a:	4b47      	ldr	r3, [pc, #284]	; (8005b88 <checkAktifCalisma+0x1094>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b47      	ldr	r3, [pc, #284]	; (8005b8c <checkAktifCalisma+0x1098>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	4a46      	ldr	r2, [pc, #280]	; (8005b90 <checkAktifCalisma+0x109c>)
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d214      	bcs.n	8005aa6 <checkAktifCalisma+0xfb2>
 8005a7c:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f083 0301 	eor.w	r3, r3, #1
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <checkAktifCalisma+0xfa4>
 8005a8a:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <checkAktifCalisma+0x106c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f083 0301 	eor.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <checkAktifCalisma+0xfb2>
 8005a98:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <checkAktifCalisma+0x1088>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f083 0301 	eor.w	r3, r3, #1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005aa6:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <checkAktifCalisma+0x1090>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005aac:	4b31      	ldr	r3, [pc, #196]	; (8005b74 <checkAktifCalisma+0x1080>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d12b      	bne.n	8005b0c <checkAktifCalisma+0x1018>
 8005ab4:	4b30      	ldr	r3, [pc, #192]	; (8005b78 <checkAktifCalisma+0x1084>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d003      	beq.n	8005ac4 <checkAktifCalisma+0xfd0>
 8005abc:	4b2e      	ldr	r3, [pc, #184]	; (8005b78 <checkAktifCalisma+0x1084>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d123      	bne.n	8005b0c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ac4:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <checkAktifCalisma+0xfe0>
 8005acc:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <checkAktifCalisma+0x106c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01b      	beq.n	8005b0c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ad8:	481e      	ldr	r0, [pc, #120]	; (8005b54 <checkAktifCalisma+0x1060>)
 8005ada:	f003 fa9d 	bl	8009018 <HAL_GPIO_ReadPin>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <checkAktifCalisma+0xff8>
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <checkAktifCalisma+0x1070>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005aec:	4b1f      	ldr	r3, [pc, #124]	; (8005b6c <checkAktifCalisma+0x1078>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <checkAktifCalisma+0x1008>
 8005af4:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <checkAktifCalisma+0x107c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005afc:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <checkAktifCalisma+0x1088>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005b04:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <checkAktifCalisma+0x10a0>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e002      	b.n	8005b12 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005b0c:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <checkAktifCalisma+0x10a0>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b12:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <checkAktifCalisma+0x1080>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d140      	bne.n	8005b9c <checkAktifCalisma+0x10a8>
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <checkAktifCalisma+0x1084>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d003      	beq.n	8005b2a <checkAktifCalisma+0x1036>
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <checkAktifCalisma+0x1084>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d138      	bne.n	8005b9c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <checkAktifCalisma+0x1068>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <checkAktifCalisma+0x1046>
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <checkAktifCalisma+0x106c>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d030      	beq.n	8005b9c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005b3a:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <checkAktifCalisma+0x1088>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d02c      	beq.n	8005b9c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <checkAktifCalisma+0x10a4>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e02b      	b.n	8005ba2 <checkAktifCalisma+0x10ae>
 8005b4a:	bf00      	nop
 8005b4c:	40010800 	.word	0x40010800
 8005b50:	20000209 	.word	0x20000209
 8005b54:	40011000 	.word	0x40011000
 8005b58:	20000202 	.word	0x20000202
 8005b5c:	20000248 	.word	0x20000248
 8005b60:	20000249 	.word	0x20000249
 8005b64:	20000208 	.word	0x20000208
 8005b68:	40010c00 	.word	0x40010c00
 8005b6c:	20000258 	.word	0x20000258
 8005b70:	20000259 	.word	0x20000259
 8005b74:	20000207 	.word	0x20000207
 8005b78:	20000204 	.word	0x20000204
 8005b7c:	2000023e 	.word	0x2000023e
 8005b80:	2000022b 	.word	0x2000022b
 8005b84:	20000245 	.word	0x20000245
 8005b88:	200001d8 	.word	0x200001d8
 8005b8c:	200001dc 	.word	0x200001dc
 8005b90:	20000217 	.word	0x20000217
 8005b94:	20000246 	.word	0x20000246
 8005b98:	20000247 	.word	0x20000247
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005b9c:	4b8b      	ldr	r3, [pc, #556]	; (8005dcc <checkAktifCalisma+0x12d8>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ba2:	4b8b      	ldr	r3, [pc, #556]	; (8005dd0 <checkAktifCalisma+0x12dc>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d107      	bne.n	8005bba <checkAktifCalisma+0x10c6>
 8005baa:	4b8a      	ldr	r3, [pc, #552]	; (8005dd4 <checkAktifCalisma+0x12e0>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <checkAktifCalisma+0x10c6>
 8005bb2:	4b86      	ldr	r3, [pc, #536]	; (8005dcc <checkAktifCalisma+0x12d8>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2120      	movs	r1, #32
 8005bbe:	4886      	ldr	r0, [pc, #536]	; (8005dd8 <checkAktifCalisma+0x12e4>)
 8005bc0:	f003 fa41 	bl	8009046 <HAL_GPIO_WritePin>
 8005bc4:	e004      	b.n	8005bd0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2120      	movs	r1, #32
 8005bca:	4883      	ldr	r0, [pc, #524]	; (8005dd8 <checkAktifCalisma+0x12e4>)
 8005bcc:	f003 fa3b 	bl	8009046 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005bd0:	4b82      	ldr	r3, [pc, #520]	; (8005ddc <checkAktifCalisma+0x12e8>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00e      	beq.n	8005bf6 <checkAktifCalisma+0x1102>
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4881      	ldr	r0, [pc, #516]	; (8005de0 <checkAktifCalisma+0x12ec>)
 8005bdc:	f003 fa1c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <checkAktifCalisma+0x1102>
 8005be6:	4b7f      	ldr	r3, [pc, #508]	; (8005de4 <checkAktifCalisma+0x12f0>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <checkAktifCalisma+0x1102>
 8005bee:	4b7e      	ldr	r3, [pc, #504]	; (8005de8 <checkAktifCalisma+0x12f4>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d112      	bne.n	8005c1c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005bf6:	4b7d      	ldr	r3, [pc, #500]	; (8005dec <checkAktifCalisma+0x12f8>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d066      	beq.n	8005ccc <checkAktifCalisma+0x11d8>
 8005bfe:	2104      	movs	r1, #4
 8005c00:	4877      	ldr	r0, [pc, #476]	; (8005de0 <checkAktifCalisma+0x12ec>)
 8005c02:	f003 fa09 	bl	8009018 <HAL_GPIO_ReadPin>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d15f      	bne.n	8005ccc <checkAktifCalisma+0x11d8>
 8005c0c:	4b75      	ldr	r3, [pc, #468]	; (8005de4 <checkAktifCalisma+0x12f0>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05b      	beq.n	8005ccc <checkAktifCalisma+0x11d8>
 8005c14:	4b74      	ldr	r3, [pc, #464]	; (8005de8 <checkAktifCalisma+0x12f4>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d057      	beq.n	8005ccc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005c1c:	4b74      	ldr	r3, [pc, #464]	; (8005df0 <checkAktifCalisma+0x12fc>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	4b72      	ldr	r3, [pc, #456]	; (8005df0 <checkAktifCalisma+0x12fc>)
 8005c26:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005c28:	4b71      	ldr	r3, [pc, #452]	; (8005df0 <checkAktifCalisma+0x12fc>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b09      	cmp	r3, #9
 8005c2e:	d908      	bls.n	8005c42 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005c30:	4b6f      	ldr	r3, [pc, #444]	; (8005df0 <checkAktifCalisma+0x12fc>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005c36:	4b6f      	ldr	r3, [pc, #444]	; (8005df4 <checkAktifCalisma+0x1300>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	; (8005df4 <checkAktifCalisma+0x1300>)
 8005c40:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005c42:	4b6c      	ldr	r3, [pc, #432]	; (8005df4 <checkAktifCalisma+0x1300>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d908      	bls.n	8005c5c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005c4a:	4b6a      	ldr	r3, [pc, #424]	; (8005df4 <checkAktifCalisma+0x1300>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005c50:	4b69      	ldr	r3, [pc, #420]	; (8005df8 <checkAktifCalisma+0x1304>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	4b67      	ldr	r3, [pc, #412]	; (8005df8 <checkAktifCalisma+0x1304>)
 8005c5a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005c5c:	4b66      	ldr	r3, [pc, #408]	; (8005df8 <checkAktifCalisma+0x1304>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d908      	bls.n	8005c76 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005c64:	4b64      	ldr	r3, [pc, #400]	; (8005df8 <checkAktifCalisma+0x1304>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005c6a:	4b64      	ldr	r3, [pc, #400]	; (8005dfc <checkAktifCalisma+0x1308>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <checkAktifCalisma+0x1308>)
 8005c74:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005c76:	4b61      	ldr	r3, [pc, #388]	; (8005dfc <checkAktifCalisma+0x1308>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b09      	cmp	r3, #9
 8005c7c:	d908      	bls.n	8005c90 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005c7e:	4b5f      	ldr	r3, [pc, #380]	; (8005dfc <checkAktifCalisma+0x1308>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005c84:	4b5e      	ldr	r3, [pc, #376]	; (8005e00 <checkAktifCalisma+0x130c>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	4b5c      	ldr	r3, [pc, #368]	; (8005e00 <checkAktifCalisma+0x130c>)
 8005c8e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005c90:	4b5b      	ldr	r3, [pc, #364]	; (8005e00 <checkAktifCalisma+0x130c>)
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	4b5b      	ldr	r3, [pc, #364]	; (8005e04 <checkAktifCalisma+0x1310>)
 8005c96:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005c9a:	4b58      	ldr	r3, [pc, #352]	; (8005dfc <checkAktifCalisma+0x1308>)
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <checkAktifCalisma+0x1310>)
 8005ca0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005ca2:	4b55      	ldr	r3, [pc, #340]	; (8005df8 <checkAktifCalisma+0x1304>)
 8005ca4:	781a      	ldrb	r2, [r3, #0]
 8005ca6:	4b57      	ldr	r3, [pc, #348]	; (8005e04 <checkAktifCalisma+0x1310>)
 8005ca8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005caa:	4b52      	ldr	r3, [pc, #328]	; (8005df4 <checkAktifCalisma+0x1300>)
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	4b55      	ldr	r3, [pc, #340]	; (8005e04 <checkAktifCalisma+0x1310>)
 8005cb0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <checkAktifCalisma+0x12fc>)
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <checkAktifCalisma+0x1310>)
 8005cb8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005cba:	4b53      	ldr	r3, [pc, #332]	; (8005e08 <checkAktifCalisma+0x1314>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005cc0:	4b46      	ldr	r3, [pc, #280]	; (8005ddc <checkAktifCalisma+0x12e8>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005cc6:	4b49      	ldr	r3, [pc, #292]	; (8005dec <checkAktifCalisma+0x12f8>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cd0:	484e      	ldr	r0, [pc, #312]	; (8005e0c <checkAktifCalisma+0x1318>)
 8005cd2:	f003 f9a1 	bl	8009018 <HAL_GPIO_ReadPin>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d016      	beq.n	8005d0a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ce0:	484a      	ldr	r0, [pc, #296]	; (8005e0c <checkAktifCalisma+0x1318>)
 8005ce2:	f003 f999 	bl	8009018 <HAL_GPIO_ReadPin>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cf0:	4846      	ldr	r0, [pc, #280]	; (8005e0c <checkAktifCalisma+0x1318>)
 8005cf2:	f003 f991 	bl	8009018 <HAL_GPIO_ReadPin>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	4838      	ldr	r0, [pc, #224]	; (8005de0 <checkAktifCalisma+0x12ec>)
 8005d00:	f003 f98a 	bl	8009018 <HAL_GPIO_ReadPin>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <checkAktifCalisma+0x131c>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e002      	b.n	8005d18 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005d12:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <checkAktifCalisma+0x131c>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005d18:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <checkAktifCalisma+0x131c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d016      	beq.n	8005d4e <checkAktifCalisma+0x125a>
 8005d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d24:	4839      	ldr	r0, [pc, #228]	; (8005e0c <checkAktifCalisma+0x1318>)
 8005d26:	f003 f977 	bl	8009018 <HAL_GPIO_ReadPin>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10e      	bne.n	8005d4e <checkAktifCalisma+0x125a>
			hataVar=1;
 8005d30:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <checkAktifCalisma+0x1320>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005d36:	2001      	movs	r0, #1
 8005d38:	f7fa fe98 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	f7fa fe3b 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005d42:	f001 fc3d 	bl	80075c0 <convertAndSendData>
			acilstophatasi=1;
 8005d46:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <checkAktifCalisma+0x1324>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e018      	b.n	8005d80 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005d4e:	4b32      	ldr	r3, [pc, #200]	; (8005e18 <checkAktifCalisma+0x1324>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d014      	beq.n	8005d80 <checkAktifCalisma+0x128c>
 8005d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d5a:	482c      	ldr	r0, [pc, #176]	; (8005e0c <checkAktifCalisma+0x1318>)
 8005d5c:	f003 f95c 	bl	8009018 <HAL_GPIO_ReadPin>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <checkAktifCalisma+0x128c>
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <checkAktifCalisma+0x131c>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f083 0301 	eor.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <checkAktifCalisma+0x1324>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f7fe fce8 	bl	8004750 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005d80:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <checkAktifCalisma+0x1328>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f083 0301 	eor.w	r3, r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04e      	beq.n	8005e2c <checkAktifCalisma+0x1338>
 8005d8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d92:	481e      	ldr	r0, [pc, #120]	; (8005e0c <checkAktifCalisma+0x1318>)
 8005d94:	f003 f940 	bl	8009018 <HAL_GPIO_ReadPin>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <checkAktifCalisma+0x12b2>
 8005d9e:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <checkAktifCalisma+0x132c>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d042      	beq.n	8005e2c <checkAktifCalisma+0x1338>
 8005da6:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <checkAktifCalisma+0x1330>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d13e      	bne.n	8005e2c <checkAktifCalisma+0x1338>
			hataVar=1;
 8005dae:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <checkAktifCalisma+0x1320>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005db4:	2002      	movs	r0, #2
 8005db6:	f7fa fe59 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005dba:	2002      	movs	r0, #2
 8005dbc:	f7fa fdfc 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005dc0:	f001 fbfe 	bl	80075c0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005dc4:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <checkAktifCalisma+0x1334>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e047      	b.n	8005e5c <checkAktifCalisma+0x1368>
 8005dcc:	20000247 	.word	0x20000247
 8005dd0:	20000246 	.word	0x20000246
 8005dd4:	20000245 	.word	0x20000245
 8005dd8:	40010800 	.word	0x40010800
 8005ddc:	2000023b 	.word	0x2000023b
 8005de0:	40011000 	.word	0x40011000
 8005de4:	20000202 	.word	0x20000202
 8005de8:	2000023e 	.word	0x2000023e
 8005dec:	2000023c 	.word	0x2000023c
 8005df0:	200001f9 	.word	0x200001f9
 8005df4:	200001fa 	.word	0x200001fa
 8005df8:	20000008 	.word	0x20000008
 8005dfc:	20000009 	.word	0x20000009
 8005e00:	200001fb 	.word	0x200001fb
 8005e04:	20000128 	.word	0x20000128
 8005e08:	20000228 	.word	0x20000228
 8005e0c:	40010c00 	.word	0x40010c00
 8005e10:	2000024a 	.word	0x2000024a
 8005e14:	20000251 	.word	0x20000251
 8005e18:	2000024c 	.word	0x2000024c
 8005e1c:	20000253 	.word	0x20000253
 8005e20:	2000025d 	.word	0x2000025d
 8005e24:	20000200 	.word	0x20000200
 8005e28:	2000024d 	.word	0x2000024d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005e2c:	4b9b      	ldr	r3, [pc, #620]	; (800609c <checkAktifCalisma+0x15a8>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <checkAktifCalisma+0x1368>
 8005e34:	4b9a      	ldr	r3, [pc, #616]	; (80060a0 <checkAktifCalisma+0x15ac>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00f      	beq.n	8005e5c <checkAktifCalisma+0x1368>
 8005e3c:	4b99      	ldr	r3, [pc, #612]	; (80060a4 <checkAktifCalisma+0x15b0>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f083 0301 	eor.w	r3, r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005e4a:	4b94      	ldr	r3, [pc, #592]	; (800609c <checkAktifCalisma+0x15a8>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005e50:	4b95      	ldr	r3, [pc, #596]	; (80060a8 <checkAktifCalisma+0x15b4>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005e56:	2002      	movs	r0, #2
 8005e58:	f7fe fc7a 	bl	8004750 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005e5c:	4b93      	ldr	r3, [pc, #588]	; (80060ac <checkAktifCalisma+0x15b8>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11e      	bne.n	8005ea2 <checkAktifCalisma+0x13ae>
 8005e64:	4b92      	ldr	r3, [pc, #584]	; (80060b0 <checkAktifCalisma+0x15bc>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d11a      	bne.n	8005ea2 <checkAktifCalisma+0x13ae>
 8005e6c:	4b91      	ldr	r3, [pc, #580]	; (80060b4 <checkAktifCalisma+0x15c0>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d016      	beq.n	8005ea2 <checkAktifCalisma+0x13ae>
 8005e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e78:	488f      	ldr	r0, [pc, #572]	; (80060b8 <checkAktifCalisma+0x15c4>)
 8005e7a:	f003 f8cd 	bl	8009018 <HAL_GPIO_ReadPin>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d10e      	bne.n	8005ea2 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005e84:	4b8d      	ldr	r3, [pc, #564]	; (80060bc <checkAktifCalisma+0x15c8>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005e8a:	2003      	movs	r0, #3
 8005e8c:	f7fa fdee 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005e90:	2003      	movs	r0, #3
 8005e92:	f7fa fd91 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005e96:	f001 fb93 	bl	80075c0 <convertAndSendData>
			basinchatasi=1;
 8005e9a:	4b89      	ldr	r3, [pc, #548]	; (80060c0 <checkAktifCalisma+0x15cc>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e015      	b.n	8005ece <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005ea2:	4b87      	ldr	r3, [pc, #540]	; (80060c0 <checkAktifCalisma+0x15cc>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <checkAktifCalisma+0x13da>
 8005eaa:	4b80      	ldr	r3, [pc, #512]	; (80060ac <checkAktifCalisma+0x15b8>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10d      	bne.n	8005ece <checkAktifCalisma+0x13da>
 8005eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eb6:	4883      	ldr	r0, [pc, #524]	; (80060c4 <checkAktifCalisma+0x15d0>)
 8005eb8:	f003 f8ae 	bl	8009018 <HAL_GPIO_ReadPin>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005ec2:	4b7f      	ldr	r3, [pc, #508]	; (80060c0 <checkAktifCalisma+0x15cc>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005ec8:	2003      	movs	r0, #3
 8005eca:	f7fe fc41 	bl	8004750 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005ece:	4b7e      	ldr	r3, [pc, #504]	; (80060c8 <checkAktifCalisma+0x15d4>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <checkAktifCalisma+0x13ea>
 8005ed6:	4b7d      	ldr	r3, [pc, #500]	; (80060cc <checkAktifCalisma+0x15d8>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01e      	beq.n	8005f1c <checkAktifCalisma+0x1428>
 8005ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ee2:	487b      	ldr	r0, [pc, #492]	; (80060d0 <checkAktifCalisma+0x15dc>)
 8005ee4:	f003 f898 	bl	8009018 <HAL_GPIO_ReadPin>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d116      	bne.n	8005f1c <checkAktifCalisma+0x1428>
 8005eee:	4b79      	ldr	r3, [pc, #484]	; (80060d4 <checkAktifCalisma+0x15e0>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d003      	beq.n	8005efe <checkAktifCalisma+0x140a>
 8005ef6:	4b77      	ldr	r3, [pc, #476]	; (80060d4 <checkAktifCalisma+0x15e0>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d10e      	bne.n	8005f1c <checkAktifCalisma+0x1428>
			hataVar=1;
 8005efe:	4b6f      	ldr	r3, [pc, #444]	; (80060bc <checkAktifCalisma+0x15c8>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005f04:	2004      	movs	r0, #4
 8005f06:	f7fa fdb1 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005f0a:	2004      	movs	r0, #4
 8005f0c:	f7fa fd54 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005f10:	f001 fb56 	bl	80075c0 <convertAndSendData>
			katkapisivicihatasi=1;
 8005f14:	4b70      	ldr	r3, [pc, #448]	; (80060d8 <checkAktifCalisma+0x15e4>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	e01f      	b.n	8005f5c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005f1c:	4b6e      	ldr	r3, [pc, #440]	; (80060d8 <checkAktifCalisma+0x15e4>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <checkAktifCalisma+0x1468>
 8005f24:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <checkAktifCalisma+0x15e8>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d017      	beq.n	8005f5c <checkAktifCalisma+0x1468>
 8005f2c:	4b66      	ldr	r3, [pc, #408]	; (80060c8 <checkAktifCalisma+0x15d4>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f083 0301 	eor.w	r3, r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d010      	beq.n	8005f5c <checkAktifCalisma+0x1468>
 8005f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f3e:	4864      	ldr	r0, [pc, #400]	; (80060d0 <checkAktifCalisma+0x15dc>)
 8005f40:	f003 f86a 	bl	8009018 <HAL_GPIO_ReadPin>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005f4a:	4b63      	ldr	r3, [pc, #396]	; (80060d8 <checkAktifCalisma+0x15e4>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005f50:	4b5e      	ldr	r3, [pc, #376]	; (80060cc <checkAktifCalisma+0x15d8>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005f56:	2004      	movs	r0, #4
 8005f58:	f7fe fbfa 	bl	8004750 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005f5c:	4b5a      	ldr	r3, [pc, #360]	; (80060c8 <checkAktifCalisma+0x15d4>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d103      	bne.n	8005f6c <checkAktifCalisma+0x1478>
 8005f64:	4b5e      	ldr	r3, [pc, #376]	; (80060e0 <checkAktifCalisma+0x15ec>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01e      	beq.n	8005faa <checkAktifCalisma+0x14b6>
 8005f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f70:	4857      	ldr	r0, [pc, #348]	; (80060d0 <checkAktifCalisma+0x15dc>)
 8005f72:	f003 f851 	bl	8009018 <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d116      	bne.n	8005faa <checkAktifCalisma+0x14b6>
 8005f7c:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <checkAktifCalisma+0x15e0>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d003      	beq.n	8005f8c <checkAktifCalisma+0x1498>
 8005f84:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <checkAktifCalisma+0x15e0>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d10e      	bne.n	8005faa <checkAktifCalisma+0x14b6>
			hataVar=1;
 8005f8c:	4b4b      	ldr	r3, [pc, #300]	; (80060bc <checkAktifCalisma+0x15c8>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8005f92:	2005      	movs	r0, #5
 8005f94:	f7fa fd6a 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005f98:	2005      	movs	r0, #5
 8005f9a:	f7fa fd0d 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005f9e:	f001 fb0f 	bl	80075c0 <convertAndSendData>
			tablakapisivicihatasi=1;
 8005fa2:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <checkAktifCalisma+0x15f0>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e023      	b.n	8005ff2 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005faa:	4b4e      	ldr	r3, [pc, #312]	; (80060e4 <checkAktifCalisma+0x15f0>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d01f      	beq.n	8005ff2 <checkAktifCalisma+0x14fe>
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <checkAktifCalisma+0x15e8>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01b      	beq.n	8005ff2 <checkAktifCalisma+0x14fe>
 8005fba:	4b43      	ldr	r3, [pc, #268]	; (80060c8 <checkAktifCalisma+0x15d4>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f083 0301 	eor.w	r3, r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d014      	beq.n	8005ff2 <checkAktifCalisma+0x14fe>
 8005fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fcc:	4840      	ldr	r0, [pc, #256]	; (80060d0 <checkAktifCalisma+0x15dc>)
 8005fce:	f003 f823 	bl	8009018 <HAL_GPIO_ReadPin>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10c      	bne.n	8005ff2 <checkAktifCalisma+0x14fe>
 8005fd8:	4b40      	ldr	r3, [pc, #256]	; (80060dc <checkAktifCalisma+0x15e8>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8005fe0:	4b40      	ldr	r3, [pc, #256]	; (80060e4 <checkAktifCalisma+0x15f0>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8005fe6:	4b3e      	ldr	r3, [pc, #248]	; (80060e0 <checkAktifCalisma+0x15ec>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005fec:	2005      	movs	r0, #5
 8005fee:	f7fe fbaf 	bl	8004750 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8005ff2:	4b30      	ldr	r3, [pc, #192]	; (80060b4 <checkAktifCalisma+0x15c0>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <checkAktifCalisma+0x1516>
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <checkAktifCalisma+0x15b0>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <checkAktifCalisma+0x1516>
 8006002:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <checkAktifCalisma+0x15f4>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800600a:	4b38      	ldr	r3, [pc, #224]	; (80060ec <checkAktifCalisma+0x15f8>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b38      	ldr	r3, [pc, #224]	; (80060f0 <checkAktifCalisma+0x15fc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	4a37      	ldr	r2, [pc, #220]	; (80060f4 <checkAktifCalisma+0x1600>)
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	4293      	cmp	r3, r2
 800601a:	d30d      	bcc.n	8006038 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <checkAktifCalisma+0x15c8>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006022:	2006      	movs	r0, #6
 8006024:	f7fa fd22 	bl	8000a6c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006028:	2006      	movs	r0, #6
 800602a:	f7fa fcc5 	bl	80009b8 <hata2EEPROM>
			  	convertAndSendData();
 800602e:	f001 fac7 	bl	80075c0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006032:	4b31      	ldr	r3, [pc, #196]	; (80060f8 <checkAktifCalisma+0x1604>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006038:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <checkAktifCalisma+0x1604>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <checkAktifCalisma+0x1574>
 8006040:	2108      	movs	r1, #8
 8006042:	4823      	ldr	r0, [pc, #140]	; (80060d0 <checkAktifCalisma+0x15dc>)
 8006044:	f002 ffe8 	bl	8009018 <HAL_GPIO_ReadPin>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <checkAktifCalisma+0x1574>
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <checkAktifCalisma+0x15d4>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f083 0301 	eor.w	r3, r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800605c:	4b26      	ldr	r3, [pc, #152]	; (80060f8 <checkAktifCalisma+0x1604>)
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006062:	2006      	movs	r0, #6
 8006064:	f7fe fb74 	bl	8004750 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006068:	4b24      	ldr	r3, [pc, #144]	; (80060fc <checkAktifCalisma+0x1608>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <checkAktifCalisma+0x1594>
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <checkAktifCalisma+0x15b0>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <checkAktifCalisma+0x1594>
 8006078:	4b21      	ldr	r3, [pc, #132]	; (8006100 <checkAktifCalisma+0x160c>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <checkAktifCalisma+0x1594>
 8006080:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <checkAktifCalisma+0x15f4>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d03f      	beq.n	8006108 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <checkAktifCalisma+0x1610>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <checkAktifCalisma+0x15d8>)
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <checkAktifCalisma+0x15ec>)
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e03c      	b.n	8006116 <checkAktifCalisma+0x1622>
 800609c:	2000024d 	.word	0x2000024d
 80060a0:	20000253 	.word	0x20000253
 80060a4:	20000234 	.word	0x20000234
 80060a8:	2000025d 	.word	0x2000025d
 80060ac:	200001ff 	.word	0x200001ff
 80060b0:	20000203 	.word	0x20000203
 80060b4:	20000250 	.word	0x20000250
 80060b8:	40011000 	.word	0x40011000
 80060bc:	20000251 	.word	0x20000251
 80060c0:	2000025a 	.word	0x2000025a
 80060c4:	40010c00 	.word	0x40010c00
 80060c8:	2000024a 	.word	0x2000024a
 80060cc:	2000025e 	.word	0x2000025e
 80060d0:	40010800 	.word	0x40010800
 80060d4:	20000204 	.word	0x20000204
 80060d8:	2000025b 	.word	0x2000025b
 80060dc:	2000023e 	.word	0x2000023e
 80060e0:	2000025f 	.word	0x2000025f
 80060e4:	2000025c 	.word	0x2000025c
 80060e8:	20000233 	.word	0x20000233
 80060ec:	200001d8 	.word	0x200001d8
 80060f0:	200001ec 	.word	0x200001ec
 80060f4:	20000214 	.word	0x20000214
 80060f8:	2000024b 	.word	0x2000024b
 80060fc:	20000231 	.word	0x20000231
 8006100:	20000232 	.word	0x20000232
 8006104:	20000252 	.word	0x20000252
		} else {
			makineCalisiyor=1;
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <checkAktifCalisma+0x1690>)
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800610e:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <checkAktifCalisma+0x1694>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <checkAktifCalisma+0x1698>)
 8006114:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006116:	4b1e      	ldr	r3, [pc, #120]	; (8006190 <checkAktifCalisma+0x169c>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d02f      	beq.n	800617e <checkAktifCalisma+0x168a>
 800611e:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <checkAktifCalisma+0x16a0>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	f083 0301 	eor.w	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d028      	beq.n	800617e <checkAktifCalisma+0x168a>
 800612c:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <checkAktifCalisma+0x16a4>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f083 0301 	eor.w	r3, r3, #1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d021      	beq.n	800617e <checkAktifCalisma+0x168a>
 800613a:	4b18      	ldr	r3, [pc, #96]	; (800619c <checkAktifCalisma+0x16a8>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f083 0301 	eor.w	r3, r3, #1
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01a      	beq.n	800617e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <checkAktifCalisma+0x16ac>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f083 0301 	eor.w	r3, r3, #1
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <checkAktifCalisma+0x168a>
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <checkAktifCalisma+0x16b0>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f083 0301 	eor.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00c      	beq.n	800617e <checkAktifCalisma+0x168a>
 8006164:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <checkAktifCalisma+0x16b4>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006172:	4b07      	ldr	r3, [pc, #28]	; (8006190 <checkAktifCalisma+0x169c>)
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006178:	2007      	movs	r0, #7
 800617a:	f7fe fae9 	bl	8004750 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000252 	.word	0x20000252
 8006188:	200001d8 	.word	0x200001d8
 800618c:	200001ec 	.word	0x200001ec
 8006190:	20000251 	.word	0x20000251
 8006194:	2000024c 	.word	0x2000024c
 8006198:	2000024d 	.word	0x2000024d
 800619c:	2000025a 	.word	0x2000025a
 80061a0:	2000025b 	.word	0x2000025b
 80061a4:	2000025c 	.word	0x2000025c
 80061a8:	2000024b 	.word	0x2000024b

080061ac <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80061b0:	4b8b      	ldr	r3, [pc, #556]	; (80063e0 <checkDemoModCalisma+0x234>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 8229 	bne.w	800660c <checkDemoModCalisma+0x460>
 80061ba:	4b8a      	ldr	r3, [pc, #552]	; (80063e4 <checkDemoModCalisma+0x238>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8224 	beq.w	800660c <checkDemoModCalisma+0x460>
 80061c4:	4b88      	ldr	r3, [pc, #544]	; (80063e8 <checkDemoModCalisma+0x23c>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 821f 	bne.w	800660c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80061ce:	2102      	movs	r1, #2
 80061d0:	4886      	ldr	r0, [pc, #536]	; (80063ec <checkDemoModCalisma+0x240>)
 80061d2:	f002 ff21 	bl	8009018 <HAL_GPIO_ReadPin>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11d      	bne.n	8006218 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80061dc:	4b84      	ldr	r3, [pc, #528]	; (80063f0 <checkDemoModCalisma+0x244>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f083 0301 	eor.w	r3, r3, #1
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80061ea:	4b82      	ldr	r3, [pc, #520]	; (80063f4 <checkDemoModCalisma+0x248>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f083 0301 	eor.w	r3, r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80061f8:	4b7f      	ldr	r3, [pc, #508]	; (80063f8 <checkDemoModCalisma+0x24c>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f083 0301 	eor.w	r3, r3, #1
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006206:	2201      	movs	r2, #1
 8006208:	2104      	movs	r1, #4
 800620a:	487c      	ldr	r0, [pc, #496]	; (80063fc <checkDemoModCalisma+0x250>)
 800620c:	f002 ff1b 	bl	8009046 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006210:	4b7b      	ldr	r3, [pc, #492]	; (8006400 <checkDemoModCalisma+0x254>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e00e      	b.n	8006236 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006218:	2102      	movs	r1, #2
 800621a:	4874      	ldr	r0, [pc, #464]	; (80063ec <checkDemoModCalisma+0x240>)
 800621c:	f002 fefc 	bl	8009018 <HAL_GPIO_ReadPin>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006226:	2200      	movs	r2, #0
 8006228:	2104      	movs	r1, #4
 800622a:	4874      	ldr	r0, [pc, #464]	; (80063fc <checkDemoModCalisma+0x250>)
 800622c:	f002 ff0b 	bl	8009046 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006230:	4b73      	ldr	r3, [pc, #460]	; (8006400 <checkDemoModCalisma+0x254>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006236:	4b72      	ldr	r3, [pc, #456]	; (8006400 <checkDemoModCalisma+0x254>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10b      	bne.n	8006256 <checkDemoModCalisma+0xaa>
 800623e:	4b6d      	ldr	r3, [pc, #436]	; (80063f4 <checkDemoModCalisma+0x248>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d107      	bne.n	8006256 <checkDemoModCalisma+0xaa>
 8006246:	4b6c      	ldr	r3, [pc, #432]	; (80063f8 <checkDemoModCalisma+0x24c>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <checkDemoModCalisma+0xaa>
 800624e:	4b68      	ldr	r3, [pc, #416]	; (80063f0 <checkDemoModCalisma+0x244>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006256:	2201      	movs	r2, #1
 8006258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800625c:	4867      	ldr	r0, [pc, #412]	; (80063fc <checkDemoModCalisma+0x250>)
 800625e:	f002 fef2 	bl	8009046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006262:	2201      	movs	r2, #1
 8006264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006268:	4864      	ldr	r0, [pc, #400]	; (80063fc <checkDemoModCalisma+0x250>)
 800626a:	f002 feec 	bl	8009046 <HAL_GPIO_WritePin>
 800626e:	e00b      	b.n	8006288 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006276:	4861      	ldr	r0, [pc, #388]	; (80063fc <checkDemoModCalisma+0x250>)
 8006278:	f002 fee5 	bl	8009046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800627c:	2200      	movs	r2, #0
 800627e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006282:	485e      	ldr	r0, [pc, #376]	; (80063fc <checkDemoModCalisma+0x250>)
 8006284:	f002 fedf 	bl	8009046 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006288:	2102      	movs	r1, #2
 800628a:	4858      	ldr	r0, [pc, #352]	; (80063ec <checkDemoModCalisma+0x240>)
 800628c:	f002 fec4 	bl	8009018 <HAL_GPIO_ReadPin>
 8006290:	4603      	mov	r3, r0
 8006292:	2b01      	cmp	r3, #1
 8006294:	d10d      	bne.n	80062b2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800629a:	4854      	ldr	r0, [pc, #336]	; (80063ec <checkDemoModCalisma+0x240>)
 800629c:	f002 febc 	bl	8009018 <HAL_GPIO_ReadPin>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80062a6:	4b56      	ldr	r3, [pc, #344]	; (8006400 <checkDemoModCalisma+0x254>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f083 0301 	eor.w	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062b2:	2102      	movs	r1, #2
 80062b4:	484d      	ldr	r0, [pc, #308]	; (80063ec <checkDemoModCalisma+0x240>)
 80062b6:	f002 feaf 	bl	8009018 <HAL_GPIO_ReadPin>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d125      	bne.n	800630c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80062c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062c4:	4849      	ldr	r0, [pc, #292]	; (80063ec <checkDemoModCalisma+0x240>)
 80062c6:	f002 fea7 	bl	8009018 <HAL_GPIO_ReadPin>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d11d      	bne.n	800630c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80062d0:	4b4b      	ldr	r3, [pc, #300]	; (8006400 <checkDemoModCalisma+0x254>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f083 0301 	eor.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80062de:	4b44      	ldr	r3, [pc, #272]	; (80063f0 <checkDemoModCalisma+0x244>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f083 0301 	eor.w	r3, r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80062ec:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <checkDemoModCalisma+0x24c>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f083 0301 	eor.w	r3, r3, #1
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80062fa:	2201      	movs	r2, #1
 80062fc:	2120      	movs	r1, #32
 80062fe:	483b      	ldr	r0, [pc, #236]	; (80063ec <checkDemoModCalisma+0x240>)
 8006300:	f002 fea1 	bl	8009046 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006304:	4b3b      	ldr	r3, [pc, #236]	; (80063f4 <checkDemoModCalisma+0x248>)
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e007      	b.n	800631c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800630c:	2200      	movs	r2, #0
 800630e:	2120      	movs	r1, #32
 8006310:	4836      	ldr	r0, [pc, #216]	; (80063ec <checkDemoModCalisma+0x240>)
 8006312:	f002 fe98 	bl	8009046 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006316:	4b37      	ldr	r3, [pc, #220]	; (80063f4 <checkDemoModCalisma+0x248>)
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800631c:	2102      	movs	r1, #2
 800631e:	4833      	ldr	r0, [pc, #204]	; (80063ec <checkDemoModCalisma+0x240>)
 8006320:	f002 fe7a 	bl	8009018 <HAL_GPIO_ReadPin>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d125      	bne.n	8006376 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800632a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800632e:	482f      	ldr	r0, [pc, #188]	; (80063ec <checkDemoModCalisma+0x240>)
 8006330:	f002 fe72 	bl	8009018 <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d11d      	bne.n	8006376 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800633a:	4b31      	ldr	r3, [pc, #196]	; (8006400 <checkDemoModCalisma+0x254>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f083 0301 	eor.w	r3, r3, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d016      	beq.n	8006376 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006348:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <checkDemoModCalisma+0x248>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f083 0301 	eor.w	r3, r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00f      	beq.n	8006376 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006356:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <checkDemoModCalisma+0x244>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f083 0301 	eor.w	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006364:	2201      	movs	r2, #1
 8006366:	2110      	movs	r1, #16
 8006368:	4820      	ldr	r0, [pc, #128]	; (80063ec <checkDemoModCalisma+0x240>)
 800636a:	f002 fe6c 	bl	8009046 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800636e:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <checkDemoModCalisma+0x24c>)
 8006370:	2201      	movs	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e007      	b.n	8006386 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006376:	2200      	movs	r2, #0
 8006378:	2110      	movs	r1, #16
 800637a:	481c      	ldr	r0, [pc, #112]	; (80063ec <checkDemoModCalisma+0x240>)
 800637c:	f002 fe63 	bl	8009046 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006380:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <checkDemoModCalisma+0x24c>)
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006386:	2104      	movs	r1, #4
 8006388:	4818      	ldr	r0, [pc, #96]	; (80063ec <checkDemoModCalisma+0x240>)
 800638a:	f002 fe45 	bl	8009018 <HAL_GPIO_ReadPin>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d139      	bne.n	8006408 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <checkDemoModCalisma+0x254>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f083 0301 	eor.w	r3, r3, #1
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d032      	beq.n	8006408 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80063a2:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <checkDemoModCalisma+0x24c>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f083 0301 	eor.w	r3, r3, #1
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d02b      	beq.n	8006408 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <checkDemoModCalisma+0x248>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f083 0301 	eor.w	r3, r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d024      	beq.n	8006408 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80063be:	2201      	movs	r2, #1
 80063c0:	2102      	movs	r1, #2
 80063c2:	480e      	ldr	r0, [pc, #56]	; (80063fc <checkDemoModCalisma+0x250>)
 80063c4:	f002 fe3f 	bl	8009046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80063c8:	2201      	movs	r2, #1
 80063ca:	2101      	movs	r1, #1
 80063cc:	480b      	ldr	r0, [pc, #44]	; (80063fc <checkDemoModCalisma+0x250>)
 80063ce:	f002 fe3a 	bl	8009046 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80063d2:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <checkDemoModCalisma+0x244>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <checkDemoModCalisma+0x258>)
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e027      	b.n	8006430 <checkDemoModCalisma+0x284>
 80063e0:	2000021a 	.word	0x2000021a
 80063e4:	2000024e 	.word	0x2000024e
 80063e8:	20000219 	.word	0x20000219
 80063ec:	40011000 	.word	0x40011000
 80063f0:	20000255 	.word	0x20000255
 80063f4:	20000256 	.word	0x20000256
 80063f8:	20000257 	.word	0x20000257
 80063fc:	40010c00 	.word	0x40010c00
 8006400:	20000254 	.word	0x20000254
 8006404:	2000023a 	.word	0x2000023a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006408:	2104      	movs	r1, #4
 800640a:	48a0      	ldr	r0, [pc, #640]	; (800668c <checkDemoModCalisma+0x4e0>)
 800640c:	f002 fe04 	bl	8009018 <HAL_GPIO_ReadPin>
 8006410:	4603      	mov	r3, r0
 8006412:	2b01      	cmp	r3, #1
 8006414:	d10c      	bne.n	8006430 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006416:	2200      	movs	r2, #0
 8006418:	2102      	movs	r1, #2
 800641a:	489d      	ldr	r0, [pc, #628]	; (8006690 <checkDemoModCalisma+0x4e4>)
 800641c:	f002 fe13 	bl	8009046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006420:	2200      	movs	r2, #0
 8006422:	2101      	movs	r1, #1
 8006424:	489a      	ldr	r0, [pc, #616]	; (8006690 <checkDemoModCalisma+0x4e4>)
 8006426:	f002 fe0e 	bl	8009046 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800642a:	4b9a      	ldr	r3, [pc, #616]	; (8006694 <checkDemoModCalisma+0x4e8>)
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006430:	2104      	movs	r1, #4
 8006432:	4896      	ldr	r0, [pc, #600]	; (800668c <checkDemoModCalisma+0x4e0>)
 8006434:	f002 fdf0 	bl	8009018 <HAL_GPIO_ReadPin>
 8006438:	4603      	mov	r3, r0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10d      	bne.n	800645a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800643e:	2201      	movs	r2, #1
 8006440:	2180      	movs	r1, #128	; 0x80
 8006442:	4895      	ldr	r0, [pc, #596]	; (8006698 <checkDemoModCalisma+0x4ec>)
 8006444:	f002 fdff 	bl	8009046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006448:	2201      	movs	r2, #1
 800644a:	2120      	movs	r1, #32
 800644c:	4892      	ldr	r0, [pc, #584]	; (8006698 <checkDemoModCalisma+0x4ec>)
 800644e:	f002 fdfa 	bl	8009046 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006452:	4b92      	ldr	r3, [pc, #584]	; (800669c <checkDemoModCalisma+0x4f0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a92      	ldr	r2, [pc, #584]	; (80066a0 <checkDemoModCalisma+0x4f4>)
 8006458:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800645a:	4b90      	ldr	r3, [pc, #576]	; (800669c <checkDemoModCalisma+0x4f0>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b90      	ldr	r3, [pc, #576]	; (80066a0 <checkDemoModCalisma+0x4f4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b04      	cmp	r3, #4
 8006466:	d909      	bls.n	800647c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006468:	2200      	movs	r2, #0
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	488a      	ldr	r0, [pc, #552]	; (8006698 <checkDemoModCalisma+0x4ec>)
 800646e:	f002 fdea 	bl	8009046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006472:	2200      	movs	r2, #0
 8006474:	2120      	movs	r1, #32
 8006476:	4888      	ldr	r0, [pc, #544]	; (8006698 <checkDemoModCalisma+0x4ec>)
 8006478:	f002 fde5 	bl	8009046 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800647c:	2102      	movs	r1, #2
 800647e:	4883      	ldr	r0, [pc, #524]	; (800668c <checkDemoModCalisma+0x4e0>)
 8006480:	f002 fdca 	bl	8009018 <HAL_GPIO_ReadPin>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d108      	bne.n	800649c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800648a:	2201      	movs	r2, #1
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	4882      	ldr	r0, [pc, #520]	; (8006698 <checkDemoModCalisma+0x4ec>)
 8006490:	f002 fdd9 	bl	8009046 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006494:	4b81      	ldr	r3, [pc, #516]	; (800669c <checkDemoModCalisma+0x4f0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a81      	ldr	r2, [pc, #516]	; (80066a0 <checkDemoModCalisma+0x4f4>)
 800649a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800649c:	4b7f      	ldr	r3, [pc, #508]	; (800669c <checkDemoModCalisma+0x4f0>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b7f      	ldr	r3, [pc, #508]	; (80066a0 <checkDemoModCalisma+0x4f4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d904      	bls.n	80064b4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80064aa:	2200      	movs	r2, #0
 80064ac:	2140      	movs	r1, #64	; 0x40
 80064ae:	487a      	ldr	r0, [pc, #488]	; (8006698 <checkDemoModCalisma+0x4ec>)
 80064b0:	f002 fdc9 	bl	8009046 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80064b4:	4b7b      	ldr	r3, [pc, #492]	; (80066a4 <checkDemoModCalisma+0x4f8>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d058      	beq.n	800656e <checkDemoModCalisma+0x3c2>
 80064bc:	4b7a      	ldr	r3, [pc, #488]	; (80066a8 <checkDemoModCalisma+0x4fc>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d054      	beq.n	800656e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80064c4:	4b79      	ldr	r3, [pc, #484]	; (80066ac <checkDemoModCalisma+0x500>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	4b77      	ldr	r3, [pc, #476]	; (80066ac <checkDemoModCalisma+0x500>)
 80064ce:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80064d0:	4b76      	ldr	r3, [pc, #472]	; (80066ac <checkDemoModCalisma+0x500>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b09      	cmp	r3, #9
 80064d6:	d908      	bls.n	80064ea <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80064d8:	4b74      	ldr	r3, [pc, #464]	; (80066ac <checkDemoModCalisma+0x500>)
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80064de:	4b74      	ldr	r3, [pc, #464]	; (80066b0 <checkDemoModCalisma+0x504>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4b72      	ldr	r3, [pc, #456]	; (80066b0 <checkDemoModCalisma+0x504>)
 80064e8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80064ea:	4b71      	ldr	r3, [pc, #452]	; (80066b0 <checkDemoModCalisma+0x504>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d908      	bls.n	8006504 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80064f2:	4b6f      	ldr	r3, [pc, #444]	; (80066b0 <checkDemoModCalisma+0x504>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80064f8:	4b6e      	ldr	r3, [pc, #440]	; (80066b4 <checkDemoModCalisma+0x508>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	4b6c      	ldr	r3, [pc, #432]	; (80066b4 <checkDemoModCalisma+0x508>)
 8006502:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006504:	4b6b      	ldr	r3, [pc, #428]	; (80066b4 <checkDemoModCalisma+0x508>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b09      	cmp	r3, #9
 800650a:	d908      	bls.n	800651e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 800650c:	4b69      	ldr	r3, [pc, #420]	; (80066b4 <checkDemoModCalisma+0x508>)
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006512:	4b69      	ldr	r3, [pc, #420]	; (80066b8 <checkDemoModCalisma+0x50c>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b67      	ldr	r3, [pc, #412]	; (80066b8 <checkDemoModCalisma+0x50c>)
 800651c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800651e:	4b66      	ldr	r3, [pc, #408]	; (80066b8 <checkDemoModCalisma+0x50c>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b09      	cmp	r3, #9
 8006524:	d908      	bls.n	8006538 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006526:	4b64      	ldr	r3, [pc, #400]	; (80066b8 <checkDemoModCalisma+0x50c>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800652c:	4b63      	ldr	r3, [pc, #396]	; (80066bc <checkDemoModCalisma+0x510>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	b2da      	uxtb	r2, r3
 8006534:	4b61      	ldr	r3, [pc, #388]	; (80066bc <checkDemoModCalisma+0x510>)
 8006536:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006538:	4b60      	ldr	r3, [pc, #384]	; (80066bc <checkDemoModCalisma+0x510>)
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	4b60      	ldr	r3, [pc, #384]	; (80066c0 <checkDemoModCalisma+0x514>)
 800653e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006542:	4b5d      	ldr	r3, [pc, #372]	; (80066b8 <checkDemoModCalisma+0x50c>)
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	4b5e      	ldr	r3, [pc, #376]	; (80066c0 <checkDemoModCalisma+0x514>)
 8006548:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800654a:	4b5a      	ldr	r3, [pc, #360]	; (80066b4 <checkDemoModCalisma+0x508>)
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <checkDemoModCalisma+0x514>)
 8006550:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006552:	4b57      	ldr	r3, [pc, #348]	; (80066b0 <checkDemoModCalisma+0x504>)
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	4b5a      	ldr	r3, [pc, #360]	; (80066c0 <checkDemoModCalisma+0x514>)
 8006558:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800655a:	4b54      	ldr	r3, [pc, #336]	; (80066ac <checkDemoModCalisma+0x500>)
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	4b58      	ldr	r3, [pc, #352]	; (80066c0 <checkDemoModCalisma+0x514>)
 8006560:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006562:	4b58      	ldr	r3, [pc, #352]	; (80066c4 <checkDemoModCalisma+0x518>)
 8006564:	2201      	movs	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006568:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <checkDemoModCalisma+0x4fc>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800656e:	4b56      	ldr	r3, [pc, #344]	; (80066c8 <checkDemoModCalisma+0x51c>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 8087 	bne.w	8006686 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006578:	4a54      	ldr	r2, [pc, #336]	; (80066cc <checkDemoModCalisma+0x520>)
 800657a:	2101      	movs	r1, #1
 800657c:	2002      	movs	r0, #2
 800657e:	f001 fa25 	bl	80079cc <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006582:	4a53      	ldr	r2, [pc, #332]	; (80066d0 <checkDemoModCalisma+0x524>)
 8006584:	2101      	movs	r1, #1
 8006586:	2001      	movs	r0, #1
 8006588:	f001 fa20 	bl	80079cc <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <checkDemoModCalisma+0x510>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	220a      	movs	r2, #10
 8006592:	4950      	ldr	r1, [pc, #320]	; (80066d4 <checkDemoModCalisma+0x528>)
 8006594:	4618      	mov	r0, r3
 8006596:	f005 fd6b 	bl	800c070 <itoa>
			lcd_print(2,12,snum);
 800659a:	4a4e      	ldr	r2, [pc, #312]	; (80066d4 <checkDemoModCalisma+0x528>)
 800659c:	210c      	movs	r1, #12
 800659e:	2002      	movs	r0, #2
 80065a0:	f001 fa14 	bl	80079cc <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80065a4:	4b44      	ldr	r3, [pc, #272]	; (80066b8 <checkDemoModCalisma+0x50c>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	220a      	movs	r2, #10
 80065aa:	494a      	ldr	r1, [pc, #296]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f005 fd5f 	bl	800c070 <itoa>
			lcd_print(2,13,snum);
 80065b2:	4a48      	ldr	r2, [pc, #288]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065b4:	210d      	movs	r1, #13
 80065b6:	2002      	movs	r0, #2
 80065b8:	f001 fa08 	bl	80079cc <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80065bc:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <checkDemoModCalisma+0x508>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	220a      	movs	r2, #10
 80065c2:	4944      	ldr	r1, [pc, #272]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065c4:	4618      	mov	r0, r3
 80065c6:	f005 fd53 	bl	800c070 <itoa>
			lcd_print(2,14,snum);
 80065ca:	4a42      	ldr	r2, [pc, #264]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065cc:	210e      	movs	r1, #14
 80065ce:	2002      	movs	r0, #2
 80065d0:	f001 f9fc 	bl	80079cc <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80065d4:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <checkDemoModCalisma+0x504>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	220a      	movs	r2, #10
 80065da:	493e      	ldr	r1, [pc, #248]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065dc:	4618      	mov	r0, r3
 80065de:	f005 fd47 	bl	800c070 <itoa>
			lcd_print(2,15,snum);
 80065e2:	4a3c      	ldr	r2, [pc, #240]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065e4:	210f      	movs	r1, #15
 80065e6:	2002      	movs	r0, #2
 80065e8:	f001 f9f0 	bl	80079cc <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80065ec:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <checkDemoModCalisma+0x500>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	220a      	movs	r2, #10
 80065f2:	4938      	ldr	r1, [pc, #224]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065f4:	4618      	mov	r0, r3
 80065f6:	f005 fd3b 	bl	800c070 <itoa>
			lcd_print(2,16,snum);
 80065fa:	4a36      	ldr	r2, [pc, #216]	; (80066d4 <checkDemoModCalisma+0x528>)
 80065fc:	2110      	movs	r1, #16
 80065fe:	2002      	movs	r0, #2
 8006600:	f001 f9e4 	bl	80079cc <lcd_print>
			mesajYazildi=1;
 8006604:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <checkDemoModCalisma+0x52c>)
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800660a:	e03c      	b.n	8006686 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800660c:	4b33      	ldr	r3, [pc, #204]	; (80066dc <checkDemoModCalisma+0x530>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d003      	beq.n	800661c <checkDemoModCalisma+0x470>
 8006614:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <checkDemoModCalisma+0x51c>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d134      	bne.n	8006686 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800661c:	2200      	movs	r2, #0
 800661e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006622:	481b      	ldr	r0, [pc, #108]	; (8006690 <checkDemoModCalisma+0x4e4>)
 8006624:	f002 fd0f 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006628:	2200      	movs	r2, #0
 800662a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800662e:	4818      	ldr	r0, [pc, #96]	; (8006690 <checkDemoModCalisma+0x4e4>)
 8006630:	f002 fd09 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006634:	2200      	movs	r2, #0
 8006636:	2104      	movs	r1, #4
 8006638:	4815      	ldr	r0, [pc, #84]	; (8006690 <checkDemoModCalisma+0x4e4>)
 800663a:	f002 fd04 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800663e:	2200      	movs	r2, #0
 8006640:	2102      	movs	r1, #2
 8006642:	4813      	ldr	r0, [pc, #76]	; (8006690 <checkDemoModCalisma+0x4e4>)
 8006644:	f002 fcff 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006648:	2200      	movs	r2, #0
 800664a:	2101      	movs	r1, #1
 800664c:	4810      	ldr	r0, [pc, #64]	; (8006690 <checkDemoModCalisma+0x4e4>)
 800664e:	f002 fcfa 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006652:	2200      	movs	r2, #0
 8006654:	2120      	movs	r1, #32
 8006656:	480d      	ldr	r0, [pc, #52]	; (800668c <checkDemoModCalisma+0x4e0>)
 8006658:	f002 fcf5 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800665c:	2200      	movs	r2, #0
 800665e:	2110      	movs	r1, #16
 8006660:	480a      	ldr	r0, [pc, #40]	; (800668c <checkDemoModCalisma+0x4e0>)
 8006662:	f002 fcf0 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006666:	2200      	movs	r2, #0
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	480b      	ldr	r0, [pc, #44]	; (8006698 <checkDemoModCalisma+0x4ec>)
 800666c:	f002 fceb 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006670:	2200      	movs	r2, #0
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	4808      	ldr	r0, [pc, #32]	; (8006698 <checkDemoModCalisma+0x4ec>)
 8006676:	f002 fce6 	bl	8009046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800667a:	2200      	movs	r2, #0
 800667c:	2120      	movs	r1, #32
 800667e:	4806      	ldr	r0, [pc, #24]	; (8006698 <checkDemoModCalisma+0x4ec>)
 8006680:	f002 fce1 	bl	8009046 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006684:	e7ff      	b.n	8006686 <checkDemoModCalisma+0x4da>
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40011000 	.word	0x40011000
 8006690:	40010c00 	.word	0x40010c00
 8006694:	20000255 	.word	0x20000255
 8006698:	40010800 	.word	0x40010800
 800669c:	200001d8 	.word	0x200001d8
 80066a0:	200001e8 	.word	0x200001e8
 80066a4:	20000254 	.word	0x20000254
 80066a8:	2000023a 	.word	0x2000023a
 80066ac:	200001f9 	.word	0x200001f9
 80066b0:	200001fa 	.word	0x200001fa
 80066b4:	20000008 	.word	0x20000008
 80066b8:	20000009 	.word	0x20000009
 80066bc:	200001fb 	.word	0x200001fb
 80066c0:	20000128 	.word	0x20000128
 80066c4:	20000228 	.word	0x20000228
 80066c8:	20000219 	.word	0x20000219
 80066cc:	0800d898 	.word	0x0800d898
 80066d0:	0800d8a4 	.word	0x0800d8a4
 80066d4:	20000198 	.word	0x20000198
 80066d8:	20000230 	.word	0x20000230
 80066dc:	2000021a 	.word	0x2000021a

080066e0 <mainLoop>:

void mainLoop() {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80066e6:	f7fe f923 	bl	8004930 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80066ea:	2101      	movs	r1, #1
 80066ec:	48ac      	ldr	r0, [pc, #688]	; (80069a0 <mainLoop+0x2c0>)
 80066ee:	f002 fc93 	bl	8009018 <HAL_GPIO_ReadPin>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d136      	bne.n	8006766 <mainLoop+0x86>
 80066f8:	2108      	movs	r1, #8
 80066fa:	48aa      	ldr	r0, [pc, #680]	; (80069a4 <mainLoop+0x2c4>)
 80066fc:	f002 fc8c 	bl	8009018 <HAL_GPIO_ReadPin>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d12f      	bne.n	8006766 <mainLoop+0x86>
 8006706:	2102      	movs	r1, #2
 8006708:	48a5      	ldr	r0, [pc, #660]	; (80069a0 <mainLoop+0x2c0>)
 800670a:	f002 fc85 	bl	8009018 <HAL_GPIO_ReadPin>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d128      	bne.n	8006766 <mainLoop+0x86>
 8006714:	2104      	movs	r1, #4
 8006716:	48a2      	ldr	r0, [pc, #648]	; (80069a0 <mainLoop+0x2c0>)
 8006718:	f002 fc7e 	bl	8009018 <HAL_GPIO_ReadPin>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d121      	bne.n	8006766 <mainLoop+0x86>
 8006722:	2108      	movs	r1, #8
 8006724:	489e      	ldr	r0, [pc, #632]	; (80069a0 <mainLoop+0x2c0>)
 8006726:	f002 fc77 	bl	8009018 <HAL_GPIO_ReadPin>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d11a      	bne.n	8006766 <mainLoop+0x86>
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	489c      	ldr	r0, [pc, #624]	; (80069a4 <mainLoop+0x2c4>)
 8006734:	f002 fc70 	bl	8009018 <HAL_GPIO_ReadPin>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d113      	bne.n	8006766 <mainLoop+0x86>
 800673e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006742:	4898      	ldr	r0, [pc, #608]	; (80069a4 <mainLoop+0x2c4>)
 8006744:	f002 fc68 	bl	8009018 <HAL_GPIO_ReadPin>
 8006748:	4603      	mov	r3, r0
 800674a:	2b01      	cmp	r3, #1
 800674c:	d10b      	bne.n	8006766 <mainLoop+0x86>
 800674e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006752:	4894      	ldr	r0, [pc, #592]	; (80069a4 <mainLoop+0x2c4>)
 8006754:	f002 fc60 	bl	8009018 <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d103      	bne.n	8006766 <mainLoop+0x86>
			butonKontrol=0;
 800675e:	4b92      	ldr	r3, [pc, #584]	; (80069a8 <mainLoop+0x2c8>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e003      	b.n	800676e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006766:	4b91      	ldr	r3, [pc, #580]	; (80069ac <mainLoop+0x2cc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a91      	ldr	r2, [pc, #580]	; (80069b0 <mainLoop+0x2d0>)
 800676c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800676e:	4b91      	ldr	r3, [pc, #580]	; (80069b4 <mainLoop+0x2d4>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03a      	beq.n	80067ec <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006776:	bf00      	nop
 8006778:	488f      	ldr	r0, [pc, #572]	; (80069b8 <mainLoop+0x2d8>)
 800677a:	f003 fa76 	bl	8009c6a <HAL_I2C_GetError>
 800677e:	4603      	mov	r3, r0
 8006780:	2b04      	cmp	r3, #4
 8006782:	d0f9      	beq.n	8006778 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006784:	bf00      	nop
 8006786:	488c      	ldr	r0, [pc, #560]	; (80069b8 <mainLoop+0x2d8>)
 8006788:	f003 fa62 	bl	8009c50 <HAL_I2C_GetState>
 800678c:	4603      	mov	r3, r0
 800678e:	2b20      	cmp	r3, #32
 8006790:	d1f9      	bne.n	8006786 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006792:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006796:	9302      	str	r3, [sp, #8]
 8006798:	236e      	movs	r3, #110	; 0x6e
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	4b87      	ldr	r3, [pc, #540]	; (80069bc <mainLoop+0x2dc>)
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	236e      	movs	r3, #110	; 0x6e
 80067a2:	2200      	movs	r2, #0
 80067a4:	21a0      	movs	r1, #160	; 0xa0
 80067a6:	4884      	ldr	r0, [pc, #528]	; (80069b8 <mainLoop+0x2d8>)
 80067a8:	f002 fef0 	bl	800958c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80067ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067b0:	f001 fe62 	bl	8008478 <HAL_Delay>

		  hafizaYaz=0;
 80067b4:	4b7f      	ldr	r3, [pc, #508]	; (80069b4 <mainLoop+0x2d4>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80067ba:	4b81      	ldr	r3, [pc, #516]	; (80069c0 <mainLoop+0x2e0>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80067c2:	4a80      	ldr	r2, [pc, #512]	; (80069c4 <mainLoop+0x2e4>)
 80067c4:	2101      	movs	r1, #1
 80067c6:	2002      	movs	r0, #2
 80067c8:	f001 f900 	bl	80079cc <lcd_print>
 80067cc:	e008      	b.n	80067e0 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80067ce:	4b7c      	ldr	r3, [pc, #496]	; (80069c0 <mainLoop+0x2e0>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d104      	bne.n	80067e0 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80067d6:	4a7c      	ldr	r2, [pc, #496]	; (80069c8 <mainLoop+0x2e8>)
 80067d8:	2101      	movs	r1, #1
 80067da:	2002      	movs	r0, #2
 80067dc:	f001 f8f6 	bl	80079cc <lcd_print>
		  }

		  HAL_Delay(1000);
 80067e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067e4:	f001 fe48 	bl	8008478 <HAL_Delay>
		  lcd_clear();
 80067e8:	f001 f91c 	bl	8007a24 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80067ec:	4b77      	ldr	r3, [pc, #476]	; (80069cc <mainLoop+0x2ec>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f083 0301 	eor.w	r3, r3, #1
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06d      	beq.n	80068d6 <mainLoop+0x1f6>
 80067fa:	486f      	ldr	r0, [pc, #444]	; (80069b8 <mainLoop+0x2d8>)
 80067fc:	f003 fa28 	bl	8009c50 <HAL_I2C_GetState>
 8006800:	4603      	mov	r3, r0
 8006802:	2b20      	cmp	r3, #32
 8006804:	d167      	bne.n	80068d6 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006806:	4b72      	ldr	r3, [pc, #456]	; (80069d0 <mainLoop+0x2f0>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f083 0301 	eor.w	r3, r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d044      	beq.n	800689e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006814:	4a6f      	ldr	r2, [pc, #444]	; (80069d4 <mainLoop+0x2f4>)
 8006816:	2101      	movs	r1, #1
 8006818:	2001      	movs	r0, #1
 800681a:	f001 f8d7 	bl	80079cc <lcd_print>
			  if(dilSecim==0) {
 800681e:	4b68      	ldr	r3, [pc, #416]	; (80069c0 <mainLoop+0x2e0>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006826:	4a6c      	ldr	r2, [pc, #432]	; (80069d8 <mainLoop+0x2f8>)
 8006828:	2101      	movs	r1, #1
 800682a:	2002      	movs	r0, #2
 800682c:	f001 f8ce 	bl	80079cc <lcd_print>
 8006830:	e008      	b.n	8006844 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006832:	4b63      	ldr	r3, [pc, #396]	; (80069c0 <mainLoop+0x2e0>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d104      	bne.n	8006844 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800683a:	4a68      	ldr	r2, [pc, #416]	; (80069dc <mainLoop+0x2fc>)
 800683c:	2101      	movs	r1, #1
 800683e:	2002      	movs	r0, #2
 8006840:	f001 f8c4 	bl	80079cc <lcd_print>
			  }
			  HAL_Delay(1000);
 8006844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006848:	f001 fe16 	bl	8008478 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800684c:	bf00      	nop
 800684e:	485a      	ldr	r0, [pc, #360]	; (80069b8 <mainLoop+0x2d8>)
 8006850:	f003 fa0b 	bl	8009c6a <HAL_I2C_GetError>
 8006854:	4603      	mov	r3, r0
 8006856:	2b04      	cmp	r3, #4
 8006858:	d0f9      	beq.n	800684e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800685a:	e003      	b.n	8006864 <mainLoop+0x184>
				  HAL_Delay(1000);
 800685c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006860:	f001 fe0a 	bl	8008478 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006864:	4854      	ldr	r0, [pc, #336]	; (80069b8 <mainLoop+0x2d8>)
 8006866:	f003 f9f3 	bl	8009c50 <HAL_I2C_GetState>
 800686a:	4603      	mov	r3, r0
 800686c:	2b20      	cmp	r3, #32
 800686e:	d1f5      	bne.n	800685c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006870:	4b53      	ldr	r3, [pc, #332]	; (80069c0 <mainLoop+0x2e0>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006878:	4a59      	ldr	r2, [pc, #356]	; (80069e0 <mainLoop+0x300>)
 800687a:	2101      	movs	r1, #1
 800687c:	2002      	movs	r0, #2
 800687e:	f001 f8a5 	bl	80079cc <lcd_print>
 8006882:	e008      	b.n	8006896 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006884:	4b4e      	ldr	r3, [pc, #312]	; (80069c0 <mainLoop+0x2e0>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d104      	bne.n	8006896 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 800688c:	4a55      	ldr	r2, [pc, #340]	; (80069e4 <mainLoop+0x304>)
 800688e:	2101      	movs	r1, #1
 8006890:	2002      	movs	r0, #2
 8006892:	f001 f89b 	bl	80079cc <lcd_print>
			  }

			  ilkOkuma=1;
 8006896:	4b4e      	ldr	r3, [pc, #312]	; (80069d0 <mainLoop+0x2f0>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e014      	b.n	80068c8 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 800689e:	4b48      	ldr	r3, [pc, #288]	; (80069c0 <mainLoop+0x2e0>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80068a6:	4a50      	ldr	r2, [pc, #320]	; (80069e8 <mainLoop+0x308>)
 80068a8:	2101      	movs	r1, #1
 80068aa:	2002      	movs	r0, #2
 80068ac:	f001 f88e 	bl	80079cc <lcd_print>
 80068b0:	e008      	b.n	80068c4 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80068b2:	4b43      	ldr	r3, [pc, #268]	; (80069c0 <mainLoop+0x2e0>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d104      	bne.n	80068c4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80068ba:	4a4c      	ldr	r2, [pc, #304]	; (80069ec <mainLoop+0x30c>)
 80068bc:	2101      	movs	r1, #1
 80068be:	2002      	movs	r0, #2
 80068c0:	f001 f884 	bl	80079cc <lcd_print>
			  }
			  lcd_clear();
 80068c4:	f001 f8ae 	bl	8007a24 <lcd_clear>
		  }

		  lcd_clear();
 80068c8:	f001 f8ac 	bl	8007a24 <lcd_clear>

		  eepromKontrol();
 80068cc:	f7f9 fcb2 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80068d0:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <mainLoop+0x2ec>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80068d6:	4b46      	ldr	r3, [pc, #280]	; (80069f0 <mainLoop+0x310>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d11c      	bne.n	8006918 <mainLoop+0x238>
 80068de:	4b45      	ldr	r3, [pc, #276]	; (80069f4 <mainLoop+0x314>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f083 0301 	eor.w	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <mainLoop+0x238>
 80068ec:	4b42      	ldr	r3, [pc, #264]	; (80069f8 <mainLoop+0x318>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d111      	bne.n	8006918 <mainLoop+0x238>
			lcd_clear();
 80068f4:	f001 f896 	bl	8007a24 <lcd_clear>
			HAL_Delay(10);
 80068f8:	200a      	movs	r0, #10
 80068fa:	f001 fdbd 	bl	8008478 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80068fe:	4a3f      	ldr	r2, [pc, #252]	; (80069fc <mainLoop+0x31c>)
 8006900:	2101      	movs	r1, #1
 8006902:	2001      	movs	r0, #1
 8006904:	f001 f862 	bl	80079cc <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006908:	4a3d      	ldr	r2, [pc, #244]	; (8006a00 <mainLoop+0x320>)
 800690a:	2101      	movs	r1, #1
 800690c:	2002      	movs	r0, #2
 800690e:	f001 f85d 	bl	80079cc <lcd_print>
			mesajYazildi=1;
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <mainLoop+0x314>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006918:	4b35      	ldr	r3, [pc, #212]	; (80069f0 <mainLoop+0x310>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d112      	bne.n	8006946 <mainLoop+0x266>
 8006920:	2102      	movs	r1, #2
 8006922:	481f      	ldr	r0, [pc, #124]	; (80069a0 <mainLoop+0x2c0>)
 8006924:	f002 fb78 	bl	8009018 <HAL_GPIO_ReadPin>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10b      	bne.n	8006946 <mainLoop+0x266>
 800692e:	2104      	movs	r1, #4
 8006930:	481b      	ldr	r0, [pc, #108]	; (80069a0 <mainLoop+0x2c0>)
 8006932:	f002 fb71 	bl	8009018 <HAL_GPIO_ReadPin>
 8006936:	4603      	mov	r3, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	d104      	bne.n	8006946 <mainLoop+0x266>
			menuGiris=1;
 800693c:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <mainLoop+0x310>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006942:	f001 f86f 	bl	8007a24 <lcd_clear>
		}

		if(menuGiris==1) {
 8006946:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <mainLoop+0x310>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <mainLoop+0x272>
			menu();
 800694e:	f7fa fbcb 	bl	80010e8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006956:	4813      	ldr	r0, [pc, #76]	; (80069a4 <mainLoop+0x2c4>)
 8006958:	f002 fb8d 	bl	8009076 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800695c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006960:	4828      	ldr	r0, [pc, #160]	; (8006a04 <mainLoop+0x324>)
 8006962:	f002 fb59 	bl	8009018 <HAL_GPIO_ReadPin>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <mainLoop+0x2a2>
 800696c:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <mainLoop+0x328>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f083 0301 	eor.w	r3, r3, #1
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <mainLoop+0x2a2>
			stopVar=1;
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <mainLoop+0x32c>)
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e002      	b.n	8006988 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006982:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <mainLoop+0x32c>)
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006988:	f7fd ffe8 	bl	800495c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800698c:	f7fe f81a 	bl	80049c4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006990:	f7fe f85e 	bl	8004a50 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006994:	f7fe f8ae 	bl	8004af4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006998:	f7ff fc08 	bl	80061ac <checkDemoModCalisma>
		checkLCDBacklight();
 800699c:	e6a3      	b.n	80066e6 <mainLoop+0x6>
 800699e:	bf00      	nop
 80069a0:	40010800 	.word	0x40010800
 80069a4:	40011000 	.word	0x40011000
 80069a8:	2000022b 	.word	0x2000022b
 80069ac:	200001d8 	.word	0x200001d8
 80069b0:	200001f4 	.word	0x200001f4
 80069b4:	20000228 	.word	0x20000228
 80069b8:	2000028c 	.word	0x2000028c
 80069bc:	20000128 	.word	0x20000128
 80069c0:	2000021d 	.word	0x2000021d
 80069c4:	0800d8b8 	.word	0x0800d8b8
 80069c8:	0800d8cc 	.word	0x0800d8cc
 80069cc:	20000229 	.word	0x20000229
 80069d0:	2000022a 	.word	0x2000022a
 80069d4:	0800d8e0 	.word	0x0800d8e0
 80069d8:	0800d8f4 	.word	0x0800d8f4
 80069dc:	0800d908 	.word	0x0800d908
 80069e0:	0800d91c 	.word	0x0800d91c
 80069e4:	0800d930 	.word	0x0800d930
 80069e8:	0800d944 	.word	0x0800d944
 80069ec:	0800d958 	.word	0x0800d958
 80069f0:	20000219 	.word	0x20000219
 80069f4:	20000230 	.word	0x20000230
 80069f8:	2000021a 	.word	0x2000021a
 80069fc:	0800d96c 	.word	0x0800d96c
 8006a00:	0800d980 	.word	0x0800d980
 8006a04:	40010c00 	.word	0x40010c00
 8006a08:	20000251 	.word	0x20000251
 8006a0c:	2000024e 	.word	0x2000024e

08006a10 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006a16:	2001      	movs	r0, #1
 8006a18:	f001 f836 	bl	8007a88 <lcd_cursor>

    int cursorPosition = 3;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006a24:	2305      	movs	r3, #5
 8006a26:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006a28:	220c      	movs	r2, #12
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4899      	ldr	r0, [pc, #612]	; (8006c94 <takeMachineID+0x284>)
 8006a2e:	f005 fc7a 	bl	800c326 <memset>

    HAL_Delay(100);
 8006a32:	2064      	movs	r0, #100	; 0x64
 8006a34:	f001 fd20 	bl	8008478 <HAL_Delay>

    printTemplate(1, 0);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7fa f9c8 	bl	8000dd0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006a40:	2108      	movs	r1, #8
 8006a42:	4895      	ldr	r0, [pc, #596]	; (8006c98 <takeMachineID+0x288>)
 8006a44:	f002 fae8 	bl	8009018 <HAL_GPIO_ReadPin>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d137      	bne.n	8006abe <takeMachineID+0xae>
        	lcd_cursor(0);
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f001 f81a 	bl	8007a88 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006a54:	4b8f      	ldr	r3, [pc, #572]	; (8006c94 <takeMachineID+0x284>)
 8006a56:	7adb      	ldrb	r3, [r3, #11]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d110      	bne.n	8006a7e <takeMachineID+0x6e>
        		lcd_clear();
 8006a5c:	f000 ffe2 	bl	8007a24 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006a60:	4a8e      	ldr	r2, [pc, #568]	; (8006c9c <takeMachineID+0x28c>)
 8006a62:	2101      	movs	r1, #1
 8006a64:	2001      	movs	r0, #1
 8006a66:	f000 ffb1 	bl	80079cc <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006a6a:	4a8d      	ldr	r2, [pc, #564]	; (8006ca0 <takeMachineID+0x290>)
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	2002      	movs	r0, #2
 8006a70:	f000 ffac 	bl	80079cc <lcd_print>
        		HAL_Delay(1200);
 8006a74:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006a78:	f001 fcfe 	bl	8008478 <HAL_Delay>
        		goto mainSection;
 8006a7c:	e7cb      	b.n	8006a16 <takeMachineID+0x6>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006a7e:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <takeMachineID+0x294>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a89      	ldr	r2, [pc, #548]	; (8006ca8 <takeMachineID+0x298>)
 8006a84:	4413      	add	r3, r2
 8006a86:	4a83      	ldr	r2, [pc, #524]	; (8006c94 <takeMachineID+0x284>)
 8006a88:	6810      	ldr	r0, [r2, #0]
 8006a8a:	6851      	ldr	r1, [r2, #4]
 8006a8c:	6892      	ldr	r2, [r2, #8]
 8006a8e:	6018      	str	r0, [r3, #0]
 8006a90:	6059      	str	r1, [r3, #4]
 8006a92:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006a94:	20c8      	movs	r0, #200	; 0xc8
 8006a96:	f001 fcef 	bl	8008478 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	236e      	movs	r3, #110	; 0x6e
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	4b80      	ldr	r3, [pc, #512]	; (8006ca8 <takeMachineID+0x298>)
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	236e      	movs	r3, #110	; 0x6e
 8006aaa:	2200      	movs	r2, #0
 8006aac:	21a0      	movs	r1, #160	; 0xa0
 8006aae:	487f      	ldr	r0, [pc, #508]	; (8006cac <takeMachineID+0x29c>)
 8006ab0:	f002 fd6c 	bl	800958c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ab8:	f001 fcde 	bl	8008478 <HAL_Delay>

            break;
 8006abc:	e0e5      	b.n	8006c8a <takeMachineID+0x27a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4875      	ldr	r0, [pc, #468]	; (8006c98 <takeMachineID+0x288>)
 8006ac2:	f002 faa9 	bl	8009018 <HAL_GPIO_ReadPin>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d112      	bne.n	8006af2 <takeMachineID+0xe2>
        	if(cursorPosition == 7) {
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b07      	cmp	r3, #7
 8006ad0:	d102      	bne.n	8006ad8 <takeMachineID+0xc8>
        		cursorPosition = 10;
 8006ad2:	230a      	movs	r3, #10
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	e008      	b.n	8006aea <takeMachineID+0xda>
        	} else if (cursorPosition == 14) {
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b0e      	cmp	r3, #14
 8006adc:	d102      	bne.n	8006ae4 <takeMachineID+0xd4>
                cursorPosition = 3;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e002      	b.n	8006aea <takeMachineID+0xda>
            } else {
            	cursorPosition++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8006aea:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006aee:	f001 fcc3 	bl	8008478 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006af2:	2108      	movs	r1, #8
 8006af4:	486e      	ldr	r0, [pc, #440]	; (8006cb0 <takeMachineID+0x2a0>)
 8006af6:	f002 fa8f 	bl	8009018 <HAL_GPIO_ReadPin>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d112      	bne.n	8006b26 <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d102      	bne.n	8006b0c <takeMachineID+0xfc>
                cursorPosition = 14;
 8006b06:	230e      	movs	r3, #14
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e008      	b.n	8006b1e <takeMachineID+0x10e>
            } else if(cursorPosition == 10) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b0a      	cmp	r3, #10
 8006b10:	d102      	bne.n	8006b18 <takeMachineID+0x108>
            	cursorPosition = 7;
 8006b12:	2307      	movs	r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e002      	b.n	8006b1e <takeMachineID+0x10e>
            } else {
            	cursorPosition--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8006b1e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006b22:	f001 fca9 	bl	8008478 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006b26:	2102      	movs	r1, #2
 8006b28:	485b      	ldr	r0, [pc, #364]	; (8006c98 <takeMachineID+0x288>)
 8006b2a:	f002 fa75 	bl	8009018 <HAL_GPIO_ReadPin>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d16c      	bne.n	8006c0e <takeMachineID+0x1fe>
        	if(cursorPosition == 3) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d105      	bne.n	8006b46 <takeMachineID+0x136>
        		machineID[machineIDLoc] = '0';
 8006b3a:	4a56      	ldr	r2, [pc, #344]	; (8006c94 <takeMachineID+0x284>)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4413      	add	r3, r2
 8006b40:	2230      	movs	r2, #48	; 0x30
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	e04f      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 4) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d105      	bne.n	8006b58 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '1';
 8006b4c:	4a51      	ldr	r2, [pc, #324]	; (8006c94 <takeMachineID+0x284>)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	2231      	movs	r2, #49	; 0x31
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e046      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 5) {
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d105      	bne.n	8006b6a <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '2';
 8006b5e:	4a4d      	ldr	r2, [pc, #308]	; (8006c94 <takeMachineID+0x284>)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4413      	add	r3, r2
 8006b64:	2232      	movs	r2, #50	; 0x32
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e03d      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 6) {
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b06      	cmp	r3, #6
 8006b6e:	d105      	bne.n	8006b7c <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '3';
 8006b70:	4a48      	ldr	r2, [pc, #288]	; (8006c94 <takeMachineID+0x284>)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	4413      	add	r3, r2
 8006b76:	2233      	movs	r2, #51	; 0x33
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e034      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 7) {
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b07      	cmp	r3, #7
 8006b80:	d105      	bne.n	8006b8e <takeMachineID+0x17e>
        		machineID[machineIDLoc] = '4';
 8006b82:	4a44      	ldr	r2, [pc, #272]	; (8006c94 <takeMachineID+0x284>)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4413      	add	r3, r2
 8006b88:	2234      	movs	r2, #52	; 0x34
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e02b      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 10) {
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b0a      	cmp	r3, #10
 8006b92:	d105      	bne.n	8006ba0 <takeMachineID+0x190>
        		machineID[machineIDLoc] = '5';
 8006b94:	4a3f      	ldr	r2, [pc, #252]	; (8006c94 <takeMachineID+0x284>)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	2235      	movs	r2, #53	; 0x35
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e022      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 11) {
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b0b      	cmp	r3, #11
 8006ba4:	d105      	bne.n	8006bb2 <takeMachineID+0x1a2>
        		machineID[machineIDLoc] = '6';
 8006ba6:	4a3b      	ldr	r2, [pc, #236]	; (8006c94 <takeMachineID+0x284>)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4413      	add	r3, r2
 8006bac:	2236      	movs	r2, #54	; 0x36
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e019      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 12) {
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	d105      	bne.n	8006bc4 <takeMachineID+0x1b4>
        		machineID[machineIDLoc] = '7';
 8006bb8:	4a36      	ldr	r2, [pc, #216]	; (8006c94 <takeMachineID+0x284>)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	2237      	movs	r2, #55	; 0x37
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	e010      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 13) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b0d      	cmp	r3, #13
 8006bc8:	d105      	bne.n	8006bd6 <takeMachineID+0x1c6>
        		machineID[machineIDLoc] = '8';
 8006bca:	4a32      	ldr	r2, [pc, #200]	; (8006c94 <takeMachineID+0x284>)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4413      	add	r3, r2
 8006bd0:	2238      	movs	r2, #56	; 0x38
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	e007      	b.n	8006be6 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 14) {
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b0e      	cmp	r3, #14
 8006bda:	d104      	bne.n	8006be6 <takeMachineID+0x1d6>
        		machineID[machineIDLoc] = '9';
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <takeMachineID+0x284>)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	4413      	add	r3, r2
 8006be2:	2239      	movs	r2, #57	; 0x39
 8006be4:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	b2d9      	uxtb	r1, r3
 8006bea:	4a2a      	ldr	r2, [pc, #168]	; (8006c94 <takeMachineID+0x284>)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	f000 fefe 	bl	80079f6 <lcd_print_char>

        	writeLoc++;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(450);
 8006c06:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006c0a:	f001 fc35 	bl	8008478 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006c0e:	2104      	movs	r1, #4
 8006c10:	4821      	ldr	r0, [pc, #132]	; (8006c98 <takeMachineID+0x288>)
 8006c12:	f002 fa01 	bl	8009018 <HAL_GPIO_ReadPin>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d12f      	bne.n	8006c7c <takeMachineID+0x26c>
            if(strlen(machineID) >= 1) {
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <takeMachineID+0x284>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d027      	beq.n	8006c74 <takeMachineID+0x264>

                machineID[machineIDLoc] = '\0';
 8006c24:	4a1b      	ldr	r2, [pc, #108]	; (8006c94 <takeMachineID+0x284>)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4413      	add	r3, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	3304      	adds	r3, #4
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	4619      	mov	r1, r3
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f000 fefd 	bl	8007a38 <lcd_delete_char>
                HAL_Delay(50);
 8006c3e:	2032      	movs	r0, #50	; 0x32
 8006c40:	f001 fc1a 	bl	8008478 <HAL_Delay>

                if(writeLoc > 5) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	dd03      	ble.n	8006c52 <takeMachineID+0x242>
                	writeLoc--;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	e004      	b.n	8006c5c <takeMachineID+0x24c>
                } else if(writeLoc < 5) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	dc01      	bgt.n	8006c5c <takeMachineID+0x24c>
                	writeLoc = 5;
 8006c58:	2305      	movs	r3, #5
 8006c5a:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dd03      	ble.n	8006c6a <takeMachineID+0x25a>
                	machineIDLoc--;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	60bb      	str	r3, [r7, #8]
 8006c68:	e004      	b.n	8006c74 <takeMachineID+0x264>
                } else if(machineIDLoc < 0) {
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	da01      	bge.n	8006c74 <takeMachineID+0x264>
                	machineIDLoc = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(350);
 8006c74:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006c78:	f001 fbfe 	bl	8008478 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	4619      	mov	r1, r3
 8006c82:	2002      	movs	r0, #2
 8006c84:	f000 fe83 	bl	800798e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c88:	e6da      	b.n	8006a40 <takeMachineID+0x30>
    }
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200001a0 	.word	0x200001a0
 8006c98:	40010800 	.word	0x40010800
 8006c9c:	0800d994 	.word	0x0800d994
 8006ca0:	0800d9a8 	.word	0x0800d9a8
 8006ca4:	2000000c 	.word	0x2000000c
 8006ca8:	20000128 	.word	0x20000128
 8006cac:	2000028c 	.word	0x2000028c
 8006cb0:	40011000 	.word	0x40011000

08006cb4 <takeWifiSSID>:

void takeWifiSSID() {
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b089      	sub	sp, #36	; 0x24
 8006cb8:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006cba:	2001      	movs	r0, #1
 8006cbc:	f000 fee4 	bl	8007a88 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006cc0:	2214      	movs	r2, #20
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	488f      	ldr	r0, [pc, #572]	; (8006f04 <takeWifiSSID+0x250>)
 8006cc6:	f005 fb2e 	bl	800c326 <memset>

    int realCharPos = 1;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8006cce:	4b8e      	ldr	r3, [pc, #568]	; (8006f08 <takeWifiSSID+0x254>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
    page = 1;
 8006cd4:	4b8d      	ldr	r3, [pc, #564]	; (8006f0c <takeWifiSSID+0x258>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006cde:	2307      	movs	r3, #7
 8006ce0:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	2002      	movs	r0, #2
 8006ce6:	f7fa f873 	bl	8000dd0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006cea:	2108      	movs	r1, #8
 8006cec:	4888      	ldr	r0, [pc, #544]	; (8006f10 <takeWifiSSID+0x25c>)
 8006cee:	f002 f993 	bl	8009018 <HAL_GPIO_ReadPin>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d138      	bne.n	8006d6a <takeWifiSSID+0xb6>
            lcd_cursor(0);
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f000 fec5 	bl	8007a88 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006cfe:	4881      	ldr	r0, [pc, #516]	; (8006f04 <takeWifiSSID+0x250>)
 8006d00:	f7f9 fa90 	bl	8000224 <strlen>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b14      	cmp	r3, #20
 8006d08:	d910      	bls.n	8006d2c <takeWifiSSID+0x78>
                lcd_clear();
 8006d0a:	f000 fe8b 	bl	8007a24 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006d0e:	4a81      	ldr	r2, [pc, #516]	; (8006f14 <takeWifiSSID+0x260>)
 8006d10:	2101      	movs	r1, #1
 8006d12:	2001      	movs	r0, #1
 8006d14:	f000 fe5a 	bl	80079cc <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006d18:	4a7f      	ldr	r2, [pc, #508]	; (8006f18 <takeWifiSSID+0x264>)
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	2002      	movs	r0, #2
 8006d1e:	f000 fe55 	bl	80079cc <lcd_print>
                HAL_Delay(1200);
 8006d22:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d26:	f001 fba7 	bl	8008478 <HAL_Delay>
                goto mainSSIDSection;
 8006d2a:	e7c6      	b.n	8006cba <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8006d2c:	4b7b      	ldr	r3, [pc, #492]	; (8006f1c <takeWifiSSID+0x268>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a7b      	ldr	r2, [pc, #492]	; (8006f20 <takeWifiSSID+0x26c>)
 8006d32:	189c      	adds	r4, r3, r2
 8006d34:	4873      	ldr	r0, [pc, #460]	; (8006f04 <takeWifiSSID+0x250>)
 8006d36:	f7f9 fa75 	bl	8000224 <strlen>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4971      	ldr	r1, [pc, #452]	; (8006f04 <takeWifiSSID+0x250>)
 8006d40:	4620      	mov	r0, r4
 8006d42:	f005 fb35 	bl	800c3b0 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d4a:	9302      	str	r3, [sp, #8]
 8006d4c:	236e      	movs	r3, #110	; 0x6e
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	4b73      	ldr	r3, [pc, #460]	; (8006f20 <takeWifiSSID+0x26c>)
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	236e      	movs	r3, #110	; 0x6e
 8006d56:	2200      	movs	r2, #0
 8006d58:	21a0      	movs	r1, #160	; 0xa0
 8006d5a:	4872      	ldr	r0, [pc, #456]	; (8006f24 <takeWifiSSID+0x270>)
 8006d5c:	f002 fc16 	bl	800958c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d64:	f001 fb88 	bl	8008478 <HAL_Delay>

            break;
 8006d68:	e14c      	b.n	8007004 <takeWifiSSID+0x350>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4868      	ldr	r0, [pc, #416]	; (8006f10 <takeWifiSSID+0x25c>)
 8006d6e:	f002 f953 	bl	8009018 <HAL_GPIO_ReadPin>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d166      	bne.n	8006e46 <takeWifiSSID+0x192>
        	realCharPos++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b50      	cmp	r3, #80	; 0x50
 8006d82:	dd01      	ble.n	8006d88 <takeWifiSSID+0xd4>
        		realCharPos = 1;
 8006d84:	2301      	movs	r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8006d88:	4b5f      	ldr	r3, [pc, #380]	; (8006f08 <takeWifiSSID+0x254>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d152      	bne.n	8006e36 <takeWifiSSID+0x182>
            	if(page == 1) {
 8006d90:	4b5e      	ldr	r3, [pc, #376]	; (8006f0c <takeWifiSSID+0x258>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10c      	bne.n	8006db2 <takeWifiSSID+0xfe>
            		cursorPosition = 1;
 8006d98:	4b5b      	ldr	r3, [pc, #364]	; (8006f08 <takeWifiSSID+0x254>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]
            		page++;
 8006d9e:	4b5b      	ldr	r3, [pc, #364]	; (8006f0c <takeWifiSSID+0x258>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a59      	ldr	r2, [pc, #356]	; (8006f0c <takeWifiSSID+0x258>)
 8006da6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8006da8:	2102      	movs	r1, #2
 8006daa:	2002      	movs	r0, #2
 8006dac:	f7fa f810 	bl	8000dd0 <printTemplate>
 8006db0:	e046      	b.n	8006e40 <takeWifiSSID+0x18c>
            	} else if(page == 2) {
 8006db2:	4b56      	ldr	r3, [pc, #344]	; (8006f0c <takeWifiSSID+0x258>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d10c      	bne.n	8006dd4 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 8006dba:	4b53      	ldr	r3, [pc, #332]	; (8006f08 <takeWifiSSID+0x254>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
            		page++;
 8006dc0:	4b52      	ldr	r3, [pc, #328]	; (8006f0c <takeWifiSSID+0x258>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	4a51      	ldr	r2, [pc, #324]	; (8006f0c <takeWifiSSID+0x258>)
 8006dc8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8006dca:	2103      	movs	r1, #3
 8006dcc:	2002      	movs	r0, #2
 8006dce:	f7f9 ffff 	bl	8000dd0 <printTemplate>
 8006dd2:	e035      	b.n	8006e40 <takeWifiSSID+0x18c>
            	} else if(page == 3) {
 8006dd4:	4b4d      	ldr	r3, [pc, #308]	; (8006f0c <takeWifiSSID+0x258>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d10c      	bne.n	8006df6 <takeWifiSSID+0x142>
            		cursorPosition = 1;
 8006ddc:	4b4a      	ldr	r3, [pc, #296]	; (8006f08 <takeWifiSSID+0x254>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
            		page++;
 8006de2:	4b4a      	ldr	r3, [pc, #296]	; (8006f0c <takeWifiSSID+0x258>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	4a48      	ldr	r2, [pc, #288]	; (8006f0c <takeWifiSSID+0x258>)
 8006dea:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8006dec:	2104      	movs	r1, #4
 8006dee:	2002      	movs	r0, #2
 8006df0:	f7f9 ffee 	bl	8000dd0 <printTemplate>
 8006df4:	e024      	b.n	8006e40 <takeWifiSSID+0x18c>
            	} else if(page == 4) {
 8006df6:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <takeWifiSSID+0x258>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d10c      	bne.n	8006e18 <takeWifiSSID+0x164>
            		cursorPosition = 1;
 8006dfe:	4b42      	ldr	r3, [pc, #264]	; (8006f08 <takeWifiSSID+0x254>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
            		page++;
 8006e04:	4b41      	ldr	r3, [pc, #260]	; (8006f0c <takeWifiSSID+0x258>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	4a40      	ldr	r2, [pc, #256]	; (8006f0c <takeWifiSSID+0x258>)
 8006e0c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8006e0e:	2105      	movs	r1, #5
 8006e10:	2002      	movs	r0, #2
 8006e12:	f7f9 ffdd 	bl	8000dd0 <printTemplate>
 8006e16:	e013      	b.n	8006e40 <takeWifiSSID+0x18c>
            	} else if(page == 5) {
 8006e18:	4b3c      	ldr	r3, [pc, #240]	; (8006f0c <takeWifiSSID+0x258>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d10f      	bne.n	8006e40 <takeWifiSSID+0x18c>
            		cursorPosition = 1;
 8006e20:	4b39      	ldr	r3, [pc, #228]	; (8006f08 <takeWifiSSID+0x254>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
            		page = 1;
 8006e26:	4b39      	ldr	r3, [pc, #228]	; (8006f0c <takeWifiSSID+0x258>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	2002      	movs	r0, #2
 8006e30:	f7f9 ffce 	bl	8000dd0 <printTemplate>
 8006e34:	e004      	b.n	8006e40 <takeWifiSSID+0x18c>
            	}
            } else {
            	cursorPosition++;
 8006e36:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <takeWifiSSID+0x254>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	4a32      	ldr	r2, [pc, #200]	; (8006f08 <takeWifiSSID+0x254>)
 8006e3e:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8006e40:	20fa      	movs	r0, #250	; 0xfa
 8006e42:	f001 fb19 	bl	8008478 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e46:	2108      	movs	r1, #8
 8006e48:	4837      	ldr	r0, [pc, #220]	; (8006f28 <takeWifiSSID+0x274>)
 8006e4a:	f002 f8e5 	bl	8009018 <HAL_GPIO_ReadPin>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d173      	bne.n	8006f3c <takeWifiSSID+0x288>
        	realCharPos--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc01      	bgt.n	8006e64 <takeWifiSSID+0x1b0>
        		realCharPos = 80;
 8006e60:	2350      	movs	r3, #80	; 0x50
 8006e62:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8006e64:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <takeWifiSSID+0x254>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d15f      	bne.n	8006f2c <takeWifiSSID+0x278>
            	if(page == 1) {
 8006e6c:	4b27      	ldr	r3, [pc, #156]	; (8006f0c <takeWifiSSID+0x258>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d10a      	bne.n	8006e8a <takeWifiSSID+0x1d6>
            		cursorPosition = 16;
 8006e74:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <takeWifiSSID+0x254>)
 8006e76:	2210      	movs	r2, #16
 8006e78:	601a      	str	r2, [r3, #0]
            		page = 5;
 8006e7a:	4b24      	ldr	r3, [pc, #144]	; (8006f0c <takeWifiSSID+0x258>)
 8006e7c:	2205      	movs	r2, #5
 8006e7e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8006e80:	2105      	movs	r1, #5
 8006e82:	2002      	movs	r0, #2
 8006e84:	f7f9 ffa4 	bl	8000dd0 <printTemplate>
 8006e88:	e055      	b.n	8006f36 <takeWifiSSID+0x282>
            	} else if(page == 2) {
 8006e8a:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <takeWifiSSID+0x258>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d10a      	bne.n	8006ea8 <takeWifiSSID+0x1f4>
            		cursorPosition = 16;
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <takeWifiSSID+0x254>)
 8006e94:	2210      	movs	r2, #16
 8006e96:	601a      	str	r2, [r3, #0]
            		page = 1;
 8006e98:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <takeWifiSSID+0x258>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	2002      	movs	r0, #2
 8006ea2:	f7f9 ff95 	bl	8000dd0 <printTemplate>
 8006ea6:	e046      	b.n	8006f36 <takeWifiSSID+0x282>
            	} else if(page == 3) {
 8006ea8:	4b18      	ldr	r3, [pc, #96]	; (8006f0c <takeWifiSSID+0x258>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d10a      	bne.n	8006ec6 <takeWifiSSID+0x212>
            		cursorPosition = 16;
 8006eb0:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <takeWifiSSID+0x254>)
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	601a      	str	r2, [r3, #0]
            		page = 2;
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <takeWifiSSID+0x258>)
 8006eb8:	2202      	movs	r2, #2
 8006eba:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	2002      	movs	r0, #2
 8006ec0:	f7f9 ff86 	bl	8000dd0 <printTemplate>
 8006ec4:	e037      	b.n	8006f36 <takeWifiSSID+0x282>
            	} else if(page == 4) {
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <takeWifiSSID+0x258>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d10a      	bne.n	8006ee4 <takeWifiSSID+0x230>
            		cursorPosition = 16;
 8006ece:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <takeWifiSSID+0x254>)
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	601a      	str	r2, [r3, #0]
            		page = 3;
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <takeWifiSSID+0x258>)
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8006eda:	2103      	movs	r1, #3
 8006edc:	2002      	movs	r0, #2
 8006ede:	f7f9 ff77 	bl	8000dd0 <printTemplate>
 8006ee2:	e028      	b.n	8006f36 <takeWifiSSID+0x282>
            	} else if(page == 5) {
 8006ee4:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <takeWifiSSID+0x258>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	d124      	bne.n	8006f36 <takeWifiSSID+0x282>
            		cursorPosition = 16;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <takeWifiSSID+0x254>)
 8006eee:	2210      	movs	r2, #16
 8006ef0:	601a      	str	r2, [r3, #0]
            		page = 4;
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <takeWifiSSID+0x258>)
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8006ef8:	2104      	movs	r1, #4
 8006efa:	2002      	movs	r0, #2
 8006efc:	f7f9 ff68 	bl	8000dd0 <printTemplate>
 8006f00:	e019      	b.n	8006f36 <takeWifiSSID+0x282>
 8006f02:	bf00      	nop
 8006f04:	200001ac 	.word	0x200001ac
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	20000004 	.word	0x20000004
 8006f10:	40010800 	.word	0x40010800
 8006f14:	0800d9bc 	.word	0x0800d9bc
 8006f18:	0800d9d0 	.word	0x0800d9d0
 8006f1c:	20000010 	.word	0x20000010
 8006f20:	20000128 	.word	0x20000128
 8006f24:	2000028c 	.word	0x2000028c
 8006f28:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8006f2c:	4b37      	ldr	r3, [pc, #220]	; (800700c <takeWifiSSID+0x358>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	4a36      	ldr	r2, [pc, #216]	; (800700c <takeWifiSSID+0x358>)
 8006f34:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8006f36:	20fa      	movs	r0, #250	; 0xfa
 8006f38:	f001 fa9e 	bl	8008478 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006f3c:	2102      	movs	r1, #2
 8006f3e:	4834      	ldr	r0, [pc, #208]	; (8007010 <takeWifiSSID+0x35c>)
 8006f40:	f002 f86a 	bl	8009018 <HAL_GPIO_ReadPin>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d11e      	bne.n	8006f88 <takeWifiSSID+0x2d4>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 fbf4 	bl	800073c <getCharFromCursorPosition>
 8006f54:	4603      	mov	r3, r0
 8006f56:	4619      	mov	r1, r3
 8006f58:	4a2e      	ldr	r2, [pc, #184]	; (8007014 <takeWifiSSID+0x360>)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	460a      	mov	r2, r1
 8006f60:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	b2d9      	uxtb	r1, r3
 8006f66:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <takeWifiSSID+0x360>)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2001      	movs	r0, #1
 8006f72:	f000 fd40 	bl	80079f6 <lcd_print_char>

            writeLoc++;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8006f82:	20fa      	movs	r0, #250	; 0xfa
 8006f84:	f001 fa78 	bl	8008478 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f88:	2104      	movs	r1, #4
 8006f8a:	4821      	ldr	r0, [pc, #132]	; (8007010 <takeWifiSSID+0x35c>)
 8006f8c:	f002 f844 	bl	8009018 <HAL_GPIO_ReadPin>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d12e      	bne.n	8006ff4 <takeWifiSSID+0x340>
        	if(strlen(wifiSSID) >= 1) {
 8006f96:	4b1f      	ldr	r3, [pc, #124]	; (8007014 <takeWifiSSID+0x360>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d027      	beq.n	8006fee <takeWifiSSID+0x33a>
        		wifiSSID[wifiNameLoc] = '\0';
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <takeWifiSSID+0x360>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	3306      	adds	r3, #6
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f000 fd40 	bl	8007a38 <lcd_delete_char>
        		HAL_Delay(50);
 8006fb8:	2032      	movs	r0, #50	; 0x32
 8006fba:	f001 fa5d 	bl	8008478 <HAL_Delay>
        		if(writeLoc > 7) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b07      	cmp	r3, #7
 8006fc2:	dd03      	ble.n	8006fcc <takeWifiSSID+0x318>
        			writeLoc--;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	607b      	str	r3, [r7, #4]
 8006fca:	e004      	b.n	8006fd6 <takeWifiSSID+0x322>
        		} else if(writeLoc < 7) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b06      	cmp	r3, #6
 8006fd0:	dc01      	bgt.n	8006fd6 <takeWifiSSID+0x322>
        			writeLoc = 7;
 8006fd2:	2307      	movs	r3, #7
 8006fd4:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dd03      	ble.n	8006fe4 <takeWifiSSID+0x330>
        			wifiNameLoc--;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	e004      	b.n	8006fee <takeWifiSSID+0x33a>
        		} else if(wifiNameLoc < 0) {
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da01      	bge.n	8006fee <takeWifiSSID+0x33a>
        			wifiNameLoc = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(250);
 8006fee:	20fa      	movs	r0, #250	; 0xfa
 8006ff0:	f001 fa42 	bl	8008478 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <takeWifiSSID+0x358>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	f000 fcc6 	bl	800798e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007002:	e672      	b.n	8006cea <takeWifiSSID+0x36>
    }
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	bd90      	pop	{r4, r7, pc}
 800700c:	20000000 	.word	0x20000000
 8007010:	40010800 	.word	0x40010800
 8007014:	200001ac 	.word	0x200001ac

08007018 <takeWifiPass>:

void takeWifiPass() {
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b089      	sub	sp, #36	; 0x24
 800701c:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 800701e:	2001      	movs	r0, #1
 8007020:	f000 fd32 	bl	8007a88 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007024:	2214      	movs	r2, #20
 8007026:	2100      	movs	r1, #0
 8007028:	488f      	ldr	r0, [pc, #572]	; (8007268 <takeWifiPass+0x250>)
 800702a:	f005 f97c 	bl	800c326 <memset>

    int realCharPos = 1;
 800702e:	2301      	movs	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007032:	4b8e      	ldr	r3, [pc, #568]	; (800726c <takeWifiPass+0x254>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]
    page = 1;
 8007038:	4b8d      	ldr	r3, [pc, #564]	; (8007270 <takeWifiPass+0x258>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007042:	2307      	movs	r3, #7
 8007044:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007046:	2101      	movs	r1, #1
 8007048:	2003      	movs	r0, #3
 800704a:	f7f9 fec1 	bl	8000dd0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800704e:	2108      	movs	r1, #8
 8007050:	4888      	ldr	r0, [pc, #544]	; (8007274 <takeWifiPass+0x25c>)
 8007052:	f001 ffe1 	bl	8009018 <HAL_GPIO_ReadPin>
 8007056:	4603      	mov	r3, r0
 8007058:	2b01      	cmp	r3, #1
 800705a:	d138      	bne.n	80070ce <takeWifiPass+0xb6>
            lcd_cursor(0);
 800705c:	2000      	movs	r0, #0
 800705e:	f000 fd13 	bl	8007a88 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007062:	4881      	ldr	r0, [pc, #516]	; (8007268 <takeWifiPass+0x250>)
 8007064:	f7f9 f8de 	bl	8000224 <strlen>
 8007068:	4603      	mov	r3, r0
 800706a:	2b14      	cmp	r3, #20
 800706c:	d910      	bls.n	8007090 <takeWifiPass+0x78>
                lcd_clear();
 800706e:	f000 fcd9 	bl	8007a24 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007072:	4a81      	ldr	r2, [pc, #516]	; (8007278 <takeWifiPass+0x260>)
 8007074:	2101      	movs	r1, #1
 8007076:	2001      	movs	r0, #1
 8007078:	f000 fca8 	bl	80079cc <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800707c:	4a7f      	ldr	r2, [pc, #508]	; (800727c <takeWifiPass+0x264>)
 800707e:	2101      	movs	r1, #1
 8007080:	2002      	movs	r0, #2
 8007082:	f000 fca3 	bl	80079cc <lcd_print>
                HAL_Delay(1200);
 8007086:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800708a:	f001 f9f5 	bl	8008478 <HAL_Delay>
                goto mainPASSSection;
 800708e:	e7c6      	b.n	800701e <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 8007090:	4b7b      	ldr	r3, [pc, #492]	; (8007280 <takeWifiPass+0x268>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a7b      	ldr	r2, [pc, #492]	; (8007284 <takeWifiPass+0x26c>)
 8007096:	189c      	adds	r4, r3, r2
 8007098:	4873      	ldr	r0, [pc, #460]	; (8007268 <takeWifiPass+0x250>)
 800709a:	f7f9 f8c3 	bl	8000224 <strlen>
 800709e:	4603      	mov	r3, r0
 80070a0:	461a      	mov	r2, r3
 80070a2:	4971      	ldr	r1, [pc, #452]	; (8007268 <takeWifiPass+0x250>)
 80070a4:	4620      	mov	r0, r4
 80070a6:	f005 f983 	bl	800c3b0 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80070aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80070ae:	9302      	str	r3, [sp, #8]
 80070b0:	236e      	movs	r3, #110	; 0x6e
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	4b73      	ldr	r3, [pc, #460]	; (8007284 <takeWifiPass+0x26c>)
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	236e      	movs	r3, #110	; 0x6e
 80070ba:	2200      	movs	r2, #0
 80070bc:	21a0      	movs	r1, #160	; 0xa0
 80070be:	4872      	ldr	r0, [pc, #456]	; (8007288 <takeWifiPass+0x270>)
 80070c0:	f002 fa64 	bl	800958c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80070c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070c8:	f001 f9d6 	bl	8008478 <HAL_Delay>

            break;
 80070cc:	e14c      	b.n	8007368 <takeWifiPass+0x350>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80070ce:	2101      	movs	r1, #1
 80070d0:	4868      	ldr	r0, [pc, #416]	; (8007274 <takeWifiPass+0x25c>)
 80070d2:	f001 ffa1 	bl	8009018 <HAL_GPIO_ReadPin>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d166      	bne.n	80071aa <takeWifiPass+0x192>
        	realCharPos++;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b50      	cmp	r3, #80	; 0x50
 80070e6:	dd01      	ble.n	80070ec <takeWifiPass+0xd4>
        	    realCharPos = 1;
 80070e8:	2301      	movs	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 80070ec:	4b5f      	ldr	r3, [pc, #380]	; (800726c <takeWifiPass+0x254>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d152      	bne.n	800719a <takeWifiPass+0x182>
            	if(page == 1) {
 80070f4:	4b5e      	ldr	r3, [pc, #376]	; (8007270 <takeWifiPass+0x258>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10c      	bne.n	8007116 <takeWifiPass+0xfe>
            		cursorPosition = 1;
 80070fc:	4b5b      	ldr	r3, [pc, #364]	; (800726c <takeWifiPass+0x254>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
            		page++;
 8007102:	4b5b      	ldr	r3, [pc, #364]	; (8007270 <takeWifiPass+0x258>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a59      	ldr	r2, [pc, #356]	; (8007270 <takeWifiPass+0x258>)
 800710a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800710c:	2102      	movs	r1, #2
 800710e:	2003      	movs	r0, #3
 8007110:	f7f9 fe5e 	bl	8000dd0 <printTemplate>
 8007114:	e046      	b.n	80071a4 <takeWifiPass+0x18c>
            	} else if(page == 2) {
 8007116:	4b56      	ldr	r3, [pc, #344]	; (8007270 <takeWifiPass+0x258>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d10c      	bne.n	8007138 <takeWifiPass+0x120>
            		cursorPosition = 1;
 800711e:	4b53      	ldr	r3, [pc, #332]	; (800726c <takeWifiPass+0x254>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
            		page++;
 8007124:	4b52      	ldr	r3, [pc, #328]	; (8007270 <takeWifiPass+0x258>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	4a51      	ldr	r2, [pc, #324]	; (8007270 <takeWifiPass+0x258>)
 800712c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800712e:	2103      	movs	r1, #3
 8007130:	2003      	movs	r0, #3
 8007132:	f7f9 fe4d 	bl	8000dd0 <printTemplate>
 8007136:	e035      	b.n	80071a4 <takeWifiPass+0x18c>
            	} else if(page == 3) {
 8007138:	4b4d      	ldr	r3, [pc, #308]	; (8007270 <takeWifiPass+0x258>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b03      	cmp	r3, #3
 800713e:	d10c      	bne.n	800715a <takeWifiPass+0x142>
            		cursorPosition = 1;
 8007140:	4b4a      	ldr	r3, [pc, #296]	; (800726c <takeWifiPass+0x254>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
            		page++;
 8007146:	4b4a      	ldr	r3, [pc, #296]	; (8007270 <takeWifiPass+0x258>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	4a48      	ldr	r2, [pc, #288]	; (8007270 <takeWifiPass+0x258>)
 800714e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8007150:	2104      	movs	r1, #4
 8007152:	2003      	movs	r0, #3
 8007154:	f7f9 fe3c 	bl	8000dd0 <printTemplate>
 8007158:	e024      	b.n	80071a4 <takeWifiPass+0x18c>
            	} else if(page == 4) {
 800715a:	4b45      	ldr	r3, [pc, #276]	; (8007270 <takeWifiPass+0x258>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b04      	cmp	r3, #4
 8007160:	d10c      	bne.n	800717c <takeWifiPass+0x164>
            		cursorPosition = 1;
 8007162:	4b42      	ldr	r3, [pc, #264]	; (800726c <takeWifiPass+0x254>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
            		page++;
 8007168:	4b41      	ldr	r3, [pc, #260]	; (8007270 <takeWifiPass+0x258>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a40      	ldr	r2, [pc, #256]	; (8007270 <takeWifiPass+0x258>)
 8007170:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8007172:	2105      	movs	r1, #5
 8007174:	2003      	movs	r0, #3
 8007176:	f7f9 fe2b 	bl	8000dd0 <printTemplate>
 800717a:	e013      	b.n	80071a4 <takeWifiPass+0x18c>
            	} else if(page == 5) {
 800717c:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <takeWifiPass+0x258>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b05      	cmp	r3, #5
 8007182:	d10f      	bne.n	80071a4 <takeWifiPass+0x18c>
            		cursorPosition = 1;
 8007184:	4b39      	ldr	r3, [pc, #228]	; (800726c <takeWifiPass+0x254>)
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]
            		page = 1;
 800718a:	4b39      	ldr	r3, [pc, #228]	; (8007270 <takeWifiPass+0x258>)
 800718c:	2201      	movs	r2, #1
 800718e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007190:	2101      	movs	r1, #1
 8007192:	2003      	movs	r0, #3
 8007194:	f7f9 fe1c 	bl	8000dd0 <printTemplate>
 8007198:	e004      	b.n	80071a4 <takeWifiPass+0x18c>
            	}
            } else {
            	cursorPosition++;
 800719a:	4b34      	ldr	r3, [pc, #208]	; (800726c <takeWifiPass+0x254>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3301      	adds	r3, #1
 80071a0:	4a32      	ldr	r2, [pc, #200]	; (800726c <takeWifiPass+0x254>)
 80071a2:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80071a4:	20fa      	movs	r0, #250	; 0xfa
 80071a6:	f001 f967 	bl	8008478 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80071aa:	2108      	movs	r1, #8
 80071ac:	4837      	ldr	r0, [pc, #220]	; (800728c <takeWifiPass+0x274>)
 80071ae:	f001 ff33 	bl	8009018 <HAL_GPIO_ReadPin>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d173      	bne.n	80072a0 <takeWifiPass+0x288>
        	realCharPos--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc01      	bgt.n	80071c8 <takeWifiPass+0x1b0>
        	    realCharPos = 80;
 80071c4:	2350      	movs	r3, #80	; 0x50
 80071c6:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 80071c8:	4b28      	ldr	r3, [pc, #160]	; (800726c <takeWifiPass+0x254>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d15f      	bne.n	8007290 <takeWifiPass+0x278>
            	if(page == 1) {
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <takeWifiPass+0x258>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10a      	bne.n	80071ee <takeWifiPass+0x1d6>
            		cursorPosition = 16;
 80071d8:	4b24      	ldr	r3, [pc, #144]	; (800726c <takeWifiPass+0x254>)
 80071da:	2210      	movs	r2, #16
 80071dc:	601a      	str	r2, [r3, #0]
            		page = 5;
 80071de:	4b24      	ldr	r3, [pc, #144]	; (8007270 <takeWifiPass+0x258>)
 80071e0:	2205      	movs	r2, #5
 80071e2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80071e4:	2105      	movs	r1, #5
 80071e6:	2003      	movs	r0, #3
 80071e8:	f7f9 fdf2 	bl	8000dd0 <printTemplate>
 80071ec:	e055      	b.n	800729a <takeWifiPass+0x282>
            	} else if(page == 2) {
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <takeWifiPass+0x258>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d10a      	bne.n	800720c <takeWifiPass+0x1f4>
            		cursorPosition = 16;
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <takeWifiPass+0x254>)
 80071f8:	2210      	movs	r2, #16
 80071fa:	601a      	str	r2, [r3, #0]
            		page = 1;
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <takeWifiPass+0x258>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007202:	2101      	movs	r1, #1
 8007204:	2003      	movs	r0, #3
 8007206:	f7f9 fde3 	bl	8000dd0 <printTemplate>
 800720a:	e046      	b.n	800729a <takeWifiPass+0x282>
            	} else if(page == 3) {
 800720c:	4b18      	ldr	r3, [pc, #96]	; (8007270 <takeWifiPass+0x258>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d10a      	bne.n	800722a <takeWifiPass+0x212>
            		cursorPosition = 16;
 8007214:	4b15      	ldr	r3, [pc, #84]	; (800726c <takeWifiPass+0x254>)
 8007216:	2210      	movs	r2, #16
 8007218:	601a      	str	r2, [r3, #0]
            		page = 2;
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <takeWifiPass+0x258>)
 800721c:	2202      	movs	r2, #2
 800721e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8007220:	2102      	movs	r1, #2
 8007222:	2003      	movs	r0, #3
 8007224:	f7f9 fdd4 	bl	8000dd0 <printTemplate>
 8007228:	e037      	b.n	800729a <takeWifiPass+0x282>
            	} else if(page == 4) {
 800722a:	4b11      	ldr	r3, [pc, #68]	; (8007270 <takeWifiPass+0x258>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b04      	cmp	r3, #4
 8007230:	d10a      	bne.n	8007248 <takeWifiPass+0x230>
            		cursorPosition = 16;
 8007232:	4b0e      	ldr	r3, [pc, #56]	; (800726c <takeWifiPass+0x254>)
 8007234:	2210      	movs	r2, #16
 8007236:	601a      	str	r2, [r3, #0]
            		page = 3;
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <takeWifiPass+0x258>)
 800723a:	2203      	movs	r2, #3
 800723c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800723e:	2103      	movs	r1, #3
 8007240:	2003      	movs	r0, #3
 8007242:	f7f9 fdc5 	bl	8000dd0 <printTemplate>
 8007246:	e028      	b.n	800729a <takeWifiPass+0x282>
            	} else if(page == 5) {
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <takeWifiPass+0x258>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b05      	cmp	r3, #5
 800724e:	d124      	bne.n	800729a <takeWifiPass+0x282>
            		cursorPosition = 16;
 8007250:	4b06      	ldr	r3, [pc, #24]	; (800726c <takeWifiPass+0x254>)
 8007252:	2210      	movs	r2, #16
 8007254:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <takeWifiPass+0x258>)
 8007258:	2204      	movs	r2, #4
 800725a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800725c:	2104      	movs	r1, #4
 800725e:	2003      	movs	r0, #3
 8007260:	f7f9 fdb6 	bl	8000dd0 <printTemplate>
 8007264:	e019      	b.n	800729a <takeWifiPass+0x282>
 8007266:	bf00      	nop
 8007268:	200001c0 	.word	0x200001c0
 800726c:	20000000 	.word	0x20000000
 8007270:	20000004 	.word	0x20000004
 8007274:	40010800 	.word	0x40010800
 8007278:	0800d9bc 	.word	0x0800d9bc
 800727c:	0800d9e4 	.word	0x0800d9e4
 8007280:	20000014 	.word	0x20000014
 8007284:	20000128 	.word	0x20000128
 8007288:	2000028c 	.word	0x2000028c
 800728c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007290:	4b37      	ldr	r3, [pc, #220]	; (8007370 <takeWifiPass+0x358>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3b01      	subs	r3, #1
 8007296:	4a36      	ldr	r2, [pc, #216]	; (8007370 <takeWifiPass+0x358>)
 8007298:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800729a:	20fa      	movs	r0, #250	; 0xfa
 800729c:	f001 f8ec 	bl	8008478 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80072a0:	2102      	movs	r1, #2
 80072a2:	4834      	ldr	r0, [pc, #208]	; (8007374 <takeWifiPass+0x35c>)
 80072a4:	f001 feb8 	bl	8009018 <HAL_GPIO_ReadPin>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d11e      	bne.n	80072ec <takeWifiPass+0x2d4>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7f9 fa42 	bl	800073c <getCharFromCursorPosition>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4619      	mov	r1, r3
 80072bc:	4a2e      	ldr	r2, [pc, #184]	; (8007378 <takeWifiPass+0x360>)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	460a      	mov	r2, r1
 80072c4:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	b2d9      	uxtb	r1, r3
 80072ca:	4a2b      	ldr	r2, [pc, #172]	; (8007378 <takeWifiPass+0x360>)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	2001      	movs	r0, #1
 80072d6:	f000 fb8e 	bl	80079f6 <lcd_print_char>

            writeLoc++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3301      	adds	r3, #1
 80072de:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 80072e6:	20fa      	movs	r0, #250	; 0xfa
 80072e8:	f001 f8c6 	bl	8008478 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072ec:	2104      	movs	r1, #4
 80072ee:	4821      	ldr	r0, [pc, #132]	; (8007374 <takeWifiPass+0x35c>)
 80072f0:	f001 fe92 	bl	8009018 <HAL_GPIO_ReadPin>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d12e      	bne.n	8007358 <takeWifiPass+0x340>
            if(strlen(wifiPass) >= 1) {
 80072fa:	4b1f      	ldr	r3, [pc, #124]	; (8007378 <takeWifiPass+0x360>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d027      	beq.n	8007352 <takeWifiPass+0x33a>
            	wifiPass[wifiPassLoc] = '\0';
 8007302:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <takeWifiPass+0x360>)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4413      	add	r3, r2
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	3306      	adds	r3, #6
 8007312:	b2db      	uxtb	r3, r3
 8007314:	4619      	mov	r1, r3
 8007316:	2001      	movs	r0, #1
 8007318:	f000 fb8e 	bl	8007a38 <lcd_delete_char>
            	HAL_Delay(50);
 800731c:	2032      	movs	r0, #50	; 0x32
 800731e:	f001 f8ab 	bl	8008478 <HAL_Delay>

            	if(writeLoc > 7) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b07      	cmp	r3, #7
 8007326:	dd03      	ble.n	8007330 <takeWifiPass+0x318>
            		writeLoc--;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3b01      	subs	r3, #1
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	e004      	b.n	800733a <takeWifiPass+0x322>
            	} else if(writeLoc < 7) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b06      	cmp	r3, #6
 8007334:	dc01      	bgt.n	800733a <takeWifiPass+0x322>
            		writeLoc = 7;
 8007336:	2307      	movs	r3, #7
 8007338:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd03      	ble.n	8007348 <takeWifiPass+0x330>
            		wifiPassLoc--;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3b01      	subs	r3, #1
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	e004      	b.n	8007352 <takeWifiPass+0x33a>
            	} else if(wifiPassLoc < 0) {
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	da01      	bge.n	8007352 <takeWifiPass+0x33a>
            		wifiPassLoc = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(250);
 8007352:	20fa      	movs	r0, #250	; 0xfa
 8007354:	f001 f890 	bl	8008478 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <takeWifiPass+0x358>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	2002      	movs	r0, #2
 8007362:	f000 fb14 	bl	800798e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007366:	e672      	b.n	800704e <takeWifiPass+0x36>
    }
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}
 8007370:	20000000 	.word	0x20000000
 8007374:	40010800 	.word	0x40010800
 8007378:	200001c0 	.word	0x200001c0

0800737c <mergeData>:

char* mergeData() {
 800737c:	b580      	push	{r7, lr}
 800737e:	b09c      	sub	sp, #112	; 0x70
 8007380:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007382:	2300      	movs	r3, #0
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800738a:	2228      	movs	r2, #40	; 0x28
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f004 ffc9 	bl	800c326 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007394:	4b67      	ldr	r3, [pc, #412]	; (8007534 <mergeData+0x1b8>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	713b      	strb	r3, [r7, #4]
 800739a:	4b67      	ldr	r3, [pc, #412]	; (8007538 <mergeData+0x1bc>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	717b      	strb	r3, [r7, #5]
 80073a0:	4b66      	ldr	r3, [pc, #408]	; (800753c <mergeData+0x1c0>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	71bb      	strb	r3, [r7, #6]
 80073a6:	4b66      	ldr	r3, [pc, #408]	; (8007540 <mergeData+0x1c4>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	71fb      	strb	r3, [r7, #7]
 80073ac:	4b65      	ldr	r3, [pc, #404]	; (8007544 <mergeData+0x1c8>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	723b      	strb	r3, [r7, #8]
 80073b2:	4b65      	ldr	r3, [pc, #404]	; (8007548 <mergeData+0x1cc>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	727b      	strb	r3, [r7, #9]
 80073b8:	4b64      	ldr	r3, [pc, #400]	; (800754c <mergeData+0x1d0>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	72bb      	strb	r3, [r7, #10]
 80073be:	4b64      	ldr	r3, [pc, #400]	; (8007550 <mergeData+0x1d4>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	72fb      	strb	r3, [r7, #11]
 80073c4:	4b63      	ldr	r3, [pc, #396]	; (8007554 <mergeData+0x1d8>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	733b      	strb	r3, [r7, #12]
 80073ca:	4b63      	ldr	r3, [pc, #396]	; (8007558 <mergeData+0x1dc>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	737b      	strb	r3, [r7, #13]
 80073d0:	4b62      	ldr	r3, [pc, #392]	; (800755c <mergeData+0x1e0>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	73bb      	strb	r3, [r7, #14]
 80073d6:	4b62      	ldr	r3, [pc, #392]	; (8007560 <mergeData+0x1e4>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	73fb      	strb	r3, [r7, #15]
 80073dc:	4b61      	ldr	r3, [pc, #388]	; (8007564 <mergeData+0x1e8>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	743b      	strb	r3, [r7, #16]
 80073e2:	4b61      	ldr	r3, [pc, #388]	; (8007568 <mergeData+0x1ec>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	747b      	strb	r3, [r7, #17]
 80073e8:	4b60      	ldr	r3, [pc, #384]	; (800756c <mergeData+0x1f0>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	74bb      	strb	r3, [r7, #18]
 80073ee:	4b60      	ldr	r3, [pc, #384]	; (8007570 <mergeData+0x1f4>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	74fb      	strb	r3, [r7, #19]
 80073f4:	4b5f      	ldr	r3, [pc, #380]	; (8007574 <mergeData+0x1f8>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	753b      	strb	r3, [r7, #20]
 80073fa:	4b5f      	ldr	r3, [pc, #380]	; (8007578 <mergeData+0x1fc>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	757b      	strb	r3, [r7, #21]
 8007400:	4b5e      	ldr	r3, [pc, #376]	; (800757c <mergeData+0x200>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	75bb      	strb	r3, [r7, #22]
 8007406:	4b5e      	ldr	r3, [pc, #376]	; (8007580 <mergeData+0x204>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	75fb      	strb	r3, [r7, #23]
 800740c:	4b5d      	ldr	r3, [pc, #372]	; (8007584 <mergeData+0x208>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	763b      	strb	r3, [r7, #24]
 8007412:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <mergeData+0x20c>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	767b      	strb	r3, [r7, #25]
 8007418:	4b5c      	ldr	r3, [pc, #368]	; (800758c <mergeData+0x210>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	76bb      	strb	r3, [r7, #26]
 800741e:	4b5c      	ldr	r3, [pc, #368]	; (8007590 <mergeData+0x214>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	76fb      	strb	r3, [r7, #27]
 8007424:	4b5b      	ldr	r3, [pc, #364]	; (8007594 <mergeData+0x218>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	773b      	strb	r3, [r7, #28]
 800742a:	4b5b      	ldr	r3, [pc, #364]	; (8007598 <mergeData+0x21c>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	777b      	strb	r3, [r7, #29]
 8007430:	4b5a      	ldr	r3, [pc, #360]	; (800759c <mergeData+0x220>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	77bb      	strb	r3, [r7, #30]
 8007436:	4b5a      	ldr	r3, [pc, #360]	; (80075a0 <mergeData+0x224>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <mergeData+0x228>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	f887 3020 	strb.w	r3, [r7, #32]
 8007444:	4b58      	ldr	r3, [pc, #352]	; (80075a8 <mergeData+0x22c>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800744c:	4b57      	ldr	r3, [pc, #348]	; (80075ac <mergeData+0x230>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007454:	4b56      	ldr	r3, [pc, #344]	; (80075b0 <mergeData+0x234>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745c:	4b55      	ldr	r3, [pc, #340]	; (80075b4 <mergeData+0x238>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007464:	4b54      	ldr	r3, [pc, #336]	; (80075b8 <mergeData+0x23c>)
 8007466:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800746a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800746e:	4b52      	ldr	r3, [pc, #328]	; (80075b8 <mergeData+0x23c>)
 8007470:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007474:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007478:	4b4f      	ldr	r3, [pc, #316]	; (80075b8 <mergeData+0x23c>)
 800747a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800747e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007482:	4b4d      	ldr	r3, [pc, #308]	; (80075b8 <mergeData+0x23c>)
 8007484:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007488:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800748c:	4b4a      	ldr	r3, [pc, #296]	; (80075b8 <mergeData+0x23c>)
 800748e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007492:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007496:	4b48      	ldr	r3, [pc, #288]	; (80075b8 <mergeData+0x23c>)
 8007498:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800749c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80074a0:	4b45      	ldr	r3, [pc, #276]	; (80075b8 <mergeData+0x23c>)
 80074a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80074aa:	4b43      	ldr	r3, [pc, #268]	; (80075b8 <mergeData+0x23c>)
 80074ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80074b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80074b4:	4b40      	ldr	r3, [pc, #256]	; (80075b8 <mergeData+0x23c>)
 80074b6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80074ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80074be:	4b3e      	ldr	r3, [pc, #248]	; (80075b8 <mergeData+0x23c>)
 80074c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80074c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80074c8:	2306      	movs	r3, #6
 80074ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80074ce:	2300      	movs	r3, #0
 80074d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074d2:	e015      	b.n	8007500 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80074d4:	1d3a      	adds	r2, r7, #4
 80074d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d8:	4413      	add	r3, r2
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074e2:	4936      	ldr	r1, [pc, #216]	; (80075bc <mergeData+0x240>)
 80074e4:	4618      	mov	r0, r3
 80074e6:	f004 fead 	bl	800c244 <siprintf>
	    strcat(combinedString, temp);
 80074ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80074ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f004 ff07 	bl	800c308 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fc:	3301      	adds	r3, #1
 80074fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	2b2b      	cmp	r3, #43	; 0x2b
 8007504:	d9e6      	bls.n	80074d4 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800750a:	4618      	mov	r0, r3
 800750c:	f7f8 fe8a 	bl	8000224 <strlen>
 8007510:	4603      	mov	r3, r0
 8007512:	3301      	adds	r3, #1
 8007514:	4618      	mov	r0, r3
 8007516:	f004 fdad 	bl	800c074 <malloc>
 800751a:	4603      	mov	r3, r0
 800751c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800751e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007522:	4619      	mov	r1, r3
 8007524:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007526:	f004 ff51 	bl	800c3cc <strcpy>
	return result;
 800752a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800752c:	4618      	mov	r0, r3
 800752e:	3770      	adds	r7, #112	; 0x70
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	2000020b 	.word	0x2000020b
 8007538:	200001fd 	.word	0x200001fd
 800753c:	20000200 	.word	0x20000200
 8007540:	20000201 	.word	0x20000201
 8007544:	20000202 	.word	0x20000202
 8007548:	20000209 	.word	0x20000209
 800754c:	20000203 	.word	0x20000203
 8007550:	20000204 	.word	0x20000204
 8007554:	20000208 	.word	0x20000208
 8007558:	20000205 	.word	0x20000205
 800755c:	20000215 	.word	0x20000215
 8007560:	20000206 	.word	0x20000206
 8007564:	20000216 	.word	0x20000216
 8007568:	20000207 	.word	0x20000207
 800756c:	20000217 	.word	0x20000217
 8007570:	2000020a 	.word	0x2000020a
 8007574:	2000020c 	.word	0x2000020c
 8007578:	2000020d 	.word	0x2000020d
 800757c:	2000020e 	.word	0x2000020e
 8007580:	2000020f 	.word	0x2000020f
 8007584:	20000210 	.word	0x20000210
 8007588:	20000211 	.word	0x20000211
 800758c:	20000212 	.word	0x20000212
 8007590:	20000213 	.word	0x20000213
 8007594:	20000214 	.word	0x20000214
 8007598:	20000218 	.word	0x20000218
 800759c:	2000021a 	.word	0x2000021a
 80075a0:	200001f9 	.word	0x200001f9
 80075a4:	200001fa 	.word	0x200001fa
 80075a8:	20000008 	.word	0x20000008
 80075ac:	20000009 	.word	0x20000009
 80075b0:	200001fb 	.word	0x200001fb
 80075b4:	2000021d 	.word	0x2000021d
 80075b8:	20000128 	.word	0x20000128
 80075bc:	0800d9f8 	.word	0x0800d9f8

080075c0 <convertAndSendData>:

void convertAndSendData() {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80075c6:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <convertAndSendData+0x70>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80075ce:	4a19      	ldr	r2, [pc, #100]	; (8007634 <convertAndSendData+0x74>)
 80075d0:	2101      	movs	r1, #1
 80075d2:	2001      	movs	r0, #1
 80075d4:	f000 f9fa 	bl	80079cc <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80075d8:	4a17      	ldr	r2, [pc, #92]	; (8007638 <convertAndSendData+0x78>)
 80075da:	2101      	movs	r1, #1
 80075dc:	2002      	movs	r0, #2
 80075de:	f000 f9f5 	bl	80079cc <lcd_print>
 80075e2:	e009      	b.n	80075f8 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80075e4:	4a15      	ldr	r2, [pc, #84]	; (800763c <convertAndSendData+0x7c>)
 80075e6:	2101      	movs	r1, #1
 80075e8:	2001      	movs	r0, #1
 80075ea:	f000 f9ef 	bl	80079cc <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80075ee:	4a14      	ldr	r2, [pc, #80]	; (8007640 <convertAndSendData+0x80>)
 80075f0:	2101      	movs	r1, #1
 80075f2:	2002      	movs	r0, #2
 80075f4:	f000 f9ea 	bl	80079cc <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80075f8:	2300      	movs	r3, #0
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e00a      	b.n	8007614 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80075fe:	f7ff febd 	bl	800737c <mergeData>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	490f      	ldr	r1, [pc, #60]	; (8007644 <convertAndSendData+0x84>)
 8007608:	480f      	ldr	r0, [pc, #60]	; (8007648 <convertAndSendData+0x88>)
 800760a:	f7f9 f96f 	bl	80008ec <sendMachineData>
	for(int i=0; i<2; i++) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3301      	adds	r3, #1
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b01      	cmp	r3, #1
 8007618:	ddf1      	ble.n	80075fe <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800761a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800761e:	f000 ff2b 	bl	8008478 <HAL_Delay>
	lcd_clear();
 8007622:	f000 f9ff 	bl	8007a24 <lcd_clear>
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	2000021d 	.word	0x2000021d
 8007634:	0800d9fc 	.word	0x0800d9fc
 8007638:	0800da10 	.word	0x0800da10
 800763c:	0800da24 	.word	0x0800da24
 8007640:	0800da38 	.word	0x0800da38
 8007644:	200001a0 	.word	0x200001a0
 8007648:	20000328 	.word	0x20000328

0800764c <iotSetup>:

void iotSetup() {
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007650:	4b0e      	ldr	r3, [pc, #56]	; (800768c <iotSetup+0x40>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <iotSetup+0x24>
		if(wifiPass[0] == '\0') {
			takeWifiPass();
		}
		HAL_Delay(500);*/

		takeMachineID();
 8007658:	f7ff f9da 	bl	8006a10 <takeMachineID>
		HAL_Delay(10);
 800765c:	200a      	movs	r0, #10
 800765e:	f000 ff0b 	bl	8008478 <HAL_Delay>
		takeWifiSSID();
 8007662:	f7ff fb27 	bl	8006cb4 <takeWifiSSID>
		HAL_Delay(10);
 8007666:	200a      	movs	r0, #10
 8007668:	f000 ff06 	bl	8008478 <HAL_Delay>
		takeWifiPass();
 800766c:	f7ff fcd4 	bl	8007018 <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007670:	4a07      	ldr	r2, [pc, #28]	; (8007690 <iotSetup+0x44>)
 8007672:	4908      	ldr	r1, [pc, #32]	; (8007694 <iotSetup+0x48>)
 8007674:	4808      	ldr	r0, [pc, #32]	; (8007698 <iotSetup+0x4c>)
 8007676:	f7f9 f8fb 	bl	8000870 <ESP8266_Init>
	HAL_Delay(500);
 800767a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800767e:	f000 fefb 	bl	8008478 <HAL_Delay>
	convertAndSendData();
 8007682:	f7ff ff9d 	bl	80075c0 <convertAndSendData>
}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	2000021b 	.word	0x2000021b
 8007690:	200001c0 	.word	0x200001c0
 8007694:	200001ac 	.word	0x200001ac
 8007698:	20000328 	.word	0x20000328

0800769c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	4603      	mov	r3, r0
 80076a4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	f023 030f 	bic.w	r3, r3, #15
 80076ac:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80076b4:	7b7b      	ldrb	r3, [r7, #13]
 80076b6:	f043 030c 	orr.w	r3, r3, #12
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80076be:	7b7b      	ldrb	r3, [r7, #13]
 80076c0:	f043 0308 	orr.w	r3, r3, #8
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80076c8:	7b3b      	ldrb	r3, [r7, #12]
 80076ca:	f043 030c 	orr.w	r3, r3, #12
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80076d2:	7b3b      	ldrb	r3, [r7, #12]
 80076d4:	f043 0308 	orr.w	r3, r3, #8
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80076dc:	bf00      	nop
 80076de:	4825      	ldr	r0, [pc, #148]	; (8007774 <lcd_send_cmd+0xd8>)
 80076e0:	f002 fac3 	bl	8009c6a <HAL_I2C_GetError>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d0f9      	beq.n	80076de <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80076ea:	bf00      	nop
 80076ec:	4821      	ldr	r0, [pc, #132]	; (8007774 <lcd_send_cmd+0xd8>)
 80076ee:	f002 faaf 	bl	8009c50 <HAL_I2C_GetState>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d1f9      	bne.n	80076ec <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80076f8:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <lcd_send_cmd+0xdc>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d116      	bne.n	800772e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
 8007704:	e00f      	b.n	8007726 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	3310      	adds	r3, #16
 800770a:	443b      	add	r3, r7
 800770c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	f022 0208 	bic.w	r2, r2, #8
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	3310      	adds	r3, #16
 800771a:	443b      	add	r3, r7
 800771c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	3301      	adds	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d9ec      	bls.n	8007706 <lcd_send_cmd+0x6a>
 800772c:	e015      	b.n	800775a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800772e:	2300      	movs	r3, #0
 8007730:	73bb      	strb	r3, [r7, #14]
 8007732:	e00f      	b.n	8007754 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	3310      	adds	r3, #16
 8007738:	443b      	add	r3, r7
 800773a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	f042 0208 	orr.w	r2, r2, #8
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	3310      	adds	r3, #16
 8007748:	443b      	add	r3, r7
 800774a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	3301      	adds	r3, #1
 8007752:	73bb      	strb	r3, [r7, #14]
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b03      	cmp	r3, #3
 8007758:	d9ec      	bls.n	8007734 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800775a:	f107 0208 	add.w	r2, r7, #8
 800775e:	2364      	movs	r3, #100	; 0x64
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	2304      	movs	r3, #4
 8007764:	214e      	movs	r1, #78	; 0x4e
 8007766:	4803      	ldr	r0, [pc, #12]	; (8007774 <lcd_send_cmd+0xd8>)
 8007768:	f001 fe12 	bl	8009390 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	2000028c 	.word	0x2000028c
 8007778:	20000260 	.word	0x20000260

0800777c <lcd_send_data>:

void lcd_send_data (char data) {
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af02      	add	r7, sp, #8
 8007782:	4603      	mov	r3, r0
 8007784:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	f023 030f 	bic.w	r3, r3, #15
 800778c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007794:	7b7b      	ldrb	r3, [r7, #13]
 8007796:	f043 030d 	orr.w	r3, r3, #13
 800779a:	b2db      	uxtb	r3, r3
 800779c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800779e:	7b7b      	ldrb	r3, [r7, #13]
 80077a0:	f043 0309 	orr.w	r3, r3, #9
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80077a8:	7b3b      	ldrb	r3, [r7, #12]
 80077aa:	f043 030d 	orr.w	r3, r3, #13
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80077b2:	7b3b      	ldrb	r3, [r7, #12]
 80077b4:	f043 0309 	orr.w	r3, r3, #9
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80077bc:	bf00      	nop
 80077be:	4825      	ldr	r0, [pc, #148]	; (8007854 <lcd_send_data+0xd8>)
 80077c0:	f002 fa53 	bl	8009c6a <HAL_I2C_GetError>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d0f9      	beq.n	80077be <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077ca:	bf00      	nop
 80077cc:	4821      	ldr	r0, [pc, #132]	; (8007854 <lcd_send_data+0xd8>)
 80077ce:	f002 fa3f 	bl	8009c50 <HAL_I2C_GetState>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d1f9      	bne.n	80077cc <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80077d8:	4b1f      	ldr	r3, [pc, #124]	; (8007858 <lcd_send_data+0xdc>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d116      	bne.n	800780e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
 80077e4:	e00f      	b.n	8007806 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	3310      	adds	r3, #16
 80077ea:	443b      	add	r3, r7
 80077ec:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	f022 0208 	bic.w	r2, r2, #8
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	3310      	adds	r3, #16
 80077fa:	443b      	add	r3, r7
 80077fc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	3301      	adds	r3, #1
 8007804:	73fb      	strb	r3, [r7, #15]
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d9ec      	bls.n	80077e6 <lcd_send_data+0x6a>
 800780c:	e015      	b.n	800783a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800780e:	2300      	movs	r3, #0
 8007810:	73bb      	strb	r3, [r7, #14]
 8007812:	e00f      	b.n	8007834 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	3310      	adds	r3, #16
 8007818:	443b      	add	r3, r7
 800781a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	f042 0208 	orr.w	r2, r2, #8
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	3310      	adds	r3, #16
 8007828:	443b      	add	r3, r7
 800782a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	3301      	adds	r3, #1
 8007832:	73bb      	strb	r3, [r7, #14]
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b03      	cmp	r3, #3
 8007838:	d9ec      	bls.n	8007814 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	2364      	movs	r3, #100	; 0x64
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	2304      	movs	r3, #4
 8007844:	214e      	movs	r1, #78	; 0x4e
 8007846:	4803      	ldr	r0, [pc, #12]	; (8007854 <lcd_send_data+0xd8>)
 8007848:	f001 fda2 	bl	8009390 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	2000028c 	.word	0x2000028c
 8007858:	20000260 	.word	0x20000260

0800785c <lcd_send_string>:

void lcd_send_string (char *str) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007864:	e006      	b.n	8007874 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff ff84 	bl	800777c <lcd_send_data>
	while (*str) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f4      	bne.n	8007866 <lcd_send_string+0xa>
	}
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af02      	add	r7, sp, #8
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	f023 030f 	bic.w	r3, r3, #15
 8007898:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80078a0:	7b7b      	ldrb	r3, [r7, #13]
 80078a2:	f043 030d 	orr.w	r3, r3, #13
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80078aa:	7b7b      	ldrb	r3, [r7, #13]
 80078ac:	f043 0309 	orr.w	r3, r3, #9
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80078b4:	7b3b      	ldrb	r3, [r7, #12]
 80078b6:	f043 030d 	orr.w	r3, r3, #13
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80078be:	7b3b      	ldrb	r3, [r7, #12]
 80078c0:	f043 0309 	orr.w	r3, r3, #9
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80078c8:	bf00      	nop
 80078ca:	4825      	ldr	r0, [pc, #148]	; (8007960 <lcd_send_char+0xd8>)
 80078cc:	f002 f9cd 	bl	8009c6a <HAL_I2C_GetError>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d0f9      	beq.n	80078ca <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078d6:	bf00      	nop
 80078d8:	4821      	ldr	r0, [pc, #132]	; (8007960 <lcd_send_char+0xd8>)
 80078da:	f002 f9b9 	bl	8009c50 <HAL_I2C_GetState>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d1f9      	bne.n	80078d8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80078e4:	4b1f      	ldr	r3, [pc, #124]	; (8007964 <lcd_send_char+0xdc>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d116      	bne.n	800791a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
 80078f0:	e00f      	b.n	8007912 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	3310      	adds	r3, #16
 80078f6:	443b      	add	r3, r7
 80078f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	f022 0208 	bic.w	r2, r2, #8
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	3310      	adds	r3, #16
 8007906:	443b      	add	r3, r7
 8007908:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	3301      	adds	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b03      	cmp	r3, #3
 8007916:	d9ec      	bls.n	80078f2 <lcd_send_char+0x6a>
 8007918:	e015      	b.n	8007946 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800791a:	2300      	movs	r3, #0
 800791c:	73bb      	strb	r3, [r7, #14]
 800791e:	e00f      	b.n	8007940 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	3310      	adds	r3, #16
 8007924:	443b      	add	r3, r7
 8007926:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	f042 0208 	orr.w	r2, r2, #8
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	3310      	adds	r3, #16
 8007934:	443b      	add	r3, r7
 8007936:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	3301      	adds	r3, #1
 800793e:	73bb      	strb	r3, [r7, #14]
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d9ec      	bls.n	8007920 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	2364      	movs	r3, #100	; 0x64
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	2304      	movs	r3, #4
 8007950:	214e      	movs	r1, #78	; 0x4e
 8007952:	4803      	ldr	r0, [pc, #12]	; (8007960 <lcd_send_char+0xd8>)
 8007954:	f001 fd1c 	bl	8009390 <HAL_I2C_Master_Transmit>
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	2000028c 	.word	0x2000028c
 8007964:	20000260 	.word	0x20000260

08007968 <lcd_init>:

void lcd_init (void) {
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800796c:	2002      	movs	r0, #2
 800796e:	f7ff fe95 	bl	800769c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007972:	2028      	movs	r0, #40	; 0x28
 8007974:	f7ff fe92 	bl	800769c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007978:	200c      	movs	r0, #12
 800797a:	f7ff fe8f 	bl	800769c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800797e:	2080      	movs	r0, #128	; 0x80
 8007980:	f7ff fe8c 	bl	800769c <lcd_send_cmd>
	lcd_backlight(1);
 8007984:	2001      	movs	r0, #1
 8007986:	f000 f86d 	bl	8007a64 <lcd_backlight>
}
 800798a:	bf00      	nop
 800798c:	bd80      	pop	{r7, pc}

0800798e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	4603      	mov	r3, r0
 8007996:	460a      	mov	r2, r1
 8007998:	71fb      	strb	r3, [r7, #7]
 800799a:	4613      	mov	r3, r2
 800799c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d106      	bne.n	80079b2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80079a4:	79bb      	ldrb	r3, [r7, #6]
 80079a6:	337f      	adds	r3, #127	; 0x7f
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fe76 	bl	800769c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80079b0:	e008      	b.n	80079c4 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d105      	bne.n	80079c4 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80079b8:	79bb      	ldrb	r3, [r7, #6]
 80079ba:	3b41      	subs	r3, #65	; 0x41
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fe6c 	bl	800769c <lcd_send_cmd>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	603a      	str	r2, [r7, #0]
 80079d6:	71fb      	strb	r3, [r7, #7]
 80079d8:	460b      	mov	r3, r1
 80079da:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80079dc:	79ba      	ldrb	r2, [r7, #6]
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff ffd3 	bl	800798e <lcd_gotoxy>
	lcd_send_string(str);
 80079e8:	6838      	ldr	r0, [r7, #0]
 80079ea:	f7ff ff37 	bl	800785c <lcd_send_string>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	4603      	mov	r3, r0
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	460b      	mov	r3, r1
 8007a02:	71bb      	strb	r3, [r7, #6]
 8007a04:	4613      	mov	r3, r2
 8007a06:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007a08:	79ba      	ldrb	r2, [r7, #6]
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff ffbd 	bl	800798e <lcd_gotoxy>
    lcd_send_char(ch);
 8007a14:	797b      	ldrb	r3, [r7, #5]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff36 	bl	8007888 <lcd_send_char>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <lcd_clear>:

void lcd_clear(void) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7ff fe37 	bl	800769c <lcd_send_cmd>
    HAL_Delay(2);
 8007a2e:	2002      	movs	r0, #2
 8007a30:	f000 fd22 	bl	8008478 <HAL_Delay>
}
 8007a34:	bf00      	nop
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	460a      	mov	r2, r1
 8007a42:	71fb      	strb	r3, [r7, #7]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007a48:	79ba      	ldrb	r2, [r7, #6]
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ff9d 	bl	800798e <lcd_gotoxy>

    lcd_send_char(' ');
 8007a54:	2020      	movs	r0, #32
 8007a56:	f7ff ff17 	bl	8007888 <lcd_send_char>
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007a6e:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <lcd_backlight+0x20>)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007a74:	2000      	movs	r0, #0
 8007a76:	f7ff fe11 	bl	800769c <lcd_send_cmd>
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000260 	.word	0x20000260

08007a88 <lcd_cursor>:

void lcd_cursor(int state) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d106      	bne.n	8007aa4 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007a96:	200e      	movs	r0, #14
 8007a98:	f7ff fe00 	bl	800769c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007a9c:	200f      	movs	r0, #15
 8007a9e:	f7ff fdfd 	bl	800769c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007aa2:	e002      	b.n	8007aaa <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007aa4:	200c      	movs	r0, #12
 8007aa6:	f7ff fdf9 	bl	800769c <lcd_send_cmd>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007abc:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	4a03      	ldr	r2, [pc, #12]	; (8007ad0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ac4:	6013      	str	r3, [r2, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr
 8007ad0:	200001d8 	.word	0x200001d8

08007ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ad8:	f000 fc6c 	bl	80083b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ae0:	f000 fcca 	bl	8008478 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ae4:	f000 f89c 	bl	8007c20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ae8:	f000 f9be 	bl	8007e68 <MX_GPIO_Init>
  MX_CAN_Init();
 8007aec:	f000 f8de 	bl	8007cac <MX_CAN_Init>
  MX_I2C1_Init();
 8007af0:	f000 f910 	bl	8007d14 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007af4:	f000 f93c 	bl	8007d70 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007af8:	f000 f98c 	bl	8007e14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007afc:	2201      	movs	r2, #1
 8007afe:	2140      	movs	r1, #64	; 0x40
 8007b00:	483e      	ldr	r0, [pc, #248]	; (8007bfc <main+0x128>)
 8007b02:	f001 faa0 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007b06:	2201      	movs	r2, #1
 8007b08:	2180      	movs	r1, #128	; 0x80
 8007b0a:	483c      	ldr	r0, [pc, #240]	; (8007bfc <main+0x128>)
 8007b0c:	f001 fa9b 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007b10:	200a      	movs	r0, #10
 8007b12:	f000 fcb1 	bl	8008478 <HAL_Delay>
  lcd_init();
 8007b16:	f7ff ff27 	bl	8007968 <lcd_init>
  HAL_Delay(10);
 8007b1a:	200a      	movs	r0, #10
 8007b1c:	f000 fcac 	bl	8008478 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007b20:	4837      	ldr	r0, [pc, #220]	; (8007c00 <main+0x12c>)
 8007b22:	f003 f943 	bl	800adac <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b26:	bf00      	nop
 8007b28:	4836      	ldr	r0, [pc, #216]	; (8007c04 <main+0x130>)
 8007b2a:	f002 f89e 	bl	8009c6a <HAL_I2C_GetError>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d0f9      	beq.n	8007b28 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b34:	bf00      	nop
 8007b36:	4833      	ldr	r0, [pc, #204]	; (8007c04 <main+0x130>)
 8007b38:	f002 f88a 	bl	8009c50 <HAL_I2C_GetState>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d1f9      	bne.n	8007b36 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b42:	2200      	movs	r2, #0
 8007b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b48:	482c      	ldr	r0, [pc, #176]	; (8007bfc <main+0x128>)
 8007b4a:	f001 fa7c 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b54:	4829      	ldr	r0, [pc, #164]	; (8007bfc <main+0x128>)
 8007b56:	f001 fa76 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	4827      	ldr	r0, [pc, #156]	; (8007bfc <main+0x128>)
 8007b60:	f001 fa71 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007b64:	2200      	movs	r2, #0
 8007b66:	2102      	movs	r1, #2
 8007b68:	4824      	ldr	r0, [pc, #144]	; (8007bfc <main+0x128>)
 8007b6a:	f001 fa6c 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2101      	movs	r1, #1
 8007b72:	4822      	ldr	r0, [pc, #136]	; (8007bfc <main+0x128>)
 8007b74:	f001 fa67 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2120      	movs	r1, #32
 8007b7c:	4822      	ldr	r0, [pc, #136]	; (8007c08 <main+0x134>)
 8007b7e:	f001 fa62 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007b82:	2200      	movs	r2, #0
 8007b84:	2110      	movs	r1, #16
 8007b86:	4820      	ldr	r0, [pc, #128]	; (8007c08 <main+0x134>)
 8007b88:	f001 fa5d 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	481e      	ldr	r0, [pc, #120]	; (8007c0c <main+0x138>)
 8007b92:	f001 fa58 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007b96:	2200      	movs	r2, #0
 8007b98:	2140      	movs	r1, #64	; 0x40
 8007b9a:	481c      	ldr	r0, [pc, #112]	; (8007c0c <main+0x138>)
 8007b9c:	f001 fa53 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2120      	movs	r1, #32
 8007ba4:	4819      	ldr	r0, [pc, #100]	; (8007c0c <main+0x138>)
 8007ba6:	f001 fa4e 	bl	8009046 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007baa:	2200      	movs	r2, #0
 8007bac:	2110      	movs	r1, #16
 8007bae:	4817      	ldr	r0, [pc, #92]	; (8007c0c <main+0x138>)
 8007bb0:	f001 fa49 	bl	8009046 <HAL_GPIO_WritePin>

  i2cTest();
 8007bb4:	f7f9 f85e 	bl	8000c74 <i2cTest>
  HAL_Delay(100);
 8007bb8:	2064      	movs	r0, #100	; 0x64
 8007bba:	f000 fc5d 	bl	8008478 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007bbe:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <main+0x13c>)
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f7ff ff02 	bl	80079cc <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007bc8:	4a12      	ldr	r2, [pc, #72]	; (8007c14 <main+0x140>)
 8007bca:	2101      	movs	r1, #1
 8007bcc:	2002      	movs	r0, #2
 8007bce:	f7ff fefd 	bl	80079cc <lcd_print>
  HAL_Delay(1000);
 8007bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bd6:	f000 fc4f 	bl	8008478 <HAL_Delay>
  lcd_clear();
 8007bda:	f7ff ff23 	bl	8007a24 <lcd_clear>

  eepromKontrol();
 8007bde:	f7f8 fb29 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007be2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007be6:	f000 fc47 	bl	8008478 <HAL_Delay>

  backLightTimer = millis;
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <main+0x144>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <main+0x148>)
 8007bf0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007bf2:	f7ff fd2b 	bl	800764c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007bf6:	f7fe fd73 	bl	80066e0 <mainLoop>
 8007bfa:	e7fc      	b.n	8007bf6 <main+0x122>
 8007bfc:	40010c00 	.word	0x40010c00
 8007c00:	200002e0 	.word	0x200002e0
 8007c04:	2000028c 	.word	0x2000028c
 8007c08:	40011000 	.word	0x40011000
 8007c0c:	40010800 	.word	0x40010800
 8007c10:	0800da4c 	.word	0x0800da4c
 8007c14:	0800da60 	.word	0x0800da60
 8007c18:	200001d8 	.word	0x200001d8
 8007c1c:	200001f4 	.word	0x200001f4

08007c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b090      	sub	sp, #64	; 0x40
 8007c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c26:	f107 0318 	add.w	r3, r7, #24
 8007c2a:	2228      	movs	r2, #40	; 0x28
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f004 fb79 	bl	800c326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c34:	1d3b      	adds	r3, r7, #4
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	609a      	str	r2, [r3, #8]
 8007c3e:	60da      	str	r2, [r3, #12]
 8007c40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007c42:	2301      	movs	r3, #1
 8007c44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c50:	2301      	movs	r3, #1
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c54:	2302      	movs	r3, #2
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007c5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c64:	f107 0318 	add.w	r3, r7, #24
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fc3f 	bl	800a4ec <HAL_RCC_OscConfig>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007c74:	f000 f9a2 	bl	8007fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c78:	230f      	movs	r3, #15
 8007c7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007c8e:	1d3b      	adds	r3, r7, #4
 8007c90:	2102      	movs	r1, #2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 feac 	bl	800a9f0 <HAL_RCC_ClockConfig>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007c9e:	f000 f98d 	bl	8007fbc <Error_Handler>
  }
}
 8007ca2:	bf00      	nop
 8007ca4:	3740      	adds	r7, #64	; 0x40
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007cb0:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cb2:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <MX_CAN_Init+0x64>)
 8007cb4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007cb6:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cb8:	2210      	movs	r2, #16
 8007cba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007cbc:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007cc8:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007cd4:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007cda:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <MX_CAN_Init+0x60>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <MX_CAN_Init+0x60>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007cec:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007cf2:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007cf8:	4804      	ldr	r0, [pc, #16]	; (8007d0c <MX_CAN_Init+0x60>)
 8007cfa:	f000 fbe1 	bl	80084c0 <HAL_CAN_Init>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007d04:	f000 f95a 	bl	8007fbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007d08:	bf00      	nop
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20000264 	.word	0x20000264
 8007d10:	40006400 	.word	0x40006400

08007d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007d18:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d1a:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <MX_I2C1_Init+0x54>)
 8007d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d20:	4a12      	ldr	r2, [pc, #72]	; (8007d6c <MX_I2C1_Init+0x58>)
 8007d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007d24:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007d30:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d44:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d4a:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007d50:	4804      	ldr	r0, [pc, #16]	; (8007d64 <MX_I2C1_Init+0x50>)
 8007d52:	f001 f9a9 	bl	80090a8 <HAL_I2C_Init>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007d5c:	f000 f92e 	bl	8007fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007d60:	bf00      	nop
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	2000028c 	.word	0x2000028c
 8007d68:	40005400 	.word	0x40005400
 8007d6c:	00061a80 	.word	0x00061a80

08007d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	605a      	str	r2, [r3, #4]
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d84:	463b      	mov	r3, r7
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007d8e:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <MX_TIM1_Init+0xa0>)
 8007d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007d92:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007d94:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007d98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007da0:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007da2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007da6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007da8:	4b18      	ldr	r3, [pc, #96]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007dae:	4b17      	ldr	r3, [pc, #92]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007db4:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007dba:	4814      	ldr	r0, [pc, #80]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007dbc:	f002 ffa6 	bl	800ad0c <HAL_TIM_Base_Init>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007dc6:	f000 f8f9 	bl	8007fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	480d      	ldr	r0, [pc, #52]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007dd8:	f003 f950 	bl	800b07c <HAL_TIM_ConfigClockSource>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007de2:	f000 f8eb 	bl	8007fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007de6:	2300      	movs	r3, #0
 8007de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007dee:	463b      	mov	r3, r7
 8007df0:	4619      	mov	r1, r3
 8007df2:	4806      	ldr	r0, [pc, #24]	; (8007e0c <MX_TIM1_Init+0x9c>)
 8007df4:	f003 fb3e 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007dfe:	f000 f8dd 	bl	8007fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007e02:	bf00      	nop
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200002e0 	.word	0x200002e0
 8007e10:	40012c00 	.word	0x40012c00

08007e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e1a:	4a12      	ldr	r2, [pc, #72]	; (8007e64 <MX_USART1_UART_Init+0x50>)
 8007e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e1e:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e26:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e2c:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e3a:	220c      	movs	r2, #12
 8007e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e44:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007e4a:	4805      	ldr	r0, [pc, #20]	; (8007e60 <MX_USART1_UART_Init+0x4c>)
 8007e4c:	f003 fb90 	bl	800b570 <HAL_UART_Init>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007e56:	f000 f8b1 	bl	8007fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007e5a:	bf00      	nop
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000328 	.word	0x20000328
 8007e64:	40013800 	.word	0x40013800

08007e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e6e:	f107 0310 	add.w	r3, r7, #16
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	605a      	str	r2, [r3, #4]
 8007e78:	609a      	str	r2, [r3, #8]
 8007e7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e7c:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <MX_GPIO_Init+0x144>)
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	4a4a      	ldr	r2, [pc, #296]	; (8007fac <MX_GPIO_Init+0x144>)
 8007e82:	f043 0310 	orr.w	r3, r3, #16
 8007e86:	6193      	str	r3, [r2, #24]
 8007e88:	4b48      	ldr	r3, [pc, #288]	; (8007fac <MX_GPIO_Init+0x144>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e94:	4b45      	ldr	r3, [pc, #276]	; (8007fac <MX_GPIO_Init+0x144>)
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	4a44      	ldr	r2, [pc, #272]	; (8007fac <MX_GPIO_Init+0x144>)
 8007e9a:	f043 0320 	orr.w	r3, r3, #32
 8007e9e:	6193      	str	r3, [r2, #24]
 8007ea0:	4b42      	ldr	r3, [pc, #264]	; (8007fac <MX_GPIO_Init+0x144>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eac:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <MX_GPIO_Init+0x144>)
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	4a3e      	ldr	r2, [pc, #248]	; (8007fac <MX_GPIO_Init+0x144>)
 8007eb2:	f043 0304 	orr.w	r3, r3, #4
 8007eb6:	6193      	str	r3, [r2, #24]
 8007eb8:	4b3c      	ldr	r3, [pc, #240]	; (8007fac <MX_GPIO_Init+0x144>)
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ec4:	4b39      	ldr	r3, [pc, #228]	; (8007fac <MX_GPIO_Init+0x144>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	4a38      	ldr	r2, [pc, #224]	; (8007fac <MX_GPIO_Init+0x144>)
 8007eca:	f043 0308 	orr.w	r3, r3, #8
 8007ece:	6193      	str	r3, [r2, #24]
 8007ed0:	4b36      	ldr	r3, [pc, #216]	; (8007fac <MX_GPIO_Init+0x144>)
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007edc:	2200      	movs	r2, #0
 8007ede:	21f0      	movs	r1, #240	; 0xf0
 8007ee0:	4833      	ldr	r0, [pc, #204]	; (8007fb0 <MX_GPIO_Init+0x148>)
 8007ee2:	f001 f8b0 	bl	8009046 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f241 0130 	movw	r1, #4144	; 0x1030
 8007eec:	4831      	ldr	r0, [pc, #196]	; (8007fb4 <MX_GPIO_Init+0x14c>)
 8007eee:	f001 f8aa 	bl	8009046 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f640 4107 	movw	r1, #3079	; 0xc07
 8007ef8:	482f      	ldr	r0, [pc, #188]	; (8007fb8 <MX_GPIO_Init+0x150>)
 8007efa:	f001 f8a4 	bl	8009046 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007efe:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007f02:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f0c:	f107 0310 	add.w	r3, r7, #16
 8007f10:	4619      	mov	r1, r3
 8007f12:	4828      	ldr	r0, [pc, #160]	; (8007fb4 <MX_GPIO_Init+0x14c>)
 8007f14:	f000 fe20 	bl	8008b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007f18:	f248 130f 	movw	r3, #33039	; 0x810f
 8007f1c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f26:	f107 0310 	add.w	r3, r7, #16
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4820      	ldr	r0, [pc, #128]	; (8007fb0 <MX_GPIO_Init+0x148>)
 8007f2e:	f000 fe13 	bl	8008b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007f32:	23f0      	movs	r3, #240	; 0xf0
 8007f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f36:	2301      	movs	r3, #1
 8007f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f42:	f107 0310 	add.w	r3, r7, #16
 8007f46:	4619      	mov	r1, r3
 8007f48:	4819      	ldr	r0, [pc, #100]	; (8007fb0 <MX_GPIO_Init+0x148>)
 8007f4a:	f000 fe05 	bl	8008b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007f4e:	f241 0330 	movw	r3, #4144	; 0x1030
 8007f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f54:	2301      	movs	r3, #1
 8007f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f60:	f107 0310 	add.w	r3, r7, #16
 8007f64:	4619      	mov	r1, r3
 8007f66:	4813      	ldr	r0, [pc, #76]	; (8007fb4 <MX_GPIO_Init+0x14c>)
 8007f68:	f000 fdf6 	bl	8008b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007f6c:	f640 4307 	movw	r3, #3079	; 0xc07
 8007f70:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f72:	2301      	movs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	4619      	mov	r1, r3
 8007f84:	480c      	ldr	r0, [pc, #48]	; (8007fb8 <MX_GPIO_Init+0x150>)
 8007f86:	f000 fde7 	bl	8008b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007f8a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f98:	f107 0310 	add.w	r3, r7, #16
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4806      	ldr	r0, [pc, #24]	; (8007fb8 <MX_GPIO_Init+0x150>)
 8007fa0:	f000 fdda 	bl	8008b58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007fa4:	bf00      	nop
 8007fa6:	3720      	adds	r7, #32
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	40010800 	.word	0x40010800
 8007fb4:	40011000 	.word	0x40011000
 8007fb8:	40010c00 	.word	0x40010c00

08007fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007fc0:	bf00      	nop
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007fce:	4b15      	ldr	r3, [pc, #84]	; (8008024 <HAL_MspInit+0x5c>)
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	4a14      	ldr	r2, [pc, #80]	; (8008024 <HAL_MspInit+0x5c>)
 8007fd4:	f043 0301 	orr.w	r3, r3, #1
 8007fd8:	6193      	str	r3, [r2, #24]
 8007fda:	4b12      	ldr	r3, [pc, #72]	; (8008024 <HAL_MspInit+0x5c>)
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	60bb      	str	r3, [r7, #8]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <HAL_MspInit+0x5c>)
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	4a0e      	ldr	r2, [pc, #56]	; (8008024 <HAL_MspInit+0x5c>)
 8007fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff0:	61d3      	str	r3, [r2, #28]
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <HAL_MspInit+0x5c>)
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007ffe:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <HAL_MspInit+0x60>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	4a04      	ldr	r2, [pc, #16]	; (8008028 <HAL_MspInit+0x60>)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr
 8008024:	40021000 	.word	0x40021000
 8008028:	40010000 	.word	0x40010000

0800802c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008034:	f107 0310 	add.w	r3, r7, #16
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	609a      	str	r2, [r3, #8]
 8008040:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a1c      	ldr	r2, [pc, #112]	; (80080b8 <HAL_CAN_MspInit+0x8c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d131      	bne.n	80080b0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800804c:	4b1b      	ldr	r3, [pc, #108]	; (80080bc <HAL_CAN_MspInit+0x90>)
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	4a1a      	ldr	r2, [pc, #104]	; (80080bc <HAL_CAN_MspInit+0x90>)
 8008052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008056:	61d3      	str	r3, [r2, #28]
 8008058:	4b18      	ldr	r3, [pc, #96]	; (80080bc <HAL_CAN_MspInit+0x90>)
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008064:	4b15      	ldr	r3, [pc, #84]	; (80080bc <HAL_CAN_MspInit+0x90>)
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	4a14      	ldr	r2, [pc, #80]	; (80080bc <HAL_CAN_MspInit+0x90>)
 800806a:	f043 0304 	orr.w	r3, r3, #4
 800806e:	6193      	str	r3, [r2, #24]
 8008070:	4b12      	ldr	r3, [pc, #72]	; (80080bc <HAL_CAN_MspInit+0x90>)
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800807c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008086:	2300      	movs	r3, #0
 8008088:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800808a:	f107 0310 	add.w	r3, r7, #16
 800808e:	4619      	mov	r1, r3
 8008090:	480b      	ldr	r0, [pc, #44]	; (80080c0 <HAL_CAN_MspInit+0x94>)
 8008092:	f000 fd61 	bl	8008b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800809a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800809c:	2302      	movs	r3, #2
 800809e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080a0:	2303      	movs	r3, #3
 80080a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080a4:	f107 0310 	add.w	r3, r7, #16
 80080a8:	4619      	mov	r1, r3
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <HAL_CAN_MspInit+0x94>)
 80080ac:	f000 fd54 	bl	8008b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80080b0:	bf00      	nop
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40006400 	.word	0x40006400
 80080bc:	40021000 	.word	0x40021000
 80080c0:	40010800 	.word	0x40010800

080080c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	605a      	str	r2, [r3, #4]
 80080d6:	609a      	str	r2, [r3, #8]
 80080d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a15      	ldr	r2, [pc, #84]	; (8008134 <HAL_I2C_MspInit+0x70>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d123      	bne.n	800812c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080e4:	4b14      	ldr	r3, [pc, #80]	; (8008138 <HAL_I2C_MspInit+0x74>)
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4a13      	ldr	r2, [pc, #76]	; (8008138 <HAL_I2C_MspInit+0x74>)
 80080ea:	f043 0308 	orr.w	r3, r3, #8
 80080ee:	6193      	str	r3, [r2, #24]
 80080f0:	4b11      	ldr	r3, [pc, #68]	; (8008138 <HAL_I2C_MspInit+0x74>)
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80080fc:	23c0      	movs	r3, #192	; 0xc0
 80080fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008100:	2312      	movs	r3, #18
 8008102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008104:	2303      	movs	r3, #3
 8008106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	4619      	mov	r1, r3
 800810e:	480b      	ldr	r0, [pc, #44]	; (800813c <HAL_I2C_MspInit+0x78>)
 8008110:	f000 fd22 	bl	8008b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008114:	4b08      	ldr	r3, [pc, #32]	; (8008138 <HAL_I2C_MspInit+0x74>)
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	4a07      	ldr	r2, [pc, #28]	; (8008138 <HAL_I2C_MspInit+0x74>)
 800811a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800811e:	61d3      	str	r3, [r2, #28]
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <HAL_I2C_MspInit+0x74>)
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008128:	60bb      	str	r3, [r7, #8]
 800812a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800812c:	bf00      	nop
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40005400 	.word	0x40005400
 8008138:	40021000 	.word	0x40021000
 800813c:	40010c00 	.word	0x40010c00

08008140 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <HAL_I2C_MspDeInit+0x38>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d10d      	bne.n	800816e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <HAL_I2C_MspDeInit+0x3c>)
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	4a09      	ldr	r2, [pc, #36]	; (800817c <HAL_I2C_MspDeInit+0x3c>)
 8008158:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800815c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800815e:	2140      	movs	r1, #64	; 0x40
 8008160:	4807      	ldr	r0, [pc, #28]	; (8008180 <HAL_I2C_MspDeInit+0x40>)
 8008162:	f000 fe8d 	bl	8008e80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	4805      	ldr	r0, [pc, #20]	; (8008180 <HAL_I2C_MspDeInit+0x40>)
 800816a:	f000 fe89 	bl	8008e80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40005400 	.word	0x40005400
 800817c:	40021000 	.word	0x40021000
 8008180:	40010c00 	.word	0x40010c00

08008184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0d      	ldr	r2, [pc, #52]	; (80081c8 <HAL_TIM_Base_MspInit+0x44>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d113      	bne.n	80081be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008196:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <HAL_TIM_Base_MspInit+0x48>)
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	4a0c      	ldr	r2, [pc, #48]	; (80081cc <HAL_TIM_Base_MspInit+0x48>)
 800819c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081a0:	6193      	str	r3, [r2, #24]
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <HAL_TIM_Base_MspInit+0x48>)
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80081ae:	2200      	movs	r2, #0
 80081b0:	2100      	movs	r1, #0
 80081b2:	2019      	movs	r0, #25
 80081b4:	f000 fb57 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80081b8:	2019      	movs	r0, #25
 80081ba:	f000 fb70 	bl	800889e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40021000 	.word	0x40021000

080081d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	609a      	str	r2, [r3, #8]
 80081e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a20      	ldr	r2, [pc, #128]	; (800826c <HAL_UART_MspInit+0x9c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d139      	bne.n	8008264 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80081f0:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <HAL_UART_MspInit+0xa0>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <HAL_UART_MspInit+0xa0>)
 80081f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081fa:	6193      	str	r3, [r2, #24]
 80081fc:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <HAL_UART_MspInit+0xa0>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008208:	4b19      	ldr	r3, [pc, #100]	; (8008270 <HAL_UART_MspInit+0xa0>)
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	4a18      	ldr	r2, [pc, #96]	; (8008270 <HAL_UART_MspInit+0xa0>)
 800820e:	f043 0304 	orr.w	r3, r3, #4
 8008212:	6193      	str	r3, [r2, #24]
 8008214:	4b16      	ldr	r3, [pc, #88]	; (8008270 <HAL_UART_MspInit+0xa0>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008226:	2302      	movs	r3, #2
 8008228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800822a:	2303      	movs	r3, #3
 800822c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800822e:	f107 0310 	add.w	r3, r7, #16
 8008232:	4619      	mov	r1, r3
 8008234:	480f      	ldr	r0, [pc, #60]	; (8008274 <HAL_UART_MspInit+0xa4>)
 8008236:	f000 fc8f 	bl	8008b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800823a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800823e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008244:	2300      	movs	r3, #0
 8008246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008248:	f107 0310 	add.w	r3, r7, #16
 800824c:	4619      	mov	r1, r3
 800824e:	4809      	ldr	r0, [pc, #36]	; (8008274 <HAL_UART_MspInit+0xa4>)
 8008250:	f000 fc82 	bl	8008b58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008254:	2200      	movs	r2, #0
 8008256:	2100      	movs	r1, #0
 8008258:	2025      	movs	r0, #37	; 0x25
 800825a:	f000 fb04 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800825e:	2025      	movs	r0, #37	; 0x25
 8008260:	f000 fb1d 	bl	800889e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008264:	bf00      	nop
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40013800 	.word	0x40013800
 8008270:	40021000 	.word	0x40021000
 8008274:	40010800 	.word	0x40010800

08008278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800827c:	e7fe      	b.n	800827c <NMI_Handler+0x4>

0800827e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800827e:	b480      	push	{r7}
 8008280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008282:	e7fe      	b.n	8008282 <HardFault_Handler+0x4>

08008284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008288:	e7fe      	b.n	8008288 <MemManage_Handler+0x4>

0800828a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800828a:	b480      	push	{r7}
 800828c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800828e:	e7fe      	b.n	800828e <BusFault_Handler+0x4>

08008290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008294:	e7fe      	b.n	8008294 <UsageFault_Handler+0x4>

08008296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008296:	b480      	push	{r7}
 8008298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800829a:	bf00      	nop
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082a2:	b480      	push	{r7}
 80082a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082a6:	bf00      	nop
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr

080082ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082ae:	b480      	push	{r7}
 80082b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082b2:	bf00      	nop
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr

080082ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082be:	f000 f8bf 	bl	8008440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082c2:	bf00      	nop
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80082cc:	4802      	ldr	r0, [pc, #8]	; (80082d8 <TIM1_UP_IRQHandler+0x10>)
 80082ce:	f002 fdcd 	bl	800ae6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80082d2:	bf00      	nop
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200002e0 	.word	0x200002e0

080082dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80082e0:	4802      	ldr	r0, [pc, #8]	; (80082ec <USART1_IRQHandler+0x10>)
 80082e2:	f003 f9cb 	bl	800b67c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80082e6:	bf00      	nop
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000328 	.word	0x20000328

080082f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082f8:	4a14      	ldr	r2, [pc, #80]	; (800834c <_sbrk+0x5c>)
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <_sbrk+0x60>)
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008304:	4b13      	ldr	r3, [pc, #76]	; (8008354 <_sbrk+0x64>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d102      	bne.n	8008312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <_sbrk+0x64>)
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <_sbrk+0x68>)
 8008310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008312:	4b10      	ldr	r3, [pc, #64]	; (8008354 <_sbrk+0x64>)
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	429a      	cmp	r2, r3
 800831e:	d207      	bcs.n	8008330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008320:	f004 f81a 	bl	800c358 <__errno>
 8008324:	4603      	mov	r3, r0
 8008326:	220c      	movs	r2, #12
 8008328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800832a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800832e:	e009      	b.n	8008344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <_sbrk+0x64>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008336:	4b07      	ldr	r3, [pc, #28]	; (8008354 <_sbrk+0x64>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	4a05      	ldr	r2, [pc, #20]	; (8008354 <_sbrk+0x64>)
 8008340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	2000c000 	.word	0x2000c000
 8008350:	00000400 	.word	0x00000400
 8008354:	20000370 	.word	0x20000370
 8008358:	200004c0 	.word	0x200004c0

0800835c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	bc80      	pop	{r7}
 8008366:	4770      	bx	lr

08008368 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008368:	480c      	ldr	r0, [pc, #48]	; (800839c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800836a:	490d      	ldr	r1, [pc, #52]	; (80083a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800836c:	4a0d      	ldr	r2, [pc, #52]	; (80083a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800836e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008370:	e002      	b.n	8008378 <LoopCopyDataInit>

08008372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008376:	3304      	adds	r3, #4

08008378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800837a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800837c:	d3f9      	bcc.n	8008372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800837e:	4a0a      	ldr	r2, [pc, #40]	; (80083a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008380:	4c0a      	ldr	r4, [pc, #40]	; (80083ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8008382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008384:	e001      	b.n	800838a <LoopFillZerobss>

08008386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008388:	3204      	adds	r2, #4

0800838a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800838a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800838c:	d3fb      	bcc.n	8008386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800838e:	f7ff ffe5 	bl	800835c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008392:	f003 ffe7 	bl	800c364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008396:	f7ff fb9d 	bl	8007ad4 <main>
  bx lr
 800839a:	4770      	bx	lr
  ldr r0, =_sdata
 800839c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083a0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80083a4:	0800db00 	.word	0x0800db00
  ldr r2, =_sbss
 80083a8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80083ac:	200004c0 	.word	0x200004c0

080083b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80083b0:	e7fe      	b.n	80083b0 <ADC1_2_IRQHandler>
	...

080083b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083b8:	4b08      	ldr	r3, [pc, #32]	; (80083dc <HAL_Init+0x28>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a07      	ldr	r2, [pc, #28]	; (80083dc <HAL_Init+0x28>)
 80083be:	f043 0310 	orr.w	r3, r3, #16
 80083c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083c4:	2003      	movs	r0, #3
 80083c6:	f000 fa43 	bl	8008850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083ca:	200f      	movs	r0, #15
 80083cc:	f000 f808 	bl	80083e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80083d0:	f7ff fdfa 	bl	8007fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40022000 	.word	0x40022000

080083e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083e8:	4b12      	ldr	r3, [pc, #72]	; (8008434 <HAL_InitTick+0x54>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4b12      	ldr	r3, [pc, #72]	; (8008438 <HAL_InitTick+0x58>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	4619      	mov	r1, r3
 80083f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fa5b 	bl	80088ba <HAL_SYSTICK_Config>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e00e      	b.n	800842c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b0f      	cmp	r3, #15
 8008412:	d80a      	bhi.n	800842a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008414:	2200      	movs	r2, #0
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841c:	f000 fa23 	bl	8008866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008420:	4a06      	ldr	r2, [pc, #24]	; (800843c <HAL_InitTick+0x5c>)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	e000      	b.n	800842c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	200000b0 	.word	0x200000b0
 8008438:	200000b8 	.word	0x200000b8
 800843c:	200000b4 	.word	0x200000b4

08008440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <HAL_IncTick+0x1c>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <HAL_IncTick+0x20>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4413      	add	r3, r2
 8008450:	4a03      	ldr	r2, [pc, #12]	; (8008460 <HAL_IncTick+0x20>)
 8008452:	6013      	str	r3, [r2, #0]
}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	bc80      	pop	{r7}
 800845a:	4770      	bx	lr
 800845c:	200000b8 	.word	0x200000b8
 8008460:	20000374 	.word	0x20000374

08008464 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  return uwTick;
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <HAL_GetTick+0x10>)
 800846a:	681b      	ldr	r3, [r3, #0]
}
 800846c:	4618      	mov	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr
 8008474:	20000374 	.word	0x20000374

08008478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008480:	f7ff fff0 	bl	8008464 <HAL_GetTick>
 8008484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008490:	d005      	beq.n	800849e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <HAL_Delay+0x44>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800849e:	bf00      	nop
 80084a0:	f7ff ffe0 	bl	8008464 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d8f7      	bhi.n	80084a0 <HAL_Delay+0x28>
  {
  }
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	200000b8 	.word	0x200000b8

080084c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e0ed      	b.n	80086ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff fda4 	bl	800802c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0201 	orr.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084f4:	f7ff ffb6 	bl	8008464 <HAL_GetTick>
 80084f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80084fa:	e012      	b.n	8008522 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80084fc:	f7ff ffb2 	bl	8008464 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b0a      	cmp	r3, #10
 8008508:	d90b      	bls.n	8008522 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2205      	movs	r2, #5
 800851a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e0c5      	b.n	80086ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0e5      	beq.n	80084fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0202 	bic.w	r2, r2, #2
 800853e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008540:	f7ff ff90 	bl	8008464 <HAL_GetTick>
 8008544:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008546:	e012      	b.n	800856e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008548:	f7ff ff8c 	bl	8008464 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b0a      	cmp	r3, #10
 8008554:	d90b      	bls.n	800856e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2205      	movs	r2, #5
 8008566:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e09f      	b.n	80086ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7e1b      	ldrb	r3, [r3, #24]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d108      	bne.n	8008596 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e007      	b.n	80085a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7e5b      	ldrb	r3, [r3, #25]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d108      	bne.n	80085c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e007      	b.n	80085d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7e9b      	ldrb	r3, [r3, #26]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d108      	bne.n	80085ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0220 	orr.w	r2, r2, #32
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e007      	b.n	80085fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0220 	bic.w	r2, r2, #32
 80085f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7edb      	ldrb	r3, [r3, #27]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d108      	bne.n	8008614 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0210 	bic.w	r2, r2, #16
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e007      	b.n	8008624 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0210 	orr.w	r2, r2, #16
 8008622:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7f1b      	ldrb	r3, [r3, #28]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d108      	bne.n	800863e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0208 	orr.w	r2, r2, #8
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e007      	b.n	800864e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0208 	bic.w	r2, r2, #8
 800864c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	7f5b      	ldrb	r3, [r3, #29]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d108      	bne.n	8008668 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0204 	orr.w	r2, r2, #4
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	e007      	b.n	8008678 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0204 	bic.w	r2, r2, #4
 8008676:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	ea42 0103 	orr.w	r1, r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	1e5a      	subs	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <__NVIC_SetPriorityGrouping>:
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <__NVIC_SetPriorityGrouping+0x44>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80086d4:	4013      	ands	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086ea:	4a04      	ldr	r2, [pc, #16]	; (80086fc <__NVIC_SetPriorityGrouping+0x44>)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	60d3      	str	r3, [r2, #12]
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	e000ed00 	.word	0xe000ed00

08008700 <__NVIC_GetPriorityGrouping>:
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008704:	4b04      	ldr	r3, [pc, #16]	; (8008718 <__NVIC_GetPriorityGrouping+0x18>)
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	0a1b      	lsrs	r3, r3, #8
 800870a:	f003 0307 	and.w	r3, r3, #7
}
 800870e:	4618      	mov	r0, r3
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	e000ed00 	.word	0xe000ed00

0800871c <__NVIC_EnableIRQ>:
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872a:	2b00      	cmp	r3, #0
 800872c:	db0b      	blt.n	8008746 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	f003 021f 	and.w	r2, r3, #31
 8008734:	4906      	ldr	r1, [pc, #24]	; (8008750 <__NVIC_EnableIRQ+0x34>)
 8008736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	2001      	movs	r0, #1
 800873e:	fa00 f202 	lsl.w	r2, r0, r2
 8008742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	e000e100 	.word	0xe000e100

08008754 <__NVIC_SetPriority>:
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008764:	2b00      	cmp	r3, #0
 8008766:	db0a      	blt.n	800877e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	490c      	ldr	r1, [pc, #48]	; (80087a0 <__NVIC_SetPriority+0x4c>)
 800876e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008772:	0112      	lsls	r2, r2, #4
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	440b      	add	r3, r1
 8008778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800877c:	e00a      	b.n	8008794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	4908      	ldr	r1, [pc, #32]	; (80087a4 <__NVIC_SetPriority+0x50>)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	3b04      	subs	r3, #4
 800878c:	0112      	lsls	r2, r2, #4
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	440b      	add	r3, r1
 8008792:	761a      	strb	r2, [r3, #24]
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	e000e100 	.word	0xe000e100
 80087a4:	e000ed00 	.word	0xe000ed00

080087a8 <NVIC_EncodePriority>:
{
 80087a8:	b480      	push	{r7}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f1c3 0307 	rsb	r3, r3, #7
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	bf28      	it	cs
 80087c6:	2304      	movcs	r3, #4
 80087c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	3304      	adds	r3, #4
 80087ce:	2b06      	cmp	r3, #6
 80087d0:	d902      	bls.n	80087d8 <NVIC_EncodePriority+0x30>
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	3b03      	subs	r3, #3
 80087d6:	e000      	b.n	80087da <NVIC_EncodePriority+0x32>
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43da      	mvns	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	401a      	ands	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	fa01 f303 	lsl.w	r3, r1, r3
 80087fa:	43d9      	mvns	r1, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008800:	4313      	orrs	r3, r2
}
 8008802:	4618      	mov	r0, r3
 8008804:	3724      	adds	r7, #36	; 0x24
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr

0800880c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3b01      	subs	r3, #1
 8008818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800881c:	d301      	bcc.n	8008822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800881e:	2301      	movs	r3, #1
 8008820:	e00f      	b.n	8008842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008822:	4a0a      	ldr	r2, [pc, #40]	; (800884c <SysTick_Config+0x40>)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3b01      	subs	r3, #1
 8008828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800882a:	210f      	movs	r1, #15
 800882c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008830:	f7ff ff90 	bl	8008754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <SysTick_Config+0x40>)
 8008836:	2200      	movs	r2, #0
 8008838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800883a:	4b04      	ldr	r3, [pc, #16]	; (800884c <SysTick_Config+0x40>)
 800883c:	2207      	movs	r2, #7
 800883e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	e000e010 	.word	0xe000e010

08008850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ff2d 	bl	80086b8 <__NVIC_SetPriorityGrouping>
}
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008866:	b580      	push	{r7, lr}
 8008868:	b086      	sub	sp, #24
 800886a:	af00      	add	r7, sp, #0
 800886c:	4603      	mov	r3, r0
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008878:	f7ff ff42 	bl	8008700 <__NVIC_GetPriorityGrouping>
 800887c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	6978      	ldr	r0, [r7, #20]
 8008884:	f7ff ff90 	bl	80087a8 <NVIC_EncodePriority>
 8008888:	4602      	mov	r2, r0
 800888a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff ff5f 	bl	8008754 <__NVIC_SetPriority>
}
 8008896:	bf00      	nop
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	4603      	mov	r3, r0
 80088a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff ff35 	bl	800871c <__NVIC_EnableIRQ>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ffa2 	bl	800880c <SysTick_Config>
 80088c8:	4603      	mov	r3, r0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d008      	beq.n	80088fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2204      	movs	r2, #4
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e020      	b.n	800893e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 020e 	bic.w	r2, r2, #14
 800890a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0201 	bic.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008924:	2101      	movs	r1, #1
 8008926:	fa01 f202 	lsl.w	r2, r1, r2
 800892a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	bc80      	pop	{r7}
 8008946:	4770      	bx	lr

08008948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d005      	beq.n	800896c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2204      	movs	r2, #4
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	73fb      	strb	r3, [r7, #15]
 800896a:	e0d6      	b.n	8008b1a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 020e 	bic.w	r2, r2, #14
 800897a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0201 	bic.w	r2, r2, #1
 800898a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	4b64      	ldr	r3, [pc, #400]	; (8008b24 <HAL_DMA_Abort_IT+0x1dc>)
 8008994:	429a      	cmp	r2, r3
 8008996:	d958      	bls.n	8008a4a <HAL_DMA_Abort_IT+0x102>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a62      	ldr	r2, [pc, #392]	; (8008b28 <HAL_DMA_Abort_IT+0x1e0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d04f      	beq.n	8008a42 <HAL_DMA_Abort_IT+0xfa>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a61      	ldr	r2, [pc, #388]	; (8008b2c <HAL_DMA_Abort_IT+0x1e4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d048      	beq.n	8008a3e <HAL_DMA_Abort_IT+0xf6>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a5f      	ldr	r2, [pc, #380]	; (8008b30 <HAL_DMA_Abort_IT+0x1e8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d040      	beq.n	8008a38 <HAL_DMA_Abort_IT+0xf0>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a5e      	ldr	r2, [pc, #376]	; (8008b34 <HAL_DMA_Abort_IT+0x1ec>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d038      	beq.n	8008a32 <HAL_DMA_Abort_IT+0xea>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a5c      	ldr	r2, [pc, #368]	; (8008b38 <HAL_DMA_Abort_IT+0x1f0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d030      	beq.n	8008a2c <HAL_DMA_Abort_IT+0xe4>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a5b      	ldr	r2, [pc, #364]	; (8008b3c <HAL_DMA_Abort_IT+0x1f4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d028      	beq.n	8008a26 <HAL_DMA_Abort_IT+0xde>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a52      	ldr	r2, [pc, #328]	; (8008b24 <HAL_DMA_Abort_IT+0x1dc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d020      	beq.n	8008a20 <HAL_DMA_Abort_IT+0xd8>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a57      	ldr	r2, [pc, #348]	; (8008b40 <HAL_DMA_Abort_IT+0x1f8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d019      	beq.n	8008a1c <HAL_DMA_Abort_IT+0xd4>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a55      	ldr	r2, [pc, #340]	; (8008b44 <HAL_DMA_Abort_IT+0x1fc>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d012      	beq.n	8008a18 <HAL_DMA_Abort_IT+0xd0>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a54      	ldr	r2, [pc, #336]	; (8008b48 <HAL_DMA_Abort_IT+0x200>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00a      	beq.n	8008a12 <HAL_DMA_Abort_IT+0xca>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a52      	ldr	r2, [pc, #328]	; (8008b4c <HAL_DMA_Abort_IT+0x204>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d102      	bne.n	8008a0c <HAL_DMA_Abort_IT+0xc4>
 8008a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a0a:	e01b      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a10:	e018      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a16:	e015      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	e013      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e011      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a24:	e00e      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a2a:	e00b      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a30:	e008      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a36:	e005      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a3c:	e002      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a3e:	2310      	movs	r3, #16
 8008a40:	e000      	b.n	8008a44 <HAL_DMA_Abort_IT+0xfc>
 8008a42:	2301      	movs	r3, #1
 8008a44:	4a42      	ldr	r2, [pc, #264]	; (8008b50 <HAL_DMA_Abort_IT+0x208>)
 8008a46:	6053      	str	r3, [r2, #4]
 8008a48:	e057      	b.n	8008afa <HAL_DMA_Abort_IT+0x1b2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a36      	ldr	r2, [pc, #216]	; (8008b28 <HAL_DMA_Abort_IT+0x1e0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d04f      	beq.n	8008af4 <HAL_DMA_Abort_IT+0x1ac>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a34      	ldr	r2, [pc, #208]	; (8008b2c <HAL_DMA_Abort_IT+0x1e4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d048      	beq.n	8008af0 <HAL_DMA_Abort_IT+0x1a8>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a33      	ldr	r2, [pc, #204]	; (8008b30 <HAL_DMA_Abort_IT+0x1e8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d040      	beq.n	8008aea <HAL_DMA_Abort_IT+0x1a2>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a31      	ldr	r2, [pc, #196]	; (8008b34 <HAL_DMA_Abort_IT+0x1ec>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d038      	beq.n	8008ae4 <HAL_DMA_Abort_IT+0x19c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a30      	ldr	r2, [pc, #192]	; (8008b38 <HAL_DMA_Abort_IT+0x1f0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d030      	beq.n	8008ade <HAL_DMA_Abort_IT+0x196>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a2e      	ldr	r2, [pc, #184]	; (8008b3c <HAL_DMA_Abort_IT+0x1f4>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d028      	beq.n	8008ad8 <HAL_DMA_Abort_IT+0x190>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <HAL_DMA_Abort_IT+0x1dc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d020      	beq.n	8008ad2 <HAL_DMA_Abort_IT+0x18a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a2a      	ldr	r2, [pc, #168]	; (8008b40 <HAL_DMA_Abort_IT+0x1f8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d019      	beq.n	8008ace <HAL_DMA_Abort_IT+0x186>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a29      	ldr	r2, [pc, #164]	; (8008b44 <HAL_DMA_Abort_IT+0x1fc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d012      	beq.n	8008aca <HAL_DMA_Abort_IT+0x182>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a27      	ldr	r2, [pc, #156]	; (8008b48 <HAL_DMA_Abort_IT+0x200>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00a      	beq.n	8008ac4 <HAL_DMA_Abort_IT+0x17c>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a26      	ldr	r2, [pc, #152]	; (8008b4c <HAL_DMA_Abort_IT+0x204>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d102      	bne.n	8008abe <HAL_DMA_Abort_IT+0x176>
 8008ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008abc:	e01b      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ac2:	e018      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac8:	e015      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008aca:	2310      	movs	r3, #16
 8008acc:	e013      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e011      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ad6:	e00e      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008ad8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008adc:	e00b      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ae2:	e008      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae8:	e005      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aee:	e002      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008af0:	2310      	movs	r3, #16
 8008af2:	e000      	b.n	8008af6 <HAL_DMA_Abort_IT+0x1ae>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4a17      	ldr	r2, [pc, #92]	; (8008b54 <HAL_DMA_Abort_IT+0x20c>)
 8008af8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
    } 
  }
  return status;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	40020080 	.word	0x40020080
 8008b28:	40020008 	.word	0x40020008
 8008b2c:	4002001c 	.word	0x4002001c
 8008b30:	40020030 	.word	0x40020030
 8008b34:	40020044 	.word	0x40020044
 8008b38:	40020058 	.word	0x40020058
 8008b3c:	4002006c 	.word	0x4002006c
 8008b40:	40020408 	.word	0x40020408
 8008b44:	4002041c 	.word	0x4002041c
 8008b48:	40020430 	.word	0x40020430
 8008b4c:	40020444 	.word	0x40020444
 8008b50:	40020400 	.word	0x40020400
 8008b54:	40020000 	.word	0x40020000

08008b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b08b      	sub	sp, #44	; 0x2c
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b66:	2300      	movs	r3, #0
 8008b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b6a:	e179      	b.n	8008e60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	f040 8168 	bne.w	8008e5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4a96      	ldr	r2, [pc, #600]	; (8008de8 <HAL_GPIO_Init+0x290>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d05e      	beq.n	8008c52 <HAL_GPIO_Init+0xfa>
 8008b94:	4a94      	ldr	r2, [pc, #592]	; (8008de8 <HAL_GPIO_Init+0x290>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d875      	bhi.n	8008c86 <HAL_GPIO_Init+0x12e>
 8008b9a:	4a94      	ldr	r2, [pc, #592]	; (8008dec <HAL_GPIO_Init+0x294>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d058      	beq.n	8008c52 <HAL_GPIO_Init+0xfa>
 8008ba0:	4a92      	ldr	r2, [pc, #584]	; (8008dec <HAL_GPIO_Init+0x294>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d86f      	bhi.n	8008c86 <HAL_GPIO_Init+0x12e>
 8008ba6:	4a92      	ldr	r2, [pc, #584]	; (8008df0 <HAL_GPIO_Init+0x298>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d052      	beq.n	8008c52 <HAL_GPIO_Init+0xfa>
 8008bac:	4a90      	ldr	r2, [pc, #576]	; (8008df0 <HAL_GPIO_Init+0x298>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d869      	bhi.n	8008c86 <HAL_GPIO_Init+0x12e>
 8008bb2:	4a90      	ldr	r2, [pc, #576]	; (8008df4 <HAL_GPIO_Init+0x29c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d04c      	beq.n	8008c52 <HAL_GPIO_Init+0xfa>
 8008bb8:	4a8e      	ldr	r2, [pc, #568]	; (8008df4 <HAL_GPIO_Init+0x29c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d863      	bhi.n	8008c86 <HAL_GPIO_Init+0x12e>
 8008bbe:	4a8e      	ldr	r2, [pc, #568]	; (8008df8 <HAL_GPIO_Init+0x2a0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d046      	beq.n	8008c52 <HAL_GPIO_Init+0xfa>
 8008bc4:	4a8c      	ldr	r2, [pc, #560]	; (8008df8 <HAL_GPIO_Init+0x2a0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d85d      	bhi.n	8008c86 <HAL_GPIO_Init+0x12e>
 8008bca:	2b12      	cmp	r3, #18
 8008bcc:	d82a      	bhi.n	8008c24 <HAL_GPIO_Init+0xcc>
 8008bce:	2b12      	cmp	r3, #18
 8008bd0:	d859      	bhi.n	8008c86 <HAL_GPIO_Init+0x12e>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <HAL_GPIO_Init+0x80>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008c53 	.word	0x08008c53
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008c3f 	.word	0x08008c3f
 8008be4:	08008c81 	.word	0x08008c81
 8008be8:	08008c87 	.word	0x08008c87
 8008bec:	08008c87 	.word	0x08008c87
 8008bf0:	08008c87 	.word	0x08008c87
 8008bf4:	08008c87 	.word	0x08008c87
 8008bf8:	08008c87 	.word	0x08008c87
 8008bfc:	08008c87 	.word	0x08008c87
 8008c00:	08008c87 	.word	0x08008c87
 8008c04:	08008c87 	.word	0x08008c87
 8008c08:	08008c87 	.word	0x08008c87
 8008c0c:	08008c87 	.word	0x08008c87
 8008c10:	08008c87 	.word	0x08008c87
 8008c14:	08008c87 	.word	0x08008c87
 8008c18:	08008c87 	.word	0x08008c87
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	4a75      	ldr	r2, [pc, #468]	; (8008dfc <HAL_GPIO_Init+0x2a4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d013      	beq.n	8008c52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008c2a:	e02c      	b.n	8008c86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	623b      	str	r3, [r7, #32]
          break;
 8008c32:	e029      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	623b      	str	r3, [r7, #32]
          break;
 8008c3c:	e024      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	3308      	adds	r3, #8
 8008c44:	623b      	str	r3, [r7, #32]
          break;
 8008c46:	e01f      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	330c      	adds	r3, #12
 8008c4e:	623b      	str	r3, [r7, #32]
          break;
 8008c50:	e01a      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	623b      	str	r3, [r7, #32]
          break;
 8008c5e:	e013      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d105      	bne.n	8008c74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c68:	2308      	movs	r3, #8
 8008c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	611a      	str	r2, [r3, #16]
          break;
 8008c72:	e009      	b.n	8008c88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c74:	2308      	movs	r3, #8
 8008c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	615a      	str	r2, [r3, #20]
          break;
 8008c7e:	e003      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008c80:	2300      	movs	r3, #0
 8008c82:	623b      	str	r3, [r7, #32]
          break;
 8008c84:	e000      	b.n	8008c88 <HAL_GPIO_Init+0x130>
          break;
 8008c86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2bff      	cmp	r3, #255	; 0xff
 8008c8c:	d801      	bhi.n	8008c92 <HAL_GPIO_Init+0x13a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	e001      	b.n	8008c96 <HAL_GPIO_Init+0x13e>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3304      	adds	r3, #4
 8008c96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2bff      	cmp	r3, #255	; 0xff
 8008c9c:	d802      	bhi.n	8008ca4 <HAL_GPIO_Init+0x14c>
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	e002      	b.n	8008caa <HAL_GPIO_Init+0x152>
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	3b08      	subs	r3, #8
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	210f      	movs	r1, #15
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	401a      	ands	r2, r3
 8008cbc:	6a39      	ldr	r1, [r7, #32]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80c1 	beq.w	8008e5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008cd8:	4b49      	ldr	r3, [pc, #292]	; (8008e00 <HAL_GPIO_Init+0x2a8>)
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	4a48      	ldr	r2, [pc, #288]	; (8008e00 <HAL_GPIO_Init+0x2a8>)
 8008cde:	f043 0301 	orr.w	r3, r3, #1
 8008ce2:	6193      	str	r3, [r2, #24]
 8008ce4:	4b46      	ldr	r3, [pc, #280]	; (8008e00 <HAL_GPIO_Init+0x2a8>)
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	60bb      	str	r3, [r7, #8]
 8008cee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008cf0:	4a44      	ldr	r2, [pc, #272]	; (8008e04 <HAL_GPIO_Init+0x2ac>)
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	089b      	lsrs	r3, r3, #2
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	220f      	movs	r2, #15
 8008d08:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4013      	ands	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a3c      	ldr	r2, [pc, #240]	; (8008e08 <HAL_GPIO_Init+0x2b0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d01f      	beq.n	8008d5c <HAL_GPIO_Init+0x204>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a3b      	ldr	r2, [pc, #236]	; (8008e0c <HAL_GPIO_Init+0x2b4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d019      	beq.n	8008d58 <HAL_GPIO_Init+0x200>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a3a      	ldr	r2, [pc, #232]	; (8008e10 <HAL_GPIO_Init+0x2b8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d013      	beq.n	8008d54 <HAL_GPIO_Init+0x1fc>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a39      	ldr	r2, [pc, #228]	; (8008e14 <HAL_GPIO_Init+0x2bc>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00d      	beq.n	8008d50 <HAL_GPIO_Init+0x1f8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a38      	ldr	r2, [pc, #224]	; (8008e18 <HAL_GPIO_Init+0x2c0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d007      	beq.n	8008d4c <HAL_GPIO_Init+0x1f4>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a37      	ldr	r2, [pc, #220]	; (8008e1c <HAL_GPIO_Init+0x2c4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d101      	bne.n	8008d48 <HAL_GPIO_Init+0x1f0>
 8008d44:	2305      	movs	r3, #5
 8008d46:	e00a      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d48:	2306      	movs	r3, #6
 8008d4a:	e008      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	e006      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d50:	2303      	movs	r3, #3
 8008d52:	e004      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e002      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d60:	f002 0203 	and.w	r2, r2, #3
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	4093      	lsls	r3, r2
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d6e:	4925      	ldr	r1, [pc, #148]	; (8008e04 <HAL_GPIO_Init+0x2ac>)
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	3302      	adds	r3, #2
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008d88:	4b25      	ldr	r3, [pc, #148]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	4924      	ldr	r1, [pc, #144]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	608b      	str	r3, [r1, #8]
 8008d94:	e006      	b.n	8008da4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008d96:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	4920      	ldr	r1, [pc, #128]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008db0:	4b1b      	ldr	r3, [pc, #108]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	491a      	ldr	r1, [pc, #104]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60cb      	str	r3, [r1, #12]
 8008dbc:	e006      	b.n	8008dcc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008dbe:	4b18      	ldr	r3, [pc, #96]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	4916      	ldr	r1, [pc, #88]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d025      	beq.n	8008e24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	4910      	ldr	r1, [pc, #64]	; (8008e20 <HAL_GPIO_Init+0x2c8>)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	604b      	str	r3, [r1, #4]
 8008de4:	e025      	b.n	8008e32 <HAL_GPIO_Init+0x2da>
 8008de6:	bf00      	nop
 8008de8:	10320000 	.word	0x10320000
 8008dec:	10310000 	.word	0x10310000
 8008df0:	10220000 	.word	0x10220000
 8008df4:	10210000 	.word	0x10210000
 8008df8:	10120000 	.word	0x10120000
 8008dfc:	10110000 	.word	0x10110000
 8008e00:	40021000 	.word	0x40021000
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40010800 	.word	0x40010800
 8008e0c:	40010c00 	.word	0x40010c00
 8008e10:	40011000 	.word	0x40011000
 8008e14:	40011400 	.word	0x40011400
 8008e18:	40011800 	.word	0x40011800
 8008e1c:	40011c00 	.word	0x40011c00
 8008e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <HAL_GPIO_Init+0x324>)
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	4913      	ldr	r1, [pc, #76]	; (8008e7c <HAL_GPIO_Init+0x324>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <HAL_GPIO_Init+0x324>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	490e      	ldr	r1, [pc, #56]	; (8008e7c <HAL_GPIO_Init+0x324>)
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	600b      	str	r3, [r1, #0]
 8008e4a:	e006      	b.n	8008e5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <HAL_GPIO_Init+0x324>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	43db      	mvns	r3, r3
 8008e54:	4909      	ldr	r1, [pc, #36]	; (8008e7c <HAL_GPIO_Init+0x324>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f47f ae7e 	bne.w	8008b6c <HAL_GPIO_Init+0x14>
  }
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	372c      	adds	r7, #44	; 0x2c
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bc80      	pop	{r7}
 8008e7a:	4770      	bx	lr
 8008e7c:	40010400 	.word	0x40010400

08008e80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b089      	sub	sp, #36	; 0x24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008e8e:	e0a6      	b.n	8008fde <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008e90:	2201      	movs	r2, #1
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	fa02 f303 	lsl.w	r3, r2, r3
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8099 	beq.w	8008fd8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008ea6:	4a54      	ldr	r2, [pc, #336]	; (8008ff8 <HAL_GPIO_DeInit+0x178>)
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	089b      	lsrs	r3, r3, #2
 8008eac:	3302      	adds	r3, #2
 8008eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	220f      	movs	r2, #15
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a4c      	ldr	r2, [pc, #304]	; (8008ffc <HAL_GPIO_DeInit+0x17c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d01f      	beq.n	8008f10 <HAL_GPIO_DeInit+0x90>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a4b      	ldr	r2, [pc, #300]	; (8009000 <HAL_GPIO_DeInit+0x180>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d019      	beq.n	8008f0c <HAL_GPIO_DeInit+0x8c>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a4a      	ldr	r2, [pc, #296]	; (8009004 <HAL_GPIO_DeInit+0x184>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d013      	beq.n	8008f08 <HAL_GPIO_DeInit+0x88>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a49      	ldr	r2, [pc, #292]	; (8009008 <HAL_GPIO_DeInit+0x188>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00d      	beq.n	8008f04 <HAL_GPIO_DeInit+0x84>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a48      	ldr	r2, [pc, #288]	; (800900c <HAL_GPIO_DeInit+0x18c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d007      	beq.n	8008f00 <HAL_GPIO_DeInit+0x80>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a47      	ldr	r2, [pc, #284]	; (8009010 <HAL_GPIO_DeInit+0x190>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d101      	bne.n	8008efc <HAL_GPIO_DeInit+0x7c>
 8008ef8:	2305      	movs	r3, #5
 8008efa:	e00a      	b.n	8008f12 <HAL_GPIO_DeInit+0x92>
 8008efc:	2306      	movs	r3, #6
 8008efe:	e008      	b.n	8008f12 <HAL_GPIO_DeInit+0x92>
 8008f00:	2304      	movs	r3, #4
 8008f02:	e006      	b.n	8008f12 <HAL_GPIO_DeInit+0x92>
 8008f04:	2303      	movs	r3, #3
 8008f06:	e004      	b.n	8008f12 <HAL_GPIO_DeInit+0x92>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e002      	b.n	8008f12 <HAL_GPIO_DeInit+0x92>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <HAL_GPIO_DeInit+0x92>
 8008f10:	2300      	movs	r3, #0
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	f002 0203 	and.w	r2, r2, #3
 8008f18:	0092      	lsls	r2, r2, #2
 8008f1a:	4093      	lsls	r3, r2
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d132      	bne.n	8008f88 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008f22:	4b3c      	ldr	r3, [pc, #240]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	493a      	ldr	r1, [pc, #232]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008f30:	4b38      	ldr	r3, [pc, #224]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	43db      	mvns	r3, r3
 8008f38:	4936      	ldr	r1, [pc, #216]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008f3e:	4b35      	ldr	r3, [pc, #212]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	43db      	mvns	r3, r3
 8008f46:	4933      	ldr	r1, [pc, #204]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	43db      	mvns	r3, r3
 8008f54:	492f      	ldr	r1, [pc, #188]	; (8009014 <HAL_GPIO_DeInit+0x194>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	f003 0303 	and.w	r3, r3, #3
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	220f      	movs	r2, #15
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008f6a:	4a23      	ldr	r2, [pc, #140]	; (8008ff8 <HAL_GPIO_DeInit+0x178>)
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	089b      	lsrs	r3, r3, #2
 8008f70:	3302      	adds	r3, #2
 8008f72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	43da      	mvns	r2, r3
 8008f7a:	481f      	ldr	r0, [pc, #124]	; (8008ff8 <HAL_GPIO_DeInit+0x178>)
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	089b      	lsrs	r3, r3, #2
 8008f80:	400a      	ands	r2, r1
 8008f82:	3302      	adds	r3, #2
 8008f84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2bff      	cmp	r3, #255	; 0xff
 8008f8c:	d801      	bhi.n	8008f92 <HAL_GPIO_DeInit+0x112>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	e001      	b.n	8008f96 <HAL_GPIO_DeInit+0x116>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3304      	adds	r3, #4
 8008f96:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2bff      	cmp	r3, #255	; 0xff
 8008f9c:	d802      	bhi.n	8008fa4 <HAL_GPIO_DeInit+0x124>
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	e002      	b.n	8008faa <HAL_GPIO_DeInit+0x12a>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	3b08      	subs	r3, #8
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	210f      	movs	r1, #15
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb8:	43db      	mvns	r3, r3
 8008fba:	401a      	ands	r2, r3
 8008fbc:	2104      	movs	r1, #4
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f47f af52 	bne.w	8008e90 <HAL_GPIO_DeInit+0x10>
  }
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	3724      	adds	r7, #36	; 0x24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr
 8008ff8:	40010000 	.word	0x40010000
 8008ffc:	40010800 	.word	0x40010800
 8009000:	40010c00 	.word	0x40010c00
 8009004:	40011000 	.word	0x40011000
 8009008:	40011400 	.word	0x40011400
 800900c:	40011800 	.word	0x40011800
 8009010:	40011c00 	.word	0x40011c00
 8009014:	40010400 	.word	0x40010400

08009018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	887b      	ldrh	r3, [r7, #2]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009030:	2301      	movs	r3, #1
 8009032:	73fb      	strb	r3, [r7, #15]
 8009034:	e001      	b.n	800903a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr

08009046 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	807b      	strh	r3, [r7, #2]
 8009052:	4613      	mov	r3, r2
 8009054:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009056:	787b      	ldrb	r3, [r7, #1]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800905c:	887a      	ldrh	r2, [r7, #2]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009062:	e003      	b.n	800906c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009064:	887b      	ldrh	r3, [r7, #2]
 8009066:	041a      	lsls	r2, r3, #16
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	611a      	str	r2, [r3, #16]
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr

08009076 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009088:	887a      	ldrh	r2, [r7, #2]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4013      	ands	r3, r2
 800908e:	041a      	lsls	r2, r3, #16
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	43d9      	mvns	r1, r3
 8009094:	887b      	ldrh	r3, [r7, #2]
 8009096:	400b      	ands	r3, r1
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	611a      	str	r2, [r3, #16]
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr

080090a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e12b      	b.n	8009312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d106      	bne.n	80090d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7fe fff8 	bl	80080c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2224      	movs	r2, #36	; 0x24
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0201 	bic.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800910a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800910c:	f001 fdb8 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 8009110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4a81      	ldr	r2, [pc, #516]	; (800931c <HAL_I2C_Init+0x274>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d807      	bhi.n	800912c <HAL_I2C_Init+0x84>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4a80      	ldr	r2, [pc, #512]	; (8009320 <HAL_I2C_Init+0x278>)
 8009120:	4293      	cmp	r3, r2
 8009122:	bf94      	ite	ls
 8009124:	2301      	movls	r3, #1
 8009126:	2300      	movhi	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	e006      	b.n	800913a <HAL_I2C_Init+0x92>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a7d      	ldr	r2, [pc, #500]	; (8009324 <HAL_I2C_Init+0x27c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	bf94      	ite	ls
 8009134:	2301      	movls	r3, #1
 8009136:	2300      	movhi	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e0e7      	b.n	8009312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4a78      	ldr	r2, [pc, #480]	; (8009328 <HAL_I2C_Init+0x280>)
 8009146:	fba2 2303 	umull	r2, r3, r2, r3
 800914a:	0c9b      	lsrs	r3, r3, #18
 800914c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	430a      	orrs	r2, r1
 8009160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a6a      	ldr	r2, [pc, #424]	; (800931c <HAL_I2C_Init+0x274>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d802      	bhi.n	800917c <HAL_I2C_Init+0xd4>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	3301      	adds	r3, #1
 800917a:	e009      	b.n	8009190 <HAL_I2C_Init+0xe8>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009182:	fb02 f303 	mul.w	r3, r2, r3
 8009186:	4a69      	ldr	r2, [pc, #420]	; (800932c <HAL_I2C_Init+0x284>)
 8009188:	fba2 2303 	umull	r2, r3, r2, r3
 800918c:	099b      	lsrs	r3, r3, #6
 800918e:	3301      	adds	r3, #1
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	430b      	orrs	r3, r1
 8009196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	495c      	ldr	r1, [pc, #368]	; (800931c <HAL_I2C_Init+0x274>)
 80091ac:	428b      	cmp	r3, r1
 80091ae:	d819      	bhi.n	80091e4 <HAL_I2C_Init+0x13c>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	1e59      	subs	r1, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80091be:	1c59      	adds	r1, r3, #1
 80091c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091c4:	400b      	ands	r3, r1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <HAL_I2C_Init+0x138>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	1e59      	subs	r1, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80091d8:	3301      	adds	r3, #1
 80091da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091de:	e051      	b.n	8009284 <HAL_I2C_Init+0x1dc>
 80091e0:	2304      	movs	r3, #4
 80091e2:	e04f      	b.n	8009284 <HAL_I2C_Init+0x1dc>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d111      	bne.n	8009210 <HAL_I2C_Init+0x168>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	1e58      	subs	r0, r3, #1
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6859      	ldr	r1, [r3, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	440b      	add	r3, r1
 80091fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80091fe:	3301      	adds	r3, #1
 8009200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009204:	2b00      	cmp	r3, #0
 8009206:	bf0c      	ite	eq
 8009208:	2301      	moveq	r3, #1
 800920a:	2300      	movne	r3, #0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	e012      	b.n	8009236 <HAL_I2C_Init+0x18e>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1e58      	subs	r0, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6859      	ldr	r1, [r3, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	0099      	lsls	r1, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	fbb0 f3f3 	udiv	r3, r0, r3
 8009226:	3301      	adds	r3, #1
 8009228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_I2C_Init+0x196>
 800923a:	2301      	movs	r3, #1
 800923c:	e022      	b.n	8009284 <HAL_I2C_Init+0x1dc>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10e      	bne.n	8009264 <HAL_I2C_Init+0x1bc>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	1e58      	subs	r0, r3, #1
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6859      	ldr	r1, [r3, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	440b      	add	r3, r1
 8009254:	fbb0 f3f3 	udiv	r3, r0, r3
 8009258:	3301      	adds	r3, #1
 800925a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800925e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009262:	e00f      	b.n	8009284 <HAL_I2C_Init+0x1dc>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	1e58      	subs	r0, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6859      	ldr	r1, [r3, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	0099      	lsls	r1, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	fbb0 f3f3 	udiv	r3, r0, r3
 800927a:	3301      	adds	r3, #1
 800927c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	6809      	ldr	r1, [r1, #0]
 8009288:	4313      	orrs	r3, r2
 800928a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69da      	ldr	r2, [r3, #28]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6911      	ldr	r1, [r2, #16]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	68d2      	ldr	r2, [r2, #12]
 80092be:	4311      	orrs	r1, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	430b      	orrs	r3, r1
 80092c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695a      	ldr	r2, [r3, #20]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	000186a0 	.word	0x000186a0
 8009320:	001e847f 	.word	0x001e847f
 8009324:	003d08ff 	.word	0x003d08ff
 8009328:	431bde83 	.word	0x431bde83
 800932c:	10624dd3 	.word	0x10624dd3

08009330 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e021      	b.n	8009386 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2224      	movs	r2, #36	; 0x24
 8009346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0201 	bic.w	r2, r2, #1
 8009358:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7fe fef0 	bl	8008140 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af02      	add	r7, sp, #8
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	607a      	str	r2, [r7, #4]
 800939a:	461a      	mov	r2, r3
 800939c:	460b      	mov	r3, r1
 800939e:	817b      	strh	r3, [r7, #10]
 80093a0:	4613      	mov	r3, r2
 80093a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093a4:	f7ff f85e 	bl	8008464 <HAL_GetTick>
 80093a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	f040 80e0 	bne.w	8009578 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	2319      	movs	r3, #25
 80093be:	2201      	movs	r2, #1
 80093c0:	4970      	ldr	r1, [pc, #448]	; (8009584 <HAL_I2C_Master_Transmit+0x1f4>)
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fe5c 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80093ce:	2302      	movs	r3, #2
 80093d0:	e0d3      	b.n	800957a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_I2C_Master_Transmit+0x50>
 80093dc:	2302      	movs	r3, #2
 80093de:	e0cc      	b.n	800957a <HAL_I2C_Master_Transmit+0x1ea>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d007      	beq.n	8009406 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2221      	movs	r2, #33	; 0x21
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2210      	movs	r2, #16
 8009422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	893a      	ldrh	r2, [r7, #8]
 8009436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4a50      	ldr	r2, [pc, #320]	; (8009588 <HAL_I2C_Master_Transmit+0x1f8>)
 8009446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009448:	8979      	ldrh	r1, [r7, #10]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	6a3a      	ldr	r2, [r7, #32]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 fc16 	bl	8009c80 <I2C_MasterRequestWrite>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e08d      	b.n	800957a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800945e:	2300      	movs	r3, #0
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009474:	e066      	b.n	8009544 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	6a39      	ldr	r1, [r7, #32]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 ff1a 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00d      	beq.n	80094a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	2b04      	cmp	r3, #4
 800948c:	d107      	bne.n	800949e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800949c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e06b      	b.n	800957a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094bc:	b29b      	uxth	r3, r3
 80094be:	3b01      	subs	r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d11b      	bne.n	8009518 <HAL_I2C_Master_Transmit+0x188>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d017      	beq.n	8009518 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	781a      	ldrb	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009502:	b29b      	uxth	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009510:	3b01      	subs	r3, #1
 8009512:	b29a      	uxth	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	6a39      	ldr	r1, [r7, #32]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 ff11 	bl	800a344 <I2C_WaitOnBTFFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00d      	beq.n	8009544 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	2b04      	cmp	r3, #4
 800952e:	d107      	bne.n	8009540 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800953e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e01a      	b.n	800957a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	d194      	bne.n	8009476 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800955a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e000      	b.n	800957a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	00100002 	.word	0x00100002
 8009588:	ffff0000 	.word	0xffff0000

0800958c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	461a      	mov	r2, r3
 800959a:	4603      	mov	r3, r0
 800959c:	817b      	strh	r3, [r7, #10]
 800959e:	460b      	mov	r3, r1
 80095a0:	813b      	strh	r3, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095a6:	f7fe ff5d 	bl	8008464 <HAL_GetTick>
 80095aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	f040 80d9 	bne.w	800976c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	2319      	movs	r3, #25
 80095c0:	2201      	movs	r2, #1
 80095c2:	496d      	ldr	r1, [pc, #436]	; (8009778 <HAL_I2C_Mem_Write+0x1ec>)
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 fd5b 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80095d0:	2302      	movs	r3, #2
 80095d2:	e0cc      	b.n	800976e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_I2C_Mem_Write+0x56>
 80095de:	2302      	movs	r3, #2
 80095e0:	e0c5      	b.n	800976e <HAL_I2C_Mem_Write+0x1e2>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d007      	beq.n	8009608 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2221      	movs	r2, #33	; 0x21
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2240      	movs	r2, #64	; 0x40
 8009624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a3a      	ldr	r2, [r7, #32]
 8009632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a4d      	ldr	r2, [pc, #308]	; (800977c <HAL_I2C_Mem_Write+0x1f0>)
 8009648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800964a:	88f8      	ldrh	r0, [r7, #6]
 800964c:	893a      	ldrh	r2, [r7, #8]
 800964e:	8979      	ldrh	r1, [r7, #10]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4603      	mov	r3, r0
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 fb92 	bl	8009d84 <I2C_RequestMemoryWrite>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d052      	beq.n	800970c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e081      	b.n	800976e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fe20 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00d      	beq.n	8009696 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	2b04      	cmp	r3, #4
 8009680:	d107      	bne.n	8009692 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e06b      	b.n	800976e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	781a      	ldrb	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d11b      	bne.n	800970c <HAL_I2C_Mem_Write+0x180>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d017      	beq.n	800970c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1aa      	bne.n	800966a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 fe13 	bl	800a344 <I2C_WaitOnBTFFlagUntilTimeout>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00d      	beq.n	8009740 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009728:	2b04      	cmp	r3, #4
 800972a:	d107      	bne.n	800973c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e016      	b.n	800976e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	e000      	b.n	800976e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800976c:	2302      	movs	r3, #2
  }
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	00100002 	.word	0x00100002
 800977c:	ffff0000 	.word	0xffff0000

08009780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08c      	sub	sp, #48	; 0x30
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	4608      	mov	r0, r1
 800978a:	4611      	mov	r1, r2
 800978c:	461a      	mov	r2, r3
 800978e:	4603      	mov	r3, r0
 8009790:	817b      	strh	r3, [r7, #10]
 8009792:	460b      	mov	r3, r1
 8009794:	813b      	strh	r3, [r7, #8]
 8009796:	4613      	mov	r3, r2
 8009798:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800979e:	f7fe fe61 	bl	8008464 <HAL_GetTick>
 80097a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	f040 8244 	bne.w	8009c3a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	2319      	movs	r3, #25
 80097b8:	2201      	movs	r2, #1
 80097ba:	4982      	ldr	r1, [pc, #520]	; (80099c4 <HAL_I2C_Mem_Read+0x244>)
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 fc5f 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80097c8:	2302      	movs	r3, #2
 80097ca:	e237      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_I2C_Mem_Read+0x5a>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e230      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d007      	beq.n	8009800 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0201 	orr.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800980e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2222      	movs	r2, #34	; 0x22
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2240      	movs	r2, #64	; 0x40
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009836:	b29a      	uxth	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4a62      	ldr	r2, [pc, #392]	; (80099c8 <HAL_I2C_Mem_Read+0x248>)
 8009840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009842:	88f8      	ldrh	r0, [r7, #6]
 8009844:	893a      	ldrh	r2, [r7, #8]
 8009846:	8979      	ldrh	r1, [r7, #10]
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	4603      	mov	r3, r0
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fb2c 	bl	8009eb0 <I2C_RequestMemoryRead>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e1ec      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009866:	2b00      	cmp	r3, #0
 8009868:	d113      	bne.n	8009892 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800986a:	2300      	movs	r3, #0
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	61fb      	str	r3, [r7, #28]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	e1c0      	b.n	8009c14 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009896:	2b01      	cmp	r3, #1
 8009898:	d11e      	bne.n	80098d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098aa:	b672      	cpsid	i
}
 80098ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ae:	2300      	movs	r3, #0
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	61bb      	str	r3, [r7, #24]
 80098c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098d4:	b662      	cpsie	i
}
 80098d6:	e035      	b.n	8009944 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d11e      	bne.n	800991e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098f0:	b672      	cpsid	i
}
 80098f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800991a:	b662      	cpsie	i
}
 800991c:	e012      	b.n	8009944 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800992c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800992e:	2300      	movs	r3, #0
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	613b      	str	r3, [r7, #16]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	613b      	str	r3, [r7, #16]
 8009942:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009944:	e166      	b.n	8009c14 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994a:	2b03      	cmp	r3, #3
 800994c:	f200 811f 	bhi.w	8009b8e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009954:	2b01      	cmp	r3, #1
 8009956:	d123      	bne.n	80099a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fd39 	bl	800a3d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e167      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691a      	ldr	r2, [r3, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800999e:	e139      	b.n	8009c14 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d152      	bne.n	8009a4e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	2200      	movs	r2, #0
 80099b0:	4906      	ldr	r1, [pc, #24]	; (80099cc <HAL_I2C_Mem_Read+0x24c>)
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fb64 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d008      	beq.n	80099d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e13c      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
 80099c2:	bf00      	nop
 80099c4:	00100002 	.word	0x00100002
 80099c8:	ffff0000 	.word	0xffff0000
 80099cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80099d0:	b672      	cpsid	i
}
 80099d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	691a      	ldr	r2, [r3, #16]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a00:	3b01      	subs	r3, #1
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009a16:	b662      	cpsie	i
}
 8009a18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	b2d2      	uxtb	r2, r2
 8009a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a4c:	e0e2      	b.n	8009c14 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	2200      	movs	r2, #0
 8009a56:	497b      	ldr	r1, [pc, #492]	; (8009c44 <HAL_I2C_Mem_Read+0x4c4>)
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fb11 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0e9      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a78:	b672      	cpsid	i
}
 8009a7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009aae:	4b66      	ldr	r3, [pc, #408]	; (8009c48 <HAL_I2C_Mem_Read+0x4c8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	08db      	lsrs	r3, r3, #3
 8009ab4:	4a65      	ldr	r2, [pc, #404]	; (8009c4c <HAL_I2C_Mem_Read+0x4cc>)
 8009ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aba:	0a1a      	lsrs	r2, r3, #8
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	00da      	lsls	r2, r3, #3
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d118      	bne.n	8009b06 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	f043 0220 	orr.w	r2, r3, #32
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009af6:	b662      	cpsie	i
}
 8009af8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e09a      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d1d9      	bne.n	8009ac8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691a      	ldr	r2, [r3, #16]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b56:	b662      	cpsie	i
}
 8009b58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	b2d2      	uxtb	r2, r2
 8009b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b8c:	e042      	b.n	8009c14 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fc1e 	bl	800a3d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e04c      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	f003 0304 	and.w	r3, r3, #4
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d118      	bne.n	8009c14 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691a      	ldr	r2, [r3, #16]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	1c5a      	adds	r2, r3, #1
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f47f ae94 	bne.w	8009946 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	e000      	b.n	8009c3c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009c3a:	2302      	movs	r3, #2
  }
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3728      	adds	r7, #40	; 0x28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	00010004 	.word	0x00010004
 8009c48:	200000b0 	.word	0x200000b0
 8009c4c:	14f8b589 	.word	0x14f8b589

08009c50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c5e:	b2db      	uxtb	r3, r3
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr

08009c6a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bc80      	pop	{r7}
 8009c7e:	4770      	bx	lr

08009c80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d006      	beq.n	8009caa <I2C_MasterRequestWrite+0x2a>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d003      	beq.n	8009caa <I2C_MasterRequestWrite+0x2a>
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ca8:	d108      	bne.n	8009cbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	e00b      	b.n	8009cd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	2b12      	cmp	r3, #18
 8009cc2:	d107      	bne.n	8009cd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f9cd 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00d      	beq.n	8009d08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfa:	d103      	bne.n	8009d04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e035      	b.n	8009d74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d10:	d108      	bne.n	8009d24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d12:	897b      	ldrh	r3, [r7, #10]
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	461a      	mov	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d20:	611a      	str	r2, [r3, #16]
 8009d22:	e01b      	b.n	8009d5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d24:	897b      	ldrh	r3, [r7, #10]
 8009d26:	11db      	asrs	r3, r3, #7
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 0306 	and.w	r3, r3, #6
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	f063 030f 	orn	r3, r3, #15
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	490e      	ldr	r1, [pc, #56]	; (8009d7c <I2C_MasterRequestWrite+0xfc>)
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fa16 	bl	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e010      	b.n	8009d74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d52:	897b      	ldrh	r3, [r7, #10]
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	4907      	ldr	r1, [pc, #28]	; (8009d80 <I2C_MasterRequestWrite+0x100>)
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 fa06 	bl	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	00010008 	.word	0x00010008
 8009d80:	00010002 	.word	0x00010002

08009d84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	461a      	mov	r2, r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	817b      	strh	r3, [r7, #10]
 8009d96:	460b      	mov	r3, r1
 8009d98:	813b      	strh	r3, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f960 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd4:	d103      	bne.n	8009dde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e05f      	b.n	8009ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009de2:	897b      	ldrh	r3, [r7, #10]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	461a      	mov	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009df0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	6a3a      	ldr	r2, [r7, #32]
 8009df6:	492d      	ldr	r1, [pc, #180]	; (8009eac <I2C_RequestMemoryWrite+0x128>)
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f9bb 	bl	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e04c      	b.n	8009ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e20:	6a39      	ldr	r1, [r7, #32]
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fa46 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00d      	beq.n	8009e4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d107      	bne.n	8009e46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e02b      	b.n	8009ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e4a:	88fb      	ldrh	r3, [r7, #6]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d105      	bne.n	8009e5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e50:	893b      	ldrh	r3, [r7, #8]
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	611a      	str	r2, [r3, #16]
 8009e5a:	e021      	b.n	8009ea0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e5c:	893b      	ldrh	r3, [r7, #8]
 8009e5e:	0a1b      	lsrs	r3, r3, #8
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6c:	6a39      	ldr	r1, [r7, #32]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fa20 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00d      	beq.n	8009e96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d107      	bne.n	8009e92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e005      	b.n	8009ea2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e96:	893b      	ldrh	r3, [r7, #8]
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	00010002 	.word	0x00010002

08009eb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	4608      	mov	r0, r1
 8009eba:	4611      	mov	r1, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	817b      	strh	r3, [r7, #10]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	813b      	strh	r3, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f8c2 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00d      	beq.n	8009f1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f10:	d103      	bne.n	8009f1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e0aa      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f1e:	897b      	ldrh	r3, [r7, #10]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	461a      	mov	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	6a3a      	ldr	r2, [r7, #32]
 8009f32:	4952      	ldr	r1, [pc, #328]	; (800a07c <I2C_RequestMemoryRead+0x1cc>)
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f91d 	bl	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e097      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5c:	6a39      	ldr	r1, [r7, #32]
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 f9a8 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00d      	beq.n	8009f86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d107      	bne.n	8009f82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e076      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d105      	bne.n	8009f98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f8c:	893b      	ldrh	r3, [r7, #8]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	611a      	str	r2, [r3, #16]
 8009f96:	e021      	b.n	8009fdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f98:	893b      	ldrh	r3, [r7, #8]
 8009f9a:	0a1b      	lsrs	r3, r3, #8
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa8:	6a39      	ldr	r1, [r7, #32]
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 f982 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00d      	beq.n	8009fd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d107      	bne.n	8009fce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e050      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009fd2:	893b      	ldrh	r3, [r7, #8]
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fde:	6a39      	ldr	r1, [r7, #32]
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 f967 	bl	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00d      	beq.n	800a008 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d107      	bne.n	800a004 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a002:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e035      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a016:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	2200      	movs	r2, #0
 800a020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 f82b 	bl	800a080 <I2C_WaitOnFlagUntilTimeout>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00d      	beq.n	800a04c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03e:	d103      	bne.n	800a048 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e013      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a04c:	897b      	ldrh	r3, [r7, #10]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	f043 0301 	orr.w	r3, r3, #1
 800a054:	b2da      	uxtb	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	6a3a      	ldr	r2, [r7, #32]
 800a060:	4906      	ldr	r1, [pc, #24]	; (800a07c <I2C_RequestMemoryRead+0x1cc>)
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f886 	bl	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e000      	b.n	800a074 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	00010002 	.word	0x00010002

0800a080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a090:	e048      	b.n	800a124 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a098:	d044      	beq.n	800a124 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09a:	f7fe f9e3 	bl	8008464 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d302      	bcc.n	800a0b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d139      	bne.n	800a124 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	0c1b      	lsrs	r3, r3, #16
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d10d      	bne.n	800a0d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	43da      	mvns	r2, r3
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2301      	moveq	r3, #1
 800a0ce:	2300      	movne	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	e00c      	b.n	800a0f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	43da      	mvns	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bf0c      	ite	eq
 800a0e8:	2301      	moveq	r3, #1
 800a0ea:	2300      	movne	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d116      	bne.n	800a124 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	f043 0220 	orr.w	r2, r3, #32
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e023      	b.n	800a16c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	0c1b      	lsrs	r3, r3, #16
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d10d      	bne.n	800a14a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	43da      	mvns	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4013      	ands	r3, r2
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bf0c      	ite	eq
 800a140:	2301      	moveq	r3, #1
 800a142:	2300      	movne	r3, #0
 800a144:	b2db      	uxtb	r3, r3
 800a146:	461a      	mov	r2, r3
 800a148:	e00c      	b.n	800a164 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	43da      	mvns	r2, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4013      	ands	r3, r2
 800a156:	b29b      	uxth	r3, r3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bf0c      	ite	eq
 800a15c:	2301      	moveq	r3, #1
 800a15e:	2300      	movne	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	429a      	cmp	r2, r3
 800a168:	d093      	beq.n	800a092 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a182:	e071      	b.n	800a268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a18e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a192:	d123      	bne.n	800a1dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	f043 0204 	orr.w	r2, r3, #4
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e067      	b.n	800a2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1e2:	d041      	beq.n	800a268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1e4:	f7fe f93e 	bl	8008464 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d302      	bcc.n	800a1fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d136      	bne.n	800a268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	0c1b      	lsrs	r3, r3, #16
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b01      	cmp	r3, #1
 800a202:	d10c      	bne.n	800a21e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	43da      	mvns	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4013      	ands	r3, r2
 800a210:	b29b      	uxth	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	bf14      	ite	ne
 800a216:	2301      	movne	r3, #1
 800a218:	2300      	moveq	r3, #0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	e00b      	b.n	800a236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	43da      	mvns	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4013      	ands	r3, r2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bf14      	ite	ne
 800a230:	2301      	movne	r3, #1
 800a232:	2300      	moveq	r3, #0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d016      	beq.n	800a268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2220      	movs	r2, #32
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	f043 0220 	orr.w	r2, r3, #32
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e021      	b.n	800a2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d10c      	bne.n	800a28c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	43da      	mvns	r2, r3
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	4013      	ands	r3, r2
 800a27e:	b29b      	uxth	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	bf14      	ite	ne
 800a284:	2301      	movne	r3, #1
 800a286:	2300      	moveq	r3, #0
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	e00b      	b.n	800a2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	43da      	mvns	r2, r3
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	4013      	ands	r3, r2
 800a298:	b29b      	uxth	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bf14      	ite	ne
 800a29e:	2301      	movne	r3, #1
 800a2a0:	2300      	moveq	r3, #0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f47f af6d 	bne.w	800a184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2c0:	e034      	b.n	800a32c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f8e3 	bl	800a48e <I2C_IsAcknowledgeFailed>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e034      	b.n	800a33c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d8:	d028      	beq.n	800a32c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2da:	f7fe f8c3 	bl	8008464 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d302      	bcc.n	800a2f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d11d      	bne.n	800a32c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fa:	2b80      	cmp	r3, #128	; 0x80
 800a2fc:	d016      	beq.n	800a32c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	f043 0220 	orr.w	r2, r3, #32
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e007      	b.n	800a33c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	2b80      	cmp	r3, #128	; 0x80
 800a338:	d1c3      	bne.n	800a2c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a350:	e034      	b.n	800a3bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 f89b 	bl	800a48e <I2C_IsAcknowledgeFailed>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e034      	b.n	800a3cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a368:	d028      	beq.n	800a3bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a36a:	f7fe f87b 	bl	8008464 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	429a      	cmp	r2, r3
 800a378:	d302      	bcc.n	800a380 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11d      	bne.n	800a3bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d016      	beq.n	800a3bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2220      	movs	r2, #32
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a8:	f043 0220 	orr.w	r2, r3, #32
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e007      	b.n	800a3cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d1c3      	bne.n	800a352 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3e0:	e049      	b.n	800a476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	2b10      	cmp	r3, #16
 800a3ee:	d119      	bne.n	800a424 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f06f 0210 	mvn.w	r2, #16
 800a3f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2220      	movs	r2, #32
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e030      	b.n	800a486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a424:	f7fe f81e 	bl	8008464 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	d302      	bcc.n	800a43a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d11d      	bne.n	800a476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a444:	2b40      	cmp	r3, #64	; 0x40
 800a446:	d016      	beq.n	800a476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2220      	movs	r2, #32
 800a452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	f043 0220 	orr.w	r2, r3, #32
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e007      	b.n	800a486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a480:	2b40      	cmp	r3, #64	; 0x40
 800a482:	d1ae      	bne.n	800a3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a4:	d11b      	bne.n	800a4de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	f043 0204 	orr.w	r2, r3, #4
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bc80      	pop	{r7}
 800a4e8:	4770      	bx	lr
	...

0800a4ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e272      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 8087 	beq.w	800a61a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a50c:	4b92      	ldr	r3, [pc, #584]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f003 030c 	and.w	r3, r3, #12
 800a514:	2b04      	cmp	r3, #4
 800a516:	d00c      	beq.n	800a532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a518:	4b8f      	ldr	r3, [pc, #572]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f003 030c 	and.w	r3, r3, #12
 800a520:	2b08      	cmp	r3, #8
 800a522:	d112      	bne.n	800a54a <HAL_RCC_OscConfig+0x5e>
 800a524:	4b8c      	ldr	r3, [pc, #560]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a530:	d10b      	bne.n	800a54a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a532:	4b89      	ldr	r3, [pc, #548]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d06c      	beq.n	800a618 <HAL_RCC_OscConfig+0x12c>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d168      	bne.n	800a618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e24c      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a552:	d106      	bne.n	800a562 <HAL_RCC_OscConfig+0x76>
 800a554:	4b80      	ldr	r3, [pc, #512]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a7f      	ldr	r2, [pc, #508]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a55a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	e02e      	b.n	800a5c0 <HAL_RCC_OscConfig+0xd4>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10c      	bne.n	800a584 <HAL_RCC_OscConfig+0x98>
 800a56a:	4b7b      	ldr	r3, [pc, #492]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a7a      	ldr	r2, [pc, #488]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	4b78      	ldr	r3, [pc, #480]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a77      	ldr	r2, [pc, #476]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a57c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	e01d      	b.n	800a5c0 <HAL_RCC_OscConfig+0xd4>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a58c:	d10c      	bne.n	800a5a8 <HAL_RCC_OscConfig+0xbc>
 800a58e:	4b72      	ldr	r3, [pc, #456]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a71      	ldr	r2, [pc, #452]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	4b6f      	ldr	r3, [pc, #444]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a6e      	ldr	r2, [pc, #440]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a5a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	e00b      	b.n	800a5c0 <HAL_RCC_OscConfig+0xd4>
 800a5a8:	4b6b      	ldr	r3, [pc, #428]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a6a      	ldr	r2, [pc, #424]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a5ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	4b68      	ldr	r3, [pc, #416]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a67      	ldr	r2, [pc, #412]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a5ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d013      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5c8:	f7fd ff4c 	bl	8008464 <HAL_GetTick>
 800a5cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5d0:	f7fd ff48 	bl	8008464 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b64      	cmp	r3, #100	; 0x64
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e200      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5e2:	4b5d      	ldr	r3, [pc, #372]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0f0      	beq.n	800a5d0 <HAL_RCC_OscConfig+0xe4>
 800a5ee:	e014      	b.n	800a61a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5f0:	f7fd ff38 	bl	8008464 <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5f6:	e008      	b.n	800a60a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5f8:	f7fd ff34 	bl	8008464 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b64      	cmp	r3, #100	; 0x64
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e1ec      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a60a:	4b53      	ldr	r3, [pc, #332]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1f0      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x10c>
 800a616:	e000      	b.n	800a61a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d063      	beq.n	800a6ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a626:	4b4c      	ldr	r3, [pc, #304]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f003 030c 	and.w	r3, r3, #12
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00b      	beq.n	800a64a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a632:	4b49      	ldr	r3, [pc, #292]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f003 030c 	and.w	r3, r3, #12
 800a63a:	2b08      	cmp	r3, #8
 800a63c:	d11c      	bne.n	800a678 <HAL_RCC_OscConfig+0x18c>
 800a63e:	4b46      	ldr	r3, [pc, #280]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d116      	bne.n	800a678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a64a:	4b43      	ldr	r3, [pc, #268]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <HAL_RCC_OscConfig+0x176>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d001      	beq.n	800a662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e1c0      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a662:	4b3d      	ldr	r3, [pc, #244]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	4939      	ldr	r1, [pc, #228]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a672:	4313      	orrs	r3, r2
 800a674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a676:	e03a      	b.n	800a6ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d020      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a680:	4b36      	ldr	r3, [pc, #216]	; (800a75c <HAL_RCC_OscConfig+0x270>)
 800a682:	2201      	movs	r2, #1
 800a684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a686:	f7fd feed 	bl	8008464 <HAL_GetTick>
 800a68a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a68c:	e008      	b.n	800a6a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a68e:	f7fd fee9 	bl	8008464 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d901      	bls.n	800a6a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e1a1      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6a0:	4b2d      	ldr	r3, [pc, #180]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0f0      	beq.n	800a68e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6ac:	4b2a      	ldr	r3, [pc, #168]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	4927      	ldr	r1, [pc, #156]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	600b      	str	r3, [r1, #0]
 800a6c0:	e015      	b.n	800a6ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6c2:	4b26      	ldr	r3, [pc, #152]	; (800a75c <HAL_RCC_OscConfig+0x270>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6c8:	f7fd fecc 	bl	8008464 <HAL_GetTick>
 800a6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6d0:	f7fd fec8 	bl	8008464 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e180      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f0      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d03a      	beq.n	800a770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d019      	beq.n	800a736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <HAL_RCC_OscConfig+0x274>)
 800a704:	2201      	movs	r2, #1
 800a706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a708:	f7fd feac 	bl	8008464 <HAL_GetTick>
 800a70c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a70e:	e008      	b.n	800a722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a710:	f7fd fea8 	bl	8008464 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e160      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <HAL_RCC_OscConfig+0x26c>)
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a72e:	2001      	movs	r0, #1
 800a730:	f000 face 	bl	800acd0 <RCC_Delay>
 800a734:	e01c      	b.n	800a770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <HAL_RCC_OscConfig+0x274>)
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a73c:	f7fd fe92 	bl	8008464 <HAL_GetTick>
 800a740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a742:	e00f      	b.n	800a764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a744:	f7fd fe8e 	bl	8008464 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d908      	bls.n	800a764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e146      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
 800a756:	bf00      	nop
 800a758:	40021000 	.word	0x40021000
 800a75c:	42420000 	.word	0x42420000
 800a760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a764:	4b92      	ldr	r3, [pc, #584]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e9      	bne.n	800a744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80a6 	beq.w	800a8ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a77e:	2300      	movs	r3, #0
 800a780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a782:	4b8b      	ldr	r3, [pc, #556]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10d      	bne.n	800a7aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a78e:	4b88      	ldr	r3, [pc, #544]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	4a87      	ldr	r2, [pc, #540]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a798:	61d3      	str	r3, [r2, #28]
 800a79a:	4b85      	ldr	r3, [pc, #532]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7a2:	60bb      	str	r3, [r7, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7aa:	4b82      	ldr	r3, [pc, #520]	; (800a9b4 <HAL_RCC_OscConfig+0x4c8>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d118      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a7b6:	4b7f      	ldr	r3, [pc, #508]	; (800a9b4 <HAL_RCC_OscConfig+0x4c8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a7e      	ldr	r2, [pc, #504]	; (800a9b4 <HAL_RCC_OscConfig+0x4c8>)
 800a7bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7c2:	f7fd fe4f 	bl	8008464 <HAL_GetTick>
 800a7c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7c8:	e008      	b.n	800a7dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7ca:	f7fd fe4b 	bl	8008464 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b64      	cmp	r3, #100	; 0x64
 800a7d6:	d901      	bls.n	800a7dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e103      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7dc:	4b75      	ldr	r3, [pc, #468]	; (800a9b4 <HAL_RCC_OscConfig+0x4c8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0f0      	beq.n	800a7ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d106      	bne.n	800a7fe <HAL_RCC_OscConfig+0x312>
 800a7f0:	4b6f      	ldr	r3, [pc, #444]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	4a6e      	ldr	r2, [pc, #440]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	6213      	str	r3, [r2, #32]
 800a7fc:	e02d      	b.n	800a85a <HAL_RCC_OscConfig+0x36e>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10c      	bne.n	800a820 <HAL_RCC_OscConfig+0x334>
 800a806:	4b6a      	ldr	r3, [pc, #424]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	4a69      	ldr	r2, [pc, #420]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	6213      	str	r3, [r2, #32]
 800a812:	4b67      	ldr	r3, [pc, #412]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	4a66      	ldr	r2, [pc, #408]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a818:	f023 0304 	bic.w	r3, r3, #4
 800a81c:	6213      	str	r3, [r2, #32]
 800a81e:	e01c      	b.n	800a85a <HAL_RCC_OscConfig+0x36e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	2b05      	cmp	r3, #5
 800a826:	d10c      	bne.n	800a842 <HAL_RCC_OscConfig+0x356>
 800a828:	4b61      	ldr	r3, [pc, #388]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	4a60      	ldr	r2, [pc, #384]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a82e:	f043 0304 	orr.w	r3, r3, #4
 800a832:	6213      	str	r3, [r2, #32]
 800a834:	4b5e      	ldr	r3, [pc, #376]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	4a5d      	ldr	r2, [pc, #372]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	6213      	str	r3, [r2, #32]
 800a840:	e00b      	b.n	800a85a <HAL_RCC_OscConfig+0x36e>
 800a842:	4b5b      	ldr	r3, [pc, #364]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	4a5a      	ldr	r2, [pc, #360]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a848:	f023 0301 	bic.w	r3, r3, #1
 800a84c:	6213      	str	r3, [r2, #32]
 800a84e:	4b58      	ldr	r3, [pc, #352]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	4a57      	ldr	r2, [pc, #348]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a854:	f023 0304 	bic.w	r3, r3, #4
 800a858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d015      	beq.n	800a88e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a862:	f7fd fdff 	bl	8008464 <HAL_GetTick>
 800a866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a868:	e00a      	b.n	800a880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a86a:	f7fd fdfb 	bl	8008464 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	f241 3288 	movw	r2, #5000	; 0x1388
 800a878:	4293      	cmp	r3, r2
 800a87a:	d901      	bls.n	800a880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e0b1      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a880:	4b4b      	ldr	r3, [pc, #300]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0ee      	beq.n	800a86a <HAL_RCC_OscConfig+0x37e>
 800a88c:	e014      	b.n	800a8b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a88e:	f7fd fde9 	bl	8008464 <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a894:	e00a      	b.n	800a8ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a896:	f7fd fde5 	bl	8008464 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e09b      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8ac:	4b40      	ldr	r3, [pc, #256]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1ee      	bne.n	800a896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d105      	bne.n	800a8ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8be:	4b3c      	ldr	r3, [pc, #240]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	4a3b      	ldr	r2, [pc, #236]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a8c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 8087 	beq.w	800a9e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8d4:	4b36      	ldr	r3, [pc, #216]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f003 030c 	and.w	r3, r3, #12
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d061      	beq.n	800a9a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d146      	bne.n	800a976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8e8:	4b33      	ldr	r3, [pc, #204]	; (800a9b8 <HAL_RCC_OscConfig+0x4cc>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8ee:	f7fd fdb9 	bl	8008464 <HAL_GetTick>
 800a8f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a8f4:	e008      	b.n	800a908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8f6:	f7fd fdb5 	bl	8008464 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	2b02      	cmp	r3, #2
 800a902:	d901      	bls.n	800a908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e06d      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a908:	4b29      	ldr	r3, [pc, #164]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1f0      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a91c:	d108      	bne.n	800a930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a91e:	4b24      	ldr	r3, [pc, #144]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	4921      	ldr	r1, [pc, #132]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a930:	4b1f      	ldr	r3, [pc, #124]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a19      	ldr	r1, [r3, #32]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	430b      	orrs	r3, r1
 800a942:	491b      	ldr	r1, [pc, #108]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a944:	4313      	orrs	r3, r2
 800a946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a948:	4b1b      	ldr	r3, [pc, #108]	; (800a9b8 <HAL_RCC_OscConfig+0x4cc>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a94e:	f7fd fd89 	bl	8008464 <HAL_GetTick>
 800a952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a954:	e008      	b.n	800a968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a956:	f7fd fd85 	bl	8008464 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e03d      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a968:	4b11      	ldr	r3, [pc, #68]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f0      	beq.n	800a956 <HAL_RCC_OscConfig+0x46a>
 800a974:	e035      	b.n	800a9e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <HAL_RCC_OscConfig+0x4cc>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a97c:	f7fd fd72 	bl	8008464 <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a982:	e008      	b.n	800a996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a984:	f7fd fd6e 	bl	8008464 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e026      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a996:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <HAL_RCC_OscConfig+0x4c4>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f0      	bne.n	800a984 <HAL_RCC_OscConfig+0x498>
 800a9a2:	e01e      	b.n	800a9e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	69db      	ldr	r3, [r3, #28]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d107      	bne.n	800a9bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e019      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	40007000 	.word	0x40007000
 800a9b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <HAL_RCC_OscConfig+0x500>)
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d106      	bne.n	800a9de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d001      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	40021000 	.word	0x40021000

0800a9f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e0d0      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa04:	4b6a      	ldr	r3, [pc, #424]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d910      	bls.n	800aa34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa12:	4b67      	ldr	r3, [pc, #412]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f023 0207 	bic.w	r2, r3, #7
 800aa1a:	4965      	ldr	r1, [pc, #404]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa22:	4b63      	ldr	r3, [pc, #396]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d001      	beq.n	800aa34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e0b8      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d020      	beq.n	800aa82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0304 	and.w	r3, r3, #4
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa4c:	4b59      	ldr	r3, [pc, #356]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4a58      	ldr	r2, [pc, #352]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aa56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0308 	and.w	r3, r3, #8
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa64:	4b53      	ldr	r3, [pc, #332]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a52      	ldr	r2, [pc, #328]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800aa6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa70:	4b50      	ldr	r3, [pc, #320]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	494d      	ldr	r1, [pc, #308]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d040      	beq.n	800ab10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d107      	bne.n	800aaa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa96:	4b47      	ldr	r3, [pc, #284]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d115      	bne.n	800aace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e07f      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d107      	bne.n	800aabe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaae:	4b41      	ldr	r3, [pc, #260]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d109      	bne.n	800aace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e073      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aabe:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e06b      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aace:	4b39      	ldr	r3, [pc, #228]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f023 0203 	bic.w	r2, r3, #3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4936      	ldr	r1, [pc, #216]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aae0:	f7fd fcc0 	bl	8008464 <HAL_GetTick>
 800aae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aae6:	e00a      	b.n	800aafe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aae8:	f7fd fcbc 	bl	8008464 <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e053      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aafe:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f003 020c 	and.w	r2, r3, #12
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d1eb      	bne.n	800aae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab10:	4b27      	ldr	r3, [pc, #156]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d210      	bcs.n	800ab40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab1e:	4b24      	ldr	r3, [pc, #144]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f023 0207 	bic.w	r2, r3, #7
 800ab26:	4922      	ldr	r1, [pc, #136]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab2e:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0307 	and.w	r3, r3, #7
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d001      	beq.n	800ab40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e032      	b.n	800aba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d008      	beq.n	800ab5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab4c:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	4916      	ldr	r1, [pc, #88]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0308 	and.w	r3, r3, #8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	490e      	ldr	r1, [pc, #56]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ab7e:	f000 f821 	bl	800abc4 <HAL_RCC_GetSysClockFreq>
 800ab82:	4602      	mov	r2, r0
 800ab84:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	091b      	lsrs	r3, r3, #4
 800ab8a:	f003 030f 	and.w	r3, r3, #15
 800ab8e:	490a      	ldr	r1, [pc, #40]	; (800abb8 <HAL_RCC_ClockConfig+0x1c8>)
 800ab90:	5ccb      	ldrb	r3, [r1, r3]
 800ab92:	fa22 f303 	lsr.w	r3, r2, r3
 800ab96:	4a09      	ldr	r2, [pc, #36]	; (800abbc <HAL_RCC_ClockConfig+0x1cc>)
 800ab98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <HAL_RCC_ClockConfig+0x1d0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fd fc1e 	bl	80083e0 <HAL_InitTick>

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	40022000 	.word	0x40022000
 800abb4:	40021000 	.word	0x40021000
 800abb8:	0800da74 	.word	0x0800da74
 800abbc:	200000b0 	.word	0x200000b0
 800abc0:	200000b4 	.word	0x200000b4

0800abc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b087      	sub	sp, #28
 800abc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	2300      	movs	r3, #0
 800abd0:	60bb      	str	r3, [r7, #8]
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	2300      	movs	r3, #0
 800abd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800abde:	4b1e      	ldr	r3, [pc, #120]	; (800ac58 <HAL_RCC_GetSysClockFreq+0x94>)
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f003 030c 	and.w	r3, r3, #12
 800abea:	2b04      	cmp	r3, #4
 800abec:	d002      	beq.n	800abf4 <HAL_RCC_GetSysClockFreq+0x30>
 800abee:	2b08      	cmp	r3, #8
 800abf0:	d003      	beq.n	800abfa <HAL_RCC_GetSysClockFreq+0x36>
 800abf2:	e027      	b.n	800ac44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800abf4:	4b19      	ldr	r3, [pc, #100]	; (800ac5c <HAL_RCC_GetSysClockFreq+0x98>)
 800abf6:	613b      	str	r3, [r7, #16]
      break;
 800abf8:	e027      	b.n	800ac4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	0c9b      	lsrs	r3, r3, #18
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	4a17      	ldr	r2, [pc, #92]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ac04:	5cd3      	ldrb	r3, [r2, r3]
 800ac06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d010      	beq.n	800ac34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	0c5b      	lsrs	r3, r3, #17
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	4a11      	ldr	r2, [pc, #68]	; (800ac64 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ac1e:	5cd3      	ldrb	r3, [r2, r3]
 800ac20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a0d      	ldr	r2, [pc, #52]	; (800ac5c <HAL_RCC_GetSysClockFreq+0x98>)
 800ac26:	fb03 f202 	mul.w	r2, r3, r2
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	e004      	b.n	800ac3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a0c      	ldr	r2, [pc, #48]	; (800ac68 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac38:	fb02 f303 	mul.w	r3, r2, r3
 800ac3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	613b      	str	r3, [r7, #16]
      break;
 800ac42:	e002      	b.n	800ac4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <HAL_RCC_GetSysClockFreq+0x98>)
 800ac46:	613b      	str	r3, [r7, #16]
      break;
 800ac48:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac4a:	693b      	ldr	r3, [r7, #16]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	371c      	adds	r7, #28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bc80      	pop	{r7}
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	40021000 	.word	0x40021000
 800ac5c:	007a1200 	.word	0x007a1200
 800ac60:	0800da8c 	.word	0x0800da8c
 800ac64:	0800da9c 	.word	0x0800da9c
 800ac68:	003d0900 	.word	0x003d0900

0800ac6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac70:	4b02      	ldr	r3, [pc, #8]	; (800ac7c <HAL_RCC_GetHCLKFreq+0x10>)
 800ac72:	681b      	ldr	r3, [r3, #0]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bc80      	pop	{r7}
 800ac7a:	4770      	bx	lr
 800ac7c:	200000b0 	.word	0x200000b0

0800ac80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac84:	f7ff fff2 	bl	800ac6c <HAL_RCC_GetHCLKFreq>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	0a1b      	lsrs	r3, r3, #8
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	4903      	ldr	r1, [pc, #12]	; (800aca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac96:	5ccb      	ldrb	r3, [r1, r3]
 800ac98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	40021000 	.word	0x40021000
 800aca4:	0800da84 	.word	0x0800da84

0800aca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800acac:	f7ff ffde 	bl	800ac6c <HAL_RCC_GetHCLKFreq>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	0adb      	lsrs	r3, r3, #11
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	4903      	ldr	r1, [pc, #12]	; (800accc <HAL_RCC_GetPCLK2Freq+0x24>)
 800acbe:	5ccb      	ldrb	r3, [r1, r3]
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40021000 	.word	0x40021000
 800accc:	0800da84 	.word	0x0800da84

0800acd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <RCC_Delay+0x34>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a0a      	ldr	r2, [pc, #40]	; (800ad08 <RCC_Delay+0x38>)
 800acde:	fba2 2303 	umull	r2, r3, r2, r3
 800ace2:	0a5b      	lsrs	r3, r3, #9
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800acec:	bf00      	nop
  }
  while (Delay --);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1e5a      	subs	r2, r3, #1
 800acf2:	60fa      	str	r2, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f9      	bne.n	800acec <RCC_Delay+0x1c>
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bc80      	pop	{r7}
 800ad02:	4770      	bx	lr
 800ad04:	200000b0 	.word	0x200000b0
 800ad08:	10624dd3 	.word	0x10624dd3

0800ad0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e041      	b.n	800ada2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d106      	bne.n	800ad38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7fd fa26 	bl	8008184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f000 fa82 	bl	800b254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3708      	adds	r7, #8
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d001      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e044      	b.n	800ae4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0201 	orr.w	r2, r2, #1
 800adda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1d      	ldr	r2, [pc, #116]	; (800ae58 <HAL_TIM_Base_Start_IT+0xac>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d018      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x6c>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1c      	ldr	r2, [pc, #112]	; (800ae5c <HAL_TIM_Base_Start_IT+0xb0>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d013      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x6c>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adf8:	d00e      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x6c>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a18      	ldr	r2, [pc, #96]	; (800ae60 <HAL_TIM_Base_Start_IT+0xb4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d009      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x6c>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a16      	ldr	r2, [pc, #88]	; (800ae64 <HAL_TIM_Base_Start_IT+0xb8>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d004      	beq.n	800ae18 <HAL_TIM_Base_Start_IT+0x6c>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a15      	ldr	r2, [pc, #84]	; (800ae68 <HAL_TIM_Base_Start_IT+0xbc>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d111      	bne.n	800ae3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	f003 0307 	and.w	r3, r3, #7
 800ae22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b06      	cmp	r3, #6
 800ae28:	d010      	beq.n	800ae4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f042 0201 	orr.w	r2, r2, #1
 800ae38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae3a:	e007      	b.n	800ae4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0201 	orr.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bc80      	pop	{r7}
 800ae56:	4770      	bx	lr
 800ae58:	40012c00 	.word	0x40012c00
 800ae5c:	40013400 	.word	0x40013400
 800ae60:	40000400 	.word	0x40000400
 800ae64:	40000800 	.word	0x40000800
 800ae68:	40000c00 	.word	0x40000c00

0800ae6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d122      	bne.n	800aec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d11b      	bne.n	800aec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f06f 0202 	mvn.w	r2, #2
 800ae98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9b4 	bl	800b21c <HAL_TIM_IC_CaptureCallback>
 800aeb4:	e005      	b.n	800aec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f9a7 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f9b6 	bl	800b22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	f003 0304 	and.w	r3, r3, #4
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d122      	bne.n	800af1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	d11b      	bne.n	800af1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f06f 0204 	mvn.w	r2, #4
 800aeec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2202      	movs	r2, #2
 800aef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f98a 	bl	800b21c <HAL_TIM_IC_CaptureCallback>
 800af08:	e005      	b.n	800af16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f97d 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f98c 	bl	800b22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b08      	cmp	r3, #8
 800af28:	d122      	bne.n	800af70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	f003 0308 	and.w	r3, r3, #8
 800af34:	2b08      	cmp	r3, #8
 800af36:	d11b      	bne.n	800af70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f06f 0208 	mvn.w	r2, #8
 800af40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2204      	movs	r2, #4
 800af46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d003      	beq.n	800af5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f960 	bl	800b21c <HAL_TIM_IC_CaptureCallback>
 800af5c:	e005      	b.n	800af6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f953 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f962 	bl	800b22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	f003 0310 	and.w	r3, r3, #16
 800af7a:	2b10      	cmp	r3, #16
 800af7c:	d122      	bne.n	800afc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	f003 0310 	and.w	r3, r3, #16
 800af88:	2b10      	cmp	r3, #16
 800af8a:	d11b      	bne.n	800afc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f06f 0210 	mvn.w	r2, #16
 800af94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2208      	movs	r2, #8
 800af9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f936 	bl	800b21c <HAL_TIM_IC_CaptureCallback>
 800afb0:	e005      	b.n	800afbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f929 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f938 	bl	800b22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d10e      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d107      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f06f 0201 	mvn.w	r2, #1
 800afe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7fc fd62 	bl	8007ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affa:	2b80      	cmp	r3, #128	; 0x80
 800affc:	d10e      	bne.n	800b01c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b008:	2b80      	cmp	r3, #128	; 0x80
 800b00a:	d107      	bne.n	800b01c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 faa1 	bl	800b55e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b026:	2b40      	cmp	r3, #64	; 0x40
 800b028:	d10e      	bne.n	800b048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b034:	2b40      	cmp	r3, #64	; 0x40
 800b036:	d107      	bne.n	800b048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f8fc 	bl	800b240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	f003 0320 	and.w	r3, r3, #32
 800b052:	2b20      	cmp	r3, #32
 800b054:	d10e      	bne.n	800b074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b20      	cmp	r3, #32
 800b062:	d107      	bne.n	800b074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f06f 0220 	mvn.w	r2, #32
 800b06c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa6c 	bl	800b54c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_TIM_ConfigClockSource+0x1c>
 800b094:	2302      	movs	r3, #2
 800b096:	e0b4      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x186>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d0:	d03e      	beq.n	800b150 <HAL_TIM_ConfigClockSource+0xd4>
 800b0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d6:	f200 8087 	bhi.w	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0de:	f000 8086 	beq.w	800b1ee <HAL_TIM_ConfigClockSource+0x172>
 800b0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e6:	d87f      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0e8:	2b70      	cmp	r3, #112	; 0x70
 800b0ea:	d01a      	beq.n	800b122 <HAL_TIM_ConfigClockSource+0xa6>
 800b0ec:	2b70      	cmp	r3, #112	; 0x70
 800b0ee:	d87b      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f0:	2b60      	cmp	r3, #96	; 0x60
 800b0f2:	d050      	beq.n	800b196 <HAL_TIM_ConfigClockSource+0x11a>
 800b0f4:	2b60      	cmp	r3, #96	; 0x60
 800b0f6:	d877      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f8:	2b50      	cmp	r3, #80	; 0x50
 800b0fa:	d03c      	beq.n	800b176 <HAL_TIM_ConfigClockSource+0xfa>
 800b0fc:	2b50      	cmp	r3, #80	; 0x50
 800b0fe:	d873      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b100:	2b40      	cmp	r3, #64	; 0x40
 800b102:	d058      	beq.n	800b1b6 <HAL_TIM_ConfigClockSource+0x13a>
 800b104:	2b40      	cmp	r3, #64	; 0x40
 800b106:	d86f      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b108:	2b30      	cmp	r3, #48	; 0x30
 800b10a:	d064      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b10c:	2b30      	cmp	r3, #48	; 0x30
 800b10e:	d86b      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b110:	2b20      	cmp	r3, #32
 800b112:	d060      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b114:	2b20      	cmp	r3, #32
 800b116:	d867      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d05c      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b11c:	2b10      	cmp	r3, #16
 800b11e:	d05a      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b120:	e062      	b.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b132:	f000 f980 	bl	800b436 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	609a      	str	r2, [r3, #8]
      break;
 800b14e:	e04f      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b160:	f000 f969 	bl	800b436 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b172:	609a      	str	r2, [r3, #8]
      break;
 800b174:	e03c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b182:	461a      	mov	r2, r3
 800b184:	f000 f8e0 	bl	800b348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2150      	movs	r1, #80	; 0x50
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 f937 	bl	800b402 <TIM_ITRx_SetConfig>
      break;
 800b194:	e02c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f000 f8fe 	bl	800b3a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2160      	movs	r1, #96	; 0x60
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 f927 	bl	800b402 <TIM_ITRx_SetConfig>
      break;
 800b1b4:	e01c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f000 f8c0 	bl	800b348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2140      	movs	r1, #64	; 0x40
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f917 	bl	800b402 <TIM_ITRx_SetConfig>
      break;
 800b1d4:	e00c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f000 f90e 	bl	800b402 <TIM_ITRx_SetConfig>
      break;
 800b1e6:	e003      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ec:	e000      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b200:	7bfb      	ldrb	r3, [r7, #15]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	bc80      	pop	{r7}
 800b21a:	4770      	bx	lr

0800b21c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b236:	bf00      	nop
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bc80      	pop	{r7}
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bc80      	pop	{r7}
 800b250:	4770      	bx	lr
	...

0800b254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a33      	ldr	r2, [pc, #204]	; (800b334 <TIM_Base_SetConfig+0xe0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d013      	beq.n	800b294 <TIM_Base_SetConfig+0x40>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a32      	ldr	r2, [pc, #200]	; (800b338 <TIM_Base_SetConfig+0xe4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00f      	beq.n	800b294 <TIM_Base_SetConfig+0x40>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b27a:	d00b      	beq.n	800b294 <TIM_Base_SetConfig+0x40>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a2f      	ldr	r2, [pc, #188]	; (800b33c <TIM_Base_SetConfig+0xe8>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d007      	beq.n	800b294 <TIM_Base_SetConfig+0x40>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a2e      	ldr	r2, [pc, #184]	; (800b340 <TIM_Base_SetConfig+0xec>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d003      	beq.n	800b294 <TIM_Base_SetConfig+0x40>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a2d      	ldr	r2, [pc, #180]	; (800b344 <TIM_Base_SetConfig+0xf0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d108      	bne.n	800b2a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b29a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a22      	ldr	r2, [pc, #136]	; (800b334 <TIM_Base_SetConfig+0xe0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d013      	beq.n	800b2d6 <TIM_Base_SetConfig+0x82>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a21      	ldr	r2, [pc, #132]	; (800b338 <TIM_Base_SetConfig+0xe4>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00f      	beq.n	800b2d6 <TIM_Base_SetConfig+0x82>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2bc:	d00b      	beq.n	800b2d6 <TIM_Base_SetConfig+0x82>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a1e      	ldr	r2, [pc, #120]	; (800b33c <TIM_Base_SetConfig+0xe8>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d007      	beq.n	800b2d6 <TIM_Base_SetConfig+0x82>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a1d      	ldr	r2, [pc, #116]	; (800b340 <TIM_Base_SetConfig+0xec>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d003      	beq.n	800b2d6 <TIM_Base_SetConfig+0x82>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a1c      	ldr	r2, [pc, #112]	; (800b344 <TIM_Base_SetConfig+0xf0>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d108      	bne.n	800b2e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	689a      	ldr	r2, [r3, #8]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a09      	ldr	r2, [pc, #36]	; (800b334 <TIM_Base_SetConfig+0xe0>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d003      	beq.n	800b31c <TIM_Base_SetConfig+0xc8>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a08      	ldr	r2, [pc, #32]	; (800b338 <TIM_Base_SetConfig+0xe4>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d103      	bne.n	800b324 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	691a      	ldr	r2, [r3, #16]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	615a      	str	r2, [r3, #20]
}
 800b32a:	bf00      	nop
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	bc80      	pop	{r7}
 800b332:	4770      	bx	lr
 800b334:	40012c00 	.word	0x40012c00
 800b338:	40013400 	.word	0x40013400
 800b33c:	40000400 	.word	0x40000400
 800b340:	40000800 	.word	0x40000800
 800b344:	40000c00 	.word	0x40000c00

0800b348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	f023 0201 	bic.w	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f023 030a 	bic.w	r3, r3, #10
 800b384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	693a      	ldr	r2, [r7, #16]
 800b392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	621a      	str	r2, [r3, #32]
}
 800b39a:	bf00      	nop
 800b39c:	371c      	adds	r7, #28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bc80      	pop	{r7}
 800b3a2:	4770      	bx	lr

0800b3a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6a1b      	ldr	r3, [r3, #32]
 800b3b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	f023 0210 	bic.w	r2, r3, #16
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	031b      	lsls	r3, r3, #12
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b3e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	621a      	str	r2, [r3, #32]
}
 800b3f8:	bf00      	nop
 800b3fa:	371c      	adds	r7, #28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bc80      	pop	{r7}
 800b400:	4770      	bx	lr

0800b402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b402:	b480      	push	{r7}
 800b404:	b085      	sub	sp, #20
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	f043 0307 	orr.w	r3, r3, #7
 800b424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	609a      	str	r2, [r3, #8]
}
 800b42c:	bf00      	nop
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	bc80      	pop	{r7}
 800b434:	4770      	bx	lr

0800b436 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b436:	b480      	push	{r7}
 800b438:	b087      	sub	sp, #28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	60b9      	str	r1, [r7, #8]
 800b440:	607a      	str	r2, [r7, #4]
 800b442:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b450:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	021a      	lsls	r2, r3, #8
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	431a      	orrs	r2, r3
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	609a      	str	r2, [r3, #8]
}
 800b46a:	bf00      	nop
 800b46c:	371c      	adds	r7, #28
 800b46e:	46bd      	mov	sp, r7
 800b470:	bc80      	pop	{r7}
 800b472:	4770      	bx	lr

0800b474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b488:	2302      	movs	r3, #2
 800b48a:	e050      	b.n	800b52e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a1b      	ldr	r2, [pc, #108]	; (800b538 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d018      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a19      	ldr	r2, [pc, #100]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d013      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e2:	d00e      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a15      	ldr	r2, [pc, #84]	; (800b540 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d009      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a14      	ldr	r2, [pc, #80]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d004      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a12      	ldr	r2, [pc, #72]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10c      	bne.n	800b51c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4313      	orrs	r3, r2
 800b512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	bc80      	pop	{r7}
 800b536:	4770      	bx	lr
 800b538:	40012c00 	.word	0x40012c00
 800b53c:	40013400 	.word	0x40013400
 800b540:	40000400 	.word	0x40000400
 800b544:	40000800 	.word	0x40000800
 800b548:	40000c00 	.word	0x40000c00

0800b54c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	bc80      	pop	{r7}
 800b55c:	4770      	bx	lr

0800b55e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b55e:	b480      	push	{r7}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bc80      	pop	{r7}
 800b56e:	4770      	bx	lr

0800b570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e042      	b.n	800b608 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7fc fe1a 	bl	80081d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2224      	movs	r2, #36	; 0x24
 800b5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fcb5 	bl	800bf24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	691a      	ldr	r2, [r3, #16]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	695a      	ldr	r2, [r3, #20]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b5d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	4613      	mov	r3, r2
 800b61c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b20      	cmp	r3, #32
 800b628:	d121      	bne.n	800b66e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <HAL_UART_Transmit_IT+0x26>
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e01a      	b.n	800b670 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	88fa      	ldrh	r2, [r7, #6]
 800b644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	88fa      	ldrh	r2, [r7, #6]
 800b64a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2221      	movs	r2, #33	; 0x21
 800b656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b668:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	e000      	b.n	800b670 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b66e:	2302      	movs	r3, #2
  }
}
 800b670:	4618      	mov	r0, r3
 800b672:	3714      	adds	r7, #20
 800b674:	46bd      	mov	sp, r7
 800b676:	bc80      	pop	{r7}
 800b678:	4770      	bx	lr
	...

0800b67c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b0ba      	sub	sp, #232	; 0xe8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b2:	f003 030f 	and.w	r3, r3, #15
 800b6b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b6ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10f      	bne.n	800b6e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d009      	beq.n	800b6e2 <HAL_UART_IRQHandler+0x66>
 800b6ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6d2:	f003 0320 	and.w	r3, r3, #32
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fb63 	bl	800bda6 <UART_Receive_IT>
      return;
 800b6e0:	e25b      	b.n	800bb9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b6e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 80de 	beq.w	800b8a8 <HAL_UART_IRQHandler+0x22c>
 800b6ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d106      	bne.n	800b706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 80d1 	beq.w	800b8a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00b      	beq.n	800b72a <HAL_UART_IRQHandler+0xae>
 800b712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d005      	beq.n	800b72a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b722:	f043 0201 	orr.w	r2, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b72a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b72e:	f003 0304 	and.w	r3, r3, #4
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00b      	beq.n	800b74e <HAL_UART_IRQHandler+0xd2>
 800b736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d005      	beq.n	800b74e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b746:	f043 0202 	orr.w	r2, r3, #2
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00b      	beq.n	800b772 <HAL_UART_IRQHandler+0xf6>
 800b75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d005      	beq.n	800b772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b76a:	f043 0204 	orr.w	r2, r3, #4
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d011      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x126>
 800b77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79a:	f043 0208 	orr.w	r2, r3, #8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 81f2 	beq.w	800bb90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b0:	f003 0320 	and.w	r3, r3, #32
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d008      	beq.n	800b7ca <HAL_UART_IRQHandler+0x14e>
 800b7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7bc:	f003 0320 	and.w	r3, r3, #32
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 faee 	bl	800bda6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bf14      	ite	ne
 800b7d8:	2301      	movne	r3, #1
 800b7da:	2300      	moveq	r3, #0
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e6:	f003 0308 	and.w	r3, r3, #8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d103      	bne.n	800b7f6 <HAL_UART_IRQHandler+0x17a>
 800b7ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d04f      	beq.n	800b896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f9f8 	bl	800bbec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b806:	2b00      	cmp	r3, #0
 800b808:	d041      	beq.n	800b88e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3314      	adds	r3, #20
 800b810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3314      	adds	r3, #20
 800b832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b83a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b846:	e841 2300 	strex	r3, r2, [r1]
 800b84a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b84e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1d9      	bne.n	800b80a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d013      	beq.n	800b886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b862:	4a7e      	ldr	r2, [pc, #504]	; (800ba5c <HAL_UART_IRQHandler+0x3e0>)
 800b864:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd f86c 	bl	8008948 <HAL_DMA_Abort_IT>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d016      	beq.n	800b8a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b880:	4610      	mov	r0, r2
 800b882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b884:	e00e      	b.n	800b8a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f99c 	bl	800bbc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b88c:	e00a      	b.n	800b8a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f998 	bl	800bbc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b894:	e006      	b.n	800b8a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f994 	bl	800bbc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b8a2:	e175      	b.n	800bb90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a4:	bf00      	nop
    return;
 800b8a6:	e173      	b.n	800bb90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	f040 814f 	bne.w	800bb50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f000 8148 	beq.w	800bb50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 8141 	beq.w	800bb50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60bb      	str	r3, [r7, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60bb      	str	r3, [r7, #8]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	60bb      	str	r3, [r7, #8]
 800b8e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 80b6 	beq.w	800ba60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 8145 	beq.w	800bb94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b90e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b912:	429a      	cmp	r2, r3
 800b914:	f080 813e 	bcs.w	800bb94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b91e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	2b20      	cmp	r3, #32
 800b928:	f000 8088 	beq.w	800ba3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	330c      	adds	r3, #12
 800b932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b93a:	e853 3f00 	ldrex	r3, [r3]
 800b93e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b94a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	330c      	adds	r3, #12
 800b954:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b958:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b95c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b964:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1d9      	bne.n	800b92c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3314      	adds	r3, #20
 800b97e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b982:	e853 3f00 	ldrex	r3, [r3]
 800b986:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3314      	adds	r3, #20
 800b998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b99c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9a8:	e841 2300 	strex	r3, r2, [r1]
 800b9ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e1      	bne.n	800b978 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9be:	e853 3f00 	ldrex	r3, [r3]
 800b9c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3314      	adds	r3, #20
 800b9d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9e0:	e841 2300 	strex	r3, r2, [r1]
 800b9e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1e3      	bne.n	800b9b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	330c      	adds	r3, #12
 800ba00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba0c:	f023 0310 	bic.w	r3, r3, #16
 800ba10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	330c      	adds	r3, #12
 800ba1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba1e:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e3      	bne.n	800b9fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fc ff4b 	bl	80088d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f8bf 	bl	800bbd6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba58:	e09c      	b.n	800bb94 <HAL_UART_IRQHandler+0x518>
 800ba5a:	bf00      	nop
 800ba5c:	0800bcb1 	.word	0x0800bcb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 808e 	beq.w	800bb98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ba7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 8089 	beq.w	800bb98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	330c      	adds	r3, #12
 800ba8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba90:	e853 3f00 	ldrex	r3, [r3]
 800ba94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	330c      	adds	r3, #12
 800baa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800baaa:	647a      	str	r2, [r7, #68]	; 0x44
 800baac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bab2:	e841 2300 	strex	r3, r2, [r1]
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e3      	bne.n	800ba86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3314      	adds	r3, #20
 800bac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	623b      	str	r3, [r7, #32]
   return(result);
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	f023 0301 	bic.w	r3, r3, #1
 800bad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3314      	adds	r3, #20
 800bade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bae2:	633a      	str	r2, [r7, #48]	; 0x30
 800bae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e3      	bne.n	800babe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2220      	movs	r2, #32
 800bafa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	330c      	adds	r3, #12
 800bb0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0310 	bic.w	r3, r3, #16
 800bb1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	330c      	adds	r3, #12
 800bb24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb28:	61fa      	str	r2, [r7, #28]
 800bb2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	69b9      	ldr	r1, [r7, #24]
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	617b      	str	r3, [r7, #20]
   return(result);
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e3      	bne.n	800bb04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f844 	bl	800bbd6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb4e:	e023      	b.n	800bb98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d009      	beq.n	800bb70 <HAL_UART_IRQHandler+0x4f4>
 800bb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f8b5 	bl	800bcd8 <UART_Transmit_IT>
    return;
 800bb6e:	e014      	b.n	800bb9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00e      	beq.n	800bb9a <HAL_UART_IRQHandler+0x51e>
 800bb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d008      	beq.n	800bb9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f8f4 	bl	800bd76 <UART_EndTransmit_IT>
    return;
 800bb8e:	e004      	b.n	800bb9a <HAL_UART_IRQHandler+0x51e>
    return;
 800bb90:	bf00      	nop
 800bb92:	e002      	b.n	800bb9a <HAL_UART_IRQHandler+0x51e>
      return;
 800bb94:	bf00      	nop
 800bb96:	e000      	b.n	800bb9a <HAL_UART_IRQHandler+0x51e>
      return;
 800bb98:	bf00      	nop
  }
}
 800bb9a:	37e8      	adds	r7, #232	; 0xe8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bc80      	pop	{r7}
 800bbb0:	4770      	bx	lr

0800bbb2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bbba:	bf00      	nop
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bc80      	pop	{r7}
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bc80      	pop	{r7}
 800bbd4:	4770      	bx	lr

0800bbd6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bc80      	pop	{r7}
 800bbea:	4770      	bx	lr

0800bbec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b095      	sub	sp, #84	; 0x54
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	330c      	adds	r3, #12
 800bbfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfe:	e853 3f00 	ldrex	r3, [r3]
 800bc02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	330c      	adds	r3, #12
 800bc12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc14:	643a      	str	r2, [r7, #64]	; 0x40
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e5      	bne.n	800bbf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3314      	adds	r3, #20
 800bc2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f023 0301 	bic.w	r3, r3, #1
 800bc3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3314      	adds	r3, #20
 800bc46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc48:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e5      	bne.n	800bc28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d119      	bne.n	800bc98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	330c      	adds	r3, #12
 800bc6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f023 0310 	bic.w	r3, r3, #16
 800bc7a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	330c      	adds	r3, #12
 800bc82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc84:	61ba      	str	r2, [r7, #24]
 800bc86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc88:	6979      	ldr	r1, [r7, #20]
 800bc8a:	69ba      	ldr	r2, [r7, #24]
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	613b      	str	r3, [r7, #16]
   return(result);
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e5      	bne.n	800bc64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bca6:	bf00      	nop
 800bca8:	3754      	adds	r7, #84	; 0x54
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bc80      	pop	{r7}
 800bcae:	4770      	bx	lr

0800bcb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f7ff ff7a 	bl	800bbc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b21      	cmp	r3, #33	; 0x21
 800bcea:	d13e      	bne.n	800bd6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf4:	d114      	bne.n	800bd20 <UART_Transmit_IT+0x48>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d110      	bne.n	800bd20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	1c9a      	adds	r2, r3, #2
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	621a      	str	r2, [r3, #32]
 800bd1e:	e008      	b.n	800bd32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	1c59      	adds	r1, r3, #1
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	6211      	str	r1, [r2, #32]
 800bd2a:	781a      	ldrb	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10f      	bne.n	800bd66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e000      	b.n	800bd6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd6a:	2302      	movs	r3, #2
  }
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bc80      	pop	{r7}
 800bd74:	4770      	bx	lr

0800bd76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b082      	sub	sp, #8
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff ff02 	bl	800bba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b08c      	sub	sp, #48	; 0x30
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b22      	cmp	r3, #34	; 0x22
 800bdb8:	f040 80ae 	bne.w	800bf18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdc4:	d117      	bne.n	800bdf6 <UART_Receive_IT+0x50>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d113      	bne.n	800bdf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdee:	1c9a      	adds	r2, r3, #2
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	629a      	str	r2, [r3, #40]	; 0x28
 800bdf4:	e026      	b.n	800be44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be08:	d007      	beq.n	800be1a <UART_Receive_IT+0x74>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10a      	bne.n	800be28 <UART_Receive_IT+0x82>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	b2da      	uxtb	r2, r3
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e008      	b.n	800be3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be34:	b2da      	uxtb	r2, r3
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be48:	b29b      	uxth	r3, r3
 800be4a:	3b01      	subs	r3, #1
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	4619      	mov	r1, r3
 800be52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be54:	2b00      	cmp	r3, #0
 800be56:	d15d      	bne.n	800bf14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f022 0220 	bic.w	r2, r2, #32
 800be66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	695a      	ldr	r2, [r3, #20]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f022 0201 	bic.w	r2, r2, #1
 800be86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2220      	movs	r2, #32
 800be8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d135      	bne.n	800bf0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	e853 3f00 	ldrex	r3, [r3]
 800beb2:	613b      	str	r3, [r7, #16]
   return(result);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f023 0310 	bic.w	r3, r3, #16
 800beba:	627b      	str	r3, [r7, #36]	; 0x24
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	330c      	adds	r3, #12
 800bec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec4:	623a      	str	r2, [r7, #32]
 800bec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec8:	69f9      	ldr	r1, [r7, #28]
 800beca:	6a3a      	ldr	r2, [r7, #32]
 800becc:	e841 2300 	strex	r3, r2, [r1]
 800bed0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1e5      	bne.n	800bea4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 0310 	and.w	r3, r3, #16
 800bee2:	2b10      	cmp	r3, #16
 800bee4:	d10a      	bne.n	800befc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bee6:	2300      	movs	r3, #0
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff fe67 	bl	800bbd6 <HAL_UARTEx_RxEventCallback>
 800bf08:	e002      	b.n	800bf10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fe51 	bl	800bbb2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	e002      	b.n	800bf1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	e000      	b.n	800bf1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf18:	2302      	movs	r3, #2
  }
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3730      	adds	r7, #48	; 0x30
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
	...

0800bf24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68da      	ldr	r2, [r3, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	689a      	ldr	r2, [r3, #8]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bf5e:	f023 030c 	bic.w	r3, r3, #12
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6812      	ldr	r2, [r2, #0]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	430b      	orrs	r3, r1
 800bf6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	699a      	ldr	r2, [r3, #24]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	430a      	orrs	r2, r1
 800bf80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a2c      	ldr	r2, [pc, #176]	; (800c038 <UART_SetConfig+0x114>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d103      	bne.n	800bf94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bf8c:	f7fe fe8c 	bl	800aca8 <HAL_RCC_GetPCLK2Freq>
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	e002      	b.n	800bf9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf94:	f7fe fe74 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800bf98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009a      	lsls	r2, r3, #2
 800bfa4:	441a      	add	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfb0:	4a22      	ldr	r2, [pc, #136]	; (800c03c <UART_SetConfig+0x118>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	095b      	lsrs	r3, r3, #5
 800bfb8:	0119      	lsls	r1, r3, #4
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	009a      	lsls	r2, r3, #2
 800bfc4:	441a      	add	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfd0:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <UART_SetConfig+0x118>)
 800bfd2:	fba3 0302 	umull	r0, r3, r3, r2
 800bfd6:	095b      	lsrs	r3, r3, #5
 800bfd8:	2064      	movs	r0, #100	; 0x64
 800bfda:	fb00 f303 	mul.w	r3, r0, r3
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	3332      	adds	r3, #50	; 0x32
 800bfe4:	4a15      	ldr	r2, [pc, #84]	; (800c03c <UART_SetConfig+0x118>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	095b      	lsrs	r3, r3, #5
 800bfec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff0:	4419      	add	r1, r3
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4613      	mov	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	009a      	lsls	r2, r3, #2
 800bffc:	441a      	add	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	fbb2 f2f3 	udiv	r2, r2, r3
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <UART_SetConfig+0x118>)
 800c00a:	fba3 0302 	umull	r0, r3, r3, r2
 800c00e:	095b      	lsrs	r3, r3, #5
 800c010:	2064      	movs	r0, #100	; 0x64
 800c012:	fb00 f303 	mul.w	r3, r0, r3
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	011b      	lsls	r3, r3, #4
 800c01a:	3332      	adds	r3, #50	; 0x32
 800c01c:	4a07      	ldr	r2, [pc, #28]	; (800c03c <UART_SetConfig+0x118>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	095b      	lsrs	r3, r3, #5
 800c024:	f003 020f 	and.w	r2, r3, #15
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	440a      	add	r2, r1
 800c02e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	40013800 	.word	0x40013800
 800c03c:	51eb851f 	.word	0x51eb851f

0800c040 <__itoa>:
 800c040:	1e93      	subs	r3, r2, #2
 800c042:	2b22      	cmp	r3, #34	; 0x22
 800c044:	b510      	push	{r4, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	d904      	bls.n	800c054 <__itoa+0x14>
 800c04a:	2300      	movs	r3, #0
 800c04c:	461c      	mov	r4, r3
 800c04e:	700b      	strb	r3, [r1, #0]
 800c050:	4620      	mov	r0, r4
 800c052:	bd10      	pop	{r4, pc}
 800c054:	2a0a      	cmp	r2, #10
 800c056:	d109      	bne.n	800c06c <__itoa+0x2c>
 800c058:	2800      	cmp	r0, #0
 800c05a:	da07      	bge.n	800c06c <__itoa+0x2c>
 800c05c:	232d      	movs	r3, #45	; 0x2d
 800c05e:	700b      	strb	r3, [r1, #0]
 800c060:	2101      	movs	r1, #1
 800c062:	4240      	negs	r0, r0
 800c064:	4421      	add	r1, r4
 800c066:	f000 f90d 	bl	800c284 <__utoa>
 800c06a:	e7f1      	b.n	800c050 <__itoa+0x10>
 800c06c:	2100      	movs	r1, #0
 800c06e:	e7f9      	b.n	800c064 <__itoa+0x24>

0800c070 <itoa>:
 800c070:	f7ff bfe6 	b.w	800c040 <__itoa>

0800c074 <malloc>:
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <malloc+0xc>)
 800c076:	4601      	mov	r1, r0
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f000 b823 	b.w	800c0c4 <_malloc_r>
 800c07e:	bf00      	nop
 800c080:	20000108 	.word	0x20000108

0800c084 <sbrk_aligned>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	4e0e      	ldr	r6, [pc, #56]	; (800c0c0 <sbrk_aligned+0x3c>)
 800c088:	460c      	mov	r4, r1
 800c08a:	6831      	ldr	r1, [r6, #0]
 800c08c:	4605      	mov	r5, r0
 800c08e:	b911      	cbnz	r1, 800c096 <sbrk_aligned+0x12>
 800c090:	f000 f952 	bl	800c338 <_sbrk_r>
 800c094:	6030      	str	r0, [r6, #0]
 800c096:	4621      	mov	r1, r4
 800c098:	4628      	mov	r0, r5
 800c09a:	f000 f94d 	bl	800c338 <_sbrk_r>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d00a      	beq.n	800c0b8 <sbrk_aligned+0x34>
 800c0a2:	1cc4      	adds	r4, r0, #3
 800c0a4:	f024 0403 	bic.w	r4, r4, #3
 800c0a8:	42a0      	cmp	r0, r4
 800c0aa:	d007      	beq.n	800c0bc <sbrk_aligned+0x38>
 800c0ac:	1a21      	subs	r1, r4, r0
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 f942 	bl	800c338 <_sbrk_r>
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d101      	bne.n	800c0bc <sbrk_aligned+0x38>
 800c0b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c0bc:	4620      	mov	r0, r4
 800c0be:	bd70      	pop	{r4, r5, r6, pc}
 800c0c0:	2000037c 	.word	0x2000037c

0800c0c4 <_malloc_r>:
 800c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	1ccd      	adds	r5, r1, #3
 800c0ca:	f025 0503 	bic.w	r5, r5, #3
 800c0ce:	3508      	adds	r5, #8
 800c0d0:	2d0c      	cmp	r5, #12
 800c0d2:	bf38      	it	cc
 800c0d4:	250c      	movcc	r5, #12
 800c0d6:	2d00      	cmp	r5, #0
 800c0d8:	4607      	mov	r7, r0
 800c0da:	db01      	blt.n	800c0e0 <_malloc_r+0x1c>
 800c0dc:	42a9      	cmp	r1, r5
 800c0de:	d905      	bls.n	800c0ec <_malloc_r+0x28>
 800c0e0:	230c      	movs	r3, #12
 800c0e2:	2600      	movs	r6, #0
 800c0e4:	603b      	str	r3, [r7, #0]
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1c0 <_malloc_r+0xfc>
 800c0f0:	f000 f89c 	bl	800c22c <__malloc_lock>
 800c0f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	bb5c      	cbnz	r4, 800c154 <_malloc_r+0x90>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4638      	mov	r0, r7
 800c100:	f7ff ffc0 	bl	800c084 <sbrk_aligned>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	4604      	mov	r4, r0
 800c108:	d155      	bne.n	800c1b6 <_malloc_r+0xf2>
 800c10a:	f8d8 4000 	ldr.w	r4, [r8]
 800c10e:	4626      	mov	r6, r4
 800c110:	2e00      	cmp	r6, #0
 800c112:	d145      	bne.n	800c1a0 <_malloc_r+0xdc>
 800c114:	2c00      	cmp	r4, #0
 800c116:	d048      	beq.n	800c1aa <_malloc_r+0xe6>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	4631      	mov	r1, r6
 800c11c:	4638      	mov	r0, r7
 800c11e:	eb04 0903 	add.w	r9, r4, r3
 800c122:	f000 f909 	bl	800c338 <_sbrk_r>
 800c126:	4581      	cmp	r9, r0
 800c128:	d13f      	bne.n	800c1aa <_malloc_r+0xe6>
 800c12a:	6821      	ldr	r1, [r4, #0]
 800c12c:	4638      	mov	r0, r7
 800c12e:	1a6d      	subs	r5, r5, r1
 800c130:	4629      	mov	r1, r5
 800c132:	f7ff ffa7 	bl	800c084 <sbrk_aligned>
 800c136:	3001      	adds	r0, #1
 800c138:	d037      	beq.n	800c1aa <_malloc_r+0xe6>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	442b      	add	r3, r5
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	f8d8 3000 	ldr.w	r3, [r8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d038      	beq.n	800c1ba <_malloc_r+0xf6>
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	42a2      	cmp	r2, r4
 800c14c:	d12b      	bne.n	800c1a6 <_malloc_r+0xe2>
 800c14e:	2200      	movs	r2, #0
 800c150:	605a      	str	r2, [r3, #4]
 800c152:	e00f      	b.n	800c174 <_malloc_r+0xb0>
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	1b52      	subs	r2, r2, r5
 800c158:	d41f      	bmi.n	800c19a <_malloc_r+0xd6>
 800c15a:	2a0b      	cmp	r2, #11
 800c15c:	d917      	bls.n	800c18e <_malloc_r+0xca>
 800c15e:	1961      	adds	r1, r4, r5
 800c160:	42a3      	cmp	r3, r4
 800c162:	6025      	str	r5, [r4, #0]
 800c164:	bf18      	it	ne
 800c166:	6059      	strne	r1, [r3, #4]
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	bf08      	it	eq
 800c16c:	f8c8 1000 	streq.w	r1, [r8]
 800c170:	5162      	str	r2, [r4, r5]
 800c172:	604b      	str	r3, [r1, #4]
 800c174:	4638      	mov	r0, r7
 800c176:	f104 060b 	add.w	r6, r4, #11
 800c17a:	f000 f85d 	bl	800c238 <__malloc_unlock>
 800c17e:	f026 0607 	bic.w	r6, r6, #7
 800c182:	1d23      	adds	r3, r4, #4
 800c184:	1af2      	subs	r2, r6, r3
 800c186:	d0ae      	beq.n	800c0e6 <_malloc_r+0x22>
 800c188:	1b9b      	subs	r3, r3, r6
 800c18a:	50a3      	str	r3, [r4, r2]
 800c18c:	e7ab      	b.n	800c0e6 <_malloc_r+0x22>
 800c18e:	42a3      	cmp	r3, r4
 800c190:	6862      	ldr	r2, [r4, #4]
 800c192:	d1dd      	bne.n	800c150 <_malloc_r+0x8c>
 800c194:	f8c8 2000 	str.w	r2, [r8]
 800c198:	e7ec      	b.n	800c174 <_malloc_r+0xb0>
 800c19a:	4623      	mov	r3, r4
 800c19c:	6864      	ldr	r4, [r4, #4]
 800c19e:	e7ac      	b.n	800c0fa <_malloc_r+0x36>
 800c1a0:	4634      	mov	r4, r6
 800c1a2:	6876      	ldr	r6, [r6, #4]
 800c1a4:	e7b4      	b.n	800c110 <_malloc_r+0x4c>
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	e7cc      	b.n	800c144 <_malloc_r+0x80>
 800c1aa:	230c      	movs	r3, #12
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	f000 f842 	bl	800c238 <__malloc_unlock>
 800c1b4:	e797      	b.n	800c0e6 <_malloc_r+0x22>
 800c1b6:	6025      	str	r5, [r4, #0]
 800c1b8:	e7dc      	b.n	800c174 <_malloc_r+0xb0>
 800c1ba:	605b      	str	r3, [r3, #4]
 800c1bc:	deff      	udf	#255	; 0xff
 800c1be:	bf00      	nop
 800c1c0:	20000378 	.word	0x20000378

0800c1c4 <sniprintf>:
 800c1c4:	b40c      	push	{r2, r3}
 800c1c6:	b530      	push	{r4, r5, lr}
 800c1c8:	4b17      	ldr	r3, [pc, #92]	; (800c228 <sniprintf+0x64>)
 800c1ca:	1e0c      	subs	r4, r1, #0
 800c1cc:	681d      	ldr	r5, [r3, #0]
 800c1ce:	b09d      	sub	sp, #116	; 0x74
 800c1d0:	da08      	bge.n	800c1e4 <sniprintf+0x20>
 800c1d2:	238b      	movs	r3, #139	; 0x8b
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	b01d      	add	sp, #116	; 0x74
 800c1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1e0:	b002      	add	sp, #8
 800c1e2:	4770      	bx	lr
 800c1e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c1e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c1ec:	bf0c      	ite	eq
 800c1ee:	4623      	moveq	r3, r4
 800c1f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	9307      	str	r3, [sp, #28]
 800c1f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1fc:	9002      	str	r0, [sp, #8]
 800c1fe:	9006      	str	r0, [sp, #24]
 800c200:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c204:	4628      	mov	r0, r5
 800c206:	ab21      	add	r3, sp, #132	; 0x84
 800c208:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c20a:	a902      	add	r1, sp, #8
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	f000 f987 	bl	800c520 <_svfiprintf_r>
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	bfbc      	itt	lt
 800c216:	238b      	movlt	r3, #139	; 0x8b
 800c218:	602b      	strlt	r3, [r5, #0]
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d0dd      	beq.n	800c1da <sniprintf+0x16>
 800c21e:	2200      	movs	r2, #0
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	e7d9      	b.n	800c1da <sniprintf+0x16>
 800c226:	bf00      	nop
 800c228:	20000108 	.word	0x20000108

0800c22c <__malloc_lock>:
 800c22c:	4801      	ldr	r0, [pc, #4]	; (800c234 <__malloc_lock+0x8>)
 800c22e:	f000 b8bd 	b.w	800c3ac <__retarget_lock_acquire_recursive>
 800c232:	bf00      	nop
 800c234:	200004b8 	.word	0x200004b8

0800c238 <__malloc_unlock>:
 800c238:	4801      	ldr	r0, [pc, #4]	; (800c240 <__malloc_unlock+0x8>)
 800c23a:	f000 b8b8 	b.w	800c3ae <__retarget_lock_release_recursive>
 800c23e:	bf00      	nop
 800c240:	200004b8 	.word	0x200004b8

0800c244 <siprintf>:
 800c244:	b40e      	push	{r1, r2, r3}
 800c246:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c24a:	b500      	push	{lr}
 800c24c:	b09c      	sub	sp, #112	; 0x70
 800c24e:	ab1d      	add	r3, sp, #116	; 0x74
 800c250:	9002      	str	r0, [sp, #8]
 800c252:	9006      	str	r0, [sp, #24]
 800c254:	9107      	str	r1, [sp, #28]
 800c256:	9104      	str	r1, [sp, #16]
 800c258:	4808      	ldr	r0, [pc, #32]	; (800c27c <siprintf+0x38>)
 800c25a:	4909      	ldr	r1, [pc, #36]	; (800c280 <siprintf+0x3c>)
 800c25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c260:	9105      	str	r1, [sp, #20]
 800c262:	6800      	ldr	r0, [r0, #0]
 800c264:	a902      	add	r1, sp, #8
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f000 f95a 	bl	800c520 <_svfiprintf_r>
 800c26c:	2200      	movs	r2, #0
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	b01c      	add	sp, #112	; 0x70
 800c274:	f85d eb04 	ldr.w	lr, [sp], #4
 800c278:	b003      	add	sp, #12
 800c27a:	4770      	bx	lr
 800c27c:	20000108 	.word	0x20000108
 800c280:	ffff0208 	.word	0xffff0208

0800c284 <__utoa>:
 800c284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c286:	b08b      	sub	sp, #44	; 0x2c
 800c288:	4605      	mov	r5, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	466e      	mov	r6, sp
 800c28e:	4c1d      	ldr	r4, [pc, #116]	; (800c304 <__utoa+0x80>)
 800c290:	f104 0c20 	add.w	ip, r4, #32
 800c294:	4637      	mov	r7, r6
 800c296:	6820      	ldr	r0, [r4, #0]
 800c298:	6861      	ldr	r1, [r4, #4]
 800c29a:	3408      	adds	r4, #8
 800c29c:	c703      	stmia	r7!, {r0, r1}
 800c29e:	4564      	cmp	r4, ip
 800c2a0:	463e      	mov	r6, r7
 800c2a2:	d1f7      	bne.n	800c294 <__utoa+0x10>
 800c2a4:	7921      	ldrb	r1, [r4, #4]
 800c2a6:	6820      	ldr	r0, [r4, #0]
 800c2a8:	7139      	strb	r1, [r7, #4]
 800c2aa:	1e91      	subs	r1, r2, #2
 800c2ac:	2922      	cmp	r1, #34	; 0x22
 800c2ae:	6038      	str	r0, [r7, #0]
 800c2b0:	f04f 0100 	mov.w	r1, #0
 800c2b4:	d904      	bls.n	800c2c0 <__utoa+0x3c>
 800c2b6:	7019      	strb	r1, [r3, #0]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	b00b      	add	sp, #44	; 0x2c
 800c2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c0:	1e58      	subs	r0, r3, #1
 800c2c2:	4684      	mov	ip, r0
 800c2c4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c2c8:	fb02 5617 	mls	r6, r2, r7, r5
 800c2cc:	3628      	adds	r6, #40	; 0x28
 800c2ce:	446e      	add	r6, sp
 800c2d0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c2da:	462e      	mov	r6, r5
 800c2dc:	42b2      	cmp	r2, r6
 800c2de:	463d      	mov	r5, r7
 800c2e0:	f101 0101 	add.w	r1, r1, #1
 800c2e4:	d9ee      	bls.n	800c2c4 <__utoa+0x40>
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	545a      	strb	r2, [r3, r1]
 800c2ea:	1919      	adds	r1, r3, r4
 800c2ec:	1aa5      	subs	r5, r4, r2
 800c2ee:	42aa      	cmp	r2, r5
 800c2f0:	dae3      	bge.n	800c2ba <__utoa+0x36>
 800c2f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c2f6:	780e      	ldrb	r6, [r1, #0]
 800c2f8:	3201      	adds	r2, #1
 800c2fa:	7006      	strb	r6, [r0, #0]
 800c2fc:	f801 5901 	strb.w	r5, [r1], #-1
 800c300:	e7f4      	b.n	800c2ec <__utoa+0x68>
 800c302:	bf00      	nop
 800c304:	0800da9e 	.word	0x0800da9e

0800c308 <strcat>:
 800c308:	4602      	mov	r2, r0
 800c30a:	b510      	push	{r4, lr}
 800c30c:	7814      	ldrb	r4, [r2, #0]
 800c30e:	4613      	mov	r3, r2
 800c310:	3201      	adds	r2, #1
 800c312:	2c00      	cmp	r4, #0
 800c314:	d1fa      	bne.n	800c30c <strcat+0x4>
 800c316:	3b01      	subs	r3, #1
 800c318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c320:	2a00      	cmp	r2, #0
 800c322:	d1f9      	bne.n	800c318 <strcat+0x10>
 800c324:	bd10      	pop	{r4, pc}

0800c326 <memset>:
 800c326:	4603      	mov	r3, r0
 800c328:	4402      	add	r2, r0
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d100      	bne.n	800c330 <memset+0xa>
 800c32e:	4770      	bx	lr
 800c330:	f803 1b01 	strb.w	r1, [r3], #1
 800c334:	e7f9      	b.n	800c32a <memset+0x4>
	...

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	2300      	movs	r3, #0
 800c33c:	4d05      	ldr	r5, [pc, #20]	; (800c354 <_sbrk_r+0x1c>)
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7fb ffd4 	bl	80082f0 <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	200004bc 	.word	0x200004bc

0800c358 <__errno>:
 800c358:	4b01      	ldr	r3, [pc, #4]	; (800c360 <__errno+0x8>)
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	20000108 	.word	0x20000108

0800c364 <__libc_init_array>:
 800c364:	b570      	push	{r4, r5, r6, lr}
 800c366:	2600      	movs	r6, #0
 800c368:	4d0c      	ldr	r5, [pc, #48]	; (800c39c <__libc_init_array+0x38>)
 800c36a:	4c0d      	ldr	r4, [pc, #52]	; (800c3a0 <__libc_init_array+0x3c>)
 800c36c:	1b64      	subs	r4, r4, r5
 800c36e:	10a4      	asrs	r4, r4, #2
 800c370:	42a6      	cmp	r6, r4
 800c372:	d109      	bne.n	800c388 <__libc_init_array+0x24>
 800c374:	f000 fbc6 	bl	800cb04 <_init>
 800c378:	2600      	movs	r6, #0
 800c37a:	4d0a      	ldr	r5, [pc, #40]	; (800c3a4 <__libc_init_array+0x40>)
 800c37c:	4c0a      	ldr	r4, [pc, #40]	; (800c3a8 <__libc_init_array+0x44>)
 800c37e:	1b64      	subs	r4, r4, r5
 800c380:	10a4      	asrs	r4, r4, #2
 800c382:	42a6      	cmp	r6, r4
 800c384:	d105      	bne.n	800c392 <__libc_init_array+0x2e>
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	f855 3b04 	ldr.w	r3, [r5], #4
 800c38c:	4798      	blx	r3
 800c38e:	3601      	adds	r6, #1
 800c390:	e7ee      	b.n	800c370 <__libc_init_array+0xc>
 800c392:	f855 3b04 	ldr.w	r3, [r5], #4
 800c396:	4798      	blx	r3
 800c398:	3601      	adds	r6, #1
 800c39a:	e7f2      	b.n	800c382 <__libc_init_array+0x1e>
 800c39c:	0800daf8 	.word	0x0800daf8
 800c3a0:	0800daf8 	.word	0x0800daf8
 800c3a4:	0800daf8 	.word	0x0800daf8
 800c3a8:	0800dafc 	.word	0x0800dafc

0800c3ac <__retarget_lock_acquire_recursive>:
 800c3ac:	4770      	bx	lr

0800c3ae <__retarget_lock_release_recursive>:
 800c3ae:	4770      	bx	lr

0800c3b0 <memcpy>:
 800c3b0:	440a      	add	r2, r1
 800c3b2:	4291      	cmp	r1, r2
 800c3b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c3b8:	d100      	bne.n	800c3bc <memcpy+0xc>
 800c3ba:	4770      	bx	lr
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3c2:	4291      	cmp	r1, r2
 800c3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3c8:	d1f9      	bne.n	800c3be <memcpy+0xe>
 800c3ca:	bd10      	pop	{r4, pc}

0800c3cc <strcpy>:
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d2:	f803 2b01 	strb.w	r2, [r3], #1
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d1f9      	bne.n	800c3ce <strcpy+0x2>
 800c3da:	4770      	bx	lr

0800c3dc <_free_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4605      	mov	r5, r0
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	d040      	beq.n	800c466 <_free_r+0x8a>
 800c3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e8:	1f0c      	subs	r4, r1, #4
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfb8      	it	lt
 800c3ee:	18e4      	addlt	r4, r4, r3
 800c3f0:	f7ff ff1c 	bl	800c22c <__malloc_lock>
 800c3f4:	4a1c      	ldr	r2, [pc, #112]	; (800c468 <_free_r+0x8c>)
 800c3f6:	6813      	ldr	r3, [r2, #0]
 800c3f8:	b933      	cbnz	r3, 800c408 <_free_r+0x2c>
 800c3fa:	6063      	str	r3, [r4, #4]
 800c3fc:	6014      	str	r4, [r2, #0]
 800c3fe:	4628      	mov	r0, r5
 800c400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c404:	f7ff bf18 	b.w	800c238 <__malloc_unlock>
 800c408:	42a3      	cmp	r3, r4
 800c40a:	d908      	bls.n	800c41e <_free_r+0x42>
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	1821      	adds	r1, r4, r0
 800c410:	428b      	cmp	r3, r1
 800c412:	bf01      	itttt	eq
 800c414:	6819      	ldreq	r1, [r3, #0]
 800c416:	685b      	ldreq	r3, [r3, #4]
 800c418:	1809      	addeq	r1, r1, r0
 800c41a:	6021      	streq	r1, [r4, #0]
 800c41c:	e7ed      	b.n	800c3fa <_free_r+0x1e>
 800c41e:	461a      	mov	r2, r3
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	b10b      	cbz	r3, 800c428 <_free_r+0x4c>
 800c424:	42a3      	cmp	r3, r4
 800c426:	d9fa      	bls.n	800c41e <_free_r+0x42>
 800c428:	6811      	ldr	r1, [r2, #0]
 800c42a:	1850      	adds	r0, r2, r1
 800c42c:	42a0      	cmp	r0, r4
 800c42e:	d10b      	bne.n	800c448 <_free_r+0x6c>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	4401      	add	r1, r0
 800c434:	1850      	adds	r0, r2, r1
 800c436:	4283      	cmp	r3, r0
 800c438:	6011      	str	r1, [r2, #0]
 800c43a:	d1e0      	bne.n	800c3fe <_free_r+0x22>
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	4408      	add	r0, r1
 800c442:	6010      	str	r0, [r2, #0]
 800c444:	6053      	str	r3, [r2, #4]
 800c446:	e7da      	b.n	800c3fe <_free_r+0x22>
 800c448:	d902      	bls.n	800c450 <_free_r+0x74>
 800c44a:	230c      	movs	r3, #12
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	e7d6      	b.n	800c3fe <_free_r+0x22>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	1821      	adds	r1, r4, r0
 800c454:	428b      	cmp	r3, r1
 800c456:	bf01      	itttt	eq
 800c458:	6819      	ldreq	r1, [r3, #0]
 800c45a:	685b      	ldreq	r3, [r3, #4]
 800c45c:	1809      	addeq	r1, r1, r0
 800c45e:	6021      	streq	r1, [r4, #0]
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	6054      	str	r4, [r2, #4]
 800c464:	e7cb      	b.n	800c3fe <_free_r+0x22>
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	20000378 	.word	0x20000378

0800c46c <__ssputs_r>:
 800c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	461f      	mov	r7, r3
 800c472:	688e      	ldr	r6, [r1, #8]
 800c474:	4682      	mov	sl, r0
 800c476:	42be      	cmp	r6, r7
 800c478:	460c      	mov	r4, r1
 800c47a:	4690      	mov	r8, r2
 800c47c:	680b      	ldr	r3, [r1, #0]
 800c47e:	d82c      	bhi.n	800c4da <__ssputs_r+0x6e>
 800c480:	898a      	ldrh	r2, [r1, #12]
 800c482:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c486:	d026      	beq.n	800c4d6 <__ssputs_r+0x6a>
 800c488:	6965      	ldr	r5, [r4, #20]
 800c48a:	6909      	ldr	r1, [r1, #16]
 800c48c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c490:	eba3 0901 	sub.w	r9, r3, r1
 800c494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c498:	1c7b      	adds	r3, r7, #1
 800c49a:	444b      	add	r3, r9
 800c49c:	106d      	asrs	r5, r5, #1
 800c49e:	429d      	cmp	r5, r3
 800c4a0:	bf38      	it	cc
 800c4a2:	461d      	movcc	r5, r3
 800c4a4:	0553      	lsls	r3, r2, #21
 800c4a6:	d527      	bpl.n	800c4f8 <__ssputs_r+0x8c>
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7ff fe0b 	bl	800c0c4 <_malloc_r>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	b360      	cbz	r0, 800c50c <__ssputs_r+0xa0>
 800c4b2:	464a      	mov	r2, r9
 800c4b4:	6921      	ldr	r1, [r4, #16]
 800c4b6:	f7ff ff7b 	bl	800c3b0 <memcpy>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	6126      	str	r6, [r4, #16]
 800c4c8:	444e      	add	r6, r9
 800c4ca:	6026      	str	r6, [r4, #0]
 800c4cc:	463e      	mov	r6, r7
 800c4ce:	6165      	str	r5, [r4, #20]
 800c4d0:	eba5 0509 	sub.w	r5, r5, r9
 800c4d4:	60a5      	str	r5, [r4, #8]
 800c4d6:	42be      	cmp	r6, r7
 800c4d8:	d900      	bls.n	800c4dc <__ssputs_r+0x70>
 800c4da:	463e      	mov	r6, r7
 800c4dc:	4632      	mov	r2, r6
 800c4de:	4641      	mov	r1, r8
 800c4e0:	6820      	ldr	r0, [r4, #0]
 800c4e2:	f000 fade 	bl	800caa2 <memmove>
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	1b9b      	subs	r3, r3, r6
 800c4ec:	60a3      	str	r3, [r4, #8]
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	4433      	add	r3, r6
 800c4f2:	6023      	str	r3, [r4, #0]
 800c4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f8:	462a      	mov	r2, r5
 800c4fa:	f000 faa3 	bl	800ca44 <_realloc_r>
 800c4fe:	4606      	mov	r6, r0
 800c500:	2800      	cmp	r0, #0
 800c502:	d1e0      	bne.n	800c4c6 <__ssputs_r+0x5a>
 800c504:	4650      	mov	r0, sl
 800c506:	6921      	ldr	r1, [r4, #16]
 800c508:	f7ff ff68 	bl	800c3dc <_free_r>
 800c50c:	230c      	movs	r3, #12
 800c50e:	f8ca 3000 	str.w	r3, [sl]
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	e7e9      	b.n	800c4f4 <__ssputs_r+0x88>

0800c520 <_svfiprintf_r>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	4698      	mov	r8, r3
 800c526:	898b      	ldrh	r3, [r1, #12]
 800c528:	4607      	mov	r7, r0
 800c52a:	061b      	lsls	r3, r3, #24
 800c52c:	460d      	mov	r5, r1
 800c52e:	4614      	mov	r4, r2
 800c530:	b09d      	sub	sp, #116	; 0x74
 800c532:	d50e      	bpl.n	800c552 <_svfiprintf_r+0x32>
 800c534:	690b      	ldr	r3, [r1, #16]
 800c536:	b963      	cbnz	r3, 800c552 <_svfiprintf_r+0x32>
 800c538:	2140      	movs	r1, #64	; 0x40
 800c53a:	f7ff fdc3 	bl	800c0c4 <_malloc_r>
 800c53e:	6028      	str	r0, [r5, #0]
 800c540:	6128      	str	r0, [r5, #16]
 800c542:	b920      	cbnz	r0, 800c54e <_svfiprintf_r+0x2e>
 800c544:	230c      	movs	r3, #12
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c54c:	e0d0      	b.n	800c6f0 <_svfiprintf_r+0x1d0>
 800c54e:	2340      	movs	r3, #64	; 0x40
 800c550:	616b      	str	r3, [r5, #20]
 800c552:	2300      	movs	r3, #0
 800c554:	9309      	str	r3, [sp, #36]	; 0x24
 800c556:	2320      	movs	r3, #32
 800c558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c55c:	2330      	movs	r3, #48	; 0x30
 800c55e:	f04f 0901 	mov.w	r9, #1
 800c562:	f8cd 800c 	str.w	r8, [sp, #12]
 800c566:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c708 <_svfiprintf_r+0x1e8>
 800c56a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c56e:	4623      	mov	r3, r4
 800c570:	469a      	mov	sl, r3
 800c572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c576:	b10a      	cbz	r2, 800c57c <_svfiprintf_r+0x5c>
 800c578:	2a25      	cmp	r2, #37	; 0x25
 800c57a:	d1f9      	bne.n	800c570 <_svfiprintf_r+0x50>
 800c57c:	ebba 0b04 	subs.w	fp, sl, r4
 800c580:	d00b      	beq.n	800c59a <_svfiprintf_r+0x7a>
 800c582:	465b      	mov	r3, fp
 800c584:	4622      	mov	r2, r4
 800c586:	4629      	mov	r1, r5
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff ff6f 	bl	800c46c <__ssputs_r>
 800c58e:	3001      	adds	r0, #1
 800c590:	f000 80a9 	beq.w	800c6e6 <_svfiprintf_r+0x1c6>
 800c594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c596:	445a      	add	r2, fp
 800c598:	9209      	str	r2, [sp, #36]	; 0x24
 800c59a:	f89a 3000 	ldrb.w	r3, [sl]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 80a1 	beq.w	800c6e6 <_svfiprintf_r+0x1c6>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ae:	f10a 0a01 	add.w	sl, sl, #1
 800c5b2:	9304      	str	r3, [sp, #16]
 800c5b4:	9307      	str	r3, [sp, #28]
 800c5b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5ba:	931a      	str	r3, [sp, #104]	; 0x68
 800c5bc:	4654      	mov	r4, sl
 800c5be:	2205      	movs	r2, #5
 800c5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c4:	4850      	ldr	r0, [pc, #320]	; (800c708 <_svfiprintf_r+0x1e8>)
 800c5c6:	f000 fa86 	bl	800cad6 <memchr>
 800c5ca:	9a04      	ldr	r2, [sp, #16]
 800c5cc:	b9d8      	cbnz	r0, 800c606 <_svfiprintf_r+0xe6>
 800c5ce:	06d0      	lsls	r0, r2, #27
 800c5d0:	bf44      	itt	mi
 800c5d2:	2320      	movmi	r3, #32
 800c5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d8:	0711      	lsls	r1, r2, #28
 800c5da:	bf44      	itt	mi
 800c5dc:	232b      	movmi	r3, #43	; 0x2b
 800c5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e8:	d015      	beq.n	800c616 <_svfiprintf_r+0xf6>
 800c5ea:	4654      	mov	r4, sl
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	f04f 0c0a 	mov.w	ip, #10
 800c5f2:	9a07      	ldr	r2, [sp, #28]
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5fa:	3b30      	subs	r3, #48	; 0x30
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	d94d      	bls.n	800c69c <_svfiprintf_r+0x17c>
 800c600:	b1b0      	cbz	r0, 800c630 <_svfiprintf_r+0x110>
 800c602:	9207      	str	r2, [sp, #28]
 800c604:	e014      	b.n	800c630 <_svfiprintf_r+0x110>
 800c606:	eba0 0308 	sub.w	r3, r0, r8
 800c60a:	fa09 f303 	lsl.w	r3, r9, r3
 800c60e:	4313      	orrs	r3, r2
 800c610:	46a2      	mov	sl, r4
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	e7d2      	b.n	800c5bc <_svfiprintf_r+0x9c>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	1d19      	adds	r1, r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	9103      	str	r1, [sp, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfbb      	ittet	lt
 800c622:	425b      	neglt	r3, r3
 800c624:	f042 0202 	orrlt.w	r2, r2, #2
 800c628:	9307      	strge	r3, [sp, #28]
 800c62a:	9307      	strlt	r3, [sp, #28]
 800c62c:	bfb8      	it	lt
 800c62e:	9204      	strlt	r2, [sp, #16]
 800c630:	7823      	ldrb	r3, [r4, #0]
 800c632:	2b2e      	cmp	r3, #46	; 0x2e
 800c634:	d10c      	bne.n	800c650 <_svfiprintf_r+0x130>
 800c636:	7863      	ldrb	r3, [r4, #1]
 800c638:	2b2a      	cmp	r3, #42	; 0x2a
 800c63a:	d134      	bne.n	800c6a6 <_svfiprintf_r+0x186>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	3402      	adds	r4, #2
 800c640:	1d1a      	adds	r2, r3, #4
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	9203      	str	r2, [sp, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	bfb8      	it	lt
 800c64a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c64e:	9305      	str	r3, [sp, #20]
 800c650:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c70c <_svfiprintf_r+0x1ec>
 800c654:	2203      	movs	r2, #3
 800c656:	4650      	mov	r0, sl
 800c658:	7821      	ldrb	r1, [r4, #0]
 800c65a:	f000 fa3c 	bl	800cad6 <memchr>
 800c65e:	b138      	cbz	r0, 800c670 <_svfiprintf_r+0x150>
 800c660:	2240      	movs	r2, #64	; 0x40
 800c662:	9b04      	ldr	r3, [sp, #16]
 800c664:	eba0 000a 	sub.w	r0, r0, sl
 800c668:	4082      	lsls	r2, r0
 800c66a:	4313      	orrs	r3, r2
 800c66c:	3401      	adds	r4, #1
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c674:	2206      	movs	r2, #6
 800c676:	4826      	ldr	r0, [pc, #152]	; (800c710 <_svfiprintf_r+0x1f0>)
 800c678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c67c:	f000 fa2b 	bl	800cad6 <memchr>
 800c680:	2800      	cmp	r0, #0
 800c682:	d038      	beq.n	800c6f6 <_svfiprintf_r+0x1d6>
 800c684:	4b23      	ldr	r3, [pc, #140]	; (800c714 <_svfiprintf_r+0x1f4>)
 800c686:	bb1b      	cbnz	r3, 800c6d0 <_svfiprintf_r+0x1b0>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	3307      	adds	r3, #7
 800c68c:	f023 0307 	bic.w	r3, r3, #7
 800c690:	3308      	adds	r3, #8
 800c692:	9303      	str	r3, [sp, #12]
 800c694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c696:	4433      	add	r3, r6
 800c698:	9309      	str	r3, [sp, #36]	; 0x24
 800c69a:	e768      	b.n	800c56e <_svfiprintf_r+0x4e>
 800c69c:	460c      	mov	r4, r1
 800c69e:	2001      	movs	r0, #1
 800c6a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6a4:	e7a6      	b.n	800c5f4 <_svfiprintf_r+0xd4>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f04f 0c0a 	mov.w	ip, #10
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	3401      	adds	r4, #1
 800c6b0:	9305      	str	r3, [sp, #20]
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6b8:	3a30      	subs	r2, #48	; 0x30
 800c6ba:	2a09      	cmp	r2, #9
 800c6bc:	d903      	bls.n	800c6c6 <_svfiprintf_r+0x1a6>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0c6      	beq.n	800c650 <_svfiprintf_r+0x130>
 800c6c2:	9105      	str	r1, [sp, #20]
 800c6c4:	e7c4      	b.n	800c650 <_svfiprintf_r+0x130>
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ce:	e7f0      	b.n	800c6b2 <_svfiprintf_r+0x192>
 800c6d0:	ab03      	add	r3, sp, #12
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	462a      	mov	r2, r5
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <_svfiprintf_r+0x1f8>)
 800c6da:	a904      	add	r1, sp, #16
 800c6dc:	f3af 8000 	nop.w
 800c6e0:	1c42      	adds	r2, r0, #1
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	d1d6      	bne.n	800c694 <_svfiprintf_r+0x174>
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	065b      	lsls	r3, r3, #25
 800c6ea:	f53f af2d 	bmi.w	800c548 <_svfiprintf_r+0x28>
 800c6ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6f0:	b01d      	add	sp, #116	; 0x74
 800c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f6:	ab03      	add	r3, sp, #12
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	4b06      	ldr	r3, [pc, #24]	; (800c718 <_svfiprintf_r+0x1f8>)
 800c700:	a904      	add	r1, sp, #16
 800c702:	f000 f87d 	bl	800c800 <_printf_i>
 800c706:	e7eb      	b.n	800c6e0 <_svfiprintf_r+0x1c0>
 800c708:	0800dac3 	.word	0x0800dac3
 800c70c:	0800dac9 	.word	0x0800dac9
 800c710:	0800dacd 	.word	0x0800dacd
 800c714:	00000000 	.word	0x00000000
 800c718:	0800c46d 	.word	0x0800c46d

0800c71c <_printf_common>:
 800c71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	4616      	mov	r6, r2
 800c722:	4699      	mov	r9, r3
 800c724:	688a      	ldr	r2, [r1, #8]
 800c726:	690b      	ldr	r3, [r1, #16]
 800c728:	4607      	mov	r7, r0
 800c72a:	4293      	cmp	r3, r2
 800c72c:	bfb8      	it	lt
 800c72e:	4613      	movlt	r3, r2
 800c730:	6033      	str	r3, [r6, #0]
 800c732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c736:	460c      	mov	r4, r1
 800c738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c73c:	b10a      	cbz	r2, 800c742 <_printf_common+0x26>
 800c73e:	3301      	adds	r3, #1
 800c740:	6033      	str	r3, [r6, #0]
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	0699      	lsls	r1, r3, #26
 800c746:	bf42      	ittt	mi
 800c748:	6833      	ldrmi	r3, [r6, #0]
 800c74a:	3302      	addmi	r3, #2
 800c74c:	6033      	strmi	r3, [r6, #0]
 800c74e:	6825      	ldr	r5, [r4, #0]
 800c750:	f015 0506 	ands.w	r5, r5, #6
 800c754:	d106      	bne.n	800c764 <_printf_common+0x48>
 800c756:	f104 0a19 	add.w	sl, r4, #25
 800c75a:	68e3      	ldr	r3, [r4, #12]
 800c75c:	6832      	ldr	r2, [r6, #0]
 800c75e:	1a9b      	subs	r3, r3, r2
 800c760:	42ab      	cmp	r3, r5
 800c762:	dc2b      	bgt.n	800c7bc <_printf_common+0xa0>
 800c764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c768:	1e13      	subs	r3, r2, #0
 800c76a:	6822      	ldr	r2, [r4, #0]
 800c76c:	bf18      	it	ne
 800c76e:	2301      	movne	r3, #1
 800c770:	0692      	lsls	r2, r2, #26
 800c772:	d430      	bmi.n	800c7d6 <_printf_common+0xba>
 800c774:	4649      	mov	r1, r9
 800c776:	4638      	mov	r0, r7
 800c778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c77c:	47c0      	blx	r8
 800c77e:	3001      	adds	r0, #1
 800c780:	d023      	beq.n	800c7ca <_printf_common+0xae>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	6922      	ldr	r2, [r4, #16]
 800c786:	f003 0306 	and.w	r3, r3, #6
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	bf14      	ite	ne
 800c78e:	2500      	movne	r5, #0
 800c790:	6833      	ldreq	r3, [r6, #0]
 800c792:	f04f 0600 	mov.w	r6, #0
 800c796:	bf08      	it	eq
 800c798:	68e5      	ldreq	r5, [r4, #12]
 800c79a:	f104 041a 	add.w	r4, r4, #26
 800c79e:	bf08      	it	eq
 800c7a0:	1aed      	subeq	r5, r5, r3
 800c7a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c7a6:	bf08      	it	eq
 800c7a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	bfc4      	itt	gt
 800c7b0:	1a9b      	subgt	r3, r3, r2
 800c7b2:	18ed      	addgt	r5, r5, r3
 800c7b4:	42b5      	cmp	r5, r6
 800c7b6:	d11a      	bne.n	800c7ee <_printf_common+0xd2>
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	e008      	b.n	800c7ce <_printf_common+0xb2>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	4652      	mov	r2, sl
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	47c0      	blx	r8
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d103      	bne.n	800c7d2 <_printf_common+0xb6>
 800c7ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d2:	3501      	adds	r5, #1
 800c7d4:	e7c1      	b.n	800c75a <_printf_common+0x3e>
 800c7d6:	2030      	movs	r0, #48	; 0x30
 800c7d8:	18e1      	adds	r1, r4, r3
 800c7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7e4:	4422      	add	r2, r4
 800c7e6:	3302      	adds	r3, #2
 800c7e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7ec:	e7c2      	b.n	800c774 <_printf_common+0x58>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	47c0      	blx	r8
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d0e6      	beq.n	800c7ca <_printf_common+0xae>
 800c7fc:	3601      	adds	r6, #1
 800c7fe:	e7d9      	b.n	800c7b4 <_printf_common+0x98>

0800c800 <_printf_i>:
 800c800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c804:	7e0f      	ldrb	r7, [r1, #24]
 800c806:	4691      	mov	r9, r2
 800c808:	2f78      	cmp	r7, #120	; 0x78
 800c80a:	4680      	mov	r8, r0
 800c80c:	460c      	mov	r4, r1
 800c80e:	469a      	mov	sl, r3
 800c810:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c816:	d807      	bhi.n	800c828 <_printf_i+0x28>
 800c818:	2f62      	cmp	r7, #98	; 0x62
 800c81a:	d80a      	bhi.n	800c832 <_printf_i+0x32>
 800c81c:	2f00      	cmp	r7, #0
 800c81e:	f000 80d5 	beq.w	800c9cc <_printf_i+0x1cc>
 800c822:	2f58      	cmp	r7, #88	; 0x58
 800c824:	f000 80c1 	beq.w	800c9aa <_printf_i+0x1aa>
 800c828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c82c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c830:	e03a      	b.n	800c8a8 <_printf_i+0xa8>
 800c832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c836:	2b15      	cmp	r3, #21
 800c838:	d8f6      	bhi.n	800c828 <_printf_i+0x28>
 800c83a:	a101      	add	r1, pc, #4	; (adr r1, 800c840 <_printf_i+0x40>)
 800c83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c840:	0800c899 	.word	0x0800c899
 800c844:	0800c8ad 	.word	0x0800c8ad
 800c848:	0800c829 	.word	0x0800c829
 800c84c:	0800c829 	.word	0x0800c829
 800c850:	0800c829 	.word	0x0800c829
 800c854:	0800c829 	.word	0x0800c829
 800c858:	0800c8ad 	.word	0x0800c8ad
 800c85c:	0800c829 	.word	0x0800c829
 800c860:	0800c829 	.word	0x0800c829
 800c864:	0800c829 	.word	0x0800c829
 800c868:	0800c829 	.word	0x0800c829
 800c86c:	0800c9b3 	.word	0x0800c9b3
 800c870:	0800c8d9 	.word	0x0800c8d9
 800c874:	0800c96d 	.word	0x0800c96d
 800c878:	0800c829 	.word	0x0800c829
 800c87c:	0800c829 	.word	0x0800c829
 800c880:	0800c9d5 	.word	0x0800c9d5
 800c884:	0800c829 	.word	0x0800c829
 800c888:	0800c8d9 	.word	0x0800c8d9
 800c88c:	0800c829 	.word	0x0800c829
 800c890:	0800c829 	.word	0x0800c829
 800c894:	0800c975 	.word	0x0800c975
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	1d1a      	adds	r2, r3, #4
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	602a      	str	r2, [r5, #0]
 800c8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e0a0      	b.n	800c9ee <_printf_i+0x1ee>
 800c8ac:	6820      	ldr	r0, [r4, #0]
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	0607      	lsls	r7, r0, #24
 800c8b2:	f103 0104 	add.w	r1, r3, #4
 800c8b6:	6029      	str	r1, [r5, #0]
 800c8b8:	d501      	bpl.n	800c8be <_printf_i+0xbe>
 800c8ba:	681e      	ldr	r6, [r3, #0]
 800c8bc:	e003      	b.n	800c8c6 <_printf_i+0xc6>
 800c8be:	0646      	lsls	r6, r0, #25
 800c8c0:	d5fb      	bpl.n	800c8ba <_printf_i+0xba>
 800c8c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c8c6:	2e00      	cmp	r6, #0
 800c8c8:	da03      	bge.n	800c8d2 <_printf_i+0xd2>
 800c8ca:	232d      	movs	r3, #45	; 0x2d
 800c8cc:	4276      	negs	r6, r6
 800c8ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8d2:	230a      	movs	r3, #10
 800c8d4:	4859      	ldr	r0, [pc, #356]	; (800ca3c <_printf_i+0x23c>)
 800c8d6:	e012      	b.n	800c8fe <_printf_i+0xfe>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	6820      	ldr	r0, [r4, #0]
 800c8dc:	1d19      	adds	r1, r3, #4
 800c8de:	6029      	str	r1, [r5, #0]
 800c8e0:	0605      	lsls	r5, r0, #24
 800c8e2:	d501      	bpl.n	800c8e8 <_printf_i+0xe8>
 800c8e4:	681e      	ldr	r6, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <_printf_i+0xee>
 800c8e8:	0641      	lsls	r1, r0, #25
 800c8ea:	d5fb      	bpl.n	800c8e4 <_printf_i+0xe4>
 800c8ec:	881e      	ldrh	r6, [r3, #0]
 800c8ee:	2f6f      	cmp	r7, #111	; 0x6f
 800c8f0:	bf0c      	ite	eq
 800c8f2:	2308      	moveq	r3, #8
 800c8f4:	230a      	movne	r3, #10
 800c8f6:	4851      	ldr	r0, [pc, #324]	; (800ca3c <_printf_i+0x23c>)
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8fe:	6865      	ldr	r5, [r4, #4]
 800c900:	2d00      	cmp	r5, #0
 800c902:	bfa8      	it	ge
 800c904:	6821      	ldrge	r1, [r4, #0]
 800c906:	60a5      	str	r5, [r4, #8]
 800c908:	bfa4      	itt	ge
 800c90a:	f021 0104 	bicge.w	r1, r1, #4
 800c90e:	6021      	strge	r1, [r4, #0]
 800c910:	b90e      	cbnz	r6, 800c916 <_printf_i+0x116>
 800c912:	2d00      	cmp	r5, #0
 800c914:	d04b      	beq.n	800c9ae <_printf_i+0x1ae>
 800c916:	4615      	mov	r5, r2
 800c918:	fbb6 f1f3 	udiv	r1, r6, r3
 800c91c:	fb03 6711 	mls	r7, r3, r1, r6
 800c920:	5dc7      	ldrb	r7, [r0, r7]
 800c922:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c926:	4637      	mov	r7, r6
 800c928:	42bb      	cmp	r3, r7
 800c92a:	460e      	mov	r6, r1
 800c92c:	d9f4      	bls.n	800c918 <_printf_i+0x118>
 800c92e:	2b08      	cmp	r3, #8
 800c930:	d10b      	bne.n	800c94a <_printf_i+0x14a>
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	07de      	lsls	r6, r3, #31
 800c936:	d508      	bpl.n	800c94a <_printf_i+0x14a>
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	6861      	ldr	r1, [r4, #4]
 800c93c:	4299      	cmp	r1, r3
 800c93e:	bfde      	ittt	le
 800c940:	2330      	movle	r3, #48	; 0x30
 800c942:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c946:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c94a:	1b52      	subs	r2, r2, r5
 800c94c:	6122      	str	r2, [r4, #16]
 800c94e:	464b      	mov	r3, r9
 800c950:	4621      	mov	r1, r4
 800c952:	4640      	mov	r0, r8
 800c954:	f8cd a000 	str.w	sl, [sp]
 800c958:	aa03      	add	r2, sp, #12
 800c95a:	f7ff fedf 	bl	800c71c <_printf_common>
 800c95e:	3001      	adds	r0, #1
 800c960:	d14a      	bne.n	800c9f8 <_printf_i+0x1f8>
 800c962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c966:	b004      	add	sp, #16
 800c968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	f043 0320 	orr.w	r3, r3, #32
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	2778      	movs	r7, #120	; 0x78
 800c976:	4832      	ldr	r0, [pc, #200]	; (800ca40 <_printf_i+0x240>)
 800c978:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c97c:	6823      	ldr	r3, [r4, #0]
 800c97e:	6829      	ldr	r1, [r5, #0]
 800c980:	061f      	lsls	r7, r3, #24
 800c982:	f851 6b04 	ldr.w	r6, [r1], #4
 800c986:	d402      	bmi.n	800c98e <_printf_i+0x18e>
 800c988:	065f      	lsls	r7, r3, #25
 800c98a:	bf48      	it	mi
 800c98c:	b2b6      	uxthmi	r6, r6
 800c98e:	07df      	lsls	r7, r3, #31
 800c990:	bf48      	it	mi
 800c992:	f043 0320 	orrmi.w	r3, r3, #32
 800c996:	6029      	str	r1, [r5, #0]
 800c998:	bf48      	it	mi
 800c99a:	6023      	strmi	r3, [r4, #0]
 800c99c:	b91e      	cbnz	r6, 800c9a6 <_printf_i+0x1a6>
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	f023 0320 	bic.w	r3, r3, #32
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	2310      	movs	r3, #16
 800c9a8:	e7a6      	b.n	800c8f8 <_printf_i+0xf8>
 800c9aa:	4824      	ldr	r0, [pc, #144]	; (800ca3c <_printf_i+0x23c>)
 800c9ac:	e7e4      	b.n	800c978 <_printf_i+0x178>
 800c9ae:	4615      	mov	r5, r2
 800c9b0:	e7bd      	b.n	800c92e <_printf_i+0x12e>
 800c9b2:	682b      	ldr	r3, [r5, #0]
 800c9b4:	6826      	ldr	r6, [r4, #0]
 800c9b6:	1d18      	adds	r0, r3, #4
 800c9b8:	6961      	ldr	r1, [r4, #20]
 800c9ba:	6028      	str	r0, [r5, #0]
 800c9bc:	0635      	lsls	r5, r6, #24
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	d501      	bpl.n	800c9c6 <_printf_i+0x1c6>
 800c9c2:	6019      	str	r1, [r3, #0]
 800c9c4:	e002      	b.n	800c9cc <_printf_i+0x1cc>
 800c9c6:	0670      	lsls	r0, r6, #25
 800c9c8:	d5fb      	bpl.n	800c9c2 <_printf_i+0x1c2>
 800c9ca:	8019      	strh	r1, [r3, #0]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4615      	mov	r5, r2
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	e7bc      	b.n	800c94e <_printf_i+0x14e>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	1d1a      	adds	r2, r3, #4
 800c9da:	602a      	str	r2, [r5, #0]
 800c9dc:	681d      	ldr	r5, [r3, #0]
 800c9de:	6862      	ldr	r2, [r4, #4]
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	f000 f878 	bl	800cad6 <memchr>
 800c9e6:	b108      	cbz	r0, 800c9ec <_printf_i+0x1ec>
 800c9e8:	1b40      	subs	r0, r0, r5
 800c9ea:	6060      	str	r0, [r4, #4]
 800c9ec:	6863      	ldr	r3, [r4, #4]
 800c9ee:	6123      	str	r3, [r4, #16]
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9f6:	e7aa      	b.n	800c94e <_printf_i+0x14e>
 800c9f8:	462a      	mov	r2, r5
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	47d0      	blx	sl
 800ca02:	3001      	adds	r0, #1
 800ca04:	d0ad      	beq.n	800c962 <_printf_i+0x162>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	079b      	lsls	r3, r3, #30
 800ca0a:	d413      	bmi.n	800ca34 <_printf_i+0x234>
 800ca0c:	68e0      	ldr	r0, [r4, #12]
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	4298      	cmp	r0, r3
 800ca12:	bfb8      	it	lt
 800ca14:	4618      	movlt	r0, r3
 800ca16:	e7a6      	b.n	800c966 <_printf_i+0x166>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	4640      	mov	r0, r8
 800ca20:	47d0      	blx	sl
 800ca22:	3001      	adds	r0, #1
 800ca24:	d09d      	beq.n	800c962 <_printf_i+0x162>
 800ca26:	3501      	adds	r5, #1
 800ca28:	68e3      	ldr	r3, [r4, #12]
 800ca2a:	9903      	ldr	r1, [sp, #12]
 800ca2c:	1a5b      	subs	r3, r3, r1
 800ca2e:	42ab      	cmp	r3, r5
 800ca30:	dcf2      	bgt.n	800ca18 <_printf_i+0x218>
 800ca32:	e7eb      	b.n	800ca0c <_printf_i+0x20c>
 800ca34:	2500      	movs	r5, #0
 800ca36:	f104 0619 	add.w	r6, r4, #25
 800ca3a:	e7f5      	b.n	800ca28 <_printf_i+0x228>
 800ca3c:	0800dad4 	.word	0x0800dad4
 800ca40:	0800dae5 	.word	0x0800dae5

0800ca44 <_realloc_r>:
 800ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca48:	4680      	mov	r8, r0
 800ca4a:	4614      	mov	r4, r2
 800ca4c:	460e      	mov	r6, r1
 800ca4e:	b921      	cbnz	r1, 800ca5a <_realloc_r+0x16>
 800ca50:	4611      	mov	r1, r2
 800ca52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca56:	f7ff bb35 	b.w	800c0c4 <_malloc_r>
 800ca5a:	b92a      	cbnz	r2, 800ca68 <_realloc_r+0x24>
 800ca5c:	f7ff fcbe 	bl	800c3dc <_free_r>
 800ca60:	4625      	mov	r5, r4
 800ca62:	4628      	mov	r0, r5
 800ca64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca68:	f000 f843 	bl	800caf2 <_malloc_usable_size_r>
 800ca6c:	4284      	cmp	r4, r0
 800ca6e:	4607      	mov	r7, r0
 800ca70:	d802      	bhi.n	800ca78 <_realloc_r+0x34>
 800ca72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca76:	d812      	bhi.n	800ca9e <_realloc_r+0x5a>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	f7ff fb22 	bl	800c0c4 <_malloc_r>
 800ca80:	4605      	mov	r5, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d0ed      	beq.n	800ca62 <_realloc_r+0x1e>
 800ca86:	42bc      	cmp	r4, r7
 800ca88:	4622      	mov	r2, r4
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	bf28      	it	cs
 800ca8e:	463a      	movcs	r2, r7
 800ca90:	f7ff fc8e 	bl	800c3b0 <memcpy>
 800ca94:	4631      	mov	r1, r6
 800ca96:	4640      	mov	r0, r8
 800ca98:	f7ff fca0 	bl	800c3dc <_free_r>
 800ca9c:	e7e1      	b.n	800ca62 <_realloc_r+0x1e>
 800ca9e:	4635      	mov	r5, r6
 800caa0:	e7df      	b.n	800ca62 <_realloc_r+0x1e>

0800caa2 <memmove>:
 800caa2:	4288      	cmp	r0, r1
 800caa4:	b510      	push	{r4, lr}
 800caa6:	eb01 0402 	add.w	r4, r1, r2
 800caaa:	d902      	bls.n	800cab2 <memmove+0x10>
 800caac:	4284      	cmp	r4, r0
 800caae:	4623      	mov	r3, r4
 800cab0:	d807      	bhi.n	800cac2 <memmove+0x20>
 800cab2:	1e43      	subs	r3, r0, #1
 800cab4:	42a1      	cmp	r1, r4
 800cab6:	d008      	beq.n	800caca <memmove+0x28>
 800cab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cabc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cac0:	e7f8      	b.n	800cab4 <memmove+0x12>
 800cac2:	4601      	mov	r1, r0
 800cac4:	4402      	add	r2, r0
 800cac6:	428a      	cmp	r2, r1
 800cac8:	d100      	bne.n	800cacc <memmove+0x2a>
 800caca:	bd10      	pop	{r4, pc}
 800cacc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cad0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cad4:	e7f7      	b.n	800cac6 <memmove+0x24>

0800cad6 <memchr>:
 800cad6:	4603      	mov	r3, r0
 800cad8:	b510      	push	{r4, lr}
 800cada:	b2c9      	uxtb	r1, r1
 800cadc:	4402      	add	r2, r0
 800cade:	4293      	cmp	r3, r2
 800cae0:	4618      	mov	r0, r3
 800cae2:	d101      	bne.n	800cae8 <memchr+0x12>
 800cae4:	2000      	movs	r0, #0
 800cae6:	e003      	b.n	800caf0 <memchr+0x1a>
 800cae8:	7804      	ldrb	r4, [r0, #0]
 800caea:	3301      	adds	r3, #1
 800caec:	428c      	cmp	r4, r1
 800caee:	d1f6      	bne.n	800cade <memchr+0x8>
 800caf0:	bd10      	pop	{r4, pc}

0800caf2 <_malloc_usable_size_r>:
 800caf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caf6:	1f18      	subs	r0, r3, #4
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bfbc      	itt	lt
 800cafc:	580b      	ldrlt	r3, [r1, r0]
 800cafe:	18c0      	addlt	r0, r0, r3
 800cb00:	4770      	bx	lr
	...

0800cb04 <_init>:
 800cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb06:	bf00      	nop
 800cb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb0a:	bc08      	pop	{r3}
 800cb0c:	469e      	mov	lr, r3
 800cb0e:	4770      	bx	lr

0800cb10 <_fini>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	bf00      	nop
 800cb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb16:	bc08      	pop	{r3}
 800cb18:	469e      	mov	lr, r3
 800cb1a:	4770      	bx	lr
