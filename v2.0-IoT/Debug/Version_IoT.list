
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc00  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd70  0800dd70  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd70  0800dd70  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd70  0800dd70  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd70  0800dd70  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd74  0800dd74  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dd78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  2000010c  0800de84  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800de84  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126e2  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002762  00000000  00000000  0003285a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfa  00000000  00000000  00036180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af36  00000000  00000000  00036f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fb8  00000000  00000000  00051eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ed14  00000000  00000000  00069e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051b0  00000000  00000000  00108b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdcc 	.word	0x0800cdcc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800cdcc 	.word	0x0800cdcc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b09f      	sub	sp, #124	; 0x7c
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4948      	ldr	r1, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000242:	4849      	ldr	r0, [pc, #292]	; (8000368 <ESP8266_Init+0x134>)
 8000244:	f00c f950 	bl	800c4e8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4847      	ldr	r0, [pc, #284]	; (8000368 <ESP8266_Init+0x134>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4944      	ldr	r1, [pc, #272]	; (8000368 <ESP8266_Init+0x134>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fb60 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 fa90 	bl	8008784 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4941      	ldr	r1, [pc, #260]	; (800036c <ESP8266_Init+0x138>)
 8000266:	4840      	ldr	r0, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000268:	f00c f93e 	bl	800c4e8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483e      	ldr	r0, [pc, #248]	; (8000368 <ESP8266_Init+0x134>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493b      	ldr	r1, [pc, #236]	; (8000368 <ESP8266_Init+0x134>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fb4e 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 fa7e 	bl	8008784 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4939      	ldr	r1, [pc, #228]	; (8000370 <ESP8266_Init+0x13c>)
 800028a:	4837      	ldr	r0, [pc, #220]	; (8000368 <ESP8266_Init+0x134>)
 800028c:	f00c f92c 	bl	800c4e8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4835      	ldr	r0, [pc, #212]	; (8000368 <ESP8266_Init+0x134>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4932      	ldr	r1, [pc, #200]	; (8000368 <ESP8266_Init+0x134>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fb3c 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fa6c 	bl	8008784 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4931      	ldr	r1, [pc, #196]	; (8000374 <ESP8266_Init+0x140>)
 80002ae:	482e      	ldr	r0, [pc, #184]	; (8000368 <ESP8266_Init+0x134>)
 80002b0:	f00c f91a 	bl	800c4e8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482c      	ldr	r0, [pc, #176]	; (8000368 <ESP8266_Init+0x134>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4929      	ldr	r1, [pc, #164]	; (8000368 <ESP8266_Init+0x134>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fb2a 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fa5a 	bl	8008784 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a28      	ldr	r2, [pc, #160]	; (8000378 <ESP8266_Init+0x144>)
 80002d6:	461c      	mov	r4, r3
 80002d8:	4613      	mov	r3, r2
 80002da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002dc:	c407      	stmia	r4!, {r0, r1, r2}
 80002de:	8023      	strh	r3, [r4, #0]
 80002e0:	3402      	adds	r4, #2
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	68b9      	ldr	r1, [r7, #8]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f00c f95d 	bl	800c5ac <strcat>
	strcat(str, "\",\"");
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff94 	bl	8000224 <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4413      	add	r3, r2
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <ESP8266_Init+0x148>)
 8000308:	6810      	ldr	r0, [r2, #0]
 800030a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	4618      	mov	r0, r3
 8000314:	f00c f94a 	bl	800c5ac <strcat>
	strcat(str, "\"\r\n");
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff81 	bl	8000224 <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4413      	add	r3, r2
 800032c:	4a14      	ldr	r2, [pc, #80]	; (8000380 <ESP8266_Init+0x14c>)
 800032e:	6810      	ldr	r0, [r2, #0]
 8000330:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	461a      	mov	r2, r3
 8000338:	4912      	ldr	r1, [pc, #72]	; (8000384 <ESP8266_Init+0x150>)
 800033a:	480b      	ldr	r0, [pc, #44]	; (8000368 <ESP8266_Init+0x134>)
 800033c:	f00c f8d4 	bl	800c4e8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <ESP8266_Init+0x134>)
 8000342:	f7ff ff6f 	bl	8000224 <strlen>
 8000346:	4603      	mov	r3, r0
 8000348:	b29b      	uxth	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	4906      	ldr	r1, [pc, #24]	; (8000368 <ESP8266_Init+0x134>)
 800034e:	68f8      	ldr	r0, [r7, #12]
 8000350:	f00b fae4 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000358:	f008 fa14 	bl	8008784 <HAL_Delay>
}
 800035c:	bf00      	nop
 800035e:	377c      	adds	r7, #124	; 0x7c
 8000360:	46bd      	mov	sp, r7
 8000362:	bd90      	pop	{r4, r7, pc}
 8000364:	0800cde4 	.word	0x0800cde4
 8000368:	20000128 	.word	0x20000128
 800036c:	0800cdf4 	.word	0x0800cdf4
 8000370:	0800ce00 	.word	0x0800ce00
 8000374:	0800ce08 	.word	0x0800ce08
 8000378:	0800ce18 	.word	0x0800ce18
 800037c:	0800ce28 	.word	0x0800ce28
 8000380:	0800ce2c 	.word	0x0800ce2c
 8000384:	0800ce30 	.word	0x0800ce30

08000388 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b0c6      	sub	sp, #280	; 0x118
 800038c:	af02      	add	r7, sp, #8
 800038e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000396:	6018      	str	r0, [r3, #0]
 8000398:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800039c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80003a0:	6019      	str	r1, [r3, #0]
 80003a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003aa:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80003ac:	4a31      	ldr	r2, [pc, #196]	; (8000474 <sendMachineData+0xec>)
 80003ae:	4932      	ldr	r1, [pc, #200]	; (8000478 <sendMachineData+0xf0>)
 80003b0:	4832      	ldr	r0, [pc, #200]	; (800047c <sendMachineData+0xf4>)
 80003b2:	f00c f899 	bl	800c4e8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b6:	4831      	ldr	r0, [pc, #196]	; (800047c <sendMachineData+0xf4>)
 80003b8:	f7ff ff34 	bl	8000224 <strlen>
 80003bc:	4603      	mov	r3, r0
 80003be:	b29a      	uxth	r2, r3
 80003c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c8:	492c      	ldr	r1, [pc, #176]	; (800047c <sendMachineData+0xf4>)
 80003ca:	6818      	ldr	r0, [r3, #0]
 80003cc:	f00b faa6 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d4:	f008 f9d6 	bl	8008784 <HAL_Delay>

	sprintf(local_txA,
 80003d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003ec:	4924      	ldr	r1, [pc, #144]	; (8000480 <sendMachineData+0xf8>)
 80003ee:	9100      	str	r1, [sp, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	4923      	ldr	r1, [pc, #140]	; (8000484 <sendMachineData+0xfc>)
 80003f6:	f00c f877 	bl	800c4e8 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80003fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff10 	bl	8000224 <strlen>
 8000404:	4603      	mov	r3, r0
 8000406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000412:	491d      	ldr	r1, [pc, #116]	; (8000488 <sendMachineData+0x100>)
 8000414:	4618      	mov	r0, r3
 8000416:	f00c f867 	bl	800c4e8 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff00 	bl	8000224 <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	b29a      	uxth	r2, r3
 8000428:	f107 0110 	add.w	r1, r7, #16
 800042c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000434:	6818      	ldr	r0, [r3, #0]
 8000436:	f00b fa71 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800043a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043e:	f008 f9a1 	bl	8008784 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000442:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff feec 	bl	8000224 <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000454:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800045c:	6818      	ldr	r0, [r3, #0]
 800045e:	f00b fa5d 	bl	800b91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000462:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000466:	f008 f98d 	bl	8008784 <HAL_Delay>
}
 800046a:	bf00      	nop
 800046c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	0800ce34 	.word	0x0800ce34
 8000478:	0800ce44 	.word	0x0800ce44
 800047c:	20000128 	.word	0x20000128
 8000480:	0800cec0 	.word	0x0800cec0
 8000484:	0800ce64 	.word	0x0800ce64
 8000488:	0800ced4 	.word	0x0800ced4

0800048c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af02      	add	r7, sp, #8
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	f023 030f 	bic.w	r3, r3, #15
 800049c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	011b      	lsls	r3, r3, #4
 80004a2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
 80004a6:	f043 030c 	orr.w	r3, r3, #12
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ae:	7b7b      	ldrb	r3, [r7, #13]
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	f043 030c 	orr.w	r3, r3, #12
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	f043 0308 	orr.w	r3, r3, #8
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004cc:	bf00      	nop
 80004ce:	4825      	ldr	r0, [pc, #148]	; (8000564 <lcd_send_cmd+0xd8>)
 80004d0:	f009 fd51 	bl	8009f76 <HAL_I2C_GetError>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d0f9      	beq.n	80004ce <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004da:	bf00      	nop
 80004dc:	4821      	ldr	r0, [pc, #132]	; (8000564 <lcd_send_cmd+0xd8>)
 80004de:	f009 fd3d 	bl	8009f5c <HAL_I2C_GetState>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b20      	cmp	r3, #32
 80004e6:	d1f9      	bne.n	80004dc <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e8:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <lcd_send_cmd+0xdc>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d116      	bne.n	800051e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e00f      	b.n	8000516 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	3310      	adds	r3, #16
 80004fa:	443b      	add	r3, r7
 80004fc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f022 0208 	bic.w	r2, r2, #8
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	3310      	adds	r3, #16
 800050a:	443b      	add	r3, r7
 800050c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d9ec      	bls.n	80004f6 <lcd_send_cmd+0x6a>
 800051c:	e015      	b.n	800054a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	73bb      	strb	r3, [r7, #14]
 8000522:	e00f      	b.n	8000544 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	3310      	adds	r3, #16
 8000528:	443b      	add	r3, r7
 800052a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052e:	7bbb      	ldrb	r3, [r7, #14]
 8000530:	f042 0208 	orr.w	r2, r2, #8
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	3310      	adds	r3, #16
 8000538:	443b      	add	r3, r7
 800053a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	3301      	adds	r3, #1
 8000542:	73bb      	strb	r3, [r7, #14]
 8000544:	7bbb      	ldrb	r3, [r7, #14]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d9ec      	bls.n	8000524 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800054a:	f107 0208 	add.w	r2, r7, #8
 800054e:	2364      	movs	r3, #100	; 0x64
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2304      	movs	r3, #4
 8000554:	214e      	movs	r1, #78	; 0x4e
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <lcd_send_cmd+0xd8>)
 8000558:	f009 f8a0 	bl	800969c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200003a8 	.word	0x200003a8
 8000568:	20000222 	.word	0x20000222

0800056c <lcd_send_data>:

void lcd_send_data (char data) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f023 030f 	bic.w	r3, r3, #15
 800057c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000584:	7b7b      	ldrb	r3, [r7, #13]
 8000586:	f043 030d 	orr.w	r3, r3, #13
 800058a:	b2db      	uxtb	r3, r3
 800058c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058e:	7b7b      	ldrb	r3, [r7, #13]
 8000590:	f043 0309 	orr.w	r3, r3, #9
 8000594:	b2db      	uxtb	r3, r3
 8000596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000598:	7b3b      	ldrb	r3, [r7, #12]
 800059a:	f043 030d 	orr.w	r3, r3, #13
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	f043 0309 	orr.w	r3, r3, #9
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005ac:	bf00      	nop
 80005ae:	4825      	ldr	r0, [pc, #148]	; (8000644 <lcd_send_data+0xd8>)
 80005b0:	f009 fce1 	bl	8009f76 <HAL_I2C_GetError>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d0f9      	beq.n	80005ae <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005ba:	bf00      	nop
 80005bc:	4821      	ldr	r0, [pc, #132]	; (8000644 <lcd_send_data+0xd8>)
 80005be:	f009 fccd 	bl	8009f5c <HAL_I2C_GetState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b20      	cmp	r3, #32
 80005c6:	d1f9      	bne.n	80005bc <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <lcd_send_data+0xdc>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d116      	bne.n	80005fe <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e00f      	b.n	80005f6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	3310      	adds	r3, #16
 80005da:	443b      	add	r3, r7
 80005dc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f022 0208 	bic.w	r2, r2, #8
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	3310      	adds	r3, #16
 80005ea:	443b      	add	r3, r7
 80005ec:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	3301      	adds	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d9ec      	bls.n	80005d6 <lcd_send_data+0x6a>
 80005fc:	e015      	b.n	800062a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	73bb      	strb	r3, [r7, #14]
 8000602:	e00f      	b.n	8000624 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	3310      	adds	r3, #16
 8000608:	443b      	add	r3, r7
 800060a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f042 0208 	orr.w	r2, r2, #8
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	3310      	adds	r3, #16
 8000618:	443b      	add	r3, r7
 800061a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	3301      	adds	r3, #1
 8000622:	73bb      	strb	r3, [r7, #14]
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	2b03      	cmp	r3, #3
 8000628:	d9ec      	bls.n	8000604 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2304      	movs	r3, #4
 8000634:	214e      	movs	r1, #78	; 0x4e
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <lcd_send_data+0xd8>)
 8000638:	f009 f830 	bl	800969c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200003a8 	.word	0x200003a8
 8000648:	20000222 	.word	0x20000222

0800064c <lcd_send_string>:

void lcd_send_string (char *str) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000654:	e006      	b.n	8000664 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff84 	bl	800056c <lcd_send_data>
	while (*str) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f4      	bne.n	8000656 <lcd_send_string+0xa>
	}
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	f043 030d 	orr.w	r3, r3, #13
 8000696:	b2db      	uxtb	r3, r3
 8000698:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	f043 0309 	orr.w	r3, r3, #9
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	f043 030d 	orr.w	r3, r3, #13
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006ae:	7b3b      	ldrb	r3, [r7, #12]
 80006b0:	f043 0309 	orr.w	r3, r3, #9
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b8:	bf00      	nop
 80006ba:	4825      	ldr	r0, [pc, #148]	; (8000750 <lcd_send_char+0xd8>)
 80006bc:	f009 fc5b 	bl	8009f76 <HAL_I2C_GetError>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d0f9      	beq.n	80006ba <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c6:	bf00      	nop
 80006c8:	4821      	ldr	r0, [pc, #132]	; (8000750 <lcd_send_char+0xd8>)
 80006ca:	f009 fc47 	bl	8009f5c <HAL_I2C_GetState>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b20      	cmp	r3, #32
 80006d2:	d1f9      	bne.n	80006c8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <lcd_send_char+0xdc>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d116      	bne.n	800070a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	e00f      	b.n	8000702 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3310      	adds	r3, #16
 80006e6:	443b      	add	r3, r7
 80006e8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f022 0208 	bic.w	r2, r2, #8
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	3310      	adds	r3, #16
 80006f6:	443b      	add	r3, r7
 80006f8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	3301      	adds	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d9ec      	bls.n	80006e2 <lcd_send_char+0x6a>
 8000708:	e015      	b.n	8000736 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800070a:	2300      	movs	r3, #0
 800070c:	73bb      	strb	r3, [r7, #14]
 800070e:	e00f      	b.n	8000730 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	3310      	adds	r3, #16
 8000714:	443b      	add	r3, r7
 8000716:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	f042 0208 	orr.w	r2, r2, #8
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	3310      	adds	r3, #16
 8000724:	443b      	add	r3, r7
 8000726:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	3301      	adds	r3, #1
 800072e:	73bb      	strb	r3, [r7, #14]
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d9ec      	bls.n	8000710 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000736:	f107 0208 	add.w	r2, r7, #8
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2304      	movs	r3, #4
 8000740:	214e      	movs	r1, #78	; 0x4e
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <lcd_send_char+0xd8>)
 8000744:	f008 ffaa 	bl	800969c <HAL_I2C_Master_Transmit>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200003a8 	.word	0x200003a8
 8000754:	20000222 	.word	0x20000222

08000758 <lcd_init>:

void lcd_init (void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff fe95 	bl	800048c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000762:	2028      	movs	r0, #40	; 0x28
 8000764:	f7ff fe92 	bl	800048c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000768:	200c      	movs	r0, #12
 800076a:	f7ff fe8f 	bl	800048c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076e:	2080      	movs	r0, #128	; 0x80
 8000770:	f7ff fe8c 	bl	800048c <lcd_send_cmd>
	lcd_backlight(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 f88f 	bl	8000898 <lcd_backlight>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}

0800077e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	460a      	mov	r2, r1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	4613      	mov	r3, r2
 800078c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d106      	bne.n	80007a2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	337f      	adds	r3, #127	; 0x7f
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe76 	bl	800048c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80007a0:	e008      	b.n	80007b4 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d105      	bne.n	80007b4 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	3b41      	subs	r3, #65	; 0x41
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fe6c 	bl	800048c <lcd_send_cmd>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	603a      	str	r2, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	460b      	mov	r3, r1
 80007ca:	71bb      	strb	r3, [r7, #6]
	char buffer[17];
	strncpy(buffer, str, 16);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2210      	movs	r2, #16
 80007d2:	6839      	ldr	r1, [r7, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00b fef8 	bl	800c5ca <strncpy>
	buffer[16] = '\0';
 80007da:	2300      	movs	r3, #0
 80007dc:	773b      	strb	r3, [r7, #28]

	int len = strlen(buffer);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fd1e 	bl	8000224 <strlen>
 80007e8:	4603      	mov	r3, r0
 80007ea:	623b      	str	r3, [r7, #32]
	for (int i = len; i < 16; i++) {
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
 80007f0:	e008      	b.n	8000804 <lcd_print+0x48>
	    buffer[i] = ' ';
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	4413      	add	r3, r2
 80007fa:	2220      	movs	r2, #32
 80007fc:	701a      	strb	r2, [r3, #0]
	for (int i = len; i < 16; i++) {
 80007fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000800:	3301      	adds	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	2b0f      	cmp	r3, #15
 8000808:	ddf3      	ble.n	80007f2 <lcd_print+0x36>
	}
	buffer[16] = '\0';
 800080a:	2300      	movs	r3, #0
 800080c:	773b      	strb	r3, [r7, #28]
	lcd_gotoxy(row, column);
 800080e:	79ba      	ldrb	r2, [r7, #6]
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffb2 	bl	800077e <lcd_gotoxy>
	lcd_send_string(buffer);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff14 	bl	800064c <lcd_send_string>
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	460b      	mov	r3, r1
 8000838:	71bb      	strb	r3, [r7, #6]
 800083a:	4613      	mov	r3, r2
 800083c:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800083e:	79ba      	ldrb	r2, [r7, #6]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff9a 	bl	800077e <lcd_gotoxy>
    lcd_send_char(ch);
 800084a:	797b      	ldrb	r3, [r7, #5]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff13 	bl	8000678 <lcd_send_char>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <lcd_clear>:

void lcd_clear(void) {
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fe14 	bl	800048c <lcd_send_cmd>
    HAL_Delay(2);
 8000864:	2002      	movs	r0, #2
 8000866:	f007 ff8d 	bl	8008784 <HAL_Delay>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	460a      	mov	r2, r1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	4613      	mov	r3, r2
 800087c:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff7a 	bl	800077e <lcd_gotoxy>

    lcd_send_char(' ');
 800088a:	2020      	movs	r0, #32
 800088c:	f7ff fef4 	bl	8000678 <lcd_send_char>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <lcd_backlight+0x20>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fdef 	bl	800048c <lcd_send_cmd>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000222 	.word	0x20000222

080008bc <lcd_cursor>:

void lcd_cursor(int state) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d106      	bne.n	80008d8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80008ca:	200e      	movs	r0, #14
 80008cc:	f7ff fdde 	bl	800048c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80008d0:	200f      	movs	r0, #15
 80008d2:	f7ff fddb 	bl	800048c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80008d6:	e002      	b.n	80008de <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80008d8:	200c      	movs	r0, #12
 80008da:	f7ff fdd7 	bl	800048c <lcd_send_cmd>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <__NVIC_SystemReset+0x24>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008fa:	4904      	ldr	r1, [pc, #16]	; (800090c <__NVIC_SystemReset+0x24>)
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_SystemReset+0x28>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <__NVIC_SystemReset+0x20>
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0004 	.word	0x05fa0004

08000914 <printTemplate>:
int checkSlideVal(int state);
void slideText(const char* text, int startPos, int startLine, int state);

void menu(void);

void printTemplate(int type, int page) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800091e:	20c8      	movs	r0, #200	; 0xc8
 8000920:	f007 ff30 	bl	8008784 <HAL_Delay>
	lcd_clear();
 8000924:	f7ff ff99 	bl	800085a <lcd_clear>
	if(type == 1 && page == 0) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d143      	bne.n	80009b6 <printTemplate+0xa2>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d140      	bne.n	80009b6 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000934:	4a9d      	ldr	r2, [pc, #628]	; (8000bac <printTemplate+0x298>)
 8000936:	2101      	movs	r1, #1
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff ff3f 	bl	80007bc <lcd_print>
		lcd_print(2, 3, "0");
 800093e:	4a9c      	ldr	r2, [pc, #624]	; (8000bb0 <printTemplate+0x29c>)
 8000940:	2103      	movs	r1, #3
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff ff3a 	bl	80007bc <lcd_print>
		lcd_print(2, 4, "1");
 8000948:	4a9a      	ldr	r2, [pc, #616]	; (8000bb4 <printTemplate+0x2a0>)
 800094a:	2104      	movs	r1, #4
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff ff35 	bl	80007bc <lcd_print>
		lcd_print(2, 5, "2");
 8000952:	4a99      	ldr	r2, [pc, #612]	; (8000bb8 <printTemplate+0x2a4>)
 8000954:	2105      	movs	r1, #5
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff ff30 	bl	80007bc <lcd_print>
		lcd_print(2, 6, "3");
 800095c:	4a97      	ldr	r2, [pc, #604]	; (8000bbc <printTemplate+0x2a8>)
 800095e:	2106      	movs	r1, #6
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff2b 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "4");
 8000966:	4a96      	ldr	r2, [pc, #600]	; (8000bc0 <printTemplate+0x2ac>)
 8000968:	2107      	movs	r1, #7
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ff26 	bl	80007bc <lcd_print>
		lcd_print(2, 10, "5");
 8000970:	4a94      	ldr	r2, [pc, #592]	; (8000bc4 <printTemplate+0x2b0>)
 8000972:	210a      	movs	r1, #10
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff21 	bl	80007bc <lcd_print>
		lcd_print(2, 11, "6");
 800097a:	4a93      	ldr	r2, [pc, #588]	; (8000bc8 <printTemplate+0x2b4>)
 800097c:	210b      	movs	r1, #11
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff1c 	bl	80007bc <lcd_print>
		lcd_print(2, 12, "7");
 8000984:	4a91      	ldr	r2, [pc, #580]	; (8000bcc <printTemplate+0x2b8>)
 8000986:	210c      	movs	r1, #12
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff17 	bl	80007bc <lcd_print>
		lcd_print(2, 13, "8");
 800098e:	4a90      	ldr	r2, [pc, #576]	; (8000bd0 <printTemplate+0x2bc>)
 8000990:	210d      	movs	r1, #13
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff12 	bl	80007bc <lcd_print>
		lcd_print(2, 14, "9");
 8000998:	4a8e      	ldr	r2, [pc, #568]	; (8000bd4 <printTemplate+0x2c0>)
 800099a:	210e      	movs	r1, #14
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff ff0d 	bl	80007bc <lcd_print>
		lcd_print(1, 5, machineID);
 80009a2:	4a8d      	ldr	r2, [pc, #564]	; (8000bd8 <printTemplate+0x2c4>)
 80009a4:	2105      	movs	r1, #5
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff ff08 	bl	80007bc <lcd_print>
		lcd_gotoxy(2, 3);
 80009ac:	2103      	movs	r1, #3
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fee5 	bl	800077e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009b4:	e0f5      	b.n	8000ba2 <printTemplate+0x28e>
	} else if(type == 2) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d178      	bne.n	8000aae <printTemplate+0x19a>
		if(page == 1) {
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d114      	bne.n	80009ec <printTemplate+0xd8>
			lcd_clear();
 80009c2:	f7ff ff4a 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	; 0x64
 80009c8:	f007 fedc 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009cc:	4a83      	ldr	r2, [pc, #524]	; (8000bdc <printTemplate+0x2c8>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fef3 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009d6:	4a82      	ldr	r2, [pc, #520]	; (8000be0 <printTemplate+0x2cc>)
 80009d8:	2107      	movs	r1, #7
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff feee 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80009e0:	4a80      	ldr	r2, [pc, #512]	; (8000be4 <printTemplate+0x2d0>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff fee9 	bl	80007bc <lcd_print>
}
 80009ea:	e0da      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 2) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d114      	bne.n	8000a1c <printTemplate+0x108>
			lcd_clear();
 80009f2:	f7ff ff32 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f007 fec4 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009fc:	4a77      	ldr	r2, [pc, #476]	; (8000bdc <printTemplate+0x2c8>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fedb 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a06:	4a76      	ldr	r2, [pc, #472]	; (8000be0 <printTemplate+0x2cc>)
 8000a08:	2107      	movs	r1, #7
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fed6 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a10:	4a75      	ldr	r2, [pc, #468]	; (8000be8 <printTemplate+0x2d4>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff fed1 	bl	80007bc <lcd_print>
}
 8000a1a:	e0c2      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 3) {
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d114      	bne.n	8000a4c <printTemplate+0x138>
			lcd_clear();
 8000a22:	f7ff ff1a 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000a26:	2064      	movs	r0, #100	; 0x64
 8000a28:	f007 feac 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a2c:	4a6b      	ldr	r2, [pc, #428]	; (8000bdc <printTemplate+0x2c8>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fec3 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a36:	4a6a      	ldr	r2, [pc, #424]	; (8000be0 <printTemplate+0x2cc>)
 8000a38:	2107      	movs	r1, #7
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff febe 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a40:	4a6a      	ldr	r2, [pc, #424]	; (8000bec <printTemplate+0x2d8>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	2002      	movs	r0, #2
 8000a46:	f7ff feb9 	bl	80007bc <lcd_print>
}
 8000a4a:	e0aa      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 4) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d114      	bne.n	8000a7c <printTemplate+0x168>
			lcd_clear();
 8000a52:	f7ff ff02 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f007 fe94 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a5c:	4a5f      	ldr	r2, [pc, #380]	; (8000bdc <printTemplate+0x2c8>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff feab 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a66:	4a5e      	ldr	r2, [pc, #376]	; (8000be0 <printTemplate+0x2cc>)
 8000a68:	2107      	movs	r1, #7
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fea6 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a70:	4a5f      	ldr	r2, [pc, #380]	; (8000bf0 <printTemplate+0x2dc>)
 8000a72:	2101      	movs	r1, #1
 8000a74:	2002      	movs	r0, #2
 8000a76:	f7ff fea1 	bl	80007bc <lcd_print>
}
 8000a7a:	e092      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 5) {
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	f040 808f 	bne.w	8000ba2 <printTemplate+0x28e>
			lcd_clear();
 8000a84:	f7ff fee9 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	f007 fe7b 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a8e:	4a53      	ldr	r2, [pc, #332]	; (8000bdc <printTemplate+0x2c8>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fe92 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a98:	4a51      	ldr	r2, [pc, #324]	; (8000be0 <printTemplate+0x2cc>)
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fe8d 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000aa2:	4a54      	ldr	r2, [pc, #336]	; (8000bf4 <printTemplate+0x2e0>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff fe88 	bl	80007bc <lcd_print>
}
 8000aac:	e079      	b.n	8000ba2 <printTemplate+0x28e>
	} else if(type == 3) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d176      	bne.n	8000ba2 <printTemplate+0x28e>
		if(page == 1) {
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d114      	bne.n	8000ae4 <printTemplate+0x1d0>
			lcd_clear();
 8000aba:	f7ff fece 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000abe:	2064      	movs	r0, #100	; 0x64
 8000ac0:	f007 fe60 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	; (8000bf8 <printTemplate+0x2e4>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fe77 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ace:	4a4b      	ldr	r2, [pc, #300]	; (8000bfc <printTemplate+0x2e8>)
 8000ad0:	2107      	movs	r1, #7
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff fe72 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ad8:	4a42      	ldr	r2, [pc, #264]	; (8000be4 <printTemplate+0x2d0>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	2002      	movs	r0, #2
 8000ade:	f7ff fe6d 	bl	80007bc <lcd_print>
}
 8000ae2:	e05e      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 2) {
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d114      	bne.n	8000b14 <printTemplate+0x200>
			lcd_clear();
 8000aea:	f7ff feb6 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000aee:	2064      	movs	r0, #100	; 0x64
 8000af0:	f007 fe48 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000af4:	4a40      	ldr	r2, [pc, #256]	; (8000bf8 <printTemplate+0x2e4>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe5f 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000afe:	4a3f      	ldr	r2, [pc, #252]	; (8000bfc <printTemplate+0x2e8>)
 8000b00:	2107      	movs	r1, #7
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fe5a 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000b08:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <printTemplate+0x2d4>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe55 	bl	80007bc <lcd_print>
}
 8000b12:	e046      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 3) {
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d114      	bne.n	8000b44 <printTemplate+0x230>
			lcd_clear();
 8000b1a:	f7ff fe9e 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f007 fe30 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b24:	4a34      	ldr	r2, [pc, #208]	; (8000bf8 <printTemplate+0x2e4>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fe47 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b2e:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <printTemplate+0x2e8>)
 8000b30:	2107      	movs	r1, #7
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fe42 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000b38:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <printTemplate+0x2d8>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f7ff fe3d 	bl	80007bc <lcd_print>
}
 8000b42:	e02e      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 4) {
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d114      	bne.n	8000b74 <printTemplate+0x260>
			lcd_clear();
 8000b4a:	f7ff fe86 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000b4e:	2064      	movs	r0, #100	; 0x64
 8000b50:	f007 fe18 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <printTemplate+0x2e4>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fe2f 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b5e:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <printTemplate+0x2e8>)
 8000b60:	2107      	movs	r1, #7
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff fe2a 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <printTemplate+0x2dc>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fe25 	bl	80007bc <lcd_print>
}
 8000b72:	e016      	b.n	8000ba2 <printTemplate+0x28e>
		} else if(page == 5) {
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d113      	bne.n	8000ba2 <printTemplate+0x28e>
			lcd_clear();
 8000b7a:	f7ff fe6e 	bl	800085a <lcd_clear>
			HAL_Delay(100);
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f007 fe00 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b84:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <printTemplate+0x2e4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fe17 	bl	80007bc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <printTemplate+0x2e8>)
 8000b90:	2107      	movs	r1, #7
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fe12 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b98:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <printTemplate+0x2e0>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f7ff fe0d 	bl	80007bc <lcd_print>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	0800cf60 	.word	0x0800cf60
 8000bb0:	0800cf68 	.word	0x0800cf68
 8000bb4:	0800cf6c 	.word	0x0800cf6c
 8000bb8:	0800cf70 	.word	0x0800cf70
 8000bbc:	0800cf74 	.word	0x0800cf74
 8000bc0:	0800cf78 	.word	0x0800cf78
 8000bc4:	0800cf7c 	.word	0x0800cf7c
 8000bc8:	0800cf80 	.word	0x0800cf80
 8000bcc:	0800cf84 	.word	0x0800cf84
 8000bd0:	0800cf88 	.word	0x0800cf88
 8000bd4:	0800cf8c 	.word	0x0800cf8c
 8000bd8:	200002bc 	.word	0x200002bc
 8000bdc:	0800cf90 	.word	0x0800cf90
 8000be0:	200002c8 	.word	0x200002c8
 8000be4:	0800cf98 	.word	0x0800cf98
 8000be8:	0800cfac 	.word	0x0800cfac
 8000bec:	0800cfc0 	.word	0x0800cfc0
 8000bf0:	0800cfd4 	.word	0x0800cfd4
 8000bf4:	0800cfe8 	.word	0x0800cfe8
 8000bf8:	0800cffc 	.word	0x0800cffc
 8000bfc:	200002dc 	.word	0x200002dc

08000c00 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <getCharFromCursorPosition+0x1c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000020 	.word	0x20000020

08000c20 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, 20);
		strncpy((char *)&eepromData[passStartPos], wifiPass, 20);
	}
}

void readFromEEPROM(int state) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d121      	bne.n	8000c72 <readFromEEPROM+0x52>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <readFromEEPROM+0x9c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<20; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	e017      	b.n	8000c6a <readFromEEPROM+0x4a>
			if(eepromData[tempSSIDStartPos] != '\0') {
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <readFromEEPROM+0xa0>)
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00f      	beq.n	8000c64 <readFromEEPROM+0x44>
				wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <readFromEEPROM+0xa0>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffd8 	bl	8000c00 <getCharFromCursorPosition>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <readFromEEPROM+0xa4>)
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4413      	add	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]

				tempSSIDStartPos++;
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	3301      	adds	r3, #1
 8000c62:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<20; i++) {
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	3301      	adds	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	2b13      	cmp	r3, #19
 8000c6e:	dde4      	ble.n	8000c3a <readFromEEPROM+0x1a>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
				tempPassStartPos++;
			}
		}
	}
}
 8000c70:	e020      	b.n	8000cb4 <readFromEEPROM+0x94>
		uint8_t tempPassStartPos = passStartPos;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <readFromEEPROM+0xa8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<20; i++) {
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	e017      	b.n	8000cae <readFromEEPROM+0x8e>
			if(eepromData[tempPassStartPos] != '\0') {
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <readFromEEPROM+0xa0>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00f      	beq.n	8000ca8 <readFromEEPROM+0x88>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <readFromEEPROM+0xa0>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffb6 	bl	8000c00 <getCharFromCursorPosition>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <readFromEEPROM+0xac>)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
				tempPassStartPos++;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<20; i++) {
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3301      	adds	r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2b13      	cmp	r3, #19
 8000cb2:	dde4      	ble.n	8000c7e <readFromEEPROM+0x5e>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	20000224 	.word	0x20000224
 8000cc4:	200002c8 	.word	0x200002c8
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	200002dc 	.word	0x200002dc

08000cd0 <takeMachineID>:

void takeMachineID(int state) {
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fdef 	bl	80008bc <lcd_cursor>

    int cursorPosition = 3;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d104      	bne.n	8000cfa <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4899      	ldr	r0, [pc, #612]	; (8000f5c <takeMachineID+0x28c>)
 8000cf6:	f00b fc7b 	bl	800c5f0 <memset>
    }
    HAL_Delay(100);
 8000cfa:	2064      	movs	r0, #100	; 0x64
 8000cfc:	f007 fd42 	bl	8008784 <HAL_Delay>

    printTemplate(1, 0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fe06 	bl	8000914 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4895      	ldr	r0, [pc, #596]	; (8000f60 <takeMachineID+0x290>)
 8000d0c:	f008 fb0a 	bl	8009324 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d137      	bne.n	8000d86 <takeMachineID+0xb6>
        	lcd_cursor(0);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fdd0 	bl	80008bc <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000d1c:	4b8f      	ldr	r3, [pc, #572]	; (8000f5c <takeMachineID+0x28c>)
 8000d1e:	7adb      	ldrb	r3, [r3, #11]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d110      	bne.n	8000d46 <takeMachineID+0x76>
        		lcd_clear();
 8000d24:	f7ff fd99 	bl	800085a <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000d28:	4a8e      	ldr	r2, [pc, #568]	; (8000f64 <takeMachineID+0x294>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fd45 	bl	80007bc <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000d32:	4a8d      	ldr	r2, [pc, #564]	; (8000f68 <takeMachineID+0x298>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fd40 	bl	80007bc <lcd_print>
        		HAL_Delay(1200);
 8000d3c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000d40:	f007 fd20 	bl	8008784 <HAL_Delay>
        		goto mainSection;
 8000d44:	e7c8      	b.n	8000cd8 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000d46:	4b89      	ldr	r3, [pc, #548]	; (8000f6c <takeMachineID+0x29c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a89      	ldr	r2, [pc, #548]	; (8000f70 <takeMachineID+0x2a0>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a83      	ldr	r2, [pc, #524]	; (8000f5c <takeMachineID+0x28c>)
 8000d50:	461c      	mov	r4, r3
 8000d52:	4613      	mov	r3, r2
 8000d54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d56:	6020      	str	r0, [r4, #0]
 8000d58:	6061      	str	r1, [r4, #4]
 8000d5a:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000d5c:	20c8      	movs	r0, #200	; 0xc8
 8000d5e:	f007 fd11 	bl	8008784 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000d62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	236e      	movs	r3, #110	; 0x6e
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	4b80      	ldr	r3, [pc, #512]	; (8000f70 <takeMachineID+0x2a0>)
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	236e      	movs	r3, #110	; 0x6e
 8000d72:	2200      	movs	r2, #0
 8000d74:	21a0      	movs	r1, #160	; 0xa0
 8000d76:	487f      	ldr	r0, [pc, #508]	; (8000f74 <takeMachineID+0x2a4>)
 8000d78:	f008 fd8e 	bl	8009898 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d80:	f007 fd00 	bl	8008784 <HAL_Delay>

            break;
 8000d84:	e0e5      	b.n	8000f52 <takeMachineID+0x282>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d86:	2101      	movs	r1, #1
 8000d88:	4875      	ldr	r0, [pc, #468]	; (8000f60 <takeMachineID+0x290>)
 8000d8a:	f008 facb 	bl	8009324 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d112      	bne.n	8000dba <takeMachineID+0xea>
        	if(cursorPosition == 7) {
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	d102      	bne.n	8000da0 <takeMachineID+0xd0>
        		cursorPosition = 10;
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e008      	b.n	8000db2 <takeMachineID+0xe2>
        	} else if (cursorPosition == 14) {
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2b0e      	cmp	r3, #14
 8000da4:	d102      	bne.n	8000dac <takeMachineID+0xdc>
                cursorPosition = 3;
 8000da6:	2303      	movs	r3, #3
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e002      	b.n	8000db2 <takeMachineID+0xe2>
            } else {
            	cursorPosition++;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000db2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000db6:	f007 fce5 	bl	8008784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000dba:	2108      	movs	r1, #8
 8000dbc:	486e      	ldr	r0, [pc, #440]	; (8000f78 <takeMachineID+0x2a8>)
 8000dbe:	f008 fab1 	bl	8009324 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d112      	bne.n	8000dee <takeMachineID+0x11e>
            if (cursorPosition == 3) {
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d102      	bne.n	8000dd4 <takeMachineID+0x104>
                cursorPosition = 14;
 8000dce:	230e      	movs	r3, #14
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e008      	b.n	8000de6 <takeMachineID+0x116>
            } else if(cursorPosition == 10) {
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b0a      	cmp	r3, #10
 8000dd8:	d102      	bne.n	8000de0 <takeMachineID+0x110>
            	cursorPosition = 7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e002      	b.n	8000de6 <takeMachineID+0x116>
            } else {
            	cursorPosition--;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000de6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dea:	f007 fccb 	bl	8008784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000dee:	2102      	movs	r1, #2
 8000df0:	485b      	ldr	r0, [pc, #364]	; (8000f60 <takeMachineID+0x290>)
 8000df2:	f008 fa97 	bl	8009324 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d16c      	bne.n	8000ed6 <takeMachineID+0x206>
        	if(cursorPosition == 3) {
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d105      	bne.n	8000e0e <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '0';
 8000e02:	4a56      	ldr	r2, [pc, #344]	; (8000f5c <takeMachineID+0x28c>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4413      	add	r3, r2
 8000e08:	2230      	movs	r2, #48	; 0x30
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e04f      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 4) {
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d105      	bne.n	8000e20 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '1';
 8000e14:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <takeMachineID+0x28c>)
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4413      	add	r3, r2
 8000e1a:	2231      	movs	r2, #49	; 0x31
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e046      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 5) {
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b05      	cmp	r3, #5
 8000e24:	d105      	bne.n	8000e32 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '2';
 8000e26:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <takeMachineID+0x28c>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2232      	movs	r2, #50	; 0x32
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e03d      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 6) {
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d105      	bne.n	8000e44 <takeMachineID+0x174>
        		machineID[machineIDLoc] = '3';
 8000e38:	4a48      	ldr	r2, [pc, #288]	; (8000f5c <takeMachineID+0x28c>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	2233      	movs	r2, #51	; 0x33
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e034      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 7) {
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d105      	bne.n	8000e56 <takeMachineID+0x186>
        		machineID[machineIDLoc] = '4';
 8000e4a:	4a44      	ldr	r2, [pc, #272]	; (8000f5c <takeMachineID+0x28c>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	2234      	movs	r2, #52	; 0x34
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e02b      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 10) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b0a      	cmp	r3, #10
 8000e5a:	d105      	bne.n	8000e68 <takeMachineID+0x198>
        		machineID[machineIDLoc] = '5';
 8000e5c:	4a3f      	ldr	r2, [pc, #252]	; (8000f5c <takeMachineID+0x28c>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4413      	add	r3, r2
 8000e62:	2235      	movs	r2, #53	; 0x35
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e022      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 11) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b0b      	cmp	r3, #11
 8000e6c:	d105      	bne.n	8000e7a <takeMachineID+0x1aa>
        		machineID[machineIDLoc] = '6';
 8000e6e:	4a3b      	ldr	r2, [pc, #236]	; (8000f5c <takeMachineID+0x28c>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4413      	add	r3, r2
 8000e74:	2236      	movs	r2, #54	; 0x36
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e019      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 12) {
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b0c      	cmp	r3, #12
 8000e7e:	d105      	bne.n	8000e8c <takeMachineID+0x1bc>
        		machineID[machineIDLoc] = '7';
 8000e80:	4a36      	ldr	r2, [pc, #216]	; (8000f5c <takeMachineID+0x28c>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4413      	add	r3, r2
 8000e86:	2237      	movs	r2, #55	; 0x37
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e010      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 13) {
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b0d      	cmp	r3, #13
 8000e90:	d105      	bne.n	8000e9e <takeMachineID+0x1ce>
        		machineID[machineIDLoc] = '8';
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <takeMachineID+0x28c>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4413      	add	r3, r2
 8000e98:	2238      	movs	r2, #56	; 0x38
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <takeMachineID+0x1de>
        	} else if(cursorPosition == 14) {
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b0e      	cmp	r3, #14
 8000ea2:	d104      	bne.n	8000eae <takeMachineID+0x1de>
        		machineID[machineIDLoc] = '9';
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <takeMachineID+0x28c>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2239      	movs	r2, #57	; 0x39
 8000eac:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b2d9      	uxtb	r1, r3
 8000eb2:	4a2a      	ldr	r2, [pc, #168]	; (8000f5c <takeMachineID+0x28c>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fcb5 	bl	800082c <lcd_print_char>

        	writeLoc++;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000ece:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000ed2:	f007 fc57 	bl	8008784 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4821      	ldr	r0, [pc, #132]	; (8000f60 <takeMachineID+0x290>)
 8000eda:	f008 fa23 	bl	8009324 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d12f      	bne.n	8000f44 <takeMachineID+0x274>
            if(strlen(machineID) >= 1) {
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <takeMachineID+0x28c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d027      	beq.n	8000f3c <takeMachineID+0x26c>

                machineID[machineIDLoc] = '\0';
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <takeMachineID+0x28c>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3304      	adds	r3, #4
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff fcb4 	bl	800086e <lcd_delete_char>
                HAL_Delay(50);
 8000f06:	2032      	movs	r0, #50	; 0x32
 8000f08:	f007 fc3c 	bl	8008784 <HAL_Delay>

                if(writeLoc > 5) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	dd03      	ble.n	8000f1a <takeMachineID+0x24a>
                	writeLoc--;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e004      	b.n	8000f24 <takeMachineID+0x254>
                } else if(writeLoc < 5) {
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	dc01      	bgt.n	8000f24 <takeMachineID+0x254>
                	writeLoc = 5;
 8000f20:	2305      	movs	r3, #5
 8000f22:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	dd03      	ble.n	8000f32 <takeMachineID+0x262>
                	machineIDLoc--;
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	e004      	b.n	8000f3c <takeMachineID+0x26c>
                } else if(machineIDLoc < 0) {
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da01      	bge.n	8000f3c <takeMachineID+0x26c>
                	machineIDLoc = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000f3c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f40:	f007 fc20 	bl	8008784 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f7ff fc17 	bl	800077e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f50:	e6da      	b.n	8000d08 <takeMachineID+0x38>
    }
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200002bc 	.word	0x200002bc
 8000f60:	40010800 	.word	0x40010800
 8000f64:	0800d004 	.word	0x0800d004
 8000f68:	0800d018 	.word	0x0800d018
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000224 	.word	0x20000224
 8000f74:	200003a8 	.word	0x200003a8
 8000f78:	40011000 	.word	0x40011000

08000f7c <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fc99 	bl	80008bc <lcd_cursor>

    if(state == 0) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000f90:	2214      	movs	r2, #20
 8000f92:	2100      	movs	r1, #0
 8000f94:	4892      	ldr	r0, [pc, #584]	; (80011e0 <takeWifiSSID+0x264>)
 8000f96:	f00b fb2b 	bl	800c5f0 <memset>
    }

    int realCharPos = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000f9e:	4b91      	ldr	r3, [pc, #580]	; (80011e4 <takeWifiSSID+0x268>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
    page = 1;
 8000fa4:	4b90      	ldr	r3, [pc, #576]	; (80011e8 <takeWifiSSID+0x26c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	60fb      	str	r3, [r7, #12]

    uint8_t characterSavePos = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	72fb      	strb	r3, [r7, #11]

    printTemplate(2, 1);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff fcab 	bl	8000914 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	488a      	ldr	r0, [pc, #552]	; (80011ec <takeWifiSSID+0x270>)
 8000fc2:	f008 f9af 	bl	8009324 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d13c      	bne.n	8001046 <takeWifiSSID+0xca>
            lcd_cursor(0);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fc75 	bl	80008bc <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000fd2:	4883      	ldr	r0, [pc, #524]	; (80011e0 <takeWifiSSID+0x264>)
 8000fd4:	f7ff f926 	bl	8000224 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b14      	cmp	r3, #20
 8000fdc:	d910      	bls.n	8001000 <takeWifiSSID+0x84>
                lcd_clear();
 8000fde:	f7ff fc3c 	bl	800085a <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000fe2:	4a83      	ldr	r2, [pc, #524]	; (80011f0 <takeWifiSSID+0x274>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff fbe8 	bl	80007bc <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000fec:	4a81      	ldr	r2, [pc, #516]	; (80011f4 <takeWifiSSID+0x278>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f7ff fbe3 	bl	80007bc <lcd_print>
                HAL_Delay(1200);
 8000ff6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000ffa:	f007 fbc3 	bl	8008784 <HAL_Delay>
                goto mainSSIDSection;
 8000ffe:	e7c1      	b.n	8000f84 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, 20);
 8001000:	4b7d      	ldr	r3, [pc, #500]	; (80011f8 <takeWifiSSID+0x27c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a7d      	ldr	r2, [pc, #500]	; (80011fc <takeWifiSSID+0x280>)
 8001006:	4413      	add	r3, r2
 8001008:	4a7d      	ldr	r2, [pc, #500]	; (8001200 <takeWifiSSID+0x284>)
 800100a:	461d      	mov	r5, r3
 800100c:	4614      	mov	r4, r2
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	6028      	str	r0, [r5, #0]
 8001012:	6069      	str	r1, [r5, #4]
 8001014:	60aa      	str	r2, [r5, #8]
 8001016:	60eb      	str	r3, [r5, #12]
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	6128      	str	r0, [r5, #16]
            HAL_Delay(250);
 800101c:	20fa      	movs	r0, #250	; 0xfa
 800101e:	f007 fbb1 	bl	8008784 <HAL_Delay>
            //memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001022:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	236e      	movs	r3, #110	; 0x6e
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	4b73      	ldr	r3, [pc, #460]	; (80011fc <takeWifiSSID+0x280>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	236e      	movs	r3, #110	; 0x6e
 8001032:	2200      	movs	r2, #0
 8001034:	21a0      	movs	r1, #160	; 0xa0
 8001036:	4873      	ldr	r0, [pc, #460]	; (8001204 <takeWifiSSID+0x288>)
 8001038:	f008 fc2e 	bl	8009898 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800103c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001040:	f007 fba0 	bl	8008784 <HAL_Delay>

            break;
 8001044:	e158      	b.n	80012f8 <takeWifiSSID+0x37c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001046:	2101      	movs	r1, #1
 8001048:	4868      	ldr	r0, [pc, #416]	; (80011ec <takeWifiSSID+0x270>)
 800104a:	f008 f96b 	bl	8009324 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d166      	bne.n	8001122 <takeWifiSSID+0x1a6>
        	realCharPos++;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2b50      	cmp	r3, #80	; 0x50
 800105e:	dd01      	ble.n	8001064 <takeWifiSSID+0xe8>
        		realCharPos = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001064:	4b5f      	ldr	r3, [pc, #380]	; (80011e4 <takeWifiSSID+0x268>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d152      	bne.n	8001112 <takeWifiSSID+0x196>
            	if(page == 1) {
 800106c:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <takeWifiSSID+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10c      	bne.n	800108e <takeWifiSSID+0x112>
            		cursorPosition = 1;
 8001074:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <takeWifiSSID+0x268>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
            		page++;
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <takeWifiSSID+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a59      	ldr	r2, [pc, #356]	; (80011e8 <takeWifiSSID+0x26c>)
 8001082:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8001084:	2102      	movs	r1, #2
 8001086:	2002      	movs	r0, #2
 8001088:	f7ff fc44 	bl	8000914 <printTemplate>
 800108c:	e046      	b.n	800111c <takeWifiSSID+0x1a0>
            	} else if(page == 2) {
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <takeWifiSSID+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d10c      	bne.n	80010b0 <takeWifiSSID+0x134>
            		cursorPosition = 1;
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <takeWifiSSID+0x268>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
            		page++;
 800109c:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <takeWifiSSID+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <takeWifiSSID+0x26c>)
 80010a4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80010a6:	2103      	movs	r1, #3
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fc33 	bl	8000914 <printTemplate>
 80010ae:	e035      	b.n	800111c <takeWifiSSID+0x1a0>
            	} else if(page == 3) {
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <takeWifiSSID+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d10c      	bne.n	80010d2 <takeWifiSSID+0x156>
            		cursorPosition = 1;
 80010b8:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <takeWifiSSID+0x268>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
            		page++;
 80010be:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <takeWifiSSID+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <takeWifiSSID+0x26c>)
 80010c6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80010c8:	2104      	movs	r1, #4
 80010ca:	2002      	movs	r0, #2
 80010cc:	f7ff fc22 	bl	8000914 <printTemplate>
 80010d0:	e024      	b.n	800111c <takeWifiSSID+0x1a0>
            	} else if(page == 4) {
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <takeWifiSSID+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d10c      	bne.n	80010f4 <takeWifiSSID+0x178>
            		cursorPosition = 1;
 80010da:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <takeWifiSSID+0x268>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
            		page++;
 80010e0:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <takeWifiSSID+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <takeWifiSSID+0x26c>)
 80010e8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80010ea:	2105      	movs	r1, #5
 80010ec:	2002      	movs	r0, #2
 80010ee:	f7ff fc11 	bl	8000914 <printTemplate>
 80010f2:	e013      	b.n	800111c <takeWifiSSID+0x1a0>
            	} else if(page == 5) {
 80010f4:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <takeWifiSSID+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d10f      	bne.n	800111c <takeWifiSSID+0x1a0>
            		cursorPosition = 1;
 80010fc:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <takeWifiSSID+0x268>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <takeWifiSSID+0x26c>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001108:	2101      	movs	r1, #1
 800110a:	2002      	movs	r0, #2
 800110c:	f7ff fc02 	bl	8000914 <printTemplate>
 8001110:	e004      	b.n	800111c <takeWifiSSID+0x1a0>
            	}
            } else {
            	cursorPosition++;
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <takeWifiSSID+0x268>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <takeWifiSSID+0x268>)
 800111a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800111c:	20fa      	movs	r0, #250	; 0xfa
 800111e:	f007 fb31 	bl	8008784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001122:	2108      	movs	r1, #8
 8001124:	4838      	ldr	r0, [pc, #224]	; (8001208 <takeWifiSSID+0x28c>)
 8001126:	f008 f8fd 	bl	8009324 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d175      	bne.n	800121c <takeWifiSSID+0x2a0>
        	realCharPos--;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3b01      	subs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dc01      	bgt.n	8001140 <takeWifiSSID+0x1c4>
        		realCharPos = 80;
 800113c:	2350      	movs	r3, #80	; 0x50
 800113e:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <takeWifiSSID+0x268>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d161      	bne.n	800120c <takeWifiSSID+0x290>
            	if(page == 1) {
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <takeWifiSSID+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <takeWifiSSID+0x1ea>
            		cursorPosition = 16;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <takeWifiSSID+0x268>)
 8001152:	2210      	movs	r2, #16
 8001154:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <takeWifiSSID+0x26c>)
 8001158:	2205      	movs	r2, #5
 800115a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 800115c:	2105      	movs	r1, #5
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff fbd8 	bl	8000914 <printTemplate>
 8001164:	e057      	b.n	8001216 <takeWifiSSID+0x29a>
            	} else if(page == 2) {
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <takeWifiSSID+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d10a      	bne.n	8001184 <takeWifiSSID+0x208>
            		cursorPosition = 16;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <takeWifiSSID+0x268>)
 8001170:	2210      	movs	r2, #16
 8001172:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <takeWifiSSID+0x26c>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800117a:	2101      	movs	r1, #1
 800117c:	2002      	movs	r0, #2
 800117e:	f7ff fbc9 	bl	8000914 <printTemplate>
 8001182:	e048      	b.n	8001216 <takeWifiSSID+0x29a>
            	} else if(page == 3) {
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <takeWifiSSID+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d10a      	bne.n	80011a2 <takeWifiSSID+0x226>
            		cursorPosition = 16;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <takeWifiSSID+0x268>)
 800118e:	2210      	movs	r2, #16
 8001190:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <takeWifiSSID+0x26c>)
 8001194:	2202      	movs	r2, #2
 8001196:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8001198:	2102      	movs	r1, #2
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff fbba 	bl	8000914 <printTemplate>
 80011a0:	e039      	b.n	8001216 <takeWifiSSID+0x29a>
            	} else if(page == 4) {
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <takeWifiSSID+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d10a      	bne.n	80011c0 <takeWifiSSID+0x244>
            		cursorPosition = 16;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <takeWifiSSID+0x268>)
 80011ac:	2210      	movs	r2, #16
 80011ae:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <takeWifiSSID+0x26c>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80011b6:	2103      	movs	r1, #3
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff fbab 	bl	8000914 <printTemplate>
 80011be:	e02a      	b.n	8001216 <takeWifiSSID+0x29a>
            	} else if(page == 5) {
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <takeWifiSSID+0x26c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d126      	bne.n	8001216 <takeWifiSSID+0x29a>
            		cursorPosition = 16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <takeWifiSSID+0x268>)
 80011ca:	2210      	movs	r2, #16
 80011cc:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <takeWifiSSID+0x26c>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80011d4:	2104      	movs	r1, #4
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff fb9c 	bl	8000914 <printTemplate>
 80011dc:	e01b      	b.n	8001216 <takeWifiSSID+0x29a>
 80011de:	bf00      	nop
 80011e0:	200002c8 	.word	0x200002c8
 80011e4:	200000a4 	.word	0x200000a4
 80011e8:	200000a8 	.word	0x200000a8
 80011ec:	40010800 	.word	0x40010800
 80011f0:	0800d02c 	.word	0x0800d02c
 80011f4:	0800d040 	.word	0x0800d040
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000224 	.word	0x20000224
 8001200:	200002f0 	.word	0x200002f0
 8001204:	200003a8 	.word	0x200003a8
 8001208:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800120c:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <takeWifiSSID+0x384>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a3b      	ldr	r2, [pc, #236]	; (8001300 <takeWifiSSID+0x384>)
 8001214:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001216:	20fa      	movs	r0, #250	; 0xfa
 8001218:	f007 fab4 	bl	8008784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800121c:	2102      	movs	r1, #2
 800121e:	4839      	ldr	r0, [pc, #228]	; (8001304 <takeWifiSSID+0x388>)
 8001220:	f008 f880 	bl	8009324 <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d128      	bne.n	800127c <takeWifiSSID+0x300>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3b01      	subs	r3, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fce6 	bl	8000c00 <getCharFromCursorPosition>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	4a33      	ldr	r2, [pc, #204]	; (8001308 <takeWifiSSID+0x38c>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4413      	add	r3, r2
 800123e:	460a      	mov	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[characterSavePos] = realCharPos - 1;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	3a01      	subs	r2, #1
 800124a:	b2d1      	uxtb	r1, r2
 800124c:	4a2f      	ldr	r2, [pc, #188]	; (800130c <takeWifiSSID+0x390>)
 800124e:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	b2d9      	uxtb	r1, r3
 8001254:	4a2c      	ldr	r2, [pc, #176]	; (8001308 <takeWifiSSID+0x38c>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fae4 	bl	800082c <lcd_print_char>

            writeLoc++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
            characterSavePos++;
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	3301      	adds	r3, #1
 8001274:	72fb      	strb	r3, [r7, #11]

            HAL_Delay(250);
 8001276:	20fa      	movs	r0, #250	; 0xfa
 8001278:	f007 fa84 	bl	8008784 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800127c:	2104      	movs	r1, #4
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <takeWifiSSID+0x388>)
 8001280:	f008 f850 	bl	8009324 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d12e      	bne.n	80012e8 <takeWifiSSID+0x36c>
        	if(strlen(wifiSSID) >= 1) {
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <takeWifiSSID+0x38c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d027      	beq.n	80012e2 <takeWifiSSID+0x366>
        		wifiSSID[wifiNameLoc] = '\0';
 8001292:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <takeWifiSSID+0x38c>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4413      	add	r3, r2
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3306      	adds	r3, #6
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4619      	mov	r1, r3
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fae1 	bl	800086e <lcd_delete_char>
        		HAL_Delay(50);
 80012ac:	2032      	movs	r0, #50	; 0x32
 80012ae:	f007 fa69 	bl	8008784 <HAL_Delay>
        		if(writeLoc > 7) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b07      	cmp	r3, #7
 80012b6:	dd03      	ble.n	80012c0 <takeWifiSSID+0x344>
        			writeLoc--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e004      	b.n	80012ca <takeWifiSSID+0x34e>
        		} else if(writeLoc < 7) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	dc01      	bgt.n	80012ca <takeWifiSSID+0x34e>
        			writeLoc = 7;
 80012c6:	2307      	movs	r3, #7
 80012c8:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd03      	ble.n	80012d8 <takeWifiSSID+0x35c>
        			wifiNameLoc--;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	e004      	b.n	80012e2 <takeWifiSSID+0x366>
        		} else if(wifiNameLoc < 0) {
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da01      	bge.n	80012e2 <takeWifiSSID+0x366>
        			wifiNameLoc = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80012e2:	20fa      	movs	r0, #250	; 0xfa
 80012e4:	f007 fa4e 	bl	8008784 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <takeWifiSSID+0x384>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff fa44 	bl	800077e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012f6:	e662      	b.n	8000fbe <takeWifiSSID+0x42>
    }
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001300:	200000a4 	.word	0x200000a4
 8001304:	40010800 	.word	0x40010800
 8001308:	200002c8 	.word	0x200002c8
 800130c:	200002f0 	.word	0x200002f0

08001310 <takeWifiPass>:

void takeWifiPass(int state) {
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff facf 	bl	80008bc <lcd_cursor>

    if(state == 0) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d104      	bne.n	800132e <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001324:	2214      	movs	r2, #20
 8001326:	2100      	movs	r1, #0
 8001328:	4892      	ldr	r0, [pc, #584]	; (8001574 <takeWifiPass+0x264>)
 800132a:	f00b f961 	bl	800c5f0 <memset>
    }

    int realCharPos = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <takeWifiPass+0x268>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
    page = 1;
 8001338:	4b90      	ldr	r3, [pc, #576]	; (800157c <takeWifiPass+0x26c>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001342:	2307      	movs	r3, #7
 8001344:	60fb      	str	r3, [r7, #12]

    uint8_t characterSavePos = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	72fb      	strb	r3, [r7, #11]

    printTemplate(3, 1);
 800134a:	2101      	movs	r1, #1
 800134c:	2003      	movs	r0, #3
 800134e:	f7ff fae1 	bl	8000914 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001352:	2108      	movs	r1, #8
 8001354:	488a      	ldr	r0, [pc, #552]	; (8001580 <takeWifiPass+0x270>)
 8001356:	f007 ffe5 	bl	8009324 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d13c      	bne.n	80013da <takeWifiPass+0xca>
            lcd_cursor(0);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff faab 	bl	80008bc <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001366:	4883      	ldr	r0, [pc, #524]	; (8001574 <takeWifiPass+0x264>)
 8001368:	f7fe ff5c 	bl	8000224 <strlen>
 800136c:	4603      	mov	r3, r0
 800136e:	2b14      	cmp	r3, #20
 8001370:	d910      	bls.n	8001394 <takeWifiPass+0x84>
                lcd_clear();
 8001372:	f7ff fa72 	bl	800085a <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001376:	4a83      	ldr	r2, [pc, #524]	; (8001584 <takeWifiPass+0x274>)
 8001378:	2101      	movs	r1, #1
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fa1e 	bl	80007bc <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8001380:	4a81      	ldr	r2, [pc, #516]	; (8001588 <takeWifiPass+0x278>)
 8001382:	2101      	movs	r1, #1
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff fa19 	bl	80007bc <lcd_print>
                HAL_Delay(1200);
 800138a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800138e:	f007 f9f9 	bl	8008784 <HAL_Delay>
                goto mainPASSSection;
 8001392:	e7c1      	b.n	8001318 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, 20);
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <takeWifiPass+0x27c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a7d      	ldr	r2, [pc, #500]	; (8001590 <takeWifiPass+0x280>)
 800139a:	4413      	add	r3, r2
 800139c:	4a7d      	ldr	r2, [pc, #500]	; (8001594 <takeWifiPass+0x284>)
 800139e:	461d      	mov	r5, r3
 80013a0:	4614      	mov	r4, r2
 80013a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a4:	6028      	str	r0, [r5, #0]
 80013a6:	6069      	str	r1, [r5, #4]
 80013a8:	60aa      	str	r2, [r5, #8]
 80013aa:	60eb      	str	r3, [r5, #12]
 80013ac:	6820      	ldr	r0, [r4, #0]
 80013ae:	6128      	str	r0, [r5, #16]
            HAL_Delay(250);
 80013b0:	20fa      	movs	r0, #250	; 0xfa
 80013b2:	f007 f9e7 	bl	8008784 <HAL_Delay>
            //memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80013b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	236e      	movs	r3, #110	; 0x6e
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	4b73      	ldr	r3, [pc, #460]	; (8001590 <takeWifiPass+0x280>)
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	236e      	movs	r3, #110	; 0x6e
 80013c6:	2200      	movs	r2, #0
 80013c8:	21a0      	movs	r1, #160	; 0xa0
 80013ca:	4873      	ldr	r0, [pc, #460]	; (8001598 <takeWifiPass+0x288>)
 80013cc:	f008 fa64 	bl	8009898 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80013d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d4:	f007 f9d6 	bl	8008784 <HAL_Delay>

            break;
 80013d8:	e158      	b.n	800168c <takeWifiPass+0x37c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80013da:	2101      	movs	r1, #1
 80013dc:	4868      	ldr	r0, [pc, #416]	; (8001580 <takeWifiPass+0x270>)
 80013de:	f007 ffa1 	bl	8009324 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d166      	bne.n	80014b6 <takeWifiPass+0x1a6>
        	realCharPos++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b50      	cmp	r3, #80	; 0x50
 80013f2:	dd01      	ble.n	80013f8 <takeWifiPass+0xe8>
        	    realCharPos = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80013f8:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <takeWifiPass+0x268>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	d152      	bne.n	80014a6 <takeWifiPass+0x196>
            	if(page == 1) {
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <takeWifiPass+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d10c      	bne.n	8001422 <takeWifiPass+0x112>
            		cursorPosition = 1;
 8001408:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <takeWifiPass+0x268>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
            		page++;
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <takeWifiPass+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a59      	ldr	r2, [pc, #356]	; (800157c <takeWifiPass+0x26c>)
 8001416:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001418:	2102      	movs	r1, #2
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff fa7a 	bl	8000914 <printTemplate>
 8001420:	e046      	b.n	80014b0 <takeWifiPass+0x1a0>
            	} else if(page == 2) {
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <takeWifiPass+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d10c      	bne.n	8001444 <takeWifiPass+0x134>
            		cursorPosition = 1;
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <takeWifiPass+0x268>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
            		page++;
 8001430:	4b52      	ldr	r3, [pc, #328]	; (800157c <takeWifiPass+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a51      	ldr	r2, [pc, #324]	; (800157c <takeWifiPass+0x26c>)
 8001438:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800143a:	2103      	movs	r1, #3
 800143c:	2003      	movs	r0, #3
 800143e:	f7ff fa69 	bl	8000914 <printTemplate>
 8001442:	e035      	b.n	80014b0 <takeWifiPass+0x1a0>
            	} else if(page == 3) {
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <takeWifiPass+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d10c      	bne.n	8001466 <takeWifiPass+0x156>
            		cursorPosition = 1;
 800144c:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <takeWifiPass+0x268>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
            		page++;
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <takeWifiPass+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a48      	ldr	r2, [pc, #288]	; (800157c <takeWifiPass+0x26c>)
 800145a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800145c:	2104      	movs	r1, #4
 800145e:	2003      	movs	r0, #3
 8001460:	f7ff fa58 	bl	8000914 <printTemplate>
 8001464:	e024      	b.n	80014b0 <takeWifiPass+0x1a0>
            	} else if(page == 4) {
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <takeWifiPass+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d10c      	bne.n	8001488 <takeWifiPass+0x178>
            		cursorPosition = 1;
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <takeWifiPass+0x268>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
            		page++;
 8001474:	4b41      	ldr	r3, [pc, #260]	; (800157c <takeWifiPass+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a40      	ldr	r2, [pc, #256]	; (800157c <takeWifiPass+0x26c>)
 800147c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 800147e:	2105      	movs	r1, #5
 8001480:	2003      	movs	r0, #3
 8001482:	f7ff fa47 	bl	8000914 <printTemplate>
 8001486:	e013      	b.n	80014b0 <takeWifiPass+0x1a0>
            	} else if(page == 5) {
 8001488:	4b3c      	ldr	r3, [pc, #240]	; (800157c <takeWifiPass+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10f      	bne.n	80014b0 <takeWifiPass+0x1a0>
            		cursorPosition = 1;
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <takeWifiPass+0x268>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <takeWifiPass+0x26c>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800149c:	2101      	movs	r1, #1
 800149e:	2003      	movs	r0, #3
 80014a0:	f7ff fa38 	bl	8000914 <printTemplate>
 80014a4:	e004      	b.n	80014b0 <takeWifiPass+0x1a0>
            	}
            } else {
            	cursorPosition++;
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <takeWifiPass+0x268>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a32      	ldr	r2, [pc, #200]	; (8001578 <takeWifiPass+0x268>)
 80014ae:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80014b0:	20fa      	movs	r0, #250	; 0xfa
 80014b2:	f007 f967 	bl	8008784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80014b6:	2108      	movs	r1, #8
 80014b8:	4838      	ldr	r0, [pc, #224]	; (800159c <takeWifiPass+0x28c>)
 80014ba:	f007 ff33 	bl	8009324 <HAL_GPIO_ReadPin>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d175      	bne.n	80015b0 <takeWifiPass+0x2a0>
        	realCharPos--;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dc01      	bgt.n	80014d4 <takeWifiPass+0x1c4>
        	    realCharPos = 80;
 80014d0:	2350      	movs	r3, #80	; 0x50
 80014d2:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <takeWifiPass+0x268>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d161      	bne.n	80015a0 <takeWifiPass+0x290>
            	if(page == 1) {
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <takeWifiPass+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10a      	bne.n	80014fa <takeWifiPass+0x1ea>
            		cursorPosition = 16;
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <takeWifiPass+0x268>)
 80014e6:	2210      	movs	r2, #16
 80014e8:	601a      	str	r2, [r3, #0]
            		page = 5;
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <takeWifiPass+0x26c>)
 80014ec:	2205      	movs	r2, #5
 80014ee:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80014f0:	2105      	movs	r1, #5
 80014f2:	2003      	movs	r0, #3
 80014f4:	f7ff fa0e 	bl	8000914 <printTemplate>
 80014f8:	e057      	b.n	80015aa <takeWifiPass+0x29a>
            	} else if(page == 2) {
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <takeWifiPass+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d10a      	bne.n	8001518 <takeWifiPass+0x208>
            		cursorPosition = 16;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <takeWifiPass+0x268>)
 8001504:	2210      	movs	r2, #16
 8001506:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <takeWifiPass+0x26c>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800150e:	2101      	movs	r1, #1
 8001510:	2003      	movs	r0, #3
 8001512:	f7ff f9ff 	bl	8000914 <printTemplate>
 8001516:	e048      	b.n	80015aa <takeWifiPass+0x29a>
            	} else if(page == 3) {
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <takeWifiPass+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d10a      	bne.n	8001536 <takeWifiPass+0x226>
            		cursorPosition = 16;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <takeWifiPass+0x268>)
 8001522:	2210      	movs	r2, #16
 8001524:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <takeWifiPass+0x26c>)
 8001528:	2202      	movs	r2, #2
 800152a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800152c:	2102      	movs	r1, #2
 800152e:	2003      	movs	r0, #3
 8001530:	f7ff f9f0 	bl	8000914 <printTemplate>
 8001534:	e039      	b.n	80015aa <takeWifiPass+0x29a>
            	} else if(page == 4) {
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <takeWifiPass+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d10a      	bne.n	8001554 <takeWifiPass+0x244>
            		cursorPosition = 16;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <takeWifiPass+0x268>)
 8001540:	2210      	movs	r2, #16
 8001542:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <takeWifiPass+0x26c>)
 8001546:	2203      	movs	r2, #3
 8001548:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800154a:	2103      	movs	r1, #3
 800154c:	2003      	movs	r0, #3
 800154e:	f7ff f9e1 	bl	8000914 <printTemplate>
 8001552:	e02a      	b.n	80015aa <takeWifiPass+0x29a>
            	} else if(page == 5) {
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <takeWifiPass+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d126      	bne.n	80015aa <takeWifiPass+0x29a>
            		cursorPosition = 16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <takeWifiPass+0x268>)
 800155e:	2210      	movs	r2, #16
 8001560:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <takeWifiPass+0x26c>)
 8001564:	2204      	movs	r2, #4
 8001566:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001568:	2104      	movs	r1, #4
 800156a:	2003      	movs	r0, #3
 800156c:	f7ff f9d2 	bl	8000914 <printTemplate>
 8001570:	e01b      	b.n	80015aa <takeWifiPass+0x29a>
 8001572:	bf00      	nop
 8001574:	200002dc 	.word	0x200002dc
 8001578:	200000a4 	.word	0x200000a4
 800157c:	200000a8 	.word	0x200000a8
 8001580:	40010800 	.word	0x40010800
 8001584:	0800d02c 	.word	0x0800d02c
 8001588:	0800d054 	.word	0x0800d054
 800158c:	20000008 	.word	0x20000008
 8001590:	20000224 	.word	0x20000224
 8001594:	20000304 	.word	0x20000304
 8001598:	200003a8 	.word	0x200003a8
 800159c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <takeWifiPass+0x384>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a3b      	ldr	r2, [pc, #236]	; (8001694 <takeWifiPass+0x384>)
 80015a8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80015aa:	20fa      	movs	r0, #250	; 0xfa
 80015ac:	f007 f8ea 	bl	8008784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80015b0:	2102      	movs	r1, #2
 80015b2:	4839      	ldr	r0, [pc, #228]	; (8001698 <takeWifiPass+0x388>)
 80015b4:	f007 feb6 	bl	8009324 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d128      	bne.n	8001610 <takeWifiPass+0x300>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb1c 	bl	8000c00 <getCharFromCursorPosition>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <takeWifiPass+0x38c>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4413      	add	r3, r2
 80015d2:	460a      	mov	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[characterSavePos] = realCharPos - 1;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	3a01      	subs	r2, #1
 80015de:	b2d1      	uxtb	r1, r2
 80015e0:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <takeWifiPass+0x390>)
 80015e2:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	b2d9      	uxtb	r1, r3
 80015e8:	4a2c      	ldr	r2, [pc, #176]	; (800169c <takeWifiPass+0x38c>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff f91a 	bl	800082c <lcd_print_char>

            writeLoc++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	3301      	adds	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
            characterSavePos++;
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	3301      	adds	r3, #1
 8001608:	72fb      	strb	r3, [r7, #11]

            HAL_Delay(250);
 800160a:	20fa      	movs	r0, #250	; 0xfa
 800160c:	f007 f8ba 	bl	8008784 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001610:	2104      	movs	r1, #4
 8001612:	4821      	ldr	r0, [pc, #132]	; (8001698 <takeWifiPass+0x388>)
 8001614:	f007 fe86 	bl	8009324 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d12e      	bne.n	800167c <takeWifiPass+0x36c>
            if(strlen(wifiPass) >= 1) {
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <takeWifiPass+0x38c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d027      	beq.n	8001676 <takeWifiPass+0x366>
            	wifiPass[wifiPassLoc] = '\0';
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <takeWifiPass+0x38c>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4413      	add	r3, r2
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3306      	adds	r3, #6
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff f917 	bl	800086e <lcd_delete_char>
            	HAL_Delay(50);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f007 f89f 	bl	8008784 <HAL_Delay>

            	if(writeLoc > 7) {
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2b07      	cmp	r3, #7
 800164a:	dd03      	ble.n	8001654 <takeWifiPass+0x344>
            		writeLoc--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3b01      	subs	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e004      	b.n	800165e <takeWifiPass+0x34e>
            	} else if(writeLoc < 7) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b06      	cmp	r3, #6
 8001658:	dc01      	bgt.n	800165e <takeWifiPass+0x34e>
            		writeLoc = 7;
 800165a:	2307      	movs	r3, #7
 800165c:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dd03      	ble.n	800166c <takeWifiPass+0x35c>
            		wifiPassLoc--;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	3b01      	subs	r3, #1
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e004      	b.n	8001676 <takeWifiPass+0x366>
            	} else if(wifiPassLoc < 0) {
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	da01      	bge.n	8001676 <takeWifiPass+0x366>
            		wifiPassLoc = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001676:	20fa      	movs	r0, #250	; 0xfa
 8001678:	f007 f884 	bl	8008784 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <takeWifiPass+0x384>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2002      	movs	r0, #2
 8001686:	f7ff f87a 	bl	800077e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800168a:	e662      	b.n	8001352 <takeWifiPass+0x42>
    }
}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bdb0      	pop	{r4, r5, r7, pc}
 8001694:	200000a4 	.word	0x200000a4
 8001698:	40010800 	.word	0x40010800
 800169c:	200002dc 	.word	0x200002dc
 80016a0:	20000304 	.word	0x20000304

080016a4 <checkSlideVal>:

int checkSlideVal(int state) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d111      	bne.n	80016d6 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80016b2:	2101      	movs	r1, #1
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <checkSlideVal+0x60>)
 80016b6:	f007 fe35 	bl	8009324 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <checkSlideVal+0x20>
			return 34;
 80016c0:	2322      	movs	r3, #34	; 0x22
 80016c2:	e01b      	b.n	80016fc <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80016c4:	2108      	movs	r1, #8
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <checkSlideVal+0x64>)
 80016c8:	f007 fe2c 	bl	8009324 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d113      	bne.n	80016fa <checkSlideVal+0x56>
			return 32;
 80016d2:	2320      	movs	r3, #32
 80016d4:	e012      	b.n	80016fc <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80016d6:	2101      	movs	r1, #1
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <checkSlideVal+0x60>)
 80016da:	f007 fe23 	bl	8009324 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <checkSlideVal+0x44>
			return 35;
 80016e4:	2323      	movs	r3, #35	; 0x23
 80016e6:	e009      	b.n	80016fc <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80016e8:	2108      	movs	r1, #8
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <checkSlideVal+0x64>)
 80016ec:	f007 fe1a 	bl	8009324 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <checkSlideVal+0x56>
			return 33;
 80016f6:	2321      	movs	r3, #33	; 0x21
 80016f8:	e000      	b.n	80016fc <checkSlideVal+0x58>
		}
	}
	return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40010800 	.word	0x40010800
 8001708:	40011000 	.word	0x40011000

0800170c <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7fe fd82 	bl	8000224 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001724:	2301      	movs	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001728:	e08a      	b.n	8001840 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f7ff ffba 	bl	80016a4 <checkSlideVal>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	dd07      	ble.n	8001746 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001736:	6838      	ldr	r0, [r7, #0]
 8001738:	f7ff ffb4 	bl	80016a4 <checkSlideVal>
 800173c:	4603      	mov	r3, r0
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b44      	ldr	r3, [pc, #272]	; (8001854 <slideText+0x148>)
 8001742:	701a      	strb	r2, [r3, #0]
			break;
 8001744:	e081      	b.n	800184a <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	e075      	b.n	8001838 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f7ff ffa9 	bl	80016a4 <checkSlideVal>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd09      	ble.n	800176c <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f7ff ffa3 	bl	80016a4 <checkSlideVal>
 800175e:	4603      	mov	r3, r0
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <slideText+0x148>)
 8001764:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800176a:	e069      	b.n	8001840 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	4413      	add	r3, r2
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	e029      	b.n	80017ca <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f7ff ff94 	bl	80016a4 <checkSlideVal>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	dd0b      	ble.n	800179a <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f7ff ff8e 	bl	80016a4 <checkSlideVal>
 8001788:	4603      	mov	r3, r0
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <slideText+0x148>)
 800178e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001798:	e01d      	b.n	80017d6 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	b2d9      	uxtb	r1, r3
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f7ff f837 	bl	800082c <lcd_print_char>
				HAL_Delay(30);
 80017be:	201e      	movs	r0, #30
 80017c0:	f006 ffe0 	bl	8008784 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	7dfa      	ldrb	r2, [r7, #23]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dbcf      	blt.n	8001776 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	3b01      	subs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	e023      	b.n	8001826 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80017de:	6838      	ldr	r0, [r7, #0]
 80017e0:	f7ff ff60 	bl	80016a4 <checkSlideVal>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dd0b      	ble.n	8001802 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f7ff ff5a 	bl	80016a4 <checkSlideVal>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <slideText+0x148>)
 80017f6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001800:	e017      	b.n	8001832 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	429a      	cmp	r2, r3
 8001808:	db0a      	blt.n	8001820 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	b2d1      	uxtb	r1, r2
 8001812:	2220      	movs	r2, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff f809 	bl	800082c <lcd_print_char>
			    	 HAL_Delay(30);
 800181a:	201e      	movs	r0, #30
 800181c:	f006 ffb2 	bl	8008784 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	3b01      	subs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	7dfa      	ldrb	r2, [r7, #23]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	429a      	cmp	r2, r3
 8001830:	dad5      	bge.n	80017de <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	3301      	adds	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	429a      	cmp	r2, r3
 800183e:	db85      	blt.n	800174c <slideText+0x40>
	while(mainLoopVal == 1) {
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	2b01      	cmp	r3, #1
 8001844:	f43f af71 	beq.w	800172a <slideText+0x1e>
			     }
			}
		}
	}
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000031c 	.word	0x2000031c

08001858 <menu>:

void menu() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800185c:	2101      	movs	r1, #1
 800185e:	488f      	ldr	r0, [pc, #572]	; (8001a9c <menu+0x244>)
 8001860:	f007 fd60 	bl	8009324 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 808e 	bne.w	8001988 <menu+0x130>
 800186c:	4b8c      	ldr	r3, [pc, #560]	; (8001aa0 <menu+0x248>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8086 	beq.w	8001988 <menu+0x130>
		menuSayac = menuSayac+1;
 800187c:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <menu+0x24c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <menu+0x24c>)
 8001886:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001888:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <menu+0x24c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b24      	cmp	r3, #36	; 0x24
 800188e:	d102      	bne.n	8001896 <menu+0x3e>
			menuSayac = 1;
 8001890:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <menu+0x24c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001896:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <menu+0x24c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d106      	bne.n	80018ac <menu+0x54>
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <menu+0x250>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <menu+0x54>
			menuSayac = 21;
 80018a6:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <menu+0x24c>)
 80018a8:	2215      	movs	r2, #21
 80018aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80018ac:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <menu+0x24c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d106      	bne.n	80018c2 <menu+0x6a>
 80018b4:	4b7d      	ldr	r3, [pc, #500]	; (8001aac <menu+0x254>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <menu+0x6a>
			menuSayac = 16;
 80018bc:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <menu+0x24c>)
 80018be:	2210      	movs	r2, #16
 80018c0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80018c2:	4b78      	ldr	r3, [pc, #480]	; (8001aa4 <menu+0x24c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b0d      	cmp	r3, #13
 80018c8:	d106      	bne.n	80018d8 <menu+0x80>
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <menu+0x254>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <menu+0x80>
			menuSayac = 16;
 80018d2:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <menu+0x24c>)
 80018d4:	2210      	movs	r2, #16
 80018d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80018d8:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <menu+0x24c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d106      	bne.n	80018ee <menu+0x96>
 80018e0:	4b72      	ldr	r3, [pc, #456]	; (8001aac <menu+0x254>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d102      	bne.n	80018ee <menu+0x96>
			menuSayac = 13;
 80018e8:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <menu+0x24c>)
 80018ea:	220d      	movs	r2, #13
 80018ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <menu+0x24c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b0a      	cmp	r3, #10
 80018f4:	d10a      	bne.n	800190c <menu+0xb4>
 80018f6:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <menu+0x258>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d003      	beq.n	8001906 <menu+0xae>
 80018fe:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <menu+0x258>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d102      	bne.n	800190c <menu+0xb4>
			menuSayac = 11;
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <menu+0x24c>)
 8001908:	220b      	movs	r2, #11
 800190a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800190c:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <menu+0x24c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d10e      	bne.n	8001932 <menu+0xda>
 8001914:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <menu+0x25c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d003      	beq.n	8001924 <menu+0xcc>
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <menu+0x25c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d106      	bne.n	8001932 <menu+0xda>
 8001924:	4b61      	ldr	r3, [pc, #388]	; (8001aac <menu+0x254>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d102      	bne.n	8001932 <menu+0xda>
			menuSayac = 16;
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <menu+0x24c>)
 800192e:	2210      	movs	r2, #16
 8001930:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <menu+0x24c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d10e      	bne.n	8001958 <menu+0x100>
 800193a:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <menu+0x25c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d003      	beq.n	800194a <menu+0xf2>
 8001942:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <menu+0x25c>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d106      	bne.n	8001958 <menu+0x100>
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <menu+0x254>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d102      	bne.n	8001958 <menu+0x100>
			menuSayac = 13;
 8001952:	4b54      	ldr	r3, [pc, #336]	; (8001aa4 <menu+0x24c>)
 8001954:	220d      	movs	r2, #13
 8001956:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001958:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <menu+0x24c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d106      	bne.n	800196e <menu+0x116>
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <menu+0x260>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <menu+0x116>
			menuSayac = 16;
 8001968:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <menu+0x24c>)
 800196a:	2210      	movs	r2, #16
 800196c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <menu+0x24c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b18      	cmp	r3, #24
 8001974:	d106      	bne.n	8001984 <menu+0x12c>
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <menu+0x250>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <menu+0x12c>
			menuSayac = 26;
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <menu+0x24c>)
 8001980:	221a      	movs	r2, #26
 8001982:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001984:	f004 f84e 	bl	8005a24 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001988:	2108      	movs	r1, #8
 800198a:	484c      	ldr	r0, [pc, #304]	; (8001abc <menu+0x264>)
 800198c:	f007 fcca 	bl	8009324 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d175      	bne.n	8001a82 <menu+0x22a>
 8001996:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <menu+0x248>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f083 0301 	eor.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d06e      	beq.n	8001a82 <menu+0x22a>
		if (menuSayac <= 1) {
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <menu+0x24c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d802      	bhi.n	80019b2 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80019ac:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <menu+0x24c>)
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <menu+0x24c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <menu+0x24c>)
 80019bc:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <menu+0x24c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b14      	cmp	r3, #20
 80019c4:	d106      	bne.n	80019d4 <menu+0x17c>
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <menu+0x250>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <menu+0x17c>
			menuSayac = 17;
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <menu+0x24c>)
 80019d0:	2211      	movs	r2, #17
 80019d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <menu+0x24c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d106      	bne.n	80019ea <menu+0x192>
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <menu+0x254>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <menu+0x192>
			menuSayac = 7;
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <menu+0x24c>)
 80019e6:	2207      	movs	r2, #7
 80019e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <menu+0x24c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d106      	bne.n	8001a00 <menu+0x1a8>
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <menu+0x254>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <menu+0x1a8>
			menuSayac = 12;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <menu+0x24c>)
 80019fc:	220c      	movs	r2, #12
 80019fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <menu+0x24c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d106      	bne.n	8001a16 <menu+0x1be>
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <menu+0x254>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d102      	bne.n	8001a16 <menu+0x1be>
			menuSayac = 8;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <menu+0x24c>)
 8001a12:	2208      	movs	r2, #8
 8001a14:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <menu+0x24c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	d10a      	bne.n	8001a34 <menu+0x1dc>
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <menu+0x258>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d003      	beq.n	8001a2e <menu+0x1d6>
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <menu+0x258>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d102      	bne.n	8001a34 <menu+0x1dc>
			menuSayac = 9;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <menu+0x24c>)
 8001a30:	2209      	movs	r2, #9
 8001a32:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <menu+0x24c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d10a      	bne.n	8001a52 <menu+0x1fa>
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <menu+0x25c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d003      	beq.n	8001a4c <menu+0x1f4>
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <menu+0x25c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d102      	bne.n	8001a52 <menu+0x1fa>
			menuSayac = 11;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <menu+0x24c>)
 8001a4e:	220b      	movs	r2, #11
 8001a50:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <menu+0x24c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d106      	bne.n	8001a68 <menu+0x210>
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <menu+0x260>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <menu+0x210>
			menuSayac = 14;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <menu+0x24c>)
 8001a64:	220e      	movs	r2, #14
 8001a66:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <menu+0x24c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b19      	cmp	r3, #25
 8001a6e:	d106      	bne.n	8001a7e <menu+0x226>
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <menu+0x250>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <menu+0x226>
			menuSayac = 23;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <menu+0x24c>)
 8001a7a:	2217      	movs	r2, #23
 8001a7c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001a7e:	f003 ffd1 	bl	8005a24 <bekle>
	}

	if (menuSayac == 0) {
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <menu+0x24c>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d134      	bne.n	8001af4 <menu+0x29c>
		if(dilSecim == 0) {
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <menu+0x268>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d122      	bne.n	8001ad8 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <menu+0x26c>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	2001      	movs	r0, #1
 8001a98:	e016      	b.n	8001ac8 <menu+0x270>
 8001a9a:	bf00      	nop
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	2000034b 	.word	0x2000034b
 8001aa4:	2000031c 	.word	0x2000031c
 8001aa8:	2000032b 	.word	0x2000032b
 8001aac:	20000324 	.word	0x20000324
 8001ab0:	20000325 	.word	0x20000325
 8001ab4:	20000326 	.word	0x20000326
 8001ab8:	20000327 	.word	0x20000327
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	2000033d 	.word	0x2000033d
 8001ac4:	0800d068 	.word	0x0800d068
 8001ac8:	f7fe fe78 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001acc:	4a94      	ldr	r2, [pc, #592]	; (8001d20 <menu+0x4c8>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f7fe fe73 	bl	80007bc <lcd_print>
 8001ad6:	e00d      	b.n	8001af4 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <menu+0x4cc>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d109      	bne.n	8001af4 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001ae0:	4a91      	ldr	r2, [pc, #580]	; (8001d28 <menu+0x4d0>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7fe fe69 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001aea:	4a90      	ldr	r2, [pc, #576]	; (8001d2c <menu+0x4d4>)
 8001aec:	2101      	movs	r1, #1
 8001aee:	2002      	movs	r0, #2
 8001af0:	f7fe fe64 	bl	80007bc <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001af4:	4b8e      	ldr	r3, [pc, #568]	; (8001d30 <menu+0x4d8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 82b5 	bne.w	8002068 <menu+0x810>
		if(dilSecim == 0) {
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <menu+0x4cc>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001b06:	4a8b      	ldr	r2, [pc, #556]	; (8001d34 <menu+0x4dc>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7fe fe56 	bl	80007bc <lcd_print>
 8001b10:	e008      	b.n	8001b24 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001b12:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <menu+0x4cc>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d104      	bne.n	8001b24 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001b1a:	4a87      	ldr	r2, [pc, #540]	; (8001d38 <menu+0x4e0>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7fe fe4c 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001b24:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <menu+0x4e4>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d123      	bne.n	8001b74 <menu+0x31c>
			if(dilSecim == 0) {
 8001b2c:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <menu+0x4cc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001b34:	4a82      	ldr	r2, [pc, #520]	; (8001d40 <menu+0x4e8>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fe3f 	bl	80007bc <lcd_print>
 8001b3e:	e008      	b.n	8001b52 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001b40:	4b78      	ldr	r3, [pc, #480]	; (8001d24 <menu+0x4cc>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d104      	bne.n	8001b52 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001b48:	4a7e      	ldr	r2, [pc, #504]	; (8001d44 <menu+0x4ec>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7fe fe35 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001b52:	4a7d      	ldr	r2, [pc, #500]	; (8001d48 <menu+0x4f0>)
 8001b54:	210f      	movs	r1, #15
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7fe fe30 	bl	80007bc <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001b5c:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <menu+0x4f4>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	220a      	movs	r2, #10
 8001b62:	497b      	ldr	r1, [pc, #492]	; (8001d50 <menu+0x4f8>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00a fc09 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001b6a:	4a79      	ldr	r2, [pc, #484]	; (8001d50 <menu+0x4f8>)
 8001b6c:	210e      	movs	r1, #14
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7fe fe24 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001b74:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <menu+0x4e4>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d123      	bne.n	8001bc4 <menu+0x36c>
			if(dilSecim == 0) {
 8001b7c:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <menu+0x4cc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001b84:	4a73      	ldr	r2, [pc, #460]	; (8001d54 <menu+0x4fc>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7fe fe17 	bl	80007bc <lcd_print>
 8001b8e:	e008      	b.n	8001ba2 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <menu+0x4cc>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d104      	bne.n	8001ba2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001b98:	4a6f      	ldr	r2, [pc, #444]	; (8001d58 <menu+0x500>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7fe fe0d 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <menu+0x504>)
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7fe fe08 	bl	80007bc <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001bac:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <menu+0x508>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	4967      	ldr	r1, [pc, #412]	; (8001d50 <menu+0x4f8>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00a fbe1 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001bba:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <menu+0x4f8>)
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fdfc 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001bc4:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <menu+0x4e4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d123      	bne.n	8001c14 <menu+0x3bc>
			if(dilSecim == 0) {
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <menu+0x4cc>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001bd4:	4a63      	ldr	r2, [pc, #396]	; (8001d64 <menu+0x50c>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7fe fdef 	bl	80007bc <lcd_print>
 8001bde:	e008      	b.n	8001bf2 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <menu+0x4cc>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d104      	bne.n	8001bf2 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001be8:	4a5f      	ldr	r2, [pc, #380]	; (8001d68 <menu+0x510>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	2002      	movs	r0, #2
 8001bee:	f7fe fde5 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bf2:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <menu+0x504>)
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f7fe fde0 	bl	80007bc <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <menu+0x514>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	220a      	movs	r2, #10
 8001c02:	4953      	ldr	r1, [pc, #332]	; (8001d50 <menu+0x4f8>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00a fbb9 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001c0a:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <menu+0x4f8>)
 8001c0c:	210e      	movs	r1, #14
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7fe fdd4 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <menu+0x4e4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d123      	bne.n	8001c64 <menu+0x40c>
			if(dilSecim == 0) {
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <menu+0x4cc>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <menu+0x518>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7fe fdc7 	bl	80007bc <lcd_print>
 8001c2e:	e008      	b.n	8001c42 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <menu+0x4cc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d104      	bne.n	8001c42 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001c38:	4a4e      	ldr	r2, [pc, #312]	; (8001d74 <menu+0x51c>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7fe fdbd 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c42:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <menu+0x504>)
 8001c44:	210f      	movs	r1, #15
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7fe fdb8 	bl	80007bc <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <menu+0x520>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	220a      	movs	r2, #10
 8001c52:	493f      	ldr	r1, [pc, #252]	; (8001d50 <menu+0x4f8>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00a fb91 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	; (8001d50 <menu+0x4f8>)
 8001c5c:	210e      	movs	r1, #14
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7fe fdac 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <menu+0x4e4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d123      	bne.n	8001cb4 <menu+0x45c>
			if(dilSecim == 0) {
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <menu+0x4cc>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001c74:	4a41      	ldr	r2, [pc, #260]	; (8001d7c <menu+0x524>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7fe fd9f 	bl	80007bc <lcd_print>
 8001c7e:	e008      	b.n	8001c92 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <menu+0x4cc>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d104      	bne.n	8001c92 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001c88:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <menu+0x528>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7fe fd95 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <menu+0x504>)
 8001c94:	210f      	movs	r1, #15
 8001c96:	2002      	movs	r0, #2
 8001c98:	f7fe fd90 	bl	80007bc <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <menu+0x52c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	492b      	ldr	r1, [pc, #172]	; (8001d50 <menu+0x4f8>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f00a fb69 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001caa:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <menu+0x4f8>)
 8001cac:	210e      	movs	r1, #14
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f7fe fd84 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <menu+0x4e4>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d123      	bne.n	8001d04 <menu+0x4ac>
			if(dilSecim == 0) {
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <menu+0x4cc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001cc4:	4a30      	ldr	r2, [pc, #192]	; (8001d88 <menu+0x530>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f7fe fd77 	bl	80007bc <lcd_print>
 8001cce:	e008      	b.n	8001ce2 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <menu+0x4cc>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d104      	bne.n	8001ce2 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001cd8:	4a2c      	ldr	r2, [pc, #176]	; (8001d8c <menu+0x534>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7fe fd6d 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <menu+0x504>)
 8001ce4:	210f      	movs	r1, #15
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7fe fd68 	bl	80007bc <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <menu+0x538>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	220a      	movs	r2, #10
 8001cf2:	4917      	ldr	r1, [pc, #92]	; (8001d50 <menu+0x4f8>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00a fb41 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <menu+0x4f8>)
 8001cfc:	210e      	movs	r1, #14
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f7fe fd5c 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <menu+0x4e4>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d15f      	bne.n	8001dcc <menu+0x574>
			if(dilSecim == 0) {
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <menu+0x4cc>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d141      	bne.n	8001d98 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <menu+0x53c>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7fe fd4f 	bl	80007bc <lcd_print>
 8001d1e:	e044      	b.n	8001daa <menu+0x552>
 8001d20:	0800d07c 	.word	0x0800d07c
 8001d24:	2000033d 	.word	0x2000033d
 8001d28:	0800d090 	.word	0x0800d090
 8001d2c:	0800d0a4 	.word	0x0800d0a4
 8001d30:	2000031c 	.word	0x2000031c
 8001d34:	0800d0b8 	.word	0x0800d0b8
 8001d38:	0800d0cc 	.word	0x0800d0cc
 8001d3c:	2000031e 	.word	0x2000031e
 8001d40:	0800d0e0 	.word	0x0800d0e0
 8001d44:	0800d0f0 	.word	0x0800d0f0
 8001d48:	0800d100 	.word	0x0800d100
 8001d4c:	2000033e 	.word	0x2000033e
 8001d50:	20000294 	.word	0x20000294
 8001d54:	0800d104 	.word	0x0800d104
 8001d58:	0800d114 	.word	0x0800d114
 8001d5c:	0800d124 	.word	0x0800d124
 8001d60:	2000033f 	.word	0x2000033f
 8001d64:	0800d128 	.word	0x0800d128
 8001d68:	0800d138 	.word	0x0800d138
 8001d6c:	20000340 	.word	0x20000340
 8001d70:	0800d148 	.word	0x0800d148
 8001d74:	0800d158 	.word	0x0800d158
 8001d78:	20000341 	.word	0x20000341
 8001d7c:	0800d168 	.word	0x0800d168
 8001d80:	0800d178 	.word	0x0800d178
 8001d84:	20000342 	.word	0x20000342
 8001d88:	0800d188 	.word	0x0800d188
 8001d8c:	0800d198 	.word	0x0800d198
 8001d90:	20000343 	.word	0x20000343
 8001d94:	0800d1a8 	.word	0x0800d1a8
			} else if(dilSecim == 1) {
 8001d98:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <menu+0x680>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d104      	bne.n	8001daa <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <menu+0x684>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	2002      	movs	r0, #2
 8001da6:	f7fe fd09 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001daa:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <menu+0x688>)
 8001dac:	210f      	movs	r1, #15
 8001dae:	2002      	movs	r0, #2
 8001db0:	f7fe fd04 	bl	80007bc <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <menu+0x68c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	220a      	movs	r2, #10
 8001dba:	494b      	ldr	r1, [pc, #300]	; (8001ee8 <menu+0x690>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00a fadd 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001dc2:	4a49      	ldr	r2, [pc, #292]	; (8001ee8 <menu+0x690>)
 8001dc4:	210e      	movs	r1, #14
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f7fe fcf8 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <menu+0x694>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	d123      	bne.n	8001e1c <menu+0x5c4>
			if(dilSecim == 0) {
 8001dd4:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <menu+0x680>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001ddc:	4a44      	ldr	r2, [pc, #272]	; (8001ef0 <menu+0x698>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7fe fceb 	bl	80007bc <lcd_print>
 8001de6:	e008      	b.n	8001dfa <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <menu+0x680>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d104      	bne.n	8001dfa <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001df0:	4a40      	ldr	r2, [pc, #256]	; (8001ef4 <menu+0x69c>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7fe fce1 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001dfa:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <menu+0x688>)
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f7fe fcdc 	bl	80007bc <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001e04:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <menu+0x6a0>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	220a      	movs	r2, #10
 8001e0a:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <menu+0x690>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00a fab5 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001e12:	4a35      	ldr	r2, [pc, #212]	; (8001ee8 <menu+0x690>)
 8001e14:	210e      	movs	r1, #14
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7fe fcd0 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <menu+0x694>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d123      	bne.n	8001e6c <menu+0x614>
			if(dilSecim == 0) {
 8001e24:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <menu+0x680>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001e2c:	4a33      	ldr	r2, [pc, #204]	; (8001efc <menu+0x6a4>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7fe fcc3 	bl	80007bc <lcd_print>
 8001e36:	e008      	b.n	8001e4a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <menu+0x680>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d104      	bne.n	8001e4a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001e40:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <menu+0x6a8>)
 8001e42:	2101      	movs	r1, #1
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7fe fcb9 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001e4a:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <menu+0x688>)
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f7fe fcb4 	bl	80007bc <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <menu+0x6ac>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	220a      	movs	r2, #10
 8001e5a:	4923      	ldr	r1, [pc, #140]	; (8001ee8 <menu+0x690>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00a fa8d 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <menu+0x690>)
 8001e64:	210e      	movs	r1, #14
 8001e66:	2002      	movs	r0, #2
 8001e68:	f7fe fca8 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <menu+0x694>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d123      	bne.n	8001ebc <menu+0x664>
			if(dilSecim == 0) {
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <menu+0x680>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <menu+0x6b0>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2002      	movs	r0, #2
 8001e82:	f7fe fc9b 	bl	80007bc <lcd_print>
 8001e86:	e008      	b.n	8001e9a <menu+0x642>
			} else if(dilSecim == 1) {
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <menu+0x680>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d104      	bne.n	8001e9a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <menu+0x6b4>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	2002      	movs	r0, #2
 8001e96:	f7fe fc91 	bl	80007bc <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <menu+0x6b8>)
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f7fe fc8c 	bl	80007bc <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <menu+0x6bc>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	220a      	movs	r2, #10
 8001eaa:	490f      	ldr	r1, [pc, #60]	; (8001ee8 <menu+0x690>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00a fa65 	bl	800c37c <itoa>
			lcd_print(2, 15, snum);
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <menu+0x690>)
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f7fe fc80 	bl	80007bc <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <menu+0x694>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b0a      	cmp	r3, #10
 8001ec2:	d134      	bne.n	8001f2e <menu+0x6d6>
			if(dilSecim == 0) {
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <menu+0x680>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d127      	bne.n	8001f1c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <menu+0x6c0>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7fe fc73 	bl	80007bc <lcd_print>
 8001ed6:	e02a      	b.n	8001f2e <menu+0x6d6>
 8001ed8:	2000033d 	.word	0x2000033d
 8001edc:	0800d1b8 	.word	0x0800d1b8
 8001ee0:	0800d124 	.word	0x0800d124
 8001ee4:	20000344 	.word	0x20000344
 8001ee8:	20000294 	.word	0x20000294
 8001eec:	2000031e 	.word	0x2000031e
 8001ef0:	0800d1c8 	.word	0x0800d1c8
 8001ef4:	0800d1d8 	.word	0x0800d1d8
 8001ef8:	20000345 	.word	0x20000345
 8001efc:	0800d1e8 	.word	0x0800d1e8
 8001f00:	0800d1f8 	.word	0x0800d1f8
 8001f04:	20000346 	.word	0x20000346
 8001f08:	0800d208 	.word	0x0800d208
 8001f0c:	0800d218 	.word	0x0800d218
 8001f10:	0800d228 	.word	0x0800d228
 8001f14:	20000347 	.word	0x20000347
 8001f18:	0800d22c 	.word	0x0800d22c
			} else if(dilSecim == 1) {
 8001f1c:	4b82      	ldr	r3, [pc, #520]	; (8002128 <menu+0x8d0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d104      	bne.n	8001f2e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001f24:	4a81      	ldr	r2, [pc, #516]	; (800212c <menu+0x8d4>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f7fe fc47 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f2e:	2102      	movs	r1, #2
 8001f30:	487f      	ldr	r0, [pc, #508]	; (8002130 <menu+0x8d8>)
 8001f32:	f007 f9f7 	bl	8009324 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d119      	bne.n	8001f70 <menu+0x718>
 8001f3c:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <menu+0x8dc>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <menu+0x718>
 8001f4a:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <menu+0x8e0>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001f52:	4b7a      	ldr	r3, [pc, #488]	; (800213c <menu+0x8e4>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b78      	ldr	r3, [pc, #480]	; (800213c <menu+0x8e4>)
 8001f5c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001f5e:	4b77      	ldr	r3, [pc, #476]	; (800213c <menu+0x8e4>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b0a      	cmp	r3, #10
 8001f64:	d902      	bls.n	8001f6c <menu+0x714>
				hataGostermeSirasi = 0;
 8001f66:	4b75      	ldr	r3, [pc, #468]	; (800213c <menu+0x8e4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f6c:	f003 fd5a 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f70:	2104      	movs	r1, #4
 8001f72:	486f      	ldr	r0, [pc, #444]	; (8002130 <menu+0x8d8>)
 8001f74:	f007 f9d6 	bl	8009324 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d119      	bne.n	8001fb2 <menu+0x75a>
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <menu+0x8dc>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <menu+0x75a>
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <menu+0x8e0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001f94:	4b69      	ldr	r3, [pc, #420]	; (800213c <menu+0x8e4>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b67      	ldr	r3, [pc, #412]	; (800213c <menu+0x8e4>)
 8001f9e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <menu+0x8e4>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b0b      	cmp	r3, #11
 8001fa6:	d902      	bls.n	8001fae <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001fa8:	4b64      	ldr	r3, [pc, #400]	; (800213c <menu+0x8e4>)
 8001faa:	220a      	movs	r2, #10
 8001fac:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001fae:	f003 fd39 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001fb2:	2108      	movs	r1, #8
 8001fb4:	485e      	ldr	r0, [pc, #376]	; (8002130 <menu+0x8d8>)
 8001fb6:	f007 f9b5 	bl	8009324 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d153      	bne.n	8002068 <menu+0x810>
 8001fc0:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <menu+0x8dc>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <menu+0x810>
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <menu+0x8e4>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d148      	bne.n	8002068 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <menu+0x8e8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <menu+0x8ec>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <menu+0x8f0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	4b56      	ldr	r3, [pc, #344]	; (8002144 <menu+0x8ec>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001ff2:	4b56      	ldr	r3, [pc, #344]	; (800214c <menu+0x8f4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <menu+0x8ec>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <menu+0x8f8>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <menu+0x8ec>)
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <menu+0x8fc>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <menu+0x8ec>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800201c:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <menu+0x900>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <menu+0x8ec>)
 8002024:	2200      	movs	r2, #0
 8002026:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <menu+0x904>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	4b44      	ldr	r3, [pc, #272]	; (8002144 <menu+0x8ec>)
 8002032:	2200      	movs	r2, #0
 8002034:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002038:	4b49      	ldr	r3, [pc, #292]	; (8002160 <menu+0x908>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <menu+0x8ec>)
 8002040:	2200      	movs	r2, #0
 8002042:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <menu+0x90c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <menu+0x8ec>)
 800204e:	2200      	movs	r2, #0
 8002050:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8002054:	4b44      	ldr	r3, [pc, #272]	; (8002168 <menu+0x910>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <menu+0x8ec>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8002062:	4b42      	ldr	r3, [pc, #264]	; (800216c <menu+0x914>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002068:	4b41      	ldr	r3, [pc, #260]	; (8002170 <menu+0x918>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80fc 	bne.w	800226a <menu+0xa12>
		if(dilSecim == 0) {
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <menu+0x8d0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 800207a:	4a3e      	ldr	r2, [pc, #248]	; (8002174 <menu+0x91c>)
 800207c:	2101      	movs	r1, #1
 800207e:	2001      	movs	r0, #1
 8002080:	f7fe fb9c 	bl	80007bc <lcd_print>
 8002084:	e008      	b.n	8002098 <menu+0x840>
		} else if(dilSecim == 1) {
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <menu+0x8d0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800208e:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <menu+0x920>)
 8002090:	2101      	movs	r1, #1
 8002092:	2001      	movs	r0, #1
 8002094:	f7fe fb92 	bl	80007bc <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <menu+0x8e0>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d003      	beq.n	80020a8 <menu+0x850>
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <menu+0x8e0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d112      	bne.n	80020ce <menu+0x876>
			if(dilSecim == 0) {
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <menu+0x8d0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80020b0:	4a32      	ldr	r2, [pc, #200]	; (800217c <menu+0x924>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fb81 	bl	80007bc <lcd_print>
 80020ba:	e008      	b.n	80020ce <menu+0x876>
			} else if(dilSecim == 1) {
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <menu+0x8d0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d104      	bne.n	80020ce <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <menu+0x928>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7fe fb77 	bl	80007bc <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <menu+0x92c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <menu+0x8ac>
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <menu+0x8e0>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d112      	bne.n	8002104 <menu+0x8ac>
			if(dilSecim == 0) {
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <menu+0x8d0>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80020e6:	4a28      	ldr	r2, [pc, #160]	; (8002188 <menu+0x930>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7fe fb66 	bl	80007bc <lcd_print>
 80020f0:	e008      	b.n	8002104 <menu+0x8ac>
			} else if(dilSecim == 1) {
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <menu+0x8d0>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d104      	bne.n	8002104 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80020fa:	4a24      	ldr	r2, [pc, #144]	; (800218c <menu+0x934>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2002      	movs	r0, #2
 8002100:	f7fe fb5c 	bl	80007bc <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <menu+0x92c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d14c      	bne.n	80021a6 <menu+0x94e>
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <menu+0x8e0>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d148      	bne.n	80021a6 <menu+0x94e>
			if(dilSecim == 0) {
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <menu+0x8d0>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d13b      	bne.n	8002194 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 800211c:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <menu+0x938>)
 800211e:	2101      	movs	r1, #1
 8002120:	2002      	movs	r0, #2
 8002122:	f7fe fb4b 	bl	80007bc <lcd_print>
 8002126:	e03e      	b.n	80021a6 <menu+0x94e>
 8002128:	2000033d 	.word	0x2000033d
 800212c:	0800d240 	.word	0x0800d240
 8002130:	40010800 	.word	0x40010800
 8002134:	2000034b 	.word	0x2000034b
 8002138:	2000032b 	.word	0x2000032b
 800213c:	2000031e 	.word	0x2000031e
 8002140:	2000033e 	.word	0x2000033e
 8002144:	20000224 	.word	0x20000224
 8002148:	2000033f 	.word	0x2000033f
 800214c:	20000340 	.word	0x20000340
 8002150:	20000341 	.word	0x20000341
 8002154:	20000342 	.word	0x20000342
 8002158:	20000343 	.word	0x20000343
 800215c:	20000344 	.word	0x20000344
 8002160:	20000345 	.word	0x20000345
 8002164:	20000346 	.word	0x20000346
 8002168:	20000347 	.word	0x20000347
 800216c:	20000348 	.word	0x20000348
 8002170:	2000031c 	.word	0x2000031c
 8002174:	0800d254 	.word	0x0800d254
 8002178:	0800d268 	.word	0x0800d268
 800217c:	0800d27c 	.word	0x0800d27c
 8002180:	0800d290 	.word	0x0800d290
 8002184:	2000031d 	.word	0x2000031d
 8002188:	0800d2a4 	.word	0x0800d2a4
 800218c:	0800d2b4 	.word	0x0800d2b4
 8002190:	0800d2c4 	.word	0x0800d2c4
			} else if(dilSecim == 1) {
 8002194:	4b98      	ldr	r3, [pc, #608]	; (80023f8 <menu+0xba0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d104      	bne.n	80021a6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 800219c:	4a97      	ldr	r2, [pc, #604]	; (80023fc <menu+0xba4>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7fe fb0b 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80021a6:	2102      	movs	r1, #2
 80021a8:	4895      	ldr	r0, [pc, #596]	; (8002400 <menu+0xba8>)
 80021aa:	f007 f8bb 	bl	8009324 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d119      	bne.n	80021e8 <menu+0x990>
 80021b4:	4b93      	ldr	r3, [pc, #588]	; (8002404 <menu+0xbac>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <menu+0x990>
 80021c2:	4b91      	ldr	r3, [pc, #580]	; (8002408 <menu+0xbb0>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10e      	bne.n	80021e8 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 80021ca:	4b90      	ldr	r3, [pc, #576]	; (800240c <menu+0xbb4>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b8e      	ldr	r3, [pc, #568]	; (800240c <menu+0xbb4>)
 80021d4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80021d6:	4b8d      	ldr	r3, [pc, #564]	; (800240c <menu+0xbb4>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d902      	bls.n	80021e4 <menu+0x98c>
				calismaSekli = 0;
 80021de:	4b8b      	ldr	r3, [pc, #556]	; (800240c <menu+0xbb4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021e4:	f003 fc1e 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80021e8:	2104      	movs	r1, #4
 80021ea:	4885      	ldr	r0, [pc, #532]	; (8002400 <menu+0xba8>)
 80021ec:	f007 f89a 	bl	8009324 <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d119      	bne.n	800222a <menu+0x9d2>
 80021f6:	4b83      	ldr	r3, [pc, #524]	; (8002404 <menu+0xbac>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <menu+0x9d2>
 8002204:	4b80      	ldr	r3, [pc, #512]	; (8002408 <menu+0xbb0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10e      	bne.n	800222a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 800220c:	4b7f      	ldr	r3, [pc, #508]	; (800240c <menu+0xbb4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b7d      	ldr	r3, [pc, #500]	; (800240c <menu+0xbb4>)
 8002216:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002218:	4b7c      	ldr	r3, [pc, #496]	; (800240c <menu+0xbb4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <menu+0x9ce>
	    		calismaSekli = 1;
 8002220:	4b7a      	ldr	r3, [pc, #488]	; (800240c <menu+0xbb4>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8002226:	f003 fbfd 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800222a:	2108      	movs	r1, #8
 800222c:	4874      	ldr	r0, [pc, #464]	; (8002400 <menu+0xba8>)
 800222e:	f007 f879 	bl	8009324 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d118      	bne.n	800226a <menu+0xa12>
 8002238:	4b72      	ldr	r3, [pc, #456]	; (8002404 <menu+0xbac>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d011      	beq.n	800226a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8002246:	4b71      	ldr	r3, [pc, #452]	; (800240c <menu+0xbb4>)
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	4b71      	ldr	r3, [pc, #452]	; (8002410 <menu+0xbb8>)
 800224c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800224e:	4b6f      	ldr	r3, [pc, #444]	; (800240c <menu+0xbb4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d106      	bne.n	8002264 <menu+0xa0c>
				altLimit = 1;
 8002256:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <menu+0xbbc>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <menu+0xbbc>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <menu+0xbb8>)
 8002262:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002264:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <menu+0xbc0>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800226a:	4b6c      	ldr	r3, [pc, #432]	; (800241c <menu+0xbc4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b03      	cmp	r3, #3
 8002270:	f040 8083 	bne.w	800237a <menu+0xb22>
		if(dilSecim == 0) {
 8002274:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <menu+0xba0>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800227c:	4a68      	ldr	r2, [pc, #416]	; (8002420 <menu+0xbc8>)
 800227e:	2101      	movs	r1, #1
 8002280:	2001      	movs	r0, #1
 8002282:	f7fe fa9b 	bl	80007bc <lcd_print>
 8002286:	e008      	b.n	800229a <menu+0xa42>
		} else if(dilSecim == 1) {
 8002288:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <menu+0xba0>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d104      	bne.n	800229a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002290:	4a64      	ldr	r2, [pc, #400]	; (8002424 <menu+0xbcc>)
 8002292:	2101      	movs	r1, #1
 8002294:	2001      	movs	r0, #1
 8002296:	f7fe fa91 	bl	80007bc <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <menu+0xbd0>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d113      	bne.n	80022ca <menu+0xa72>
			if(dilSecim == 0) {
 80022a2:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <menu+0xba0>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 80022aa:	4a60      	ldr	r2, [pc, #384]	; (800242c <menu+0xbd4>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7fe fa84 	bl	80007bc <lcd_print>
 80022b4:	e012      	b.n	80022dc <menu+0xa84>
			} else if(dilSecim == 1) {
 80022b6:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <menu+0xba0>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10e      	bne.n	80022dc <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 80022be:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <menu+0xbd8>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	2002      	movs	r0, #2
 80022c4:	f7fe fa7a 	bl	80007bc <lcd_print>
 80022c8:	e008      	b.n	80022dc <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 80022ca:	4b57      	ldr	r3, [pc, #348]	; (8002428 <menu+0xbd0>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d104      	bne.n	80022dc <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 80022d2:	4a58      	ldr	r2, [pc, #352]	; (8002434 <menu+0xbdc>)
 80022d4:	2101      	movs	r1, #1
 80022d6:	2002      	movs	r0, #2
 80022d8:	f7fe fa70 	bl	80007bc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022dc:	2102      	movs	r1, #2
 80022de:	4848      	ldr	r0, [pc, #288]	; (8002400 <menu+0xba8>)
 80022e0:	f007 f820 	bl	8009324 <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d115      	bne.n	8002316 <menu+0xabe>
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <menu+0xbac>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	f083 0301 	eor.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <menu+0xbd0>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b49      	ldr	r3, [pc, #292]	; (8002428 <menu+0xbd0>)
 8002302:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002304:	4b48      	ldr	r3, [pc, #288]	; (8002428 <menu+0xbd0>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d902      	bls.n	8002312 <menu+0xaba>
				emniyetCercevesi = 0;
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <menu+0xbd0>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002312:	f003 fb87 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002316:	2104      	movs	r1, #4
 8002318:	4839      	ldr	r0, [pc, #228]	; (8002400 <menu+0xba8>)
 800231a:	f007 f803 	bl	8009324 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d115      	bne.n	8002350 <menu+0xaf8>
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <menu+0xbac>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f083 0301 	eor.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00e      	beq.n	8002350 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <menu+0xbd0>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3b01      	subs	r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <menu+0xbd0>)
 800233c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800233e:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <menu+0xbd0>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <menu+0xbd0>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800234c:	f003 fb6a 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002350:	2108      	movs	r1, #8
 8002352:	482b      	ldr	r0, [pc, #172]	; (8002400 <menu+0xba8>)
 8002354:	f006 ffe6 	bl	8009324 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10d      	bne.n	800237a <menu+0xb22>
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <menu+0xbac>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <menu+0xbd0>)
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <menu+0xbb8>)
 8002372:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <menu+0xbc0>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <menu+0xbc4>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	f040 80ba 	bne.w	80024f8 <menu+0xca0>
		if(dilSecim == 0) {
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <menu+0xba0>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <menu+0xbe0>)
 800238e:	2101      	movs	r1, #1
 8002390:	2001      	movs	r0, #1
 8002392:	f7fe fa13 	bl	80007bc <lcd_print>
 8002396:	e008      	b.n	80023aa <menu+0xb52>
		} else if(dilSecim == 1) {
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <menu+0xba0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d104      	bne.n	80023aa <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <menu+0xbe4>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7fe fa09 	bl	80007bc <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <menu+0xbe8>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d113      	bne.n	80023da <menu+0xb82>
			if(dilSecim == 0) {
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <menu+0xba0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80023ba:	4a1c      	ldr	r2, [pc, #112]	; (800242c <menu+0xbd4>)
 80023bc:	2101      	movs	r1, #1
 80023be:	2002      	movs	r0, #2
 80023c0:	f7fe f9fc 	bl	80007bc <lcd_print>
 80023c4:	e049      	b.n	800245a <menu+0xc02>
			} else if(dilSecim == 1) {
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <menu+0xba0>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d145      	bne.n	800245a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <menu+0xbd8>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7fe f9f2 	bl	80007bc <lcd_print>
 80023d8:	e03f      	b.n	800245a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <menu+0xbe8>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d13b      	bne.n	800245a <menu+0xc02>
			if(dilSecim == 0) {
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <menu+0xba0>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d12e      	bne.n	8002448 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <menu+0xbec>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	2002      	movs	r0, #2
 80023f0:	f7fe f9e4 	bl	80007bc <lcd_print>
 80023f4:	e031      	b.n	800245a <menu+0xc02>
 80023f6:	bf00      	nop
 80023f8:	2000033d 	.word	0x2000033d
 80023fc:	0800d2d4 	.word	0x0800d2d4
 8002400:	40010800 	.word	0x40010800
 8002404:	2000034b 	.word	0x2000034b
 8002408:	2000032b 	.word	0x2000032b
 800240c:	2000031d 	.word	0x2000031d
 8002410:	20000224 	.word	0x20000224
 8002414:	20000322 	.word	0x20000322
 8002418:	20000348 	.word	0x20000348
 800241c:	2000031c 	.word	0x2000031c
 8002420:	0800d2e4 	.word	0x0800d2e4
 8002424:	0800d2f8 	.word	0x0800d2f8
 8002428:	20000320 	.word	0x20000320
 800242c:	0800d30c 	.word	0x0800d30c
 8002430:	0800d320 	.word	0x0800d320
 8002434:	0800d334 	.word	0x0800d334
 8002438:	0800d344 	.word	0x0800d344
 800243c:	0800d358 	.word	0x0800d358
 8002440:	20000321 	.word	0x20000321
 8002444:	0800d36c 	.word	0x0800d36c
			} else if(dilSecim == 1) {
 8002448:	4b92      	ldr	r3, [pc, #584]	; (8002694 <menu+0xe3c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d104      	bne.n	800245a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8002450:	4a91      	ldr	r2, [pc, #580]	; (8002698 <menu+0xe40>)
 8002452:	2101      	movs	r1, #1
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe f9b1 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800245a:	2102      	movs	r1, #2
 800245c:	488f      	ldr	r0, [pc, #572]	; (800269c <menu+0xe44>)
 800245e:	f006 ff61 	bl	8009324 <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	2b01      	cmp	r3, #1
 8002466:	d115      	bne.n	8002494 <menu+0xc3c>
 8002468:	4b8d      	ldr	r3, [pc, #564]	; (80026a0 <menu+0xe48>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002476:	4b8b      	ldr	r3, [pc, #556]	; (80026a4 <menu+0xe4c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <menu+0xe4c>)
 8002480:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <menu+0xe4c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d902      	bls.n	8002490 <menu+0xc38>
				yavaslamaLimit = 0;
 800248a:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <menu+0xe4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002490:	f003 fac8 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002494:	2104      	movs	r1, #4
 8002496:	4881      	ldr	r0, [pc, #516]	; (800269c <menu+0xe44>)
 8002498:	f006 ff44 	bl	8009324 <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d115      	bne.n	80024ce <menu+0xc76>
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <menu+0xe48>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80024b0:	4b7c      	ldr	r3, [pc, #496]	; (80026a4 <menu+0xe4c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <menu+0xe4c>)
 80024ba:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80024bc:	4b79      	ldr	r3, [pc, #484]	; (80026a4 <menu+0xe4c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <menu+0xc72>
		   		yavaslamaLimit = 1;
 80024c4:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <menu+0xe4c>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ca:	f003 faab 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ce:	2108      	movs	r1, #8
 80024d0:	4872      	ldr	r0, [pc, #456]	; (800269c <menu+0xe44>)
 80024d2:	f006 ff27 	bl	8009324 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d10d      	bne.n	80024f8 <menu+0xca0>
 80024dc:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <menu+0xe48>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <menu+0xe4c>)
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <menu+0xe50>)
 80024f0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80024f2:	4b6e      	ldr	r3, [pc, #440]	; (80026ac <menu+0xe54>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <menu+0xe58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	f040 80b9 	bne.w	8002674 <menu+0xe1c>
		if(dilSecim == 0) {
 8002502:	4b64      	ldr	r3, [pc, #400]	; (8002694 <menu+0xe3c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d105      	bne.n	8002516 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800250a:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <menu+0xe5c>)
 800250c:	2101      	movs	r1, #1
 800250e:	2001      	movs	r0, #1
 8002510:	f7fe f954 	bl	80007bc <lcd_print>
 8002514:	e008      	b.n	8002528 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <menu+0xe3c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d104      	bne.n	8002528 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800251e:	4a66      	ldr	r2, [pc, #408]	; (80026b8 <menu+0xe60>)
 8002520:	2101      	movs	r1, #1
 8002522:	2001      	movs	r0, #1
 8002524:	f7fe f94a 	bl	80007bc <lcd_print>
		}

		if(altLimit == 0) {
 8002528:	4b64      	ldr	r3, [pc, #400]	; (80026bc <menu+0xe64>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <menu+0xd00>
			if(dilSecim == 0) {
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <menu+0xe3c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002538:	4a61      	ldr	r2, [pc, #388]	; (80026c0 <menu+0xe68>)
 800253a:	2101      	movs	r1, #1
 800253c:	2002      	movs	r0, #2
 800253e:	f7fe f93d 	bl	80007bc <lcd_print>
 8002542:	e020      	b.n	8002586 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <menu+0xe3c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d11c      	bne.n	8002586 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 800254c:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <menu+0xe6c>)
 800254e:	2101      	movs	r1, #1
 8002550:	2002      	movs	r0, #2
 8002552:	f7fe f933 	bl	80007bc <lcd_print>
 8002556:	e016      	b.n	8002586 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002558:	4b58      	ldr	r3, [pc, #352]	; (80026bc <menu+0xe64>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d112      	bne.n	8002586 <menu+0xd2e>
			if(dilSecim == 0){
 8002560:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <menu+0xe3c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002568:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <menu+0xe70>)
 800256a:	2101      	movs	r1, #1
 800256c:	2002      	movs	r0, #2
 800256e:	f7fe f925 	bl	80007bc <lcd_print>
 8002572:	e008      	b.n	8002586 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <menu+0xe3c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d104      	bne.n	8002586 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 800257c:	4a46      	ldr	r2, [pc, #280]	; (8002698 <menu+0xe40>)
 800257e:	2101      	movs	r1, #1
 8002580:	2002      	movs	r0, #2
 8002582:	f7fe f91b 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002586:	2102      	movs	r1, #2
 8002588:	4844      	ldr	r0, [pc, #272]	; (800269c <menu+0xe44>)
 800258a:	f006 fecb 	bl	8009324 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d119      	bne.n	80025c8 <menu+0xd70>
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <menu+0xe48>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d012      	beq.n	80025c8 <menu+0xd70>
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <menu+0xe74>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <menu+0xd70>
			altLimit = altLimit + 1;
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <menu+0xe64>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b42      	ldr	r3, [pc, #264]	; (80026bc <menu+0xe64>)
 80025b4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <menu+0xe64>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d902      	bls.n	80025c4 <menu+0xd6c>
				altLimit = 0;
 80025be:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <menu+0xe64>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c4:	f003 fa2e 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80025c8:	2104      	movs	r1, #4
 80025ca:	4834      	ldr	r0, [pc, #208]	; (800269c <menu+0xe44>)
 80025cc:	f006 feaa 	bl	8009324 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d119      	bne.n	800260a <menu+0xdb2>
 80025d6:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <menu+0xe48>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <menu+0xdb2>
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <menu+0xe74>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10e      	bne.n	800260a <menu+0xdb2>
			altLimit = altLimit - 1;
 80025ec:	4b33      	ldr	r3, [pc, #204]	; (80026bc <menu+0xe64>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <menu+0xe64>)
 80025f6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <menu+0xe64>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <menu+0xdae>
		   		altLimit = 1;
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <menu+0xe64>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002606:	f003 fa0d 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800260a:	2108      	movs	r1, #8
 800260c:	4823      	ldr	r0, [pc, #140]	; (800269c <menu+0xe44>)
 800260e:	f006 fe89 	bl	8009324 <HAL_GPIO_ReadPin>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d12d      	bne.n	8002674 <menu+0xe1c>
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <menu+0xe48>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d026      	beq.n	8002674 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <menu+0xe64>)
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <menu+0xe50>)
 800262c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <menu+0xe64>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d110      	bne.n	8002658 <menu+0xe00>
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <menu+0xe78>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <menu+0xdee>
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <menu+0xe78>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d108      	bne.n	8002658 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <menu+0xe78>)
 8002648:	2203      	movs	r2, #3
 800264a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <menu+0xe78>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <menu+0xe50>)
 8002652:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002656:	e00a      	b.n	800266e <menu+0xe16>
			} else if(altLimit == 0) {
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <menu+0xe64>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <menu+0xe16>
				platformSilindirTipi = 0;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <menu+0xe7c>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <menu+0xe7c>)
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <menu+0xe50>)
 800266c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <menu+0xe54>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <menu+0xe58>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b06      	cmp	r3, #6
 800267a:	f040 80b6 	bne.w	80027ea <menu+0xf92>
		if(dilSecim == 0) {
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <menu+0xe3c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12a      	bne.n	80026dc <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <menu+0xe80>)
 8002688:	2101      	movs	r1, #1
 800268a:	2001      	movs	r0, #1
 800268c:	f7fe f896 	bl	80007bc <lcd_print>
 8002690:	e02d      	b.n	80026ee <menu+0xe96>
 8002692:	bf00      	nop
 8002694:	2000033d 	.word	0x2000033d
 8002698:	0800d380 	.word	0x0800d380
 800269c:	40010800 	.word	0x40010800
 80026a0:	2000034b 	.word	0x2000034b
 80026a4:	20000321 	.word	0x20000321
 80026a8:	20000224 	.word	0x20000224
 80026ac:	20000348 	.word	0x20000348
 80026b0:	2000031c 	.word	0x2000031c
 80026b4:	0800d394 	.word	0x0800d394
 80026b8:	0800d3a8 	.word	0x0800d3a8
 80026bc:	20000322 	.word	0x20000322
 80026c0:	0800d30c 	.word	0x0800d30c
 80026c4:	0800d320 	.word	0x0800d320
 80026c8:	0800d36c 	.word	0x0800d36c
 80026cc:	2000031d 	.word	0x2000031d
 80026d0:	20000329 	.word	0x20000329
 80026d4:	2000032f 	.word	0x2000032f
 80026d8:	0800d3bc 	.word	0x0800d3bc
		} else if(dilSecim == 1){
 80026dc:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <menu+0x1070>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d104      	bne.n	80026ee <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80026e4:	4a79      	ldr	r2, [pc, #484]	; (80028cc <menu+0x1074>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7fe f867 	bl	80007bc <lcd_print>
		}
		if(basincSalteri == 0){
 80026ee:	4b78      	ldr	r3, [pc, #480]	; (80028d0 <menu+0x1078>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d113      	bne.n	800271e <menu+0xec6>
			if(dilSecim == 0) {
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <menu+0x1070>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <menu+0x107c>)
 8002700:	2101      	movs	r1, #1
 8002702:	2002      	movs	r0, #2
 8002704:	f7fe f85a 	bl	80007bc <lcd_print>
 8002708:	e020      	b.n	800274c <menu+0xef4>
			} else if(dilSecim == 1){
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <menu+0x1070>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d11c      	bne.n	800274c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002712:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <menu+0x1080>)
 8002714:	2101      	movs	r1, #1
 8002716:	2002      	movs	r0, #2
 8002718:	f7fe f850 	bl	80007bc <lcd_print>
 800271c:	e016      	b.n	800274c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <menu+0x1078>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d112      	bne.n	800274c <menu+0xef4>
			if(dilSecim == 0) {
 8002726:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <menu+0x1070>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800272e:	4a6b      	ldr	r2, [pc, #428]	; (80028dc <menu+0x1084>)
 8002730:	2101      	movs	r1, #1
 8002732:	2002      	movs	r0, #2
 8002734:	f7fe f842 	bl	80007bc <lcd_print>
 8002738:	e008      	b.n	800274c <menu+0xef4>
			} else if(dilSecim == 1) {
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <menu+0x1070>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d104      	bne.n	800274c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <menu+0x1088>)
 8002744:	2101      	movs	r1, #1
 8002746:	2002      	movs	r0, #2
 8002748:	f7fe f838 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800274c:	2102      	movs	r1, #2
 800274e:	4865      	ldr	r0, [pc, #404]	; (80028e4 <menu+0x108c>)
 8002750:	f006 fde8 	bl	8009324 <HAL_GPIO_ReadPin>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d115      	bne.n	8002786 <menu+0xf2e>
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <menu+0x1090>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	f083 0301 	eor.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <menu+0x1078>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <menu+0x1078>)
 8002772:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002774:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <menu+0x1078>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d902      	bls.n	8002782 <menu+0xf2a>
				basincSalteri = 0;
 800277c:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <menu+0x1078>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002782:	f003 f94f 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002786:	2104      	movs	r1, #4
 8002788:	4856      	ldr	r0, [pc, #344]	; (80028e4 <menu+0x108c>)
 800278a:	f006 fdcb 	bl	8009324 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d115      	bne.n	80027c0 <menu+0xf68>
 8002794:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <menu+0x1090>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00e      	beq.n	80027c0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80027a2:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <menu+0x1078>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <menu+0x1078>)
 80027ac:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <menu+0x1078>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <menu+0xf64>
		   		basincSalteri = 1;
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <menu+0x1078>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027bc:	f003 f932 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c0:	2108      	movs	r1, #8
 80027c2:	4848      	ldr	r0, [pc, #288]	; (80028e4 <menu+0x108c>)
 80027c4:	f006 fdae 	bl	8009324 <HAL_GPIO_ReadPin>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10d      	bne.n	80027ea <menu+0xf92>
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <menu+0x1090>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f083 0301 	eor.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <menu+0xf92>
			eepromData[6] = basincSalteri;
 80027dc:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <menu+0x1078>)
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	4b42      	ldr	r3, [pc, #264]	; (80028ec <menu+0x1094>)
 80027e2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <menu+0x1098>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80027ea:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <menu+0x109c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b07      	cmp	r3, #7
 80027f0:	f040 80f5 	bne.w	80029de <menu+0x1186>
		if(dilSecim == 0) {
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <menu+0x1070>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80027fc:	4a3e      	ldr	r2, [pc, #248]	; (80028f8 <menu+0x10a0>)
 80027fe:	2101      	movs	r1, #1
 8002800:	2001      	movs	r0, #1
 8002802:	f7fd ffdb 	bl	80007bc <lcd_print>
 8002806:	e008      	b.n	800281a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <menu+0x1070>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d104      	bne.n	800281a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <menu+0x10a4>)
 8002812:	2101      	movs	r1, #1
 8002814:	2001      	movs	r0, #1
 8002816:	f7fd ffd1 	bl	80007bc <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <menu+0x10a8>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <menu+0xff2>
			if(dilSecim == 0) {
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <menu+0x1070>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800282a:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <menu+0x107c>)
 800282c:	2101      	movs	r1, #1
 800282e:	2002      	movs	r0, #2
 8002830:	f7fd ffc4 	bl	80007bc <lcd_print>
 8002834:	e079      	b.n	800292a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <menu+0x1070>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d175      	bne.n	800292a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800283e:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <menu+0x1080>)
 8002840:	2101      	movs	r1, #1
 8002842:	2002      	movs	r0, #2
 8002844:	f7fd ffba 	bl	80007bc <lcd_print>
 8002848:	e06f      	b.n	800292a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <menu+0x10a8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d113      	bne.n	800287a <menu+0x1022>
			if(dilSecim == 0) {
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <menu+0x1070>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800285a:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <menu+0x10ac>)
 800285c:	2101      	movs	r1, #1
 800285e:	2002      	movs	r0, #2
 8002860:	f7fd ffac 	bl	80007bc <lcd_print>
 8002864:	e061      	b.n	800292a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <menu+0x1070>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d15d      	bne.n	800292a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800286e:	4a26      	ldr	r2, [pc, #152]	; (8002908 <menu+0x10b0>)
 8002870:	2101      	movs	r1, #1
 8002872:	2002      	movs	r0, #2
 8002874:	f7fd ffa2 	bl	80007bc <lcd_print>
 8002878:	e057      	b.n	800292a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <menu+0x10a8>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d113      	bne.n	80028aa <menu+0x1052>
			if(dilSecim == 0) {
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <menu+0x1070>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800288a:	4a20      	ldr	r2, [pc, #128]	; (800290c <menu+0x10b4>)
 800288c:	2101      	movs	r1, #1
 800288e:	2002      	movs	r0, #2
 8002890:	f7fd ff94 	bl	80007bc <lcd_print>
 8002894:	e049      	b.n	800292a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <menu+0x1070>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d145      	bne.n	800292a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <menu+0x10b8>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	2002      	movs	r0, #2
 80028a4:	f7fd ff8a 	bl	80007bc <lcd_print>
 80028a8:	e03f      	b.n	800292a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <menu+0x10a8>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d13b      	bne.n	800292a <menu+0x10d2>
			if(dilSecim == 0) {
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <menu+0x1070>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12e      	bne.n	8002918 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80028ba:	4a16      	ldr	r2, [pc, #88]	; (8002914 <menu+0x10bc>)
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f7fd ff7c 	bl	80007bc <lcd_print>
 80028c4:	e031      	b.n	800292a <menu+0x10d2>
 80028c6:	bf00      	nop
 80028c8:	2000033d 	.word	0x2000033d
 80028cc:	0800d3cc 	.word	0x0800d3cc
 80028d0:	20000323 	.word	0x20000323
 80028d4:	0800d30c 	.word	0x0800d30c
 80028d8:	0800d320 	.word	0x0800d320
 80028dc:	0800d36c 	.word	0x0800d36c
 80028e0:	0800d380 	.word	0x0800d380
 80028e4:	40010800 	.word	0x40010800
 80028e8:	2000034b 	.word	0x2000034b
 80028ec:	20000224 	.word	0x20000224
 80028f0:	20000348 	.word	0x20000348
 80028f4:	2000031c 	.word	0x2000031c
 80028f8:	0800d3dc 	.word	0x0800d3dc
 80028fc:	0800d3f0 	.word	0x0800d3f0
 8002900:	20000324 	.word	0x20000324
 8002904:	0800d404 	.word	0x0800d404
 8002908:	0800d418 	.word	0x0800d418
 800290c:	0800d42c 	.word	0x0800d42c
 8002910:	0800d440 	.word	0x0800d440
 8002914:	0800d454 	.word	0x0800d454
			} else if(dilSecim == 1){
 8002918:	4b99      	ldr	r3, [pc, #612]	; (8002b80 <menu+0x1328>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d104      	bne.n	800292a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002920:	4a98      	ldr	r2, [pc, #608]	; (8002b84 <menu+0x132c>)
 8002922:	2101      	movs	r1, #1
 8002924:	2002      	movs	r0, #2
 8002926:	f7fd ff49 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292a:	2102      	movs	r1, #2
 800292c:	4896      	ldr	r0, [pc, #600]	; (8002b88 <menu+0x1330>)
 800292e:	f006 fcf9 	bl	8009324 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d115      	bne.n	8002964 <menu+0x110c>
 8002938:	4b94      	ldr	r3, [pc, #592]	; (8002b8c <menu+0x1334>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00e      	beq.n	8002964 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002946:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <menu+0x1338>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b90      	ldr	r3, [pc, #576]	; (8002b90 <menu+0x1338>)
 8002950:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002952:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <menu+0x1338>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d902      	bls.n	8002960 <menu+0x1108>
				kapiSecimleri = 0;
 800295a:	4b8d      	ldr	r3, [pc, #564]	; (8002b90 <menu+0x1338>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002960:	f003 f860 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002964:	2104      	movs	r1, #4
 8002966:	4888      	ldr	r0, [pc, #544]	; (8002b88 <menu+0x1330>)
 8002968:	f006 fcdc 	bl	8009324 <HAL_GPIO_ReadPin>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d115      	bne.n	800299e <menu+0x1146>
 8002972:	4b86      	ldr	r3, [pc, #536]	; (8002b8c <menu+0x1334>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002980:	4b83      	ldr	r3, [pc, #524]	; (8002b90 <menu+0x1338>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <menu+0x1338>)
 800298a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800298c:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <menu+0x1338>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d902      	bls.n	800299a <menu+0x1142>
		   		kapiSecimleri = 3;
 8002994:	4b7e      	ldr	r3, [pc, #504]	; (8002b90 <menu+0x1338>)
 8002996:	2203      	movs	r2, #3
 8002998:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299a:	f003 f843 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800299e:	2108      	movs	r1, #8
 80029a0:	4879      	ldr	r0, [pc, #484]	; (8002b88 <menu+0x1330>)
 80029a2:	f006 fcbf 	bl	8009324 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d118      	bne.n	80029de <menu+0x1186>
 80029ac:	4b77      	ldr	r3, [pc, #476]	; (8002b8c <menu+0x1334>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d011      	beq.n	80029de <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80029ba:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <menu+0x1338>)
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	4b75      	ldr	r3, [pc, #468]	; (8002b94 <menu+0x133c>)
 80029c0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80029c2:	4b73      	ldr	r3, [pc, #460]	; (8002b90 <menu+0x1338>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <menu+0x1180>
				altLimit = 1;
 80029ca:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <menu+0x1340>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80029d0:	4b71      	ldr	r3, [pc, #452]	; (8002b98 <menu+0x1340>)
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <menu+0x133c>)
 80029d6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80029d8:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <menu+0x1344>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80029de:	4b70      	ldr	r3, [pc, #448]	; (8002ba0 <menu+0x1348>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	f040 8092 	bne.w	8002b0c <menu+0x12b4>
		if(dilSecim == 0) {
 80029e8:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <menu+0x1328>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80029f0:	4a6c      	ldr	r2, [pc, #432]	; (8002ba4 <menu+0x134c>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fd fee1 	bl	80007bc <lcd_print>
 80029fa:	e008      	b.n	8002a0e <menu+0x11b6>
		} else if(dilSecim == 1) {
 80029fc:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <menu+0x1328>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d104      	bne.n	8002a0e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002a04:	4a68      	ldr	r2, [pc, #416]	; (8002ba8 <menu+0x1350>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7fd fed7 	bl	80007bc <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <menu+0x1354>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d113      	bne.n	8002a3e <menu+0x11e6>
			if(dilSecim == 0) {
 8002a16:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <menu+0x1328>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002a1e:	4a64      	ldr	r2, [pc, #400]	; (8002bb0 <menu+0x1358>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	2002      	movs	r0, #2
 8002a24:	f7fd feca 	bl	80007bc <lcd_print>
 8002a28:	e020      	b.n	8002a6c <menu+0x1214>
			} else if(dilSecim == 1) {
 8002a2a:	4b55      	ldr	r3, [pc, #340]	; (8002b80 <menu+0x1328>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d11c      	bne.n	8002a6c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002a32:	4a60      	ldr	r2, [pc, #384]	; (8002bb4 <menu+0x135c>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	2002      	movs	r0, #2
 8002a38:	f7fd fec0 	bl	80007bc <lcd_print>
 8002a3c:	e016      	b.n	8002a6c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <menu+0x1354>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d112      	bne.n	8002a6c <menu+0x1214>
			if(dilSecim == 0){
 8002a46:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <menu+0x1328>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <menu+0x1360>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2002      	movs	r0, #2
 8002a54:	f7fd feb2 	bl	80007bc <lcd_print>
 8002a58:	e008      	b.n	8002a6c <menu+0x1214>
			} else if(dilSecim == 1){
 8002a5a:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <menu+0x1328>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d104      	bne.n	8002a6c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002a62:	4a56      	ldr	r2, [pc, #344]	; (8002bbc <menu+0x1364>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fd fea8 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4846      	ldr	r0, [pc, #280]	; (8002b88 <menu+0x1330>)
 8002a70:	f006 fc58 	bl	8009324 <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d115      	bne.n	8002aa6 <menu+0x124e>
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <menu+0x1334>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <menu+0x1354>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b46      	ldr	r3, [pc, #280]	; (8002bac <menu+0x1354>)
 8002a92:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002a94:	4b45      	ldr	r3, [pc, #276]	; (8002bac <menu+0x1354>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d902      	bls.n	8002aa2 <menu+0x124a>
				kapiAcTipi = 0;
 8002a9c:	4b43      	ldr	r3, [pc, #268]	; (8002bac <menu+0x1354>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002aa2:	f002 ffbf 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	4837      	ldr	r0, [pc, #220]	; (8002b88 <menu+0x1330>)
 8002aaa:	f006 fc3b 	bl	8009324 <HAL_GPIO_ReadPin>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d115      	bne.n	8002ae0 <menu+0x1288>
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <menu+0x1334>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00e      	beq.n	8002ae0 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <menu+0x1354>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <menu+0x1354>)
 8002acc:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <menu+0x1354>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <menu+0x1284>
		   		kapiAcTipi = 1;
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <menu+0x1354>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002adc:	f002 ffa2 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	4829      	ldr	r0, [pc, #164]	; (8002b88 <menu+0x1330>)
 8002ae4:	f006 fc1e 	bl	8009324 <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10e      	bne.n	8002b0c <menu+0x12b4>
 8002aee:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <menu+0x1334>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	f083 0301 	eor.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <menu+0x1354>)
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <menu+0x133c>)
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002b06:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <menu+0x1344>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <menu+0x1348>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	f040 80b9 	bne.w	8002c88 <menu+0x1430>
		if(dilSecim == 0){
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <menu+0x1328>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002b1e:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <menu+0x1368>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7fd fe4a 	bl	80007bc <lcd_print>
 8002b28:	e008      	b.n	8002b3c <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <menu+0x1328>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d104      	bne.n	8002b3c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002b32:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <menu+0x136c>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7fd fe40 	bl	80007bc <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <menu+0x1370>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <menu+0x1374>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	2002      	movs	r0, #2
 8002b4a:	f7fd fe37 	bl	80007bc <lcd_print>
 8002b4e:	e04c      	b.n	8002bea <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <menu+0x1370>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d13f      	bne.n	8002bd8 <menu+0x1380>
			if(dilSecim == 0){
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <menu+0x1328>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <menu+0x1378>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	2002      	movs	r0, #2
 8002b66:	f7fd fe29 	bl	80007bc <lcd_print>
 8002b6a:	e03e      	b.n	8002bea <menu+0x1392>
			} else if(dilSecim == 1) {
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <menu+0x1328>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d13a      	bne.n	8002bea <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <menu+0x137c>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f7fd fe1f 	bl	80007bc <lcd_print>
 8002b7e:	e034      	b.n	8002bea <menu+0x1392>
 8002b80:	2000033d 	.word	0x2000033d
 8002b84:	0800d468 	.word	0x0800d468
 8002b88:	40010800 	.word	0x40010800
 8002b8c:	2000034b 	.word	0x2000034b
 8002b90:	20000324 	.word	0x20000324
 8002b94:	20000224 	.word	0x20000224
 8002b98:	20000322 	.word	0x20000322
 8002b9c:	20000348 	.word	0x20000348
 8002ba0:	2000031c 	.word	0x2000031c
 8002ba4:	0800d47c 	.word	0x0800d47c
 8002ba8:	0800d490 	.word	0x0800d490
 8002bac:	20000328 	.word	0x20000328
 8002bb0:	0800d4a4 	.word	0x0800d4a4
 8002bb4:	0800d4b4 	.word	0x0800d4b4
 8002bb8:	0800d4c4 	.word	0x0800d4c4
 8002bbc:	0800d4d8 	.word	0x0800d4d8
 8002bc0:	0800d4ec 	.word	0x0800d4ec
 8002bc4:	0800d500 	.word	0x0800d500
 8002bc8:	20000325 	.word	0x20000325
 8002bcc:	0800d514 	.word	0x0800d514
 8002bd0:	0800d528 	.word	0x0800d528
 8002bd4:	0800d538 	.word	0x0800d538
			}
		} else if(kapi1Tip == 2) {
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	; (8002e04 <menu+0x15ac>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d104      	bne.n	8002bea <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002be0:	4a89      	ldr	r2, [pc, #548]	; (8002e08 <menu+0x15b0>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	2002      	movs	r0, #2
 8002be6:	f7fd fde9 	bl	80007bc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bea:	2102      	movs	r1, #2
 8002bec:	4887      	ldr	r0, [pc, #540]	; (8002e0c <menu+0x15b4>)
 8002bee:	f006 fb99 	bl	8009324 <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d115      	bne.n	8002c24 <menu+0x13cc>
 8002bf8:	4b85      	ldr	r3, [pc, #532]	; (8002e10 <menu+0x15b8>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	f083 0301 	eor.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00e      	beq.n	8002c24 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002c06:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <menu+0x15ac>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b7d      	ldr	r3, [pc, #500]	; (8002e04 <menu+0x15ac>)
 8002c10:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002c12:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <menu+0x15ac>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <menu+0x13c8>
				kapi1Tip = 0;
 8002c1a:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <menu+0x15ac>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c20:	f002 ff00 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c24:	2104      	movs	r1, #4
 8002c26:	4879      	ldr	r0, [pc, #484]	; (8002e0c <menu+0x15b4>)
 8002c28:	f006 fb7c 	bl	8009324 <HAL_GPIO_ReadPin>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d115      	bne.n	8002c5e <menu+0x1406>
 8002c32:	4b77      	ldr	r3, [pc, #476]	; (8002e10 <menu+0x15b8>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002c40:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <menu+0x15ac>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b6e      	ldr	r3, [pc, #440]	; (8002e04 <menu+0x15ac>)
 8002c4a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002c4c:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <menu+0x15ac>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d902      	bls.n	8002c5a <menu+0x1402>
		   		kapi1Tip = 2;
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <menu+0x15ac>)
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c5a:	f002 fee3 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5e:	2108      	movs	r1, #8
 8002c60:	486a      	ldr	r0, [pc, #424]	; (8002e0c <menu+0x15b4>)
 8002c62:	f006 fb5f 	bl	8009324 <HAL_GPIO_ReadPin>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10d      	bne.n	8002c88 <menu+0x1430>
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <menu+0x15b8>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002c7a:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <menu+0x15ac>)
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <menu+0x15bc>)
 8002c80:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <menu+0x15c0>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002c88:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <menu+0x15c4>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b0a      	cmp	r3, #10
 8002c8e:	d17f      	bne.n	8002d90 <menu+0x1538>
		if(dilSecim == 0) {
 8002c90:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <menu+0x15c8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002c98:	4a62      	ldr	r2, [pc, #392]	; (8002e24 <menu+0x15cc>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7fd fd8d 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ca2:	4a61      	ldr	r2, [pc, #388]	; (8002e28 <menu+0x15d0>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f7fd fd88 	bl	80007bc <lcd_print>
 8002cac:	e00d      	b.n	8002cca <menu+0x1472>
		} else if(dilSecim == 1) {
 8002cae:	4b5c      	ldr	r3, [pc, #368]	; (8002e20 <menu+0x15c8>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d109      	bne.n	8002cca <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002cb6:	4a5d      	ldr	r2, [pc, #372]	; (8002e2c <menu+0x15d4>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7fd fd7e 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002cc0:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <menu+0x15d8>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f7fd fd79 	bl	80007bc <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002cca:	4b5a      	ldr	r3, [pc, #360]	; (8002e34 <menu+0x15dc>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	220a      	movs	r2, #10
 8002cd0:	4959      	ldr	r1, [pc, #356]	; (8002e38 <menu+0x15e0>)
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f009 fb52 	bl	800c37c <itoa>
		lcd_print(2,16,snum);
 8002cd8:	4a57      	ldr	r2, [pc, #348]	; (8002e38 <menu+0x15e0>)
 8002cda:	2110      	movs	r1, #16
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f7fd fd6d 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4849      	ldr	r0, [pc, #292]	; (8002e0c <menu+0x15b4>)
 8002ce6:	f006 fb1d 	bl	8009324 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <menu+0x14cc>
 8002cf0:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <menu+0x15b8>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <menu+0x14cc>
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <menu+0x15ac>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10e      	bne.n	8002d24 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002d06:	4b4b      	ldr	r3, [pc, #300]	; (8002e34 <menu+0x15dc>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <menu+0x15dc>)
 8002d10:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002d12:	4b48      	ldr	r3, [pc, #288]	; (8002e34 <menu+0x15dc>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d902      	bls.n	8002d20 <menu+0x14c8>
				kapi1AcSure = 0;
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <menu+0x15dc>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d20:	f002 fe80 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002d24:	2104      	movs	r1, #4
 8002d26:	4839      	ldr	r0, [pc, #228]	; (8002e0c <menu+0x15b4>)
 8002d28:	f006 fafc 	bl	8009324 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d119      	bne.n	8002d66 <menu+0x150e>
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <menu+0x15b8>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d012      	beq.n	8002d66 <menu+0x150e>
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <menu+0x15ac>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10e      	bne.n	8002d66 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002d48:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <menu+0x15dc>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <menu+0x15dc>)
 8002d52:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <menu+0x15dc>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d902      	bls.n	8002d62 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <menu+0x15dc>)
 8002d5e:	2205      	movs	r2, #5
 8002d60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d62:	f002 fe5f 	bl	8005a24 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d66:	2108      	movs	r1, #8
 8002d68:	4828      	ldr	r0, [pc, #160]	; (8002e0c <menu+0x15b4>)
 8002d6a:	f006 fadb 	bl	8009324 <HAL_GPIO_ReadPin>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10d      	bne.n	8002d90 <menu+0x1538>
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <menu+0x15b8>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f083 0301 	eor.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <menu+0x15dc>)
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <menu+0x15bc>)
 8002d88:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <menu+0x15c0>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <menu+0x15c4>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b0b      	cmp	r3, #11
 8002d96:	f040 80b5 	bne.w	8002f04 <menu+0x16ac>
		if(dilSecim == 0) {
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <menu+0x15c8>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <menu+0x15e4>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd fd08 	bl	80007bc <lcd_print>
 8002dac:	e008      	b.n	8002dc0 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <menu+0x15c8>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002db6:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <menu+0x15e8>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7fd fcfe 	bl	80007bc <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002dc0:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <menu+0x15ec>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <menu+0x15f0>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f7fd fcf5 	bl	80007bc <lcd_print>
 8002dd2:	e048      	b.n	8002e66 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <menu+0x15ec>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d13b      	bne.n	8002e54 <menu+0x15fc>
			if(dilSecim == 0) {
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <menu+0x15c8>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <menu+0x15f4>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	2002      	movs	r0, #2
 8002dea:	f7fd fce7 	bl	80007bc <lcd_print>
 8002dee:	e03a      	b.n	8002e66 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <menu+0x15c8>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d136      	bne.n	8002e66 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <menu+0x15f8>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f7fd fcdd 	bl	80007bc <lcd_print>
 8002e02:	e030      	b.n	8002e66 <menu+0x160e>
 8002e04:	20000325 	.word	0x20000325
 8002e08:	0800d54c 	.word	0x0800d54c
 8002e0c:	40010800 	.word	0x40010800
 8002e10:	2000034b 	.word	0x2000034b
 8002e14:	20000224 	.word	0x20000224
 8002e18:	20000348 	.word	0x20000348
 8002e1c:	2000031c 	.word	0x2000031c
 8002e20:	2000033d 	.word	0x2000033d
 8002e24:	0800d55c 	.word	0x0800d55c
 8002e28:	0800d570 	.word	0x0800d570
 8002e2c:	0800d580 	.word	0x0800d580
 8002e30:	0800d594 	.word	0x0800d594
 8002e34:	20000335 	.word	0x20000335
 8002e38:	20000294 	.word	0x20000294
 8002e3c:	0800d5a4 	.word	0x0800d5a4
 8002e40:	0800d5b8 	.word	0x0800d5b8
 8002e44:	20000326 	.word	0x20000326
 8002e48:	0800d514 	.word	0x0800d514
 8002e4c:	0800d528 	.word	0x0800d528
 8002e50:	0800d538 	.word	0x0800d538
			}
		} else if(kapi2Tip == 2) {
 8002e54:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <menu+0x1828>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d104      	bne.n	8002e66 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002e5c:	4a89      	ldr	r2, [pc, #548]	; (8003084 <menu+0x182c>)
 8002e5e:	2101      	movs	r1, #1
 8002e60:	2002      	movs	r0, #2
 8002e62:	f7fd fcab 	bl	80007bc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e66:	2102      	movs	r1, #2
 8002e68:	4887      	ldr	r0, [pc, #540]	; (8003088 <menu+0x1830>)
 8002e6a:	f006 fa5b 	bl	8009324 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d115      	bne.n	8002ea0 <menu+0x1648>
 8002e74:	4b85      	ldr	r3, [pc, #532]	; (800308c <menu+0x1834>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f083 0301 	eor.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00e      	beq.n	8002ea0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002e82:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <menu+0x1828>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b7d      	ldr	r3, [pc, #500]	; (8003080 <menu+0x1828>)
 8002e8c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002e8e:	4b7c      	ldr	r3, [pc, #496]	; (8003080 <menu+0x1828>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <menu+0x1644>
				kapi2Tip = 0;
 8002e96:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <menu+0x1828>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e9c:	f002 fdc2 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	4879      	ldr	r0, [pc, #484]	; (8003088 <menu+0x1830>)
 8002ea4:	f006 fa3e 	bl	8009324 <HAL_GPIO_ReadPin>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d115      	bne.n	8002eda <menu+0x1682>
 8002eae:	4b77      	ldr	r3, [pc, #476]	; (800308c <menu+0x1834>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	f083 0301 	eor.w	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002ebc:	4b70      	ldr	r3, [pc, #448]	; (8003080 <menu+0x1828>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	4b6e      	ldr	r3, [pc, #440]	; (8003080 <menu+0x1828>)
 8002ec6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <menu+0x1828>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d902      	bls.n	8002ed6 <menu+0x167e>
		   		kapi2Tip = 2;
 8002ed0:	4b6b      	ldr	r3, [pc, #428]	; (8003080 <menu+0x1828>)
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ed6:	f002 fda5 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eda:	2108      	movs	r1, #8
 8002edc:	486a      	ldr	r0, [pc, #424]	; (8003088 <menu+0x1830>)
 8002ede:	f006 fa21 	bl	8009324 <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10d      	bne.n	8002f04 <menu+0x16ac>
 8002ee8:	4b68      	ldr	r3, [pc, #416]	; (800308c <menu+0x1834>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002ef6:	4b62      	ldr	r3, [pc, #392]	; (8003080 <menu+0x1828>)
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <menu+0x1838>)
 8002efc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002efe:	4b65      	ldr	r3, [pc, #404]	; (8003094 <menu+0x183c>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <menu+0x1840>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d17f      	bne.n	800300c <menu+0x17b4>
		if(dilSecim == 0) {
 8002f0c:	4b63      	ldr	r3, [pc, #396]	; (800309c <menu+0x1844>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002f14:	4a62      	ldr	r2, [pc, #392]	; (80030a0 <menu+0x1848>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f7fd fc4f 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f1e:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <menu+0x184c>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	2002      	movs	r0, #2
 8002f24:	f7fd fc4a 	bl	80007bc <lcd_print>
 8002f28:	e00d      	b.n	8002f46 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002f2a:	4b5c      	ldr	r3, [pc, #368]	; (800309c <menu+0x1844>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d109      	bne.n	8002f46 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002f32:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <menu+0x1850>)
 8002f34:	2101      	movs	r1, #1
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fd fc40 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f3c:	4a5b      	ldr	r2, [pc, #364]	; (80030ac <menu+0x1854>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2002      	movs	r0, #2
 8002f42:	f7fd fc3b 	bl	80007bc <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002f46:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <menu+0x1858>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	220a      	movs	r2, #10
 8002f4c:	4959      	ldr	r1, [pc, #356]	; (80030b4 <menu+0x185c>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f009 fa14 	bl	800c37c <itoa>
		lcd_print(2,16,snum);
 8002f54:	4a57      	ldr	r2, [pc, #348]	; (80030b4 <menu+0x185c>)
 8002f56:	2110      	movs	r1, #16
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f7fd fc2f 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002f5e:	2102      	movs	r1, #2
 8002f60:	4849      	ldr	r0, [pc, #292]	; (8003088 <menu+0x1830>)
 8002f62:	f006 f9df 	bl	8009324 <HAL_GPIO_ReadPin>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d119      	bne.n	8002fa0 <menu+0x1748>
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <menu+0x1834>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	f083 0301 	eor.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <menu+0x1748>
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <menu+0x1828>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10e      	bne.n	8002fa0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002f82:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <menu+0x1858>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <menu+0x1858>)
 8002f8c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002f8e:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <menu+0x1858>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d902      	bls.n	8002f9c <menu+0x1744>
				kapi2AcSure = 0;
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <menu+0x1858>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f9c:	f002 fd42 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	4839      	ldr	r0, [pc, #228]	; (8003088 <menu+0x1830>)
 8002fa4:	f006 f9be 	bl	8009324 <HAL_GPIO_ReadPin>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d119      	bne.n	8002fe2 <menu+0x178a>
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <menu+0x1834>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	f083 0301 	eor.w	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <menu+0x178a>
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <menu+0x1828>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10e      	bne.n	8002fe2 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002fc4:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <menu+0x1858>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <menu+0x1858>)
 8002fce:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <menu+0x1858>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b06      	cmp	r3, #6
 8002fd6:	d902      	bls.n	8002fde <menu+0x1786>
		   		kapi2AcSure = 5;
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <menu+0x1858>)
 8002fda:	2205      	movs	r2, #5
 8002fdc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fde:	f002 fd21 	bl	8005a24 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	4828      	ldr	r0, [pc, #160]	; (8003088 <menu+0x1830>)
 8002fe6:	f006 f99d 	bl	8009324 <HAL_GPIO_ReadPin>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10d      	bne.n	800300c <menu+0x17b4>
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <menu+0x1834>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <menu+0x1858>)
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <menu+0x1838>)
 8003004:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <menu+0x183c>)
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <menu+0x1840>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b0d      	cmp	r3, #13
 8003012:	f040 80b5 	bne.w	8003180 <menu+0x1928>
		if(dilSecim == 0) {
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <menu+0x1844>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800301e:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <menu+0x1860>)
 8003020:	2101      	movs	r1, #1
 8003022:	2001      	movs	r0, #1
 8003024:	f7fd fbca 	bl	80007bc <lcd_print>
 8003028:	e008      	b.n	800303c <menu+0x17e4>
		} else if(dilSecim == 1){
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <menu+0x1844>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d104      	bne.n	800303c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <menu+0x1864>)
 8003034:	2101      	movs	r1, #1
 8003036:	2001      	movs	r0, #1
 8003038:	f7fd fbc0 	bl	80007bc <lcd_print>
		}

		if(kapitablaTip == 0) {
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <menu+0x1868>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <menu+0x186c>)
 8003046:	2101      	movs	r1, #1
 8003048:	2002      	movs	r0, #2
 800304a:	f7fd fbb7 	bl	80007bc <lcd_print>
 800304e:	e048      	b.n	80030e2 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <menu+0x1868>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d13b      	bne.n	80030d0 <menu+0x1878>
			if(dilSecim == 0) {
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <menu+0x1844>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <menu+0x1870>)
 8003062:	2101      	movs	r1, #1
 8003064:	2002      	movs	r0, #2
 8003066:	f7fd fba9 	bl	80007bc <lcd_print>
 800306a:	e03a      	b.n	80030e2 <menu+0x188a>
			} else if(dilSecim == 1) {
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <menu+0x1844>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d136      	bne.n	80030e2 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <menu+0x1874>)
 8003076:	2101      	movs	r1, #1
 8003078:	2002      	movs	r0, #2
 800307a:	f7fd fb9f 	bl	80007bc <lcd_print>
 800307e:	e030      	b.n	80030e2 <menu+0x188a>
 8003080:	20000326 	.word	0x20000326
 8003084:	0800d54c 	.word	0x0800d54c
 8003088:	40010800 	.word	0x40010800
 800308c:	2000034b 	.word	0x2000034b
 8003090:	20000224 	.word	0x20000224
 8003094:	20000348 	.word	0x20000348
 8003098:	2000031c 	.word	0x2000031c
 800309c:	2000033d 	.word	0x2000033d
 80030a0:	0800d5cc 	.word	0x0800d5cc
 80030a4:	0800d570 	.word	0x0800d570
 80030a8:	0800d5e0 	.word	0x0800d5e0
 80030ac:	0800d594 	.word	0x0800d594
 80030b0:	20000336 	.word	0x20000336
 80030b4:	20000294 	.word	0x20000294
 80030b8:	0800d5f4 	.word	0x0800d5f4
 80030bc:	0800d608 	.word	0x0800d608
 80030c0:	20000327 	.word	0x20000327
 80030c4:	0800d514 	.word	0x0800d514
 80030c8:	0800d528 	.word	0x0800d528
 80030cc:	0800d538 	.word	0x0800d538
			}
		} else if(kapitablaTip == 2) {
 80030d0:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <menu+0x19e8>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d104      	bne.n	80030e2 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 80030d8:	4a5a      	ldr	r2, [pc, #360]	; (8003244 <menu+0x19ec>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f7fd fb6d 	bl	80007bc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030e2:	2102      	movs	r1, #2
 80030e4:	4858      	ldr	r0, [pc, #352]	; (8003248 <menu+0x19f0>)
 80030e6:	f006 f91d 	bl	8009324 <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d115      	bne.n	800311c <menu+0x18c4>
 80030f0:	4b56      	ldr	r3, [pc, #344]	; (800324c <menu+0x19f4>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80030fe:	4b50      	ldr	r3, [pc, #320]	; (8003240 <menu+0x19e8>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4b4e      	ldr	r3, [pc, #312]	; (8003240 <menu+0x19e8>)
 8003108:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800310a:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <menu+0x19e8>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <menu+0x18c0>
				kapitablaTip = 0;
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <menu+0x19e8>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003118:	f002 fc84 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800311c:	2104      	movs	r1, #4
 800311e:	484a      	ldr	r0, [pc, #296]	; (8003248 <menu+0x19f0>)
 8003120:	f006 f900 	bl	8009324 <HAL_GPIO_ReadPin>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d115      	bne.n	8003156 <menu+0x18fe>
 800312a:	4b48      	ldr	r3, [pc, #288]	; (800324c <menu+0x19f4>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	f083 0301 	eor.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <menu+0x19e8>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	b2da      	uxtb	r2, r3
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <menu+0x19e8>)
 8003142:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <menu+0x19e8>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d902      	bls.n	8003152 <menu+0x18fa>
		   		kapitablaTip = 2;
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <menu+0x19e8>)
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003152:	f002 fc67 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003156:	2108      	movs	r1, #8
 8003158:	483b      	ldr	r0, [pc, #236]	; (8003248 <menu+0x19f0>)
 800315a:	f006 f8e3 	bl	8009324 <HAL_GPIO_ReadPin>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10d      	bne.n	8003180 <menu+0x1928>
 8003164:	4b39      	ldr	r3, [pc, #228]	; (800324c <menu+0x19f4>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <menu+0x19e8>)
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <menu+0x19f8>)
 8003178:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <menu+0x19fc>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8003180:	4b35      	ldr	r3, [pc, #212]	; (8003258 <menu+0x1a00>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b0e      	cmp	r3, #14
 8003186:	f040 80f2 	bne.w	800336e <menu+0x1b16>
		if(dilSecim == 0) {
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <menu+0x1a04>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8003192:	4a33      	ldr	r2, [pc, #204]	; (8003260 <menu+0x1a08>)
 8003194:	2101      	movs	r1, #1
 8003196:	2001      	movs	r0, #1
 8003198:	f7fd fb10 	bl	80007bc <lcd_print>
 800319c:	e008      	b.n	80031b0 <menu+0x1958>
		} else if(dilSecim == 1) {
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <menu+0x1a04>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d104      	bne.n	80031b0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <menu+0x1a0c>)
 80031a8:	2101      	movs	r1, #1
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7fd fb06 	bl	80007bc <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <menu+0x1a10>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d113      	bne.n	80031e0 <menu+0x1988>
			if(dilSecim == 0){
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <menu+0x1a04>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 80031c0:	4a2a      	ldr	r2, [pc, #168]	; (800326c <menu+0x1a14>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f7fd faf9 	bl	80007bc <lcd_print>
 80031ca:	e071      	b.n	80032b0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <menu+0x1a04>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d16d      	bne.n	80032b0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 80031d4:	4a26      	ldr	r2, [pc, #152]	; (8003270 <menu+0x1a18>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	2002      	movs	r0, #2
 80031da:	f7fd faef 	bl	80007bc <lcd_print>
 80031de:	e067      	b.n	80032b0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <menu+0x1a10>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d112      	bne.n	800320e <menu+0x19b6>
			if(dilSecim == 0){
 80031e8:	4b1c      	ldr	r3, [pc, #112]	; (800325c <menu+0x1a04>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 80031f0:	4a20      	ldr	r2, [pc, #128]	; (8003274 <menu+0x1a1c>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f7fd fae1 	bl	80007bc <lcd_print>
			}
			if(dilSecim == 1){
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <menu+0x1a04>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d156      	bne.n	80032b0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8003202:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <menu+0x1a20>)
 8003204:	2101      	movs	r1, #1
 8003206:	2002      	movs	r0, #2
 8003208:	f7fd fad8 	bl	80007bc <lcd_print>
 800320c:	e050      	b.n	80032b0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <menu+0x1a10>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d136      	bne.n	8003284 <menu+0x1a2c>
			if(dilSecim == 0){
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <menu+0x1a04>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <menu+0x1a24>)
 8003220:	2101      	movs	r1, #1
 8003222:	2002      	movs	r0, #2
 8003224:	f7fd faca 	bl	80007bc <lcd_print>
 8003228:	e042      	b.n	80032b0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <menu+0x1a04>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d13e      	bne.n	80032b0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <menu+0x1a28>)
 8003234:	2101      	movs	r1, #1
 8003236:	2002      	movs	r0, #2
 8003238:	f7fd fac0 	bl	80007bc <lcd_print>
 800323c:	e038      	b.n	80032b0 <menu+0x1a58>
 800323e:	bf00      	nop
 8003240:	20000327 	.word	0x20000327
 8003244:	0800d54c 	.word	0x0800d54c
 8003248:	40010800 	.word	0x40010800
 800324c:	2000034b 	.word	0x2000034b
 8003250:	20000224 	.word	0x20000224
 8003254:	20000348 	.word	0x20000348
 8003258:	2000031c 	.word	0x2000031c
 800325c:	2000033d 	.word	0x2000033d
 8003260:	0800d61c 	.word	0x0800d61c
 8003264:	0800d630 	.word	0x0800d630
 8003268:	20000329 	.word	0x20000329
 800326c:	0800d644 	.word	0x0800d644
 8003270:	0800d654 	.word	0x0800d654
 8003274:	0800d664 	.word	0x0800d664
 8003278:	0800d674 	.word	0x0800d674
 800327c:	0800d684 	.word	0x0800d684
 8003280:	0800d698 	.word	0x0800d698
			}
		} else if(kapiTablaAcKonum == 3) {
 8003284:	4b9b      	ldr	r3, [pc, #620]	; (80034f4 <menu+0x1c9c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d111      	bne.n	80032b0 <menu+0x1a58>
			if(dilSecim == 0) {
 800328c:	4b9a      	ldr	r3, [pc, #616]	; (80034f8 <menu+0x1ca0>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003294:	4a99      	ldr	r2, [pc, #612]	; (80034fc <menu+0x1ca4>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f7fd fa8f 	bl	80007bc <lcd_print>
			}
			if(dilSecim == 1) {
 800329e:	4b96      	ldr	r3, [pc, #600]	; (80034f8 <menu+0x1ca0>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d104      	bne.n	80032b0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 80032a6:	4a96      	ldr	r2, [pc, #600]	; (8003500 <menu+0x1ca8>)
 80032a8:	2101      	movs	r1, #1
 80032aa:	2002      	movs	r0, #2
 80032ac:	f7fd fa86 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b0:	2102      	movs	r1, #2
 80032b2:	4894      	ldr	r0, [pc, #592]	; (8003504 <menu+0x1cac>)
 80032b4:	f006 f836 	bl	8009324 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d115      	bne.n	80032ea <menu+0x1a92>
 80032be:	4b92      	ldr	r3, [pc, #584]	; (8003508 <menu+0x1cb0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80032cc:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <menu+0x1c9c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b87      	ldr	r3, [pc, #540]	; (80034f4 <menu+0x1c9c>)
 80032d6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80032d8:	4b86      	ldr	r3, [pc, #536]	; (80034f4 <menu+0x1c9c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 80032e0:	4b84      	ldr	r3, [pc, #528]	; (80034f4 <menu+0x1c9c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e6:	f002 fb9d 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ea:	2104      	movs	r1, #4
 80032ec:	4885      	ldr	r0, [pc, #532]	; (8003504 <menu+0x1cac>)
 80032ee:	f006 f819 	bl	8009324 <HAL_GPIO_ReadPin>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d115      	bne.n	8003324 <menu+0x1acc>
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <menu+0x1cb0>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003306:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <menu+0x1c9c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	3b01      	subs	r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <menu+0x1c9c>)
 8003310:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8003312:	4b78      	ldr	r3, [pc, #480]	; (80034f4 <menu+0x1c9c>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d902      	bls.n	8003320 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <menu+0x1c9c>)
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003320:	f002 fb80 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003324:	2108      	movs	r1, #8
 8003326:	4877      	ldr	r0, [pc, #476]	; (8003504 <menu+0x1cac>)
 8003328:	f005 fffc 	bl	8009324 <HAL_GPIO_ReadPin>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d11d      	bne.n	800336e <menu+0x1b16>
 8003332:	4b75      	ldr	r3, [pc, #468]	; (8003508 <menu+0x1cb0>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8003340:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <menu+0x1c9c>)
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	4b71      	ldr	r3, [pc, #452]	; (800350c <menu+0x1cb4>)
 8003346:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800334a:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <menu+0x1c9c>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <menu+0x1b02>
 8003352:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <menu+0x1c9c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d106      	bne.n	8003368 <menu+0x1b10>
				altLimit = 1;
 800335a:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <menu+0x1cb8>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003360:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <menu+0x1cb8>)
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	4b69      	ldr	r3, [pc, #420]	; (800350c <menu+0x1cb4>)
 8003366:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003368:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <menu+0x1cbc>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800336e:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <menu+0x1cc0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d17f      	bne.n	8003476 <menu+0x1c1e>
		if(dilSecim == 0) {
 8003376:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <menu+0x1ca0>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800337e:	4a67      	ldr	r2, [pc, #412]	; (800351c <menu+0x1cc4>)
 8003380:	2101      	movs	r1, #1
 8003382:	2001      	movs	r0, #1
 8003384:	f7fd fa1a 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003388:	4a65      	ldr	r2, [pc, #404]	; (8003520 <menu+0x1cc8>)
 800338a:	2101      	movs	r1, #1
 800338c:	2002      	movs	r0, #2
 800338e:	f7fd fa15 	bl	80007bc <lcd_print>
 8003392:	e00d      	b.n	80033b0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003394:	4b58      	ldr	r3, [pc, #352]	; (80034f8 <menu+0x1ca0>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d109      	bne.n	80033b0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800339c:	4a61      	ldr	r2, [pc, #388]	; (8003524 <menu+0x1ccc>)
 800339e:	2101      	movs	r1, #1
 80033a0:	2001      	movs	r0, #1
 80033a2:	f7fd fa0b 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80033a6:	4a60      	ldr	r2, [pc, #384]	; (8003528 <menu+0x1cd0>)
 80033a8:	2101      	movs	r1, #1
 80033aa:	2002      	movs	r0, #2
 80033ac:	f7fd fa06 	bl	80007bc <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80033b0:	4b5e      	ldr	r3, [pc, #376]	; (800352c <menu+0x1cd4>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	220a      	movs	r2, #10
 80033b6:	495e      	ldr	r1, [pc, #376]	; (8003530 <menu+0x1cd8>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f008 ffdf 	bl	800c37c <itoa>
		lcd_print(2,16,snum);
 80033be:	4a5c      	ldr	r2, [pc, #368]	; (8003530 <menu+0x1cd8>)
 80033c0:	2110      	movs	r1, #16
 80033c2:	2002      	movs	r0, #2
 80033c4:	f7fd f9fa 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80033c8:	2102      	movs	r1, #2
 80033ca:	484e      	ldr	r0, [pc, #312]	; (8003504 <menu+0x1cac>)
 80033cc:	f005 ffaa 	bl	8009324 <HAL_GPIO_ReadPin>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d119      	bne.n	800340a <menu+0x1bb2>
 80033d6:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <menu+0x1cb0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f083 0301 	eor.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <menu+0x1bb2>
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <menu+0x1cdc>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80033ec:	4b4f      	ldr	r3, [pc, #316]	; (800352c <menu+0x1cd4>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b4d      	ldr	r3, [pc, #308]	; (800352c <menu+0x1cd4>)
 80033f6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80033f8:	4b4c      	ldr	r3, [pc, #304]	; (800352c <menu+0x1cd4>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d902      	bls.n	8003406 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003400:	4b4a      	ldr	r3, [pc, #296]	; (800352c <menu+0x1cd4>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003406:	f002 fb0d 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800340a:	2104      	movs	r1, #4
 800340c:	483d      	ldr	r0, [pc, #244]	; (8003504 <menu+0x1cac>)
 800340e:	f005 ff89 	bl	8009324 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d119      	bne.n	800344c <menu+0x1bf4>
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <menu+0x1cb0>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <menu+0x1bf4>
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <menu+0x1cdc>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10e      	bne.n	800344c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <menu+0x1cd4>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <menu+0x1cd4>)
 8003438:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800343a:	4b3c      	ldr	r3, [pc, #240]	; (800352c <menu+0x1cd4>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8003442:	4b3a      	ldr	r3, [pc, #232]	; (800352c <menu+0x1cd4>)
 8003444:	2205      	movs	r2, #5
 8003446:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003448:	f002 faec 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800344c:	2108      	movs	r1, #8
 800344e:	482d      	ldr	r0, [pc, #180]	; (8003504 <menu+0x1cac>)
 8003450:	f005 ff68 	bl	8009324 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10d      	bne.n	8003476 <menu+0x1c1e>
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <menu+0x1cb0>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003468:	4b30      	ldr	r3, [pc, #192]	; (800352c <menu+0x1cd4>)
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <menu+0x1cb4>)
 800346e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <menu+0x1cbc>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <menu+0x1cc0>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b10      	cmp	r3, #16
 800347c:	f040 80bc 	bne.w	80035f8 <menu+0x1da0>
		if(dilSecim == 0) {
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <menu+0x1ca0>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003488:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <menu+0x1ce0>)
 800348a:	2101      	movs	r1, #1
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd f995 	bl	80007bc <lcd_print>
 8003492:	e008      	b.n	80034a6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <menu+0x1ca0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d104      	bne.n	80034a6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800349c:	4a27      	ldr	r2, [pc, #156]	; (800353c <menu+0x1ce4>)
 800349e:	2101      	movs	r1, #1
 80034a0:	2001      	movs	r0, #1
 80034a2:	f7fd f98b 	bl	80007bc <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <menu+0x1ce8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d113      	bne.n	80034d6 <menu+0x1c7e>
			if(dilSecim == 0) {
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <menu+0x1ca0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <menu+0x1ca4>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	2002      	movs	r0, #2
 80034bc:	f7fd f97e 	bl	80007bc <lcd_print>
 80034c0:	e04b      	b.n	800355a <menu+0x1d02>
			} else if(dilSecim == 1) {
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <menu+0x1ca0>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d147      	bne.n	800355a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80034ca:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <menu+0x1ca8>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	2002      	movs	r0, #2
 80034d0:	f7fd f974 	bl	80007bc <lcd_print>
 80034d4:	e041      	b.n	800355a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <menu+0x1ce8>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d13d      	bne.n	800355a <menu+0x1d02>
			if(dilSecim == 0) {
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <menu+0x1ca0>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d130      	bne.n	8003548 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <menu+0x1cec>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	2002      	movs	r0, #2
 80034ec:	f7fd f966 	bl	80007bc <lcd_print>
 80034f0:	e033      	b.n	800355a <menu+0x1d02>
 80034f2:	bf00      	nop
 80034f4:	20000329 	.word	0x20000329
 80034f8:	2000033d 	.word	0x2000033d
 80034fc:	0800d30c 	.word	0x0800d30c
 8003500:	0800d320 	.word	0x0800d320
 8003504:	40010800 	.word	0x40010800
 8003508:	2000034b 	.word	0x2000034b
 800350c:	20000224 	.word	0x20000224
 8003510:	20000322 	.word	0x20000322
 8003514:	20000348 	.word	0x20000348
 8003518:	2000031c 	.word	0x2000031c
 800351c:	0800d6ac 	.word	0x0800d6ac
 8003520:	0800d570 	.word	0x0800d570
 8003524:	0800d6c0 	.word	0x0800d6c0
 8003528:	0800d594 	.word	0x0800d594
 800352c:	20000337 	.word	0x20000337
 8003530:	20000294 	.word	0x20000294
 8003534:	20000327 	.word	0x20000327
 8003538:	0800d6d4 	.word	0x0800d6d4
 800353c:	0800d6e8 	.word	0x0800d6e8
 8003540:	2000032a 	.word	0x2000032a
 8003544:	0800d36c 	.word	0x0800d36c
			} else if(dilSecim == 1) {
 8003548:	4b99      	ldr	r3, [pc, #612]	; (80037b0 <menu+0x1f58>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d104      	bne.n	800355a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003550:	4a98      	ldr	r2, [pc, #608]	; (80037b4 <menu+0x1f5c>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f7fd f931 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800355a:	2102      	movs	r1, #2
 800355c:	4896      	ldr	r0, [pc, #600]	; (80037b8 <menu+0x1f60>)
 800355e:	f005 fee1 	bl	8009324 <HAL_GPIO_ReadPin>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d115      	bne.n	8003594 <menu+0x1d3c>
 8003568:	4b94      	ldr	r3, [pc, #592]	; (80037bc <menu+0x1f64>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	f083 0301 	eor.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003576:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <menu+0x1f68>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <menu+0x1f68>)
 8003580:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003582:	4b8f      	ldr	r3, [pc, #572]	; (80037c0 <menu+0x1f68>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d902      	bls.n	8003590 <menu+0x1d38>
				yukariYavasLimit = 0;
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <menu+0x1f68>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003590:	f002 fa48 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003594:	2104      	movs	r1, #4
 8003596:	4888      	ldr	r0, [pc, #544]	; (80037b8 <menu+0x1f60>)
 8003598:	f005 fec4 	bl	8009324 <HAL_GPIO_ReadPin>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d115      	bne.n	80035ce <menu+0x1d76>
 80035a2:	4b86      	ldr	r3, [pc, #536]	; (80037bc <menu+0x1f64>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f083 0301 	eor.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80035b0:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <menu+0x1f68>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <menu+0x1f68>)
 80035ba:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80035bc:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <menu+0x1f68>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80035c4:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <menu+0x1f68>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035ca:	f002 fa2b 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ce:	2108      	movs	r1, #8
 80035d0:	4879      	ldr	r0, [pc, #484]	; (80037b8 <menu+0x1f60>)
 80035d2:	f005 fea7 	bl	8009324 <HAL_GPIO_ReadPin>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10d      	bne.n	80035f8 <menu+0x1da0>
 80035dc:	4b77      	ldr	r3, [pc, #476]	; (80037bc <menu+0x1f64>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f083 0301 	eor.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80035ea:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <menu+0x1f68>)
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <menu+0x1f6c>)
 80035f0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80035f2:	4b75      	ldr	r3, [pc, #468]	; (80037c8 <menu+0x1f70>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80035f8:	4b74      	ldr	r3, [pc, #464]	; (80037cc <menu+0x1f74>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b11      	cmp	r3, #17
 80035fe:	f040 80c3 	bne.w	8003788 <menu+0x1f30>
		if(dilSecim == 0) {
 8003602:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <menu+0x1f58>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800360a:	4a71      	ldr	r2, [pc, #452]	; (80037d0 <menu+0x1f78>)
 800360c:	2101      	movs	r1, #1
 800360e:	2001      	movs	r0, #1
 8003610:	f7fd f8d4 	bl	80007bc <lcd_print>
 8003614:	e008      	b.n	8003628 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003616:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <menu+0x1f58>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d104      	bne.n	8003628 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800361e:	4a6d      	ldr	r2, [pc, #436]	; (80037d4 <menu+0x1f7c>)
 8003620:	2101      	movs	r1, #1
 8003622:	2001      	movs	r0, #1
 8003624:	f7fd f8ca 	bl	80007bc <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003628:	4b6b      	ldr	r3, [pc, #428]	; (80037d8 <menu+0x1f80>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d113      	bne.n	8003658 <menu+0x1e00>
			if(dilSecim == 0){
 8003630:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <menu+0x1f58>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003638:	4a68      	ldr	r2, [pc, #416]	; (80037dc <menu+0x1f84>)
 800363a:	2101      	movs	r1, #1
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd f8bd 	bl	80007bc <lcd_print>
 8003642:	e038      	b.n	80036b6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003644:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <menu+0x1f58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d134      	bne.n	80036b6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800364c:	4a64      	ldr	r2, [pc, #400]	; (80037e0 <menu+0x1f88>)
 800364e:	2101      	movs	r1, #1
 8003650:	2002      	movs	r0, #2
 8003652:	f7fd f8b3 	bl	80007bc <lcd_print>
 8003656:	e02e      	b.n	80036b6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003658:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <menu+0x1f80>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d113      	bne.n	8003688 <menu+0x1e30>
			if(dilSecim == 0){
 8003660:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <menu+0x1f58>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003668:	4a5e      	ldr	r2, [pc, #376]	; (80037e4 <menu+0x1f8c>)
 800366a:	2101      	movs	r1, #1
 800366c:	2002      	movs	r0, #2
 800366e:	f7fd f8a5 	bl	80007bc <lcd_print>
 8003672:	e020      	b.n	80036b6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003674:	4b4e      	ldr	r3, [pc, #312]	; (80037b0 <menu+0x1f58>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d11c      	bne.n	80036b6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 800367c:	4a5a      	ldr	r2, [pc, #360]	; (80037e8 <menu+0x1f90>)
 800367e:	2101      	movs	r1, #1
 8003680:	2002      	movs	r0, #2
 8003682:	f7fd f89b 	bl	80007bc <lcd_print>
 8003686:	e016      	b.n	80036b6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <menu+0x1f80>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d112      	bne.n	80036b6 <menu+0x1e5e>
			if(dilSecim == 0) {
 8003690:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <menu+0x1f58>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003698:	4a54      	ldr	r2, [pc, #336]	; (80037ec <menu+0x1f94>)
 800369a:	2101      	movs	r1, #1
 800369c:	2002      	movs	r0, #2
 800369e:	f7fd f88d 	bl	80007bc <lcd_print>
 80036a2:	e008      	b.n	80036b6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80036a4:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <menu+0x1f58>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d104      	bne.n	80036b6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80036ac:	4a50      	ldr	r2, [pc, #320]	; (80037f0 <menu+0x1f98>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	2002      	movs	r0, #2
 80036b2:	f7fd f883 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b6:	2102      	movs	r1, #2
 80036b8:	483f      	ldr	r0, [pc, #252]	; (80037b8 <menu+0x1f60>)
 80036ba:	f005 fe33 	bl	8009324 <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d115      	bne.n	80036f0 <menu+0x1e98>
 80036c4:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <menu+0x1f64>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <menu+0x1f80>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <menu+0x1f80>)
 80036dc:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <menu+0x1f80>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80036e6:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <menu+0x1f80>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ec:	f002 f99a 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f0:	2104      	movs	r1, #4
 80036f2:	4831      	ldr	r0, [pc, #196]	; (80037b8 <menu+0x1f60>)
 80036f4:	f005 fe16 	bl	8009324 <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d115      	bne.n	800372a <menu+0x1ed2>
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <menu+0x1f64>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <menu+0x1f80>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <menu+0x1f80>)
 8003716:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003718:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <menu+0x1f80>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d902      	bls.n	8003726 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <menu+0x1f80>)
 8003722:	2202      	movs	r2, #2
 8003724:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003726:	f002 f97d 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800372a:	2108      	movs	r1, #8
 800372c:	4822      	ldr	r0, [pc, #136]	; (80037b8 <menu+0x1f60>)
 800372e:	f005 fdf9 	bl	8009324 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d127      	bne.n	8003788 <menu+0x1f30>
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <menu+0x1f64>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d020      	beq.n	8003788 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <menu+0x1f80>)
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <menu+0x1f6c>)
 800374c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <menu+0x1f80>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <menu+0x1f06>
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <menu+0x1f80>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d106      	bne.n	800376c <menu+0x1f14>
				calismaSekli = 0;
 800375e:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <menu+0x1f9c>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <menu+0x1f9c>)
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <menu+0x1f6c>)
 800376a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <menu+0x1f80>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <menu+0x1fa0>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <menu+0x1fa0>)
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <menu+0x1f6c>)
 8003780:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <menu+0x1f70>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <menu+0x1f74>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b12      	cmp	r3, #18
 800378e:	f040 80d5 	bne.w	800393c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <menu+0x1f80>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d13c      	bne.n	8003814 <menu+0x1fbc>
			if(dilSecim == 0) {
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <menu+0x1f58>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12e      	bne.n	8003800 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <menu+0x1fa4>)
 80037a4:	2101      	movs	r1, #1
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7fd f808 	bl	80007bc <lcd_print>
 80037ac:	e048      	b.n	8003840 <menu+0x1fe8>
 80037ae:	bf00      	nop
 80037b0:	2000033d 	.word	0x2000033d
 80037b4:	0800d380 	.word	0x0800d380
 80037b8:	40010800 	.word	0x40010800
 80037bc:	2000034b 	.word	0x2000034b
 80037c0:	2000032a 	.word	0x2000032a
 80037c4:	20000224 	.word	0x20000224
 80037c8:	20000348 	.word	0x20000348
 80037cc:	2000031c 	.word	0x2000031c
 80037d0:	0800d6fc 	.word	0x0800d6fc
 80037d4:	0800d710 	.word	0x0800d710
 80037d8:	2000032b 	.word	0x2000032b
 80037dc:	0800d724 	.word	0x0800d724
 80037e0:	0800d734 	.word	0x0800d734
 80037e4:	0800d744 	.word	0x0800d744
 80037e8:	0800d754 	.word	0x0800d754
 80037ec:	0800d30c 	.word	0x0800d30c
 80037f0:	0800d320 	.word	0x0800d320
 80037f4:	2000031d 	.word	0x2000031d
 80037f8:	2000032e 	.word	0x2000032e
 80037fc:	0800d764 	.word	0x0800d764
			} else if(dilSecim == 1) {
 8003800:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <menu+0x2198>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d11b      	bne.n	8003840 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <menu+0x219c>)
 800380a:	2101      	movs	r1, #1
 800380c:	2001      	movs	r0, #1
 800380e:	f7fc ffd5 	bl	80007bc <lcd_print>
 8003812:	e015      	b.n	8003840 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <menu+0x21a0>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d111      	bne.n	8003840 <menu+0x1fe8>
			if(dilSecim == 0){
 800381c:	4b74      	ldr	r3, [pc, #464]	; (80039f0 <menu+0x2198>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003824:	4a75      	ldr	r2, [pc, #468]	; (80039fc <menu+0x21a4>)
 8003826:	2101      	movs	r1, #1
 8003828:	2001      	movs	r0, #1
 800382a:	f7fc ffc7 	bl	80007bc <lcd_print>
			}
			if(dilSecim == 1){
 800382e:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <menu+0x2198>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d104      	bne.n	8003840 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003836:	4a72      	ldr	r2, [pc, #456]	; (8003a00 <menu+0x21a8>)
 8003838:	2101      	movs	r1, #1
 800383a:	2001      	movs	r0, #1
 800383c:	f7fc ffbe 	bl	80007bc <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003840:	4b70      	ldr	r3, [pc, #448]	; (8003a04 <menu+0x21ac>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d113      	bne.n	8003870 <menu+0x2018>
			if(dilSecim == 0) {
 8003848:	4b69      	ldr	r3, [pc, #420]	; (80039f0 <menu+0x2198>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003850:	4a6d      	ldr	r2, [pc, #436]	; (8003a08 <menu+0x21b0>)
 8003852:	2101      	movs	r1, #1
 8003854:	2002      	movs	r0, #2
 8003856:	f7fc ffb1 	bl	80007bc <lcd_print>
 800385a:	e020      	b.n	800389e <menu+0x2046>
			} else if(dilSecim == 1){
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <menu+0x2198>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d11c      	bne.n	800389e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003864:	4a69      	ldr	r2, [pc, #420]	; (8003a0c <menu+0x21b4>)
 8003866:	2101      	movs	r1, #1
 8003868:	2002      	movs	r0, #2
 800386a:	f7fc ffa7 	bl	80007bc <lcd_print>
 800386e:	e016      	b.n	800389e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003870:	4b64      	ldr	r3, [pc, #400]	; (8003a04 <menu+0x21ac>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d112      	bne.n	800389e <menu+0x2046>
			if(dilSecim == 0){
 8003878:	4b5d      	ldr	r3, [pc, #372]	; (80039f0 <menu+0x2198>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003880:	4a63      	ldr	r2, [pc, #396]	; (8003a10 <menu+0x21b8>)
 8003882:	2101      	movs	r1, #1
 8003884:	2002      	movs	r0, #2
 8003886:	f7fc ff99 	bl	80007bc <lcd_print>
 800388a:	e008      	b.n	800389e <menu+0x2046>
			} else if(dilSecim == 1){
 800388c:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <menu+0x2198>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d104      	bne.n	800389e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003894:	4a5f      	ldr	r2, [pc, #380]	; (8003a14 <menu+0x21bc>)
 8003896:	2101      	movs	r1, #1
 8003898:	2002      	movs	r0, #2
 800389a:	f7fc ff8f 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800389e:	2102      	movs	r1, #2
 80038a0:	485d      	ldr	r0, [pc, #372]	; (8003a18 <menu+0x21c0>)
 80038a2:	f005 fd3f 	bl	8009324 <HAL_GPIO_ReadPin>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d115      	bne.n	80038d8 <menu+0x2080>
 80038ac:	4b5b      	ldr	r3, [pc, #364]	; (8003a1c <menu+0x21c4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80038ba:	4b52      	ldr	r3, [pc, #328]	; (8003a04 <menu+0x21ac>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <menu+0x21ac>)
 80038c4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80038c6:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <menu+0x21ac>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d902      	bls.n	80038d4 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80038ce:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <menu+0x21ac>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038d4:	f002 f8a6 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d8:	2104      	movs	r1, #4
 80038da:	484f      	ldr	r0, [pc, #316]	; (8003a18 <menu+0x21c0>)
 80038dc:	f005 fd22 	bl	8009324 <HAL_GPIO_ReadPin>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <menu+0x20ba>
 80038e6:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <menu+0x21c4>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80038f4:	4b43      	ldr	r3, [pc, #268]	; (8003a04 <menu+0x21ac>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <menu+0x21ac>)
 80038fe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003900:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <menu+0x21ac>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003908:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <menu+0x21ac>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800390e:	f002 f889 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003912:	2108      	movs	r1, #8
 8003914:	4840      	ldr	r0, [pc, #256]	; (8003a18 <menu+0x21c0>)
 8003916:	f005 fd05 	bl	8009324 <HAL_GPIO_ReadPin>
 800391a:	4603      	mov	r3, r0
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10d      	bne.n	800393c <menu+0x20e4>
 8003920:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <menu+0x21c4>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	f083 0301 	eor.w	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d006      	beq.n	800393c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800392e:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <menu+0x21ac>)
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <menu+0x21c8>)
 8003934:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <menu+0x21cc>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800393c:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <menu+0x21d0>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b13      	cmp	r3, #19
 8003942:	f040 80d5 	bne.w	8003af0 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <menu+0x21a0>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d113      	bne.n	8003976 <menu+0x211e>
			if(dilSecim == 0) {
 800394e:	4b28      	ldr	r3, [pc, #160]	; (80039f0 <menu+0x2198>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003956:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <menu+0x21d4>)
 8003958:	2101      	movs	r1, #1
 800395a:	2001      	movs	r0, #1
 800395c:	f7fc ff2e 	bl	80007bc <lcd_print>
 8003960:	e01f      	b.n	80039a2 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <menu+0x2198>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d11b      	bne.n	80039a2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800396a:	4a31      	ldr	r2, [pc, #196]	; (8003a30 <menu+0x21d8>)
 800396c:	2101      	movs	r1, #1
 800396e:	2001      	movs	r0, #1
 8003970:	f7fc ff24 	bl	80007bc <lcd_print>
 8003974:	e015      	b.n	80039a2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <menu+0x21a0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d111      	bne.n	80039a2 <menu+0x214a>
			if(dilSecim == 0) {
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <menu+0x2198>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003986:	4a2b      	ldr	r2, [pc, #172]	; (8003a34 <menu+0x21dc>)
 8003988:	2101      	movs	r1, #1
 800398a:	2001      	movs	r0, #1
 800398c:	f7fc ff16 	bl	80007bc <lcd_print>
			}
			if(dilSecim == 1) {
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <menu+0x2198>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d104      	bne.n	80039a2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <menu+0x21e0>)
 800399a:	2101      	movs	r1, #1
 800399c:	2001      	movs	r0, #1
 800399e:	f7fc ff0d 	bl	80007bc <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <menu+0x21e4>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <menu+0x217a>
			if(dilSecim == 0) {
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <menu+0x2198>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <menu+0x21b0>)
 80039b4:	2101      	movs	r1, #1
 80039b6:	2002      	movs	r0, #2
 80039b8:	f7fc ff00 	bl	80007bc <lcd_print>
 80039bc:	e049      	b.n	8003a52 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <menu+0x2198>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d145      	bne.n	8003a52 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <menu+0x21b4>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2002      	movs	r0, #2
 80039cc:	f7fc fef6 	bl	80007bc <lcd_print>
 80039d0:	e03f      	b.n	8003a52 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <menu+0x21e4>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d13b      	bne.n	8003a52 <menu+0x21fa>
			if(dilSecim == 0) {
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <menu+0x2198>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d12e      	bne.n	8003a40 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80039e2:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <menu+0x21b8>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	2002      	movs	r0, #2
 80039e8:	f7fc fee8 	bl	80007bc <lcd_print>
 80039ec:	e031      	b.n	8003a52 <menu+0x21fa>
 80039ee:	bf00      	nop
 80039f0:	2000033d 	.word	0x2000033d
 80039f4:	0800d778 	.word	0x0800d778
 80039f8:	2000032b 	.word	0x2000032b
 80039fc:	0800d788 	.word	0x0800d788
 8003a00:	0800d79c 	.word	0x0800d79c
 8003a04:	2000032c 	.word	0x2000032c
 8003a08:	0800d30c 	.word	0x0800d30c
 8003a0c:	0800d320 	.word	0x0800d320
 8003a10:	0800d36c 	.word	0x0800d36c
 8003a14:	0800d380 	.word	0x0800d380
 8003a18:	40010800 	.word	0x40010800
 8003a1c:	2000034b 	.word	0x2000034b
 8003a20:	20000224 	.word	0x20000224
 8003a24:	20000348 	.word	0x20000348
 8003a28:	2000031c 	.word	0x2000031c
 8003a2c:	0800d7b0 	.word	0x0800d7b0
 8003a30:	0800d7c4 	.word	0x0800d7c4
 8003a34:	0800d7d8 	.word	0x0800d7d8
 8003a38:	0800d7ec 	.word	0x0800d7ec
 8003a3c:	2000032d 	.word	0x2000032d
			} else if(dilSecim == 1) {
 8003a40:	4b90      	ldr	r3, [pc, #576]	; (8003c84 <menu+0x242c>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d104      	bne.n	8003a52 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003a48:	4a8f      	ldr	r2, [pc, #572]	; (8003c88 <menu+0x2430>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	2002      	movs	r0, #2
 8003a4e:	f7fc feb5 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a52:	2102      	movs	r1, #2
 8003a54:	488d      	ldr	r0, [pc, #564]	; (8003c8c <menu+0x2434>)
 8003a56:	f005 fc65 	bl	8009324 <HAL_GPIO_ReadPin>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d115      	bne.n	8003a8c <menu+0x2234>
 8003a60:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <menu+0x2438>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f083 0301 	eor.w	r3, r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00e      	beq.n	8003a8c <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003a6e:	4b89      	ldr	r3, [pc, #548]	; (8003c94 <menu+0x243c>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4b87      	ldr	r3, [pc, #540]	; (8003c94 <menu+0x243c>)
 8003a78:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003a7a:	4b86      	ldr	r3, [pc, #536]	; (8003c94 <menu+0x243c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d902      	bls.n	8003a88 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003a82:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <menu+0x243c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a88:	f001 ffcc 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	487f      	ldr	r0, [pc, #508]	; (8003c8c <menu+0x2434>)
 8003a90:	f005 fc48 	bl	8009324 <HAL_GPIO_ReadPin>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d115      	bne.n	8003ac6 <menu+0x226e>
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <menu+0x2438>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003aa8:	4b7a      	ldr	r3, [pc, #488]	; (8003c94 <menu+0x243c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b78      	ldr	r3, [pc, #480]	; (8003c94 <menu+0x243c>)
 8003ab2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003ab4:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <menu+0x243c>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003abc:	4b75      	ldr	r3, [pc, #468]	; (8003c94 <menu+0x243c>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ac2:	f001 ffaf 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac6:	2108      	movs	r1, #8
 8003ac8:	4870      	ldr	r0, [pc, #448]	; (8003c8c <menu+0x2434>)
 8003aca:	f005 fc2b 	bl	8009324 <HAL_GPIO_ReadPin>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10d      	bne.n	8003af0 <menu+0x2298>
 8003ad4:	4b6e      	ldr	r3, [pc, #440]	; (8003c90 <menu+0x2438>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003ae2:	4b6c      	ldr	r3, [pc, #432]	; (8003c94 <menu+0x243c>)
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <menu+0x2440>)
 8003ae8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003aea:	4b6c      	ldr	r3, [pc, #432]	; (8003c9c <menu+0x2444>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003af0:	4b6b      	ldr	r3, [pc, #428]	; (8003ca0 <menu+0x2448>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b14      	cmp	r3, #20
 8003af6:	f040 80b5 	bne.w	8003c64 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003afa:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <menu+0x244c>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d113      	bne.n	8003b2a <menu+0x22d2>
			if(dilSecim == 0) {
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <menu+0x242c>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003b0a:	4a67      	ldr	r2, [pc, #412]	; (8003ca8 <menu+0x2450>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7fc fe54 	bl	80007bc <lcd_print>
 8003b14:	e020      	b.n	8003b58 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <menu+0x242c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d11c      	bne.n	8003b58 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003b1e:	4a63      	ldr	r2, [pc, #396]	; (8003cac <menu+0x2454>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	2001      	movs	r0, #1
 8003b24:	f7fc fe4a 	bl	80007bc <lcd_print>
 8003b28:	e016      	b.n	8003b58 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003b2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ca4 <menu+0x244c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d112      	bne.n	8003b58 <menu+0x2300>
			if(dilSecim == 0) {
 8003b32:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <menu+0x242c>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <menu+0x2458>)
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7fc fe3c 	bl	80007bc <lcd_print>
 8003b44:	e008      	b.n	8003b58 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003b46:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <menu+0x242c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d104      	bne.n	8003b58 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003b4e:	4a59      	ldr	r2, [pc, #356]	; (8003cb4 <menu+0x245c>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	2001      	movs	r0, #1
 8003b54:	f7fc fe32 	bl	80007bc <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003b58:	4b57      	ldr	r3, [pc, #348]	; (8003cb8 <menu+0x2460>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d113      	bne.n	8003b88 <menu+0x2330>
			if(dilSecim == 0) {
 8003b60:	4b48      	ldr	r3, [pc, #288]	; (8003c84 <menu+0x242c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003b68:	4a54      	ldr	r2, [pc, #336]	; (8003cbc <menu+0x2464>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7fc fe25 	bl	80007bc <lcd_print>
 8003b72:	e020      	b.n	8003bb6 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003b74:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <menu+0x242c>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d11c      	bne.n	8003bb6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <menu+0x2468>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	2002      	movs	r0, #2
 8003b82:	f7fc fe1b 	bl	80007bc <lcd_print>
 8003b86:	e016      	b.n	8003bb6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003b88:	4b4b      	ldr	r3, [pc, #300]	; (8003cb8 <menu+0x2460>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d112      	bne.n	8003bb6 <menu+0x235e>
			if(dilSecim == 0) {
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <menu+0x242c>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003b98:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <menu+0x246c>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f7fc fe0d 	bl	80007bc <lcd_print>
 8003ba2:	e008      	b.n	8003bb6 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <menu+0x242c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d104      	bne.n	8003bb6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003bac:	4a46      	ldr	r2, [pc, #280]	; (8003cc8 <menu+0x2470>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f7fc fe03 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4834      	ldr	r0, [pc, #208]	; (8003c8c <menu+0x2434>)
 8003bba:	f005 fbb3 	bl	8009324 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d119      	bne.n	8003bf8 <menu+0x23a0>
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <menu+0x2438>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	f083 0301 	eor.w	r3, r3, #1
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d012      	beq.n	8003bf8 <menu+0x23a0>
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <menu+0x244c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d10e      	bne.n	8003bf8 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <menu+0x2460>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <menu+0x2460>)
 8003be4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <menu+0x2460>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d902      	bls.n	8003bf4 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <menu+0x2460>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bf4:	f001 ff16 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4824      	ldr	r0, [pc, #144]	; (8003c8c <menu+0x2434>)
 8003bfc:	f005 fb92 	bl	8009324 <HAL_GPIO_ReadPin>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d119      	bne.n	8003c3a <menu+0x23e2>
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <menu+0x2438>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	f083 0301 	eor.w	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <menu+0x23e2>
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <menu+0x244c>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d10e      	bne.n	8003c3a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003c1c:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <menu+0x2460>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <menu+0x2460>)
 8003c26:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003c28:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <menu+0x2460>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003c30:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <menu+0x2460>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c36:	f001 fef5 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c3a:	2108      	movs	r1, #8
 8003c3c:	4813      	ldr	r0, [pc, #76]	; (8003c8c <menu+0x2434>)
 8003c3e:	f005 fb71 	bl	8009324 <HAL_GPIO_ReadPin>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10d      	bne.n	8003c64 <menu+0x240c>
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <menu+0x2438>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	f083 0301 	eor.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <menu+0x2460>)
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <menu+0x2440>)
 8003c5c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <menu+0x2444>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <menu+0x2448>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b15      	cmp	r3, #21
 8003c6a:	f040 80c2 	bne.w	8003df2 <menu+0x259a>
		if(dilSecim == 0) {
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <menu+0x242c>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d12c      	bne.n	8003cd0 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <menu+0x2474>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f7fc fd9e 	bl	80007bc <lcd_print>
 8003c80:	e02f      	b.n	8003ce2 <menu+0x248a>
 8003c82:	bf00      	nop
 8003c84:	2000033d 	.word	0x2000033d
 8003c88:	0800d380 	.word	0x0800d380
 8003c8c:	40010800 	.word	0x40010800
 8003c90:	2000034b 	.word	0x2000034b
 8003c94:	2000032d 	.word	0x2000032d
 8003c98:	20000224 	.word	0x20000224
 8003c9c:	20000348 	.word	0x20000348
 8003ca0:	2000031c 	.word	0x2000031c
 8003ca4:	2000032b 	.word	0x2000032b
 8003ca8:	0800d800 	.word	0x0800d800
 8003cac:	0800d814 	.word	0x0800d814
 8003cb0:	0800d828 	.word	0x0800d828
 8003cb4:	0800d83c 	.word	0x0800d83c
 8003cb8:	2000032e 	.word	0x2000032e
 8003cbc:	0800d850 	.word	0x0800d850
 8003cc0:	0800d864 	.word	0x0800d864
 8003cc4:	0800d874 	.word	0x0800d874
 8003cc8:	0800d888 	.word	0x0800d888
 8003ccc:	0800d898 	.word	0x0800d898
		} else if(dilSecim == 1) {
 8003cd0:	4b9c      	ldr	r3, [pc, #624]	; (8003f44 <menu+0x26ec>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d104      	bne.n	8003ce2 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003cd8:	4a9b      	ldr	r2, [pc, #620]	; (8003f48 <menu+0x26f0>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f7fc fd6d 	bl	80007bc <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003ce2:	4b9a      	ldr	r3, [pc, #616]	; (8003f4c <menu+0x26f4>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d112      	bne.n	8003d10 <menu+0x24b8>
			if(dilSecim == 0) {
 8003cea:	4b96      	ldr	r3, [pc, #600]	; (8003f44 <menu+0x26ec>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003cf2:	4a97      	ldr	r2, [pc, #604]	; (8003f50 <menu+0x26f8>)
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	f7fc fd60 	bl	80007bc <lcd_print>
			}
			if(dilSecim == 1) {
 8003cfc:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <menu+0x26ec>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d11c      	bne.n	8003d3e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003d04:	4a93      	ldr	r2, [pc, #588]	; (8003f54 <menu+0x26fc>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7fc fd57 	bl	80007bc <lcd_print>
 8003d0e:	e016      	b.n	8003d3e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003d10:	4b8e      	ldr	r3, [pc, #568]	; (8003f4c <menu+0x26f4>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d112      	bne.n	8003d3e <menu+0x24e6>
			if(dilSecim == 0) {
 8003d18:	4b8a      	ldr	r3, [pc, #552]	; (8003f44 <menu+0x26ec>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003d20:	4a8d      	ldr	r2, [pc, #564]	; (8003f58 <menu+0x2700>)
 8003d22:	2101      	movs	r1, #1
 8003d24:	2002      	movs	r0, #2
 8003d26:	f7fc fd49 	bl	80007bc <lcd_print>
 8003d2a:	e008      	b.n	8003d3e <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003d2c:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <menu+0x26ec>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d104      	bne.n	8003d3e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003d34:	4a89      	ldr	r2, [pc, #548]	; (8003f5c <menu+0x2704>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	2002      	movs	r0, #2
 8003d3a:	f7fc fd3f 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4887      	ldr	r0, [pc, #540]	; (8003f60 <menu+0x2708>)
 8003d42:	f005 faef 	bl	8009324 <HAL_GPIO_ReadPin>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d115      	bne.n	8003d78 <menu+0x2520>
 8003d4c:	4b85      	ldr	r3, [pc, #532]	; (8003f64 <menu+0x270c>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00e      	beq.n	8003d78 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003d5a:	4b7c      	ldr	r3, [pc, #496]	; (8003f4c <menu+0x26f4>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4b7a      	ldr	r3, [pc, #488]	; (8003f4c <menu+0x26f4>)
 8003d64:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003d66:	4b79      	ldr	r3, [pc, #484]	; (8003f4c <menu+0x26f4>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d902      	bls.n	8003d74 <menu+0x251c>
				platformSilindirTipi = 0;
 8003d6e:	4b77      	ldr	r3, [pc, #476]	; (8003f4c <menu+0x26f4>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d74:	f001 fe56 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d78:	2104      	movs	r1, #4
 8003d7a:	4879      	ldr	r0, [pc, #484]	; (8003f60 <menu+0x2708>)
 8003d7c:	f005 fad2 	bl	8009324 <HAL_GPIO_ReadPin>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d115      	bne.n	8003db2 <menu+0x255a>
 8003d86:	4b77      	ldr	r3, [pc, #476]	; (8003f64 <menu+0x270c>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f083 0301 	eor.w	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003d94:	4b6d      	ldr	r3, [pc, #436]	; (8003f4c <menu+0x26f4>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	4b6b      	ldr	r3, [pc, #428]	; (8003f4c <menu+0x26f4>)
 8003d9e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <menu+0x26f4>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <menu+0x26f4>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dae:	f001 fe39 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003db2:	2108      	movs	r1, #8
 8003db4:	486a      	ldr	r0, [pc, #424]	; (8003f60 <menu+0x2708>)
 8003db6:	f005 fab5 	bl	8009324 <HAL_GPIO_ReadPin>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d118      	bne.n	8003df2 <menu+0x259a>
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <menu+0x270c>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f083 0301 	eor.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003dce:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <menu+0x26f4>)
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <menu+0x2710>)
 8003dd4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <menu+0x26f4>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d106      	bne.n	8003dec <menu+0x2594>
				altLimit = 1;
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <menu+0x2714>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <menu+0x2714>)
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <menu+0x2710>)
 8003dea:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003dec:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <menu+0x2718>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003df2:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <menu+0x271c>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b16      	cmp	r3, #22
 8003df8:	f040 8081 	bne.w	8003efe <menu+0x26a6>
		if(dilSecim == 0) {
 8003dfc:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <menu+0x26ec>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003e04:	4a5c      	ldr	r2, [pc, #368]	; (8003f78 <menu+0x2720>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7fc fcd7 	bl	80007bc <lcd_print>
 8003e0e:	e008      	b.n	8003e22 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003e10:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <menu+0x26ec>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d104      	bne.n	8003e22 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <menu+0x2724>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7fc fccd 	bl	80007bc <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003e22:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <menu+0x26ec>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e2a:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <menu+0x2728>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2002      	movs	r0, #2
 8003e30:	f7fc fcc4 	bl	80007bc <lcd_print>
 8003e34:	e008      	b.n	8003e48 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <menu+0x26ec>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d104      	bne.n	8003e48 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003e3e:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <menu+0x272c>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	2002      	movs	r0, #2
 8003e44:	f7fc fcba 	bl	80007bc <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003e48:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <menu+0x2730>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	220a      	movs	r2, #10
 8003e4e:	494f      	ldr	r1, [pc, #316]	; (8003f8c <menu+0x2734>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f008 fa93 	bl	800c37c <itoa>
		lcd_print(2,16,snum);
 8003e56:	4a4d      	ldr	r2, [pc, #308]	; (8003f8c <menu+0x2734>)
 8003e58:	2110      	movs	r1, #16
 8003e5a:	2002      	movs	r0, #2
 8003e5c:	f7fc fcae 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e60:	2102      	movs	r1, #2
 8003e62:	483f      	ldr	r0, [pc, #252]	; (8003f60 <menu+0x2708>)
 8003e64:	f005 fa5e 	bl	8009324 <HAL_GPIO_ReadPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d115      	bne.n	8003e9a <menu+0x2642>
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <menu+0x270c>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	f083 0301 	eor.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003e7c:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <menu+0x2730>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <menu+0x2730>)
 8003e86:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <menu+0x2730>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d902      	bls.n	8003e96 <menu+0x263e>
				yukariValfTmr = 0;
 8003e90:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <menu+0x2730>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e96:	f001 fdc5 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	4830      	ldr	r0, [pc, #192]	; (8003f60 <menu+0x2708>)
 8003e9e:	f005 fa41 	bl	8009324 <HAL_GPIO_ReadPin>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d115      	bne.n	8003ed4 <menu+0x267c>
 8003ea8:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <menu+0x270c>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	f083 0301 	eor.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00e      	beq.n	8003ed4 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <menu+0x2730>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <menu+0x2730>)
 8003ec0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003ec2:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <menu+0x2730>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <menu+0x2730>)
 8003ecc:	2205      	movs	r2, #5
 8003ece:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ed0:	f001 fda8 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed4:	2108      	movs	r1, #8
 8003ed6:	4822      	ldr	r0, [pc, #136]	; (8003f60 <menu+0x2708>)
 8003ed8:	f005 fa24 	bl	8009324 <HAL_GPIO_ReadPin>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10d      	bne.n	8003efe <menu+0x26a6>
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <menu+0x270c>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	f083 0301 	eor.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <menu+0x2730>)
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <menu+0x2710>)
 8003ef6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <menu+0x2718>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <menu+0x271c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b17      	cmp	r3, #23
 8003f04:	f040 80ac 	bne.w	8004060 <menu+0x2808>
		if(dilSecim == 0) {
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <menu+0x26ec>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <menu+0x2738>)
 8003f12:	2101      	movs	r1, #1
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7fc fc51 	bl	80007bc <lcd_print>
 8003f1a:	e008      	b.n	8003f2e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <menu+0x26ec>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d104      	bne.n	8003f2e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003f24:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <menu+0x273c>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7fc fc47 	bl	80007bc <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <menu+0x26ec>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d130      	bne.n	8003f98 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <menu+0x2728>)
 8003f38:	2101      	movs	r1, #1
 8003f3a:	2002      	movs	r0, #2
 8003f3c:	f7fc fc3e 	bl	80007bc <lcd_print>
 8003f40:	e033      	b.n	8003faa <menu+0x2752>
 8003f42:	bf00      	nop
 8003f44:	2000033d 	.word	0x2000033d
 8003f48:	0800d8ac 	.word	0x0800d8ac
 8003f4c:	2000032f 	.word	0x2000032f
 8003f50:	0800d850 	.word	0x0800d850
 8003f54:	0800d864 	.word	0x0800d864
 8003f58:	0800d874 	.word	0x0800d874
 8003f5c:	0800d888 	.word	0x0800d888
 8003f60:	40010800 	.word	0x40010800
 8003f64:	2000034b 	.word	0x2000034b
 8003f68:	20000224 	.word	0x20000224
 8003f6c:	20000322 	.word	0x20000322
 8003f70:	20000348 	.word	0x20000348
 8003f74:	2000031c 	.word	0x2000031c
 8003f78:	0800d8bc 	.word	0x0800d8bc
 8003f7c:	0800d8d0 	.word	0x0800d8d0
 8003f80:	0800d570 	.word	0x0800d570
 8003f84:	0800d8e4 	.word	0x0800d8e4
 8003f88:	20000330 	.word	0x20000330
 8003f8c:	20000294 	.word	0x20000294
 8003f90:	0800d8f4 	.word	0x0800d8f4
 8003f94:	0800d908 	.word	0x0800d908
			} else if(dilSecim == 1) {
 8003f98:	4b98      	ldr	r3, [pc, #608]	; (80041fc <menu+0x29a4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d104      	bne.n	8003faa <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003fa0:	4a97      	ldr	r2, [pc, #604]	; (8004200 <menu+0x29a8>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2002      	movs	r0, #2
 8003fa6:	f7fc fc09 	bl	80007bc <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003faa:	4b96      	ldr	r3, [pc, #600]	; (8004204 <menu+0x29ac>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	220a      	movs	r2, #10
 8003fb0:	4995      	ldr	r1, [pc, #596]	; (8004208 <menu+0x29b0>)
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f008 f9e2 	bl	800c37c <itoa>
		lcd_print(2,16,snum);
 8003fb8:	4a93      	ldr	r2, [pc, #588]	; (8004208 <menu+0x29b0>)
 8003fba:	2110      	movs	r1, #16
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	f7fc fbfd 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4891      	ldr	r0, [pc, #580]	; (800420c <menu+0x29b4>)
 8003fc6:	f005 f9ad 	bl	8009324 <HAL_GPIO_ReadPin>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d115      	bne.n	8003ffc <menu+0x27a4>
 8003fd0:	4b8f      	ldr	r3, [pc, #572]	; (8004210 <menu+0x29b8>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	f083 0301 	eor.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <menu+0x29ac>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4b87      	ldr	r3, [pc, #540]	; (8004204 <menu+0x29ac>)
 8003fe8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003fea:	4b86      	ldr	r3, [pc, #536]	; (8004204 <menu+0x29ac>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d902      	bls.n	8003ff8 <menu+0x27a0>
				asagiValfTmr = 0;
 8003ff2:	4b84      	ldr	r3, [pc, #528]	; (8004204 <menu+0x29ac>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ff8:	f001 fd14 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	4883      	ldr	r0, [pc, #524]	; (800420c <menu+0x29b4>)
 8004000:	f005 f990 	bl	8009324 <HAL_GPIO_ReadPin>
 8004004:	4603      	mov	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d115      	bne.n	8004036 <menu+0x27de>
 800400a:	4b81      	ldr	r3, [pc, #516]	; (8004210 <menu+0x29b8>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	f083 0301 	eor.w	r3, r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8004018:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <menu+0x29ac>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	3b01      	subs	r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	4b78      	ldr	r3, [pc, #480]	; (8004204 <menu+0x29ac>)
 8004022:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8004024:	4b77      	ldr	r3, [pc, #476]	; (8004204 <menu+0x29ac>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d902      	bls.n	8004032 <menu+0x27da>
		   		asagiValfTmr = 5;
 800402c:	4b75      	ldr	r3, [pc, #468]	; (8004204 <menu+0x29ac>)
 800402e:	2205      	movs	r2, #5
 8004030:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004032:	f001 fcf7 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004036:	2108      	movs	r1, #8
 8004038:	4874      	ldr	r0, [pc, #464]	; (800420c <menu+0x29b4>)
 800403a:	f005 f973 	bl	8009324 <HAL_GPIO_ReadPin>
 800403e:	4603      	mov	r3, r0
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10d      	bne.n	8004060 <menu+0x2808>
 8004044:	4b72      	ldr	r3, [pc, #456]	; (8004210 <menu+0x29b8>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <menu+0x29ac>)
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <menu+0x29bc>)
 8004058:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800405a:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <menu+0x29c0>)
 800405c:	2201      	movs	r2, #1
 800405e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8004060:	4b6e      	ldr	r3, [pc, #440]	; (800421c <menu+0x29c4>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b18      	cmp	r3, #24
 8004066:	f040 809d 	bne.w	80041a4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 800406a:	4b6d      	ldr	r3, [pc, #436]	; (8004220 <menu+0x29c8>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d113      	bne.n	800409a <menu+0x2842>
			if(dilSecim == 0) {
 8004072:	4b62      	ldr	r3, [pc, #392]	; (80041fc <menu+0x29a4>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 800407a:	4a6a      	ldr	r2, [pc, #424]	; (8004224 <menu+0x29cc>)
 800407c:	2101      	movs	r1, #1
 800407e:	2001      	movs	r0, #1
 8004080:	f7fc fb9c 	bl	80007bc <lcd_print>
 8004084:	e020      	b.n	80040c8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <menu+0x29a4>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11c      	bne.n	80040c8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800408e:	4a66      	ldr	r2, [pc, #408]	; (8004228 <menu+0x29d0>)
 8004090:	2101      	movs	r1, #1
 8004092:	2001      	movs	r0, #1
 8004094:	f7fc fb92 	bl	80007bc <lcd_print>
 8004098:	e016      	b.n	80040c8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800409a:	4b61      	ldr	r3, [pc, #388]	; (8004220 <menu+0x29c8>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d112      	bne.n	80040c8 <menu+0x2870>
			if(dilSecim == 0) {
 80040a2:	4b56      	ldr	r3, [pc, #344]	; (80041fc <menu+0x29a4>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80040aa:	4a60      	ldr	r2, [pc, #384]	; (800422c <menu+0x29d4>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	2001      	movs	r0, #1
 80040b0:	f7fc fb84 	bl	80007bc <lcd_print>
 80040b4:	e008      	b.n	80040c8 <menu+0x2870>
			} else if(dilSecim == 1) {
 80040b6:	4b51      	ldr	r3, [pc, #324]	; (80041fc <menu+0x29a4>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d104      	bne.n	80040c8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80040be:	4a5c      	ldr	r2, [pc, #368]	; (8004230 <menu+0x29d8>)
 80040c0:	2101      	movs	r1, #1
 80040c2:	2001      	movs	r0, #1
 80040c4:	f7fc fb7a 	bl	80007bc <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80040c8:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <menu+0x29a4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <menu+0x29dc>)
 80040d2:	2101      	movs	r1, #1
 80040d4:	2002      	movs	r0, #2
 80040d6:	f7fc fb71 	bl	80007bc <lcd_print>
 80040da:	e008      	b.n	80040ee <menu+0x2896>
			} else if(dilSecim == 1) {
 80040dc:	4b47      	ldr	r3, [pc, #284]	; (80041fc <menu+0x29a4>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d104      	bne.n	80040ee <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80040e4:	4a46      	ldr	r2, [pc, #280]	; (8004200 <menu+0x29a8>)
 80040e6:	2101      	movs	r1, #1
 80040e8:	2002      	movs	r0, #2
 80040ea:	f7fc fb67 	bl	80007bc <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80040ee:	4b52      	ldr	r3, [pc, #328]	; (8004238 <menu+0x29e0>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	220a      	movs	r2, #10
 80040f4:	4944      	ldr	r1, [pc, #272]	; (8004208 <menu+0x29b0>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f008 f940 	bl	800c37c <itoa>
		lcd_print(2, 16, snum);
 80040fc:	4a42      	ldr	r2, [pc, #264]	; (8004208 <menu+0x29b0>)
 80040fe:	2110      	movs	r1, #16
 8004100:	2002      	movs	r0, #2
 8004102:	f7fc fb5b 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004106:	2102      	movs	r1, #2
 8004108:	4840      	ldr	r0, [pc, #256]	; (800420c <menu+0x29b4>)
 800410a:	f005 f90b 	bl	8009324 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d115      	bne.n	8004140 <menu+0x28e8>
 8004114:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <menu+0x29b8>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8004122:	4b45      	ldr	r3, [pc, #276]	; (8004238 <menu+0x29e0>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4b43      	ldr	r3, [pc, #268]	; (8004238 <menu+0x29e0>)
 800412c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800412e:	4b42      	ldr	r3, [pc, #264]	; (8004238 <menu+0x29e0>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d902      	bls.n	800413c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8004136:	4b40      	ldr	r3, [pc, #256]	; (8004238 <menu+0x29e0>)
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800413c:	f001 fc72 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004140:	2104      	movs	r1, #4
 8004142:	4832      	ldr	r0, [pc, #200]	; (800420c <menu+0x29b4>)
 8004144:	f005 f8ee 	bl	8009324 <HAL_GPIO_ReadPin>
 8004148:	4603      	mov	r3, r0
 800414a:	2b01      	cmp	r3, #1
 800414c:	d115      	bne.n	800417a <menu+0x2922>
 800414e:	4b30      	ldr	r3, [pc, #192]	; (8004210 <menu+0x29b8>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f083 0301 	eor.w	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800415c:	4b36      	ldr	r3, [pc, #216]	; (8004238 <menu+0x29e0>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b34      	ldr	r3, [pc, #208]	; (8004238 <menu+0x29e0>)
 8004166:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004168:	4b33      	ldr	r3, [pc, #204]	; (8004238 <menu+0x29e0>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b06      	cmp	r3, #6
 800416e:	d902      	bls.n	8004176 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8004170:	4b31      	ldr	r3, [pc, #196]	; (8004238 <menu+0x29e0>)
 8004172:	2205      	movs	r2, #5
 8004174:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004176:	f001 fc55 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800417a:	2108      	movs	r1, #8
 800417c:	4823      	ldr	r0, [pc, #140]	; (800420c <menu+0x29b4>)
 800417e:	f005 f8d1 	bl	8009324 <HAL_GPIO_ReadPin>
 8004182:	4603      	mov	r3, r0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10d      	bne.n	80041a4 <menu+0x294c>
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <menu+0x29b8>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f083 0301 	eor.w	r3, r3, #1
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <menu+0x29e0>)
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <menu+0x29bc>)
 800419c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <menu+0x29c0>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <menu+0x29c4>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b19      	cmp	r3, #25
 80041aa:	f040 80c4 	bne.w	8004336 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <menu+0x29c8>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d113      	bne.n	80041de <menu+0x2986>
			if(dilSecim == 0) {
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <menu+0x29a4>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <menu+0x29e4>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	2001      	movs	r0, #1
 80041c4:	f7fc fafa 	bl	80007bc <lcd_print>
 80041c8:	e047      	b.n	800425a <menu+0x2a02>
			} else if(dilSecim == 1) {
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <menu+0x29a4>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d143      	bne.n	800425a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80041d2:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <menu+0x29e8>)
 80041d4:	2101      	movs	r1, #1
 80041d6:	2001      	movs	r0, #1
 80041d8:	f7fc faf0 	bl	80007bc <lcd_print>
 80041dc:	e03d      	b.n	800425a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <menu+0x29c8>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d139      	bne.n	800425a <menu+0x2a02>
			if(dilSecim == 0) {
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <menu+0x29a4>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d12c      	bne.n	8004248 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <menu+0x29ec>)
 80041f0:	2101      	movs	r1, #1
 80041f2:	2001      	movs	r0, #1
 80041f4:	f7fc fae2 	bl	80007bc <lcd_print>
 80041f8:	e02f      	b.n	800425a <menu+0x2a02>
 80041fa:	bf00      	nop
 80041fc:	2000033d 	.word	0x2000033d
 8004200:	0800d8e4 	.word	0x0800d8e4
 8004204:	20000331 	.word	0x20000331
 8004208:	20000294 	.word	0x20000294
 800420c:	40010800 	.word	0x40010800
 8004210:	2000034b 	.word	0x2000034b
 8004214:	20000224 	.word	0x20000224
 8004218:	20000348 	.word	0x20000348
 800421c:	2000031c 	.word	0x2000031c
 8004220:	2000032b 	.word	0x2000032b
 8004224:	0800d91c 	.word	0x0800d91c
 8004228:	0800d930 	.word	0x0800d930
 800422c:	0800d944 	.word	0x0800d944
 8004230:	0800d958 	.word	0x0800d958
 8004234:	0800d570 	.word	0x0800d570
 8004238:	20000332 	.word	0x20000332
 800423c:	0800d96c 	.word	0x0800d96c
 8004240:	0800d980 	.word	0x0800d980
 8004244:	0800d994 	.word	0x0800d994
			} else if(dilSecim == 1) {
 8004248:	4b73      	ldr	r3, [pc, #460]	; (8004418 <menu+0x2bc0>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d104      	bne.n	800425a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8004250:	4a72      	ldr	r2, [pc, #456]	; (800441c <menu+0x2bc4>)
 8004252:	2101      	movs	r1, #1
 8004254:	2001      	movs	r0, #1
 8004256:	f7fc fab1 	bl	80007bc <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 800425a:	4b6f      	ldr	r3, [pc, #444]	; (8004418 <menu+0x2bc0>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8004262:	4a6f      	ldr	r2, [pc, #444]	; (8004420 <menu+0x2bc8>)
 8004264:	2101      	movs	r1, #1
 8004266:	2002      	movs	r0, #2
 8004268:	f7fc faa8 	bl	80007bc <lcd_print>
 800426c:	e008      	b.n	8004280 <menu+0x2a28>
			} else if(dilSecim == 1) {
 800426e:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <menu+0x2bc0>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d104      	bne.n	8004280 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8004276:	4a6b      	ldr	r2, [pc, #428]	; (8004424 <menu+0x2bcc>)
 8004278:	2101      	movs	r1, #1
 800427a:	2002      	movs	r0, #2
 800427c:	f7fc fa9e 	bl	80007bc <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004280:	4b69      	ldr	r3, [pc, #420]	; (8004428 <menu+0x2bd0>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	220a      	movs	r2, #10
 8004286:	4969      	ldr	r1, [pc, #420]	; (800442c <menu+0x2bd4>)
 8004288:	4618      	mov	r0, r3
 800428a:	f008 f877 	bl	800c37c <itoa>
		lcd_print(2,16,snum);
 800428e:	4a67      	ldr	r2, [pc, #412]	; (800442c <menu+0x2bd4>)
 8004290:	2110      	movs	r1, #16
 8004292:	2002      	movs	r0, #2
 8004294:	f7fc fa92 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004298:	2102      	movs	r1, #2
 800429a:	4865      	ldr	r0, [pc, #404]	; (8004430 <menu+0x2bd8>)
 800429c:	f005 f842 	bl	8009324 <HAL_GPIO_ReadPin>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d115      	bne.n	80042d2 <menu+0x2a7a>
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <menu+0x2bdc>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f083 0301 	eor.w	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80042b4:	4b5c      	ldr	r3, [pc, #368]	; (8004428 <menu+0x2bd0>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	4b5a      	ldr	r3, [pc, #360]	; (8004428 <menu+0x2bd0>)
 80042be:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <menu+0x2bd0>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d902      	bls.n	80042ce <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 80042c8:	4b57      	ldr	r3, [pc, #348]	; (8004428 <menu+0x2bd0>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042ce:	f001 fba9 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042d2:	2104      	movs	r1, #4
 80042d4:	4856      	ldr	r0, [pc, #344]	; (8004430 <menu+0x2bd8>)
 80042d6:	f005 f825 	bl	8009324 <HAL_GPIO_ReadPin>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d115      	bne.n	800430c <menu+0x2ab4>
 80042e0:	4b54      	ldr	r3, [pc, #336]	; (8004434 <menu+0x2bdc>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80042ee:	4b4e      	ldr	r3, [pc, #312]	; (8004428 <menu+0x2bd0>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <menu+0x2bd0>)
 80042f8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80042fa:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <menu+0x2bd0>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d902      	bls.n	8004308 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <menu+0x2bd0>)
 8004304:	2205      	movs	r2, #5
 8004306:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004308:	f001 fb8c 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800430c:	2108      	movs	r1, #8
 800430e:	4848      	ldr	r0, [pc, #288]	; (8004430 <menu+0x2bd8>)
 8004310:	f005 f808 	bl	8009324 <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10d      	bne.n	8004336 <menu+0x2ade>
 800431a:	4b46      	ldr	r3, [pc, #280]	; (8004434 <menu+0x2bdc>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	f083 0301 	eor.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <menu+0x2bd0>)
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <menu+0x2be0>)
 800432e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <menu+0x2be4>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004336:	4b42      	ldr	r3, [pc, #264]	; (8004440 <menu+0x2be8>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b1a      	cmp	r3, #26
 800433c:	f040 80ec 	bne.w	8004518 <menu+0x2cc0>
		if(dilSecim == 0) {
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <menu+0x2bc0>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004348:	4a3e      	ldr	r2, [pc, #248]	; (8004444 <menu+0x2bec>)
 800434a:	2101      	movs	r1, #1
 800434c:	2001      	movs	r0, #1
 800434e:	f7fc fa35 	bl	80007bc <lcd_print>
 8004352:	e008      	b.n	8004366 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <menu+0x2bc0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d104      	bne.n	8004366 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 800435c:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <menu+0x2bf0>)
 800435e:	2101      	movs	r1, #1
 8004360:	2001      	movs	r0, #1
 8004362:	f7fc fa2b 	bl	80007bc <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <menu+0x2bf4>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b63      	cmp	r3, #99	; 0x63
 800436c:	d91e      	bls.n	80043ac <menu+0x2b54>
			if(dilSecim == 0) {
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <menu+0x2bc0>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8004376:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <menu+0x2bc8>)
 8004378:	2101      	movs	r1, #1
 800437a:	2002      	movs	r0, #2
 800437c:	f7fc fa1e 	bl	80007bc <lcd_print>
			}
			if(dilSecim == 1) {
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <menu+0x2bc0>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d104      	bne.n	8004392 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <menu+0x2bcc>)
 800438a:	2101      	movs	r1, #1
 800438c:	2002      	movs	r0, #2
 800438e:	f7fc fa15 	bl	80007bc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <menu+0x2bf4>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	220a      	movs	r2, #10
 8004398:	4924      	ldr	r1, [pc, #144]	; (800442c <menu+0x2bd4>)
 800439a:	4618      	mov	r0, r3
 800439c:	f007 ffee 	bl	800c37c <itoa>
			lcd_print(2,14,snum);
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <menu+0x2bd4>)
 80043a2:	210e      	movs	r1, #14
 80043a4:	2002      	movs	r0, #2
 80043a6:	f7fc fa09 	bl	80007bc <lcd_print>
 80043aa:	e066      	b.n	800447a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <menu+0x2bf4>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b09      	cmp	r3, #9
 80043b2:	d923      	bls.n	80043fc <menu+0x2ba4>
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <menu+0x2bf4>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b63      	cmp	r3, #99	; 0x63
 80043ba:	d81f      	bhi.n	80043fc <menu+0x2ba4>
			if(dilSecim == 0) {
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <menu+0x2bc0>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <menu+0x2bc8>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	2002      	movs	r0, #2
 80043ca:	f7fc f9f7 	bl	80007bc <lcd_print>
 80043ce:	e008      	b.n	80043e2 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <menu+0x2bc0>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d104      	bne.n	80043e2 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 80043d8:	4a12      	ldr	r2, [pc, #72]	; (8004424 <menu+0x2bcc>)
 80043da:	2101      	movs	r1, #1
 80043dc:	2002      	movs	r0, #2
 80043de:	f7fc f9ed 	bl	80007bc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80043e2:	4b1a      	ldr	r3, [pc, #104]	; (800444c <menu+0x2bf4>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	220a      	movs	r2, #10
 80043e8:	4910      	ldr	r1, [pc, #64]	; (800442c <menu+0x2bd4>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	f007 ffc6 	bl	800c37c <itoa>
			lcd_print(2, 15, snum);
 80043f0:	4a0e      	ldr	r2, [pc, #56]	; (800442c <menu+0x2bd4>)
 80043f2:	210f      	movs	r1, #15
 80043f4:	2002      	movs	r0, #2
 80043f6:	f7fc f9e1 	bl	80007bc <lcd_print>
 80043fa:	e03e      	b.n	800447a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <menu+0x2bf4>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b09      	cmp	r3, #9
 8004402:	d83a      	bhi.n	800447a <menu+0x2c22>
			if(dilSecim == 0) {
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <menu+0x2bc0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d121      	bne.n	8004450 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <menu+0x2bc8>)
 800440e:	2101      	movs	r1, #1
 8004410:	2002      	movs	r0, #2
 8004412:	f7fc f9d3 	bl	80007bc <lcd_print>
 8004416:	e024      	b.n	8004462 <menu+0x2c0a>
 8004418:	2000033d 	.word	0x2000033d
 800441c:	0800d9a8 	.word	0x0800d9a8
 8004420:	0800d570 	.word	0x0800d570
 8004424:	0800d8e4 	.word	0x0800d8e4
 8004428:	20000333 	.word	0x20000333
 800442c:	20000294 	.word	0x20000294
 8004430:	40010800 	.word	0x40010800
 8004434:	2000034b 	.word	0x2000034b
 8004438:	20000224 	.word	0x20000224
 800443c:	20000348 	.word	0x20000348
 8004440:	2000031c 	.word	0x2000031c
 8004444:	0800d9bc 	.word	0x0800d9bc
 8004448:	0800d9d0 	.word	0x0800d9d0
 800444c:	20000334 	.word	0x20000334
			} else if(dilSecim == 1) {
 8004450:	4b8f      	ldr	r3, [pc, #572]	; (8004690 <menu+0x2e38>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d104      	bne.n	8004462 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004458:	4a8e      	ldr	r2, [pc, #568]	; (8004694 <menu+0x2e3c>)
 800445a:	2101      	movs	r1, #1
 800445c:	2002      	movs	r0, #2
 800445e:	f7fc f9ad 	bl	80007bc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <menu+0x2e40>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	220a      	movs	r2, #10
 8004468:	498c      	ldr	r1, [pc, #560]	; (800469c <menu+0x2e44>)
 800446a:	4618      	mov	r0, r3
 800446c:	f007 ff86 	bl	800c37c <itoa>
			lcd_print(2, 16, snum);
 8004470:	4a8a      	ldr	r2, [pc, #552]	; (800469c <menu+0x2e44>)
 8004472:	2110      	movs	r1, #16
 8004474:	2002      	movs	r0, #2
 8004476:	f7fc f9a1 	bl	80007bc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800447a:	2102      	movs	r1, #2
 800447c:	4888      	ldr	r0, [pc, #544]	; (80046a0 <menu+0x2e48>)
 800447e:	f004 ff51 	bl	8009324 <HAL_GPIO_ReadPin>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d115      	bne.n	80044b4 <menu+0x2c5c>
 8004488:	4b86      	ldr	r3, [pc, #536]	; (80046a4 <menu+0x2e4c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00e      	beq.n	80044b4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004496:	4b80      	ldr	r3, [pc, #512]	; (8004698 <menu+0x2e40>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b7e      	ldr	r3, [pc, #504]	; (8004698 <menu+0x2e40>)
 80044a0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80044a2:	4b7d      	ldr	r3, [pc, #500]	; (8004698 <menu+0x2e40>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2bb4      	cmp	r3, #180	; 0xb4
 80044a8:	d902      	bls.n	80044b0 <menu+0x2c58>
				makineCalismaTmr = 0;
 80044aa:	4b7b      	ldr	r3, [pc, #492]	; (8004698 <menu+0x2e40>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044b0:	f001 fab8 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b4:	2104      	movs	r1, #4
 80044b6:	487a      	ldr	r0, [pc, #488]	; (80046a0 <menu+0x2e48>)
 80044b8:	f004 ff34 	bl	8009324 <HAL_GPIO_ReadPin>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d115      	bne.n	80044ee <menu+0x2c96>
 80044c2:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <menu+0x2e4c>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80044d0:	4b71      	ldr	r3, [pc, #452]	; (8004698 <menu+0x2e40>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <menu+0x2e40>)
 80044da:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80044dc:	4b6e      	ldr	r3, [pc, #440]	; (8004698 <menu+0x2e40>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2bb5      	cmp	r3, #181	; 0xb5
 80044e2:	d902      	bls.n	80044ea <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80044e4:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <menu+0x2e40>)
 80044e6:	22b4      	movs	r2, #180	; 0xb4
 80044e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044ea:	f001 fa9b 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ee:	2108      	movs	r1, #8
 80044f0:	486b      	ldr	r0, [pc, #428]	; (80046a0 <menu+0x2e48>)
 80044f2:	f004 ff17 	bl	8009324 <HAL_GPIO_ReadPin>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10d      	bne.n	8004518 <menu+0x2cc0>
 80044fc:	4b69      	ldr	r3, [pc, #420]	; (80046a4 <menu+0x2e4c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f083 0301 	eor.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800450a:	4b63      	ldr	r3, [pc, #396]	; (8004698 <menu+0x2e40>)
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <menu+0x2e50>)
 8004510:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004512:	4b66      	ldr	r3, [pc, #408]	; (80046ac <menu+0x2e54>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004518:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <menu+0x2e58>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b1b      	cmp	r3, #27
 800451e:	f040 8083 	bne.w	8004628 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004522:	4a64      	ldr	r2, [pc, #400]	; (80046b4 <menu+0x2e5c>)
 8004524:	2101      	movs	r1, #1
 8004526:	2001      	movs	r0, #1
 8004528:	f7fc f948 	bl	80007bc <lcd_print>

		if(buzzer == 0) {
 800452c:	4b62      	ldr	r3, [pc, #392]	; (80046b8 <menu+0x2e60>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d113      	bne.n	800455c <menu+0x2d04>
			if(dilSecim == 0) {
 8004534:	4b56      	ldr	r3, [pc, #344]	; (8004690 <menu+0x2e38>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800453c:	4a5f      	ldr	r2, [pc, #380]	; (80046bc <menu+0x2e64>)
 800453e:	2101      	movs	r1, #1
 8004540:	2002      	movs	r0, #2
 8004542:	f7fc f93b 	bl	80007bc <lcd_print>
 8004546:	e020      	b.n	800458a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004548:	4b51      	ldr	r3, [pc, #324]	; (8004690 <menu+0x2e38>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d11c      	bne.n	800458a <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004550:	4a5b      	ldr	r2, [pc, #364]	; (80046c0 <menu+0x2e68>)
 8004552:	2101      	movs	r1, #1
 8004554:	2002      	movs	r0, #2
 8004556:	f7fc f931 	bl	80007bc <lcd_print>
 800455a:	e016      	b.n	800458a <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 800455c:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <menu+0x2e60>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d112      	bne.n	800458a <menu+0x2d32>
			if(dilSecim == 0) {
 8004564:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <menu+0x2e38>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 800456c:	4a55      	ldr	r2, [pc, #340]	; (80046c4 <menu+0x2e6c>)
 800456e:	2101      	movs	r1, #1
 8004570:	2002      	movs	r0, #2
 8004572:	f7fc f923 	bl	80007bc <lcd_print>
 8004576:	e008      	b.n	800458a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004578:	4b45      	ldr	r3, [pc, #276]	; (8004690 <menu+0x2e38>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d104      	bne.n	800458a <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004580:	4a51      	ldr	r2, [pc, #324]	; (80046c8 <menu+0x2e70>)
 8004582:	2101      	movs	r1, #1
 8004584:	2002      	movs	r0, #2
 8004586:	f7fc f919 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800458a:	2102      	movs	r1, #2
 800458c:	4844      	ldr	r0, [pc, #272]	; (80046a0 <menu+0x2e48>)
 800458e:	f004 fec9 	bl	8009324 <HAL_GPIO_ReadPin>
 8004592:	4603      	mov	r3, r0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d115      	bne.n	80045c4 <menu+0x2d6c>
 8004598:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <menu+0x2e4c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f083 0301 	eor.w	r3, r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00e      	beq.n	80045c4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80045a6:	4b44      	ldr	r3, [pc, #272]	; (80046b8 <menu+0x2e60>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <menu+0x2e60>)
 80045b0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80045b2:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <menu+0x2e60>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d902      	bls.n	80045c0 <menu+0x2d68>
				buzzer = 0;
 80045ba:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <menu+0x2e60>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045c0:	f001 fa30 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045c4:	2104      	movs	r1, #4
 80045c6:	4836      	ldr	r0, [pc, #216]	; (80046a0 <menu+0x2e48>)
 80045c8:	f004 feac 	bl	8009324 <HAL_GPIO_ReadPin>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d115      	bne.n	80045fe <menu+0x2da6>
 80045d2:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <menu+0x2e4c>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <menu+0x2da6>
			buzzer = buzzer - 1;
 80045e0:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <menu+0x2e60>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <menu+0x2e60>)
 80045ea:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80045ec:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <menu+0x2e60>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <menu+0x2da2>
		   		buzzer = 1;
 80045f4:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <menu+0x2e60>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045fa:	f001 fa13 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045fe:	2108      	movs	r1, #8
 8004600:	4827      	ldr	r0, [pc, #156]	; (80046a0 <menu+0x2e48>)
 8004602:	f004 fe8f 	bl	8009324 <HAL_GPIO_ReadPin>
 8004606:	4603      	mov	r3, r0
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10d      	bne.n	8004628 <menu+0x2dd0>
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <menu+0x2e4c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d006      	beq.n	8004628 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <menu+0x2e60>)
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <menu+0x2e50>)
 8004620:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <menu+0x2e54>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <menu+0x2e58>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b1c      	cmp	r3, #28
 800462e:	f040 80ab 	bne.w	8004788 <menu+0x2f30>
		calismaSayModu = 0;
 8004632:	4b26      	ldr	r3, [pc, #152]	; (80046cc <menu+0x2e74>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <menu+0x2e78>)
 800463a:	2101      	movs	r1, #1
 800463c:	2001      	movs	r0, #1
 800463e:	f7fc f8bd 	bl	80007bc <lcd_print>

		if(demoMode == 0) {
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <menu+0x2e7c>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d113      	bne.n	8004672 <menu+0x2e1a>
			if(dilSecim == 0) {
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <menu+0x2e38>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004652:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <menu+0x2e64>)
 8004654:	2101      	movs	r1, #1
 8004656:	2002      	movs	r0, #2
 8004658:	f7fc f8b0 	bl	80007bc <lcd_print>
 800465c:	e045      	b.n	80046ea <menu+0x2e92>
			} else if(dilSecim == 1) {
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <menu+0x2e38>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d141      	bne.n	80046ea <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <menu+0x2e68>)
 8004668:	2101      	movs	r1, #1
 800466a:	2002      	movs	r0, #2
 800466c:	f7fc f8a6 	bl	80007bc <lcd_print>
 8004670:	e03b      	b.n	80046ea <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <menu+0x2e7c>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d137      	bne.n	80046ea <menu+0x2e92>
			if(dilSecim == 0){
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <menu+0x2e38>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d12a      	bne.n	80046d8 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004682:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <menu+0x2e6c>)
 8004684:	2101      	movs	r1, #1
 8004686:	2002      	movs	r0, #2
 8004688:	f7fc f898 	bl	80007bc <lcd_print>
 800468c:	e02d      	b.n	80046ea <menu+0x2e92>
 800468e:	bf00      	nop
 8004690:	2000033d 	.word	0x2000033d
 8004694:	0800d8e4 	.word	0x0800d8e4
 8004698:	20000334 	.word	0x20000334
 800469c:	20000294 	.word	0x20000294
 80046a0:	40010800 	.word	0x40010800
 80046a4:	2000034b 	.word	0x2000034b
 80046a8:	20000224 	.word	0x20000224
 80046ac:	20000348 	.word	0x20000348
 80046b0:	2000031c 	.word	0x2000031c
 80046b4:	0800d9e4 	.word	0x0800d9e4
 80046b8:	20000338 	.word	0x20000338
 80046bc:	0800d30c 	.word	0x0800d30c
 80046c0:	0800d320 	.word	0x0800d320
 80046c4:	0800d36c 	.word	0x0800d36c
 80046c8:	0800d380 	.word	0x0800d380
 80046cc:	2000033c 	.word	0x2000033c
 80046d0:	0800d9f8 	.word	0x0800d9f8
 80046d4:	2000033a 	.word	0x2000033a
			} else if(dilSecim == 1) {
 80046d8:	4b71      	ldr	r3, [pc, #452]	; (80048a0 <menu+0x3048>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d104      	bne.n	80046ea <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80046e0:	4a70      	ldr	r2, [pc, #448]	; (80048a4 <menu+0x304c>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	2002      	movs	r0, #2
 80046e6:	f7fc f869 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ea:	2102      	movs	r1, #2
 80046ec:	486e      	ldr	r0, [pc, #440]	; (80048a8 <menu+0x3050>)
 80046ee:	f004 fe19 	bl	8009324 <HAL_GPIO_ReadPin>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d115      	bne.n	8004724 <menu+0x2ecc>
 80046f8:	4b6c      	ldr	r3, [pc, #432]	; (80048ac <menu+0x3054>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f083 0301 	eor.w	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00e      	beq.n	8004724 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004706:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <menu+0x3058>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4b68      	ldr	r3, [pc, #416]	; (80048b0 <menu+0x3058>)
 8004710:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004712:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <menu+0x3058>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d902      	bls.n	8004720 <menu+0x2ec8>
				demoMode = 0;
 800471a:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <menu+0x3058>)
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004720:	f001 f980 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004724:	2104      	movs	r1, #4
 8004726:	4860      	ldr	r0, [pc, #384]	; (80048a8 <menu+0x3050>)
 8004728:	f004 fdfc 	bl	8009324 <HAL_GPIO_ReadPin>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d115      	bne.n	800475e <menu+0x2f06>
 8004732:	4b5e      	ldr	r3, [pc, #376]	; (80048ac <menu+0x3054>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f083 0301 	eor.w	r3, r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004740:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <menu+0x3058>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	3b01      	subs	r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <menu+0x3058>)
 800474a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800474c:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <menu+0x3058>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <menu+0x2f02>
		   		demoMode = 1;
 8004754:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <menu+0x3058>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800475a:	f001 f963 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800475e:	2108      	movs	r1, #8
 8004760:	4851      	ldr	r0, [pc, #324]	; (80048a8 <menu+0x3050>)
 8004762:	f004 fddf 	bl	8009324 <HAL_GPIO_ReadPin>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d10d      	bne.n	8004788 <menu+0x2f30>
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <menu+0x3054>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f083 0301 	eor.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <menu+0x2f30>
			eepromData[26] = demoMode;
 800477a:	4b4d      	ldr	r3, [pc, #308]	; (80048b0 <menu+0x3058>)
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	4b4d      	ldr	r3, [pc, #308]	; (80048b4 <menu+0x305c>)
 8004780:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004782:	4b4d      	ldr	r3, [pc, #308]	; (80048b8 <menu+0x3060>)
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004788:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <menu+0x3064>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b1d      	cmp	r3, #29
 800478e:	f040 8132 	bne.w	80049f6 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004792:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <menu+0x3068>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d113      	bne.n	80047c2 <menu+0x2f6a>
 800479a:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <menu+0x306c>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <menu+0x2f6a>
 80047a2:	4b49      	ldr	r3, [pc, #292]	; (80048c8 <menu+0x3070>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <menu+0x2f6a>
 80047aa:	4b48      	ldr	r3, [pc, #288]	; (80048cc <menu+0x3074>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <menu+0x2f6a>
 80047b2:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <menu+0x3078>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80047ba:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <menu+0x307c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e002      	b.n	80047c8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80047c2:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <menu+0x307c>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80047c8:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <menu+0x3080>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d154      	bne.n	800487a <menu+0x3022>
			if(dilSecim == 0) {
 80047d0:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <menu+0x3048>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80047d8:	4a40      	ldr	r2, [pc, #256]	; (80048dc <menu+0x3084>)
 80047da:	2101      	movs	r1, #1
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fb ffed 	bl	80007bc <lcd_print>
 80047e2:	e008      	b.n	80047f6 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80047e4:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <menu+0x3048>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d104      	bne.n	80047f6 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80047ec:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <menu+0x3088>)
 80047ee:	2101      	movs	r1, #1
 80047f0:	2001      	movs	r0, #1
 80047f2:	f7fb ffe3 	bl	80007bc <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80047f6:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <menu+0x3078>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	220a      	movs	r2, #10
 80047fc:	4939      	ldr	r1, [pc, #228]	; (80048e4 <menu+0x308c>)
 80047fe:	4618      	mov	r0, r3
 8004800:	f007 fdbc 	bl	800c37c <itoa>
			lcd_print(2, 12, snum);
 8004804:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <menu+0x308c>)
 8004806:	210c      	movs	r1, #12
 8004808:	2002      	movs	r0, #2
 800480a:	f7fb ffd7 	bl	80007bc <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <menu+0x3074>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	220a      	movs	r2, #10
 8004814:	4933      	ldr	r1, [pc, #204]	; (80048e4 <menu+0x308c>)
 8004816:	4618      	mov	r0, r3
 8004818:	f007 fdb0 	bl	800c37c <itoa>
			lcd_print(2, 13, snum);
 800481c:	4a31      	ldr	r2, [pc, #196]	; (80048e4 <menu+0x308c>)
 800481e:	210d      	movs	r1, #13
 8004820:	2002      	movs	r0, #2
 8004822:	f7fb ffcb 	bl	80007bc <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <menu+0x3070>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	220a      	movs	r2, #10
 800482c:	492d      	ldr	r1, [pc, #180]	; (80048e4 <menu+0x308c>)
 800482e:	4618      	mov	r0, r3
 8004830:	f007 fda4 	bl	800c37c <itoa>
			lcd_print(2, 14, snum);
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <menu+0x308c>)
 8004836:	210e      	movs	r1, #14
 8004838:	2002      	movs	r0, #2
 800483a:	f7fb ffbf 	bl	80007bc <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800483e:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <menu+0x306c>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	220a      	movs	r2, #10
 8004844:	4927      	ldr	r1, [pc, #156]	; (80048e4 <menu+0x308c>)
 8004846:	4618      	mov	r0, r3
 8004848:	f007 fd98 	bl	800c37c <itoa>
			lcd_print(2, 15, snum);
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <menu+0x308c>)
 800484e:	210f      	movs	r1, #15
 8004850:	2002      	movs	r0, #2
 8004852:	f7fb ffb3 	bl	80007bc <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <menu+0x3068>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	220a      	movs	r2, #10
 800485c:	4921      	ldr	r1, [pc, #132]	; (80048e4 <menu+0x308c>)
 800485e:	4618      	mov	r0, r3
 8004860:	f007 fd8c 	bl	800c37c <itoa>
			lcd_print(2, 16, snum);
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <menu+0x308c>)
 8004866:	2110      	movs	r1, #16
 8004868:	2002      	movs	r0, #2
 800486a:	f7fb ffa7 	bl	80007bc <lcd_print>

			lcd_print(2, 1, "           ");
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <menu+0x3090>)
 8004870:	2101      	movs	r1, #1
 8004872:	2002      	movs	r0, #2
 8004874:	f7fb ffa2 	bl	80007bc <lcd_print>
 8004878:	e048      	b.n	800490c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <menu+0x3080>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d144      	bne.n	800490c <menu+0x30b4>
			if(dilSecim == 0) {
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <menu+0x3048>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d132      	bne.n	80048f0 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <menu+0x3084>)
 800488c:	2101      	movs	r1, #1
 800488e:	2001      	movs	r0, #1
 8004890:	f7fb ff94 	bl	80007bc <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <menu+0x3094>)
 8004896:	2101      	movs	r1, #1
 8004898:	2002      	movs	r0, #2
 800489a:	f7fb ff8f 	bl	80007bc <lcd_print>
 800489e:	e035      	b.n	800490c <menu+0x30b4>
 80048a0:	2000033d 	.word	0x2000033d
 80048a4:	0800d380 	.word	0x0800d380
 80048a8:	40010800 	.word	0x40010800
 80048ac:	2000034b 	.word	0x2000034b
 80048b0:	2000033a 	.word	0x2000033a
 80048b4:	20000224 	.word	0x20000224
 80048b8:	20000348 	.word	0x20000348
 80048bc:	2000031c 	.word	0x2000031c
 80048c0:	20000319 	.word	0x20000319
 80048c4:	2000031a 	.word	0x2000031a
 80048c8:	200000ac 	.word	0x200000ac
 80048cc:	200000ad 	.word	0x200000ad
 80048d0:	2000031b 	.word	0x2000031b
 80048d4:	2000035d 	.word	0x2000035d
 80048d8:	2000033c 	.word	0x2000033c
 80048dc:	0800da08 	.word	0x0800da08
 80048e0:	0800da1c 	.word	0x0800da1c
 80048e4:	20000294 	.word	0x20000294
 80048e8:	0800da30 	.word	0x0800da30
 80048ec:	0800da3c 	.word	0x0800da3c
			} else if(dilSecim == 1) {
 80048f0:	4b94      	ldr	r3, [pc, #592]	; (8004b44 <menu+0x32ec>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d109      	bne.n	800490c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80048f8:	4a93      	ldr	r2, [pc, #588]	; (8004b48 <menu+0x32f0>)
 80048fa:	2101      	movs	r1, #1
 80048fc:	2001      	movs	r0, #1
 80048fe:	f7fb ff5d 	bl	80007bc <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004902:	4a92      	ldr	r2, [pc, #584]	; (8004b4c <menu+0x32f4>)
 8004904:	2101      	movs	r1, #1
 8004906:	2002      	movs	r0, #2
 8004908:	f7fb ff58 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800490c:	2102      	movs	r1, #2
 800490e:	4890      	ldr	r0, [pc, #576]	; (8004b50 <menu+0x32f8>)
 8004910:	f004 fd08 	bl	8009324 <HAL_GPIO_ReadPin>
 8004914:	4603      	mov	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	d119      	bne.n	800494e <menu+0x30f6>
 800491a:	4b8e      	ldr	r3, [pc, #568]	; (8004b54 <menu+0x32fc>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	f083 0301 	eor.w	r3, r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d012      	beq.n	800494e <menu+0x30f6>
 8004928:	4b8b      	ldr	r3, [pc, #556]	; (8004b58 <menu+0x3300>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004930:	4b8a      	ldr	r3, [pc, #552]	; (8004b5c <menu+0x3304>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <menu+0x3304>)
 800493a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800493c:	4b87      	ldr	r3, [pc, #540]	; (8004b5c <menu+0x3304>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d902      	bls.n	800494a <menu+0x30f2>
				calismaSayModu = 0;
 8004944:	4b85      	ldr	r3, [pc, #532]	; (8004b5c <menu+0x3304>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800494a:	f001 f86b 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800494e:	2104      	movs	r1, #4
 8004950:	487f      	ldr	r0, [pc, #508]	; (8004b50 <menu+0x32f8>)
 8004952:	f004 fce7 	bl	8009324 <HAL_GPIO_ReadPin>
 8004956:	4603      	mov	r3, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	d119      	bne.n	8004990 <menu+0x3138>
 800495c:	4b7d      	ldr	r3, [pc, #500]	; (8004b54 <menu+0x32fc>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f083 0301 	eor.w	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <menu+0x3138>
 800496a:	4b7b      	ldr	r3, [pc, #492]	; (8004b58 <menu+0x3300>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00e      	beq.n	8004990 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004972:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <menu+0x3304>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4b78      	ldr	r3, [pc, #480]	; (8004b5c <menu+0x3304>)
 800497c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800497e:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <menu+0x3304>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <menu+0x3134>
		   		calismaSayModu = 1;
 8004986:	4b75      	ldr	r3, [pc, #468]	; (8004b5c <menu+0x3304>)
 8004988:	2201      	movs	r2, #1
 800498a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800498c:	f001 f84a 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004990:	2108      	movs	r1, #8
 8004992:	486f      	ldr	r0, [pc, #444]	; (8004b50 <menu+0x32f8>)
 8004994:	f004 fcc6 	bl	8009324 <HAL_GPIO_ReadPin>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12b      	bne.n	80049f6 <menu+0x319e>
 800499e:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <menu+0x32fc>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f083 0301 	eor.w	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d024      	beq.n	80049f6 <menu+0x319e>
			eepromData[32] = 0;
 80049ac:	4b6c      	ldr	r3, [pc, #432]	; (8004b60 <menu+0x3308>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80049b4:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <menu+0x3308>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80049ba:	4b69      	ldr	r3, [pc, #420]	; (8004b60 <menu+0x3308>)
 80049bc:	2200      	movs	r2, #0
 80049be:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80049c0:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <menu+0x3308>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80049c6:	4b66      	ldr	r3, [pc, #408]	; (8004b60 <menu+0x3308>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80049cc:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <menu+0x330c>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80049d2:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <menu+0x3310>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80049d8:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <menu+0x3314>)
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80049de:	4b64      	ldr	r3, [pc, #400]	; (8004b70 <menu+0x3318>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80049e4:	4b63      	ldr	r3, [pc, #396]	; (8004b74 <menu+0x331c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80049ea:	4b5c      	ldr	r3, [pc, #368]	; (8004b5c <menu+0x3304>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80049f0:	4b61      	ldr	r3, [pc, #388]	; (8004b78 <menu+0x3320>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80049f6:	4b61      	ldr	r3, [pc, #388]	; (8004b7c <menu+0x3324>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b1e      	cmp	r3, #30
 80049fc:	d16f      	bne.n	8004ade <menu+0x3286>
		calismaSayModu = 0;
 80049fe:	4b57      	ldr	r3, [pc, #348]	; (8004b5c <menu+0x3304>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004a04:	4b4f      	ldr	r3, [pc, #316]	; (8004b44 <menu+0x32ec>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004a0c:	4a5c      	ldr	r2, [pc, #368]	; (8004b80 <menu+0x3328>)
 8004a0e:	2101      	movs	r1, #1
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7fb fed3 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004a16:	4a5b      	ldr	r2, [pc, #364]	; (8004b84 <menu+0x332c>)
 8004a18:	2101      	movs	r1, #1
 8004a1a:	2002      	movs	r0, #2
 8004a1c:	f7fb fece 	bl	80007bc <lcd_print>
 8004a20:	e00d      	b.n	8004a3e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004a22:	4b48      	ldr	r3, [pc, #288]	; (8004b44 <menu+0x32ec>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d109      	bne.n	8004a3e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004a2a:	4a57      	ldr	r2, [pc, #348]	; (8004b88 <menu+0x3330>)
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7fb fec4 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004a34:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <menu+0x3334>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f7fb febf 	bl	80007bc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4843      	ldr	r0, [pc, #268]	; (8004b50 <menu+0x32f8>)
 8004a42:	f004 fc6f 	bl	8009324 <HAL_GPIO_ReadPin>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d115      	bne.n	8004a78 <menu+0x3220>
 8004a4c:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <menu+0x32fc>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00e      	beq.n	8004a78 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <menu+0x32ec>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <menu+0x32ec>)
 8004a64:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <menu+0x32ec>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d902      	bls.n	8004a74 <menu+0x321c>
				dilSecim = 0;
 8004a6e:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <menu+0x32ec>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004a74:	f000 ffd6 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a78:	2104      	movs	r1, #4
 8004a7a:	4835      	ldr	r0, [pc, #212]	; (8004b50 <menu+0x32f8>)
 8004a7c:	f004 fc52 	bl	8009324 <HAL_GPIO_ReadPin>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d115      	bne.n	8004ab2 <menu+0x325a>
 8004a86:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <menu+0x32fc>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f083 0301 	eor.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004a94:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <menu+0x32ec>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <menu+0x32ec>)
 8004a9e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004aa0:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <menu+0x32ec>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <menu+0x3256>
		   		dilSecim = 1;
 8004aa8:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <menu+0x32ec>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004aae:	f000 ffb9 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ab2:	2108      	movs	r1, #8
 8004ab4:	4826      	ldr	r0, [pc, #152]	; (8004b50 <menu+0x32f8>)
 8004ab6:	f004 fc35 	bl	8009324 <HAL_GPIO_ReadPin>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10e      	bne.n	8004ade <menu+0x3286>
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <menu+0x32fc>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <menu+0x3286>
			eepromData[33] = dilSecim;
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <menu+0x32ec>)
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <menu+0x3308>)
 8004ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <menu+0x3320>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004ade:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <menu+0x3324>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b1f      	cmp	r3, #31
 8004ae4:	f040 80b7 	bne.w	8004c56 <menu+0x33fe>
		calismaSayModu = 0;
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <menu+0x3304>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004aee:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <menu+0x3338>)
 8004af0:	2101      	movs	r1, #1
 8004af2:	2001      	movs	r0, #1
 8004af4:	f7fb fe62 	bl	80007bc <lcd_print>

		if(iotMode == 0) {
 8004af8:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <menu+0x333c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d113      	bne.n	8004b28 <menu+0x32d0>
			if(dilSecim == 0) {
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <menu+0x32ec>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <menu+0x3340>)
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	2002      	movs	r0, #2
 8004b0e:	f7fb fe55 	bl	80007bc <lcd_print>
 8004b12:	e050      	b.n	8004bb6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <menu+0x32ec>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d14c      	bne.n	8004bb6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <menu+0x3344>)
 8004b1e:	2101      	movs	r1, #1
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fb fe4b 	bl	80007bc <lcd_print>
 8004b26:	e046      	b.n	8004bb6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <menu+0x333c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d142      	bne.n	8004bb6 <menu+0x335e>
			if(dilSecim == 0){
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <menu+0x32ec>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d135      	bne.n	8004ba4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004b38:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <menu+0x3348>)
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	2002      	movs	r0, #2
 8004b3e:	f7fb fe3d 	bl	80007bc <lcd_print>
 8004b42:	e038      	b.n	8004bb6 <menu+0x335e>
 8004b44:	2000033d 	.word	0x2000033d
 8004b48:	0800da1c 	.word	0x0800da1c
 8004b4c:	0800da50 	.word	0x0800da50
 8004b50:	40010800 	.word	0x40010800
 8004b54:	2000034b 	.word	0x2000034b
 8004b58:	2000035d 	.word	0x2000035d
 8004b5c:	2000033c 	.word	0x2000033c
 8004b60:	20000224 	.word	0x20000224
 8004b64:	2000031b 	.word	0x2000031b
 8004b68:	200000ad 	.word	0x200000ad
 8004b6c:	200000ac 	.word	0x200000ac
 8004b70:	2000031a 	.word	0x2000031a
 8004b74:	20000319 	.word	0x20000319
 8004b78:	20000348 	.word	0x20000348
 8004b7c:	2000031c 	.word	0x2000031c
 8004b80:	0800da64 	.word	0x0800da64
 8004b84:	0800da78 	.word	0x0800da78
 8004b88:	0800da8c 	.word	0x0800da8c
 8004b8c:	0800daa0 	.word	0x0800daa0
 8004b90:	0800dab4 	.word	0x0800dab4
 8004b94:	2000033b 	.word	0x2000033b
 8004b98:	0800d30c 	.word	0x0800d30c
 8004b9c:	0800d320 	.word	0x0800d320
 8004ba0:	0800d36c 	.word	0x0800d36c
			} else if(dilSecim == 1) {
 8004ba4:	4bac      	ldr	r3, [pc, #688]	; (8004e58 <menu+0x3600>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d104      	bne.n	8004bb6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004bac:	4aab      	ldr	r2, [pc, #684]	; (8004e5c <menu+0x3604>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f7fb fe03 	bl	80007bc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	48a9      	ldr	r0, [pc, #676]	; (8004e60 <menu+0x3608>)
 8004bba:	f004 fbb3 	bl	8009324 <HAL_GPIO_ReadPin>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d115      	bne.n	8004bf0 <menu+0x3398>
 8004bc4:	4ba7      	ldr	r3, [pc, #668]	; (8004e64 <menu+0x360c>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f083 0301 	eor.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00e      	beq.n	8004bf0 <menu+0x3398>
			iotMode = iotMode + 1;
 8004bd2:	4ba5      	ldr	r3, [pc, #660]	; (8004e68 <menu+0x3610>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4ba3      	ldr	r3, [pc, #652]	; (8004e68 <menu+0x3610>)
 8004bdc:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004bde:	4ba2      	ldr	r3, [pc, #648]	; (8004e68 <menu+0x3610>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d902      	bls.n	8004bec <menu+0x3394>
				iotMode = 0;
 8004be6:	4ba0      	ldr	r3, [pc, #640]	; (8004e68 <menu+0x3610>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004bec:	f000 ff1a 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	489b      	ldr	r0, [pc, #620]	; (8004e60 <menu+0x3608>)
 8004bf4:	f004 fb96 	bl	8009324 <HAL_GPIO_ReadPin>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d115      	bne.n	8004c2a <menu+0x33d2>
 8004bfe:	4b99      	ldr	r3, [pc, #612]	; (8004e64 <menu+0x360c>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	f083 0301 	eor.w	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00e      	beq.n	8004c2a <menu+0x33d2>
			iotMode = iotMode - 1;
 8004c0c:	4b96      	ldr	r3, [pc, #600]	; (8004e68 <menu+0x3610>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	4b94      	ldr	r3, [pc, #592]	; (8004e68 <menu+0x3610>)
 8004c16:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004c18:	4b93      	ldr	r3, [pc, #588]	; (8004e68 <menu+0x3610>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <menu+0x33ce>
		   		iotMode = 1;
 8004c20:	4b91      	ldr	r3, [pc, #580]	; (8004e68 <menu+0x3610>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004c26:	f000 fefd 	bl	8005a24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	488c      	ldr	r0, [pc, #560]	; (8004e60 <menu+0x3608>)
 8004c2e:	f004 fb79 	bl	8009324 <HAL_GPIO_ReadPin>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10e      	bne.n	8004c56 <menu+0x33fe>
 8004c38:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <menu+0x360c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004c46:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <menu+0x3610>)
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <menu+0x3614>)
 8004c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004c50:	4b87      	ldr	r3, [pc, #540]	; (8004e70 <menu+0x3618>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004c56:	4b87      	ldr	r3, [pc, #540]	; (8004e74 <menu+0x361c>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d138      	bne.n	8004cd0 <menu+0x3478>
		calismaSayModu = 0;
 8004c5e:	4b86      	ldr	r3, [pc, #536]	; (8004e78 <menu+0x3620>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004c64:	4a85      	ldr	r2, [pc, #532]	; (8004e7c <menu+0x3624>)
 8004c66:	2101      	movs	r1, #1
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7fb fda7 	bl	80007bc <lcd_print>

		lcd_print(2, 1, machineID);
 8004c6e:	4a84      	ldr	r2, [pc, #528]	; (8004e80 <menu+0x3628>)
 8004c70:	2101      	movs	r1, #1
 8004c72:	2002      	movs	r0, #2
 8004c74:	f7fb fda2 	bl	80007bc <lcd_print>
		lcd_print(2, 13, "    ");
 8004c78:	4a82      	ldr	r2, [pc, #520]	; (8004e84 <menu+0x362c>)
 8004c7a:	210d      	movs	r1, #13
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fb fd9d 	bl	80007bc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c82:	2102      	movs	r1, #2
 8004c84:	4876      	ldr	r0, [pc, #472]	; (8004e60 <menu+0x3608>)
 8004c86:	f004 fb4d 	bl	8009324 <HAL_GPIO_ReadPin>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d11f      	bne.n	8004cd0 <menu+0x3478>
 8004c90:	2104      	movs	r1, #4
 8004c92:	4873      	ldr	r0, [pc, #460]	; (8004e60 <menu+0x3608>)
 8004c94:	f004 fb46 	bl	8009324 <HAL_GPIO_ReadPin>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d118      	bne.n	8004cd0 <menu+0x3478>
 8004c9e:	4b71      	ldr	r3, [pc, #452]	; (8004e64 <menu+0x360c>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	f083 0301 	eor.w	r3, r3, #1
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <menu+0x3478>
			takeMachineID(0);
 8004cac:	2000      	movs	r0, #0
 8004cae:	f7fc f80f 	bl	8000cd0 <takeMachineID>

			HAL_Delay(50);
 8004cb2:	2032      	movs	r0, #50	; 0x32
 8004cb4:	f003 fd66 	bl	8008784 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004cb8:	4a71      	ldr	r2, [pc, #452]	; (8004e80 <menu+0x3628>)
 8004cba:	2101      	movs	r1, #1
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f7fb fd7d 	bl	80007bc <lcd_print>
			lcd_print(2, 13, "    ");
 8004cc2:	4a70      	ldr	r2, [pc, #448]	; (8004e84 <menu+0x362c>)
 8004cc4:	210d      	movs	r1, #13
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7fb fd78 	bl	80007bc <lcd_print>

			bekle();
 8004ccc:	f000 feaa 	bl	8005a24 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004cd0:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <menu+0x361c>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b21      	cmp	r3, #33	; 0x21
 8004cd6:	d153      	bne.n	8004d80 <menu+0x3528>
		calismaSayModu = 0;
 8004cd8:	4b67      	ldr	r3, [pc, #412]	; (8004e78 <menu+0x3620>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004cde:	4a6a      	ldr	r2, [pc, #424]	; (8004e88 <menu+0x3630>)
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	f7fb fd6a 	bl	80007bc <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004ce8:	4868      	ldr	r0, [pc, #416]	; (8004e8c <menu+0x3634>)
 8004cea:	f7fb fa9b 	bl	8000224 <strlen>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d811      	bhi.n	8004d18 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004cf4:	4a65      	ldr	r2, [pc, #404]	; (8004e8c <menu+0x3634>)
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	2002      	movs	r0, #2
 8004cfa:	f7fb fd5f 	bl	80007bc <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004cfe:	4863      	ldr	r0, [pc, #396]	; (8004e8c <menu+0x3634>)
 8004d00:	f7fb fa90 	bl	8000224 <strlen>
 8004d04:	4603      	mov	r3, r0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	4a60      	ldr	r2, [pc, #384]	; (8004e90 <menu+0x3638>)
 8004d0e:	4619      	mov	r1, r3
 8004d10:	2002      	movs	r0, #2
 8004d12:	f7fb fd53 	bl	80007bc <lcd_print>
 8004d16:	e005      	b.n	8004d24 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	485b      	ldr	r0, [pc, #364]	; (8004e8c <menu+0x3634>)
 8004d20:	f7fc fcf4 	bl	800170c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d24:	2102      	movs	r1, #2
 8004d26:	484e      	ldr	r0, [pc, #312]	; (8004e60 <menu+0x3608>)
 8004d28:	f004 fafc 	bl	8009324 <HAL_GPIO_ReadPin>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d126      	bne.n	8004d80 <menu+0x3528>
 8004d32:	2104      	movs	r1, #4
 8004d34:	484a      	ldr	r0, [pc, #296]	; (8004e60 <menu+0x3608>)
 8004d36:	f004 faf5 	bl	8009324 <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d11f      	bne.n	8004d80 <menu+0x3528>
 8004d40:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <menu+0x360c>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <menu+0x3528>
			takeWifiSSID(0);
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fc f914 	bl	8000f7c <takeWifiSSID>

			HAL_Delay(100);
 8004d54:	2064      	movs	r0, #100	; 0x64
 8004d56:	f003 fd15 	bl	8008784 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004d5a:	4a4c      	ldr	r2, [pc, #304]	; (8004e8c <menu+0x3634>)
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	2002      	movs	r0, #2
 8004d60:	f7fb fd2c 	bl	80007bc <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004d64:	4849      	ldr	r0, [pc, #292]	; (8004e8c <menu+0x3634>)
 8004d66:	f7fb fa5d 	bl	8000224 <strlen>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4a47      	ldr	r2, [pc, #284]	; (8004e90 <menu+0x3638>)
 8004d74:	4619      	mov	r1, r3
 8004d76:	2002      	movs	r0, #2
 8004d78:	f7fb fd20 	bl	80007bc <lcd_print>

			bekle();
 8004d7c:	f000 fe52 	bl	8005a24 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004d80:	4b3c      	ldr	r3, [pc, #240]	; (8004e74 <menu+0x361c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b22      	cmp	r3, #34	; 0x22
 8004d86:	d153      	bne.n	8004e30 <menu+0x35d8>
		calismaSayModu = 0;
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <menu+0x3620>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004d8e:	4a41      	ldr	r2, [pc, #260]	; (8004e94 <menu+0x363c>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	2001      	movs	r0, #1
 8004d94:	f7fb fd12 	bl	80007bc <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004d98:	483f      	ldr	r0, [pc, #252]	; (8004e98 <menu+0x3640>)
 8004d9a:	f7fb fa43 	bl	8000224 <strlen>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d811      	bhi.n	8004dc8 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004da4:	4a3c      	ldr	r2, [pc, #240]	; (8004e98 <menu+0x3640>)
 8004da6:	2101      	movs	r1, #1
 8004da8:	2002      	movs	r0, #2
 8004daa:	f7fb fd07 	bl	80007bc <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004dae:	483a      	ldr	r0, [pc, #232]	; (8004e98 <menu+0x3640>)
 8004db0:	f7fb fa38 	bl	8000224 <strlen>
 8004db4:	4603      	mov	r3, r0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4a34      	ldr	r2, [pc, #208]	; (8004e90 <menu+0x3638>)
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	2002      	movs	r0, #2
 8004dc2:	f7fb fcfb 	bl	80007bc <lcd_print>
 8004dc6:	e005      	b.n	8004dd4 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004dc8:	2301      	movs	r3, #1
 8004dca:	2202      	movs	r2, #2
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4832      	ldr	r0, [pc, #200]	; (8004e98 <menu+0x3640>)
 8004dd0:	f7fc fc9c 	bl	800170c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4822      	ldr	r0, [pc, #136]	; (8004e60 <menu+0x3608>)
 8004dd8:	f004 faa4 	bl	8009324 <HAL_GPIO_ReadPin>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d126      	bne.n	8004e30 <menu+0x35d8>
 8004de2:	2104      	movs	r1, #4
 8004de4:	481e      	ldr	r0, [pc, #120]	; (8004e60 <menu+0x3608>)
 8004de6:	f004 fa9d 	bl	8009324 <HAL_GPIO_ReadPin>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d11f      	bne.n	8004e30 <menu+0x35d8>
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <menu+0x360c>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <menu+0x35d8>
			takeWifiPass(0);
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f7fc fa86 	bl	8001310 <takeWifiPass>

			HAL_Delay(50);
 8004e04:	2032      	movs	r0, #50	; 0x32
 8004e06:	f003 fcbd 	bl	8008784 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004e0a:	4a23      	ldr	r2, [pc, #140]	; (8004e98 <menu+0x3640>)
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	2002      	movs	r0, #2
 8004e10:	f7fb fcd4 	bl	80007bc <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004e14:	4820      	ldr	r0, [pc, #128]	; (8004e98 <menu+0x3640>)
 8004e16:	f7fb fa05 	bl	8000224 <strlen>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <menu+0x3638>)
 8004e24:	4619      	mov	r1, r3
 8004e26:	2002      	movs	r0, #2
 8004e28:	f7fb fcc8 	bl	80007bc <lcd_print>

			bekle();
 8004e2c:	f000 fdfa 	bl	8005a24 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <menu+0x361c>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b23      	cmp	r3, #35	; 0x23
 8004e36:	d155      	bne.n	8004ee4 <menu+0x368c>
		if(dilSecim == 0) {
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <menu+0x3600>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d131      	bne.n	8004ea4 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004e40:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <menu+0x3644>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	2001      	movs	r0, #1
 8004e46:	f7fb fcb9 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <menu+0x3648>)
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	2002      	movs	r0, #2
 8004e50:	f7fb fcb4 	bl	80007bc <lcd_print>
 8004e54:	e034      	b.n	8004ec0 <menu+0x3668>
 8004e56:	bf00      	nop
 8004e58:	2000033d 	.word	0x2000033d
 8004e5c:	0800d380 	.word	0x0800d380
 8004e60:	40010800 	.word	0x40010800
 8004e64:	2000034b 	.word	0x2000034b
 8004e68:	2000033b 	.word	0x2000033b
 8004e6c:	20000224 	.word	0x20000224
 8004e70:	20000348 	.word	0x20000348
 8004e74:	2000031c 	.word	0x2000031c
 8004e78:	2000033c 	.word	0x2000033c
 8004e7c:	0800dac8 	.word	0x0800dac8
 8004e80:	200002bc 	.word	0x200002bc
 8004e84:	0800dadc 	.word	0x0800dadc
 8004e88:	0800dae4 	.word	0x0800dae4
 8004e8c:	200002c8 	.word	0x200002c8
 8004e90:	2000000c 	.word	0x2000000c
 8004e94:	0800daf8 	.word	0x0800daf8
 8004e98:	200002dc 	.word	0x200002dc
 8004e9c:	0800db0c 	.word	0x0800db0c
 8004ea0:	0800db20 	.word	0x0800db20
		} else if(dilSecim == 1) {
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <menu+0x3690>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d109      	bne.n	8004ec0 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004eac:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <menu+0x3694>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	f7fb fc83 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <menu+0x3698>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	2002      	movs	r0, #2
 8004ebc:	f7fb fc7e 	bl	80007bc <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	480c      	ldr	r0, [pc, #48]	; (8004ef4 <menu+0x369c>)
 8004ec4:	f004 fa2e 	bl	8009324 <HAL_GPIO_ReadPin>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d10a      	bne.n	8004ee4 <menu+0x368c>
			menuGiris = 0;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <menu+0x36a0>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004ed4:	f7fb fcc1 	bl	800085a <lcd_clear>
			HAL_Delay(500);
 8004ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004edc:	f003 fc52 	bl	8008784 <HAL_Delay>
			NVIC_SystemReset();
 8004ee0:	f7fb fd02 	bl	80008e8 <__NVIC_SystemReset>
		}
	}
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	2000033d 	.word	0x2000033d
 8004eec:	0800db34 	.word	0x0800db34
 8004ef0:	0800db48 	.word	0x0800db48
 8004ef4:	40010800 	.word	0x40010800
 8004ef8:	20000339 	.word	0x20000339

08004efc <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <lcdUpdate+0x9c>)
 8004f0e:	2101      	movs	r1, #1
 8004f10:	2002      	movs	r0, #2
 8004f12:	f7fb fc53 	bl	80007bc <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004f16:	e03b      	b.n	8004f90 <lcdUpdate+0x94>
	} else if(y==2) {
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d105      	bne.n	8004f2a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <lcdUpdate+0x9c>)
 8004f20:	2102      	movs	r1, #2
 8004f22:	2002      	movs	r0, #2
 8004f24:	f7fb fc4a 	bl	80007bc <lcd_print>
}
 8004f28:	e032      	b.n	8004f90 <lcdUpdate+0x94>
	} else if(y==3) {
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d105      	bne.n	8004f3c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004f30:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <lcdUpdate+0x9c>)
 8004f32:	2103      	movs	r1, #3
 8004f34:	2002      	movs	r0, #2
 8004f36:	f7fb fc41 	bl	80007bc <lcd_print>
}
 8004f3a:	e029      	b.n	8004f90 <lcdUpdate+0x94>
	} else if(y==4) {
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d105      	bne.n	8004f4e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <lcdUpdate+0x9c>)
 8004f44:	2104      	movs	r1, #4
 8004f46:	2002      	movs	r0, #2
 8004f48:	f7fb fc38 	bl	80007bc <lcd_print>
}
 8004f4c:	e020      	b.n	8004f90 <lcdUpdate+0x94>
	} else if(y==5) {
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d105      	bne.n	8004f60 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004f54:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <lcdUpdate+0x9c>)
 8004f56:	2105      	movs	r1, #5
 8004f58:	2002      	movs	r0, #2
 8004f5a:	f7fb fc2f 	bl	80007bc <lcd_print>
}
 8004f5e:	e017      	b.n	8004f90 <lcdUpdate+0x94>
	} else if(y==6) {
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d105      	bne.n	8004f72 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004f66:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <lcdUpdate+0x9c>)
 8004f68:	2106      	movs	r1, #6
 8004f6a:	2002      	movs	r0, #2
 8004f6c:	f7fb fc26 	bl	80007bc <lcd_print>
}
 8004f70:	e00e      	b.n	8004f90 <lcdUpdate+0x94>
	} else if (y==7) {
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	2b07      	cmp	r3, #7
 8004f76:	d10b      	bne.n	8004f90 <lcdUpdate+0x94>
		lcd_clear();
 8004f78:	f7fb fc6f 	bl	800085a <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004f7c:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <lcdUpdate+0xa0>)
 8004f7e:	2104      	movs	r1, #4
 8004f80:	2001      	movs	r0, #1
 8004f82:	f7fb fc1b 	bl	80007bc <lcd_print>
		lcd_print(2, 6, "RUN");
 8004f86:	4a06      	ldr	r2, [pc, #24]	; (8004fa0 <lcdUpdate+0xa4>)
 8004f88:	2106      	movs	r1, #6
 8004f8a:	2002      	movs	r0, #2
 8004f8c:	f7fb fc16 	bl	80007bc <lcd_print>
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0800d228 	.word	0x0800d228
 8004f9c:	0800db5c 	.word	0x0800db5c
 8004fa0:	0800db64 	.word	0x0800db64

08004fa4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11d      	bne.n	8004ff0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004fb4:	4b62      	ldr	r3, [pc, #392]	; (8005140 <hataKoduLcdGoster+0x19c>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8004fbc:	4a61      	ldr	r2, [pc, #388]	; (8005144 <hataKoduLcdGoster+0x1a0>)
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	f7fb fbfb 	bl	80007bc <lcd_print>
 8004fc6:	e008      	b.n	8004fda <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004fc8:	4b5d      	ldr	r3, [pc, #372]	; (8005140 <hataKoduLcdGoster+0x19c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d104      	bne.n	8004fda <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8004fd0:	4a5d      	ldr	r2, [pc, #372]	; (8005148 <hataKoduLcdGoster+0x1a4>)
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	f7fb fbf1 	bl	80007bc <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004fda:	4a5c      	ldr	r2, [pc, #368]	; (800514c <hataKoduLcdGoster+0x1a8>)
 8004fdc:	2101      	movs	r1, #1
 8004fde:	2002      	movs	r0, #2
 8004fe0:	f7fb fbec 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "          ");
 8004fe4:	4a5a      	ldr	r2, [pc, #360]	; (8005150 <hataKoduLcdGoster+0x1ac>)
 8004fe6:	2107      	movs	r1, #7
 8004fe8:	2002      	movs	r0, #2
 8004fea:	f7fb fbe7 	bl	80007bc <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004fee:	e0a3      	b.n	8005138 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d11d      	bne.n	8005032 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004ff6:	4b52      	ldr	r3, [pc, #328]	; (8005140 <hataKoduLcdGoster+0x19c>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d105      	bne.n	800500a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8004ffe:	4a51      	ldr	r2, [pc, #324]	; (8005144 <hataKoduLcdGoster+0x1a0>)
 8005000:	2101      	movs	r1, #1
 8005002:	2001      	movs	r0, #1
 8005004:	f7fb fbda 	bl	80007bc <lcd_print>
 8005008:	e008      	b.n	800501c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800500a:	4b4d      	ldr	r3, [pc, #308]	; (8005140 <hataKoduLcdGoster+0x19c>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d104      	bne.n	800501c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8005012:	4a4d      	ldr	r2, [pc, #308]	; (8005148 <hataKoduLcdGoster+0x1a4>)
 8005014:	2101      	movs	r1, #1
 8005016:	2001      	movs	r0, #1
 8005018:	f7fb fbd0 	bl	80007bc <lcd_print>
		lcd_print(2, 2, "2");
 800501c:	4a4d      	ldr	r2, [pc, #308]	; (8005154 <hataKoduLcdGoster+0x1b0>)
 800501e:	2102      	movs	r1, #2
 8005020:	2002      	movs	r0, #2
 8005022:	f7fb fbcb 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "          ");
 8005026:	4a4a      	ldr	r2, [pc, #296]	; (8005150 <hataKoduLcdGoster+0x1ac>)
 8005028:	2107      	movs	r1, #7
 800502a:	2002      	movs	r0, #2
 800502c:	f7fb fbc6 	bl	80007bc <lcd_print>
}
 8005030:	e082      	b.n	8005138 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d11d      	bne.n	8005074 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <hataKoduLcdGoster+0x19c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8005040:	4a40      	ldr	r2, [pc, #256]	; (8005144 <hataKoduLcdGoster+0x1a0>)
 8005042:	2101      	movs	r1, #1
 8005044:	2001      	movs	r0, #1
 8005046:	f7fb fbb9 	bl	80007bc <lcd_print>
 800504a:	e008      	b.n	800505e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800504c:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <hataKoduLcdGoster+0x19c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d104      	bne.n	800505e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8005054:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <hataKoduLcdGoster+0x1a4>)
 8005056:	2101      	movs	r1, #1
 8005058:	2001      	movs	r0, #1
 800505a:	f7fb fbaf 	bl	80007bc <lcd_print>
		lcd_print(2, 3, "3");
 800505e:	4a3e      	ldr	r2, [pc, #248]	; (8005158 <hataKoduLcdGoster+0x1b4>)
 8005060:	2103      	movs	r1, #3
 8005062:	2002      	movs	r0, #2
 8005064:	f7fb fbaa 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "          ");
 8005068:	4a39      	ldr	r2, [pc, #228]	; (8005150 <hataKoduLcdGoster+0x1ac>)
 800506a:	2107      	movs	r1, #7
 800506c:	2002      	movs	r0, #2
 800506e:	f7fb fba5 	bl	80007bc <lcd_print>
}
 8005072:	e061      	b.n	8005138 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d11d      	bne.n	80050b6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800507a:	4b31      	ldr	r3, [pc, #196]	; (8005140 <hataKoduLcdGoster+0x19c>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8005082:	4a30      	ldr	r2, [pc, #192]	; (8005144 <hataKoduLcdGoster+0x1a0>)
 8005084:	2101      	movs	r1, #1
 8005086:	2001      	movs	r0, #1
 8005088:	f7fb fb98 	bl	80007bc <lcd_print>
 800508c:	e008      	b.n	80050a0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800508e:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <hataKoduLcdGoster+0x19c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d104      	bne.n	80050a0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8005096:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <hataKoduLcdGoster+0x1a4>)
 8005098:	2101      	movs	r1, #1
 800509a:	2001      	movs	r0, #1
 800509c:	f7fb fb8e 	bl	80007bc <lcd_print>
		lcd_print(2, 4, "4");
 80050a0:	4a2e      	ldr	r2, [pc, #184]	; (800515c <hataKoduLcdGoster+0x1b8>)
 80050a2:	2104      	movs	r1, #4
 80050a4:	2002      	movs	r0, #2
 80050a6:	f7fb fb89 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "          ");
 80050aa:	4a29      	ldr	r2, [pc, #164]	; (8005150 <hataKoduLcdGoster+0x1ac>)
 80050ac:	2107      	movs	r1, #7
 80050ae:	2002      	movs	r0, #2
 80050b0:	f7fb fb84 	bl	80007bc <lcd_print>
}
 80050b4:	e040      	b.n	8005138 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d11d      	bne.n	80050f8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <hataKoduLcdGoster+0x19c>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <hataKoduLcdGoster+0x1a0>)
 80050c6:	2101      	movs	r1, #1
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7fb fb77 	bl	80007bc <lcd_print>
 80050ce:	e008      	b.n	80050e2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <hataKoduLcdGoster+0x19c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d104      	bne.n	80050e2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <hataKoduLcdGoster+0x1a4>)
 80050da:	2101      	movs	r1, #1
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fb fb6d 	bl	80007bc <lcd_print>
		lcd_print(2, 5, "5");
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <hataKoduLcdGoster+0x1bc>)
 80050e4:	2105      	movs	r1, #5
 80050e6:	2002      	movs	r0, #2
 80050e8:	f7fb fb68 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "          ");
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <hataKoduLcdGoster+0x1ac>)
 80050ee:	2107      	movs	r1, #7
 80050f0:	2002      	movs	r0, #2
 80050f2:	f7fb fb63 	bl	80007bc <lcd_print>
}
 80050f6:	e01f      	b.n	8005138 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d11c      	bne.n	8005138 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <hataKoduLcdGoster+0x19c>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d105      	bne.n	8005112 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8005106:	4a0f      	ldr	r2, [pc, #60]	; (8005144 <hataKoduLcdGoster+0x1a0>)
 8005108:	2101      	movs	r1, #1
 800510a:	2001      	movs	r0, #1
 800510c:	f7fb fb56 	bl	80007bc <lcd_print>
 8005110:	e008      	b.n	8005124 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <hataKoduLcdGoster+0x19c>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d104      	bne.n	8005124 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 800511a:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <hataKoduLcdGoster+0x1a4>)
 800511c:	2101      	movs	r1, #1
 800511e:	2001      	movs	r0, #1
 8005120:	f7fb fb4c 	bl	80007bc <lcd_print>
		lcd_print(2, 6, "6");
 8005124:	4a0f      	ldr	r2, [pc, #60]	; (8005164 <hataKoduLcdGoster+0x1c0>)
 8005126:	2106      	movs	r1, #6
 8005128:	2002      	movs	r0, #2
 800512a:	f7fb fb47 	bl	80007bc <lcd_print>
		lcd_print(2, 7, "          ");
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <hataKoduLcdGoster+0x1ac>)
 8005130:	2107      	movs	r1, #7
 8005132:	2002      	movs	r0, #2
 8005134:	f7fb fb42 	bl	80007bc <lcd_print>
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	2000033d 	.word	0x2000033d
 8005144:	0800db68 	.word	0x0800db68
 8005148:	0800db78 	.word	0x0800db78
 800514c:	0800cf6c 	.word	0x0800cf6c
 8005150:	0800db88 	.word	0x0800db88
 8005154:	0800cf70 	.word	0x0800cf70
 8005158:	0800cf74 	.word	0x0800cf74
 800515c:	0800cf78 	.word	0x0800cf78
 8005160:	0800cf7c 	.word	0x0800cf7c
 8005164:	0800cf80 	.word	0x0800cf80

08005168 <mergeData>:

char* mergeData() {
 8005168:	b580      	push	{r7, lr}
 800516a:	b09e      	sub	sp, #120	; 0x78
 800516c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800516e:	2300      	movs	r3, #0
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
 8005172:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005176:	2229      	movs	r2, #41	; 0x29
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f007 fa38 	bl	800c5f0 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8005180:	4b6a      	ldr	r3, [pc, #424]	; (800532c <mergeData+0x1c4>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	713b      	strb	r3, [r7, #4]
 8005186:	4b6a      	ldr	r3, [pc, #424]	; (8005330 <mergeData+0x1c8>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	717b      	strb	r3, [r7, #5]
 800518c:	4b69      	ldr	r3, [pc, #420]	; (8005334 <mergeData+0x1cc>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	71bb      	strb	r3, [r7, #6]
 8005192:	4b69      	ldr	r3, [pc, #420]	; (8005338 <mergeData+0x1d0>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	71fb      	strb	r3, [r7, #7]
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <mergeData+0x1d4>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	723b      	strb	r3, [r7, #8]
 800519e:	4b68      	ldr	r3, [pc, #416]	; (8005340 <mergeData+0x1d8>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	727b      	strb	r3, [r7, #9]
 80051a4:	4b67      	ldr	r3, [pc, #412]	; (8005344 <mergeData+0x1dc>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	72bb      	strb	r3, [r7, #10]
 80051aa:	4b67      	ldr	r3, [pc, #412]	; (8005348 <mergeData+0x1e0>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	72fb      	strb	r3, [r7, #11]
 80051b0:	4b66      	ldr	r3, [pc, #408]	; (800534c <mergeData+0x1e4>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	733b      	strb	r3, [r7, #12]
 80051b6:	4b66      	ldr	r3, [pc, #408]	; (8005350 <mergeData+0x1e8>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	737b      	strb	r3, [r7, #13]
 80051bc:	4b65      	ldr	r3, [pc, #404]	; (8005354 <mergeData+0x1ec>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	73bb      	strb	r3, [r7, #14]
 80051c2:	4b65      	ldr	r3, [pc, #404]	; (8005358 <mergeData+0x1f0>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <mergeData+0x1f4>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	743b      	strb	r3, [r7, #16]
 80051ce:	4b64      	ldr	r3, [pc, #400]	; (8005360 <mergeData+0x1f8>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	747b      	strb	r3, [r7, #17]
 80051d4:	4b63      	ldr	r3, [pc, #396]	; (8005364 <mergeData+0x1fc>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	74bb      	strb	r3, [r7, #18]
 80051da:	4b63      	ldr	r3, [pc, #396]	; (8005368 <mergeData+0x200>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	74fb      	strb	r3, [r7, #19]
 80051e0:	4b62      	ldr	r3, [pc, #392]	; (800536c <mergeData+0x204>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	753b      	strb	r3, [r7, #20]
 80051e6:	4b62      	ldr	r3, [pc, #392]	; (8005370 <mergeData+0x208>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	757b      	strb	r3, [r7, #21]
 80051ec:	4b61      	ldr	r3, [pc, #388]	; (8005374 <mergeData+0x20c>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	75bb      	strb	r3, [r7, #22]
 80051f2:	4b61      	ldr	r3, [pc, #388]	; (8005378 <mergeData+0x210>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	75fb      	strb	r3, [r7, #23]
 80051f8:	4b60      	ldr	r3, [pc, #384]	; (800537c <mergeData+0x214>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	763b      	strb	r3, [r7, #24]
 80051fe:	4b60      	ldr	r3, [pc, #384]	; (8005380 <mergeData+0x218>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	767b      	strb	r3, [r7, #25]
 8005204:	4b5f      	ldr	r3, [pc, #380]	; (8005384 <mergeData+0x21c>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	76bb      	strb	r3, [r7, #26]
 800520a:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <mergeData+0x220>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	76fb      	strb	r3, [r7, #27]
 8005210:	4b5e      	ldr	r3, [pc, #376]	; (800538c <mergeData+0x224>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	773b      	strb	r3, [r7, #28]
 8005216:	4b5e      	ldr	r3, [pc, #376]	; (8005390 <mergeData+0x228>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	777b      	strb	r3, [r7, #29]
 800521c:	4b5d      	ldr	r3, [pc, #372]	; (8005394 <mergeData+0x22c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	77bb      	strb	r3, [r7, #30]
 8005222:	4b5d      	ldr	r3, [pc, #372]	; (8005398 <mergeData+0x230>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	4b5c      	ldr	r3, [pc, #368]	; (800539c <mergeData+0x234>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f887 3020 	strb.w	r3, [r7, #32]
 8005230:	4b5b      	ldr	r3, [pc, #364]	; (80053a0 <mergeData+0x238>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8005238:	4b5a      	ldr	r3, [pc, #360]	; (80053a4 <mergeData+0x23c>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005240:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <mergeData+0x240>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005248:	4b58      	ldr	r3, [pc, #352]	; (80053ac <mergeData+0x244>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8005250:	4b57      	ldr	r3, [pc, #348]	; (80053b0 <mergeData+0x248>)
 8005252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8005256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800525a:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <mergeData+0x248>)
 800525c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8005260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8005264:	4b52      	ldr	r3, [pc, #328]	; (80053b0 <mergeData+0x248>)
 8005266:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800526a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800526e:	4b50      	ldr	r3, [pc, #320]	; (80053b0 <mergeData+0x248>)
 8005270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8005274:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8005278:	4b4d      	ldr	r3, [pc, #308]	; (80053b0 <mergeData+0x248>)
 800527a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800527e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8005282:	4b4b      	ldr	r3, [pc, #300]	; (80053b0 <mergeData+0x248>)
 8005284:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8005288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800528c:	4b48      	ldr	r3, [pc, #288]	; (80053b0 <mergeData+0x248>)
 800528e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8005296:	4b46      	ldr	r3, [pc, #280]	; (80053b0 <mergeData+0x248>)
 8005298:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800529c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80052a0:	4b43      	ldr	r3, [pc, #268]	; (80053b0 <mergeData+0x248>)
 80052a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80052a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80052aa:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <mergeData+0x248>)
 80052ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80052b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80052b4:	4b3e      	ldr	r3, [pc, #248]	; (80053b0 <mergeData+0x248>)
 80052b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80052ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80052be:	2306      	movs	r3, #6
 80052c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80052c4:	2300      	movs	r3, #0
 80052c6:	677b      	str	r3, [r7, #116]	; 0x74
 80052c8:	e015      	b.n	80052f6 <mergeData+0x18e>
	    sprintf(temp, "%u", uintVariables[i]);
 80052ca:	1d3a      	adds	r2, r7, #4
 80052cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052d8:	4936      	ldr	r1, [pc, #216]	; (80053b4 <mergeData+0x24c>)
 80052da:	4618      	mov	r0, r3
 80052dc:	f007 f904 	bl	800c4e8 <siprintf>
	    strcat(combinedString, temp);
 80052e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80052e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052e8:	4611      	mov	r1, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f007 f95e 	bl	800c5ac <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80052f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f2:	3301      	adds	r3, #1
 80052f4:	677b      	str	r3, [r7, #116]	; 0x74
 80052f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f8:	2b2c      	cmp	r3, #44	; 0x2c
 80052fa:	d9e6      	bls.n	80052ca <mergeData+0x162>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80052fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005300:	4618      	mov	r0, r3
 8005302:	f7fa ff8f 	bl	8000224 <strlen>
 8005306:	4603      	mov	r3, r0
 8005308:	3301      	adds	r3, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f007 f838 	bl	800c380 <malloc>
 8005310:	4603      	mov	r3, r0
 8005312:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8005314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005318:	4619      	mov	r1, r3
 800531a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800531c:	f007 f9ac 	bl	800c678 <strcpy>
	return result;
 8005320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8005322:	4618      	mov	r0, r3
 8005324:	3778      	adds	r7, #120	; 0x78
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000032b 	.word	0x2000032b
 8005330:	2000031d 	.word	0x2000031d
 8005334:	20000320 	.word	0x20000320
 8005338:	20000321 	.word	0x20000321
 800533c:	20000322 	.word	0x20000322
 8005340:	20000329 	.word	0x20000329
 8005344:	20000323 	.word	0x20000323
 8005348:	20000324 	.word	0x20000324
 800534c:	20000328 	.word	0x20000328
 8005350:	20000325 	.word	0x20000325
 8005354:	20000335 	.word	0x20000335
 8005358:	20000326 	.word	0x20000326
 800535c:	20000336 	.word	0x20000336
 8005360:	20000327 	.word	0x20000327
 8005364:	20000337 	.word	0x20000337
 8005368:	2000032a 	.word	0x2000032a
 800536c:	2000032c 	.word	0x2000032c
 8005370:	2000032d 	.word	0x2000032d
 8005374:	2000032e 	.word	0x2000032e
 8005378:	2000032f 	.word	0x2000032f
 800537c:	20000330 	.word	0x20000330
 8005380:	20000331 	.word	0x20000331
 8005384:	20000332 	.word	0x20000332
 8005388:	20000333 	.word	0x20000333
 800538c:	20000334 	.word	0x20000334
 8005390:	20000338 	.word	0x20000338
 8005394:	2000033a 	.word	0x2000033a
 8005398:	20000319 	.word	0x20000319
 800539c:	2000031a 	.word	0x2000031a
 80053a0:	200000ac 	.word	0x200000ac
 80053a4:	200000ad 	.word	0x200000ad
 80053a8:	2000031b 	.word	0x2000031b
 80053ac:	2000033d 	.word	0x2000033d
 80053b0:	20000224 	.word	0x20000224
 80053b4:	0800db94 	.word	0x0800db94

080053b8 <convertAndSendData>:

void convertAndSendData() {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 80053be:	4a14      	ldr	r2, [pc, #80]	; (8005410 <convertAndSendData+0x58>)
 80053c0:	2101      	movs	r1, #1
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fb f9fa 	bl	80007bc <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80053c8:	4a12      	ldr	r2, [pc, #72]	; (8005414 <convertAndSendData+0x5c>)
 80053ca:	2101      	movs	r1, #1
 80053cc:	2002      	movs	r0, #2
 80053ce:	f7fb f9f5 	bl	80007bc <lcd_print>
	for(int i=0; i<2; i++) {
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	e00a      	b.n	80053ee <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80053d8:	f7ff fec6 	bl	8005168 <mergeData>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	490d      	ldr	r1, [pc, #52]	; (8005418 <convertAndSendData+0x60>)
 80053e2:	480e      	ldr	r0, [pc, #56]	; (800541c <convertAndSendData+0x64>)
 80053e4:	f7fa ffd0 	bl	8000388 <sendMachineData>
	for(int i=0; i<2; i++) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3301      	adds	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	ddf1      	ble.n	80053d8 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80053f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053f8:	f003 f9c4 	bl	8008784 <HAL_Delay>
	lcd_clear();
 80053fc:	f7fb fa2d 	bl	800085a <lcd_clear>
	HAL_Delay(500);
 8005400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005404:	f003 f9be 	bl	8008784 <HAL_Delay>
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	0800db98 	.word	0x0800db98
 8005414:	0800dba4 	.word	0x0800dba4
 8005418:	200002bc 	.word	0x200002bc
 800541c:	20000444 	.word	0x20000444

08005420 <eepromKontrol>:

void eepromKontrol(int type) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af04      	add	r7, sp, #16
 8005426:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005428:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800542c:	9302      	str	r3, [sp, #8]
 800542e:	236e      	movs	r3, #110	; 0x6e
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	4b9c      	ldr	r3, [pc, #624]	; (80056a4 <eepromKontrol+0x284>)
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	236e      	movs	r3, #110	; 0x6e
 8005438:	2200      	movs	r2, #0
 800543a:	21a0      	movs	r1, #160	; 0xa0
 800543c:	489a      	ldr	r0, [pc, #616]	; (80056a8 <eepromKontrol+0x288>)
 800543e:	f004 fb25 	bl	8009a8c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005442:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005446:	f003 f99d 	bl	8008784 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800544a:	4b96      	ldr	r3, [pc, #600]	; (80056a4 <eepromKontrol+0x284>)
 800544c:	78da      	ldrb	r2, [r3, #3]
 800544e:	4b97      	ldr	r3, [pc, #604]	; (80056ac <eepromKontrol+0x28c>)
 8005450:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005452:	4b94      	ldr	r3, [pc, #592]	; (80056a4 <eepromKontrol+0x284>)
 8005454:	785a      	ldrb	r2, [r3, #1]
 8005456:	4b96      	ldr	r3, [pc, #600]	; (80056b0 <eepromKontrol+0x290>)
 8005458:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800545a:	4b92      	ldr	r3, [pc, #584]	; (80056a4 <eepromKontrol+0x284>)
 800545c:	789a      	ldrb	r2, [r3, #2]
 800545e:	4b95      	ldr	r3, [pc, #596]	; (80056b4 <eepromKontrol+0x294>)
 8005460:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005462:	4b90      	ldr	r3, [pc, #576]	; (80056a4 <eepromKontrol+0x284>)
 8005464:	791a      	ldrb	r2, [r3, #4]
 8005466:	4b94      	ldr	r3, [pc, #592]	; (80056b8 <eepromKontrol+0x298>)
 8005468:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800546a:	4b8e      	ldr	r3, [pc, #568]	; (80056a4 <eepromKontrol+0x284>)
 800546c:	795a      	ldrb	r2, [r3, #5]
 800546e:	4b93      	ldr	r3, [pc, #588]	; (80056bc <eepromKontrol+0x29c>)
 8005470:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005472:	4b8c      	ldr	r3, [pc, #560]	; (80056a4 <eepromKontrol+0x284>)
 8005474:	799a      	ldrb	r2, [r3, #6]
 8005476:	4b92      	ldr	r3, [pc, #584]	; (80056c0 <eepromKontrol+0x2a0>)
 8005478:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800547a:	4b8a      	ldr	r3, [pc, #552]	; (80056a4 <eepromKontrol+0x284>)
 800547c:	79da      	ldrb	r2, [r3, #7]
 800547e:	4b91      	ldr	r3, [pc, #580]	; (80056c4 <eepromKontrol+0x2a4>)
 8005480:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005482:	4b88      	ldr	r3, [pc, #544]	; (80056a4 <eepromKontrol+0x284>)
 8005484:	7a1a      	ldrb	r2, [r3, #8]
 8005486:	4b90      	ldr	r3, [pc, #576]	; (80056c8 <eepromKontrol+0x2a8>)
 8005488:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800548a:	4b86      	ldr	r3, [pc, #536]	; (80056a4 <eepromKontrol+0x284>)
 800548c:	7a5a      	ldrb	r2, [r3, #9]
 800548e:	4b8f      	ldr	r3, [pc, #572]	; (80056cc <eepromKontrol+0x2ac>)
 8005490:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005492:	4b84      	ldr	r3, [pc, #528]	; (80056a4 <eepromKontrol+0x284>)
 8005494:	7a9a      	ldrb	r2, [r3, #10]
 8005496:	4b8e      	ldr	r3, [pc, #568]	; (80056d0 <eepromKontrol+0x2b0>)
 8005498:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800549a:	4b82      	ldr	r3, [pc, #520]	; (80056a4 <eepromKontrol+0x284>)
 800549c:	7ada      	ldrb	r2, [r3, #11]
 800549e:	4b8d      	ldr	r3, [pc, #564]	; (80056d4 <eepromKontrol+0x2b4>)
 80054a0:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80054a2:	4b80      	ldr	r3, [pc, #512]	; (80056a4 <eepromKontrol+0x284>)
 80054a4:	7b1a      	ldrb	r2, [r3, #12]
 80054a6:	4b8c      	ldr	r3, [pc, #560]	; (80056d8 <eepromKontrol+0x2b8>)
 80054a8:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80054aa:	4b7e      	ldr	r3, [pc, #504]	; (80056a4 <eepromKontrol+0x284>)
 80054ac:	7b5a      	ldrb	r2, [r3, #13]
 80054ae:	4b8b      	ldr	r3, [pc, #556]	; (80056dc <eepromKontrol+0x2bc>)
 80054b0:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80054b2:	4b7c      	ldr	r3, [pc, #496]	; (80056a4 <eepromKontrol+0x284>)
 80054b4:	7b9a      	ldrb	r2, [r3, #14]
 80054b6:	4b8a      	ldr	r3, [pc, #552]	; (80056e0 <eepromKontrol+0x2c0>)
 80054b8:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80054ba:	4b7a      	ldr	r3, [pc, #488]	; (80056a4 <eepromKontrol+0x284>)
 80054bc:	7bda      	ldrb	r2, [r3, #15]
 80054be:	4b89      	ldr	r3, [pc, #548]	; (80056e4 <eepromKontrol+0x2c4>)
 80054c0:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80054c2:	4b78      	ldr	r3, [pc, #480]	; (80056a4 <eepromKontrol+0x284>)
 80054c4:	7c1a      	ldrb	r2, [r3, #16]
 80054c6:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <eepromKontrol+0x2c8>)
 80054c8:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80054ca:	4b76      	ldr	r3, [pc, #472]	; (80056a4 <eepromKontrol+0x284>)
 80054cc:	7c5a      	ldrb	r2, [r3, #17]
 80054ce:	4b87      	ldr	r3, [pc, #540]	; (80056ec <eepromKontrol+0x2cc>)
 80054d0:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80054d2:	4b74      	ldr	r3, [pc, #464]	; (80056a4 <eepromKontrol+0x284>)
 80054d4:	7c9a      	ldrb	r2, [r3, #18]
 80054d6:	4b86      	ldr	r3, [pc, #536]	; (80056f0 <eepromKontrol+0x2d0>)
 80054d8:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80054da:	4b72      	ldr	r3, [pc, #456]	; (80056a4 <eepromKontrol+0x284>)
 80054dc:	7cda      	ldrb	r2, [r3, #19]
 80054de:	4b85      	ldr	r3, [pc, #532]	; (80056f4 <eepromKontrol+0x2d4>)
 80054e0:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80054e2:	4b70      	ldr	r3, [pc, #448]	; (80056a4 <eepromKontrol+0x284>)
 80054e4:	7d1a      	ldrb	r2, [r3, #20]
 80054e6:	4b84      	ldr	r3, [pc, #528]	; (80056f8 <eepromKontrol+0x2d8>)
 80054e8:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80054ea:	4b6e      	ldr	r3, [pc, #440]	; (80056a4 <eepromKontrol+0x284>)
 80054ec:	7d5a      	ldrb	r2, [r3, #21]
 80054ee:	4b83      	ldr	r3, [pc, #524]	; (80056fc <eepromKontrol+0x2dc>)
 80054f0:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80054f2:	4b6c      	ldr	r3, [pc, #432]	; (80056a4 <eepromKontrol+0x284>)
 80054f4:	7d9a      	ldrb	r2, [r3, #22]
 80054f6:	4b82      	ldr	r3, [pc, #520]	; (8005700 <eepromKontrol+0x2e0>)
 80054f8:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80054fa:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <eepromKontrol+0x284>)
 80054fc:	7dda      	ldrb	r2, [r3, #23]
 80054fe:	4b81      	ldr	r3, [pc, #516]	; (8005704 <eepromKontrol+0x2e4>)
 8005500:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005502:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <eepromKontrol+0x284>)
 8005504:	7e1a      	ldrb	r2, [r3, #24]
 8005506:	4b80      	ldr	r3, [pc, #512]	; (8005708 <eepromKontrol+0x2e8>)
 8005508:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800550a:	4b66      	ldr	r3, [pc, #408]	; (80056a4 <eepromKontrol+0x284>)
 800550c:	7e5a      	ldrb	r2, [r3, #25]
 800550e:	4b7f      	ldr	r3, [pc, #508]	; (800570c <eepromKontrol+0x2ec>)
 8005510:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005512:	4b64      	ldr	r3, [pc, #400]	; (80056a4 <eepromKontrol+0x284>)
 8005514:	7e9a      	ldrb	r2, [r3, #26]
 8005516:	4b7e      	ldr	r3, [pc, #504]	; (8005710 <eepromKontrol+0x2f0>)
 8005518:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800551a:	4b62      	ldr	r3, [pc, #392]	; (80056a4 <eepromKontrol+0x284>)
 800551c:	7eda      	ldrb	r2, [r3, #27]
 800551e:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <eepromKontrol+0x2f4>)
 8005520:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005522:	4b60      	ldr	r3, [pc, #384]	; (80056a4 <eepromKontrol+0x284>)
 8005524:	7f1a      	ldrb	r2, [r3, #28]
 8005526:	4b7c      	ldr	r3, [pc, #496]	; (8005718 <eepromKontrol+0x2f8>)
 8005528:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800552a:	4b5e      	ldr	r3, [pc, #376]	; (80056a4 <eepromKontrol+0x284>)
 800552c:	7f5a      	ldrb	r2, [r3, #29]
 800552e:	4b7b      	ldr	r3, [pc, #492]	; (800571c <eepromKontrol+0x2fc>)
 8005530:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005532:	4b5c      	ldr	r3, [pc, #368]	; (80056a4 <eepromKontrol+0x284>)
 8005534:	7f9a      	ldrb	r2, [r3, #30]
 8005536:	4b7a      	ldr	r3, [pc, #488]	; (8005720 <eepromKontrol+0x300>)
 8005538:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800553a:	4b5a      	ldr	r3, [pc, #360]	; (80056a4 <eepromKontrol+0x284>)
 800553c:	7fda      	ldrb	r2, [r3, #31]
 800553e:	4b79      	ldr	r3, [pc, #484]	; (8005724 <eepromKontrol+0x304>)
 8005540:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005542:	4b58      	ldr	r3, [pc, #352]	; (80056a4 <eepromKontrol+0x284>)
 8005544:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005548:	4b77      	ldr	r3, [pc, #476]	; (8005728 <eepromKontrol+0x308>)
 800554a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800554c:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <eepromKontrol+0x284>)
 800554e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005552:	4b76      	ldr	r3, [pc, #472]	; (800572c <eepromKontrol+0x30c>)
 8005554:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005556:	4b53      	ldr	r3, [pc, #332]	; (80056a4 <eepromKontrol+0x284>)
 8005558:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800555c:	4b74      	ldr	r3, [pc, #464]	; (8005730 <eepromKontrol+0x310>)
 800555e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005560:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <eepromKontrol+0x284>)
 8005562:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005566:	4b73      	ldr	r3, [pc, #460]	; (8005734 <eepromKontrol+0x314>)
 8005568:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800556a:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <eepromKontrol+0x284>)
 800556c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005570:	4b71      	ldr	r3, [pc, #452]	; (8005738 <eepromKontrol+0x318>)
 8005572:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005574:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <eepromKontrol+0x284>)
 8005576:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800557a:	4b70      	ldr	r3, [pc, #448]	; (800573c <eepromKontrol+0x31c>)
 800557c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800557e:	4b49      	ldr	r3, [pc, #292]	; (80056a4 <eepromKontrol+0x284>)
 8005580:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005584:	4b6e      	ldr	r3, [pc, #440]	; (8005740 <eepromKontrol+0x320>)
 8005586:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005588:	4b46      	ldr	r3, [pc, #280]	; (80056a4 <eepromKontrol+0x284>)
 800558a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800558e:	4b6d      	ldr	r3, [pc, #436]	; (8005744 <eepromKontrol+0x324>)
 8005590:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005592:	4b44      	ldr	r3, [pc, #272]	; (80056a4 <eepromKontrol+0x284>)
 8005594:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005598:	4b6b      	ldr	r3, [pc, #428]	; (8005748 <eepromKontrol+0x328>)
 800559a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800559c:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <eepromKontrol+0x284>)
 800559e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <eepromKontrol+0x32c>)
 80055a4:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80055a6:	4b3f      	ldr	r3, [pc, #252]	; (80056a4 <eepromKontrol+0x284>)
 80055a8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80055ac:	4b68      	ldr	r3, [pc, #416]	; (8005750 <eepromKontrol+0x330>)
 80055ae:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80055b0:	4b3c      	ldr	r3, [pc, #240]	; (80056a4 <eepromKontrol+0x284>)
 80055b2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <eepromKontrol+0x334>)
 80055b8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80055ba:	4b3a      	ldr	r3, [pc, #232]	; (80056a4 <eepromKontrol+0x284>)
 80055bc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80055c0:	4b65      	ldr	r3, [pc, #404]	; (8005758 <eepromKontrol+0x338>)
 80055c2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80055c4:	4b37      	ldr	r3, [pc, #220]	; (80056a4 <eepromKontrol+0x284>)
 80055c6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80055ca:	4b64      	ldr	r3, [pc, #400]	; (800575c <eepromKontrol+0x33c>)
 80055cc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80055ce:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <eepromKontrol+0x284>)
 80055d0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80055d4:	4b62      	ldr	r3, [pc, #392]	; (8005760 <eepromKontrol+0x340>)
 80055d6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80055d8:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <eepromKontrol+0x284>)
 80055da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80055de:	4b61      	ldr	r3, [pc, #388]	; (8005764 <eepromKontrol+0x344>)
 80055e0:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80055e2:	4b51      	ldr	r3, [pc, #324]	; (8005728 <eepromKontrol+0x308>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d902      	bls.n	80055f0 <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 80055ea:	4b4f      	ldr	r3, [pc, #316]	; (8005728 <eepromKontrol+0x308>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80055f0:	4b4c      	ldr	r3, [pc, #304]	; (8005724 <eepromKontrol+0x304>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	d902      	bls.n	80055fe <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 80055f8:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <eepromKontrol+0x304>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80055fe:	4b48      	ldr	r3, [pc, #288]	; (8005720 <eepromKontrol+0x300>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b09      	cmp	r3, #9
 8005604:	d902      	bls.n	800560c <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 8005606:	4b46      	ldr	r3, [pc, #280]	; (8005720 <eepromKontrol+0x300>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 800560c:	4b43      	ldr	r3, [pc, #268]	; (800571c <eepromKontrol+0x2fc>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b09      	cmp	r3, #9
 8005612:	d902      	bls.n	800561a <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <eepromKontrol+0x2fc>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 800561a:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <eepromKontrol+0x2f8>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b09      	cmp	r3, #9
 8005620:	d902      	bls.n	8005628 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 8005622:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <eepromKontrol+0x2f8>)
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <eepromKontrol+0x290>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d902      	bls.n	8005636 <eepromKontrol+0x216>
	    calismaSekli=0;
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <eepromKontrol+0x290>)
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005636:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <eepromKontrol+0x294>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d902      	bls.n	8005644 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <eepromKontrol+0x294>)
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005644:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <eepromKontrol+0x298>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d902      	bls.n	8005652 <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <eepromKontrol+0x298>)
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <eepromKontrol+0x29c>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d902      	bls.n	8005660 <eepromKontrol+0x240>
	    altLimit=1;
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <eepromKontrol+0x29c>)
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <eepromKontrol+0x2a0>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d902      	bls.n	800566e <eepromKontrol+0x24e>
	    basincSalteri=1;
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <eepromKontrol+0x2a0>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <eepromKontrol+0x2a4>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d902      	bls.n	800567c <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <eepromKontrol+0x2a4>)
 8005678:	2203      	movs	r2, #3
 800567a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800567c:	4b2f      	ldr	r3, [pc, #188]	; (800573c <eepromKontrol+0x31c>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d902      	bls.n	800568a <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005684:	4b2d      	ldr	r3, [pc, #180]	; (800573c <eepromKontrol+0x31c>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <eepromKontrol+0x2a8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d902      	bls.n	8005698 <eepromKontrol+0x278>
	    kapi1Tip=1;
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <eepromKontrol+0x2a8>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <eepromKontrol+0x2ac>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d966      	bls.n	800576e <eepromKontrol+0x34e>
 80056a0:	e062      	b.n	8005768 <eepromKontrol+0x348>
 80056a2:	bf00      	nop
 80056a4:	20000224 	.word	0x20000224
 80056a8:	200003a8 	.word	0x200003a8
 80056ac:	20000292 	.word	0x20000292
 80056b0:	2000031d 	.word	0x2000031d
 80056b4:	20000320 	.word	0x20000320
 80056b8:	20000321 	.word	0x20000321
 80056bc:	20000322 	.word	0x20000322
 80056c0:	20000323 	.word	0x20000323
 80056c4:	20000324 	.word	0x20000324
 80056c8:	20000325 	.word	0x20000325
 80056cc:	20000335 	.word	0x20000335
 80056d0:	20000326 	.word	0x20000326
 80056d4:	20000336 	.word	0x20000336
 80056d8:	20000327 	.word	0x20000327
 80056dc:	20000337 	.word	0x20000337
 80056e0:	2000032a 	.word	0x2000032a
 80056e4:	2000032b 	.word	0x2000032b
 80056e8:	2000032c 	.word	0x2000032c
 80056ec:	2000032d 	.word	0x2000032d
 80056f0:	2000032e 	.word	0x2000032e
 80056f4:	2000032f 	.word	0x2000032f
 80056f8:	20000330 	.word	0x20000330
 80056fc:	20000331 	.word	0x20000331
 8005700:	20000332 	.word	0x20000332
 8005704:	20000333 	.word	0x20000333
 8005708:	20000334 	.word	0x20000334
 800570c:	20000338 	.word	0x20000338
 8005710:	2000033a 	.word	0x2000033a
 8005714:	20000318 	.word	0x20000318
 8005718:	20000319 	.word	0x20000319
 800571c:	2000031a 	.word	0x2000031a
 8005720:	200000ac 	.word	0x200000ac
 8005724:	200000ad 	.word	0x200000ad
 8005728:	2000031b 	.word	0x2000031b
 800572c:	2000033d 	.word	0x2000033d
 8005730:	2000033b 	.word	0x2000033b
 8005734:	20000329 	.word	0x20000329
 8005738:	2000033c 	.word	0x2000033c
 800573c:	20000328 	.word	0x20000328
 8005740:	2000033e 	.word	0x2000033e
 8005744:	2000033f 	.word	0x2000033f
 8005748:	20000340 	.word	0x20000340
 800574c:	20000341 	.word	0x20000341
 8005750:	20000342 	.word	0x20000342
 8005754:	20000343 	.word	0x20000343
 8005758:	20000344 	.word	0x20000344
 800575c:	20000345 	.word	0x20000345
 8005760:	20000346 	.word	0x20000346
 8005764:	20000347 	.word	0x20000347
	    kapi1AcSure=5;
 8005768:	4b57      	ldr	r3, [pc, #348]	; (80058c8 <eepromKontrol+0x4a8>)
 800576a:	2205      	movs	r2, #5
 800576c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800576e:	4b57      	ldr	r3, [pc, #348]	; (80058cc <eepromKontrol+0x4ac>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d902      	bls.n	800577c <eepromKontrol+0x35c>
	    kapi2Tip=1;
 8005776:	4b55      	ldr	r3, [pc, #340]	; (80058cc <eepromKontrol+0x4ac>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800577c:	4b54      	ldr	r3, [pc, #336]	; (80058d0 <eepromKontrol+0x4b0>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b05      	cmp	r3, #5
 8005782:	d902      	bls.n	800578a <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005784:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <eepromKontrol+0x4b0>)
 8005786:	2205      	movs	r2, #5
 8005788:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800578a:	4b52      	ldr	r3, [pc, #328]	; (80058d4 <eepromKontrol+0x4b4>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <eepromKontrol+0x378>
	    kapitablaTip=1;
 8005792:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <eepromKontrol+0x4b4>)
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005798:	4b4f      	ldr	r3, [pc, #316]	; (80058d8 <eepromKontrol+0x4b8>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d902      	bls.n	80057a6 <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 80057a0:	4b4d      	ldr	r3, [pc, #308]	; (80058d8 <eepromKontrol+0x4b8>)
 80057a2:	2202      	movs	r2, #2
 80057a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80057a6:	4b4d      	ldr	r3, [pc, #308]	; (80058dc <eepromKontrol+0x4bc>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b05      	cmp	r3, #5
 80057ac:	d902      	bls.n	80057b4 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 80057ae:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <eepromKontrol+0x4bc>)
 80057b0:	2205      	movs	r2, #5
 80057b2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80057b4:	4b4a      	ldr	r3, [pc, #296]	; (80058e0 <eepromKontrol+0x4c0>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d902      	bls.n	80057c2 <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 80057bc:	4b48      	ldr	r3, [pc, #288]	; (80058e0 <eepromKontrol+0x4c0>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80057c2:	4b48      	ldr	r3, [pc, #288]	; (80058e4 <eepromKontrol+0x4c4>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d902      	bls.n	80057d0 <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 80057ca:	4b46      	ldr	r3, [pc, #280]	; (80058e4 <eepromKontrol+0x4c4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80057d0:	4b45      	ldr	r3, [pc, #276]	; (80058e8 <eepromKontrol+0x4c8>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d902      	bls.n	80057de <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 80057d8:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <eepromKontrol+0x4c8>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80057de:	4b43      	ldr	r3, [pc, #268]	; (80058ec <eepromKontrol+0x4cc>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d902      	bls.n	80057ec <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 80057e6:	4b41      	ldr	r3, [pc, #260]	; (80058ec <eepromKontrol+0x4cc>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80057ec:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <eepromKontrol+0x4d0>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d902      	bls.n	80057fa <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 80057f4:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <eepromKontrol+0x4d0>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80057fa:	4b3e      	ldr	r3, [pc, #248]	; (80058f4 <eepromKontrol+0x4d4>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d902      	bls.n	8005808 <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 8005802:	4b3c      	ldr	r3, [pc, #240]	; (80058f4 <eepromKontrol+0x4d4>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <eepromKontrol+0x4d8>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b05      	cmp	r3, #5
 800580e:	d902      	bls.n	8005816 <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 8005810:	4b39      	ldr	r3, [pc, #228]	; (80058f8 <eepromKontrol+0x4d8>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <eepromKontrol+0x4dc>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b05      	cmp	r3, #5
 800581c:	d902      	bls.n	8005824 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 800581e:	4b37      	ldr	r3, [pc, #220]	; (80058fc <eepromKontrol+0x4dc>)
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005824:	4b36      	ldr	r3, [pc, #216]	; (8005900 <eepromKontrol+0x4e0>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b05      	cmp	r3, #5
 800582a:	d902      	bls.n	8005832 <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 800582c:	4b34      	ldr	r3, [pc, #208]	; (8005900 <eepromKontrol+0x4e0>)
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005832:	4b34      	ldr	r3, [pc, #208]	; (8005904 <eepromKontrol+0x4e4>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b05      	cmp	r3, #5
 8005838:	d902      	bls.n	8005840 <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 800583a:	4b32      	ldr	r3, [pc, #200]	; (8005904 <eepromKontrol+0x4e4>)
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <eepromKontrol+0x4e8>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2bb4      	cmp	r3, #180	; 0xb4
 8005846:	d902      	bls.n	800584e <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 8005848:	4b2f      	ldr	r3, [pc, #188]	; (8005908 <eepromKontrol+0x4e8>)
 800584a:	223c      	movs	r2, #60	; 0x3c
 800584c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800584e:	4b2f      	ldr	r3, [pc, #188]	; (800590c <eepromKontrol+0x4ec>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d902      	bls.n	800585c <eepromKontrol+0x43c>
	    buzzer=0;
 8005856:	4b2d      	ldr	r3, [pc, #180]	; (800590c <eepromKontrol+0x4ec>)
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <eepromKontrol+0x4f0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d902      	bls.n	800586a <eepromKontrol+0x44a>
	    demoMode=0;
 8005864:	4b2a      	ldr	r3, [pc, #168]	; (8005910 <eepromKontrol+0x4f0>)
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <eepromKontrol+0x4f4>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d902      	bls.n	8005878 <eepromKontrol+0x458>
	    calismaSayModu=0;
 8005872:	4b28      	ldr	r3, [pc, #160]	; (8005914 <eepromKontrol+0x4f4>)
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <eepromKontrol+0x4f8>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d902      	bls.n	8005886 <eepromKontrol+0x466>
	    dilSecim=0;
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <eepromKontrol+0x4f8>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005886:	4b25      	ldr	r3, [pc, #148]	; (800591c <eepromKontrol+0x4fc>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d902      	bls.n	8005894 <eepromKontrol+0x474>
		iotMode=0;
 800588e:	4b23      	ldr	r3, [pc, #140]	; (800591c <eepromKontrol+0x4fc>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005894:	4b22      	ldr	r3, [pc, #136]	; (8005920 <eepromKontrol+0x500>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a22      	ldr	r2, [pc, #136]	; (8005924 <eepromKontrol+0x504>)
 800589a:	441a      	add	r2, r3
 800589c:	4b22      	ldr	r3, [pc, #136]	; (8005928 <eepromKontrol+0x508>)
 800589e:	6810      	ldr	r0, [r2, #0]
 80058a0:	6851      	ldr	r1, [r2, #4]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	c307      	stmia	r3!, {r0, r1, r2}
	HAL_Delay(250);
 80058a6:	20fa      	movs	r0, #250	; 0xfa
 80058a8:	f002 ff6c 	bl	8008784 <HAL_Delay>
	readFromEEPROM(1);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fb f9b7 	bl	8000c20 <readFromEEPROM>
	HAL_Delay(250);
 80058b2:	20fa      	movs	r0, #250	; 0xfa
 80058b4:	f002 ff66 	bl	8008784 <HAL_Delay>
	readFromEEPROM(2);
 80058b8:	2002      	movs	r0, #2
 80058ba:	f7fb f9b1 	bl	8000c20 <readFromEEPROM>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000335 	.word	0x20000335
 80058cc:	20000326 	.word	0x20000326
 80058d0:	20000336 	.word	0x20000336
 80058d4:	20000327 	.word	0x20000327
 80058d8:	20000329 	.word	0x20000329
 80058dc:	20000337 	.word	0x20000337
 80058e0:	2000032a 	.word	0x2000032a
 80058e4:	2000032b 	.word	0x2000032b
 80058e8:	2000032c 	.word	0x2000032c
 80058ec:	2000032d 	.word	0x2000032d
 80058f0:	2000032e 	.word	0x2000032e
 80058f4:	2000032f 	.word	0x2000032f
 80058f8:	20000330 	.word	0x20000330
 80058fc:	20000331 	.word	0x20000331
 8005900:	20000332 	.word	0x20000332
 8005904:	20000333 	.word	0x20000333
 8005908:	20000334 	.word	0x20000334
 800590c:	20000338 	.word	0x20000338
 8005910:	2000033a 	.word	0x2000033a
 8005914:	2000033c 	.word	0x2000033c
 8005918:	2000033d 	.word	0x2000033d
 800591c:	2000033b 	.word	0x2000033b
 8005920:	20000000 	.word	0x20000000
 8005924:	20000224 	.word	0x20000224
 8005928:	200002bc 	.word	0x200002bc

0800592c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	af04      	add	r7, sp, #16
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005936:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <hata2EEPROM+0xa4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <hata2EEPROM+0xa8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4413      	add	r3, r2
 8005942:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <hata2EEPROM+0xac>)
 8005944:	5cd3      	ldrb	r3, [r2, r3]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800594a:	f000 f849 	bl	80059e0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800594e:	e000      	b.n	8005952 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005950:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e012      	b.n	800597e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <hata2EEPROM+0xa8>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <hata2EEPROM+0xac>)
 8005962:	5cd3      	ldrb	r3, [r2, r3]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <hata2EEPROM+0xa8>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	4919      	ldr	r1, [pc, #100]	; (80059d8 <hata2EEPROM+0xac>)
 8005972:	79fa      	ldrb	r2, [r7, #7]
 8005974:	54ca      	strb	r2, [r1, r3]
					break;
 8005976:	e007      	b.n	8005988 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <hata2EEPROM+0xa4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	429a      	cmp	r2, r3
 8005986:	dbe7      	blt.n	8005958 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <hata2EEPROM+0xa8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	b299      	uxth	r1, r3
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <hata2EEPROM+0xa4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	b298      	uxth	r0, r3
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <hata2EEPROM+0xa8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a0f      	ldr	r2, [pc, #60]	; (80059d8 <hata2EEPROM+0xac>)
 800599a:	4413      	add	r3, r2
 800599c:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <hata2EEPROM+0xa4>)
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	b292      	uxth	r2, r2
 80059a2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80059a6:	9402      	str	r4, [sp, #8]
 80059a8:	9201      	str	r2, [sp, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	460a      	mov	r2, r1
 80059b0:	21a0      	movs	r1, #160	; 0xa0
 80059b2:	480a      	ldr	r0, [pc, #40]	; (80059dc <hata2EEPROM+0xb0>)
 80059b4:	f003 ff70 	bl	8009898 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80059b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059bc:	f002 fee2 	bl	8008784 <HAL_Delay>
	eepromKontrol(1);
 80059c0:	2001      	movs	r0, #1
 80059c2:	f7ff fd2d 	bl	8005420 <eepromKontrol>
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd90      	pop	{r4, r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000009c 	.word	0x2000009c
 80059d4:	200000a0 	.word	0x200000a0
 80059d8:	20000224 	.word	0x20000224
 80059dc:	200003a8 	.word	0x200003a8

080059e0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	e009      	b.n	8005a00 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80059ec:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <eepromDataFillWithEmpty+0x38>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f4:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <eepromDataFillWithEmpty+0x3c>)
 80059f6:	2100      	movs	r1, #0
 80059f8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3301      	adds	r3, #1
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <eepromDataFillWithEmpty+0x40>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	dbf0      	blt.n	80059ec <eepromDataFillWithEmpty+0xc>
	}
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20000074 	.word	0x20000074
 8005a1c:	20000224 	.word	0x20000224
 8005a20:	2000009c 	.word	0x2000009c

08005a24 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
	timer1=millis;
 8005a28:	4b47      	ldr	r3, [pc, #284]	; (8005b48 <bekle+0x124>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a47      	ldr	r2, [pc, #284]	; (8005b4c <bekle+0x128>)
 8005a2e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a30:	e002      	b.n	8005a38 <bekle+0x14>
    	butonKontrol = 1;
 8005a32:	4b47      	ldr	r3, [pc, #284]	; (8005b50 <bekle+0x12c>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a38:	2101      	movs	r1, #1
 8005a3a:	4846      	ldr	r0, [pc, #280]	; (8005b54 <bekle+0x130>)
 8005a3c:	f003 fc72 	bl	8009324 <HAL_GPIO_ReadPin>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d109      	bne.n	8005a5a <bekle+0x36>
 8005a46:	4b40      	ldr	r3, [pc, #256]	; (8005b48 <bekle+0x124>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b40      	ldr	r3, [pc, #256]	; (8005b4c <bekle+0x128>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d0ef      	beq.n	8005a32 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a52:	e002      	b.n	8005a5a <bekle+0x36>
    	butonKontrol = 1;
 8005a54:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <bekle+0x12c>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a5a:	2108      	movs	r1, #8
 8005a5c:	483e      	ldr	r0, [pc, #248]	; (8005b58 <bekle+0x134>)
 8005a5e:	f003 fc61 	bl	8009324 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d109      	bne.n	8005a7c <bekle+0x58>
 8005a68:	4b37      	ldr	r3, [pc, #220]	; (8005b48 <bekle+0x124>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b37      	ldr	r3, [pc, #220]	; (8005b4c <bekle+0x128>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d0ef      	beq.n	8005a54 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a74:	e002      	b.n	8005a7c <bekle+0x58>
    	butonKontrol = 1;
 8005a76:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <bekle+0x12c>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4835      	ldr	r0, [pc, #212]	; (8005b54 <bekle+0x130>)
 8005a80:	f003 fc50 	bl	8009324 <HAL_GPIO_ReadPin>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d109      	bne.n	8005a9e <bekle+0x7a>
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <bekle+0x124>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b2f      	ldr	r3, [pc, #188]	; (8005b4c <bekle+0x128>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d0ef      	beq.n	8005a76 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a96:	e002      	b.n	8005a9e <bekle+0x7a>
    	butonKontrol = 1;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <bekle+0x12c>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	482c      	ldr	r0, [pc, #176]	; (8005b54 <bekle+0x130>)
 8005aa2:	f003 fc3f 	bl	8009324 <HAL_GPIO_ReadPin>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d109      	bne.n	8005ac0 <bekle+0x9c>
 8005aac:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <bekle+0x124>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <bekle+0x128>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d0ef      	beq.n	8005a98 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ab8:	e002      	b.n	8005ac0 <bekle+0x9c>
    	butonKontrol = 1;
 8005aba:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <bekle+0x12c>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ac0:	2108      	movs	r1, #8
 8005ac2:	4824      	ldr	r0, [pc, #144]	; (8005b54 <bekle+0x130>)
 8005ac4:	f003 fc2e 	bl	8009324 <HAL_GPIO_ReadPin>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d109      	bne.n	8005ae2 <bekle+0xbe>
 8005ace:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <bekle+0x124>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <bekle+0x128>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d0ef      	beq.n	8005aba <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ada:	e002      	b.n	8005ae2 <bekle+0xbe>
    	butonKontrol = 1;
 8005adc:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <bekle+0x12c>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	481c      	ldr	r0, [pc, #112]	; (8005b58 <bekle+0x134>)
 8005ae6:	f003 fc1d 	bl	8009324 <HAL_GPIO_ReadPin>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <bekle+0xe0>
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <bekle+0x124>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <bekle+0x128>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d0ef      	beq.n	8005adc <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005afc:	e002      	b.n	8005b04 <bekle+0xe0>
    	butonKontrol = 1;
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <bekle+0x12c>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b08:	4813      	ldr	r0, [pc, #76]	; (8005b58 <bekle+0x134>)
 8005b0a:	f003 fc0b 	bl	8009324 <HAL_GPIO_ReadPin>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <bekle+0x104>
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <bekle+0x124>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <bekle+0x128>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d0ee      	beq.n	8005afe <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005b20:	e002      	b.n	8005b28 <bekle+0x104>
    	butonKontrol = 1;
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <bekle+0x12c>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b2c:	480a      	ldr	r0, [pc, #40]	; (8005b58 <bekle+0x134>)
 8005b2e:	f003 fbf9 	bl	8009324 <HAL_GPIO_ReadPin>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <bekle+0x120>
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <bekle+0x124>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <bekle+0x128>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d0ee      	beq.n	8005b22 <bekle+0xfe>
    }

}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	2000029c 	.word	0x2000029c
 8005b4c:	200002a4 	.word	0x200002a4
 8005b50:	2000034b 	.word	0x2000034b
 8005b54:	40010800 	.word	0x40010800
 8005b58:	40011000 	.word	0x40011000

08005b5c <i2cTest>:

void i2cTest() {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8005b62:	463b      	mov	r3, r7
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8005b6e:	4b50      	ldr	r3, [pc, #320]	; (8005cb0 <i2cTest+0x154>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <i2cTest+0x154>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8005b7e:	484c      	ldr	r0, [pc, #304]	; (8005cb0 <i2cTest+0x154>)
 8005b80:	f003 fd5c 	bl	800963c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b84:	23c0      	movs	r3, #192	; 0xc0
 8005b86:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005b88:	2311      	movs	r3, #17
 8005b8a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005b90:	2303      	movs	r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005b94:	463b      	mov	r3, r7
 8005b96:	4619      	mov	r1, r3
 8005b98:	4846      	ldr	r0, [pc, #280]	; (8005cb4 <i2cTest+0x158>)
 8005b9a:	f003 f963 	bl	8008e64 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	4844      	ldr	r0, [pc, #272]	; (8005cb4 <i2cTest+0x158>)
 8005ba4:	f003 fbd5 	bl	8009352 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005ba8:	2201      	movs	r2, #1
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	4841      	ldr	r0, [pc, #260]	; (8005cb4 <i2cTest+0x158>)
 8005bae:	f003 fbd0 	bl	8009352 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005bb2:	200a      	movs	r0, #10
 8005bb4:	f002 fde6 	bl	8008784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005bb8:	bf00      	nop
 8005bba:	2140      	movs	r1, #64	; 0x40
 8005bbc:	483d      	ldr	r0, [pc, #244]	; (8005cb4 <i2cTest+0x158>)
 8005bbe:	f003 fbb1 	bl	8009324 <HAL_GPIO_ReadPin>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d006      	beq.n	8005bd6 <i2cTest+0x7a>
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	483a      	ldr	r0, [pc, #232]	; (8005cb4 <i2cTest+0x158>)
 8005bcc:	f003 fbaa 	bl	8009324 <HAL_GPIO_ReadPin>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d1f1      	bne.n	8005bba <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	4836      	ldr	r0, [pc, #216]	; (8005cb4 <i2cTest+0x158>)
 8005bdc:	f003 fbb9 	bl	8009352 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005be0:	200a      	movs	r0, #10
 8005be2:	f002 fdcf 	bl	8008784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005be6:	bf00      	nop
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	4832      	ldr	r0, [pc, #200]	; (8005cb4 <i2cTest+0x158>)
 8005bec:	f003 fb9a 	bl	8009324 <HAL_GPIO_ReadPin>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d0f8      	beq.n	8005be8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	482e      	ldr	r0, [pc, #184]	; (8005cb4 <i2cTest+0x158>)
 8005bfc:	f003 fba9 	bl	8009352 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005c00:	200a      	movs	r0, #10
 8005c02:	f002 fdbf 	bl	8008784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005c06:	bf00      	nop
 8005c08:	2140      	movs	r1, #64	; 0x40
 8005c0a:	482a      	ldr	r0, [pc, #168]	; (8005cb4 <i2cTest+0x158>)
 8005c0c:	f003 fb8a 	bl	8009324 <HAL_GPIO_ReadPin>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d0f8      	beq.n	8005c08 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005c16:	2201      	movs	r2, #1
 8005c18:	2140      	movs	r1, #64	; 0x40
 8005c1a:	4826      	ldr	r0, [pc, #152]	; (8005cb4 <i2cTest+0x158>)
 8005c1c:	f003 fb99 	bl	8009352 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005c20:	200a      	movs	r0, #10
 8005c22:	f002 fdaf 	bl	8008784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8005c26:	bf00      	nop
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	4822      	ldr	r0, [pc, #136]	; (8005cb4 <i2cTest+0x158>)
 8005c2c:	f003 fb7a 	bl	8009324 <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d1f8      	bne.n	8005c28 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005c36:	2201      	movs	r2, #1
 8005c38:	2180      	movs	r1, #128	; 0x80
 8005c3a:	481e      	ldr	r0, [pc, #120]	; (8005cb4 <i2cTest+0x158>)
 8005c3c:	f003 fb89 	bl	8009352 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005c40:	200a      	movs	r0, #10
 8005c42:	f002 fd9f 	bl	8008784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005c46:	bf00      	nop
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	481a      	ldr	r0, [pc, #104]	; (8005cb4 <i2cTest+0x158>)
 8005c4c:	f003 fb6a 	bl	8009324 <HAL_GPIO_ReadPin>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d1f8      	bne.n	8005c48 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c56:	23c0      	movs	r3, #192	; 0xc0
 8005c58:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8005c5a:	2312      	movs	r3, #18
 8005c5c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005c62:	2303      	movs	r3, #3
 8005c64:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005c66:	463b      	mov	r3, r7
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4812      	ldr	r0, [pc, #72]	; (8005cb4 <i2cTest+0x158>)
 8005c6c:	f003 f8fa 	bl	8008e64 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <i2cTest+0x154>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <i2cTest+0x154>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c7e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <i2cTest+0x154>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <i2cTest+0x154>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c8e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <i2cTest+0x154>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <i2cTest+0x154>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005ca0:	4803      	ldr	r0, [pc, #12]	; (8005cb0 <i2cTest+0x154>)
 8005ca2:	f003 fb87 	bl	80093b4 <HAL_I2C_Init>
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	200003a8 	.word	0x200003a8
 8005cb4:	40010c00 	.word	0x40010c00

08005cb8 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005cbc:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <checkLCDBacklight+0x24>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <checkLCDBacklight+0x28>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b3b      	cmp	r3, #59	; 0x3b
 8005cc8:	d903      	bls.n	8005cd2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fa fde4 	bl	8000898 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8005cd0:	e002      	b.n	8005cd8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	f7fa fde0 	bl	8000898 <lcd_backlight>
}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	2000029c 	.word	0x2000029c
 8005ce0:	200002b8 	.word	0x200002b8

08005ce4 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <checkBasincSalteri+0x54>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <checkBasincSalteri+0x12>
		basincVar=1;
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <checkBasincSalteri+0x58>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8005cf6:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <checkBasincSalteri+0x54>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d119      	bne.n	8005d32 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d02:	480f      	ldr	r0, [pc, #60]	; (8005d40 <checkBasincSalteri+0x5c>)
 8005d04:	f003 fb0e 	bl	8009324 <HAL_GPIO_ReadPin>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <checkBasincSalteri+0x60>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <checkBasincSalteri+0x64>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d90a      	bls.n	8005d32 <checkBasincSalteri+0x4e>
				basincVar=1;
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <checkBasincSalteri+0x58>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8005d22:	e006      	b.n	8005d32 <checkBasincSalteri+0x4e>
			timer5=millis;
 8005d24:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <checkBasincSalteri+0x60>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <checkBasincSalteri+0x64>)
 8005d2a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <checkBasincSalteri+0x58>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000323 	.word	0x20000323
 8005d3c:	2000031f 	.word	0x2000031f
 8005d40:	40011000 	.word	0x40011000
 8005d44:	2000029c 	.word	0x2000029c
 8005d48:	200002b4 	.word	0x200002b4

08005d4c <checkBasGonder>:

void checkBasGonder() {
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005d50:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <checkBasGonder+0x74>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d10b      	bne.n	8005d70 <checkBasGonder+0x24>
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <checkBasGonder+0x78>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <checkBasGonder+0x24>
 8005d60:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <checkBasGonder+0x7c>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005d68:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <checkBasGonder+0x80>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e009      	b.n	8005d84 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <checkBasGonder+0x78>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f083 0301 	eor.w	r3, r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <checkBasGonder+0x80>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005d84:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <checkBasGonder+0x74>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10b      	bne.n	8005da4 <checkBasGonder+0x58>
 8005d8c:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <checkBasGonder+0x84>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <checkBasGonder+0x58>
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <checkBasGonder+0x7c>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <checkBasGonder+0x88>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8005da2:	e009      	b.n	8005db8 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <checkBasGonder+0x84>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f083 0301 	eor.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <checkBasGonder+0x88>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr
 8005dc0:	2000031d 	.word	0x2000031d
 8005dc4:	20000351 	.word	0x20000351
 8005dc8:	2000032b 	.word	0x2000032b
 8005dcc:	20000358 	.word	0x20000358
 8005dd0:	20000354 	.word	0x20000354
 8005dd4:	20000359 	.word	0x20000359

08005dd8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <checkKapiSecimleri+0x98>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005de4:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8005dea:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <checkKapiSecimleri+0x98>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10e      	bne.n	8005e10 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df6:	4820      	ldr	r0, [pc, #128]	; (8005e78 <checkKapiSecimleri+0xa0>)
 8005df8:	f003 fa94 	bl	8009324 <HAL_GPIO_ReadPin>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e002      	b.n	8005e10 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <checkKapiSecimleri+0x98>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d10e      	bne.n	8005e36 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e1c:	4816      	ldr	r0, [pc, #88]	; (8005e78 <checkKapiSecimleri+0xa0>)
 8005e1e:	f003 fa81 	bl	8009324 <HAL_GPIO_ReadPin>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <checkKapiSecimleri+0x98>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d116      	bne.n	8005e6c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e42:	480d      	ldr	r0, [pc, #52]	; (8005e78 <checkKapiSecimleri+0xa0>)
 8005e44:	f003 fa6e 	bl	8009324 <HAL_GPIO_ReadPin>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <checkKapiSecimleri+0x8e>
 8005e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e52:	4809      	ldr	r0, [pc, #36]	; (8005e78 <checkKapiSecimleri+0xa0>)
 8005e54:	f003 fa66 	bl	8009324 <HAL_GPIO_ReadPin>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005e64:	e002      	b.n	8005e6c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8005e66:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <checkKapiSecimleri+0x9c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000324 	.word	0x20000324
 8005e74:	2000036f 	.word	0x2000036f
 8005e78:	40010800 	.word	0x40010800

08005e7c <checkAktifCalisma>:

void checkAktifCalisma() {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005e80:	4b62      	ldr	r3, [pc, #392]	; (800600c <checkAktifCalisma+0x190>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f041 833e 	bne.w	8007506 <checkAktifCalisma+0x168a>
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <checkAktifCalisma+0x194>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f041 8339 	bne.w	8007506 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005e94:	4b5f      	ldr	r3, [pc, #380]	; (8006014 <checkAktifCalisma+0x198>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11a      	bne.n	8005ed2 <checkAktifCalisma+0x56>
 8005e9c:	4b5e      	ldr	r3, [pc, #376]	; (8006018 <checkAktifCalisma+0x19c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d116      	bne.n	8005ed2 <checkAktifCalisma+0x56>
 8005ea4:	4b5d      	ldr	r3, [pc, #372]	; (800601c <checkAktifCalisma+0x1a0>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <checkAktifCalisma+0x46>
 8005eac:	4b5c      	ldr	r3, [pc, #368]	; (8006020 <checkAktifCalisma+0x1a4>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f083 0301 	eor.w	r3, r3, #1
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <checkAktifCalisma+0x46>
 8005eba:	4b5a      	ldr	r3, [pc, #360]	; (8006024 <checkAktifCalisma+0x1a8>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d007      	beq.n	8005ed2 <checkAktifCalisma+0x56>
 8005ec2:	4b59      	ldr	r3, [pc, #356]	; (8006028 <checkAktifCalisma+0x1ac>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d018      	beq.n	8005efc <checkAktifCalisma+0x80>
 8005eca:	4b58      	ldr	r3, [pc, #352]	; (800602c <checkAktifCalisma+0x1b0>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d114      	bne.n	8005efc <checkAktifCalisma+0x80>
 8005ed2:	4b57      	ldr	r3, [pc, #348]	; (8006030 <checkAktifCalisma+0x1b4>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <checkAktifCalisma+0x80>
 8005eda:	4b56      	ldr	r3, [pc, #344]	; (8006034 <checkAktifCalisma+0x1b8>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00c      	beq.n	8005efc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ee8:	4853      	ldr	r0, [pc, #332]	; (8006038 <checkAktifCalisma+0x1bc>)
 8005eea:	f003 fa32 	bl	8009352 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <checkAktifCalisma+0x1c0>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005ef4:	4b52      	ldr	r3, [pc, #328]	; (8006040 <checkAktifCalisma+0x1c4>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e008      	b.n	8005f0e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005efc:	2200      	movs	r2, #0
 8005efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f02:	484d      	ldr	r0, [pc, #308]	; (8006038 <checkAktifCalisma+0x1bc>)
 8005f04:	f003 fa25 	bl	8009352 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005f08:	4b4c      	ldr	r3, [pc, #304]	; (800603c <checkAktifCalisma+0x1c0>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005f0e:	4b40      	ldr	r3, [pc, #256]	; (8006010 <checkAktifCalisma+0x194>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d160      	bne.n	8005fd8 <checkAktifCalisma+0x15c>
 8005f16:	4b46      	ldr	r3, [pc, #280]	; (8006030 <checkAktifCalisma+0x1b4>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d05c      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
 8005f1e:	4b45      	ldr	r3, [pc, #276]	; (8006034 <checkAktifCalisma+0x1b8>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d058      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f2a:	4843      	ldr	r0, [pc, #268]	; (8006038 <checkAktifCalisma+0x1bc>)
 8005f2c:	f003 f9fa 	bl	8009324 <HAL_GPIO_ReadPin>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <checkAktifCalisma+0xc2>
 8005f36:	4b43      	ldr	r3, [pc, #268]	; (8006044 <checkAktifCalisma+0x1c8>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d04c      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4841      	ldr	r0, [pc, #260]	; (8006048 <checkAktifCalisma+0x1cc>)
 8005f42:	f003 f9ef 	bl	8009324 <HAL_GPIO_ReadPin>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d145      	bne.n	8005fd8 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005f4c:	4b3f      	ldr	r3, [pc, #252]	; (800604c <checkAktifCalisma+0x1d0>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d041      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f58:	4837      	ldr	r0, [pc, #220]	; (8006038 <checkAktifCalisma+0x1bc>)
 8005f5a:	f003 f9e3 	bl	8009324 <HAL_GPIO_ReadPin>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d10e      	bne.n	8005f82 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f68:	4833      	ldr	r0, [pc, #204]	; (8006038 <checkAktifCalisma+0x1bc>)
 8005f6a:	f003 f9db 	bl	8009324 <HAL_GPIO_ReadPin>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d106      	bne.n	8005f82 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	4834      	ldr	r0, [pc, #208]	; (8006048 <checkAktifCalisma+0x1cc>)
 8005f78:	f003 f9d4 	bl	8009324 <HAL_GPIO_ReadPin>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d003      	beq.n	8005f8a <checkAktifCalisma+0x10e>
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <checkAktifCalisma+0x198>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d026      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <checkAktifCalisma+0x1a0>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f083 0301 	eor.w	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01f      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005f98:	4b1f      	ldr	r3, [pc, #124]	; (8006018 <checkAktifCalisma+0x19c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f083 0301 	eor.w	r3, r3, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d018      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005fa6:	4b20      	ldr	r3, [pc, #128]	; (8006028 <checkAktifCalisma+0x1ac>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f083 0301 	eor.w	r3, r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d011      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005fb4:	4b26      	ldr	r3, [pc, #152]	; (8006050 <checkAktifCalisma+0x1d4>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f083 0301 	eor.w	r3, r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <checkAktifCalisma+0x1d8>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f083 0301 	eor.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <checkAktifCalisma+0x198>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	e002      	b.n	8005fde <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <checkAktifCalisma+0x198>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005fde:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <checkAktifCalisma+0x198>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d03a      	beq.n	800605c <checkAktifCalisma+0x1e0>
 8005fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fea:	4817      	ldr	r0, [pc, #92]	; (8006048 <checkAktifCalisma+0x1cc>)
 8005fec:	f003 f99a 	bl	8009324 <HAL_GPIO_ReadPin>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d132      	bne.n	800605c <checkAktifCalisma+0x1e0>
 8005ff6:	4b18      	ldr	r3, [pc, #96]	; (8006058 <checkAktifCalisma+0x1dc>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d02e      	beq.n	800605c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005ffe:	2201      	movs	r2, #1
 8006000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006004:	480c      	ldr	r0, [pc, #48]	; (8006038 <checkAktifCalisma+0x1bc>)
 8006006:	f003 f9a4 	bl	8009352 <HAL_GPIO_WritePin>
 800600a:	e02d      	b.n	8006068 <checkAktifCalisma+0x1ec>
 800600c:	2000033a 	.word	0x2000033a
 8006010:	20000339 	.word	0x20000339
 8006014:	20000351 	.word	0x20000351
 8006018:	20000352 	.word	0x20000352
 800601c:	20000354 	.word	0x20000354
 8006020:	2000034c 	.word	0x2000034c
 8006024:	2000032f 	.word	0x2000032f
 8006028:	20000353 	.word	0x20000353
 800602c:	2000032e 	.word	0x2000032e
 8006030:	2000036e 	.word	0x2000036e
 8006034:	2000036f 	.word	0x2000036f
 8006038:	40010c00 	.word	0x40010c00
 800603c:	20000370 	.word	0x20000370
 8006040:	2000035b 	.word	0x2000035b
 8006044:	20000358 	.word	0x20000358
 8006048:	40011000 	.word	0x40011000
 800604c:	2000031f 	.word	0x2000031f
 8006050:	20000356 	.word	0x20000356
 8006054:	20000357 	.word	0x20000357
 8006058:	2000032a 	.word	0x2000032a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800605c:	2200      	movs	r2, #0
 800605e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006062:	4860      	ldr	r0, [pc, #384]	; (80061e4 <checkAktifCalisma+0x368>)
 8006064:	f003 f975 	bl	8009352 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006068:	4b5f      	ldr	r3, [pc, #380]	; (80061e8 <checkAktifCalisma+0x36c>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d013      	beq.n	8006098 <checkAktifCalisma+0x21c>
 8006070:	4b5e      	ldr	r3, [pc, #376]	; (80061ec <checkAktifCalisma+0x370>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d007      	beq.n	8006088 <checkAktifCalisma+0x20c>
 8006078:	4b5c      	ldr	r3, [pc, #368]	; (80061ec <checkAktifCalisma+0x370>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d003      	beq.n	8006088 <checkAktifCalisma+0x20c>
 8006080:	4b5b      	ldr	r3, [pc, #364]	; (80061f0 <checkAktifCalisma+0x374>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d107      	bne.n	8006098 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006088:	2201      	movs	r2, #1
 800608a:	2104      	movs	r1, #4
 800608c:	4855      	ldr	r0, [pc, #340]	; (80061e4 <checkAktifCalisma+0x368>)
 800608e:	f003 f960 	bl	8009352 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006092:	4b58      	ldr	r3, [pc, #352]	; (80061f4 <checkAktifCalisma+0x378>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006098:	4b56      	ldr	r3, [pc, #344]	; (80061f4 <checkAktifCalisma+0x378>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d02f      	beq.n	8006100 <checkAktifCalisma+0x284>
 80060a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060a4:	484f      	ldr	r0, [pc, #316]	; (80061e4 <checkAktifCalisma+0x368>)
 80060a6:	f003 f93d 	bl	8009324 <HAL_GPIO_ReadPin>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d106      	bne.n	80060be <checkAktifCalisma+0x242>
 80060b0:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <checkAktifCalisma+0x37c>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f083 0301 	eor.w	r3, r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <checkAktifCalisma+0x250>
 80060be:	2102      	movs	r1, #2
 80060c0:	484e      	ldr	r0, [pc, #312]	; (80061fc <checkAktifCalisma+0x380>)
 80060c2:	f003 f92f 	bl	8009324 <HAL_GPIO_ReadPin>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d119      	bne.n	8006100 <checkAktifCalisma+0x284>
 80060cc:	4b4c      	ldr	r3, [pc, #304]	; (8006200 <checkAktifCalisma+0x384>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d015      	beq.n	8006100 <checkAktifCalisma+0x284>
 80060d4:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <checkAktifCalisma+0x388>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d011      	beq.n	8006100 <checkAktifCalisma+0x284>
 80060dc:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <checkAktifCalisma+0x38c>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00d      	beq.n	8006100 <checkAktifCalisma+0x284>
 80060e4:	4b49      	ldr	r3, [pc, #292]	; (800620c <checkAktifCalisma+0x390>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f083 0301 	eor.w	r3, r3, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d006      	beq.n	8006100 <checkAktifCalisma+0x284>
			timer2=millis;
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <checkAktifCalisma+0x394>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a47      	ldr	r2, [pc, #284]	; (8006214 <checkAktifCalisma+0x398>)
 80060f8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80060fa:	4b44      	ldr	r3, [pc, #272]	; (800620c <checkAktifCalisma+0x390>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006100:	4b43      	ldr	r3, [pc, #268]	; (8006210 <checkAktifCalisma+0x394>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b43      	ldr	r3, [pc, #268]	; (8006214 <checkAktifCalisma+0x398>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	4a43      	ldr	r2, [pc, #268]	; (8006218 <checkAktifCalisma+0x39c>)
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	4293      	cmp	r3, r2
 8006110:	d303      	bcc.n	800611a <checkAktifCalisma+0x29e>
 8006112:	4b3e      	ldr	r3, [pc, #248]	; (800620c <checkAktifCalisma+0x390>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d111      	bne.n	800613e <checkAktifCalisma+0x2c2>
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <checkAktifCalisma+0x384>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f083 0301 	eor.w	r3, r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <checkAktifCalisma+0x2c2>
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <checkAktifCalisma+0x388>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f083 0301 	eor.w	r3, r3, #1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <checkAktifCalisma+0x2c2>
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <checkAktifCalisma+0x38c>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800613e:	2200      	movs	r2, #0
 8006140:	2104      	movs	r1, #4
 8006142:	4828      	ldr	r0, [pc, #160]	; (80061e4 <checkAktifCalisma+0x368>)
 8006144:	f003 f905 	bl	8009352 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006148:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <checkAktifCalisma+0x378>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800614e:	4b2f      	ldr	r3, [pc, #188]	; (800620c <checkAktifCalisma+0x390>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006154:	4b31      	ldr	r3, [pc, #196]	; (800621c <checkAktifCalisma+0x3a0>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800615c:	4b30      	ldr	r3, [pc, #192]	; (8006220 <checkAktifCalisma+0x3a4>)
 800615e:	2201      	movs	r2, #1
 8006160:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006162:	4b2e      	ldr	r3, [pc, #184]	; (800621c <checkAktifCalisma+0x3a0>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d116      	bne.n	8006198 <checkAktifCalisma+0x31c>
 800616a:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <checkAktifCalisma+0x3a8>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d112      	bne.n	8006198 <checkAktifCalisma+0x31c>
 8006172:	2101      	movs	r1, #1
 8006174:	4821      	ldr	r0, [pc, #132]	; (80061fc <checkAktifCalisma+0x380>)
 8006176:	f003 f8d5 	bl	8009324 <HAL_GPIO_ReadPin>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <checkAktifCalisma+0x31c>
 8006180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006184:	4817      	ldr	r0, [pc, #92]	; (80061e4 <checkAktifCalisma+0x368>)
 8006186:	f003 f8cd 	bl	8009324 <HAL_GPIO_ReadPin>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006190:	4b23      	ldr	r3, [pc, #140]	; (8006220 <checkAktifCalisma+0x3a4>)
 8006192:	2201      	movs	r2, #1
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e011      	b.n	80061bc <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006198:	4b20      	ldr	r3, [pc, #128]	; (800621c <checkAktifCalisma+0x3a0>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10d      	bne.n	80061bc <checkAktifCalisma+0x340>
 80061a0:	2101      	movs	r1, #1
 80061a2:	4816      	ldr	r0, [pc, #88]	; (80061fc <checkAktifCalisma+0x380>)
 80061a4:	f003 f8be 	bl	8009324 <HAL_GPIO_ReadPin>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d106      	bne.n	80061bc <checkAktifCalisma+0x340>
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <checkAktifCalisma+0x3a8>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <checkAktifCalisma+0x340>
			cerceveVar=0;
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <checkAktifCalisma+0x3a4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80061bc:	4b17      	ldr	r3, [pc, #92]	; (800621c <checkAktifCalisma+0x3a0>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d134      	bne.n	800622e <checkAktifCalisma+0x3b2>
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <checkAktifCalisma+0x3a8>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d130      	bne.n	800622e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80061cc:	2101      	movs	r1, #1
 80061ce:	480b      	ldr	r0, [pc, #44]	; (80061fc <checkAktifCalisma+0x380>)
 80061d0:	f003 f8a8 	bl	8009324 <HAL_GPIO_ReadPin>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d126      	bne.n	8006228 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <checkAktifCalisma+0x3a4>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e025      	b.n	800622e <checkAktifCalisma+0x3b2>
 80061e2:	bf00      	nop
 80061e4:	40010c00 	.word	0x40010c00
 80061e8:	20000351 	.word	0x20000351
 80061ec:	2000032b 	.word	0x2000032b
 80061f0:	2000032f 	.word	0x2000032f
 80061f4:	20000355 	.word	0x20000355
 80061f8:	20000358 	.word	0x20000358
 80061fc:	40011000 	.word	0x40011000
 8006200:	2000036e 	.word	0x2000036e
 8006204:	2000036f 	.word	0x2000036f
 8006208:	2000031f 	.word	0x2000031f
 800620c:	2000034d 	.word	0x2000034d
 8006210:	2000029c 	.word	0x2000029c
 8006214:	200002a8 	.word	0x200002a8
 8006218:	20000330 	.word	0x20000330
 800621c:	20000320 	.word	0x20000320
 8006220:	20000373 	.word	0x20000373
 8006224:	2000031d 	.word	0x2000031d
			} else {
				cerceveVar=0;
 8006228:	4b7f      	ldr	r3, [pc, #508]	; (8006428 <checkAktifCalisma+0x5ac>)
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800622e:	4b7f      	ldr	r3, [pc, #508]	; (800642c <checkAktifCalisma+0x5b0>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d17c      	bne.n	8006330 <checkAktifCalisma+0x4b4>
 8006236:	4b7e      	ldr	r3, [pc, #504]	; (8006430 <checkAktifCalisma+0x5b4>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d078      	beq.n	8006330 <checkAktifCalisma+0x4b4>
 800623e:	4b7d      	ldr	r3, [pc, #500]	; (8006434 <checkAktifCalisma+0x5b8>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d074      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800624a:	487b      	ldr	r0, [pc, #492]	; (8006438 <checkAktifCalisma+0x5bc>)
 800624c:	f003 f86a 	bl	8009324 <HAL_GPIO_ReadPin>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <checkAktifCalisma+0x3e2>
 8006256:	4b79      	ldr	r3, [pc, #484]	; (800643c <checkAktifCalisma+0x5c0>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d068      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800625e:	4b72      	ldr	r3, [pc, #456]	; (8006428 <checkAktifCalisma+0x5ac>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d064      	beq.n	8006330 <checkAktifCalisma+0x4b4>
 8006266:	4b76      	ldr	r3, [pc, #472]	; (8006440 <checkAktifCalisma+0x5c4>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f083 0301 	eor.w	r3, r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d05d      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006274:	2104      	movs	r1, #4
 8006276:	4873      	ldr	r0, [pc, #460]	; (8006444 <checkAktifCalisma+0x5c8>)
 8006278:	f003 f854 	bl	8009324 <HAL_GPIO_ReadPin>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <checkAktifCalisma+0x40e>
 8006282:	4b71      	ldr	r3, [pc, #452]	; (8006448 <checkAktifCalisma+0x5cc>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d152      	bne.n	8006330 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800628a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800628e:	486a      	ldr	r0, [pc, #424]	; (8006438 <checkAktifCalisma+0x5bc>)
 8006290:	f003 f848 	bl	8009324 <HAL_GPIO_ReadPin>
 8006294:	4603      	mov	r3, r0
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10e      	bne.n	80062b8 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800629a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800629e:	4866      	ldr	r0, [pc, #408]	; (8006438 <checkAktifCalisma+0x5bc>)
 80062a0:	f003 f840 	bl	8009324 <HAL_GPIO_ReadPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d106      	bne.n	80062b8 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80062aa:	2140      	movs	r1, #64	; 0x40
 80062ac:	4865      	ldr	r0, [pc, #404]	; (8006444 <checkAktifCalisma+0x5c8>)
 80062ae:	f003 f839 	bl	8009324 <HAL_GPIO_ReadPin>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d003      	beq.n	80062c0 <checkAktifCalisma+0x444>
 80062b8:	4b64      	ldr	r3, [pc, #400]	; (800644c <checkAktifCalisma+0x5d0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d037      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80062c0:	4b63      	ldr	r3, [pc, #396]	; (8006450 <checkAktifCalisma+0x5d4>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f083 0301 	eor.w	r3, r3, #1
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d030      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80062ce:	4b61      	ldr	r3, [pc, #388]	; (8006454 <checkAktifCalisma+0x5d8>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f083 0301 	eor.w	r3, r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d029      	beq.n	8006330 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80062dc:	4b5e      	ldr	r3, [pc, #376]	; (8006458 <checkAktifCalisma+0x5dc>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	f083 0301 	eor.w	r3, r3, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80062ea:	4b5c      	ldr	r3, [pc, #368]	; (800645c <checkAktifCalisma+0x5e0>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f083 0301 	eor.w	r3, r3, #1
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80062f8:	4b59      	ldr	r3, [pc, #356]	; (8006460 <checkAktifCalisma+0x5e4>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f083 0301 	eor.w	r3, r3, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006306:	4b57      	ldr	r3, [pc, #348]	; (8006464 <checkAktifCalisma+0x5e8>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f083 0301 	eor.w	r3, r3, #1
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006314:	2201      	movs	r2, #1
 8006316:	2102      	movs	r1, #2
 8006318:	4847      	ldr	r0, [pc, #284]	; (8006438 <checkAktifCalisma+0x5bc>)
 800631a:	f003 f81a 	bl	8009352 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800631e:	4b4b      	ldr	r3, [pc, #300]	; (800644c <checkAktifCalisma+0x5d0>)
 8006320:	2201      	movs	r2, #1
 8006322:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006324:	4b50      	ldr	r3, [pc, #320]	; (8006468 <checkAktifCalisma+0x5ec>)
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800632a:	4b50      	ldr	r3, [pc, #320]	; (800646c <checkAktifCalisma+0x5f0>)
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006330:	4b46      	ldr	r3, [pc, #280]	; (800644c <checkAktifCalisma+0x5d0>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d033      	beq.n	80063a0 <checkAktifCalisma+0x524>
 8006338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800633c:	483e      	ldr	r0, [pc, #248]	; (8006438 <checkAktifCalisma+0x5bc>)
 800633e:	f002 fff1 	bl	8009324 <HAL_GPIO_ReadPin>
 8006342:	4603      	mov	r3, r0
 8006344:	2b01      	cmp	r3, #1
 8006346:	d106      	bne.n	8006356 <checkAktifCalisma+0x4da>
 8006348:	4b3c      	ldr	r3, [pc, #240]	; (800643c <checkAktifCalisma+0x5c0>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f083 0301 	eor.w	r3, r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <checkAktifCalisma+0x4f0>
 8006356:	2104      	movs	r1, #4
 8006358:	483a      	ldr	r0, [pc, #232]	; (8006444 <checkAktifCalisma+0x5c8>)
 800635a:	f002 ffe3 	bl	8009324 <HAL_GPIO_ReadPin>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d11d      	bne.n	80063a0 <checkAktifCalisma+0x524>
 8006364:	4b38      	ldr	r3, [pc, #224]	; (8006448 <checkAktifCalisma+0x5cc>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d019      	beq.n	80063a0 <checkAktifCalisma+0x524>
 800636c:	4b30      	ldr	r3, [pc, #192]	; (8006430 <checkAktifCalisma+0x5b4>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d015      	beq.n	80063a0 <checkAktifCalisma+0x524>
 8006374:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <checkAktifCalisma+0x5b8>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d011      	beq.n	80063a0 <checkAktifCalisma+0x524>
 800637c:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <checkAktifCalisma+0x5ac>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00d      	beq.n	80063a0 <checkAktifCalisma+0x524>
 8006384:	4b3a      	ldr	r3, [pc, #232]	; (8006470 <checkAktifCalisma+0x5f4>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f083 0301 	eor.w	r3, r3, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d006      	beq.n	80063a0 <checkAktifCalisma+0x524>
			timer2=millis;
 8006392:	4b38      	ldr	r3, [pc, #224]	; (8006474 <checkAktifCalisma+0x5f8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a38      	ldr	r2, [pc, #224]	; (8006478 <checkAktifCalisma+0x5fc>)
 8006398:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <checkAktifCalisma+0x5f4>)
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <checkAktifCalisma+0x5f8>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4b34      	ldr	r3, [pc, #208]	; (8006478 <checkAktifCalisma+0x5fc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	4a34      	ldr	r2, [pc, #208]	; (800647c <checkAktifCalisma+0x600>)
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d303      	bcc.n	80063ba <checkAktifCalisma+0x53e>
 80063b2:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <checkAktifCalisma+0x5f4>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d114      	bne.n	80063e4 <checkAktifCalisma+0x568>
 80063ba:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <checkAktifCalisma+0x5b4>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f083 0301 	eor.w	r3, r3, #1
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <checkAktifCalisma+0x568>
 80063c8:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <checkAktifCalisma+0x5b8>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f083 0301 	eor.w	r3, r3, #1
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <checkAktifCalisma+0x568>
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <checkAktifCalisma+0x5ac>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f083 0301 	eor.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80063e4:	2200      	movs	r2, #0
 80063e6:	2102      	movs	r1, #2
 80063e8:	4813      	ldr	r0, [pc, #76]	; (8006438 <checkAktifCalisma+0x5bc>)
 80063ea:	f002 ffb2 	bl	8009352 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80063ee:	4b17      	ldr	r3, [pc, #92]	; (800644c <checkAktifCalisma+0x5d0>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80063f4:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <checkAktifCalisma+0x5f4>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80063fa:	4b14      	ldr	r3, [pc, #80]	; (800644c <checkAktifCalisma+0x5d0>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d040      	beq.n	8006484 <checkAktifCalisma+0x608>
 8006402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006406:	480f      	ldr	r0, [pc, #60]	; (8006444 <checkAktifCalisma+0x5c8>)
 8006408:	f002 ff8c 	bl	8009324 <HAL_GPIO_ReadPin>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d138      	bne.n	8006484 <checkAktifCalisma+0x608>
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <checkAktifCalisma+0x604>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d034      	beq.n	8006484 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800641a:	2201      	movs	r2, #1
 800641c:	2101      	movs	r1, #1
 800641e:	4806      	ldr	r0, [pc, #24]	; (8006438 <checkAktifCalisma+0x5bc>)
 8006420:	f002 ff97 	bl	8009352 <HAL_GPIO_WritePin>
 8006424:	e033      	b.n	800648e <checkAktifCalisma+0x612>
 8006426:	bf00      	nop
 8006428:	20000373 	.word	0x20000373
 800642c:	20000339 	.word	0x20000339
 8006430:	2000036e 	.word	0x2000036e
 8006434:	2000036f 	.word	0x2000036f
 8006438:	40010c00 	.word	0x40010c00
 800643c:	20000359 	.word	0x20000359
 8006440:	2000036d 	.word	0x2000036d
 8006444:	40011000 	.word	0x40011000
 8006448:	20000322 	.word	0x20000322
 800644c:	20000354 	.word	0x20000354
 8006450:	20000351 	.word	0x20000351
 8006454:	20000355 	.word	0x20000355
 8006458:	20000352 	.word	0x20000352
 800645c:	20000353 	.word	0x20000353
 8006460:	20000356 	.word	0x20000356
 8006464:	20000357 	.word	0x20000357
 8006468:	2000035c 	.word	0x2000035c
 800646c:	2000037d 	.word	0x2000037d
 8006470:	2000034c 	.word	0x2000034c
 8006474:	2000029c 	.word	0x2000029c
 8006478:	200002a8 	.word	0x200002a8
 800647c:	20000331 	.word	0x20000331
 8006480:	20000321 	.word	0x20000321
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006484:	2200      	movs	r2, #0
 8006486:	2101      	movs	r1, #1
 8006488:	4836      	ldr	r0, [pc, #216]	; (8006564 <checkAktifCalisma+0x6e8>)
 800648a:	f002 ff62 	bl	8009352 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800648e:	4b36      	ldr	r3, [pc, #216]	; (8006568 <checkAktifCalisma+0x6ec>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 8080 	bne.w	8006598 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006498:	4b34      	ldr	r3, [pc, #208]	; (800656c <checkAktifCalisma+0x6f0>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d003      	beq.n	80064a8 <checkAktifCalisma+0x62c>
 80064a0:	4b32      	ldr	r3, [pc, #200]	; (800656c <checkAktifCalisma+0x6f0>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d177      	bne.n	8006598 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80064a8:	4b31      	ldr	r3, [pc, #196]	; (8006570 <checkAktifCalisma+0x6f4>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d073      	beq.n	8006598 <checkAktifCalisma+0x71c>
 80064b0:	4b30      	ldr	r3, [pc, #192]	; (8006574 <checkAktifCalisma+0x6f8>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d06f      	beq.n	8006598 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80064b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064bc:	4829      	ldr	r0, [pc, #164]	; (8006564 <checkAktifCalisma+0x6e8>)
 80064be:	f002 ff31 	bl	8009324 <HAL_GPIO_ReadPin>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d167      	bne.n	8006598 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80064c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064cc:	482a      	ldr	r0, [pc, #168]	; (8006578 <checkAktifCalisma+0x6fc>)
 80064ce:	f002 ff29 	bl	8009324 <HAL_GPIO_ReadPin>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <checkAktifCalisma+0x664>
 80064d8:	4b28      	ldr	r3, [pc, #160]	; (800657c <checkAktifCalisma+0x700>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d15b      	bne.n	8006598 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80064e0:	2140      	movs	r1, #64	; 0x40
 80064e2:	4825      	ldr	r0, [pc, #148]	; (8006578 <checkAktifCalisma+0x6fc>)
 80064e4:	f002 ff1e 	bl	8009324 <HAL_GPIO_ReadPin>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d10f      	bne.n	800650e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80064ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064f2:	481c      	ldr	r0, [pc, #112]	; (8006564 <checkAktifCalisma+0x6e8>)
 80064f4:	f002 ff16 	bl	8009324 <HAL_GPIO_ReadPin>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80064fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006502:	4818      	ldr	r0, [pc, #96]	; (8006564 <checkAktifCalisma+0x6e8>)
 8006504:	f002 ff0e 	bl	8009324 <HAL_GPIO_ReadPin>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d003      	beq.n	8006516 <checkAktifCalisma+0x69a>
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <checkAktifCalisma+0x704>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d040      	beq.n	8006598 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006516:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <checkAktifCalisma+0x708>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d039      	beq.n	8006598 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006524:	4b18      	ldr	r3, [pc, #96]	; (8006588 <checkAktifCalisma+0x70c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d032      	beq.n	8006598 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006532:	4b16      	ldr	r3, [pc, #88]	; (800658c <checkAktifCalisma+0x710>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d02b      	beq.n	8006598 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006540:	4b13      	ldr	r3, [pc, #76]	; (8006590 <checkAktifCalisma+0x714>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f083 0301 	eor.w	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d024      	beq.n	8006598 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800654e:	4b11      	ldr	r3, [pc, #68]	; (8006594 <checkAktifCalisma+0x718>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f083 0301 	eor.w	r3, r3, #1
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01d      	beq.n	8006598 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <checkAktifCalisma+0x704>)
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e01c      	b.n	800659e <checkAktifCalisma+0x722>
 8006564:	40010c00 	.word	0x40010c00
 8006568:	20000339 	.word	0x20000339
 800656c:	2000032b 	.word	0x2000032b
 8006570:	2000036e 	.word	0x2000036e
 8006574:	2000036f 	.word	0x2000036f
 8006578:	40011000 	.word	0x40011000
 800657c:	2000032c 	.word	0x2000032c
 8006580:	20000352 	.word	0x20000352
 8006584:	20000351 	.word	0x20000351
 8006588:	20000355 	.word	0x20000355
 800658c:	20000354 	.word	0x20000354
 8006590:	20000353 	.word	0x20000353
 8006594:	20000357 	.word	0x20000357
		} else {
			devmotoryukaricalisiyor=0;
 8006598:	4b64      	ldr	r3, [pc, #400]	; (800672c <checkAktifCalisma+0x8b0>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800659e:	4b63      	ldr	r3, [pc, #396]	; (800672c <checkAktifCalisma+0x8b0>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065a6:	2201      	movs	r2, #1
 80065a8:	2120      	movs	r1, #32
 80065aa:	4861      	ldr	r0, [pc, #388]	; (8006730 <checkAktifCalisma+0x8b4>)
 80065ac:	f002 fed1 	bl	8009352 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80065b0:	4b60      	ldr	r3, [pc, #384]	; (8006734 <checkAktifCalisma+0x8b8>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80065b6:	4b5f      	ldr	r3, [pc, #380]	; (8006734 <checkAktifCalisma+0x8b8>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d025      	beq.n	800660a <checkAktifCalisma+0x78e>
 80065be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065c2:	485d      	ldr	r0, [pc, #372]	; (8006738 <checkAktifCalisma+0x8bc>)
 80065c4:	f002 feae 	bl	8009324 <HAL_GPIO_ReadPin>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d007      	beq.n	80065de <checkAktifCalisma+0x762>
 80065ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065d2:	4857      	ldr	r0, [pc, #348]	; (8006730 <checkAktifCalisma+0x8b4>)
 80065d4:	f002 fea6 	bl	8009324 <HAL_GPIO_ReadPin>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d115      	bne.n	800660a <checkAktifCalisma+0x78e>
 80065de:	4b57      	ldr	r3, [pc, #348]	; (800673c <checkAktifCalisma+0x8c0>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d011      	beq.n	800660a <checkAktifCalisma+0x78e>
 80065e6:	4b56      	ldr	r3, [pc, #344]	; (8006740 <checkAktifCalisma+0x8c4>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <checkAktifCalisma+0x78e>
 80065ee:	4b55      	ldr	r3, [pc, #340]	; (8006744 <checkAktifCalisma+0x8c8>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f083 0301 	eor.w	r3, r3, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <checkAktifCalisma+0x78e>
			timer2=millis;
 80065fc:	4b52      	ldr	r3, [pc, #328]	; (8006748 <checkAktifCalisma+0x8cc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a52      	ldr	r2, [pc, #328]	; (800674c <checkAktifCalisma+0x8d0>)
 8006602:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006604:	4b4f      	ldr	r3, [pc, #316]	; (8006744 <checkAktifCalisma+0x8c8>)
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800660a:	4b4f      	ldr	r3, [pc, #316]	; (8006748 <checkAktifCalisma+0x8cc>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b4f      	ldr	r3, [pc, #316]	; (800674c <checkAktifCalisma+0x8d0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	4a4e      	ldr	r2, [pc, #312]	; (8006750 <checkAktifCalisma+0x8d4>)
 8006616:	7812      	ldrb	r2, [r2, #0]
 8006618:	4293      	cmp	r3, r2
 800661a:	d303      	bcc.n	8006624 <checkAktifCalisma+0x7a8>
 800661c:	4b49      	ldr	r3, [pc, #292]	; (8006744 <checkAktifCalisma+0x8c8>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10d      	bne.n	8006640 <checkAktifCalisma+0x7c4>
 8006624:	4b45      	ldr	r3, [pc, #276]	; (800673c <checkAktifCalisma+0x8c0>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f083 0301 	eor.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <checkAktifCalisma+0x7c4>
 8006632:	4b43      	ldr	r3, [pc, #268]	; (8006740 <checkAktifCalisma+0x8c4>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f083 0301 	eor.w	r3, r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006640:	2200      	movs	r2, #0
 8006642:	2120      	movs	r1, #32
 8006644:	483a      	ldr	r0, [pc, #232]	; (8006730 <checkAktifCalisma+0x8b4>)
 8006646:	f002 fe84 	bl	8009352 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800664a:	4b3a      	ldr	r3, [pc, #232]	; (8006734 <checkAktifCalisma+0x8b8>)
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006650:	4b3c      	ldr	r3, [pc, #240]	; (8006744 <checkAktifCalisma+0x8c8>)
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006656:	4b3f      	ldr	r3, [pc, #252]	; (8006754 <checkAktifCalisma+0x8d8>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8088 	bne.w	8006770 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006660:	4b3d      	ldr	r3, [pc, #244]	; (8006758 <checkAktifCalisma+0x8dc>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d003      	beq.n	8006670 <checkAktifCalisma+0x7f4>
 8006668:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <checkAktifCalisma+0x8dc>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d17f      	bne.n	8006770 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006670:	4b32      	ldr	r3, [pc, #200]	; (800673c <checkAktifCalisma+0x8c0>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d07b      	beq.n	8006770 <checkAktifCalisma+0x8f4>
 8006678:	4b31      	ldr	r3, [pc, #196]	; (8006740 <checkAktifCalisma+0x8c4>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d077      	beq.n	8006770 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006680:	2140      	movs	r1, #64	; 0x40
 8006682:	482b      	ldr	r0, [pc, #172]	; (8006730 <checkAktifCalisma+0x8b4>)
 8006684:	f002 fe4e 	bl	8009324 <HAL_GPIO_ReadPin>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d170      	bne.n	8006770 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800668e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006692:	4827      	ldr	r0, [pc, #156]	; (8006730 <checkAktifCalisma+0x8b4>)
 8006694:	f002 fe46 	bl	8009324 <HAL_GPIO_ReadPin>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <checkAktifCalisma+0x82a>
 800669e:	4b2f      	ldr	r3, [pc, #188]	; (800675c <checkAktifCalisma+0x8e0>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d164      	bne.n	8006770 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80066a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066aa:	4823      	ldr	r0, [pc, #140]	; (8006738 <checkAktifCalisma+0x8bc>)
 80066ac:	f002 fe3a 	bl	8009324 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10f      	bne.n	80066d6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80066b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066ba:	481f      	ldr	r0, [pc, #124]	; (8006738 <checkAktifCalisma+0x8bc>)
 80066bc:	f002 fe32 	bl	8009324 <HAL_GPIO_ReadPin>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d107      	bne.n	80066d6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80066c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066ca:	481b      	ldr	r0, [pc, #108]	; (8006738 <checkAktifCalisma+0x8bc>)
 80066cc:	f002 fe2a 	bl	8009324 <HAL_GPIO_ReadPin>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d003      	beq.n	80066de <checkAktifCalisma+0x862>
 80066d6:	4b22      	ldr	r3, [pc, #136]	; (8006760 <checkAktifCalisma+0x8e4>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d048      	beq.n	8006770 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80066de:	4b21      	ldr	r3, [pc, #132]	; (8006764 <checkAktifCalisma+0x8e8>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f083 0301 	eor.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d041      	beq.n	8006770 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <checkAktifCalisma+0x8ec>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f083 0301 	eor.w	r3, r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d03a      	beq.n	8006770 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80066fa:	4b1c      	ldr	r3, [pc, #112]	; (800676c <checkAktifCalisma+0x8f0>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f083 0301 	eor.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d033      	beq.n	8006770 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <checkAktifCalisma+0x8b8>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f083 0301 	eor.w	r3, r3, #1
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02c      	beq.n	8006770 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <checkAktifCalisma+0x8b0>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f083 0301 	eor.w	r3, r3, #1
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d025      	beq.n	8006770 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <checkAktifCalisma+0x8e4>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e024      	b.n	8006776 <checkAktifCalisma+0x8fa>
 800672c:	20000352 	.word	0x20000352
 8006730:	40011000 	.word	0x40011000
 8006734:	20000356 	.word	0x20000356
 8006738:	40010c00 	.word	0x40010c00
 800673c:	2000036e 	.word	0x2000036e
 8006740:	2000036f 	.word	0x2000036f
 8006744:	2000034e 	.word	0x2000034e
 8006748:	2000029c 	.word	0x2000029c
 800674c:	200002a8 	.word	0x200002a8
 8006750:	20000332 	.word	0x20000332
 8006754:	20000339 	.word	0x20000339
 8006758:	2000032b 	.word	0x2000032b
 800675c:	2000032d 	.word	0x2000032d
 8006760:	20000353 	.word	0x20000353
 8006764:	20000351 	.word	0x20000351
 8006768:	20000355 	.word	0x20000355
 800676c:	20000354 	.word	0x20000354
		} else {
			devmotorasagicalisiyor=0;
 8006770:	4b96      	ldr	r3, [pc, #600]	; (80069cc <checkAktifCalisma+0xb50>)
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006776:	4b95      	ldr	r3, [pc, #596]	; (80069cc <checkAktifCalisma+0xb50>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800677e:	2201      	movs	r2, #1
 8006780:	2110      	movs	r1, #16
 8006782:	4893      	ldr	r0, [pc, #588]	; (80069d0 <checkAktifCalisma+0xb54>)
 8006784:	f002 fde5 	bl	8009352 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006788:	4b92      	ldr	r3, [pc, #584]	; (80069d4 <checkAktifCalisma+0xb58>)
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800678e:	4b91      	ldr	r3, [pc, #580]	; (80069d4 <checkAktifCalisma+0xb58>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d024      	beq.n	80067e0 <checkAktifCalisma+0x964>
 8006796:	2140      	movs	r1, #64	; 0x40
 8006798:	488d      	ldr	r0, [pc, #564]	; (80069d0 <checkAktifCalisma+0xb54>)
 800679a:	f002 fdc3 	bl	8009324 <HAL_GPIO_ReadPin>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d007      	beq.n	80067b4 <checkAktifCalisma+0x938>
 80067a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067a8:	4889      	ldr	r0, [pc, #548]	; (80069d0 <checkAktifCalisma+0xb54>)
 80067aa:	f002 fdbb 	bl	8009324 <HAL_GPIO_ReadPin>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d115      	bne.n	80067e0 <checkAktifCalisma+0x964>
 80067b4:	4b88      	ldr	r3, [pc, #544]	; (80069d8 <checkAktifCalisma+0xb5c>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d011      	beq.n	80067e0 <checkAktifCalisma+0x964>
 80067bc:	4b87      	ldr	r3, [pc, #540]	; (80069dc <checkAktifCalisma+0xb60>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <checkAktifCalisma+0x964>
 80067c4:	4b86      	ldr	r3, [pc, #536]	; (80069e0 <checkAktifCalisma+0xb64>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f083 0301 	eor.w	r3, r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d006      	beq.n	80067e0 <checkAktifCalisma+0x964>
			timer2=millis;
 80067d2:	4b84      	ldr	r3, [pc, #528]	; (80069e4 <checkAktifCalisma+0xb68>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a84      	ldr	r2, [pc, #528]	; (80069e8 <checkAktifCalisma+0xb6c>)
 80067d8:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80067da:	4b81      	ldr	r3, [pc, #516]	; (80069e0 <checkAktifCalisma+0xb64>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80067e0:	4b80      	ldr	r3, [pc, #512]	; (80069e4 <checkAktifCalisma+0xb68>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b80      	ldr	r3, [pc, #512]	; (80069e8 <checkAktifCalisma+0xb6c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	4a80      	ldr	r2, [pc, #512]	; (80069ec <checkAktifCalisma+0xb70>)
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d303      	bcc.n	80067fa <checkAktifCalisma+0x97e>
 80067f2:	4b7b      	ldr	r3, [pc, #492]	; (80069e0 <checkAktifCalisma+0xb64>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <checkAktifCalisma+0x99a>
 80067fa:	4b77      	ldr	r3, [pc, #476]	; (80069d8 <checkAktifCalisma+0xb5c>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f083 0301 	eor.w	r3, r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <checkAktifCalisma+0x99a>
 8006808:	4b74      	ldr	r3, [pc, #464]	; (80069dc <checkAktifCalisma+0xb60>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f083 0301 	eor.w	r3, r3, #1
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006816:	2200      	movs	r2, #0
 8006818:	2110      	movs	r1, #16
 800681a:	486d      	ldr	r0, [pc, #436]	; (80069d0 <checkAktifCalisma+0xb54>)
 800681c:	f002 fd99 	bl	8009352 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006820:	4b6c      	ldr	r3, [pc, #432]	; (80069d4 <checkAktifCalisma+0xb58>)
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006826:	4b6e      	ldr	r3, [pc, #440]	; (80069e0 <checkAktifCalisma+0xb64>)
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800682c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006830:	486f      	ldr	r0, [pc, #444]	; (80069f0 <checkAktifCalisma+0xb74>)
 8006832:	f002 fd77 	bl	8009324 <HAL_GPIO_ReadPin>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d120      	bne.n	800687e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800683c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006840:	486b      	ldr	r0, [pc, #428]	; (80069f0 <checkAktifCalisma+0xb74>)
 8006842:	f002 fd6f 	bl	8009324 <HAL_GPIO_ReadPin>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d118      	bne.n	800687e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800684c:	2104      	movs	r1, #4
 800684e:	4868      	ldr	r0, [pc, #416]	; (80069f0 <checkAktifCalisma+0xb74>)
 8006850:	f002 fd68 	bl	8009324 <HAL_GPIO_ReadPin>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d111      	bne.n	800687e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800685a:	2102      	movs	r1, #2
 800685c:	4864      	ldr	r0, [pc, #400]	; (80069f0 <checkAktifCalisma+0xb74>)
 800685e:	f002 fd61 	bl	8009324 <HAL_GPIO_ReadPin>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006868:	2101      	movs	r1, #1
 800686a:	4861      	ldr	r0, [pc, #388]	; (80069f0 <checkAktifCalisma+0xb74>)
 800686c:	f002 fd5a 	bl	8009324 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <checkAktifCalisma+0xa02>
			makineStop=1;
 8006876:	4b5f      	ldr	r3, [pc, #380]	; (80069f4 <checkAktifCalisma+0xb78>)
 8006878:	2201      	movs	r2, #1
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e002      	b.n	8006884 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800687e:	4b5d      	ldr	r3, [pc, #372]	; (80069f4 <checkAktifCalisma+0xb78>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006884:	4b5c      	ldr	r3, [pc, #368]	; (80069f8 <checkAktifCalisma+0xb7c>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d144      	bne.n	8006916 <checkAktifCalisma+0xa9a>
 800688c:	4b5b      	ldr	r3, [pc, #364]	; (80069fc <checkAktifCalisma+0xb80>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d003      	beq.n	800689c <checkAktifCalisma+0xa20>
 8006894:	4b59      	ldr	r3, [pc, #356]	; (80069fc <checkAktifCalisma+0xb80>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d13c      	bne.n	8006916 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	484c      	ldr	r0, [pc, #304]	; (80069d0 <checkAktifCalisma+0xb54>)
 80068a0:	f002 fd40 	bl	8009324 <HAL_GPIO_ReadPin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <checkAktifCalisma+0xa36>
 80068aa:	4b55      	ldr	r3, [pc, #340]	; (8006a00 <checkAktifCalisma+0xb84>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <checkAktifCalisma+0xa4e>
 80068b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068b6:	484e      	ldr	r0, [pc, #312]	; (80069f0 <checkAktifCalisma+0xb74>)
 80068b8:	f002 fd34 	bl	8009324 <HAL_GPIO_ReadPin>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d129      	bne.n	8006916 <checkAktifCalisma+0xa9a>
 80068c2:	4b4f      	ldr	r3, [pc, #316]	; (8006a00 <checkAktifCalisma+0xb84>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d125      	bne.n	8006916 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80068ca:	2104      	movs	r1, #4
 80068cc:	4840      	ldr	r0, [pc, #256]	; (80069d0 <checkAktifCalisma+0xb54>)
 80068ce:	f002 fd29 	bl	8009324 <HAL_GPIO_ReadPin>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d003      	beq.n	80068e0 <checkAktifCalisma+0xa64>
 80068d8:	4b4a      	ldr	r3, [pc, #296]	; (8006a04 <checkAktifCalisma+0xb88>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80068e0:	2102      	movs	r1, #2
 80068e2:	483b      	ldr	r0, [pc, #236]	; (80069d0 <checkAktifCalisma+0xb54>)
 80068e4:	f002 fd1e 	bl	8009324 <HAL_GPIO_ReadPin>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d113      	bne.n	8006916 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80068ee:	4b46      	ldr	r3, [pc, #280]	; (8006a08 <checkAktifCalisma+0xb8c>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f083 0301 	eor.w	r3, r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00c      	beq.n	8006916 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80068fc:	4b3d      	ldr	r3, [pc, #244]	; (80069f4 <checkAktifCalisma+0xb78>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006904:	4b41      	ldr	r3, [pc, #260]	; (8006a0c <checkAktifCalisma+0xb90>)
 8006906:	2201      	movs	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800690a:	4b36      	ldr	r3, [pc, #216]	; (80069e4 <checkAktifCalisma+0xb68>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a40      	ldr	r2, [pc, #256]	; (8006a10 <checkAktifCalisma+0xb94>)
 8006910:	6013      	str	r3, [r2, #0]
			bekle();
 8006912:	f7ff f887 	bl	8005a24 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006916:	4b33      	ldr	r3, [pc, #204]	; (80069e4 <checkAktifCalisma+0xb68>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b3d      	ldr	r3, [pc, #244]	; (8006a10 <checkAktifCalisma+0xb94>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	4a3c      	ldr	r2, [pc, #240]	; (8006a14 <checkAktifCalisma+0xb98>)
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	4293      	cmp	r3, r2
 8006926:	d211      	bcs.n	800694c <checkAktifCalisma+0xad0>
 8006928:	2104      	movs	r1, #4
 800692a:	4829      	ldr	r0, [pc, #164]	; (80069d0 <checkAktifCalisma+0xb54>)
 800692c:	f002 fcfa 	bl	8009324 <HAL_GPIO_ReadPin>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <checkAktifCalisma+0xad0>
 8006936:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <checkAktifCalisma+0xb88>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <checkAktifCalisma+0xad0>
 800693e:	4b2d      	ldr	r3, [pc, #180]	; (80069f4 <checkAktifCalisma+0xb78>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	f083 0301 	eor.w	r3, r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800694c:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <checkAktifCalisma+0xb90>)
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006952:	4b29      	ldr	r3, [pc, #164]	; (80069f8 <checkAktifCalisma+0xb7c>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d160      	bne.n	8006a1c <checkAktifCalisma+0xba0>
 800695a:	4b28      	ldr	r3, [pc, #160]	; (80069fc <checkAktifCalisma+0xb80>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d003      	beq.n	800696a <checkAktifCalisma+0xaee>
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <checkAktifCalisma+0xb80>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b03      	cmp	r3, #3
 8006968:	d158      	bne.n	8006a1c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800696a:	2104      	movs	r1, #4
 800696c:	4818      	ldr	r0, [pc, #96]	; (80069d0 <checkAktifCalisma+0xb54>)
 800696e:	f002 fcd9 	bl	8009324 <HAL_GPIO_ReadPin>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d003      	beq.n	8006980 <checkAktifCalisma+0xb04>
 8006978:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <checkAktifCalisma+0xb88>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d14d      	bne.n	8006a1c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006980:	2102      	movs	r1, #2
 8006982:	4813      	ldr	r0, [pc, #76]	; (80069d0 <checkAktifCalisma+0xb54>)
 8006984:	f002 fcce 	bl	8009324 <HAL_GPIO_ReadPin>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d146      	bne.n	8006a1c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	480f      	ldr	r0, [pc, #60]	; (80069d0 <checkAktifCalisma+0xb54>)
 8006992:	f002 fcc7 	bl	8009324 <HAL_GPIO_ReadPin>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <checkAktifCalisma+0xb28>
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <checkAktifCalisma+0xb84>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <checkAktifCalisma+0xb40>
 80069a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069a8:	4811      	ldr	r0, [pc, #68]	; (80069f0 <checkAktifCalisma+0xb74>)
 80069aa:	f002 fcbb 	bl	8009324 <HAL_GPIO_ReadPin>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d133      	bne.n	8006a1c <checkAktifCalisma+0xba0>
 80069b4:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <checkAktifCalisma+0xb84>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d12f      	bne.n	8006a1c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80069bc:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <checkAktifCalisma+0xb78>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d02b      	beq.n	8006a1c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80069c4:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <checkAktifCalisma+0xb9c>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	e02a      	b.n	8006a22 <checkAktifCalisma+0xba6>
 80069cc:	20000353 	.word	0x20000353
 80069d0:	40011000 	.word	0x40011000
 80069d4:	20000357 	.word	0x20000357
 80069d8:	2000036e 	.word	0x2000036e
 80069dc:	2000036f 	.word	0x2000036f
 80069e0:	2000034f 	.word	0x2000034f
 80069e4:	2000029c 	.word	0x2000029c
 80069e8:	200002a8 	.word	0x200002a8
 80069ec:	20000332 	.word	0x20000332
 80069f0:	40010c00 	.word	0x40010c00
 80069f4:	2000035e 	.word	0x2000035e
 80069f8:	20000325 	.word	0x20000325
 80069fc:	20000324 	.word	0x20000324
 8006a00:	20000328 	.word	0x20000328
 8006a04:	20000322 	.word	0x20000322
 8006a08:	2000034b 	.word	0x2000034b
 8006a0c:	2000035f 	.word	0x2000035f
 8006a10:	200002a0 	.word	0x200002a0
 8006a14:	20000335 	.word	0x20000335
 8006a18:	20000360 	.word	0x20000360
		} else {
			kapi1butonkontrol=0;
 8006a1c:	4b8b      	ldr	r3, [pc, #556]	; (8006c4c <checkAktifCalisma+0xdd0>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006a22:	4b8b      	ldr	r3, [pc, #556]	; (8006c50 <checkAktifCalisma+0xdd4>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d121      	bne.n	8006a6e <checkAktifCalisma+0xbf2>
 8006a2a:	4b8a      	ldr	r3, [pc, #552]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d003      	beq.n	8006a3a <checkAktifCalisma+0xbbe>
 8006a32:	4b88      	ldr	r3, [pc, #544]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d119      	bne.n	8006a6e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	4886      	ldr	r0, [pc, #536]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006a3e:	f002 fc71 	bl	8009324 <HAL_GPIO_ReadPin>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d003      	beq.n	8006a50 <checkAktifCalisma+0xbd4>
 8006a48:	4b84      	ldr	r3, [pc, #528]	; (8006c5c <checkAktifCalisma+0xde0>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10e      	bne.n	8006a6e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006a50:	2102      	movs	r1, #2
 8006a52:	4881      	ldr	r0, [pc, #516]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006a54:	f002 fc66 	bl	8009324 <HAL_GPIO_ReadPin>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006a5e:	4b80      	ldr	r3, [pc, #512]	; (8006c60 <checkAktifCalisma+0xde4>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006a66:	4b7f      	ldr	r3, [pc, #508]	; (8006c64 <checkAktifCalisma+0xde8>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e002      	b.n	8006a74 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006a6e:	4b7d      	ldr	r3, [pc, #500]	; (8006c64 <checkAktifCalisma+0xde8>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006a74:	4b75      	ldr	r3, [pc, #468]	; (8006c4c <checkAktifCalisma+0xdd0>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d107      	bne.n	8006a8c <checkAktifCalisma+0xc10>
 8006a7c:	4b79      	ldr	r3, [pc, #484]	; (8006c64 <checkAktifCalisma+0xde8>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <checkAktifCalisma+0xc10>
 8006a84:	4b78      	ldr	r3, [pc, #480]	; (8006c68 <checkAktifCalisma+0xdec>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	4876      	ldr	r0, [pc, #472]	; (8006c6c <checkAktifCalisma+0xdf0>)
 8006a92:	f002 fc5e 	bl	8009352 <HAL_GPIO_WritePin>
 8006a96:	e004      	b.n	8006aa2 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2180      	movs	r1, #128	; 0x80
 8006a9c:	4873      	ldr	r0, [pc, #460]	; (8006c6c <checkAktifCalisma+0xdf0>)
 8006a9e:	f002 fc58 	bl	8009352 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006aa2:	4b73      	ldr	r3, [pc, #460]	; (8006c70 <checkAktifCalisma+0xdf4>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d141      	bne.n	8006b2e <checkAktifCalisma+0xcb2>
 8006aaa:	4b6a      	ldr	r3, [pc, #424]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d003      	beq.n	8006aba <checkAktifCalisma+0xc3e>
 8006ab2:	4b68      	ldr	r3, [pc, #416]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d139      	bne.n	8006b2e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006abe:	4866      	ldr	r0, [pc, #408]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006ac0:	f002 fc30 	bl	8009324 <HAL_GPIO_ReadPin>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <checkAktifCalisma+0xc56>
 8006aca:	4b6a      	ldr	r3, [pc, #424]	; (8006c74 <checkAktifCalisma+0xdf8>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <checkAktifCalisma+0xc6e>
 8006ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ad6:	4868      	ldr	r0, [pc, #416]	; (8006c78 <checkAktifCalisma+0xdfc>)
 8006ad8:	f002 fc24 	bl	8009324 <HAL_GPIO_ReadPin>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d125      	bne.n	8006b2e <checkAktifCalisma+0xcb2>
 8006ae2:	4b64      	ldr	r3, [pc, #400]	; (8006c74 <checkAktifCalisma+0xdf8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d121      	bne.n	8006b2e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006aea:	2102      	movs	r1, #2
 8006aec:	485a      	ldr	r0, [pc, #360]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006aee:	f002 fc19 	bl	8009324 <HAL_GPIO_ReadPin>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d11a      	bne.n	8006b2e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006af8:	2104      	movs	r1, #4
 8006afa:	4857      	ldr	r0, [pc, #348]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006afc:	f002 fc12 	bl	8009324 <HAL_GPIO_ReadPin>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d113      	bne.n	8006b2e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8006b06:	4b56      	ldr	r3, [pc, #344]	; (8006c60 <checkAktifCalisma+0xde4>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00f      	beq.n	8006b2e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8006b0e:	4b5b      	ldr	r3, [pc, #364]	; (8006c7c <checkAktifCalisma+0xe00>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8006b1c:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <checkAktifCalisma+0xe04>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006b22:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <checkAktifCalisma+0xe08>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a58      	ldr	r2, [pc, #352]	; (8006c88 <checkAktifCalisma+0xe0c>)
 8006b28:	6013      	str	r3, [r2, #0]
			bekle();
 8006b2a:	f7fe ff7b 	bl	8005a24 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006b2e:	4b55      	ldr	r3, [pc, #340]	; (8006c84 <checkAktifCalisma+0xe08>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <checkAktifCalisma+0xe0c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	4a54      	ldr	r2, [pc, #336]	; (8006c8c <checkAktifCalisma+0xe10>)
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d20d      	bcs.n	8006b5c <checkAktifCalisma+0xce0>
 8006b40:	2102      	movs	r1, #2
 8006b42:	4845      	ldr	r0, [pc, #276]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006b44:	f002 fbee 	bl	8009324 <HAL_GPIO_ReadPin>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d006      	beq.n	8006b5c <checkAktifCalisma+0xce0>
 8006b4e:	4b44      	ldr	r3, [pc, #272]	; (8006c60 <checkAktifCalisma+0xde4>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f083 0301 	eor.w	r3, r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006b5c:	4b48      	ldr	r3, [pc, #288]	; (8006c80 <checkAktifCalisma+0xe04>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006b62:	4b43      	ldr	r3, [pc, #268]	; (8006c70 <checkAktifCalisma+0xdf4>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d135      	bne.n	8006bd6 <checkAktifCalisma+0xd5a>
 8006b6a:	4b3a      	ldr	r3, [pc, #232]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d003      	beq.n	8006b7a <checkAktifCalisma+0xcfe>
 8006b72:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d12d      	bne.n	8006bd6 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b7e:	4836      	ldr	r0, [pc, #216]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006b80:	f002 fbd0 	bl	8009324 <HAL_GPIO_ReadPin>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <checkAktifCalisma+0xd16>
 8006b8a:	4b3a      	ldr	r3, [pc, #232]	; (8006c74 <checkAktifCalisma+0xdf8>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <checkAktifCalisma+0xd2e>
 8006b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b96:	4838      	ldr	r0, [pc, #224]	; (8006c78 <checkAktifCalisma+0xdfc>)
 8006b98:	f002 fbc4 	bl	8009324 <HAL_GPIO_ReadPin>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d119      	bne.n	8006bd6 <checkAktifCalisma+0xd5a>
 8006ba2:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <checkAktifCalisma+0xdf8>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d115      	bne.n	8006bd6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006baa:	2102      	movs	r1, #2
 8006bac:	482a      	ldr	r0, [pc, #168]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006bae:	f002 fbb9 	bl	8009324 <HAL_GPIO_ReadPin>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10e      	bne.n	8006bd6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006bb8:	2104      	movs	r1, #4
 8006bba:	4827      	ldr	r0, [pc, #156]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006bbc:	f002 fbb2 	bl	8009324 <HAL_GPIO_ReadPin>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <checkAktifCalisma+0xde4>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8006bce:	4b30      	ldr	r3, [pc, #192]	; (8006c90 <checkAktifCalisma+0xe14>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	e002      	b.n	8006bdc <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8006bd6:	4b2e      	ldr	r3, [pc, #184]	; (8006c90 <checkAktifCalisma+0xe14>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006bdc:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <checkAktifCalisma+0xdf4>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d11d      	bne.n	8006c20 <checkAktifCalisma+0xda4>
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d003      	beq.n	8006bf4 <checkAktifCalisma+0xd78>
 8006bec:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <checkAktifCalisma+0xdd8>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d115      	bne.n	8006c20 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	4818      	ldr	r0, [pc, #96]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006bf8:	f002 fb94 	bl	8009324 <HAL_GPIO_ReadPin>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10e      	bne.n	8006c20 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006c02:	2104      	movs	r1, #4
 8006c04:	4814      	ldr	r0, [pc, #80]	; (8006c58 <checkAktifCalisma+0xddc>)
 8006c06:	f002 fb8d 	bl	8009324 <HAL_GPIO_ReadPin>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d107      	bne.n	8006c20 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8006c10:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <checkAktifCalisma+0xde4>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <checkAktifCalisma+0xe18>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8006c20:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <checkAktifCalisma+0xe18>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <checkAktifCalisma+0xe14>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <checkAktifCalisma+0xdc2>
 8006c2e:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <checkAktifCalisma+0xe18>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <checkAktifCalisma+0xdc2>
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <checkAktifCalisma+0xe04>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02c      	beq.n	8006c98 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006c3e:	2201      	movs	r2, #1
 8006c40:	2140      	movs	r1, #64	; 0x40
 8006c42:	480a      	ldr	r0, [pc, #40]	; (8006c6c <checkAktifCalisma+0xdf0>)
 8006c44:	f002 fb85 	bl	8009352 <HAL_GPIO_WritePin>
 8006c48:	e02b      	b.n	8006ca2 <checkAktifCalisma+0xe26>
 8006c4a:	bf00      	nop
 8006c4c:	20000360 	.word	0x20000360
 8006c50:	20000325 	.word	0x20000325
 8006c54:	20000324 	.word	0x20000324
 8006c58:	40011000 	.word	0x40011000
 8006c5c:	20000322 	.word	0x20000322
 8006c60:	2000035e 	.word	0x2000035e
 8006c64:	20000361 	.word	0x20000361
 8006c68:	2000035f 	.word	0x2000035f
 8006c6c:	40010800 	.word	0x40010800
 8006c70:	20000326 	.word	0x20000326
 8006c74:	20000328 	.word	0x20000328
 8006c78:	40010c00 	.word	0x40010c00
 8006c7c:	2000034b 	.word	0x2000034b
 8006c80:	20000362 	.word	0x20000362
 8006c84:	2000029c 	.word	0x2000029c
 8006c88:	200002a0 	.word	0x200002a0
 8006c8c:	20000336 	.word	0x20000336
 8006c90:	20000363 	.word	0x20000363
 8006c94:	20000364 	.word	0x20000364
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2140      	movs	r1, #64	; 0x40
 8006c9c:	488d      	ldr	r0, [pc, #564]	; (8006ed4 <checkAktifCalisma+0x1058>)
 8006c9e:	f002 fb58 	bl	8009352 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006ca2:	4b8d      	ldr	r3, [pc, #564]	; (8006ed8 <checkAktifCalisma+0x105c>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <checkAktifCalisma+0xe36>
 8006caa:	4b8b      	ldr	r3, [pc, #556]	; (8006ed8 <checkAktifCalisma+0x105c>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d115      	bne.n	8006cde <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006cb2:	2104      	movs	r1, #4
 8006cb4:	4889      	ldr	r0, [pc, #548]	; (8006edc <checkAktifCalisma+0x1060>)
 8006cb6:	f002 fb35 	bl	8009324 <HAL_GPIO_ReadPin>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d003      	beq.n	8006cc8 <checkAktifCalisma+0xe4c>
 8006cc0:	4b87      	ldr	r3, [pc, #540]	; (8006ee0 <checkAktifCalisma+0x1064>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006cc8:	2102      	movs	r1, #2
 8006cca:	4884      	ldr	r0, [pc, #528]	; (8006edc <checkAktifCalisma+0x1060>)
 8006ccc:	f002 fb2a 	bl	8009324 <HAL_GPIO_ReadPin>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8006cd6:	4b83      	ldr	r3, [pc, #524]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	e002      	b.n	8006ce4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8006cde:	4b81      	ldr	r3, [pc, #516]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006ce4:	4b7c      	ldr	r3, [pc, #496]	; (8006ed8 <checkAktifCalisma+0x105c>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d003      	beq.n	8006cf4 <checkAktifCalisma+0xe78>
 8006cec:	4b7a      	ldr	r3, [pc, #488]	; (8006ed8 <checkAktifCalisma+0x105c>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d111      	bne.n	8006d18 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	4879      	ldr	r0, [pc, #484]	; (8006edc <checkAktifCalisma+0x1060>)
 8006cf8:	f002 fb14 	bl	8009324 <HAL_GPIO_ReadPin>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10a      	bne.n	8006d18 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006d02:	2104      	movs	r1, #4
 8006d04:	4875      	ldr	r0, [pc, #468]	; (8006edc <checkAktifCalisma+0x1060>)
 8006d06:	f002 fb0d 	bl	8009324 <HAL_GPIO_ReadPin>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8006d10:	4b75      	ldr	r3, [pc, #468]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8006d18:	4b73      	ldr	r3, [pc, #460]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8006d1e:	4b71      	ldr	r3, [pc, #452]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00f      	beq.n	8006d46 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8006d26:	4b71      	ldr	r3, [pc, #452]	; (8006eec <checkAktifCalisma+0x1070>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10b      	bne.n	8006d46 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d32:	486f      	ldr	r0, [pc, #444]	; (8006ef0 <checkAktifCalisma+0x1074>)
 8006d34:	f002 faf6 	bl	8009324 <HAL_GPIO_ReadPin>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006d3e:	4b6d      	ldr	r3, [pc, #436]	; (8006ef4 <checkAktifCalisma+0x1078>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e002      	b.n	8006d4c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8006d46:	4b6b      	ldr	r3, [pc, #428]	; (8006ef4 <checkAktifCalisma+0x1078>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006d4c:	4b66      	ldr	r3, [pc, #408]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00f      	beq.n	8006d74 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006d54:	4b65      	ldr	r3, [pc, #404]	; (8006eec <checkAktifCalisma+0x1070>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d10b      	bne.n	8006d74 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d60:	4863      	ldr	r0, [pc, #396]	; (8006ef0 <checkAktifCalisma+0x1074>)
 8006d62:	f002 fadf 	bl	8009324 <HAL_GPIO_ReadPin>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006d6c:	4b62      	ldr	r3, [pc, #392]	; (8006ef8 <checkAktifCalisma+0x107c>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006d74:	4b60      	ldr	r3, [pc, #384]	; (8006ef8 <checkAktifCalisma+0x107c>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006d7a:	4b60      	ldr	r3, [pc, #384]	; (8006efc <checkAktifCalisma+0x1080>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d137      	bne.n	8006df2 <checkAktifCalisma+0xf76>
 8006d82:	4b5f      	ldr	r3, [pc, #380]	; (8006f00 <checkAktifCalisma+0x1084>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d003      	beq.n	8006d92 <checkAktifCalisma+0xf16>
 8006d8a:	4b5d      	ldr	r3, [pc, #372]	; (8006f00 <checkAktifCalisma+0x1084>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d12f      	bne.n	8006df2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006d92:	4b54      	ldr	r3, [pc, #336]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <checkAktifCalisma+0xf26>
 8006d9a:	4b53      	ldr	r3, [pc, #332]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d027      	beq.n	8006df2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006da6:	484d      	ldr	r0, [pc, #308]	; (8006edc <checkAktifCalisma+0x1060>)
 8006da8:	f002 fabc 	bl	8009324 <HAL_GPIO_ReadPin>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <checkAktifCalisma+0xf3e>
 8006db2:	4b4e      	ldr	r3, [pc, #312]	; (8006eec <checkAktifCalisma+0x1070>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006dba:	4b4e      	ldr	r3, [pc, #312]	; (8006ef4 <checkAktifCalisma+0x1078>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d103      	bne.n	8006dca <checkAktifCalisma+0xf4e>
 8006dc2:	4b4d      	ldr	r3, [pc, #308]	; (8006ef8 <checkAktifCalisma+0x107c>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d013      	beq.n	8006df2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006dca:	4b4e      	ldr	r3, [pc, #312]	; (8006f04 <checkAktifCalisma+0x1088>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00f      	beq.n	8006df2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8006dd2:	4b4d      	ldr	r3, [pc, #308]	; (8006f08 <checkAktifCalisma+0x108c>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f083 0301 	eor.w	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006de0:	4b4a      	ldr	r3, [pc, #296]	; (8006f0c <checkAktifCalisma+0x1090>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006de6:	4b4a      	ldr	r3, [pc, #296]	; (8006f10 <checkAktifCalisma+0x1094>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a4a      	ldr	r2, [pc, #296]	; (8006f14 <checkAktifCalisma+0x1098>)
 8006dec:	6013      	str	r3, [r2, #0]
			bekle();
 8006dee:	f7fe fe19 	bl	8005a24 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <checkAktifCalisma+0x1094>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b47      	ldr	r3, [pc, #284]	; (8006f14 <checkAktifCalisma+0x1098>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	4a46      	ldr	r2, [pc, #280]	; (8006f18 <checkAktifCalisma+0x109c>)
 8006dfe:	7812      	ldrb	r2, [r2, #0]
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d214      	bcs.n	8006e2e <checkAktifCalisma+0xfb2>
 8006e04:	4b37      	ldr	r3, [pc, #220]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f083 0301 	eor.w	r3, r3, #1
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <checkAktifCalisma+0xfa4>
 8006e12:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f083 0301 	eor.w	r3, r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <checkAktifCalisma+0xfb2>
 8006e20:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <checkAktifCalisma+0x1088>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f083 0301 	eor.w	r3, r3, #1
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006e2e:	4b37      	ldr	r3, [pc, #220]	; (8006f0c <checkAktifCalisma+0x1090>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006e34:	4b31      	ldr	r3, [pc, #196]	; (8006efc <checkAktifCalisma+0x1080>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d12b      	bne.n	8006e94 <checkAktifCalisma+0x1018>
 8006e3c:	4b30      	ldr	r3, [pc, #192]	; (8006f00 <checkAktifCalisma+0x1084>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d003      	beq.n	8006e4c <checkAktifCalisma+0xfd0>
 8006e44:	4b2e      	ldr	r3, [pc, #184]	; (8006f00 <checkAktifCalisma+0x1084>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d123      	bne.n	8006e94 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006e4c:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <checkAktifCalisma+0xfe0>
 8006e54:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01b      	beq.n	8006e94 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e60:	481e      	ldr	r0, [pc, #120]	; (8006edc <checkAktifCalisma+0x1060>)
 8006e62:	f002 fa5f 	bl	8009324 <HAL_GPIO_ReadPin>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <checkAktifCalisma+0xff8>
 8006e6c:	4b1f      	ldr	r3, [pc, #124]	; (8006eec <checkAktifCalisma+0x1070>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <checkAktifCalisma+0x1078>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <checkAktifCalisma+0x1008>
 8006e7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <checkAktifCalisma+0x107c>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006e84:	4b1f      	ldr	r3, [pc, #124]	; (8006f04 <checkAktifCalisma+0x1088>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006e8c:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <checkAktifCalisma+0x10a0>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e002      	b.n	8006e9a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006e94:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <checkAktifCalisma+0x10a0>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006e9a:	4b18      	ldr	r3, [pc, #96]	; (8006efc <checkAktifCalisma+0x1080>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d140      	bne.n	8006f24 <checkAktifCalisma+0x10a8>
 8006ea2:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <checkAktifCalisma+0x1084>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d003      	beq.n	8006eb2 <checkAktifCalisma+0x1036>
 8006eaa:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <checkAktifCalisma+0x1084>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d138      	bne.n	8006f24 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006eb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <checkAktifCalisma+0x1068>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <checkAktifCalisma+0x1046>
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <checkAktifCalisma+0x106c>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d030      	beq.n	8006f24 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <checkAktifCalisma+0x1088>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02c      	beq.n	8006f24 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <checkAktifCalisma+0x10a4>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e02b      	b.n	8006f2a <checkAktifCalisma+0x10ae>
 8006ed2:	bf00      	nop
 8006ed4:	40010800 	.word	0x40010800
 8006ed8:	20000329 	.word	0x20000329
 8006edc:	40011000 	.word	0x40011000
 8006ee0:	20000322 	.word	0x20000322
 8006ee4:	20000368 	.word	0x20000368
 8006ee8:	20000369 	.word	0x20000369
 8006eec:	20000328 	.word	0x20000328
 8006ef0:	40010c00 	.word	0x40010c00
 8006ef4:	20000378 	.word	0x20000378
 8006ef8:	20000379 	.word	0x20000379
 8006efc:	20000327 	.word	0x20000327
 8006f00:	20000324 	.word	0x20000324
 8006f04:	2000035e 	.word	0x2000035e
 8006f08:	2000034b 	.word	0x2000034b
 8006f0c:	20000365 	.word	0x20000365
 8006f10:	2000029c 	.word	0x2000029c
 8006f14:	200002a0 	.word	0x200002a0
 8006f18:	20000337 	.word	0x20000337
 8006f1c:	20000366 	.word	0x20000366
 8006f20:	20000367 	.word	0x20000367
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006f24:	4b8b      	ldr	r3, [pc, #556]	; (8007154 <checkAktifCalisma+0x12d8>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006f2a:	4b8b      	ldr	r3, [pc, #556]	; (8007158 <checkAktifCalisma+0x12dc>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d107      	bne.n	8006f42 <checkAktifCalisma+0x10c6>
 8006f32:	4b8a      	ldr	r3, [pc, #552]	; (800715c <checkAktifCalisma+0x12e0>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <checkAktifCalisma+0x10c6>
 8006f3a:	4b86      	ldr	r3, [pc, #536]	; (8007154 <checkAktifCalisma+0x12d8>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006f42:	2201      	movs	r2, #1
 8006f44:	2120      	movs	r1, #32
 8006f46:	4886      	ldr	r0, [pc, #536]	; (8007160 <checkAktifCalisma+0x12e4>)
 8006f48:	f002 fa03 	bl	8009352 <HAL_GPIO_WritePin>
 8006f4c:	e004      	b.n	8006f58 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2120      	movs	r1, #32
 8006f52:	4883      	ldr	r0, [pc, #524]	; (8007160 <checkAktifCalisma+0x12e4>)
 8006f54:	f002 f9fd 	bl	8009352 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006f58:	4b82      	ldr	r3, [pc, #520]	; (8007164 <checkAktifCalisma+0x12e8>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <checkAktifCalisma+0x1102>
 8006f60:	2102      	movs	r1, #2
 8006f62:	4881      	ldr	r0, [pc, #516]	; (8007168 <checkAktifCalisma+0x12ec>)
 8006f64:	f002 f9de 	bl	8009324 <HAL_GPIO_ReadPin>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d107      	bne.n	8006f7e <checkAktifCalisma+0x1102>
 8006f6e:	4b7f      	ldr	r3, [pc, #508]	; (800716c <checkAktifCalisma+0x12f0>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <checkAktifCalisma+0x1102>
 8006f76:	4b7e      	ldr	r3, [pc, #504]	; (8007170 <checkAktifCalisma+0x12f4>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d112      	bne.n	8006fa4 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006f7e:	4b7d      	ldr	r3, [pc, #500]	; (8007174 <checkAktifCalisma+0x12f8>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d066      	beq.n	8007054 <checkAktifCalisma+0x11d8>
 8006f86:	2104      	movs	r1, #4
 8006f88:	4877      	ldr	r0, [pc, #476]	; (8007168 <checkAktifCalisma+0x12ec>)
 8006f8a:	f002 f9cb 	bl	8009324 <HAL_GPIO_ReadPin>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d15f      	bne.n	8007054 <checkAktifCalisma+0x11d8>
 8006f94:	4b75      	ldr	r3, [pc, #468]	; (800716c <checkAktifCalisma+0x12f0>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05b      	beq.n	8007054 <checkAktifCalisma+0x11d8>
 8006f9c:	4b74      	ldr	r3, [pc, #464]	; (8007170 <checkAktifCalisma+0x12f4>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d057      	beq.n	8007054 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006fa4:	4b74      	ldr	r3, [pc, #464]	; (8007178 <checkAktifCalisma+0x12fc>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	4b72      	ldr	r3, [pc, #456]	; (8007178 <checkAktifCalisma+0x12fc>)
 8006fae:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006fb0:	4b71      	ldr	r3, [pc, #452]	; (8007178 <checkAktifCalisma+0x12fc>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b09      	cmp	r3, #9
 8006fb6:	d908      	bls.n	8006fca <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006fb8:	4b6f      	ldr	r3, [pc, #444]	; (8007178 <checkAktifCalisma+0x12fc>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006fbe:	4b6f      	ldr	r3, [pc, #444]	; (800717c <checkAktifCalisma+0x1300>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	4b6d      	ldr	r3, [pc, #436]	; (800717c <checkAktifCalisma+0x1300>)
 8006fc8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006fca:	4b6c      	ldr	r3, [pc, #432]	; (800717c <checkAktifCalisma+0x1300>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d908      	bls.n	8006fe4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006fd2:	4b6a      	ldr	r3, [pc, #424]	; (800717c <checkAktifCalisma+0x1300>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006fd8:	4b69      	ldr	r3, [pc, #420]	; (8007180 <checkAktifCalisma+0x1304>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	4b67      	ldr	r3, [pc, #412]	; (8007180 <checkAktifCalisma+0x1304>)
 8006fe2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006fe4:	4b66      	ldr	r3, [pc, #408]	; (8007180 <checkAktifCalisma+0x1304>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b09      	cmp	r3, #9
 8006fea:	d908      	bls.n	8006ffe <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006fec:	4b64      	ldr	r3, [pc, #400]	; (8007180 <checkAktifCalisma+0x1304>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006ff2:	4b64      	ldr	r3, [pc, #400]	; (8007184 <checkAktifCalisma+0x1308>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4b62      	ldr	r3, [pc, #392]	; (8007184 <checkAktifCalisma+0x1308>)
 8006ffc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006ffe:	4b61      	ldr	r3, [pc, #388]	; (8007184 <checkAktifCalisma+0x1308>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b09      	cmp	r3, #9
 8007004:	d908      	bls.n	8007018 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007006:	4b5f      	ldr	r3, [pc, #380]	; (8007184 <checkAktifCalisma+0x1308>)
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 800700c:	4b5e      	ldr	r3, [pc, #376]	; (8007188 <checkAktifCalisma+0x130c>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	b2da      	uxtb	r2, r3
 8007014:	4b5c      	ldr	r3, [pc, #368]	; (8007188 <checkAktifCalisma+0x130c>)
 8007016:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007018:	4b5b      	ldr	r3, [pc, #364]	; (8007188 <checkAktifCalisma+0x130c>)
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	4b5b      	ldr	r3, [pc, #364]	; (800718c <checkAktifCalisma+0x1310>)
 800701e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007022:	4b58      	ldr	r3, [pc, #352]	; (8007184 <checkAktifCalisma+0x1308>)
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	4b59      	ldr	r3, [pc, #356]	; (800718c <checkAktifCalisma+0x1310>)
 8007028:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800702a:	4b55      	ldr	r3, [pc, #340]	; (8007180 <checkAktifCalisma+0x1304>)
 800702c:	781a      	ldrb	r2, [r3, #0]
 800702e:	4b57      	ldr	r3, [pc, #348]	; (800718c <checkAktifCalisma+0x1310>)
 8007030:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007032:	4b52      	ldr	r3, [pc, #328]	; (800717c <checkAktifCalisma+0x1300>)
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	4b55      	ldr	r3, [pc, #340]	; (800718c <checkAktifCalisma+0x1310>)
 8007038:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800703a:	4b4f      	ldr	r3, [pc, #316]	; (8007178 <checkAktifCalisma+0x12fc>)
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	4b53      	ldr	r3, [pc, #332]	; (800718c <checkAktifCalisma+0x1310>)
 8007040:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007042:	4b53      	ldr	r3, [pc, #332]	; (8007190 <checkAktifCalisma+0x1314>)
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007048:	4b46      	ldr	r3, [pc, #280]	; (8007164 <checkAktifCalisma+0x12e8>)
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800704e:	4b49      	ldr	r3, [pc, #292]	; (8007174 <checkAktifCalisma+0x12f8>)
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007058:	484e      	ldr	r0, [pc, #312]	; (8007194 <checkAktifCalisma+0x1318>)
 800705a:	f002 f963 	bl	8009324 <HAL_GPIO_ReadPin>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d016      	beq.n	8007092 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007068:	484a      	ldr	r0, [pc, #296]	; (8007194 <checkAktifCalisma+0x1318>)
 800706a:	f002 f95b 	bl	8009324 <HAL_GPIO_ReadPin>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00e      	beq.n	8007092 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007078:	4846      	ldr	r0, [pc, #280]	; (8007194 <checkAktifCalisma+0x1318>)
 800707a:	f002 f953 	bl	8009324 <HAL_GPIO_ReadPin>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d006      	beq.n	8007092 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007084:	2140      	movs	r1, #64	; 0x40
 8007086:	4838      	ldr	r0, [pc, #224]	; (8007168 <checkAktifCalisma+0x12ec>)
 8007088:	f002 f94c 	bl	8009324 <HAL_GPIO_ReadPin>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d103      	bne.n	800709a <checkAktifCalisma+0x121e>
			startBasili=1;
 8007092:	4b41      	ldr	r3, [pc, #260]	; (8007198 <checkAktifCalisma+0x131c>)
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e002      	b.n	80070a0 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800709a:	4b3f      	ldr	r3, [pc, #252]	; (8007198 <checkAktifCalisma+0x131c>)
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80070a0:	4b3d      	ldr	r3, [pc, #244]	; (8007198 <checkAktifCalisma+0x131c>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d016      	beq.n	80070d6 <checkAktifCalisma+0x125a>
 80070a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070ac:	4839      	ldr	r0, [pc, #228]	; (8007194 <checkAktifCalisma+0x1318>)
 80070ae:	f002 f939 	bl	8009324 <HAL_GPIO_ReadPin>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d10e      	bne.n	80070d6 <checkAktifCalisma+0x125a>
			hataVar=1;
 80070b8:	4b38      	ldr	r3, [pc, #224]	; (800719c <checkAktifCalisma+0x1320>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80070be:	2001      	movs	r0, #1
 80070c0:	f7fd ff70 	bl	8004fa4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80070c4:	2001      	movs	r0, #1
 80070c6:	f7fe fc31 	bl	800592c <hata2EEPROM>
			convertAndSendData();
 80070ca:	f7fe f975 	bl	80053b8 <convertAndSendData>
			acilstophatasi=1;
 80070ce:	4b34      	ldr	r3, [pc, #208]	; (80071a0 <checkAktifCalisma+0x1324>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	e018      	b.n	8007108 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80070d6:	4b32      	ldr	r3, [pc, #200]	; (80071a0 <checkAktifCalisma+0x1324>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d014      	beq.n	8007108 <checkAktifCalisma+0x128c>
 80070de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070e2:	482c      	ldr	r0, [pc, #176]	; (8007194 <checkAktifCalisma+0x1318>)
 80070e4:	f002 f91e 	bl	8009324 <HAL_GPIO_ReadPin>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10c      	bne.n	8007108 <checkAktifCalisma+0x128c>
 80070ee:	4b2a      	ldr	r3, [pc, #168]	; (8007198 <checkAktifCalisma+0x131c>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f083 0301 	eor.w	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80070fc:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <checkAktifCalisma+0x1324>)
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007102:	2001      	movs	r0, #1
 8007104:	f7fd fefa 	bl	8004efc <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007108:	4b26      	ldr	r3, [pc, #152]	; (80071a4 <checkAktifCalisma+0x1328>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f083 0301 	eor.w	r3, r3, #1
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04e      	beq.n	80071b4 <checkAktifCalisma+0x1338>
 8007116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800711a:	481e      	ldr	r0, [pc, #120]	; (8007194 <checkAktifCalisma+0x1318>)
 800711c:	f002 f902 	bl	8009324 <HAL_GPIO_ReadPin>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <checkAktifCalisma+0x12b2>
 8007126:	4b20      	ldr	r3, [pc, #128]	; (80071a8 <checkAktifCalisma+0x132c>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d042      	beq.n	80071b4 <checkAktifCalisma+0x1338>
 800712e:	4b1f      	ldr	r3, [pc, #124]	; (80071ac <checkAktifCalisma+0x1330>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d13e      	bne.n	80071b4 <checkAktifCalisma+0x1338>
			hataVar=1;
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <checkAktifCalisma+0x1320>)
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800713c:	2002      	movs	r0, #2
 800713e:	f7fd ff31 	bl	8004fa4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007142:	2002      	movs	r0, #2
 8007144:	f7fe fbf2 	bl	800592c <hata2EEPROM>
			convertAndSendData();
 8007148:	f7fe f936 	bl	80053b8 <convertAndSendData>
			emniyetCercevesihatasi=1;
 800714c:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <checkAktifCalisma+0x1334>)
 800714e:	2201      	movs	r2, #1
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e047      	b.n	80071e4 <checkAktifCalisma+0x1368>
 8007154:	20000367 	.word	0x20000367
 8007158:	20000366 	.word	0x20000366
 800715c:	20000365 	.word	0x20000365
 8007160:	40010800 	.word	0x40010800
 8007164:	2000035b 	.word	0x2000035b
 8007168:	40011000 	.word	0x40011000
 800716c:	20000322 	.word	0x20000322
 8007170:	2000035e 	.word	0x2000035e
 8007174:	2000035c 	.word	0x2000035c
 8007178:	20000319 	.word	0x20000319
 800717c:	2000031a 	.word	0x2000031a
 8007180:	200000ac 	.word	0x200000ac
 8007184:	200000ad 	.word	0x200000ad
 8007188:	2000031b 	.word	0x2000031b
 800718c:	20000224 	.word	0x20000224
 8007190:	20000348 	.word	0x20000348
 8007194:	40010c00 	.word	0x40010c00
 8007198:	2000036a 	.word	0x2000036a
 800719c:	20000371 	.word	0x20000371
 80071a0:	2000036c 	.word	0x2000036c
 80071a4:	20000373 	.word	0x20000373
 80071a8:	2000037d 	.word	0x2000037d
 80071ac:	20000320 	.word	0x20000320
 80071b0:	2000036d 	.word	0x2000036d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80071b4:	4b9b      	ldr	r3, [pc, #620]	; (8007424 <checkAktifCalisma+0x15a8>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d013      	beq.n	80071e4 <checkAktifCalisma+0x1368>
 80071bc:	4b9a      	ldr	r3, [pc, #616]	; (8007428 <checkAktifCalisma+0x15ac>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00f      	beq.n	80071e4 <checkAktifCalisma+0x1368>
 80071c4:	4b99      	ldr	r3, [pc, #612]	; (800742c <checkAktifCalisma+0x15b0>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f083 0301 	eor.w	r3, r3, #1
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d008      	beq.n	80071e4 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80071d2:	4b94      	ldr	r3, [pc, #592]	; (8007424 <checkAktifCalisma+0x15a8>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80071d8:	4b95      	ldr	r3, [pc, #596]	; (8007430 <checkAktifCalisma+0x15b4>)
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80071de:	2002      	movs	r0, #2
 80071e0:	f7fd fe8c 	bl	8004efc <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80071e4:	4b93      	ldr	r3, [pc, #588]	; (8007434 <checkAktifCalisma+0x15b8>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d11e      	bne.n	800722a <checkAktifCalisma+0x13ae>
 80071ec:	4b92      	ldr	r3, [pc, #584]	; (8007438 <checkAktifCalisma+0x15bc>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d11a      	bne.n	800722a <checkAktifCalisma+0x13ae>
 80071f4:	4b91      	ldr	r3, [pc, #580]	; (800743c <checkAktifCalisma+0x15c0>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d016      	beq.n	800722a <checkAktifCalisma+0x13ae>
 80071fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007200:	488f      	ldr	r0, [pc, #572]	; (8007440 <checkAktifCalisma+0x15c4>)
 8007202:	f002 f88f 	bl	8009324 <HAL_GPIO_ReadPin>
 8007206:	4603      	mov	r3, r0
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10e      	bne.n	800722a <checkAktifCalisma+0x13ae>
			hataVar=1;
 800720c:	4b8d      	ldr	r3, [pc, #564]	; (8007444 <checkAktifCalisma+0x15c8>)
 800720e:	2201      	movs	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007212:	2003      	movs	r0, #3
 8007214:	f7fd fec6 	bl	8004fa4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007218:	2003      	movs	r0, #3
 800721a:	f7fe fb87 	bl	800592c <hata2EEPROM>
			convertAndSendData();
 800721e:	f7fe f8cb 	bl	80053b8 <convertAndSendData>
			basinchatasi=1;
 8007222:	4b89      	ldr	r3, [pc, #548]	; (8007448 <checkAktifCalisma+0x15cc>)
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	e015      	b.n	8007256 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800722a:	4b87      	ldr	r3, [pc, #540]	; (8007448 <checkAktifCalisma+0x15cc>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d011      	beq.n	8007256 <checkAktifCalisma+0x13da>
 8007232:	4b80      	ldr	r3, [pc, #512]	; (8007434 <checkAktifCalisma+0x15b8>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d10d      	bne.n	8007256 <checkAktifCalisma+0x13da>
 800723a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800723e:	4883      	ldr	r0, [pc, #524]	; (800744c <checkAktifCalisma+0x15d0>)
 8007240:	f002 f870 	bl	8009324 <HAL_GPIO_ReadPin>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d105      	bne.n	8007256 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800724a:	4b7f      	ldr	r3, [pc, #508]	; (8007448 <checkAktifCalisma+0x15cc>)
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007250:	2003      	movs	r0, #3
 8007252:	f7fd fe53 	bl	8004efc <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007256:	4b7e      	ldr	r3, [pc, #504]	; (8007450 <checkAktifCalisma+0x15d4>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <checkAktifCalisma+0x13ea>
 800725e:	4b7d      	ldr	r3, [pc, #500]	; (8007454 <checkAktifCalisma+0x15d8>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01e      	beq.n	80072a4 <checkAktifCalisma+0x1428>
 8007266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800726a:	487b      	ldr	r0, [pc, #492]	; (8007458 <checkAktifCalisma+0x15dc>)
 800726c:	f002 f85a 	bl	8009324 <HAL_GPIO_ReadPin>
 8007270:	4603      	mov	r3, r0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d116      	bne.n	80072a4 <checkAktifCalisma+0x1428>
 8007276:	4b79      	ldr	r3, [pc, #484]	; (800745c <checkAktifCalisma+0x15e0>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d003      	beq.n	8007286 <checkAktifCalisma+0x140a>
 800727e:	4b77      	ldr	r3, [pc, #476]	; (800745c <checkAktifCalisma+0x15e0>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b03      	cmp	r3, #3
 8007284:	d10e      	bne.n	80072a4 <checkAktifCalisma+0x1428>
			hataVar=1;
 8007286:	4b6f      	ldr	r3, [pc, #444]	; (8007444 <checkAktifCalisma+0x15c8>)
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800728c:	2004      	movs	r0, #4
 800728e:	f7fd fe89 	bl	8004fa4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007292:	2004      	movs	r0, #4
 8007294:	f7fe fb4a 	bl	800592c <hata2EEPROM>
			convertAndSendData();
 8007298:	f7fe f88e 	bl	80053b8 <convertAndSendData>
			katkapisivicihatasi=1;
 800729c:	4b70      	ldr	r3, [pc, #448]	; (8007460 <checkAktifCalisma+0x15e4>)
 800729e:	2201      	movs	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	e01f      	b.n	80072e4 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80072a4:	4b6e      	ldr	r3, [pc, #440]	; (8007460 <checkAktifCalisma+0x15e4>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <checkAktifCalisma+0x1468>
 80072ac:	4b6d      	ldr	r3, [pc, #436]	; (8007464 <checkAktifCalisma+0x15e8>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d017      	beq.n	80072e4 <checkAktifCalisma+0x1468>
 80072b4:	4b66      	ldr	r3, [pc, #408]	; (8007450 <checkAktifCalisma+0x15d4>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f083 0301 	eor.w	r3, r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <checkAktifCalisma+0x1468>
 80072c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072c6:	4864      	ldr	r0, [pc, #400]	; (8007458 <checkAktifCalisma+0x15dc>)
 80072c8:	f002 f82c 	bl	8009324 <HAL_GPIO_ReadPin>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d108      	bne.n	80072e4 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80072d2:	4b63      	ldr	r3, [pc, #396]	; (8007460 <checkAktifCalisma+0x15e4>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80072d8:	4b5e      	ldr	r3, [pc, #376]	; (8007454 <checkAktifCalisma+0x15d8>)
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80072de:	2004      	movs	r0, #4
 80072e0:	f7fd fe0c 	bl	8004efc <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80072e4:	4b5a      	ldr	r3, [pc, #360]	; (8007450 <checkAktifCalisma+0x15d4>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <checkAktifCalisma+0x1478>
 80072ec:	4b5e      	ldr	r3, [pc, #376]	; (8007468 <checkAktifCalisma+0x15ec>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01e      	beq.n	8007332 <checkAktifCalisma+0x14b6>
 80072f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072f8:	4857      	ldr	r0, [pc, #348]	; (8007458 <checkAktifCalisma+0x15dc>)
 80072fa:	f002 f813 	bl	8009324 <HAL_GPIO_ReadPin>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b01      	cmp	r3, #1
 8007302:	d116      	bne.n	8007332 <checkAktifCalisma+0x14b6>
 8007304:	4b55      	ldr	r3, [pc, #340]	; (800745c <checkAktifCalisma+0x15e0>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d003      	beq.n	8007314 <checkAktifCalisma+0x1498>
 800730c:	4b53      	ldr	r3, [pc, #332]	; (800745c <checkAktifCalisma+0x15e0>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b03      	cmp	r3, #3
 8007312:	d10e      	bne.n	8007332 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8007314:	4b4b      	ldr	r3, [pc, #300]	; (8007444 <checkAktifCalisma+0x15c8>)
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800731a:	2005      	movs	r0, #5
 800731c:	f7fd fe42 	bl	8004fa4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007320:	2005      	movs	r0, #5
 8007322:	f7fe fb03 	bl	800592c <hata2EEPROM>
			convertAndSendData();
 8007326:	f7fe f847 	bl	80053b8 <convertAndSendData>
			tablakapisivicihatasi=1;
 800732a:	4b50      	ldr	r3, [pc, #320]	; (800746c <checkAktifCalisma+0x15f0>)
 800732c:	2201      	movs	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e023      	b.n	800737a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007332:	4b4e      	ldr	r3, [pc, #312]	; (800746c <checkAktifCalisma+0x15f0>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01f      	beq.n	800737a <checkAktifCalisma+0x14fe>
 800733a:	4b4a      	ldr	r3, [pc, #296]	; (8007464 <checkAktifCalisma+0x15e8>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01b      	beq.n	800737a <checkAktifCalisma+0x14fe>
 8007342:	4b43      	ldr	r3, [pc, #268]	; (8007450 <checkAktifCalisma+0x15d4>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	f083 0301 	eor.w	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d014      	beq.n	800737a <checkAktifCalisma+0x14fe>
 8007350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007354:	4840      	ldr	r0, [pc, #256]	; (8007458 <checkAktifCalisma+0x15dc>)
 8007356:	f001 ffe5 	bl	8009324 <HAL_GPIO_ReadPin>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <checkAktifCalisma+0x14fe>
 8007360:	4b40      	ldr	r3, [pc, #256]	; (8007464 <checkAktifCalisma+0x15e8>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8007368:	4b40      	ldr	r3, [pc, #256]	; (800746c <checkAktifCalisma+0x15f0>)
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800736e:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <checkAktifCalisma+0x15ec>)
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007374:	2005      	movs	r0, #5
 8007376:	f7fd fdc1 	bl	8004efc <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800737a:	4b30      	ldr	r3, [pc, #192]	; (800743c <checkAktifCalisma+0x15c0>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <checkAktifCalisma+0x1516>
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <checkAktifCalisma+0x15b0>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <checkAktifCalisma+0x1516>
 800738a:	4b39      	ldr	r3, [pc, #228]	; (8007470 <checkAktifCalisma+0x15f4>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8007392:	4b38      	ldr	r3, [pc, #224]	; (8007474 <checkAktifCalisma+0x15f8>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4b38      	ldr	r3, [pc, #224]	; (8007478 <checkAktifCalisma+0x15fc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	4a37      	ldr	r2, [pc, #220]	; (800747c <checkAktifCalisma+0x1600>)
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d30d      	bcc.n	80073c0 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <checkAktifCalisma+0x15c8>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80073aa:	2006      	movs	r0, #6
 80073ac:	f7fd fdfa 	bl	8004fa4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80073b0:	2006      	movs	r0, #6
 80073b2:	f7fe fabb 	bl	800592c <hata2EEPROM>
			  	convertAndSendData();
 80073b6:	f7fd ffff 	bl	80053b8 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80073ba:	4b31      	ldr	r3, [pc, #196]	; (8007480 <checkAktifCalisma+0x1604>)
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80073c0:	4b2f      	ldr	r3, [pc, #188]	; (8007480 <checkAktifCalisma+0x1604>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <checkAktifCalisma+0x1574>
 80073c8:	2108      	movs	r1, #8
 80073ca:	4823      	ldr	r0, [pc, #140]	; (8007458 <checkAktifCalisma+0x15dc>)
 80073cc:	f001 ffaa 	bl	8009324 <HAL_GPIO_ReadPin>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00c      	beq.n	80073f0 <checkAktifCalisma+0x1574>
 80073d6:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <checkAktifCalisma+0x15d4>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f083 0301 	eor.w	r3, r3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80073e4:	4b26      	ldr	r3, [pc, #152]	; (8007480 <checkAktifCalisma+0x1604>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80073ea:	2006      	movs	r0, #6
 80073ec:	f7fd fd86 	bl	8004efc <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80073f0:	4b24      	ldr	r3, [pc, #144]	; (8007484 <checkAktifCalisma+0x1608>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <checkAktifCalisma+0x1594>
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <checkAktifCalisma+0x15b0>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <checkAktifCalisma+0x1594>
 8007400:	4b21      	ldr	r3, [pc, #132]	; (8007488 <checkAktifCalisma+0x160c>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <checkAktifCalisma+0x1594>
 8007408:	4b19      	ldr	r3, [pc, #100]	; (8007470 <checkAktifCalisma+0x15f4>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d03f      	beq.n	8007490 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8007410:	4b1e      	ldr	r3, [pc, #120]	; (800748c <checkAktifCalisma+0x1610>)
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <checkAktifCalisma+0x15d8>)
 8007418:	2201      	movs	r2, #1
 800741a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800741c:	4b12      	ldr	r3, [pc, #72]	; (8007468 <checkAktifCalisma+0x15ec>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e03c      	b.n	800749e <checkAktifCalisma+0x1622>
 8007424:	2000036d 	.word	0x2000036d
 8007428:	20000373 	.word	0x20000373
 800742c:	20000354 	.word	0x20000354
 8007430:	2000037d 	.word	0x2000037d
 8007434:	2000031f 	.word	0x2000031f
 8007438:	20000323 	.word	0x20000323
 800743c:	20000370 	.word	0x20000370
 8007440:	40011000 	.word	0x40011000
 8007444:	20000371 	.word	0x20000371
 8007448:	2000037a 	.word	0x2000037a
 800744c:	40010c00 	.word	0x40010c00
 8007450:	2000036a 	.word	0x2000036a
 8007454:	2000037e 	.word	0x2000037e
 8007458:	40010800 	.word	0x40010800
 800745c:	20000324 	.word	0x20000324
 8007460:	2000037b 	.word	0x2000037b
 8007464:	2000035e 	.word	0x2000035e
 8007468:	2000037f 	.word	0x2000037f
 800746c:	2000037c 	.word	0x2000037c
 8007470:	20000353 	.word	0x20000353
 8007474:	2000029c 	.word	0x2000029c
 8007478:	200002b0 	.word	0x200002b0
 800747c:	20000334 	.word	0x20000334
 8007480:	2000036b 	.word	0x2000036b
 8007484:	20000351 	.word	0x20000351
 8007488:	20000352 	.word	0x20000352
 800748c:	20000372 	.word	0x20000372
		} else {
			makineCalisiyor=1;
 8007490:	4b1e      	ldr	r3, [pc, #120]	; (800750c <checkAktifCalisma+0x1690>)
 8007492:	2201      	movs	r2, #1
 8007494:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007496:	4b1e      	ldr	r3, [pc, #120]	; (8007510 <checkAktifCalisma+0x1694>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1e      	ldr	r2, [pc, #120]	; (8007514 <checkAktifCalisma+0x1698>)
 800749c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800749e:	4b1e      	ldr	r3, [pc, #120]	; (8007518 <checkAktifCalisma+0x169c>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d02f      	beq.n	8007506 <checkAktifCalisma+0x168a>
 80074a6:	4b1d      	ldr	r3, [pc, #116]	; (800751c <checkAktifCalisma+0x16a0>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	f083 0301 	eor.w	r3, r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d028      	beq.n	8007506 <checkAktifCalisma+0x168a>
 80074b4:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <checkAktifCalisma+0x16a4>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f083 0301 	eor.w	r3, r3, #1
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d021      	beq.n	8007506 <checkAktifCalisma+0x168a>
 80074c2:	4b18      	ldr	r3, [pc, #96]	; (8007524 <checkAktifCalisma+0x16a8>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f083 0301 	eor.w	r3, r3, #1
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80074d0:	4b15      	ldr	r3, [pc, #84]	; (8007528 <checkAktifCalisma+0x16ac>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f083 0301 	eor.w	r3, r3, #1
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d013      	beq.n	8007506 <checkAktifCalisma+0x168a>
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <checkAktifCalisma+0x16b0>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f083 0301 	eor.w	r3, r3, #1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00c      	beq.n	8007506 <checkAktifCalisma+0x168a>
 80074ec:	4b10      	ldr	r3, [pc, #64]	; (8007530 <checkAktifCalisma+0x16b4>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f083 0301 	eor.w	r3, r3, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <checkAktifCalisma+0x168a>
			hataVar=0;
 80074fa:	4b07      	ldr	r3, [pc, #28]	; (8007518 <checkAktifCalisma+0x169c>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007500:	2007      	movs	r0, #7
 8007502:	f7fd fcfb 	bl	8004efc <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000372 	.word	0x20000372
 8007510:	2000029c 	.word	0x2000029c
 8007514:	200002b0 	.word	0x200002b0
 8007518:	20000371 	.word	0x20000371
 800751c:	2000036c 	.word	0x2000036c
 8007520:	2000036d 	.word	0x2000036d
 8007524:	2000037a 	.word	0x2000037a
 8007528:	2000037b 	.word	0x2000037b
 800752c:	2000037c 	.word	0x2000037c
 8007530:	2000036b 	.word	0x2000036b

08007534 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007538:	4b8b      	ldr	r3, [pc, #556]	; (8007768 <checkDemoModCalisma+0x234>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	f040 8229 	bne.w	8007994 <checkDemoModCalisma+0x460>
 8007542:	4b8a      	ldr	r3, [pc, #552]	; (800776c <checkDemoModCalisma+0x238>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8224 	beq.w	8007994 <checkDemoModCalisma+0x460>
 800754c:	4b88      	ldr	r3, [pc, #544]	; (8007770 <checkDemoModCalisma+0x23c>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 821f 	bne.w	8007994 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007556:	2102      	movs	r1, #2
 8007558:	4886      	ldr	r0, [pc, #536]	; (8007774 <checkDemoModCalisma+0x240>)
 800755a:	f001 fee3 	bl	8009324 <HAL_GPIO_ReadPin>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11d      	bne.n	80075a0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007564:	4b84      	ldr	r3, [pc, #528]	; (8007778 <checkDemoModCalisma+0x244>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f083 0301 	eor.w	r3, r3, #1
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d016      	beq.n	80075a0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007572:	4b82      	ldr	r3, [pc, #520]	; (800777c <checkDemoModCalisma+0x248>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f083 0301 	eor.w	r3, r3, #1
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00f      	beq.n	80075a0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007580:	4b7f      	ldr	r3, [pc, #508]	; (8007780 <checkDemoModCalisma+0x24c>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	f083 0301 	eor.w	r3, r3, #1
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800758e:	2201      	movs	r2, #1
 8007590:	2104      	movs	r1, #4
 8007592:	487c      	ldr	r0, [pc, #496]	; (8007784 <checkDemoModCalisma+0x250>)
 8007594:	f001 fedd 	bl	8009352 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007598:	4b7b      	ldr	r3, [pc, #492]	; (8007788 <checkDemoModCalisma+0x254>)
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	e00e      	b.n	80075be <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80075a0:	2102      	movs	r1, #2
 80075a2:	4874      	ldr	r0, [pc, #464]	; (8007774 <checkDemoModCalisma+0x240>)
 80075a4:	f001 febe 	bl	8009324 <HAL_GPIO_ReadPin>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d107      	bne.n	80075be <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80075ae:	2200      	movs	r2, #0
 80075b0:	2104      	movs	r1, #4
 80075b2:	4874      	ldr	r0, [pc, #464]	; (8007784 <checkDemoModCalisma+0x250>)
 80075b4:	f001 fecd 	bl	8009352 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80075b8:	4b73      	ldr	r3, [pc, #460]	; (8007788 <checkDemoModCalisma+0x254>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80075be:	4b72      	ldr	r3, [pc, #456]	; (8007788 <checkDemoModCalisma+0x254>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <checkDemoModCalisma+0xaa>
 80075c6:	4b6d      	ldr	r3, [pc, #436]	; (800777c <checkDemoModCalisma+0x248>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d107      	bne.n	80075de <checkDemoModCalisma+0xaa>
 80075ce:	4b6c      	ldr	r3, [pc, #432]	; (8007780 <checkDemoModCalisma+0x24c>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <checkDemoModCalisma+0xaa>
 80075d6:	4b68      	ldr	r3, [pc, #416]	; (8007778 <checkDemoModCalisma+0x244>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80075de:	2201      	movs	r2, #1
 80075e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075e4:	4867      	ldr	r0, [pc, #412]	; (8007784 <checkDemoModCalisma+0x250>)
 80075e6:	f001 feb4 	bl	8009352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80075ea:	2201      	movs	r2, #1
 80075ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075f0:	4864      	ldr	r0, [pc, #400]	; (8007784 <checkDemoModCalisma+0x250>)
 80075f2:	f001 feae 	bl	8009352 <HAL_GPIO_WritePin>
 80075f6:	e00b      	b.n	8007610 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80075f8:	2200      	movs	r2, #0
 80075fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075fe:	4861      	ldr	r0, [pc, #388]	; (8007784 <checkDemoModCalisma+0x250>)
 8007600:	f001 fea7 	bl	8009352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007604:	2200      	movs	r2, #0
 8007606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800760a:	485e      	ldr	r0, [pc, #376]	; (8007784 <checkDemoModCalisma+0x250>)
 800760c:	f001 fea1 	bl	8009352 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007610:	2102      	movs	r1, #2
 8007612:	4858      	ldr	r0, [pc, #352]	; (8007774 <checkDemoModCalisma+0x240>)
 8007614:	f001 fe86 	bl	8009324 <HAL_GPIO_ReadPin>
 8007618:	4603      	mov	r3, r0
 800761a:	2b01      	cmp	r3, #1
 800761c:	d10d      	bne.n	800763a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800761e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007622:	4854      	ldr	r0, [pc, #336]	; (8007774 <checkDemoModCalisma+0x240>)
 8007624:	f001 fe7e 	bl	8009324 <HAL_GPIO_ReadPin>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d105      	bne.n	800763a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800762e:	4b56      	ldr	r3, [pc, #344]	; (8007788 <checkDemoModCalisma+0x254>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	f083 0301 	eor.w	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800763a:	2102      	movs	r1, #2
 800763c:	484d      	ldr	r0, [pc, #308]	; (8007774 <checkDemoModCalisma+0x240>)
 800763e:	f001 fe71 	bl	8009324 <HAL_GPIO_ReadPin>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d125      	bne.n	8007694 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800764c:	4849      	ldr	r0, [pc, #292]	; (8007774 <checkDemoModCalisma+0x240>)
 800764e:	f001 fe69 	bl	8009324 <HAL_GPIO_ReadPin>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11d      	bne.n	8007694 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007658:	4b4b      	ldr	r3, [pc, #300]	; (8007788 <checkDemoModCalisma+0x254>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	f083 0301 	eor.w	r3, r3, #1
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d016      	beq.n	8007694 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007666:	4b44      	ldr	r3, [pc, #272]	; (8007778 <checkDemoModCalisma+0x244>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f083 0301 	eor.w	r3, r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00f      	beq.n	8007694 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007674:	4b42      	ldr	r3, [pc, #264]	; (8007780 <checkDemoModCalisma+0x24c>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	f083 0301 	eor.w	r3, r3, #1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007682:	2201      	movs	r2, #1
 8007684:	2120      	movs	r1, #32
 8007686:	483b      	ldr	r0, [pc, #236]	; (8007774 <checkDemoModCalisma+0x240>)
 8007688:	f001 fe63 	bl	8009352 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800768c:	4b3b      	ldr	r3, [pc, #236]	; (800777c <checkDemoModCalisma+0x248>)
 800768e:	2201      	movs	r2, #1
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e007      	b.n	80076a4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007694:	2200      	movs	r2, #0
 8007696:	2120      	movs	r1, #32
 8007698:	4836      	ldr	r0, [pc, #216]	; (8007774 <checkDemoModCalisma+0x240>)
 800769a:	f001 fe5a 	bl	8009352 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800769e:	4b37      	ldr	r3, [pc, #220]	; (800777c <checkDemoModCalisma+0x248>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80076a4:	2102      	movs	r1, #2
 80076a6:	4833      	ldr	r0, [pc, #204]	; (8007774 <checkDemoModCalisma+0x240>)
 80076a8:	f001 fe3c 	bl	8009324 <HAL_GPIO_ReadPin>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d125      	bne.n	80076fe <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80076b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076b6:	482f      	ldr	r0, [pc, #188]	; (8007774 <checkDemoModCalisma+0x240>)
 80076b8:	f001 fe34 	bl	8009324 <HAL_GPIO_ReadPin>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d11d      	bne.n	80076fe <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80076c2:	4b31      	ldr	r3, [pc, #196]	; (8007788 <checkDemoModCalisma+0x254>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f083 0301 	eor.w	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d016      	beq.n	80076fe <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <checkDemoModCalisma+0x248>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f083 0301 	eor.w	r3, r3, #1
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00f      	beq.n	80076fe <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80076de:	4b26      	ldr	r3, [pc, #152]	; (8007778 <checkDemoModCalisma+0x244>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f083 0301 	eor.w	r3, r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80076ec:	2201      	movs	r2, #1
 80076ee:	2110      	movs	r1, #16
 80076f0:	4820      	ldr	r0, [pc, #128]	; (8007774 <checkDemoModCalisma+0x240>)
 80076f2:	f001 fe2e 	bl	8009352 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80076f6:	4b22      	ldr	r3, [pc, #136]	; (8007780 <checkDemoModCalisma+0x24c>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	e007      	b.n	800770e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80076fe:	2200      	movs	r2, #0
 8007700:	2110      	movs	r1, #16
 8007702:	481c      	ldr	r0, [pc, #112]	; (8007774 <checkDemoModCalisma+0x240>)
 8007704:	f001 fe25 	bl	8009352 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007708:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <checkDemoModCalisma+0x24c>)
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800770e:	2104      	movs	r1, #4
 8007710:	4818      	ldr	r0, [pc, #96]	; (8007774 <checkDemoModCalisma+0x240>)
 8007712:	f001 fe07 	bl	8009324 <HAL_GPIO_ReadPin>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d139      	bne.n	8007790 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800771c:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <checkDemoModCalisma+0x254>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f083 0301 	eor.w	r3, r3, #1
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d032      	beq.n	8007790 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800772a:	4b15      	ldr	r3, [pc, #84]	; (8007780 <checkDemoModCalisma+0x24c>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f083 0301 	eor.w	r3, r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d02b      	beq.n	8007790 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <checkDemoModCalisma+0x248>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f083 0301 	eor.w	r3, r3, #1
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d024      	beq.n	8007790 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007746:	2201      	movs	r2, #1
 8007748:	2102      	movs	r1, #2
 800774a:	480e      	ldr	r0, [pc, #56]	; (8007784 <checkDemoModCalisma+0x250>)
 800774c:	f001 fe01 	bl	8009352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007750:	2201      	movs	r2, #1
 8007752:	2101      	movs	r1, #1
 8007754:	480b      	ldr	r0, [pc, #44]	; (8007784 <checkDemoModCalisma+0x250>)
 8007756:	f001 fdfc 	bl	8009352 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800775a:	4b07      	ldr	r3, [pc, #28]	; (8007778 <checkDemoModCalisma+0x244>)
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <checkDemoModCalisma+0x258>)
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e027      	b.n	80077b8 <checkDemoModCalisma+0x284>
 8007768:	2000033a 	.word	0x2000033a
 800776c:	2000036e 	.word	0x2000036e
 8007770:	20000339 	.word	0x20000339
 8007774:	40011000 	.word	0x40011000
 8007778:	20000375 	.word	0x20000375
 800777c:	20000376 	.word	0x20000376
 8007780:	20000377 	.word	0x20000377
 8007784:	40010c00 	.word	0x40010c00
 8007788:	20000374 	.word	0x20000374
 800778c:	2000035a 	.word	0x2000035a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007790:	2104      	movs	r1, #4
 8007792:	48a0      	ldr	r0, [pc, #640]	; (8007a14 <checkDemoModCalisma+0x4e0>)
 8007794:	f001 fdc6 	bl	8009324 <HAL_GPIO_ReadPin>
 8007798:	4603      	mov	r3, r0
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10c      	bne.n	80077b8 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800779e:	2200      	movs	r2, #0
 80077a0:	2102      	movs	r1, #2
 80077a2:	489d      	ldr	r0, [pc, #628]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80077a4:	f001 fdd5 	bl	8009352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80077a8:	2200      	movs	r2, #0
 80077aa:	2101      	movs	r1, #1
 80077ac:	489a      	ldr	r0, [pc, #616]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80077ae:	f001 fdd0 	bl	8009352 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80077b2:	4b9a      	ldr	r3, [pc, #616]	; (8007a1c <checkDemoModCalisma+0x4e8>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80077b8:	2104      	movs	r1, #4
 80077ba:	4896      	ldr	r0, [pc, #600]	; (8007a14 <checkDemoModCalisma+0x4e0>)
 80077bc:	f001 fdb2 	bl	8009324 <HAL_GPIO_ReadPin>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d10d      	bne.n	80077e2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80077c6:	2201      	movs	r2, #1
 80077c8:	2180      	movs	r1, #128	; 0x80
 80077ca:	4895      	ldr	r0, [pc, #596]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 80077cc:	f001 fdc1 	bl	8009352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80077d0:	2201      	movs	r2, #1
 80077d2:	2120      	movs	r1, #32
 80077d4:	4892      	ldr	r0, [pc, #584]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 80077d6:	f001 fdbc 	bl	8009352 <HAL_GPIO_WritePin>
			timer3 = millis;
 80077da:	4b92      	ldr	r3, [pc, #584]	; (8007a24 <checkDemoModCalisma+0x4f0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a92      	ldr	r2, [pc, #584]	; (8007a28 <checkDemoModCalisma+0x4f4>)
 80077e0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80077e2:	4b90      	ldr	r3, [pc, #576]	; (8007a24 <checkDemoModCalisma+0x4f0>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b90      	ldr	r3, [pc, #576]	; (8007a28 <checkDemoModCalisma+0x4f4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d909      	bls.n	8007804 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80077f0:	2200      	movs	r2, #0
 80077f2:	2180      	movs	r1, #128	; 0x80
 80077f4:	488a      	ldr	r0, [pc, #552]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 80077f6:	f001 fdac 	bl	8009352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80077fa:	2200      	movs	r2, #0
 80077fc:	2120      	movs	r1, #32
 80077fe:	4888      	ldr	r0, [pc, #544]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 8007800:	f001 fda7 	bl	8009352 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007804:	2102      	movs	r1, #2
 8007806:	4883      	ldr	r0, [pc, #524]	; (8007a14 <checkDemoModCalisma+0x4e0>)
 8007808:	f001 fd8c 	bl	8009324 <HAL_GPIO_ReadPin>
 800780c:	4603      	mov	r3, r0
 800780e:	2b01      	cmp	r3, #1
 8007810:	d108      	bne.n	8007824 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007812:	2201      	movs	r2, #1
 8007814:	2140      	movs	r1, #64	; 0x40
 8007816:	4882      	ldr	r0, [pc, #520]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 8007818:	f001 fd9b 	bl	8009352 <HAL_GPIO_WritePin>
			timer3 = millis;
 800781c:	4b81      	ldr	r3, [pc, #516]	; (8007a24 <checkDemoModCalisma+0x4f0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a81      	ldr	r2, [pc, #516]	; (8007a28 <checkDemoModCalisma+0x4f4>)
 8007822:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007824:	4b7f      	ldr	r3, [pc, #508]	; (8007a24 <checkDemoModCalisma+0x4f0>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	4b7f      	ldr	r3, [pc, #508]	; (8007a28 <checkDemoModCalisma+0x4f4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b04      	cmp	r3, #4
 8007830:	d904      	bls.n	800783c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007832:	2200      	movs	r2, #0
 8007834:	2140      	movs	r1, #64	; 0x40
 8007836:	487a      	ldr	r0, [pc, #488]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 8007838:	f001 fd8b 	bl	8009352 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800783c:	4b7b      	ldr	r3, [pc, #492]	; (8007a2c <checkDemoModCalisma+0x4f8>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d058      	beq.n	80078f6 <checkDemoModCalisma+0x3c2>
 8007844:	4b7a      	ldr	r3, [pc, #488]	; (8007a30 <checkDemoModCalisma+0x4fc>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d054      	beq.n	80078f6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800784c:	4b79      	ldr	r3, [pc, #484]	; (8007a34 <checkDemoModCalisma+0x500>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	b2da      	uxtb	r2, r3
 8007854:	4b77      	ldr	r3, [pc, #476]	; (8007a34 <checkDemoModCalisma+0x500>)
 8007856:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007858:	4b76      	ldr	r3, [pc, #472]	; (8007a34 <checkDemoModCalisma+0x500>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b09      	cmp	r3, #9
 800785e:	d908      	bls.n	8007872 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007860:	4b74      	ldr	r3, [pc, #464]	; (8007a34 <checkDemoModCalisma+0x500>)
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007866:	4b74      	ldr	r3, [pc, #464]	; (8007a38 <checkDemoModCalisma+0x504>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	3301      	adds	r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	4b72      	ldr	r3, [pc, #456]	; (8007a38 <checkDemoModCalisma+0x504>)
 8007870:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007872:	4b71      	ldr	r3, [pc, #452]	; (8007a38 <checkDemoModCalisma+0x504>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b09      	cmp	r3, #9
 8007878:	d908      	bls.n	800788c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800787a:	4b6f      	ldr	r3, [pc, #444]	; (8007a38 <checkDemoModCalisma+0x504>)
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007880:	4b6e      	ldr	r3, [pc, #440]	; (8007a3c <checkDemoModCalisma+0x508>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	b2da      	uxtb	r2, r3
 8007888:	4b6c      	ldr	r3, [pc, #432]	; (8007a3c <checkDemoModCalisma+0x508>)
 800788a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800788c:	4b6b      	ldr	r3, [pc, #428]	; (8007a3c <checkDemoModCalisma+0x508>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b09      	cmp	r3, #9
 8007892:	d908      	bls.n	80078a6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007894:	4b69      	ldr	r3, [pc, #420]	; (8007a3c <checkDemoModCalisma+0x508>)
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800789a:	4b69      	ldr	r3, [pc, #420]	; (8007a40 <checkDemoModCalisma+0x50c>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	4b67      	ldr	r3, [pc, #412]	; (8007a40 <checkDemoModCalisma+0x50c>)
 80078a4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80078a6:	4b66      	ldr	r3, [pc, #408]	; (8007a40 <checkDemoModCalisma+0x50c>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b09      	cmp	r3, #9
 80078ac:	d908      	bls.n	80078c0 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80078ae:	4b64      	ldr	r3, [pc, #400]	; (8007a40 <checkDemoModCalisma+0x50c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80078b4:	4b63      	ldr	r3, [pc, #396]	; (8007a44 <checkDemoModCalisma+0x510>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	4b61      	ldr	r3, [pc, #388]	; (8007a44 <checkDemoModCalisma+0x510>)
 80078be:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80078c0:	4b60      	ldr	r3, [pc, #384]	; (8007a44 <checkDemoModCalisma+0x510>)
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	4b60      	ldr	r3, [pc, #384]	; (8007a48 <checkDemoModCalisma+0x514>)
 80078c6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80078ca:	4b5d      	ldr	r3, [pc, #372]	; (8007a40 <checkDemoModCalisma+0x50c>)
 80078cc:	781a      	ldrb	r2, [r3, #0]
 80078ce:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <checkDemoModCalisma+0x514>)
 80078d0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80078d2:	4b5a      	ldr	r3, [pc, #360]	; (8007a3c <checkDemoModCalisma+0x508>)
 80078d4:	781a      	ldrb	r2, [r3, #0]
 80078d6:	4b5c      	ldr	r3, [pc, #368]	; (8007a48 <checkDemoModCalisma+0x514>)
 80078d8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80078da:	4b57      	ldr	r3, [pc, #348]	; (8007a38 <checkDemoModCalisma+0x504>)
 80078dc:	781a      	ldrb	r2, [r3, #0]
 80078de:	4b5a      	ldr	r3, [pc, #360]	; (8007a48 <checkDemoModCalisma+0x514>)
 80078e0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80078e2:	4b54      	ldr	r3, [pc, #336]	; (8007a34 <checkDemoModCalisma+0x500>)
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	4b58      	ldr	r3, [pc, #352]	; (8007a48 <checkDemoModCalisma+0x514>)
 80078e8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80078ea:	4b58      	ldr	r3, [pc, #352]	; (8007a4c <checkDemoModCalisma+0x518>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80078f0:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <checkDemoModCalisma+0x4fc>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80078f6:	4b56      	ldr	r3, [pc, #344]	; (8007a50 <checkDemoModCalisma+0x51c>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 8087 	bne.w	8007a0e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007900:	4a54      	ldr	r2, [pc, #336]	; (8007a54 <checkDemoModCalisma+0x520>)
 8007902:	2101      	movs	r1, #1
 8007904:	2002      	movs	r0, #2
 8007906:	f7f8 ff59 	bl	80007bc <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800790a:	4a53      	ldr	r2, [pc, #332]	; (8007a58 <checkDemoModCalisma+0x524>)
 800790c:	2101      	movs	r1, #1
 800790e:	2001      	movs	r0, #1
 8007910:	f7f8 ff54 	bl	80007bc <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007914:	4b4b      	ldr	r3, [pc, #300]	; (8007a44 <checkDemoModCalisma+0x510>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	220a      	movs	r2, #10
 800791a:	4950      	ldr	r1, [pc, #320]	; (8007a5c <checkDemoModCalisma+0x528>)
 800791c:	4618      	mov	r0, r3
 800791e:	f004 fd2d 	bl	800c37c <itoa>
			lcd_print(2,12,snum);
 8007922:	4a4e      	ldr	r2, [pc, #312]	; (8007a5c <checkDemoModCalisma+0x528>)
 8007924:	210c      	movs	r1, #12
 8007926:	2002      	movs	r0, #2
 8007928:	f7f8 ff48 	bl	80007bc <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800792c:	4b44      	ldr	r3, [pc, #272]	; (8007a40 <checkDemoModCalisma+0x50c>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	220a      	movs	r2, #10
 8007932:	494a      	ldr	r1, [pc, #296]	; (8007a5c <checkDemoModCalisma+0x528>)
 8007934:	4618      	mov	r0, r3
 8007936:	f004 fd21 	bl	800c37c <itoa>
			lcd_print(2,13,snum);
 800793a:	4a48      	ldr	r2, [pc, #288]	; (8007a5c <checkDemoModCalisma+0x528>)
 800793c:	210d      	movs	r1, #13
 800793e:	2002      	movs	r0, #2
 8007940:	f7f8 ff3c 	bl	80007bc <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007944:	4b3d      	ldr	r3, [pc, #244]	; (8007a3c <checkDemoModCalisma+0x508>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	220a      	movs	r2, #10
 800794a:	4944      	ldr	r1, [pc, #272]	; (8007a5c <checkDemoModCalisma+0x528>)
 800794c:	4618      	mov	r0, r3
 800794e:	f004 fd15 	bl	800c37c <itoa>
			lcd_print(2,14,snum);
 8007952:	4a42      	ldr	r2, [pc, #264]	; (8007a5c <checkDemoModCalisma+0x528>)
 8007954:	210e      	movs	r1, #14
 8007956:	2002      	movs	r0, #2
 8007958:	f7f8 ff30 	bl	80007bc <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800795c:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <checkDemoModCalisma+0x504>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	220a      	movs	r2, #10
 8007962:	493e      	ldr	r1, [pc, #248]	; (8007a5c <checkDemoModCalisma+0x528>)
 8007964:	4618      	mov	r0, r3
 8007966:	f004 fd09 	bl	800c37c <itoa>
			lcd_print(2,15,snum);
 800796a:	4a3c      	ldr	r2, [pc, #240]	; (8007a5c <checkDemoModCalisma+0x528>)
 800796c:	210f      	movs	r1, #15
 800796e:	2002      	movs	r0, #2
 8007970:	f7f8 ff24 	bl	80007bc <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007974:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <checkDemoModCalisma+0x500>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	220a      	movs	r2, #10
 800797a:	4938      	ldr	r1, [pc, #224]	; (8007a5c <checkDemoModCalisma+0x528>)
 800797c:	4618      	mov	r0, r3
 800797e:	f004 fcfd 	bl	800c37c <itoa>
			lcd_print(2,16,snum);
 8007982:	4a36      	ldr	r2, [pc, #216]	; (8007a5c <checkDemoModCalisma+0x528>)
 8007984:	2110      	movs	r1, #16
 8007986:	2002      	movs	r0, #2
 8007988:	f7f8 ff18 	bl	80007bc <lcd_print>
			mesajYazildi=1;
 800798c:	4b34      	ldr	r3, [pc, #208]	; (8007a60 <checkDemoModCalisma+0x52c>)
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007992:	e03c      	b.n	8007a0e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007994:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <checkDemoModCalisma+0x530>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d003      	beq.n	80079a4 <checkDemoModCalisma+0x470>
 800799c:	4b2c      	ldr	r3, [pc, #176]	; (8007a50 <checkDemoModCalisma+0x51c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d134      	bne.n	8007a0e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80079a4:	2200      	movs	r2, #0
 80079a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079aa:	481b      	ldr	r0, [pc, #108]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80079ac:	f001 fcd1 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80079b0:	2200      	movs	r2, #0
 80079b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079b6:	4818      	ldr	r0, [pc, #96]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80079b8:	f001 fccb 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80079bc:	2200      	movs	r2, #0
 80079be:	2104      	movs	r1, #4
 80079c0:	4815      	ldr	r0, [pc, #84]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80079c2:	f001 fcc6 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80079c6:	2200      	movs	r2, #0
 80079c8:	2102      	movs	r1, #2
 80079ca:	4813      	ldr	r0, [pc, #76]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80079cc:	f001 fcc1 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80079d0:	2200      	movs	r2, #0
 80079d2:	2101      	movs	r1, #1
 80079d4:	4810      	ldr	r0, [pc, #64]	; (8007a18 <checkDemoModCalisma+0x4e4>)
 80079d6:	f001 fcbc 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80079da:	2200      	movs	r2, #0
 80079dc:	2120      	movs	r1, #32
 80079de:	480d      	ldr	r0, [pc, #52]	; (8007a14 <checkDemoModCalisma+0x4e0>)
 80079e0:	f001 fcb7 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80079e4:	2200      	movs	r2, #0
 80079e6:	2110      	movs	r1, #16
 80079e8:	480a      	ldr	r0, [pc, #40]	; (8007a14 <checkDemoModCalisma+0x4e0>)
 80079ea:	f001 fcb2 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2180      	movs	r1, #128	; 0x80
 80079f2:	480b      	ldr	r0, [pc, #44]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 80079f4:	f001 fcad 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80079f8:	2200      	movs	r2, #0
 80079fa:	2140      	movs	r1, #64	; 0x40
 80079fc:	4808      	ldr	r0, [pc, #32]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 80079fe:	f001 fca8 	bl	8009352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2120      	movs	r1, #32
 8007a06:	4806      	ldr	r0, [pc, #24]	; (8007a20 <checkDemoModCalisma+0x4ec>)
 8007a08:	f001 fca3 	bl	8009352 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007a0c:	e7ff      	b.n	8007a0e <checkDemoModCalisma+0x4da>
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	40011000 	.word	0x40011000
 8007a18:	40010c00 	.word	0x40010c00
 8007a1c:	20000375 	.word	0x20000375
 8007a20:	40010800 	.word	0x40010800
 8007a24:	2000029c 	.word	0x2000029c
 8007a28:	200002ac 	.word	0x200002ac
 8007a2c:	20000374 	.word	0x20000374
 8007a30:	2000035a 	.word	0x2000035a
 8007a34:	20000319 	.word	0x20000319
 8007a38:	2000031a 	.word	0x2000031a
 8007a3c:	200000ac 	.word	0x200000ac
 8007a40:	200000ad 	.word	0x200000ad
 8007a44:	2000031b 	.word	0x2000031b
 8007a48:	20000224 	.word	0x20000224
 8007a4c:	20000348 	.word	0x20000348
 8007a50:	20000339 	.word	0x20000339
 8007a54:	0800dbb4 	.word	0x0800dbb4
 8007a58:	0800dbc0 	.word	0x0800dbc0
 8007a5c:	20000294 	.word	0x20000294
 8007a60:	20000350 	.word	0x20000350
 8007a64:	2000033a 	.word	0x2000033a

08007a68 <mainLoop>:

void mainLoop() {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007a6e:	f7fe f923 	bl	8005cb8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007a72:	2101      	movs	r1, #1
 8007a74:	48ac      	ldr	r0, [pc, #688]	; (8007d28 <mainLoop+0x2c0>)
 8007a76:	f001 fc55 	bl	8009324 <HAL_GPIO_ReadPin>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d136      	bne.n	8007aee <mainLoop+0x86>
 8007a80:	2108      	movs	r1, #8
 8007a82:	48aa      	ldr	r0, [pc, #680]	; (8007d2c <mainLoop+0x2c4>)
 8007a84:	f001 fc4e 	bl	8009324 <HAL_GPIO_ReadPin>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d12f      	bne.n	8007aee <mainLoop+0x86>
 8007a8e:	2102      	movs	r1, #2
 8007a90:	48a5      	ldr	r0, [pc, #660]	; (8007d28 <mainLoop+0x2c0>)
 8007a92:	f001 fc47 	bl	8009324 <HAL_GPIO_ReadPin>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d128      	bne.n	8007aee <mainLoop+0x86>
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	48a2      	ldr	r0, [pc, #648]	; (8007d28 <mainLoop+0x2c0>)
 8007aa0:	f001 fc40 	bl	8009324 <HAL_GPIO_ReadPin>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d121      	bne.n	8007aee <mainLoop+0x86>
 8007aaa:	2108      	movs	r1, #8
 8007aac:	489e      	ldr	r0, [pc, #632]	; (8007d28 <mainLoop+0x2c0>)
 8007aae:	f001 fc39 	bl	8009324 <HAL_GPIO_ReadPin>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11a      	bne.n	8007aee <mainLoop+0x86>
 8007ab8:	2180      	movs	r1, #128	; 0x80
 8007aba:	489c      	ldr	r0, [pc, #624]	; (8007d2c <mainLoop+0x2c4>)
 8007abc:	f001 fc32 	bl	8009324 <HAL_GPIO_ReadPin>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d113      	bne.n	8007aee <mainLoop+0x86>
 8007ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aca:	4898      	ldr	r0, [pc, #608]	; (8007d2c <mainLoop+0x2c4>)
 8007acc:	f001 fc2a 	bl	8009324 <HAL_GPIO_ReadPin>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10b      	bne.n	8007aee <mainLoop+0x86>
 8007ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ada:	4894      	ldr	r0, [pc, #592]	; (8007d2c <mainLoop+0x2c4>)
 8007adc:	f001 fc22 	bl	8009324 <HAL_GPIO_ReadPin>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d103      	bne.n	8007aee <mainLoop+0x86>
			butonKontrol=0;
 8007ae6:	4b92      	ldr	r3, [pc, #584]	; (8007d30 <mainLoop+0x2c8>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e003      	b.n	8007af6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007aee:	4b91      	ldr	r3, [pc, #580]	; (8007d34 <mainLoop+0x2cc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a91      	ldr	r2, [pc, #580]	; (8007d38 <mainLoop+0x2d0>)
 8007af4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007af6:	4b91      	ldr	r3, [pc, #580]	; (8007d3c <mainLoop+0x2d4>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d03a      	beq.n	8007b74 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007afe:	bf00      	nop
 8007b00:	488f      	ldr	r0, [pc, #572]	; (8007d40 <mainLoop+0x2d8>)
 8007b02:	f002 fa38 	bl	8009f76 <HAL_I2C_GetError>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	d0f9      	beq.n	8007b00 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b0c:	bf00      	nop
 8007b0e:	488c      	ldr	r0, [pc, #560]	; (8007d40 <mainLoop+0x2d8>)
 8007b10:	f002 fa24 	bl	8009f5c <HAL_I2C_GetState>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d1f9      	bne.n	8007b0e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007b1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b1e:	9302      	str	r3, [sp, #8]
 8007b20:	236e      	movs	r3, #110	; 0x6e
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	4b87      	ldr	r3, [pc, #540]	; (8007d44 <mainLoop+0x2dc>)
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	236e      	movs	r3, #110	; 0x6e
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	21a0      	movs	r1, #160	; 0xa0
 8007b2e:	4884      	ldr	r0, [pc, #528]	; (8007d40 <mainLoop+0x2d8>)
 8007b30:	f001 feb2 	bl	8009898 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b38:	f000 fe24 	bl	8008784 <HAL_Delay>

		  hafizaYaz=0;
 8007b3c:	4b7f      	ldr	r3, [pc, #508]	; (8007d3c <mainLoop+0x2d4>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8007b42:	4b81      	ldr	r3, [pc, #516]	; (8007d48 <mainLoop+0x2e0>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8007b4a:	4a80      	ldr	r2, [pc, #512]	; (8007d4c <mainLoop+0x2e4>)
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	2002      	movs	r0, #2
 8007b50:	f7f8 fe34 	bl	80007bc <lcd_print>
 8007b54:	e008      	b.n	8007b68 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8007b56:	4b7c      	ldr	r3, [pc, #496]	; (8007d48 <mainLoop+0x2e0>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d104      	bne.n	8007b68 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8007b5e:	4a7c      	ldr	r2, [pc, #496]	; (8007d50 <mainLoop+0x2e8>)
 8007b60:	2101      	movs	r1, #1
 8007b62:	2002      	movs	r0, #2
 8007b64:	f7f8 fe2a 	bl	80007bc <lcd_print>
		  }

		  HAL_Delay(1000);
 8007b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b6c:	f000 fe0a 	bl	8008784 <HAL_Delay>
		  lcd_clear();
 8007b70:	f7f8 fe73 	bl	800085a <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007b74:	4b77      	ldr	r3, [pc, #476]	; (8007d54 <mainLoop+0x2ec>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	f083 0301 	eor.w	r3, r3, #1
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d06e      	beq.n	8007c60 <mainLoop+0x1f8>
 8007b82:	486f      	ldr	r0, [pc, #444]	; (8007d40 <mainLoop+0x2d8>)
 8007b84:	f002 f9ea 	bl	8009f5c <HAL_I2C_GetState>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d168      	bne.n	8007c60 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8007b8e:	4b72      	ldr	r3, [pc, #456]	; (8007d58 <mainLoop+0x2f0>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f083 0301 	eor.w	r3, r3, #1
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d044      	beq.n	8007c26 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007b9c:	4a6f      	ldr	r2, [pc, #444]	; (8007d5c <mainLoop+0x2f4>)
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	f7f8 fe0b 	bl	80007bc <lcd_print>
			  if(dilSecim==0) {
 8007ba6:	4b68      	ldr	r3, [pc, #416]	; (8007d48 <mainLoop+0x2e0>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d105      	bne.n	8007bba <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8007bae:	4a6c      	ldr	r2, [pc, #432]	; (8007d60 <mainLoop+0x2f8>)
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	2002      	movs	r0, #2
 8007bb4:	f7f8 fe02 	bl	80007bc <lcd_print>
 8007bb8:	e008      	b.n	8007bcc <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8007bba:	4b63      	ldr	r3, [pc, #396]	; (8007d48 <mainLoop+0x2e0>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d104      	bne.n	8007bcc <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8007bc2:	4a68      	ldr	r2, [pc, #416]	; (8007d64 <mainLoop+0x2fc>)
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	2002      	movs	r0, #2
 8007bc8:	f7f8 fdf8 	bl	80007bc <lcd_print>
			  }
			  HAL_Delay(1000);
 8007bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bd0:	f000 fdd8 	bl	8008784 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bd4:	bf00      	nop
 8007bd6:	485a      	ldr	r0, [pc, #360]	; (8007d40 <mainLoop+0x2d8>)
 8007bd8:	f002 f9cd 	bl	8009f76 <HAL_I2C_GetError>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d0f9      	beq.n	8007bd6 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007be2:	e003      	b.n	8007bec <mainLoop+0x184>
				  HAL_Delay(1000);
 8007be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007be8:	f000 fdcc 	bl	8008784 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007bec:	4854      	ldr	r0, [pc, #336]	; (8007d40 <mainLoop+0x2d8>)
 8007bee:	f002 f9b5 	bl	8009f5c <HAL_I2C_GetState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d1f5      	bne.n	8007be4 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8007bf8:	4b53      	ldr	r3, [pc, #332]	; (8007d48 <mainLoop+0x2e0>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8007c00:	4a59      	ldr	r2, [pc, #356]	; (8007d68 <mainLoop+0x300>)
 8007c02:	2101      	movs	r1, #1
 8007c04:	2002      	movs	r0, #2
 8007c06:	f7f8 fdd9 	bl	80007bc <lcd_print>
 8007c0a:	e008      	b.n	8007c1e <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8007c0c:	4b4e      	ldr	r3, [pc, #312]	; (8007d48 <mainLoop+0x2e0>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d104      	bne.n	8007c1e <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8007c14:	4a55      	ldr	r2, [pc, #340]	; (8007d6c <mainLoop+0x304>)
 8007c16:	2101      	movs	r1, #1
 8007c18:	2002      	movs	r0, #2
 8007c1a:	f7f8 fdcf 	bl	80007bc <lcd_print>
			  }

			  ilkOkuma=1;
 8007c1e:	4b4e      	ldr	r3, [pc, #312]	; (8007d58 <mainLoop+0x2f0>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e014      	b.n	8007c50 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8007c26:	4b48      	ldr	r3, [pc, #288]	; (8007d48 <mainLoop+0x2e0>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d105      	bne.n	8007c3a <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007c2e:	4a50      	ldr	r2, [pc, #320]	; (8007d70 <mainLoop+0x308>)
 8007c30:	2101      	movs	r1, #1
 8007c32:	2002      	movs	r0, #2
 8007c34:	f7f8 fdc2 	bl	80007bc <lcd_print>
 8007c38:	e008      	b.n	8007c4c <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8007c3a:	4b43      	ldr	r3, [pc, #268]	; (8007d48 <mainLoop+0x2e0>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d104      	bne.n	8007c4c <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8007c42:	4a4c      	ldr	r2, [pc, #304]	; (8007d74 <mainLoop+0x30c>)
 8007c44:	2101      	movs	r1, #1
 8007c46:	2002      	movs	r0, #2
 8007c48:	f7f8 fdb8 	bl	80007bc <lcd_print>
			  }
			  lcd_clear();
 8007c4c:	f7f8 fe05 	bl	800085a <lcd_clear>
		  }

		  lcd_clear();
 8007c50:	f7f8 fe03 	bl	800085a <lcd_clear>

		  eepromKontrol(1);
 8007c54:	2001      	movs	r0, #1
 8007c56:	f7fd fbe3 	bl	8005420 <eepromKontrol>
		  hafizaOku=1;
 8007c5a:	4b3e      	ldr	r3, [pc, #248]	; (8007d54 <mainLoop+0x2ec>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007c60:	4b45      	ldr	r3, [pc, #276]	; (8007d78 <mainLoop+0x310>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11c      	bne.n	8007ca2 <mainLoop+0x23a>
 8007c68:	4b44      	ldr	r3, [pc, #272]	; (8007d7c <mainLoop+0x314>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f083 0301 	eor.w	r3, r3, #1
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d015      	beq.n	8007ca2 <mainLoop+0x23a>
 8007c76:	4b42      	ldr	r3, [pc, #264]	; (8007d80 <mainLoop+0x318>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d111      	bne.n	8007ca2 <mainLoop+0x23a>
			lcd_clear();
 8007c7e:	f7f8 fdec 	bl	800085a <lcd_clear>
			HAL_Delay(10);
 8007c82:	200a      	movs	r0, #10
 8007c84:	f000 fd7e 	bl	8008784 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8007c88:	4a3e      	ldr	r2, [pc, #248]	; (8007d84 <mainLoop+0x31c>)
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f7f8 fd95 	bl	80007bc <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007c92:	4a3d      	ldr	r2, [pc, #244]	; (8007d88 <mainLoop+0x320>)
 8007c94:	2101      	movs	r1, #1
 8007c96:	2002      	movs	r0, #2
 8007c98:	f7f8 fd90 	bl	80007bc <lcd_print>
			mesajYazildi=1;
 8007c9c:	4b37      	ldr	r3, [pc, #220]	; (8007d7c <mainLoop+0x314>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007ca2:	4b35      	ldr	r3, [pc, #212]	; (8007d78 <mainLoop+0x310>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d112      	bne.n	8007cd0 <mainLoop+0x268>
 8007caa:	2102      	movs	r1, #2
 8007cac:	481e      	ldr	r0, [pc, #120]	; (8007d28 <mainLoop+0x2c0>)
 8007cae:	f001 fb39 	bl	8009324 <HAL_GPIO_ReadPin>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10b      	bne.n	8007cd0 <mainLoop+0x268>
 8007cb8:	2104      	movs	r1, #4
 8007cba:	481b      	ldr	r0, [pc, #108]	; (8007d28 <mainLoop+0x2c0>)
 8007cbc:	f001 fb32 	bl	8009324 <HAL_GPIO_ReadPin>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d104      	bne.n	8007cd0 <mainLoop+0x268>
			menuGiris=1;
 8007cc6:	4b2c      	ldr	r3, [pc, #176]	; (8007d78 <mainLoop+0x310>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007ccc:	f7f8 fdc5 	bl	800085a <lcd_clear>
		}

		if(menuGiris==1) {
 8007cd0:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <mainLoop+0x310>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <mainLoop+0x274>
			menu();
 8007cd8:	f7f9 fdbe 	bl	8001858 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ce0:	4812      	ldr	r0, [pc, #72]	; (8007d2c <mainLoop+0x2c4>)
 8007ce2:	f001 fb4e 	bl	8009382 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cea:	4828      	ldr	r0, [pc, #160]	; (8007d8c <mainLoop+0x324>)
 8007cec:	f001 fb1a 	bl	8009324 <HAL_GPIO_ReadPin>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <mainLoop+0x2a4>
 8007cf6:	4b26      	ldr	r3, [pc, #152]	; (8007d90 <mainLoop+0x328>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f083 0301 	eor.w	r3, r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <mainLoop+0x2a4>
			stopVar=1;
 8007d04:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <mainLoop+0x32c>)
 8007d06:	2201      	movs	r2, #1
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8007d0c:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <mainLoop+0x32c>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007d12:	f7fd ffe7 	bl	8005ce4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007d16:	f7fe f819 	bl	8005d4c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007d1a:	f7fe f85d 	bl	8005dd8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007d1e:	f7fe f8ad 	bl	8005e7c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007d22:	f7ff fc07 	bl	8007534 <checkDemoModCalisma>
		checkLCDBacklight();
 8007d26:	e6a2      	b.n	8007a6e <mainLoop+0x6>
 8007d28:	40010800 	.word	0x40010800
 8007d2c:	40011000 	.word	0x40011000
 8007d30:	2000034b 	.word	0x2000034b
 8007d34:	2000029c 	.word	0x2000029c
 8007d38:	200002b8 	.word	0x200002b8
 8007d3c:	20000348 	.word	0x20000348
 8007d40:	200003a8 	.word	0x200003a8
 8007d44:	20000224 	.word	0x20000224
 8007d48:	2000033d 	.word	0x2000033d
 8007d4c:	0800dbd4 	.word	0x0800dbd4
 8007d50:	0800dbe8 	.word	0x0800dbe8
 8007d54:	20000349 	.word	0x20000349
 8007d58:	2000034a 	.word	0x2000034a
 8007d5c:	0800dbfc 	.word	0x0800dbfc
 8007d60:	0800dc10 	.word	0x0800dc10
 8007d64:	0800dc24 	.word	0x0800dc24
 8007d68:	0800dc38 	.word	0x0800dc38
 8007d6c:	0800dc4c 	.word	0x0800dc4c
 8007d70:	0800dc60 	.word	0x0800dc60
 8007d74:	0800dc74 	.word	0x0800dc74
 8007d78:	20000339 	.word	0x20000339
 8007d7c:	20000350 	.word	0x20000350
 8007d80:	2000033a 	.word	0x2000033a
 8007d84:	0800dc88 	.word	0x0800dc88
 8007d88:	0800dc9c 	.word	0x0800dc9c
 8007d8c:	40010c00 	.word	0x40010c00
 8007d90:	20000371 	.word	0x20000371
 8007d94:	2000036e 	.word	0x2000036e

08007d98 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3301      	adds	r3, #1
 8007da6:	4a03      	ldr	r2, [pc, #12]	; (8007db4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007da8:	6013      	str	r3, [r2, #0]
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr
 8007db4:	2000029c 	.word	0x2000029c

08007db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dbc:	f000 fc80 	bl	80086c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dc4:	f000 fcde 	bl	8008784 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dc8:	f000 f8b0 	bl	8007f2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dcc:	f000 f9d2 	bl	8008174 <MX_GPIO_Init>
  MX_CAN_Init();
 8007dd0:	f000 f8f2 	bl	8007fb8 <MX_CAN_Init>
  MX_I2C1_Init();
 8007dd4:	f000 f924 	bl	8008020 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007dd8:	f000 f950 	bl	800807c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ddc:	f000 f9a0 	bl	8008120 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007de0:	2201      	movs	r2, #1
 8007de2:	2140      	movs	r1, #64	; 0x40
 8007de4:	4845      	ldr	r0, [pc, #276]	; (8007efc <main+0x144>)
 8007de6:	f001 fab4 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dea:	2201      	movs	r2, #1
 8007dec:	2180      	movs	r1, #128	; 0x80
 8007dee:	4843      	ldr	r0, [pc, #268]	; (8007efc <main+0x144>)
 8007df0:	f001 faaf 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007df4:	200a      	movs	r0, #10
 8007df6:	f000 fcc5 	bl	8008784 <HAL_Delay>
  lcd_init();
 8007dfa:	f7f8 fcad 	bl	8000758 <lcd_init>
  HAL_Delay(10);
 8007dfe:	200a      	movs	r0, #10
 8007e00:	f000 fcc0 	bl	8008784 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e04:	483e      	ldr	r0, [pc, #248]	; (8007f00 <main+0x148>)
 8007e06:	f003 f957 	bl	800b0b8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e0a:	bf00      	nop
 8007e0c:	483d      	ldr	r0, [pc, #244]	; (8007f04 <main+0x14c>)
 8007e0e:	f002 f8b2 	bl	8009f76 <HAL_I2C_GetError>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d0f9      	beq.n	8007e0c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e18:	bf00      	nop
 8007e1a:	483a      	ldr	r0, [pc, #232]	; (8007f04 <main+0x14c>)
 8007e1c:	f002 f89e 	bl	8009f5c <HAL_I2C_GetState>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d1f9      	bne.n	8007e1a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e26:	2200      	movs	r2, #0
 8007e28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e2c:	4833      	ldr	r0, [pc, #204]	; (8007efc <main+0x144>)
 8007e2e:	f001 fa90 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e32:	2200      	movs	r2, #0
 8007e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e38:	4830      	ldr	r0, [pc, #192]	; (8007efc <main+0x144>)
 8007e3a:	f001 fa8a 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2104      	movs	r1, #4
 8007e42:	482e      	ldr	r0, [pc, #184]	; (8007efc <main+0x144>)
 8007e44:	f001 fa85 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	482b      	ldr	r0, [pc, #172]	; (8007efc <main+0x144>)
 8007e4e:	f001 fa80 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e52:	2200      	movs	r2, #0
 8007e54:	2101      	movs	r1, #1
 8007e56:	4829      	ldr	r0, [pc, #164]	; (8007efc <main+0x144>)
 8007e58:	f001 fa7b 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2120      	movs	r1, #32
 8007e60:	4829      	ldr	r0, [pc, #164]	; (8007f08 <main+0x150>)
 8007e62:	f001 fa76 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2110      	movs	r1, #16
 8007e6a:	4827      	ldr	r0, [pc, #156]	; (8007f08 <main+0x150>)
 8007e6c:	f001 fa71 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e70:	2200      	movs	r2, #0
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	4825      	ldr	r0, [pc, #148]	; (8007f0c <main+0x154>)
 8007e76:	f001 fa6c 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	4823      	ldr	r0, [pc, #140]	; (8007f0c <main+0x154>)
 8007e80:	f001 fa67 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e84:	2200      	movs	r2, #0
 8007e86:	2120      	movs	r1, #32
 8007e88:	4820      	ldr	r0, [pc, #128]	; (8007f0c <main+0x154>)
 8007e8a:	f001 fa62 	bl	8009352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2110      	movs	r1, #16
 8007e92:	481e      	ldr	r0, [pc, #120]	; (8007f0c <main+0x154>)
 8007e94:	f001 fa5d 	bl	8009352 <HAL_GPIO_WritePin>

  i2cTest();
 8007e98:	f7fd fe60 	bl	8005b5c <i2cTest>
  HAL_Delay(100);
 8007e9c:	2064      	movs	r0, #100	; 0x64
 8007e9e:	f000 fc71 	bl	8008784 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <main+0x158>)
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f7f8 fc88 	bl	80007bc <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007eac:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <main+0x15c>)
 8007eae:	2101      	movs	r1, #1
 8007eb0:	2002      	movs	r0, #2
 8007eb2:	f7f8 fc83 	bl	80007bc <lcd_print>
  HAL_Delay(1000);
 8007eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eba:	f000 fc63 	bl	8008784 <HAL_Delay>
  lcd_clear();
 8007ebe:	f7f8 fccc 	bl	800085a <lcd_clear>

  eepromKontrol(0);
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f7fd faac 	bl	8005420 <eepromKontrol>
  HAL_Delay(200);
 8007ec8:	20c8      	movs	r0, #200	; 0xc8
 8007eca:	f000 fc5b 	bl	8008784 <HAL_Delay>

  lcd_clear();
 8007ece:	f7f8 fcc4 	bl	800085a <lcd_clear>
  HAL_Delay(200);
 8007ed2:	20c8      	movs	r0, #200	; 0xc8
 8007ed4:	f000 fc56 	bl	8008784 <HAL_Delay>

  backLightTimer = millis;
 8007ed8:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <main+0x160>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a0f      	ldr	r2, [pc, #60]	; (8007f1c <main+0x164>)
 8007ede:	6013      	str	r3, [r2, #0]
	  if(wifiPass[0] != '\0') {
		  takeWifiPass(0);
	  }
  }*/

  ESP8266_Init(&huart1, "iPhone", "ipek123456");
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <main+0x168>)
 8007ee2:	4910      	ldr	r1, [pc, #64]	; (8007f24 <main+0x16c>)
 8007ee4:	4810      	ldr	r0, [pc, #64]	; (8007f28 <main+0x170>)
 8007ee6:	f7f8 f9a5 	bl	8000234 <ESP8266_Init>
  HAL_Delay(250);
 8007eea:	20fa      	movs	r0, #250	; 0xfa
 8007eec:	f000 fc4a 	bl	8008784 <HAL_Delay>
  convertAndSendData();
 8007ef0:	f7fd fa62 	bl	80053b8 <convertAndSendData>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ef4:	f7ff fdb8 	bl	8007a68 <mainLoop>
 8007ef8:	e7fc      	b.n	8007ef4 <main+0x13c>
 8007efa:	bf00      	nop
 8007efc:	40010c00 	.word	0x40010c00
 8007f00:	200003fc 	.word	0x200003fc
 8007f04:	200003a8 	.word	0x200003a8
 8007f08:	40011000 	.word	0x40011000
 8007f0c:	40010800 	.word	0x40010800
 8007f10:	0800dcb0 	.word	0x0800dcb0
 8007f14:	0800dcc4 	.word	0x0800dcc4
 8007f18:	2000029c 	.word	0x2000029c
 8007f1c:	200002b8 	.word	0x200002b8
 8007f20:	0800dcd8 	.word	0x0800dcd8
 8007f24:	0800dce4 	.word	0x0800dce4
 8007f28:	20000444 	.word	0x20000444

08007f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b090      	sub	sp, #64	; 0x40
 8007f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f32:	f107 0318 	add.w	r3, r7, #24
 8007f36:	2228      	movs	r2, #40	; 0x28
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f004 fb58 	bl	800c5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f40:	1d3b      	adds	r3, r7, #4
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	609a      	str	r2, [r3, #8]
 8007f4a:	60da      	str	r2, [r3, #12]
 8007f4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f60:	2302      	movs	r3, #2
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f70:	f107 0318 	add.w	r3, r7, #24
 8007f74:	4618      	mov	r0, r3
 8007f76:	f002 fc3f 	bl	800a7f8 <HAL_RCC_OscConfig>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f80:	f000 f9a2 	bl	80082c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f84:	230f      	movs	r3, #15
 8007f86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f002 feac 	bl	800acfc <HAL_RCC_ClockConfig>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007faa:	f000 f98d 	bl	80082c8 <Error_Handler>
  }
}
 8007fae:	bf00      	nop
 8007fb0:	3740      	adds	r7, #64	; 0x40
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007fbc:	4b16      	ldr	r3, [pc, #88]	; (8008018 <MX_CAN_Init+0x60>)
 8007fbe:	4a17      	ldr	r2, [pc, #92]	; (800801c <MX_CAN_Init+0x64>)
 8007fc0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007fc2:	4b15      	ldr	r3, [pc, #84]	; (8008018 <MX_CAN_Init+0x60>)
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <MX_CAN_Init+0x60>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <MX_CAN_Init+0x60>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007fd4:	4b10      	ldr	r3, [pc, #64]	; (8008018 <MX_CAN_Init+0x60>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007fda:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <MX_CAN_Init+0x60>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <MX_CAN_Init+0x60>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <MX_CAN_Init+0x60>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <MX_CAN_Init+0x60>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <MX_CAN_Init+0x60>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <MX_CAN_Init+0x60>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <MX_CAN_Init+0x60>)
 8008000:	2200      	movs	r2, #0
 8008002:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008004:	4804      	ldr	r0, [pc, #16]	; (8008018 <MX_CAN_Init+0x60>)
 8008006:	f000 fbe1 	bl	80087cc <HAL_CAN_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008010:	f000 f95a 	bl	80082c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008014:	bf00      	nop
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000380 	.word	0x20000380
 800801c:	40006400 	.word	0x40006400

08008020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008024:	4b12      	ldr	r3, [pc, #72]	; (8008070 <MX_I2C1_Init+0x50>)
 8008026:	4a13      	ldr	r2, [pc, #76]	; (8008074 <MX_I2C1_Init+0x54>)
 8008028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <MX_I2C1_Init+0x50>)
 800802c:	4a12      	ldr	r2, [pc, #72]	; (8008078 <MX_I2C1_Init+0x58>)
 800802e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <MX_I2C1_Init+0x50>)
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <MX_I2C1_Init+0x50>)
 8008038:	2200      	movs	r2, #0
 800803a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <MX_I2C1_Init+0x50>)
 800803e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008042:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <MX_I2C1_Init+0x50>)
 8008046:	2200      	movs	r2, #0
 8008048:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <MX_I2C1_Init+0x50>)
 800804c:	2200      	movs	r2, #0
 800804e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <MX_I2C1_Init+0x50>)
 8008052:	2200      	movs	r2, #0
 8008054:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <MX_I2C1_Init+0x50>)
 8008058:	2200      	movs	r2, #0
 800805a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800805c:	4804      	ldr	r0, [pc, #16]	; (8008070 <MX_I2C1_Init+0x50>)
 800805e:	f001 f9a9 	bl	80093b4 <HAL_I2C_Init>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008068:	f000 f92e 	bl	80082c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800806c:	bf00      	nop
 800806e:	bd80      	pop	{r7, pc}
 8008070:	200003a8 	.word	0x200003a8
 8008074:	40005400 	.word	0x40005400
 8008078:	00061a80 	.word	0x00061a80

0800807c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008082:	f107 0308 	add.w	r3, r7, #8
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	609a      	str	r2, [r3, #8]
 800808e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008090:	463b      	mov	r3, r7
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008098:	4b1f      	ldr	r3, [pc, #124]	; (8008118 <MX_TIM1_Init+0x9c>)
 800809a:	4a20      	ldr	r2, [pc, #128]	; (800811c <MX_TIM1_Init+0xa0>)
 800809c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800809e:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080a0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80080a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80080ac:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80080b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080b4:	4b18      	ldr	r3, [pc, #96]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080ba:	4b17      	ldr	r3, [pc, #92]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080bc:	2200      	movs	r2, #0
 80080be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c0:	4b15      	ldr	r3, [pc, #84]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80080c6:	4814      	ldr	r0, [pc, #80]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080c8:	f002 ffa6 	bl	800b018 <HAL_TIM_Base_Init>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80080d2:	f000 f8f9 	bl	80082c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080dc:	f107 0308 	add.w	r3, r7, #8
 80080e0:	4619      	mov	r1, r3
 80080e2:	480d      	ldr	r0, [pc, #52]	; (8008118 <MX_TIM1_Init+0x9c>)
 80080e4:	f003 f950 	bl	800b388 <HAL_TIM_ConfigClockSource>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080ee:	f000 f8eb 	bl	80082c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080f2:	2300      	movs	r3, #0
 80080f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080fa:	463b      	mov	r3, r7
 80080fc:	4619      	mov	r1, r3
 80080fe:	4806      	ldr	r0, [pc, #24]	; (8008118 <MX_TIM1_Init+0x9c>)
 8008100:	f003 fb3e 	bl	800b780 <HAL_TIMEx_MasterConfigSynchronization>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800810a:	f000 f8dd 	bl	80082c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200003fc 	.word	0x200003fc
 800811c:	40012c00 	.word	0x40012c00

08008120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008124:	4b11      	ldr	r3, [pc, #68]	; (800816c <MX_USART1_UART_Init+0x4c>)
 8008126:	4a12      	ldr	r2, [pc, #72]	; (8008170 <MX_USART1_UART_Init+0x50>)
 8008128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800812a:	4b10      	ldr	r3, [pc, #64]	; (800816c <MX_USART1_UART_Init+0x4c>)
 800812c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <MX_USART1_UART_Init+0x4c>)
 8008134:	2200      	movs	r2, #0
 8008136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <MX_USART1_UART_Init+0x4c>)
 800813a:	2200      	movs	r2, #0
 800813c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800813e:	4b0b      	ldr	r3, [pc, #44]	; (800816c <MX_USART1_UART_Init+0x4c>)
 8008140:	2200      	movs	r2, #0
 8008142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008144:	4b09      	ldr	r3, [pc, #36]	; (800816c <MX_USART1_UART_Init+0x4c>)
 8008146:	220c      	movs	r2, #12
 8008148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800814a:	4b08      	ldr	r3, [pc, #32]	; (800816c <MX_USART1_UART_Init+0x4c>)
 800814c:	2200      	movs	r2, #0
 800814e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <MX_USART1_UART_Init+0x4c>)
 8008152:	2200      	movs	r2, #0
 8008154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <MX_USART1_UART_Init+0x4c>)
 8008158:	f003 fb90 	bl	800b87c <HAL_UART_Init>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008162:	f000 f8b1 	bl	80082c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008166:	bf00      	nop
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000444 	.word	0x20000444
 8008170:	40013800 	.word	0x40013800

08008174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800817a:	f107 0310 	add.w	r3, r7, #16
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	605a      	str	r2, [r3, #4]
 8008184:	609a      	str	r2, [r3, #8]
 8008186:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008188:	4b4b      	ldr	r3, [pc, #300]	; (80082b8 <MX_GPIO_Init+0x144>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4a4a      	ldr	r2, [pc, #296]	; (80082b8 <MX_GPIO_Init+0x144>)
 800818e:	f043 0310 	orr.w	r3, r3, #16
 8008192:	6193      	str	r3, [r2, #24]
 8008194:	4b48      	ldr	r3, [pc, #288]	; (80082b8 <MX_GPIO_Init+0x144>)
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081a0:	4b45      	ldr	r3, [pc, #276]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4a44      	ldr	r2, [pc, #272]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081a6:	f043 0320 	orr.w	r3, r3, #32
 80081aa:	6193      	str	r3, [r2, #24]
 80081ac:	4b42      	ldr	r3, [pc, #264]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b8:	4b3f      	ldr	r3, [pc, #252]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	4a3e      	ldr	r2, [pc, #248]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081be:	f043 0304 	orr.w	r3, r3, #4
 80081c2:	6193      	str	r3, [r2, #24]
 80081c4:	4b3c      	ldr	r3, [pc, #240]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	607b      	str	r3, [r7, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d0:	4b39      	ldr	r3, [pc, #228]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	4a38      	ldr	r2, [pc, #224]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081d6:	f043 0308 	orr.w	r3, r3, #8
 80081da:	6193      	str	r3, [r2, #24]
 80081dc:	4b36      	ldr	r3, [pc, #216]	; (80082b8 <MX_GPIO_Init+0x144>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081e8:	2200      	movs	r2, #0
 80081ea:	21f0      	movs	r1, #240	; 0xf0
 80081ec:	4833      	ldr	r0, [pc, #204]	; (80082bc <MX_GPIO_Init+0x148>)
 80081ee:	f001 f8b0 	bl	8009352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081f2:	2200      	movs	r2, #0
 80081f4:	f241 0130 	movw	r1, #4144	; 0x1030
 80081f8:	4831      	ldr	r0, [pc, #196]	; (80082c0 <MX_GPIO_Init+0x14c>)
 80081fa:	f001 f8aa 	bl	8009352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081fe:	2200      	movs	r2, #0
 8008200:	f640 4107 	movw	r1, #3079	; 0xc07
 8008204:	482f      	ldr	r0, [pc, #188]	; (80082c4 <MX_GPIO_Init+0x150>)
 8008206:	f001 f8a4 	bl	8009352 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800820a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800820e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008218:	f107 0310 	add.w	r3, r7, #16
 800821c:	4619      	mov	r1, r3
 800821e:	4828      	ldr	r0, [pc, #160]	; (80082c0 <MX_GPIO_Init+0x14c>)
 8008220:	f000 fe20 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008224:	f248 130f 	movw	r3, #33039	; 0x810f
 8008228:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008232:	f107 0310 	add.w	r3, r7, #16
 8008236:	4619      	mov	r1, r3
 8008238:	4820      	ldr	r0, [pc, #128]	; (80082bc <MX_GPIO_Init+0x148>)
 800823a:	f000 fe13 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800823e:	23f0      	movs	r3, #240	; 0xf0
 8008240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008242:	2301      	movs	r3, #1
 8008244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008246:	2300      	movs	r3, #0
 8008248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800824a:	2302      	movs	r3, #2
 800824c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800824e:	f107 0310 	add.w	r3, r7, #16
 8008252:	4619      	mov	r1, r3
 8008254:	4819      	ldr	r0, [pc, #100]	; (80082bc <MX_GPIO_Init+0x148>)
 8008256:	f000 fe05 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800825a:	f241 0330 	movw	r3, #4144	; 0x1030
 800825e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008268:	2302      	movs	r3, #2
 800826a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800826c:	f107 0310 	add.w	r3, r7, #16
 8008270:	4619      	mov	r1, r3
 8008272:	4813      	ldr	r0, [pc, #76]	; (80082c0 <MX_GPIO_Init+0x14c>)
 8008274:	f000 fdf6 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008278:	f640 4307 	movw	r3, #3079	; 0xc07
 800827c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800827e:	2301      	movs	r3, #1
 8008280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008286:	2302      	movs	r3, #2
 8008288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800828a:	f107 0310 	add.w	r3, r7, #16
 800828e:	4619      	mov	r1, r3
 8008290:	480c      	ldr	r0, [pc, #48]	; (80082c4 <MX_GPIO_Init+0x150>)
 8008292:	f000 fde7 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008296:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800829a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082a4:	f107 0310 	add.w	r3, r7, #16
 80082a8:	4619      	mov	r1, r3
 80082aa:	4806      	ldr	r0, [pc, #24]	; (80082c4 <MX_GPIO_Init+0x150>)
 80082ac:	f000 fdda 	bl	8008e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80082b0:	bf00      	nop
 80082b2:	3720      	adds	r7, #32
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40021000 	.word	0x40021000
 80082bc:	40010800 	.word	0x40010800
 80082c0:	40011000 	.word	0x40011000
 80082c4:	40010c00 	.word	0x40010c00

080082c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80082cc:	bf00      	nop
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bc80      	pop	{r7}
 80082d2:	4770      	bx	lr

080082d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <HAL_MspInit+0x5c>)
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	4a14      	ldr	r2, [pc, #80]	; (8008330 <HAL_MspInit+0x5c>)
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	6193      	str	r3, [r2, #24]
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <HAL_MspInit+0x5c>)
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	60bb      	str	r3, [r7, #8]
 80082f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <HAL_MspInit+0x5c>)
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	4a0e      	ldr	r2, [pc, #56]	; (8008330 <HAL_MspInit+0x5c>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fc:	61d3      	str	r3, [r2, #28]
 80082fe:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <HAL_MspInit+0x5c>)
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <HAL_MspInit+0x60>)
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	4a04      	ldr	r2, [pc, #16]	; (8008334 <HAL_MspInit+0x60>)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr
 8008330:	40021000 	.word	0x40021000
 8008334:	40010000 	.word	0x40010000

08008338 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008340:	f107 0310 	add.w	r3, r7, #16
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1c      	ldr	r2, [pc, #112]	; (80083c4 <HAL_CAN_MspInit+0x8c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d131      	bne.n	80083bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008358:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <HAL_CAN_MspInit+0x90>)
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <HAL_CAN_MspInit+0x90>)
 800835e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008362:	61d3      	str	r3, [r2, #28]
 8008364:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <HAL_CAN_MspInit+0x90>)
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008370:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <HAL_CAN_MspInit+0x90>)
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	4a14      	ldr	r2, [pc, #80]	; (80083c8 <HAL_CAN_MspInit+0x90>)
 8008376:	f043 0304 	orr.w	r3, r3, #4
 800837a:	6193      	str	r3, [r2, #24]
 800837c:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <HAL_CAN_MspInit+0x90>)
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	60bb      	str	r3, [r7, #8]
 8008386:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800838c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008396:	f107 0310 	add.w	r3, r7, #16
 800839a:	4619      	mov	r1, r3
 800839c:	480b      	ldr	r0, [pc, #44]	; (80083cc <HAL_CAN_MspInit+0x94>)
 800839e:	f000 fd61 	bl	8008e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a8:	2302      	movs	r3, #2
 80083aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083ac:	2303      	movs	r3, #3
 80083ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b0:	f107 0310 	add.w	r3, r7, #16
 80083b4:	4619      	mov	r1, r3
 80083b6:	4805      	ldr	r0, [pc, #20]	; (80083cc <HAL_CAN_MspInit+0x94>)
 80083b8:	f000 fd54 	bl	8008e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80083bc:	bf00      	nop
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40006400 	.word	0x40006400
 80083c8:	40021000 	.word	0x40021000
 80083cc:	40010800 	.word	0x40010800

080083d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d8:	f107 0310 	add.w	r3, r7, #16
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a15      	ldr	r2, [pc, #84]	; (8008440 <HAL_I2C_MspInit+0x70>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d123      	bne.n	8008438 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083f0:	4b14      	ldr	r3, [pc, #80]	; (8008444 <HAL_I2C_MspInit+0x74>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	4a13      	ldr	r2, [pc, #76]	; (8008444 <HAL_I2C_MspInit+0x74>)
 80083f6:	f043 0308 	orr.w	r3, r3, #8
 80083fa:	6193      	str	r3, [r2, #24]
 80083fc:	4b11      	ldr	r3, [pc, #68]	; (8008444 <HAL_I2C_MspInit+0x74>)
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008408:	23c0      	movs	r3, #192	; 0xc0
 800840a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800840c:	2312      	movs	r3, #18
 800840e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008410:	2303      	movs	r3, #3
 8008412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008414:	f107 0310 	add.w	r3, r7, #16
 8008418:	4619      	mov	r1, r3
 800841a:	480b      	ldr	r0, [pc, #44]	; (8008448 <HAL_I2C_MspInit+0x78>)
 800841c:	f000 fd22 	bl	8008e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008420:	4b08      	ldr	r3, [pc, #32]	; (8008444 <HAL_I2C_MspInit+0x74>)
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	4a07      	ldr	r2, [pc, #28]	; (8008444 <HAL_I2C_MspInit+0x74>)
 8008426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800842a:	61d3      	str	r3, [r2, #28]
 800842c:	4b05      	ldr	r3, [pc, #20]	; (8008444 <HAL_I2C_MspInit+0x74>)
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008438:	bf00      	nop
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40005400 	.word	0x40005400
 8008444:	40021000 	.word	0x40021000
 8008448:	40010c00 	.word	0x40010c00

0800844c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a0a      	ldr	r2, [pc, #40]	; (8008484 <HAL_I2C_MspDeInit+0x38>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d10d      	bne.n	800847a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800845e:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <HAL_I2C_MspDeInit+0x3c>)
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <HAL_I2C_MspDeInit+0x3c>)
 8008464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008468:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800846a:	2140      	movs	r1, #64	; 0x40
 800846c:	4807      	ldr	r0, [pc, #28]	; (800848c <HAL_I2C_MspDeInit+0x40>)
 800846e:	f000 fe8d 	bl	800918c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008472:	2180      	movs	r1, #128	; 0x80
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <HAL_I2C_MspDeInit+0x40>)
 8008476:	f000 fe89 	bl	800918c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	40005400 	.word	0x40005400
 8008488:	40021000 	.word	0x40021000
 800848c:	40010c00 	.word	0x40010c00

08008490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a0d      	ldr	r2, [pc, #52]	; (80084d4 <HAL_TIM_Base_MspInit+0x44>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d113      	bne.n	80084ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084a2:	4b0d      	ldr	r3, [pc, #52]	; (80084d8 <HAL_TIM_Base_MspInit+0x48>)
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	4a0c      	ldr	r2, [pc, #48]	; (80084d8 <HAL_TIM_Base_MspInit+0x48>)
 80084a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084ac:	6193      	str	r3, [r2, #24]
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <HAL_TIM_Base_MspInit+0x48>)
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	2019      	movs	r0, #25
 80084c0:	f000 fb57 	bl	8008b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80084c4:	2019      	movs	r0, #25
 80084c6:	f000 fb70 	bl	8008baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40012c00 	.word	0x40012c00
 80084d8:	40021000 	.word	0x40021000

080084dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084e4:	f107 0310 	add.w	r3, r7, #16
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	605a      	str	r2, [r3, #4]
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a20      	ldr	r2, [pc, #128]	; (8008578 <HAL_UART_MspInit+0x9c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d139      	bne.n	8008570 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084fc:	4b1f      	ldr	r3, [pc, #124]	; (800857c <HAL_UART_MspInit+0xa0>)
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	4a1e      	ldr	r2, [pc, #120]	; (800857c <HAL_UART_MspInit+0xa0>)
 8008502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008506:	6193      	str	r3, [r2, #24]
 8008508:	4b1c      	ldr	r3, [pc, #112]	; (800857c <HAL_UART_MspInit+0xa0>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008514:	4b19      	ldr	r3, [pc, #100]	; (800857c <HAL_UART_MspInit+0xa0>)
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	4a18      	ldr	r2, [pc, #96]	; (800857c <HAL_UART_MspInit+0xa0>)
 800851a:	f043 0304 	orr.w	r3, r3, #4
 800851e:	6193      	str	r3, [r2, #24]
 8008520:	4b16      	ldr	r3, [pc, #88]	; (800857c <HAL_UART_MspInit+0xa0>)
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800852c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008532:	2302      	movs	r3, #2
 8008534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008536:	2303      	movs	r3, #3
 8008538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800853a:	f107 0310 	add.w	r3, r7, #16
 800853e:	4619      	mov	r1, r3
 8008540:	480f      	ldr	r0, [pc, #60]	; (8008580 <HAL_UART_MspInit+0xa4>)
 8008542:	f000 fc8f 	bl	8008e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008554:	f107 0310 	add.w	r3, r7, #16
 8008558:	4619      	mov	r1, r3
 800855a:	4809      	ldr	r0, [pc, #36]	; (8008580 <HAL_UART_MspInit+0xa4>)
 800855c:	f000 fc82 	bl	8008e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008560:	2200      	movs	r2, #0
 8008562:	2100      	movs	r1, #0
 8008564:	2025      	movs	r0, #37	; 0x25
 8008566:	f000 fb04 	bl	8008b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800856a:	2025      	movs	r0, #37	; 0x25
 800856c:	f000 fb1d 	bl	8008baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008570:	bf00      	nop
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40013800 	.word	0x40013800
 800857c:	40021000 	.word	0x40021000
 8008580:	40010800 	.word	0x40010800

08008584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008588:	e7fe      	b.n	8008588 <NMI_Handler+0x4>

0800858a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800858a:	b480      	push	{r7}
 800858c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800858e:	e7fe      	b.n	800858e <HardFault_Handler+0x4>

08008590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008594:	e7fe      	b.n	8008594 <MemManage_Handler+0x4>

08008596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008596:	b480      	push	{r7}
 8008598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800859a:	e7fe      	b.n	800859a <BusFault_Handler+0x4>

0800859c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085a0:	e7fe      	b.n	80085a0 <UsageFault_Handler+0x4>

080085a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085a2:	b480      	push	{r7}
 80085a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085a6:	bf00      	nop
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085ae:	b480      	push	{r7}
 80085b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085b2:	bf00      	nop
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr

080085ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085ba:	b480      	push	{r7}
 80085bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	4770      	bx	lr

080085c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80085ca:	f000 f8bf 	bl	800874c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80085ce:	bf00      	nop
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80085d8:	4802      	ldr	r0, [pc, #8]	; (80085e4 <TIM1_UP_IRQHandler+0x10>)
 80085da:	f002 fdcd 	bl	800b178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80085de:	bf00      	nop
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	200003fc 	.word	0x200003fc

080085e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085ec:	4802      	ldr	r0, [pc, #8]	; (80085f8 <USART1_IRQHandler+0x10>)
 80085ee:	f003 f9cb 	bl	800b988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000444 	.word	0x20000444

080085fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008604:	4a14      	ldr	r2, [pc, #80]	; (8008658 <_sbrk+0x5c>)
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <_sbrk+0x60>)
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008610:	4b13      	ldr	r3, [pc, #76]	; (8008660 <_sbrk+0x64>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <_sbrk+0x64>)
 800861a:	4a12      	ldr	r2, [pc, #72]	; (8008664 <_sbrk+0x68>)
 800861c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800861e:	4b10      	ldr	r3, [pc, #64]	; (8008660 <_sbrk+0x64>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	429a      	cmp	r2, r3
 800862a:	d207      	bcs.n	800863c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800862c:	f003 fff8 	bl	800c620 <__errno>
 8008630:	4603      	mov	r3, r0
 8008632:	220c      	movs	r2, #12
 8008634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800863a:	e009      	b.n	8008650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800863c:	4b08      	ldr	r3, [pc, #32]	; (8008660 <_sbrk+0x64>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008642:	4b07      	ldr	r3, [pc, #28]	; (8008660 <_sbrk+0x64>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	4a05      	ldr	r2, [pc, #20]	; (8008660 <_sbrk+0x64>)
 800864c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800864e:	68fb      	ldr	r3, [r7, #12]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	2000c000 	.word	0x2000c000
 800865c:	00000400 	.word	0x00000400
 8008660:	2000048c 	.word	0x2000048c
 8008664:	200005e0 	.word	0x200005e0

08008668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800866c:	bf00      	nop
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr

08008674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008674:	480c      	ldr	r0, [pc, #48]	; (80086a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008676:	490d      	ldr	r1, [pc, #52]	; (80086ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008678:	4a0d      	ldr	r2, [pc, #52]	; (80086b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800867a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800867c:	e002      	b.n	8008684 <LoopCopyDataInit>

0800867e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800867e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008682:	3304      	adds	r3, #4

08008684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008688:	d3f9      	bcc.n	800867e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800868c:	4c0a      	ldr	r4, [pc, #40]	; (80086b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800868e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008690:	e001      	b.n	8008696 <LoopFillZerobss>

08008692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008694:	3204      	adds	r2, #4

08008696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008698:	d3fb      	bcc.n	8008692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800869a:	f7ff ffe5 	bl	8008668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800869e:	f003 ffc5 	bl	800c62c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086a2:	f7ff fb89 	bl	8007db8 <main>
  bx lr
 80086a6:	4770      	bx	lr
  ldr r0, =_sdata
 80086a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086ac:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80086b0:	0800dd78 	.word	0x0800dd78
  ldr r2, =_sbss
 80086b4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80086b8:	200005dc 	.word	0x200005dc

080086bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086bc:	e7fe      	b.n	80086bc <ADC1_2_IRQHandler>
	...

080086c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086c4:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <HAL_Init+0x28>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a07      	ldr	r2, [pc, #28]	; (80086e8 <HAL_Init+0x28>)
 80086ca:	f043 0310 	orr.w	r3, r3, #16
 80086ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086d0:	2003      	movs	r0, #3
 80086d2:	f000 fa43 	bl	8008b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086d6:	200f      	movs	r0, #15
 80086d8:	f000 f808 	bl	80086ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086dc:	f7ff fdfa 	bl	80082d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40022000 	.word	0x40022000

080086ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086f4:	4b12      	ldr	r3, [pc, #72]	; (8008740 <HAL_InitTick+0x54>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	4b12      	ldr	r3, [pc, #72]	; (8008744 <HAL_InitTick+0x58>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4619      	mov	r1, r3
 80086fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008702:	fbb3 f3f1 	udiv	r3, r3, r1
 8008706:	fbb2 f3f3 	udiv	r3, r2, r3
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fa5b 	bl	8008bc6 <HAL_SYSTICK_Config>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e00e      	b.n	8008738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d80a      	bhi.n	8008736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008720:	2200      	movs	r2, #0
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008728:	f000 fa23 	bl	8008b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800872c:	4a06      	ldr	r2, [pc, #24]	; (8008748 <HAL_InitTick+0x5c>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	e000      	b.n	8008738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	200000b0 	.word	0x200000b0
 8008744:	200000b8 	.word	0x200000b8
 8008748:	200000b4 	.word	0x200000b4

0800874c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <HAL_IncTick+0x1c>)
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <HAL_IncTick+0x20>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4413      	add	r3, r2
 800875c:	4a03      	ldr	r2, [pc, #12]	; (800876c <HAL_IncTick+0x20>)
 800875e:	6013      	str	r3, [r2, #0]
}
 8008760:	bf00      	nop
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr
 8008768:	200000b8 	.word	0x200000b8
 800876c:	20000490 	.word	0x20000490

08008770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
  return uwTick;
 8008774:	4b02      	ldr	r3, [pc, #8]	; (8008780 <HAL_GetTick+0x10>)
 8008776:	681b      	ldr	r3, [r3, #0]
}
 8008778:	4618      	mov	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr
 8008780:	20000490 	.word	0x20000490

08008784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800878c:	f7ff fff0 	bl	8008770 <HAL_GetTick>
 8008790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879c:	d005      	beq.n	80087aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800879e:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <HAL_Delay+0x44>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087aa:	bf00      	nop
 80087ac:	f7ff ffe0 	bl	8008770 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d8f7      	bhi.n	80087ac <HAL_Delay+0x28>
  {
  }
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	200000b8 	.word	0x200000b8

080087cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e0ed      	b.n	80089ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff fda4 	bl	8008338 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0201 	orr.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008800:	f7ff ffb6 	bl	8008770 <HAL_GetTick>
 8008804:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008806:	e012      	b.n	800882e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008808:	f7ff ffb2 	bl	8008770 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b0a      	cmp	r3, #10
 8008814:	d90b      	bls.n	800882e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2205      	movs	r2, #5
 8008826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e0c5      	b.n	80089ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0e5      	beq.n	8008808 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0202 	bic.w	r2, r2, #2
 800884a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800884c:	f7ff ff90 	bl	8008770 <HAL_GetTick>
 8008850:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008852:	e012      	b.n	800887a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008854:	f7ff ff8c 	bl	8008770 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b0a      	cmp	r3, #10
 8008860:	d90b      	bls.n	800887a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2205      	movs	r2, #5
 8008872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e09f      	b.n	80089ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e5      	bne.n	8008854 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	7e1b      	ldrb	r3, [r3, #24]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d108      	bne.n	80088a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e007      	b.n	80088b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7e5b      	ldrb	r3, [r3, #25]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d108      	bne.n	80088cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e007      	b.n	80088dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7e9b      	ldrb	r3, [r3, #26]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d108      	bne.n	80088f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0220 	orr.w	r2, r2, #32
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	e007      	b.n	8008906 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0220 	bic.w	r2, r2, #32
 8008904:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7edb      	ldrb	r3, [r3, #27]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d108      	bne.n	8008920 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0210 	bic.w	r2, r2, #16
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e007      	b.n	8008930 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0210 	orr.w	r2, r2, #16
 800892e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7f1b      	ldrb	r3, [r3, #28]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d108      	bne.n	800894a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0208 	orr.w	r2, r2, #8
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e007      	b.n	800895a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0208 	bic.w	r2, r2, #8
 8008958:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	7f5b      	ldrb	r3, [r3, #29]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d108      	bne.n	8008974 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0204 	orr.w	r2, r2, #4
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e007      	b.n	8008984 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0204 	bic.w	r2, r2, #4
 8008982:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	ea42 0103 	orr.w	r1, r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <__NVIC_SetPriorityGrouping>:
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089d4:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <__NVIC_SetPriorityGrouping+0x44>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089e0:	4013      	ands	r3, r2
 80089e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089f6:	4a04      	ldr	r2, [pc, #16]	; (8008a08 <__NVIC_SetPriorityGrouping+0x44>)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	60d3      	str	r3, [r2, #12]
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bc80      	pop	{r7}
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	e000ed00 	.word	0xe000ed00

08008a0c <__NVIC_GetPriorityGrouping>:
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <__NVIC_GetPriorityGrouping+0x18>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	0a1b      	lsrs	r3, r3, #8
 8008a16:	f003 0307 	and.w	r3, r3, #7
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	e000ed00 	.word	0xe000ed00

08008a28 <__NVIC_EnableIRQ>:
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	db0b      	blt.n	8008a52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	f003 021f 	and.w	r2, r3, #31
 8008a40:	4906      	ldr	r1, [pc, #24]	; (8008a5c <__NVIC_EnableIRQ+0x34>)
 8008a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	2001      	movs	r0, #1
 8008a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8008a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	e000e100 	.word	0xe000e100

08008a60 <__NVIC_SetPriority>:
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	db0a      	blt.n	8008a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	490c      	ldr	r1, [pc, #48]	; (8008aac <__NVIC_SetPriority+0x4c>)
 8008a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a7e:	0112      	lsls	r2, r2, #4
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	440b      	add	r3, r1
 8008a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a88:	e00a      	b.n	8008aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	4908      	ldr	r1, [pc, #32]	; (8008ab0 <__NVIC_SetPriority+0x50>)
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	3b04      	subs	r3, #4
 8008a98:	0112      	lsls	r2, r2, #4
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	761a      	strb	r2, [r3, #24]
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	e000e100 	.word	0xe000e100
 8008ab0:	e000ed00 	.word	0xe000ed00

08008ab4 <NVIC_EncodePriority>:
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f1c3 0307 	rsb	r3, r3, #7
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	bf28      	it	cs
 8008ad2:	2304      	movcs	r3, #4
 8008ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2b06      	cmp	r3, #6
 8008adc:	d902      	bls.n	8008ae4 <NVIC_EncodePriority+0x30>
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3b03      	subs	r3, #3
 8008ae2:	e000      	b.n	8008ae6 <NVIC_EncodePriority+0x32>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	43da      	mvns	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	401a      	ands	r2, r3
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	43d9      	mvns	r1, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b0c:	4313      	orrs	r3, r2
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3724      	adds	r7, #36	; 0x24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr

08008b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b28:	d301      	bcc.n	8008b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e00f      	b.n	8008b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b2e:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <SysTick_Config+0x40>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b36:	210f      	movs	r1, #15
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b3c:	f7ff ff90 	bl	8008a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <SysTick_Config+0x40>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b46:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <SysTick_Config+0x40>)
 8008b48:	2207      	movs	r2, #7
 8008b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	e000e010 	.word	0xe000e010

08008b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff2d 	bl	80089c4 <__NVIC_SetPriorityGrouping>
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	4603      	mov	r3, r0
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b84:	f7ff ff42 	bl	8008a0c <__NVIC_GetPriorityGrouping>
 8008b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	6978      	ldr	r0, [r7, #20]
 8008b90:	f7ff ff90 	bl	8008ab4 <NVIC_EncodePriority>
 8008b94:	4602      	mov	r2, r0
 8008b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff ff5f 	bl	8008a60 <__NVIC_SetPriority>
}
 8008ba2:	bf00      	nop
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff ff35 	bl	8008a28 <__NVIC_EnableIRQ>
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff ffa2 	bl	8008b18 <SysTick_Config>
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d008      	beq.n	8008c08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e020      	b.n	8008c4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 020e 	bic.w	r2, r2, #14
 8008c16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0201 	bic.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c30:	2101      	movs	r1, #1
 8008c32:	fa01 f202 	lsl.w	r2, r1, r2
 8008c36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d005      	beq.n	8008c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2204      	movs	r2, #4
 8008c70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	e0d6      	b.n	8008e26 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 020e 	bic.w	r2, r2, #14
 8008c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0201 	bic.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4b64      	ldr	r3, [pc, #400]	; (8008e30 <HAL_DMA_Abort_IT+0x1dc>)
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d958      	bls.n	8008d56 <HAL_DMA_Abort_IT+0x102>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a62      	ldr	r2, [pc, #392]	; (8008e34 <HAL_DMA_Abort_IT+0x1e0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d04f      	beq.n	8008d4e <HAL_DMA_Abort_IT+0xfa>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a61      	ldr	r2, [pc, #388]	; (8008e38 <HAL_DMA_Abort_IT+0x1e4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d048      	beq.n	8008d4a <HAL_DMA_Abort_IT+0xf6>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a5f      	ldr	r2, [pc, #380]	; (8008e3c <HAL_DMA_Abort_IT+0x1e8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d040      	beq.n	8008d44 <HAL_DMA_Abort_IT+0xf0>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a5e      	ldr	r2, [pc, #376]	; (8008e40 <HAL_DMA_Abort_IT+0x1ec>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d038      	beq.n	8008d3e <HAL_DMA_Abort_IT+0xea>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a5c      	ldr	r2, [pc, #368]	; (8008e44 <HAL_DMA_Abort_IT+0x1f0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d030      	beq.n	8008d38 <HAL_DMA_Abort_IT+0xe4>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a5b      	ldr	r2, [pc, #364]	; (8008e48 <HAL_DMA_Abort_IT+0x1f4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d028      	beq.n	8008d32 <HAL_DMA_Abort_IT+0xde>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a52      	ldr	r2, [pc, #328]	; (8008e30 <HAL_DMA_Abort_IT+0x1dc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d020      	beq.n	8008d2c <HAL_DMA_Abort_IT+0xd8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a57      	ldr	r2, [pc, #348]	; (8008e4c <HAL_DMA_Abort_IT+0x1f8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d019      	beq.n	8008d28 <HAL_DMA_Abort_IT+0xd4>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a55      	ldr	r2, [pc, #340]	; (8008e50 <HAL_DMA_Abort_IT+0x1fc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d012      	beq.n	8008d24 <HAL_DMA_Abort_IT+0xd0>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a54      	ldr	r2, [pc, #336]	; (8008e54 <HAL_DMA_Abort_IT+0x200>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00a      	beq.n	8008d1e <HAL_DMA_Abort_IT+0xca>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a52      	ldr	r2, [pc, #328]	; (8008e58 <HAL_DMA_Abort_IT+0x204>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d102      	bne.n	8008d18 <HAL_DMA_Abort_IT+0xc4>
 8008d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d16:	e01b      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d1c:	e018      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d22:	e015      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d24:	2310      	movs	r3, #16
 8008d26:	e013      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e011      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d30:	e00e      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d36:	e00b      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d3c:	e008      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d42:	e005      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d48:	e002      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	e000      	b.n	8008d50 <HAL_DMA_Abort_IT+0xfc>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4a42      	ldr	r2, [pc, #264]	; (8008e5c <HAL_DMA_Abort_IT+0x208>)
 8008d52:	6053      	str	r3, [r2, #4]
 8008d54:	e057      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1b2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a36      	ldr	r2, [pc, #216]	; (8008e34 <HAL_DMA_Abort_IT+0x1e0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d04f      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x1ac>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a34      	ldr	r2, [pc, #208]	; (8008e38 <HAL_DMA_Abort_IT+0x1e4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d048      	beq.n	8008dfc <HAL_DMA_Abort_IT+0x1a8>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a33      	ldr	r2, [pc, #204]	; (8008e3c <HAL_DMA_Abort_IT+0x1e8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d040      	beq.n	8008df6 <HAL_DMA_Abort_IT+0x1a2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a31      	ldr	r2, [pc, #196]	; (8008e40 <HAL_DMA_Abort_IT+0x1ec>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d038      	beq.n	8008df0 <HAL_DMA_Abort_IT+0x19c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a30      	ldr	r2, [pc, #192]	; (8008e44 <HAL_DMA_Abort_IT+0x1f0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d030      	beq.n	8008dea <HAL_DMA_Abort_IT+0x196>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a2e      	ldr	r2, [pc, #184]	; (8008e48 <HAL_DMA_Abort_IT+0x1f4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d028      	beq.n	8008de4 <HAL_DMA_Abort_IT+0x190>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a26      	ldr	r2, [pc, #152]	; (8008e30 <HAL_DMA_Abort_IT+0x1dc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d020      	beq.n	8008dde <HAL_DMA_Abort_IT+0x18a>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <HAL_DMA_Abort_IT+0x1f8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d019      	beq.n	8008dda <HAL_DMA_Abort_IT+0x186>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a29      	ldr	r2, [pc, #164]	; (8008e50 <HAL_DMA_Abort_IT+0x1fc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d012      	beq.n	8008dd6 <HAL_DMA_Abort_IT+0x182>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a27      	ldr	r2, [pc, #156]	; (8008e54 <HAL_DMA_Abort_IT+0x200>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d00a      	beq.n	8008dd0 <HAL_DMA_Abort_IT+0x17c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a26      	ldr	r2, [pc, #152]	; (8008e58 <HAL_DMA_Abort_IT+0x204>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d102      	bne.n	8008dca <HAL_DMA_Abort_IT+0x176>
 8008dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc8:	e01b      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dce:	e018      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd4:	e015      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	e013      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e011      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008de2:	e00e      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008de4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008de8:	e00b      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dee:	e008      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df4:	e005      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dfa:	e002      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	e000      	b.n	8008e02 <HAL_DMA_Abort_IT+0x1ae>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4a17      	ldr	r2, [pc, #92]	; (8008e60 <HAL_DMA_Abort_IT+0x20c>)
 8008e04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
    } 
  }
  return status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40020080 	.word	0x40020080
 8008e34:	40020008 	.word	0x40020008
 8008e38:	4002001c 	.word	0x4002001c
 8008e3c:	40020030 	.word	0x40020030
 8008e40:	40020044 	.word	0x40020044
 8008e44:	40020058 	.word	0x40020058
 8008e48:	4002006c 	.word	0x4002006c
 8008e4c:	40020408 	.word	0x40020408
 8008e50:	4002041c 	.word	0x4002041c
 8008e54:	40020430 	.word	0x40020430
 8008e58:	40020444 	.word	0x40020444
 8008e5c:	40020400 	.word	0x40020400
 8008e60:	40020000 	.word	0x40020000

08008e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b08b      	sub	sp, #44	; 0x2c
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e72:	2300      	movs	r3, #0
 8008e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e76:	e179      	b.n	800916c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e78:	2201      	movs	r2, #1
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	f040 8168 	bne.w	8009166 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	4a96      	ldr	r2, [pc, #600]	; (80090f4 <HAL_GPIO_Init+0x290>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d05e      	beq.n	8008f5e <HAL_GPIO_Init+0xfa>
 8008ea0:	4a94      	ldr	r2, [pc, #592]	; (80090f4 <HAL_GPIO_Init+0x290>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d875      	bhi.n	8008f92 <HAL_GPIO_Init+0x12e>
 8008ea6:	4a94      	ldr	r2, [pc, #592]	; (80090f8 <HAL_GPIO_Init+0x294>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d058      	beq.n	8008f5e <HAL_GPIO_Init+0xfa>
 8008eac:	4a92      	ldr	r2, [pc, #584]	; (80090f8 <HAL_GPIO_Init+0x294>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d86f      	bhi.n	8008f92 <HAL_GPIO_Init+0x12e>
 8008eb2:	4a92      	ldr	r2, [pc, #584]	; (80090fc <HAL_GPIO_Init+0x298>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d052      	beq.n	8008f5e <HAL_GPIO_Init+0xfa>
 8008eb8:	4a90      	ldr	r2, [pc, #576]	; (80090fc <HAL_GPIO_Init+0x298>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d869      	bhi.n	8008f92 <HAL_GPIO_Init+0x12e>
 8008ebe:	4a90      	ldr	r2, [pc, #576]	; (8009100 <HAL_GPIO_Init+0x29c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d04c      	beq.n	8008f5e <HAL_GPIO_Init+0xfa>
 8008ec4:	4a8e      	ldr	r2, [pc, #568]	; (8009100 <HAL_GPIO_Init+0x29c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d863      	bhi.n	8008f92 <HAL_GPIO_Init+0x12e>
 8008eca:	4a8e      	ldr	r2, [pc, #568]	; (8009104 <HAL_GPIO_Init+0x2a0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d046      	beq.n	8008f5e <HAL_GPIO_Init+0xfa>
 8008ed0:	4a8c      	ldr	r2, [pc, #560]	; (8009104 <HAL_GPIO_Init+0x2a0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d85d      	bhi.n	8008f92 <HAL_GPIO_Init+0x12e>
 8008ed6:	2b12      	cmp	r3, #18
 8008ed8:	d82a      	bhi.n	8008f30 <HAL_GPIO_Init+0xcc>
 8008eda:	2b12      	cmp	r3, #18
 8008edc:	d859      	bhi.n	8008f92 <HAL_GPIO_Init+0x12e>
 8008ede:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <HAL_GPIO_Init+0x80>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008f5f 	.word	0x08008f5f
 8008ee8:	08008f39 	.word	0x08008f39
 8008eec:	08008f4b 	.word	0x08008f4b
 8008ef0:	08008f8d 	.word	0x08008f8d
 8008ef4:	08008f93 	.word	0x08008f93
 8008ef8:	08008f93 	.word	0x08008f93
 8008efc:	08008f93 	.word	0x08008f93
 8008f00:	08008f93 	.word	0x08008f93
 8008f04:	08008f93 	.word	0x08008f93
 8008f08:	08008f93 	.word	0x08008f93
 8008f0c:	08008f93 	.word	0x08008f93
 8008f10:	08008f93 	.word	0x08008f93
 8008f14:	08008f93 	.word	0x08008f93
 8008f18:	08008f93 	.word	0x08008f93
 8008f1c:	08008f93 	.word	0x08008f93
 8008f20:	08008f93 	.word	0x08008f93
 8008f24:	08008f93 	.word	0x08008f93
 8008f28:	08008f41 	.word	0x08008f41
 8008f2c:	08008f55 	.word	0x08008f55
 8008f30:	4a75      	ldr	r2, [pc, #468]	; (8009108 <HAL_GPIO_Init+0x2a4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d013      	beq.n	8008f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f36:	e02c      	b.n	8008f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	623b      	str	r3, [r7, #32]
          break;
 8008f3e:	e029      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	623b      	str	r3, [r7, #32]
          break;
 8008f48:	e024      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	623b      	str	r3, [r7, #32]
          break;
 8008f52:	e01f      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	330c      	adds	r3, #12
 8008f5a:	623b      	str	r3, [r7, #32]
          break;
 8008f5c:	e01a      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f66:	2304      	movs	r3, #4
 8008f68:	623b      	str	r3, [r7, #32]
          break;
 8008f6a:	e013      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d105      	bne.n	8008f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f74:	2308      	movs	r3, #8
 8008f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	611a      	str	r2, [r3, #16]
          break;
 8008f7e:	e009      	b.n	8008f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f80:	2308      	movs	r3, #8
 8008f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	615a      	str	r2, [r3, #20]
          break;
 8008f8a:	e003      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	623b      	str	r3, [r7, #32]
          break;
 8008f90:	e000      	b.n	8008f94 <HAL_GPIO_Init+0x130>
          break;
 8008f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2bff      	cmp	r3, #255	; 0xff
 8008f98:	d801      	bhi.n	8008f9e <HAL_GPIO_Init+0x13a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	e001      	b.n	8008fa2 <HAL_GPIO_Init+0x13e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	2bff      	cmp	r3, #255	; 0xff
 8008fa8:	d802      	bhi.n	8008fb0 <HAL_GPIO_Init+0x14c>
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	e002      	b.n	8008fb6 <HAL_GPIO_Init+0x152>
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	3b08      	subs	r3, #8
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	210f      	movs	r1, #15
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	401a      	ands	r2, r3
 8008fc8:	6a39      	ldr	r1, [r7, #32]
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80c1 	beq.w	8009166 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fe4:	4b49      	ldr	r3, [pc, #292]	; (800910c <HAL_GPIO_Init+0x2a8>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	4a48      	ldr	r2, [pc, #288]	; (800910c <HAL_GPIO_Init+0x2a8>)
 8008fea:	f043 0301 	orr.w	r3, r3, #1
 8008fee:	6193      	str	r3, [r2, #24]
 8008ff0:	4b46      	ldr	r3, [pc, #280]	; (800910c <HAL_GPIO_Init+0x2a8>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008ffc:	4a44      	ldr	r2, [pc, #272]	; (8009110 <HAL_GPIO_Init+0x2ac>)
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	089b      	lsrs	r3, r3, #2
 8009002:	3302      	adds	r3, #2
 8009004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	220f      	movs	r2, #15
 8009014:	fa02 f303 	lsl.w	r3, r2, r3
 8009018:	43db      	mvns	r3, r3
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4013      	ands	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a3c      	ldr	r2, [pc, #240]	; (8009114 <HAL_GPIO_Init+0x2b0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d01f      	beq.n	8009068 <HAL_GPIO_Init+0x204>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a3b      	ldr	r2, [pc, #236]	; (8009118 <HAL_GPIO_Init+0x2b4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d019      	beq.n	8009064 <HAL_GPIO_Init+0x200>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a3a      	ldr	r2, [pc, #232]	; (800911c <HAL_GPIO_Init+0x2b8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d013      	beq.n	8009060 <HAL_GPIO_Init+0x1fc>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a39      	ldr	r2, [pc, #228]	; (8009120 <HAL_GPIO_Init+0x2bc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00d      	beq.n	800905c <HAL_GPIO_Init+0x1f8>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a38      	ldr	r2, [pc, #224]	; (8009124 <HAL_GPIO_Init+0x2c0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d007      	beq.n	8009058 <HAL_GPIO_Init+0x1f4>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a37      	ldr	r2, [pc, #220]	; (8009128 <HAL_GPIO_Init+0x2c4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d101      	bne.n	8009054 <HAL_GPIO_Init+0x1f0>
 8009050:	2305      	movs	r3, #5
 8009052:	e00a      	b.n	800906a <HAL_GPIO_Init+0x206>
 8009054:	2306      	movs	r3, #6
 8009056:	e008      	b.n	800906a <HAL_GPIO_Init+0x206>
 8009058:	2304      	movs	r3, #4
 800905a:	e006      	b.n	800906a <HAL_GPIO_Init+0x206>
 800905c:	2303      	movs	r3, #3
 800905e:	e004      	b.n	800906a <HAL_GPIO_Init+0x206>
 8009060:	2302      	movs	r3, #2
 8009062:	e002      	b.n	800906a <HAL_GPIO_Init+0x206>
 8009064:	2301      	movs	r3, #1
 8009066:	e000      	b.n	800906a <HAL_GPIO_Init+0x206>
 8009068:	2300      	movs	r3, #0
 800906a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906c:	f002 0203 	and.w	r2, r2, #3
 8009070:	0092      	lsls	r2, r2, #2
 8009072:	4093      	lsls	r3, r2
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800907a:	4925      	ldr	r1, [pc, #148]	; (8009110 <HAL_GPIO_Init+0x2ac>)
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	089b      	lsrs	r3, r3, #2
 8009080:	3302      	adds	r3, #2
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d006      	beq.n	80090a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009094:	4b25      	ldr	r3, [pc, #148]	; (800912c <HAL_GPIO_Init+0x2c8>)
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	4924      	ldr	r1, [pc, #144]	; (800912c <HAL_GPIO_Init+0x2c8>)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	4313      	orrs	r3, r2
 800909e:	608b      	str	r3, [r1, #8]
 80090a0:	e006      	b.n	80090b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80090a2:	4b22      	ldr	r3, [pc, #136]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	43db      	mvns	r3, r3
 80090aa:	4920      	ldr	r1, [pc, #128]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80090bc:	4b1b      	ldr	r3, [pc, #108]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	491a      	ldr	r1, [pc, #104]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60cb      	str	r3, [r1, #12]
 80090c8:	e006      	b.n	80090d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80090ca:	4b18      	ldr	r3, [pc, #96]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	43db      	mvns	r3, r3
 80090d2:	4916      	ldr	r1, [pc, #88]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d025      	beq.n	8009130 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090e4:	4b11      	ldr	r3, [pc, #68]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	4910      	ldr	r1, [pc, #64]	; (800912c <HAL_GPIO_Init+0x2c8>)
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	604b      	str	r3, [r1, #4]
 80090f0:	e025      	b.n	800913e <HAL_GPIO_Init+0x2da>
 80090f2:	bf00      	nop
 80090f4:	10320000 	.word	0x10320000
 80090f8:	10310000 	.word	0x10310000
 80090fc:	10220000 	.word	0x10220000
 8009100:	10210000 	.word	0x10210000
 8009104:	10120000 	.word	0x10120000
 8009108:	10110000 	.word	0x10110000
 800910c:	40021000 	.word	0x40021000
 8009110:	40010000 	.word	0x40010000
 8009114:	40010800 	.word	0x40010800
 8009118:	40010c00 	.word	0x40010c00
 800911c:	40011000 	.word	0x40011000
 8009120:	40011400 	.word	0x40011400
 8009124:	40011800 	.word	0x40011800
 8009128:	40011c00 	.word	0x40011c00
 800912c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009130:	4b15      	ldr	r3, [pc, #84]	; (8009188 <HAL_GPIO_Init+0x324>)
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	43db      	mvns	r3, r3
 8009138:	4913      	ldr	r1, [pc, #76]	; (8009188 <HAL_GPIO_Init+0x324>)
 800913a:	4013      	ands	r3, r2
 800913c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d006      	beq.n	8009158 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800914a:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <HAL_GPIO_Init+0x324>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	490e      	ldr	r1, [pc, #56]	; (8009188 <HAL_GPIO_Init+0x324>)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	4313      	orrs	r3, r2
 8009154:	600b      	str	r3, [r1, #0]
 8009156:	e006      	b.n	8009166 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <HAL_GPIO_Init+0x324>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	43db      	mvns	r3, r3
 8009160:	4909      	ldr	r1, [pc, #36]	; (8009188 <HAL_GPIO_Init+0x324>)
 8009162:	4013      	ands	r3, r2
 8009164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	3301      	adds	r3, #1
 800916a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	fa22 f303 	lsr.w	r3, r2, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	f47f ae7e 	bne.w	8008e78 <HAL_GPIO_Init+0x14>
  }
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	372c      	adds	r7, #44	; 0x2c
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr
 8009188:	40010400 	.word	0x40010400

0800918c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800918c:	b480      	push	{r7}
 800918e:	b089      	sub	sp, #36	; 0x24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009196:	2300      	movs	r3, #0
 8009198:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800919a:	e0a6      	b.n	80092ea <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800919c:	2201      	movs	r2, #1
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4013      	ands	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8099 	beq.w	80092e4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80091b2:	4a54      	ldr	r2, [pc, #336]	; (8009304 <HAL_GPIO_DeInit+0x178>)
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	089b      	lsrs	r3, r3, #2
 80091b8:	3302      	adds	r3, #2
 80091ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	220f      	movs	r2, #15
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	4013      	ands	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a4c      	ldr	r2, [pc, #304]	; (8009308 <HAL_GPIO_DeInit+0x17c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d01f      	beq.n	800921c <HAL_GPIO_DeInit+0x90>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a4b      	ldr	r2, [pc, #300]	; (800930c <HAL_GPIO_DeInit+0x180>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d019      	beq.n	8009218 <HAL_GPIO_DeInit+0x8c>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a4a      	ldr	r2, [pc, #296]	; (8009310 <HAL_GPIO_DeInit+0x184>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d013      	beq.n	8009214 <HAL_GPIO_DeInit+0x88>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a49      	ldr	r2, [pc, #292]	; (8009314 <HAL_GPIO_DeInit+0x188>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00d      	beq.n	8009210 <HAL_GPIO_DeInit+0x84>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a48      	ldr	r2, [pc, #288]	; (8009318 <HAL_GPIO_DeInit+0x18c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d007      	beq.n	800920c <HAL_GPIO_DeInit+0x80>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a47      	ldr	r2, [pc, #284]	; (800931c <HAL_GPIO_DeInit+0x190>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d101      	bne.n	8009208 <HAL_GPIO_DeInit+0x7c>
 8009204:	2305      	movs	r3, #5
 8009206:	e00a      	b.n	800921e <HAL_GPIO_DeInit+0x92>
 8009208:	2306      	movs	r3, #6
 800920a:	e008      	b.n	800921e <HAL_GPIO_DeInit+0x92>
 800920c:	2304      	movs	r3, #4
 800920e:	e006      	b.n	800921e <HAL_GPIO_DeInit+0x92>
 8009210:	2303      	movs	r3, #3
 8009212:	e004      	b.n	800921e <HAL_GPIO_DeInit+0x92>
 8009214:	2302      	movs	r3, #2
 8009216:	e002      	b.n	800921e <HAL_GPIO_DeInit+0x92>
 8009218:	2301      	movs	r3, #1
 800921a:	e000      	b.n	800921e <HAL_GPIO_DeInit+0x92>
 800921c:	2300      	movs	r3, #0
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	f002 0203 	and.w	r2, r2, #3
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	4093      	lsls	r3, r2
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	429a      	cmp	r2, r3
 800922c:	d132      	bne.n	8009294 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800922e:	4b3c      	ldr	r3, [pc, #240]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	43db      	mvns	r3, r3
 8009236:	493a      	ldr	r1, [pc, #232]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 8009238:	4013      	ands	r3, r2
 800923a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800923c:	4b38      	ldr	r3, [pc, #224]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	43db      	mvns	r3, r3
 8009244:	4936      	ldr	r1, [pc, #216]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 8009246:	4013      	ands	r3, r2
 8009248:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800924a:	4b35      	ldr	r3, [pc, #212]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	43db      	mvns	r3, r3
 8009252:	4933      	ldr	r1, [pc, #204]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 8009254:	4013      	ands	r3, r2
 8009256:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009258:	4b31      	ldr	r3, [pc, #196]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	43db      	mvns	r3, r3
 8009260:	492f      	ldr	r1, [pc, #188]	; (8009320 <HAL_GPIO_DeInit+0x194>)
 8009262:	4013      	ands	r3, r2
 8009264:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	220f      	movs	r2, #15
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009276:	4a23      	ldr	r2, [pc, #140]	; (8009304 <HAL_GPIO_DeInit+0x178>)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	089b      	lsrs	r3, r3, #2
 800927c:	3302      	adds	r3, #2
 800927e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	43da      	mvns	r2, r3
 8009286:	481f      	ldr	r0, [pc, #124]	; (8009304 <HAL_GPIO_DeInit+0x178>)
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	089b      	lsrs	r3, r3, #2
 800928c:	400a      	ands	r2, r1
 800928e:	3302      	adds	r3, #2
 8009290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2bff      	cmp	r3, #255	; 0xff
 8009298:	d801      	bhi.n	800929e <HAL_GPIO_DeInit+0x112>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	e001      	b.n	80092a2 <HAL_GPIO_DeInit+0x116>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3304      	adds	r3, #4
 80092a2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2bff      	cmp	r3, #255	; 0xff
 80092a8:	d802      	bhi.n	80092b0 <HAL_GPIO_DeInit+0x124>
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	e002      	b.n	80092b6 <HAL_GPIO_DeInit+0x12a>
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	3b08      	subs	r3, #8
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	210f      	movs	r1, #15
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	fa01 f303 	lsl.w	r3, r1, r3
 80092c4:	43db      	mvns	r3, r3
 80092c6:	401a      	ands	r2, r3
 80092c8:	2104      	movs	r1, #4
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	fa01 f303 	lsl.w	r3, r1, r3
 80092d0:	431a      	orrs	r2, r3
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	43db      	mvns	r3, r3
 80092de:	401a      	ands	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	3301      	adds	r3, #1
 80092e8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	fa22 f303 	lsr.w	r3, r2, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f af52 	bne.w	800919c <HAL_GPIO_DeInit+0x10>
  }
}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	3724      	adds	r7, #36	; 0x24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr
 8009304:	40010000 	.word	0x40010000
 8009308:	40010800 	.word	0x40010800
 800930c:	40010c00 	.word	0x40010c00
 8009310:	40011000 	.word	0x40011000
 8009314:	40011400 	.word	0x40011400
 8009318:	40011800 	.word	0x40011800
 800931c:	40011c00 	.word	0x40011c00
 8009320:	40010400 	.word	0x40010400

08009324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	887b      	ldrh	r3, [r7, #2]
 8009336:	4013      	ands	r3, r2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800933c:	2301      	movs	r3, #1
 800933e:	73fb      	strb	r3, [r7, #15]
 8009340:	e001      	b.n	8009346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009346:	7bfb      	ldrb	r3, [r7, #15]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr

08009352 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	807b      	strh	r3, [r7, #2]
 800935e:	4613      	mov	r3, r2
 8009360:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009362:	787b      	ldrb	r3, [r7, #1]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009368:	887a      	ldrh	r2, [r7, #2]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800936e:	e003      	b.n	8009378 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	041a      	lsls	r2, r3, #16
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	611a      	str	r2, [r3, #16]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009394:	887a      	ldrh	r2, [r7, #2]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4013      	ands	r3, r2
 800939a:	041a      	lsls	r2, r3, #16
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	43d9      	mvns	r1, r3
 80093a0:	887b      	ldrh	r3, [r7, #2]
 80093a2:	400b      	ands	r3, r1
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	611a      	str	r2, [r3, #16]
}
 80093aa:	bf00      	nop
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr

080093b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e12b      	b.n	800961e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fe fff8 	bl	80083d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2224      	movs	r2, #36	; 0x24
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0201 	bic.w	r2, r2, #1
 80093f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009418:	f001 fdb8 	bl	800af8c <HAL_RCC_GetPCLK1Freq>
 800941c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	4a81      	ldr	r2, [pc, #516]	; (8009628 <HAL_I2C_Init+0x274>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d807      	bhi.n	8009438 <HAL_I2C_Init+0x84>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a80      	ldr	r2, [pc, #512]	; (800962c <HAL_I2C_Init+0x278>)
 800942c:	4293      	cmp	r3, r2
 800942e:	bf94      	ite	ls
 8009430:	2301      	movls	r3, #1
 8009432:	2300      	movhi	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	e006      	b.n	8009446 <HAL_I2C_Init+0x92>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4a7d      	ldr	r2, [pc, #500]	; (8009630 <HAL_I2C_Init+0x27c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	bf94      	ite	ls
 8009440:	2301      	movls	r3, #1
 8009442:	2300      	movhi	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e0e7      	b.n	800961e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4a78      	ldr	r2, [pc, #480]	; (8009634 <HAL_I2C_Init+0x280>)
 8009452:	fba2 2303 	umull	r2, r3, r2, r3
 8009456:	0c9b      	lsrs	r3, r3, #18
 8009458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	4a6a      	ldr	r2, [pc, #424]	; (8009628 <HAL_I2C_Init+0x274>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d802      	bhi.n	8009488 <HAL_I2C_Init+0xd4>
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	3301      	adds	r3, #1
 8009486:	e009      	b.n	800949c <HAL_I2C_Init+0xe8>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	4a69      	ldr	r2, [pc, #420]	; (8009638 <HAL_I2C_Init+0x284>)
 8009494:	fba2 2303 	umull	r2, r3, r2, r3
 8009498:	099b      	lsrs	r3, r3, #6
 800949a:	3301      	adds	r3, #1
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6812      	ldr	r2, [r2, #0]
 80094a0:	430b      	orrs	r3, r1
 80094a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	495c      	ldr	r1, [pc, #368]	; (8009628 <HAL_I2C_Init+0x274>)
 80094b8:	428b      	cmp	r3, r1
 80094ba:	d819      	bhi.n	80094f0 <HAL_I2C_Init+0x13c>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	1e59      	subs	r1, r3, #1
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ca:	1c59      	adds	r1, r3, #1
 80094cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80094d0:	400b      	ands	r3, r1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <HAL_I2C_Init+0x138>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	1e59      	subs	r1, r3, #1
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80094e4:	3301      	adds	r3, #1
 80094e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ea:	e051      	b.n	8009590 <HAL_I2C_Init+0x1dc>
 80094ec:	2304      	movs	r3, #4
 80094ee:	e04f      	b.n	8009590 <HAL_I2C_Init+0x1dc>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d111      	bne.n	800951c <HAL_I2C_Init+0x168>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1e58      	subs	r0, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6859      	ldr	r1, [r3, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	440b      	add	r3, r1
 8009506:	fbb0 f3f3 	udiv	r3, r0, r3
 800950a:	3301      	adds	r3, #1
 800950c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009510:	2b00      	cmp	r3, #0
 8009512:	bf0c      	ite	eq
 8009514:	2301      	moveq	r3, #1
 8009516:	2300      	movne	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	e012      	b.n	8009542 <HAL_I2C_Init+0x18e>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	1e58      	subs	r0, r3, #1
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6859      	ldr	r1, [r3, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	0099      	lsls	r1, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009532:	3301      	adds	r3, #1
 8009534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf0c      	ite	eq
 800953c:	2301      	moveq	r3, #1
 800953e:	2300      	movne	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <HAL_I2C_Init+0x196>
 8009546:	2301      	movs	r3, #1
 8009548:	e022      	b.n	8009590 <HAL_I2C_Init+0x1dc>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10e      	bne.n	8009570 <HAL_I2C_Init+0x1bc>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	1e58      	subs	r0, r3, #1
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6859      	ldr	r1, [r3, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	440b      	add	r3, r1
 8009560:	fbb0 f3f3 	udiv	r3, r0, r3
 8009564:	3301      	adds	r3, #1
 8009566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800956a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956e:	e00f      	b.n	8009590 <HAL_I2C_Init+0x1dc>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1e58      	subs	r0, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	0099      	lsls	r1, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	fbb0 f3f3 	udiv	r3, r0, r3
 8009586:	3301      	adds	r3, #1
 8009588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800958c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	6809      	ldr	r1, [r1, #0]
 8009594:	4313      	orrs	r3, r2
 8009596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69da      	ldr	r2, [r3, #28]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80095be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	6911      	ldr	r1, [r2, #16]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68d2      	ldr	r2, [r2, #12]
 80095ca:	4311      	orrs	r1, r2
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	430b      	orrs	r3, r1
 80095d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	695a      	ldr	r2, [r3, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0201 	orr.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	000186a0 	.word	0x000186a0
 800962c:	001e847f 	.word	0x001e847f
 8009630:	003d08ff 	.word	0x003d08ff
 8009634:	431bde83 	.word	0x431bde83
 8009638:	10624dd3 	.word	0x10624dd3

0800963c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e021      	b.n	8009692 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2224      	movs	r2, #36	; 0x24
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0201 	bic.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fe fef0 	bl	800844c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	461a      	mov	r2, r3
 80096a8:	460b      	mov	r3, r1
 80096aa:	817b      	strh	r3, [r7, #10]
 80096ac:	4613      	mov	r3, r2
 80096ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096b0:	f7ff f85e 	bl	8008770 <HAL_GetTick>
 80096b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b20      	cmp	r3, #32
 80096c0:	f040 80e0 	bne.w	8009884 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	2319      	movs	r3, #25
 80096ca:	2201      	movs	r2, #1
 80096cc:	4970      	ldr	r1, [pc, #448]	; (8009890 <HAL_I2C_Master_Transmit+0x1f4>)
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fe5c 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80096da:	2302      	movs	r3, #2
 80096dc:	e0d3      	b.n	8009886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_I2C_Master_Transmit+0x50>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e0cc      	b.n	8009886 <HAL_I2C_Master_Transmit+0x1ea>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d007      	beq.n	8009712 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f042 0201 	orr.w	r2, r2, #1
 8009710:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009720:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2221      	movs	r2, #33	; 0x21
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2210      	movs	r2, #16
 800972e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	893a      	ldrh	r2, [r7, #8]
 8009742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a50      	ldr	r2, [pc, #320]	; (8009894 <HAL_I2C_Master_Transmit+0x1f8>)
 8009752:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009754:	8979      	ldrh	r1, [r7, #10]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	6a3a      	ldr	r2, [r7, #32]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fc16 	bl	8009f8c <I2C_MasterRequestWrite>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e08d      	b.n	8009886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800976a:	2300      	movs	r3, #0
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009780:	e066      	b.n	8009850 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	6a39      	ldr	r1, [r7, #32]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 ff1a 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00d      	beq.n	80097ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	2b04      	cmp	r3, #4
 8009798:	d107      	bne.n	80097aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e06b      	b.n	8009886 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d6:	3b01      	subs	r3, #1
 80097d8:	b29a      	uxth	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	f003 0304 	and.w	r3, r3, #4
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d11b      	bne.n	8009824 <HAL_I2C_Master_Transmit+0x188>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d017      	beq.n	8009824 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980e:	b29b      	uxth	r3, r3
 8009810:	3b01      	subs	r3, #1
 8009812:	b29a      	uxth	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800981c:	3b01      	subs	r3, #1
 800981e:	b29a      	uxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	6a39      	ldr	r1, [r7, #32]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 ff11 	bl	800a650 <I2C_WaitOnBTFFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00d      	beq.n	8009850 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	2b04      	cmp	r3, #4
 800983a:	d107      	bne.n	800984c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e01a      	b.n	8009886 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009854:	2b00      	cmp	r3, #0
 8009856:	d194      	bne.n	8009782 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	e000      	b.n	8009886 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009884:	2302      	movs	r3, #2
  }
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	00100002 	.word	0x00100002
 8009894:	ffff0000 	.word	0xffff0000

08009898 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af02      	add	r7, sp, #8
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	4608      	mov	r0, r1
 80098a2:	4611      	mov	r1, r2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	817b      	strh	r3, [r7, #10]
 80098aa:	460b      	mov	r3, r1
 80098ac:	813b      	strh	r3, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098b2:	f7fe ff5d 	bl	8008770 <HAL_GetTick>
 80098b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	f040 80d9 	bne.w	8009a78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	2319      	movs	r3, #25
 80098cc:	2201      	movs	r2, #1
 80098ce:	496d      	ldr	r1, [pc, #436]	; (8009a84 <HAL_I2C_Mem_Write+0x1ec>)
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 fd5b 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80098dc:	2302      	movs	r3, #2
 80098de:	e0cc      	b.n	8009a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d101      	bne.n	80098ee <HAL_I2C_Mem_Write+0x56>
 80098ea:	2302      	movs	r3, #2
 80098ec:	e0c5      	b.n	8009a7a <HAL_I2C_Mem_Write+0x1e2>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b01      	cmp	r3, #1
 8009902:	d007      	beq.n	8009914 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009922:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2221      	movs	r2, #33	; 0x21
 8009928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2240      	movs	r2, #64	; 0x40
 8009930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6a3a      	ldr	r2, [r7, #32]
 800993e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4a4d      	ldr	r2, [pc, #308]	; (8009a88 <HAL_I2C_Mem_Write+0x1f0>)
 8009954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009956:	88f8      	ldrh	r0, [r7, #6]
 8009958:	893a      	ldrh	r2, [r7, #8]
 800995a:	8979      	ldrh	r1, [r7, #10]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	4603      	mov	r3, r0
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fb92 	bl	800a090 <I2C_RequestMemoryWrite>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d052      	beq.n	8009a18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e081      	b.n	8009a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fe20 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00d      	beq.n	80099a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	2b04      	cmp	r3, #4
 800998c:	d107      	bne.n	800999e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800999c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e06b      	b.n	8009a7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	781a      	ldrb	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099bc:	3b01      	subs	r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	3b01      	subs	r3, #1
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d11b      	bne.n	8009a18 <HAL_I2C_Mem_Write+0x180>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d017      	beq.n	8009a18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	781a      	ldrb	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1aa      	bne.n	8009976 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 fe13 	bl	800a650 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00d      	beq.n	8009a4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d107      	bne.n	8009a48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e016      	b.n	8009a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e000      	b.n	8009a7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a78:	2302      	movs	r3, #2
  }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	00100002 	.word	0x00100002
 8009a88:	ffff0000 	.word	0xffff0000

08009a8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08c      	sub	sp, #48	; 0x30
 8009a90:	af02      	add	r7, sp, #8
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	4608      	mov	r0, r1
 8009a96:	4611      	mov	r1, r2
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	817b      	strh	r3, [r7, #10]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	813b      	strh	r3, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009aaa:	f7fe fe61 	bl	8008770 <HAL_GetTick>
 8009aae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	f040 8244 	bne.w	8009f46 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2319      	movs	r3, #25
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	4982      	ldr	r1, [pc, #520]	; (8009cd0 <HAL_I2C_Mem_Read+0x244>)
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 fc5f 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e237      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_I2C_Mem_Read+0x5a>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e230      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d007      	beq.n	8009b0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2222      	movs	r2, #34	; 0x22
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2240      	movs	r2, #64	; 0x40
 8009b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4a62      	ldr	r2, [pc, #392]	; (8009cd4 <HAL_I2C_Mem_Read+0x248>)
 8009b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b4e:	88f8      	ldrh	r0, [r7, #6]
 8009b50:	893a      	ldrh	r2, [r7, #8]
 8009b52:	8979      	ldrh	r1, [r7, #10]
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fb2c 	bl	800a1bc <I2C_RequestMemoryRead>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e1ec      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d113      	bne.n	8009b9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	61fb      	str	r3, [r7, #28]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	e1c0      	b.n	8009f20 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d11e      	bne.n	8009be4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bb6:	b672      	cpsid	i
}
 8009bb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	61bb      	str	r3, [r7, #24]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009be0:	b662      	cpsie	i
}
 8009be2:	e035      	b.n	8009c50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d11e      	bne.n	8009c2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bfc:	b672      	cpsid	i
}
 8009bfe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	617b      	str	r3, [r7, #20]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c26:	b662      	cpsie	i
}
 8009c28:	e012      	b.n	8009c50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c50:	e166      	b.n	8009f20 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	f200 811f 	bhi.w	8009e9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d123      	bne.n	8009cac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fd39 	bl	800a6e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e167      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	b2d2      	uxtb	r2, r2
 8009c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c94:	3b01      	subs	r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009caa:	e139      	b.n	8009f20 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d152      	bne.n	8009d5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <HAL_I2C_Mem_Read+0x24c>)
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fb64 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e13c      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
 8009cce:	bf00      	nop
 8009cd0:	00100002 	.word	0x00100002
 8009cd4:	ffff0000 	.word	0xffff0000
 8009cd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009cdc:	b672      	cpsid	i
}
 8009cde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d22:	b662      	cpsie	i
}
 8009d24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	b2d2      	uxtb	r2, r2
 8009d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d58:	e0e2      	b.n	8009f20 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	2200      	movs	r2, #0
 8009d62:	497b      	ldr	r1, [pc, #492]	; (8009f50 <HAL_I2C_Mem_Read+0x4c4>)
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 fb11 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e0e9      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d84:	b672      	cpsid	i
}
 8009d86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691a      	ldr	r2, [r3, #16]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da4:	3b01      	subs	r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009dba:	4b66      	ldr	r3, [pc, #408]	; (8009f54 <HAL_I2C_Mem_Read+0x4c8>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	08db      	lsrs	r3, r3, #3
 8009dc0:	4a65      	ldr	r2, [pc, #404]	; (8009f58 <HAL_I2C_Mem_Read+0x4cc>)
 8009dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc6:	0a1a      	lsrs	r2, r3, #8
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	00da      	lsls	r2, r3, #3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d118      	bne.n	8009e12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f043 0220 	orr.w	r2, r3, #32
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e02:	b662      	cpsie	i
}
 8009e04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e09a      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d1d9      	bne.n	8009dd4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691a      	ldr	r2, [r3, #16]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	1c5a      	adds	r2, r3, #1
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e62:	b662      	cpsie	i
}
 8009e64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	b2d2      	uxtb	r2, r2
 8009e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e82:	3b01      	subs	r3, #1
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	3b01      	subs	r3, #1
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e98:	e042      	b.n	8009f20 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 fc1e 	bl	800a6e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e04c      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	691a      	ldr	r2, [r3, #16]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	b2d2      	uxtb	r2, r2
 8009eba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d118      	bne.n	8009f20 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	691a      	ldr	r2, [r3, #16]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f47f ae94 	bne.w	8009c52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e000      	b.n	8009f48 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f46:	2302      	movs	r3, #2
  }
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3728      	adds	r7, #40	; 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	00010004 	.word	0x00010004
 8009f54:	200000b0 	.word	0x200000b0
 8009f58:	14f8b589 	.word	0x14f8b589

08009f5c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6a:	b2db      	uxtb	r3, r3
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bc80      	pop	{r7}
 8009f74:	4770      	bx	lr

08009f76 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr

08009f8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	d006      	beq.n	8009fb6 <I2C_MasterRequestWrite+0x2a>
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d003      	beq.n	8009fb6 <I2C_MasterRequestWrite+0x2a>
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fb4:	d108      	bne.n	8009fc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	e00b      	b.n	8009fe0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fcc:	2b12      	cmp	r3, #18
 8009fce:	d107      	bne.n	8009fe0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 f9cd 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00d      	beq.n	800a014 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a006:	d103      	bne.n	800a010 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a00e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e035      	b.n	800a080 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a01c:	d108      	bne.n	800a030 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a01e:	897b      	ldrh	r3, [r7, #10]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	461a      	mov	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a02c:	611a      	str	r2, [r3, #16]
 800a02e:	e01b      	b.n	800a068 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a030:	897b      	ldrh	r3, [r7, #10]
 800a032:	11db      	asrs	r3, r3, #7
 800a034:	b2db      	uxtb	r3, r3
 800a036:	f003 0306 	and.w	r3, r3, #6
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f063 030f 	orn	r3, r3, #15
 800a040:	b2da      	uxtb	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	490e      	ldr	r1, [pc, #56]	; (800a088 <I2C_MasterRequestWrite+0xfc>)
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fa16 	bl	800a480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e010      	b.n	800a080 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a05e:	897b      	ldrh	r3, [r7, #10]
 800a060:	b2da      	uxtb	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	4907      	ldr	r1, [pc, #28]	; (800a08c <I2C_MasterRequestWrite+0x100>)
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fa06 	bl	800a480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e000      	b.n	800a080 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	00010008 	.word	0x00010008
 800a08c:	00010002 	.word	0x00010002

0800a090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af02      	add	r7, sp, #8
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	4608      	mov	r0, r1
 800a09a:	4611      	mov	r1, r2
 800a09c:	461a      	mov	r2, r3
 800a09e:	4603      	mov	r3, r0
 800a0a0:	817b      	strh	r3, [r7, #10]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	813b      	strh	r3, [r7, #8]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 f960 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00d      	beq.n	800a0ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e0:	d103      	bne.n	800a0ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e05f      	b.n	800a1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0ee:	897b      	ldrh	r3, [r7, #10]
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	6a3a      	ldr	r2, [r7, #32]
 800a102:	492d      	ldr	r1, [pc, #180]	; (800a1b8 <I2C_RequestMemoryWrite+0x128>)
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f9bb 	bl	800a480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e04c      	b.n	800a1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12c:	6a39      	ldr	r1, [r7, #32]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 fa46 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d107      	bne.n	800a152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e02b      	b.n	800a1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d105      	bne.n	800a168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a15c:	893b      	ldrh	r3, [r7, #8]
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	611a      	str	r2, [r3, #16]
 800a166:	e021      	b.n	800a1ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a168:	893b      	ldrh	r3, [r7, #8]
 800a16a:	0a1b      	lsrs	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a178:	6a39      	ldr	r1, [r7, #32]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fa20 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00d      	beq.n	800a1a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	d107      	bne.n	800a19e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e005      	b.n	800a1ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1a2:	893b      	ldrh	r3, [r7, #8]
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	00010002 	.word	0x00010002

0800a1bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	817b      	strh	r3, [r7, #10]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	813b      	strh	r3, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f8c2 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00d      	beq.n	800a22a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21c:	d103      	bne.n	800a226 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a224:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e0aa      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a22a:	897b      	ldrh	r3, [r7, #10]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	461a      	mov	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	6a3a      	ldr	r2, [r7, #32]
 800a23e:	4952      	ldr	r1, [pc, #328]	; (800a388 <I2C_RequestMemoryRead+0x1cc>)
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f91d 	bl	800a480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e097      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a268:	6a39      	ldr	r1, [r7, #32]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f9a8 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00d      	beq.n	800a292 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d107      	bne.n	800a28e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a28c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e076      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d105      	bne.n	800a2a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a298:	893b      	ldrh	r3, [r7, #8]
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	611a      	str	r2, [r3, #16]
 800a2a2:	e021      	b.n	800a2e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2a4:	893b      	ldrh	r3, [r7, #8]
 800a2a6:	0a1b      	lsrs	r3, r3, #8
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b4:	6a39      	ldr	r1, [r7, #32]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 f982 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00d      	beq.n	800a2de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d107      	bne.n	800a2da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e050      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2de:	893b      	ldrh	r3, [r7, #8]
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ea:	6a39      	ldr	r1, [r7, #32]
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f967 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00d      	beq.n	800a314 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d107      	bne.n	800a310 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a30e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e035      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a322:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 f82b 	bl	800a38c <I2C_WaitOnFlagUntilTimeout>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00d      	beq.n	800a358 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a34a:	d103      	bne.n	800a354 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e013      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a358:	897b      	ldrh	r3, [r7, #10]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f043 0301 	orr.w	r3, r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	6a3a      	ldr	r2, [r7, #32]
 800a36c:	4906      	ldr	r1, [pc, #24]	; (800a388 <I2C_RequestMemoryRead+0x1cc>)
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 f886 	bl	800a480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	00010002 	.word	0x00010002

0800a38c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	4613      	mov	r3, r2
 800a39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a39c:	e048      	b.n	800a430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3a4:	d044      	beq.n	800a430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3a6:	f7fe f9e3 	bl	8008770 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d302      	bcc.n	800a3bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d139      	bne.n	800a430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d10d      	bne.n	800a3e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	43da      	mvns	r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bf0c      	ite	eq
 800a3d8:	2301      	moveq	r3, #1
 800a3da:	2300      	movne	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	461a      	mov	r2, r3
 800a3e0:	e00c      	b.n	800a3fc <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	43da      	mvns	r2, r3
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bf0c      	ite	eq
 800a3f4:	2301      	moveq	r3, #1
 800a3f6:	2300      	movne	r3, #0
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d116      	bne.n	800a430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2220      	movs	r2, #32
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41c:	f043 0220 	orr.w	r2, r3, #32
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e023      	b.n	800a478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	0c1b      	lsrs	r3, r3, #16
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b01      	cmp	r3, #1
 800a438:	d10d      	bne.n	800a456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	43da      	mvns	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	4013      	ands	r3, r2
 800a446:	b29b      	uxth	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bf0c      	ite	eq
 800a44c:	2301      	moveq	r3, #1
 800a44e:	2300      	movne	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	e00c      	b.n	800a470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	43da      	mvns	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4013      	ands	r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	bf0c      	ite	eq
 800a468:	2301      	moveq	r3, #1
 800a46a:	2300      	movne	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	461a      	mov	r2, r3
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	429a      	cmp	r2, r3
 800a474:	d093      	beq.n	800a39e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a48e:	e071      	b.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a49e:	d123      	bne.n	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d4:	f043 0204 	orr.w	r2, r3, #4
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e067      	b.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ee:	d041      	beq.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f0:	f7fe f93e 	bl	8008770 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d302      	bcc.n	800a506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d136      	bne.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	0c1b      	lsrs	r3, r3, #16
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d10c      	bne.n	800a52a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	43da      	mvns	r2, r3
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	4013      	ands	r3, r2
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bf14      	ite	ne
 800a522:	2301      	movne	r3, #1
 800a524:	2300      	moveq	r3, #0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	e00b      	b.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	43da      	mvns	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4013      	ands	r3, r2
 800a536:	b29b      	uxth	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bf14      	ite	ne
 800a53c:	2301      	movne	r3, #1
 800a53e:	2300      	moveq	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d016      	beq.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2220      	movs	r2, #32
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	f043 0220 	orr.w	r2, r3, #32
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e021      	b.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	0c1b      	lsrs	r3, r3, #16
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d10c      	bne.n	800a598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	43da      	mvns	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	4013      	ands	r3, r2
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bf14      	ite	ne
 800a590:	2301      	movne	r3, #1
 800a592:	2300      	moveq	r3, #0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	e00b      	b.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	43da      	mvns	r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bf14      	ite	ne
 800a5aa:	2301      	movne	r3, #1
 800a5ac:	2300      	moveq	r3, #0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f47f af6d 	bne.w	800a490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5cc:	e034      	b.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 f8e3 	bl	800a79a <I2C_IsAcknowledgeFailed>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e034      	b.n	800a648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e4:	d028      	beq.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e6:	f7fe f8c3 	bl	8008770 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d302      	bcc.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d11d      	bne.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a606:	2b80      	cmp	r3, #128	; 0x80
 800a608:	d016      	beq.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a624:	f043 0220 	orr.w	r2, r3, #32
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e007      	b.n	800a648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b80      	cmp	r3, #128	; 0x80
 800a644:	d1c3      	bne.n	800a5ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a65c:	e034      	b.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f89b 	bl	800a79a <I2C_IsAcknowledgeFailed>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e034      	b.n	800a6d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a674:	d028      	beq.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a676:	f7fe f87b 	bl	8008770 <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	429a      	cmp	r2, r3
 800a684:	d302      	bcc.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d11d      	bne.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0304 	and.w	r3, r3, #4
 800a696:	2b04      	cmp	r3, #4
 800a698:	d016      	beq.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b4:	f043 0220 	orr.w	r2, r3, #32
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e007      	b.n	800a6d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d1c3      	bne.n	800a65e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6ec:	e049      	b.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	f003 0310 	and.w	r3, r3, #16
 800a6f8:	2b10      	cmp	r3, #16
 800a6fa:	d119      	bne.n	800a730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f06f 0210 	mvn.w	r2, #16
 800a704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e030      	b.n	800a792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a730:	f7fe f81e 	bl	8008770 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d302      	bcc.n	800a746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d11d      	bne.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b40      	cmp	r3, #64	; 0x40
 800a752:	d016      	beq.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76e:	f043 0220 	orr.w	r2, r3, #32
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e007      	b.n	800a792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d1ae      	bne.n	800a6ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b0:	d11b      	bne.n	800a7ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	f043 0204 	orr.w	r2, r3, #4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e000      	b.n	800a7ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bc80      	pop	{r7}
 800a7f4:	4770      	bx	lr
	...

0800a7f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e272      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 8087 	beq.w	800a926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a818:	4b92      	ldr	r3, [pc, #584]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f003 030c 	and.w	r3, r3, #12
 800a820:	2b04      	cmp	r3, #4
 800a822:	d00c      	beq.n	800a83e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a824:	4b8f      	ldr	r3, [pc, #572]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f003 030c 	and.w	r3, r3, #12
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d112      	bne.n	800a856 <HAL_RCC_OscConfig+0x5e>
 800a830:	4b8c      	ldr	r3, [pc, #560]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a83c:	d10b      	bne.n	800a856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a83e:	4b89      	ldr	r3, [pc, #548]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d06c      	beq.n	800a924 <HAL_RCC_OscConfig+0x12c>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d168      	bne.n	800a924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e24c      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a85e:	d106      	bne.n	800a86e <HAL_RCC_OscConfig+0x76>
 800a860:	4b80      	ldr	r3, [pc, #512]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a7f      	ldr	r2, [pc, #508]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a86a:	6013      	str	r3, [r2, #0]
 800a86c:	e02e      	b.n	800a8cc <HAL_RCC_OscConfig+0xd4>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10c      	bne.n	800a890 <HAL_RCC_OscConfig+0x98>
 800a876:	4b7b      	ldr	r3, [pc, #492]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a7a      	ldr	r2, [pc, #488]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a87c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	4b78      	ldr	r3, [pc, #480]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a77      	ldr	r2, [pc, #476]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	e01d      	b.n	800a8cc <HAL_RCC_OscConfig+0xd4>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a898:	d10c      	bne.n	800a8b4 <HAL_RCC_OscConfig+0xbc>
 800a89a:	4b72      	ldr	r3, [pc, #456]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a71      	ldr	r2, [pc, #452]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	4b6f      	ldr	r3, [pc, #444]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a6e      	ldr	r2, [pc, #440]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	e00b      	b.n	800a8cc <HAL_RCC_OscConfig+0xd4>
 800a8b4:	4b6b      	ldr	r3, [pc, #428]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a6a      	ldr	r2, [pc, #424]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	4b68      	ldr	r3, [pc, #416]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a67      	ldr	r2, [pc, #412]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d013      	beq.n	800a8fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d4:	f7fd ff4c 	bl	8008770 <HAL_GetTick>
 800a8d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8da:	e008      	b.n	800a8ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8dc:	f7fd ff48 	bl	8008770 <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	2b64      	cmp	r3, #100	; 0x64
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e200      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8ee:	4b5d      	ldr	r3, [pc, #372]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0f0      	beq.n	800a8dc <HAL_RCC_OscConfig+0xe4>
 800a8fa:	e014      	b.n	800a926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8fc:	f7fd ff38 	bl	8008770 <HAL_GetTick>
 800a900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a902:	e008      	b.n	800a916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a904:	f7fd ff34 	bl	8008770 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b64      	cmp	r3, #100	; 0x64
 800a910:	d901      	bls.n	800a916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e1ec      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a916:	4b53      	ldr	r3, [pc, #332]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1f0      	bne.n	800a904 <HAL_RCC_OscConfig+0x10c>
 800a922:	e000      	b.n	800a926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d063      	beq.n	800a9fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a932:	4b4c      	ldr	r3, [pc, #304]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f003 030c 	and.w	r3, r3, #12
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a93e:	4b49      	ldr	r3, [pc, #292]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f003 030c 	and.w	r3, r3, #12
 800a946:	2b08      	cmp	r3, #8
 800a948:	d11c      	bne.n	800a984 <HAL_RCC_OscConfig+0x18c>
 800a94a:	4b46      	ldr	r3, [pc, #280]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d116      	bne.n	800a984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a956:	4b43      	ldr	r3, [pc, #268]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d005      	beq.n	800a96e <HAL_RCC_OscConfig+0x176>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d001      	beq.n	800a96e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e1c0      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a96e:	4b3d      	ldr	r3, [pc, #244]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	4939      	ldr	r1, [pc, #228]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a982:	e03a      	b.n	800a9fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d020      	beq.n	800a9ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a98c:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <HAL_RCC_OscConfig+0x270>)
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a992:	f7fd feed 	bl	8008770 <HAL_GetTick>
 800a996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a998:	e008      	b.n	800a9ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a99a:	f7fd fee9 	bl	8008770 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e1a1      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9ac:	4b2d      	ldr	r3, [pc, #180]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0f0      	beq.n	800a99a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9b8:	4b2a      	ldr	r3, [pc, #168]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	4927      	ldr	r1, [pc, #156]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	600b      	str	r3, [r1, #0]
 800a9cc:	e015      	b.n	800a9fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9ce:	4b26      	ldr	r3, [pc, #152]	; (800aa68 <HAL_RCC_OscConfig+0x270>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9d4:	f7fd fecc 	bl	8008770 <HAL_GetTick>
 800a9d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9da:	e008      	b.n	800a9ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9dc:	f7fd fec8 	bl	8008770 <HAL_GetTick>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d901      	bls.n	800a9ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e180      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9ee:	4b1d      	ldr	r3, [pc, #116]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f0      	bne.n	800a9dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0308 	and.w	r3, r3, #8
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d03a      	beq.n	800aa7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d019      	beq.n	800aa42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa0e:	4b17      	ldr	r3, [pc, #92]	; (800aa6c <HAL_RCC_OscConfig+0x274>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa14:	f7fd feac 	bl	8008770 <HAL_GetTick>
 800aa18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa1c:	f7fd fea8 	bl	8008770 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e160      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <HAL_RCC_OscConfig+0x26c>)
 800aa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0f0      	beq.n	800aa1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa3a:	2001      	movs	r0, #1
 800aa3c:	f000 face 	bl	800afdc <RCC_Delay>
 800aa40:	e01c      	b.n	800aa7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa42:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <HAL_RCC_OscConfig+0x274>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa48:	f7fd fe92 	bl	8008770 <HAL_GetTick>
 800aa4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa4e:	e00f      	b.n	800aa70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa50:	f7fd fe8e 	bl	8008770 <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d908      	bls.n	800aa70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e146      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
 800aa62:	bf00      	nop
 800aa64:	40021000 	.word	0x40021000
 800aa68:	42420000 	.word	0x42420000
 800aa6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa70:	4b92      	ldr	r3, [pc, #584]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e9      	bne.n	800aa50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 80a6 	beq.w	800abd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa8e:	4b8b      	ldr	r3, [pc, #556]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10d      	bne.n	800aab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa9a:	4b88      	ldr	r3, [pc, #544]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	4a87      	ldr	r2, [pc, #540]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aaa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa4:	61d3      	str	r3, [r2, #28]
 800aaa6:	4b85      	ldr	r3, [pc, #532]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaae:	60bb      	str	r3, [r7, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aab2:	2301      	movs	r3, #1
 800aab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aab6:	4b82      	ldr	r3, [pc, #520]	; (800acc0 <HAL_RCC_OscConfig+0x4c8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d118      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aac2:	4b7f      	ldr	r3, [pc, #508]	; (800acc0 <HAL_RCC_OscConfig+0x4c8>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a7e      	ldr	r2, [pc, #504]	; (800acc0 <HAL_RCC_OscConfig+0x4c8>)
 800aac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aacc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aace:	f7fd fe4f 	bl	8008770 <HAL_GetTick>
 800aad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad4:	e008      	b.n	800aae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aad6:	f7fd fe4b 	bl	8008770 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	2b64      	cmp	r3, #100	; 0x64
 800aae2:	d901      	bls.n	800aae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e103      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae8:	4b75      	ldr	r3, [pc, #468]	; (800acc0 <HAL_RCC_OscConfig+0x4c8>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0f0      	beq.n	800aad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d106      	bne.n	800ab0a <HAL_RCC_OscConfig+0x312>
 800aafc:	4b6f      	ldr	r3, [pc, #444]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	4a6e      	ldr	r2, [pc, #440]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab02:	f043 0301 	orr.w	r3, r3, #1
 800ab06:	6213      	str	r3, [r2, #32]
 800ab08:	e02d      	b.n	800ab66 <HAL_RCC_OscConfig+0x36e>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10c      	bne.n	800ab2c <HAL_RCC_OscConfig+0x334>
 800ab12:	4b6a      	ldr	r3, [pc, #424]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	4a69      	ldr	r2, [pc, #420]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab18:	f023 0301 	bic.w	r3, r3, #1
 800ab1c:	6213      	str	r3, [r2, #32]
 800ab1e:	4b67      	ldr	r3, [pc, #412]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	4a66      	ldr	r2, [pc, #408]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab24:	f023 0304 	bic.w	r3, r3, #4
 800ab28:	6213      	str	r3, [r2, #32]
 800ab2a:	e01c      	b.n	800ab66 <HAL_RCC_OscConfig+0x36e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2b05      	cmp	r3, #5
 800ab32:	d10c      	bne.n	800ab4e <HAL_RCC_OscConfig+0x356>
 800ab34:	4b61      	ldr	r3, [pc, #388]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	4a60      	ldr	r2, [pc, #384]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab3a:	f043 0304 	orr.w	r3, r3, #4
 800ab3e:	6213      	str	r3, [r2, #32]
 800ab40:	4b5e      	ldr	r3, [pc, #376]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	4a5d      	ldr	r2, [pc, #372]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	6213      	str	r3, [r2, #32]
 800ab4c:	e00b      	b.n	800ab66 <HAL_RCC_OscConfig+0x36e>
 800ab4e:	4b5b      	ldr	r3, [pc, #364]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	4a5a      	ldr	r2, [pc, #360]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	f023 0301 	bic.w	r3, r3, #1
 800ab58:	6213      	str	r3, [r2, #32]
 800ab5a:	4b58      	ldr	r3, [pc, #352]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	4a57      	ldr	r2, [pc, #348]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	f023 0304 	bic.w	r3, r3, #4
 800ab64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d015      	beq.n	800ab9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab6e:	f7fd fdff 	bl	8008770 <HAL_GetTick>
 800ab72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab74:	e00a      	b.n	800ab8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab76:	f7fd fdfb 	bl	8008770 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d901      	bls.n	800ab8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e0b1      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8c:	4b4b      	ldr	r3, [pc, #300]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0ee      	beq.n	800ab76 <HAL_RCC_OscConfig+0x37e>
 800ab98:	e014      	b.n	800abc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab9a:	f7fd fde9 	bl	8008770 <HAL_GetTick>
 800ab9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aba0:	e00a      	b.n	800abb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aba2:	f7fd fde5 	bl	8008770 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d901      	bls.n	800abb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e09b      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abb8:	4b40      	ldr	r3, [pc, #256]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1ee      	bne.n	800aba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d105      	bne.n	800abd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abca:	4b3c      	ldr	r3, [pc, #240]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	4a3b      	ldr	r2, [pc, #236]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800abd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 8087 	beq.w	800acee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abe0:	4b36      	ldr	r3, [pc, #216]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f003 030c 	and.w	r3, r3, #12
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d061      	beq.n	800acb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d146      	bne.n	800ac82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abf4:	4b33      	ldr	r3, [pc, #204]	; (800acc4 <HAL_RCC_OscConfig+0x4cc>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abfa:	f7fd fdb9 	bl	8008770 <HAL_GetTick>
 800abfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac00:	e008      	b.n	800ac14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac02:	f7fd fdb5 	bl	8008770 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d901      	bls.n	800ac14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e06d      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac14:	4b29      	ldr	r3, [pc, #164]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f0      	bne.n	800ac02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac28:	d108      	bne.n	800ac3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac2a:	4b24      	ldr	r3, [pc, #144]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	4921      	ldr	r1, [pc, #132]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac3c:	4b1f      	ldr	r3, [pc, #124]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a19      	ldr	r1, [r3, #32]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	491b      	ldr	r1, [pc, #108]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ac50:	4313      	orrs	r3, r2
 800ac52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac54:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <HAL_RCC_OscConfig+0x4cc>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac5a:	f7fd fd89 	bl	8008770 <HAL_GetTick>
 800ac5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac60:	e008      	b.n	800ac74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac62:	f7fd fd85 	bl	8008770 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e03d      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac74:	4b11      	ldr	r3, [pc, #68]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0f0      	beq.n	800ac62 <HAL_RCC_OscConfig+0x46a>
 800ac80:	e035      	b.n	800acee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac82:	4b10      	ldr	r3, [pc, #64]	; (800acc4 <HAL_RCC_OscConfig+0x4cc>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac88:	f7fd fd72 	bl	8008770 <HAL_GetTick>
 800ac8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac8e:	e008      	b.n	800aca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac90:	f7fd fd6e 	bl	8008770 <HAL_GetTick>
 800ac94:	4602      	mov	r2, r0
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e026      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <HAL_RCC_OscConfig+0x4c4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1f0      	bne.n	800ac90 <HAL_RCC_OscConfig+0x498>
 800acae:	e01e      	b.n	800acee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d107      	bne.n	800acc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e019      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
 800acbc:	40021000 	.word	0x40021000
 800acc0:	40007000 	.word	0x40007000
 800acc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800acc8:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <HAL_RCC_OscConfig+0x500>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d106      	bne.n	800acea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d001      	beq.n	800acee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40021000 	.word	0x40021000

0800acfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0d0      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad10:	4b6a      	ldr	r3, [pc, #424]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0307 	and.w	r3, r3, #7
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d910      	bls.n	800ad40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad1e:	4b67      	ldr	r3, [pc, #412]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f023 0207 	bic.w	r2, r3, #7
 800ad26:	4965      	ldr	r1, [pc, #404]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad2e:	4b63      	ldr	r3, [pc, #396]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d001      	beq.n	800ad40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0b8      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d020      	beq.n	800ad8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad58:	4b59      	ldr	r3, [pc, #356]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	4a58      	ldr	r2, [pc, #352]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0308 	and.w	r3, r3, #8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad70:	4b53      	ldr	r3, [pc, #332]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	4a52      	ldr	r2, [pc, #328]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad7c:	4b50      	ldr	r3, [pc, #320]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	494d      	ldr	r1, [pc, #308]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d040      	beq.n	800ae1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d107      	bne.n	800adb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ada2:	4b47      	ldr	r3, [pc, #284]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d115      	bne.n	800adda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e07f      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d107      	bne.n	800adca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adba:	4b41      	ldr	r3, [pc, #260]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e073      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adca:	4b3d      	ldr	r3, [pc, #244]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0302 	and.w	r3, r3, #2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e06b      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800adda:	4b39      	ldr	r3, [pc, #228]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f023 0203 	bic.w	r2, r3, #3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	4936      	ldr	r1, [pc, #216]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adec:	f7fd fcc0 	bl	8008770 <HAL_GetTick>
 800adf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adf2:	e00a      	b.n	800ae0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adf4:	f7fd fcbc 	bl	8008770 <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d901      	bls.n	800ae0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e053      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae0a:	4b2d      	ldr	r3, [pc, #180]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f003 020c 	and.w	r2, r3, #12
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d1eb      	bne.n	800adf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae1c:	4b27      	ldr	r3, [pc, #156]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d210      	bcs.n	800ae4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae2a:	4b24      	ldr	r3, [pc, #144]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f023 0207 	bic.w	r2, r3, #7
 800ae32:	4922      	ldr	r1, [pc, #136]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae3a:	4b20      	ldr	r3, [pc, #128]	; (800aebc <HAL_RCC_ClockConfig+0x1c0>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d001      	beq.n	800ae4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e032      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae58:	4b19      	ldr	r3, [pc, #100]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	4916      	ldr	r1, [pc, #88]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0308 	and.w	r3, r3, #8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	490e      	ldr	r1, [pc, #56]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae8a:	f000 f821 	bl	800aed0 <HAL_RCC_GetSysClockFreq>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <HAL_RCC_ClockConfig+0x1c4>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	091b      	lsrs	r3, r3, #4
 800ae96:	f003 030f 	and.w	r3, r3, #15
 800ae9a:	490a      	ldr	r1, [pc, #40]	; (800aec4 <HAL_RCC_ClockConfig+0x1c8>)
 800ae9c:	5ccb      	ldrb	r3, [r1, r3]
 800ae9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aea2:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <HAL_RCC_ClockConfig+0x1cc>)
 800aea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aea6:	4b09      	ldr	r3, [pc, #36]	; (800aecc <HAL_RCC_ClockConfig+0x1d0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fd fc1e 	bl	80086ec <HAL_InitTick>

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	40022000 	.word	0x40022000
 800aec0:	40021000 	.word	0x40021000
 800aec4:	0800dcec 	.word	0x0800dcec
 800aec8:	200000b0 	.word	0x200000b0
 800aecc:	200000b4 	.word	0x200000b4

0800aed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	2300      	movs	r3, #0
 800aedc:	60bb      	str	r3, [r7, #8]
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	2300      	movs	r3, #0
 800aee4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aeea:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <HAL_RCC_GetSysClockFreq+0x94>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f003 030c 	and.w	r3, r3, #12
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	d002      	beq.n	800af00 <HAL_RCC_GetSysClockFreq+0x30>
 800aefa:	2b08      	cmp	r3, #8
 800aefc:	d003      	beq.n	800af06 <HAL_RCC_GetSysClockFreq+0x36>
 800aefe:	e027      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af00:	4b19      	ldr	r3, [pc, #100]	; (800af68 <HAL_RCC_GetSysClockFreq+0x98>)
 800af02:	613b      	str	r3, [r7, #16]
      break;
 800af04:	e027      	b.n	800af56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	0c9b      	lsrs	r3, r3, #18
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	4a17      	ldr	r2, [pc, #92]	; (800af6c <HAL_RCC_GetSysClockFreq+0x9c>)
 800af10:	5cd3      	ldrb	r3, [r2, r3]
 800af12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d010      	beq.n	800af40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <HAL_RCC_GetSysClockFreq+0x94>)
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	0c5b      	lsrs	r3, r3, #17
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	4a11      	ldr	r2, [pc, #68]	; (800af70 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af2a:	5cd3      	ldrb	r3, [r2, r3]
 800af2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a0d      	ldr	r2, [pc, #52]	; (800af68 <HAL_RCC_GetSysClockFreq+0x98>)
 800af32:	fb03 f202 	mul.w	r2, r3, r2
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3c:	617b      	str	r3, [r7, #20]
 800af3e:	e004      	b.n	800af4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a0c      	ldr	r2, [pc, #48]	; (800af74 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af44:	fb02 f303 	mul.w	r3, r2, r3
 800af48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	613b      	str	r3, [r7, #16]
      break;
 800af4e:	e002      	b.n	800af56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af50:	4b05      	ldr	r3, [pc, #20]	; (800af68 <HAL_RCC_GetSysClockFreq+0x98>)
 800af52:	613b      	str	r3, [r7, #16]
      break;
 800af54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af56:	693b      	ldr	r3, [r7, #16]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	40021000 	.word	0x40021000
 800af68:	007a1200 	.word	0x007a1200
 800af6c:	0800dd04 	.word	0x0800dd04
 800af70:	0800dd14 	.word	0x0800dd14
 800af74:	003d0900 	.word	0x003d0900

0800af78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af7c:	4b02      	ldr	r3, [pc, #8]	; (800af88 <HAL_RCC_GetHCLKFreq+0x10>)
 800af7e:	681b      	ldr	r3, [r3, #0]
}
 800af80:	4618      	mov	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	bc80      	pop	{r7}
 800af86:	4770      	bx	lr
 800af88:	200000b0 	.word	0x200000b0

0800af8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af90:	f7ff fff2 	bl	800af78 <HAL_RCC_GetHCLKFreq>
 800af94:	4602      	mov	r2, r0
 800af96:	4b05      	ldr	r3, [pc, #20]	; (800afac <HAL_RCC_GetPCLK1Freq+0x20>)
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	0a1b      	lsrs	r3, r3, #8
 800af9c:	f003 0307 	and.w	r3, r3, #7
 800afa0:	4903      	ldr	r1, [pc, #12]	; (800afb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afa2:	5ccb      	ldrb	r3, [r1, r3]
 800afa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	40021000 	.word	0x40021000
 800afb0:	0800dcfc 	.word	0x0800dcfc

0800afb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800afb8:	f7ff ffde 	bl	800af78 <HAL_RCC_GetHCLKFreq>
 800afbc:	4602      	mov	r2, r0
 800afbe:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	0adb      	lsrs	r3, r3, #11
 800afc4:	f003 0307 	and.w	r3, r3, #7
 800afc8:	4903      	ldr	r1, [pc, #12]	; (800afd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800afca:	5ccb      	ldrb	r3, [r1, r3]
 800afcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	40021000 	.word	0x40021000
 800afd8:	0800dcfc 	.word	0x0800dcfc

0800afdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afe4:	4b0a      	ldr	r3, [pc, #40]	; (800b010 <RCC_Delay+0x34>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a0a      	ldr	r2, [pc, #40]	; (800b014 <RCC_Delay+0x38>)
 800afea:	fba2 2303 	umull	r2, r3, r2, r3
 800afee:	0a5b      	lsrs	r3, r3, #9
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	fb02 f303 	mul.w	r3, r2, r3
 800aff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aff8:	bf00      	nop
  }
  while (Delay --);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1e5a      	subs	r2, r3, #1
 800affe:	60fa      	str	r2, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1f9      	bne.n	800aff8 <RCC_Delay+0x1c>
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bc80      	pop	{r7}
 800b00e:	4770      	bx	lr
 800b010:	200000b0 	.word	0x200000b0
 800b014:	10624dd3 	.word	0x10624dd3

0800b018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e041      	b.n	800b0ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7fd fa26 	bl	8008490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3304      	adds	r3, #4
 800b054:	4619      	mov	r1, r3
 800b056:	4610      	mov	r0, r2
 800b058:	f000 fa82 	bl	800b560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d001      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e044      	b.n	800b15a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68da      	ldr	r2, [r3, #12]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0201 	orr.w	r2, r2, #1
 800b0e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a1d      	ldr	r2, [pc, #116]	; (800b164 <HAL_TIM_Base_Start_IT+0xac>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d018      	beq.n	800b124 <HAL_TIM_Base_Start_IT+0x6c>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a1c      	ldr	r2, [pc, #112]	; (800b168 <HAL_TIM_Base_Start_IT+0xb0>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d013      	beq.n	800b124 <HAL_TIM_Base_Start_IT+0x6c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b104:	d00e      	beq.n	800b124 <HAL_TIM_Base_Start_IT+0x6c>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a18      	ldr	r2, [pc, #96]	; (800b16c <HAL_TIM_Base_Start_IT+0xb4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d009      	beq.n	800b124 <HAL_TIM_Base_Start_IT+0x6c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a16      	ldr	r2, [pc, #88]	; (800b170 <HAL_TIM_Base_Start_IT+0xb8>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d004      	beq.n	800b124 <HAL_TIM_Base_Start_IT+0x6c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a15      	ldr	r2, [pc, #84]	; (800b174 <HAL_TIM_Base_Start_IT+0xbc>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d111      	bne.n	800b148 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f003 0307 	and.w	r3, r3, #7
 800b12e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b06      	cmp	r3, #6
 800b134:	d010      	beq.n	800b158 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f042 0201 	orr.w	r2, r2, #1
 800b144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b146:	e007      	b.n	800b158 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f042 0201 	orr.w	r2, r2, #1
 800b156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	bc80      	pop	{r7}
 800b162:	4770      	bx	lr
 800b164:	40012c00 	.word	0x40012c00
 800b168:	40013400 	.word	0x40013400
 800b16c:	40000400 	.word	0x40000400
 800b170:	40000800 	.word	0x40000800
 800b174:	40000c00 	.word	0x40000c00

0800b178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d122      	bne.n	800b1d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d11b      	bne.n	800b1d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f06f 0202 	mvn.w	r2, #2
 800b1a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	f003 0303 	and.w	r3, r3, #3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f9b4 	bl	800b528 <HAL_TIM_IC_CaptureCallback>
 800b1c0:	e005      	b.n	800b1ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f9a7 	bl	800b516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9b6 	bl	800b53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	f003 0304 	and.w	r3, r3, #4
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d122      	bne.n	800b228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0304 	and.w	r3, r3, #4
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d11b      	bne.n	800b228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f06f 0204 	mvn.w	r2, #4
 800b1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f98a 	bl	800b528 <HAL_TIM_IC_CaptureCallback>
 800b214:	e005      	b.n	800b222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f97d 	bl	800b516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f98c 	bl	800b53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b08      	cmp	r3, #8
 800b234:	d122      	bne.n	800b27c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b08      	cmp	r3, #8
 800b242:	d11b      	bne.n	800b27c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f06f 0208 	mvn.w	r2, #8
 800b24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2204      	movs	r2, #4
 800b252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	f003 0303 	and.w	r3, r3, #3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f960 	bl	800b528 <HAL_TIM_IC_CaptureCallback>
 800b268:	e005      	b.n	800b276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f953 	bl	800b516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f962 	bl	800b53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	f003 0310 	and.w	r3, r3, #16
 800b286:	2b10      	cmp	r3, #16
 800b288:	d122      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b10      	cmp	r3, #16
 800b296:	d11b      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0210 	mvn.w	r2, #16
 800b2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f936 	bl	800b528 <HAL_TIM_IC_CaptureCallback>
 800b2bc:	e005      	b.n	800b2ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f929 	bl	800b516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f938 	bl	800b53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d10e      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d107      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f06f 0201 	mvn.w	r2, #1
 800b2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fc fd4e 	bl	8007d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b306:	2b80      	cmp	r3, #128	; 0x80
 800b308:	d10e      	bne.n	800b328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b314:	2b80      	cmp	r3, #128	; 0x80
 800b316:	d107      	bne.n	800b328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 faa1 	bl	800b86a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b332:	2b40      	cmp	r3, #64	; 0x40
 800b334:	d10e      	bne.n	800b354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b340:	2b40      	cmp	r3, #64	; 0x40
 800b342:	d107      	bne.n	800b354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f8fc 	bl	800b54c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d10e      	bne.n	800b380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b20      	cmp	r3, #32
 800b36e:	d107      	bne.n	800b380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f06f 0220 	mvn.w	r2, #32
 800b378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa6c 	bl	800b858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e0b4      	b.n	800b50e <HAL_TIM_ConfigClockSource+0x186>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3dc:	d03e      	beq.n	800b45c <HAL_TIM_ConfigClockSource+0xd4>
 800b3de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3e2:	f200 8087 	bhi.w	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ea:	f000 8086 	beq.w	800b4fa <HAL_TIM_ConfigClockSource+0x172>
 800b3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3f2:	d87f      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3f4:	2b70      	cmp	r3, #112	; 0x70
 800b3f6:	d01a      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0xa6>
 800b3f8:	2b70      	cmp	r3, #112	; 0x70
 800b3fa:	d87b      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3fc:	2b60      	cmp	r3, #96	; 0x60
 800b3fe:	d050      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0x11a>
 800b400:	2b60      	cmp	r3, #96	; 0x60
 800b402:	d877      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b404:	2b50      	cmp	r3, #80	; 0x50
 800b406:	d03c      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0xfa>
 800b408:	2b50      	cmp	r3, #80	; 0x50
 800b40a:	d873      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d058      	beq.n	800b4c2 <HAL_TIM_ConfigClockSource+0x13a>
 800b410:	2b40      	cmp	r3, #64	; 0x40
 800b412:	d86f      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b414:	2b30      	cmp	r3, #48	; 0x30
 800b416:	d064      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b418:	2b30      	cmp	r3, #48	; 0x30
 800b41a:	d86b      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b41c:	2b20      	cmp	r3, #32
 800b41e:	d060      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b420:	2b20      	cmp	r3, #32
 800b422:	d867      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b424:	2b00      	cmp	r3, #0
 800b426:	d05c      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d05a      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b42c:	e062      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b43e:	f000 f980 	bl	800b742 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	609a      	str	r2, [r3, #8]
      break;
 800b45a:	e04f      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b46c:	f000 f969 	bl	800b742 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b47e:	609a      	str	r2, [r3, #8]
      break;
 800b480:	e03c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b48e:	461a      	mov	r2, r3
 800b490:	f000 f8e0 	bl	800b654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2150      	movs	r1, #80	; 0x50
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f937 	bl	800b70e <TIM_ITRx_SetConfig>
      break;
 800b4a0:	e02c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f000 f8fe 	bl	800b6b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2160      	movs	r1, #96	; 0x60
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 f927 	bl	800b70e <TIM_ITRx_SetConfig>
      break;
 800b4c0:	e01c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f000 f8c0 	bl	800b654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2140      	movs	r1, #64	; 0x40
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 f917 	bl	800b70e <TIM_ITRx_SetConfig>
      break;
 800b4e0:	e00c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	f000 f90e 	bl	800b70e <TIM_ITRx_SetConfig>
      break;
 800b4f2:	e003      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f8:	e000      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b51e:	bf00      	nop
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr

0800b528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	bc80      	pop	{r7}
 800b538:	4770      	bx	lr

0800b53a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	bc80      	pop	{r7}
 800b54a:	4770      	bx	lr

0800b54c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	bc80      	pop	{r7}
 800b55c:	4770      	bx	lr
	...

0800b560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a33      	ldr	r2, [pc, #204]	; (800b640 <TIM_Base_SetConfig+0xe0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d013      	beq.n	800b5a0 <TIM_Base_SetConfig+0x40>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a32      	ldr	r2, [pc, #200]	; (800b644 <TIM_Base_SetConfig+0xe4>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d00f      	beq.n	800b5a0 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b586:	d00b      	beq.n	800b5a0 <TIM_Base_SetConfig+0x40>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a2f      	ldr	r2, [pc, #188]	; (800b648 <TIM_Base_SetConfig+0xe8>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d007      	beq.n	800b5a0 <TIM_Base_SetConfig+0x40>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a2e      	ldr	r2, [pc, #184]	; (800b64c <TIM_Base_SetConfig+0xec>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d003      	beq.n	800b5a0 <TIM_Base_SetConfig+0x40>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a2d      	ldr	r2, [pc, #180]	; (800b650 <TIM_Base_SetConfig+0xf0>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d108      	bne.n	800b5b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a22      	ldr	r2, [pc, #136]	; (800b640 <TIM_Base_SetConfig+0xe0>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d013      	beq.n	800b5e2 <TIM_Base_SetConfig+0x82>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a21      	ldr	r2, [pc, #132]	; (800b644 <TIM_Base_SetConfig+0xe4>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d00f      	beq.n	800b5e2 <TIM_Base_SetConfig+0x82>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c8:	d00b      	beq.n	800b5e2 <TIM_Base_SetConfig+0x82>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a1e      	ldr	r2, [pc, #120]	; (800b648 <TIM_Base_SetConfig+0xe8>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d007      	beq.n	800b5e2 <TIM_Base_SetConfig+0x82>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a1d      	ldr	r2, [pc, #116]	; (800b64c <TIM_Base_SetConfig+0xec>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d003      	beq.n	800b5e2 <TIM_Base_SetConfig+0x82>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a1c      	ldr	r2, [pc, #112]	; (800b650 <TIM_Base_SetConfig+0xf0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d108      	bne.n	800b5f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689a      	ldr	r2, [r3, #8]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a09      	ldr	r2, [pc, #36]	; (800b640 <TIM_Base_SetConfig+0xe0>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d003      	beq.n	800b628 <TIM_Base_SetConfig+0xc8>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a08      	ldr	r2, [pc, #32]	; (800b644 <TIM_Base_SetConfig+0xe4>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d103      	bne.n	800b630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	615a      	str	r2, [r3, #20]
}
 800b636:	bf00      	nop
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bc80      	pop	{r7}
 800b63e:	4770      	bx	lr
 800b640:	40012c00 	.word	0x40012c00
 800b644:	40013400 	.word	0x40013400
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40000c00 	.word	0x40000c00

0800b654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	f023 0201 	bic.w	r2, r3, #1
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b67e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4313      	orrs	r3, r2
 800b688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f023 030a 	bic.w	r3, r3, #10
 800b690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	4313      	orrs	r3, r2
 800b698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	621a      	str	r2, [r3, #32]
}
 800b6a6:	bf00      	nop
 800b6a8:	371c      	adds	r7, #28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bc80      	pop	{r7}
 800b6ae:	4770      	bx	lr

0800b6b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	f023 0210 	bic.w	r2, r3, #16
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	031b      	lsls	r3, r3, #12
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	621a      	str	r2, [r3, #32]
}
 800b704:	bf00      	nop
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	bc80      	pop	{r7}
 800b70c:	4770      	bx	lr

0800b70e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	f043 0307 	orr.w	r3, r3, #7
 800b730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	609a      	str	r2, [r3, #8]
}
 800b738:	bf00      	nop
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bc80      	pop	{r7}
 800b740:	4770      	bx	lr

0800b742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
 800b74e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b75c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	021a      	lsls	r2, r3, #8
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	431a      	orrs	r2, r3
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4313      	orrs	r3, r2
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	609a      	str	r2, [r3, #8]
}
 800b776:	bf00      	nop
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b794:	2302      	movs	r3, #2
 800b796:	e050      	b.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a1b      	ldr	r2, [pc, #108]	; (800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d018      	beq.n	800b80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a19      	ldr	r2, [pc, #100]	; (800b848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d013      	beq.n	800b80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ee:	d00e      	beq.n	800b80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a15      	ldr	r2, [pc, #84]	; (800b84c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d009      	beq.n	800b80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a14      	ldr	r2, [pc, #80]	; (800b850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d004      	beq.n	800b80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a12      	ldr	r2, [pc, #72]	; (800b854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d10c      	bne.n	800b828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr
 800b844:	40012c00 	.word	0x40012c00
 800b848:	40013400 	.word	0x40013400
 800b84c:	40000400 	.word	0x40000400
 800b850:	40000800 	.word	0x40000800
 800b854:	40000c00 	.word	0x40000c00

0800b858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	bc80      	pop	{r7}
 800b868:	4770      	bx	lr

0800b86a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b872:	bf00      	nop
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	bc80      	pop	{r7}
 800b87a:	4770      	bx	lr

0800b87c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e042      	b.n	800b914 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7fc fe1a 	bl	80084dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2224      	movs	r2, #36	; 0x24
 800b8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68da      	ldr	r2, [r3, #12]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fcb5 	bl	800c230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	695a      	ldr	r2, [r3, #20]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68da      	ldr	r2, [r3, #12]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2220      	movs	r2, #32
 800b900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b20      	cmp	r3, #32
 800b934:	d121      	bne.n	800b97a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <HAL_UART_Transmit_IT+0x26>
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e01a      	b.n	800b97c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	88fa      	ldrh	r2, [r7, #6]
 800b950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	88fa      	ldrh	r2, [r7, #6]
 800b956:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2221      	movs	r2, #33	; 0x21
 800b962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b974:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	e000      	b.n	800b97c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b97a:	2302      	movs	r3, #2
  }
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	bc80      	pop	{r7}
 800b984:	4770      	bx	lr
	...

0800b988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b0ba      	sub	sp, #232	; 0xe8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	695b      	ldr	r3, [r3, #20]
 800b9aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9be:	f003 030f 	and.w	r3, r3, #15
 800b9c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10f      	bne.n	800b9ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d2:	f003 0320 	and.w	r3, r3, #32
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d009      	beq.n	800b9ee <HAL_UART_IRQHandler+0x66>
 800b9da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9de:	f003 0320 	and.w	r3, r3, #32
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fb63 	bl	800c0b2 <UART_Receive_IT>
      return;
 800b9ec:	e25b      	b.n	800bea6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 80de 	beq.w	800bbb4 <HAL_UART_IRQHandler+0x22c>
 800b9f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d106      	bne.n	800ba12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 80d1 	beq.w	800bbb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <HAL_UART_IRQHandler+0xae>
 800ba1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d005      	beq.n	800ba36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2e:	f043 0201 	orr.w	r2, r3, #1
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <HAL_UART_IRQHandler+0xd2>
 800ba42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba52:	f043 0202 	orr.w	r2, r3, #2
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5e:	f003 0302 	and.w	r3, r3, #2
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00b      	beq.n	800ba7e <HAL_UART_IRQHandler+0xf6>
 800ba66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba76:	f043 0204 	orr.w	r2, r3, #4
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba82:	f003 0308 	and.w	r3, r3, #8
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d011      	beq.n	800baae <HAL_UART_IRQHandler+0x126>
 800ba8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa6:	f043 0208 	orr.w	r2, r3, #8
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 81f2 	beq.w	800be9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babc:	f003 0320 	and.w	r3, r3, #32
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d008      	beq.n	800bad6 <HAL_UART_IRQHandler+0x14e>
 800bac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac8:	f003 0320 	and.w	r3, r3, #32
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 faee 	bl	800c0b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bf14      	ite	ne
 800bae4:	2301      	movne	r3, #1
 800bae6:	2300      	moveq	r3, #0
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf2:	f003 0308 	and.w	r3, r3, #8
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d103      	bne.n	800bb02 <HAL_UART_IRQHandler+0x17a>
 800bafa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d04f      	beq.n	800bba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f9f8 	bl	800bef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d041      	beq.n	800bb9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3314      	adds	r3, #20
 800bb1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb52:	e841 2300 	strex	r3, r2, [r1]
 800bb56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1d9      	bne.n	800bb16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d013      	beq.n	800bb92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6e:	4a7e      	ldr	r2, [pc, #504]	; (800bd68 <HAL_UART_IRQHandler+0x3e0>)
 800bb70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd f86c 	bl	8008c54 <HAL_DMA_Abort_IT>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d016      	beq.n	800bbb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb90:	e00e      	b.n	800bbb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f99c 	bl	800bed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb98:	e00a      	b.n	800bbb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f998 	bl	800bed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba0:	e006      	b.n	800bbb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f994 	bl	800bed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bbae:	e175      	b.n	800be9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb0:	bf00      	nop
    return;
 800bbb2:	e173      	b.n	800be9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	f040 814f 	bne.w	800be5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc2:	f003 0310 	and.w	r3, r3, #16
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 8148 	beq.w	800be5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bbcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd0:	f003 0310 	and.w	r3, r3, #16
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8141 	beq.w	800be5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60bb      	str	r3, [r7, #8]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60bb      	str	r3, [r7, #8]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	60bb      	str	r3, [r7, #8]
 800bbee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 80b6 	beq.w	800bd6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 8145 	beq.w	800bea0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	f080 813e 	bcs.w	800bea0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	2b20      	cmp	r3, #32
 800bc34:	f000 8088 	beq.w	800bd48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc46:	e853 3f00 	ldrex	r3, [r3]
 800bc4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	330c      	adds	r3, #12
 800bc60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc64:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc74:	e841 2300 	strex	r3, r2, [r1]
 800bc78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1d9      	bne.n	800bc38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	3314      	adds	r3, #20
 800bc8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc8e:	e853 3f00 	ldrex	r3, [r3]
 800bc92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc96:	f023 0301 	bic.w	r3, r3, #1
 800bc9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3314      	adds	r3, #20
 800bca4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bca8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bcac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e1      	bne.n	800bc84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3314      	adds	r3, #20
 800bce0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bce4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bce6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcec:	e841 2300 	strex	r3, r2, [r1]
 800bcf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e3      	bne.n	800bcc0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	330c      	adds	r3, #12
 800bd0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd10:	e853 3f00 	ldrex	r3, [r3]
 800bd14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd18:	f023 0310 	bic.w	r3, r3, #16
 800bd1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	330c      	adds	r3, #12
 800bd26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd2a:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd2c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd32:	e841 2300 	strex	r3, r2, [r1]
 800bd36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1e3      	bne.n	800bd06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fc ff4b 	bl	8008bde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f8bf 	bl	800bee2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd64:	e09c      	b.n	800bea0 <HAL_UART_IRQHandler+0x518>
 800bd66:	bf00      	nop
 800bd68:	0800bfbd 	.word	0x0800bfbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 808e 	beq.w	800bea4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8089 	beq.w	800bea4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	330c      	adds	r3, #12
 800bd98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bda8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	330c      	adds	r3, #12
 800bdb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdb6:	647a      	str	r2, [r7, #68]	; 0x44
 800bdb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdbe:	e841 2300 	strex	r3, r2, [r1]
 800bdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1e3      	bne.n	800bd92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3314      	adds	r3, #20
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	e853 3f00 	ldrex	r3, [r3]
 800bdd8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3314      	adds	r3, #20
 800bdea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdee:	633a      	str	r2, [r7, #48]	; 0x30
 800bdf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf6:	e841 2300 	strex	r3, r2, [r1]
 800bdfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1e3      	bne.n	800bdca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2220      	movs	r2, #32
 800be06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	330c      	adds	r3, #12
 800be16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	e853 3f00 	ldrex	r3, [r3]
 800be1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f023 0310 	bic.w	r3, r3, #16
 800be26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	330c      	adds	r3, #12
 800be30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be34:	61fa      	str	r2, [r7, #28]
 800be36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be38:	69b9      	ldr	r1, [r7, #24]
 800be3a:	69fa      	ldr	r2, [r7, #28]
 800be3c:	e841 2300 	strex	r3, r2, [r1]
 800be40:	617b      	str	r3, [r7, #20]
   return(result);
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e3      	bne.n	800be10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2202      	movs	r2, #2
 800be4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f844 	bl	800bee2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be5a:	e023      	b.n	800bea4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be64:	2b00      	cmp	r3, #0
 800be66:	d009      	beq.n	800be7c <HAL_UART_IRQHandler+0x4f4>
 800be68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be70:	2b00      	cmp	r3, #0
 800be72:	d003      	beq.n	800be7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f8b5 	bl	800bfe4 <UART_Transmit_IT>
    return;
 800be7a:	e014      	b.n	800bea6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00e      	beq.n	800bea6 <HAL_UART_IRQHandler+0x51e>
 800be88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be90:	2b00      	cmp	r3, #0
 800be92:	d008      	beq.n	800bea6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f8f4 	bl	800c082 <UART_EndTransmit_IT>
    return;
 800be9a:	e004      	b.n	800bea6 <HAL_UART_IRQHandler+0x51e>
    return;
 800be9c:	bf00      	nop
 800be9e:	e002      	b.n	800bea6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bea0:	bf00      	nop
 800bea2:	e000      	b.n	800bea6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bea4:	bf00      	nop
  }
}
 800bea6:	37e8      	adds	r7, #232	; 0xe8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	bc80      	pop	{r7}
 800bebc:	4770      	bx	lr

0800bebe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	bc80      	pop	{r7}
 800bece:	4770      	bx	lr

0800bed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	bc80      	pop	{r7}
 800bee0:	4770      	bx	lr

0800bee2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bee2:	b480      	push	{r7}
 800bee4:	b083      	sub	sp, #12
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	460b      	mov	r3, r1
 800beec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bc80      	pop	{r7}
 800bef6:	4770      	bx	lr

0800bef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bef8:	b480      	push	{r7}
 800befa:	b095      	sub	sp, #84	; 0x54
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	330c      	adds	r3, #12
 800bf1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf20:	643a      	str	r2, [r7, #64]	; 0x40
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf28:	e841 2300 	strex	r3, r2, [r1]
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1e5      	bne.n	800bf00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3314      	adds	r3, #20
 800bf3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	e853 3f00 	ldrex	r3, [r3]
 800bf42:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	f023 0301 	bic.w	r3, r3, #1
 800bf4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3314      	adds	r3, #20
 800bf52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e5      	bne.n	800bf34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d119      	bne.n	800bfa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	330c      	adds	r3, #12
 800bf76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	f023 0310 	bic.w	r3, r3, #16
 800bf86:	647b      	str	r3, [r7, #68]	; 0x44
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	330c      	adds	r3, #12
 800bf8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf90:	61ba      	str	r2, [r7, #24]
 800bf92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6979      	ldr	r1, [r7, #20]
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e5      	bne.n	800bf70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfb2:	bf00      	nop
 800bfb4:	3754      	adds	r7, #84	; 0x54
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bc80      	pop	{r7}
 800bfba:	4770      	bx	lr

0800bfbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff ff7a 	bl	800bed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfdc:	bf00      	nop
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b21      	cmp	r3, #33	; 0x21
 800bff6:	d13e      	bne.n	800c076 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c000:	d114      	bne.n	800c02c <UART_Transmit_IT+0x48>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d110      	bne.n	800c02c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c01e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	1c9a      	adds	r2, r3, #2
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	621a      	str	r2, [r3, #32]
 800c02a:	e008      	b.n	800c03e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	1c59      	adds	r1, r3, #1
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6211      	str	r1, [r2, #32]
 800c036:	781a      	ldrb	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29b      	uxth	r3, r3
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	4619      	mov	r1, r3
 800c04c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10f      	bne.n	800c072 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68da      	ldr	r2, [r3, #12]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c060:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68da      	ldr	r2, [r3, #12]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c070:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	e000      	b.n	800c078 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c076:	2302      	movs	r3, #2
  }
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr

0800c082 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68da      	ldr	r2, [r3, #12]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c098:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2220      	movs	r2, #32
 800c09e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff ff02 	bl	800beac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b08c      	sub	sp, #48	; 0x30
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b22      	cmp	r3, #34	; 0x22
 800c0c4:	f040 80ae 	bne.w	800c224 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d0:	d117      	bne.n	800c102 <UART_Receive_IT+0x50>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d113      	bne.n	800c102 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fa:	1c9a      	adds	r2, r3, #2
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	629a      	str	r2, [r3, #40]	; 0x28
 800c100:	e026      	b.n	800c150 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c108:	2300      	movs	r3, #0
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c114:	d007      	beq.n	800c126 <UART_Receive_IT+0x74>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10a      	bne.n	800c134 <UART_Receive_IT+0x82>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	e008      	b.n	800c146 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c140:	b2da      	uxtb	r2, r3
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c154:	b29b      	uxth	r3, r3
 800c156:	3b01      	subs	r3, #1
 800c158:	b29b      	uxth	r3, r3
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	4619      	mov	r1, r3
 800c15e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c160:	2b00      	cmp	r3, #0
 800c162:	d15d      	bne.n	800c220 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68da      	ldr	r2, [r3, #12]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 0220 	bic.w	r2, r2, #32
 800c172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68da      	ldr	r2, [r3, #12]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f022 0201 	bic.w	r2, r2, #1
 800c192:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2220      	movs	r2, #32
 800c198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d135      	bne.n	800c216 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	330c      	adds	r3, #12
 800c1b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	e853 3f00 	ldrex	r3, [r3]
 800c1be:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f023 0310 	bic.w	r3, r3, #16
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	330c      	adds	r3, #12
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d0:	623a      	str	r2, [r7, #32]
 800c1d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d4:	69f9      	ldr	r1, [r7, #28]
 800c1d6:	6a3a      	ldr	r2, [r7, #32]
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e5      	bne.n	800c1b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 0310 	and.w	r3, r3, #16
 800c1ee:	2b10      	cmp	r3, #16
 800c1f0:	d10a      	bne.n	800c208 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff fe67 	bl	800bee2 <HAL_UARTEx_RxEventCallback>
 800c214:	e002      	b.n	800c21c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fe51 	bl	800bebe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	e002      	b.n	800c226 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	e000      	b.n	800c226 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c224:	2302      	movs	r3, #2
  }
}
 800c226:	4618      	mov	r0, r3
 800c228:	3730      	adds	r7, #48	; 0x30
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	430a      	orrs	r2, r1
 800c24c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	689a      	ldr	r2, [r3, #8]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	431a      	orrs	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c26a:	f023 030c 	bic.w	r3, r3, #12
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	68b9      	ldr	r1, [r7, #8]
 800c274:	430b      	orrs	r3, r1
 800c276:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	699a      	ldr	r2, [r3, #24]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a2c      	ldr	r2, [pc, #176]	; (800c344 <UART_SetConfig+0x114>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d103      	bne.n	800c2a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c298:	f7fe fe8c 	bl	800afb4 <HAL_RCC_GetPCLK2Freq>
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	e002      	b.n	800c2a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2a0:	f7fe fe74 	bl	800af8c <HAL_RCC_GetPCLK1Freq>
 800c2a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	009a      	lsls	r2, r3, #2
 800c2b0:	441a      	add	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2bc:	4a22      	ldr	r2, [pc, #136]	; (800c348 <UART_SetConfig+0x118>)
 800c2be:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	0119      	lsls	r1, r3, #4
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009a      	lsls	r2, r3, #2
 800c2d0:	441a      	add	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2dc:	4b1a      	ldr	r3, [pc, #104]	; (800c348 <UART_SetConfig+0x118>)
 800c2de:	fba3 0302 	umull	r0, r3, r3, r2
 800c2e2:	095b      	lsrs	r3, r3, #5
 800c2e4:	2064      	movs	r0, #100	; 0x64
 800c2e6:	fb00 f303 	mul.w	r3, r0, r3
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	011b      	lsls	r3, r3, #4
 800c2ee:	3332      	adds	r3, #50	; 0x32
 800c2f0:	4a15      	ldr	r2, [pc, #84]	; (800c348 <UART_SetConfig+0x118>)
 800c2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2f6:	095b      	lsrs	r3, r3, #5
 800c2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2fc:	4419      	add	r1, r3
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009a      	lsls	r2, r3, #2
 800c308:	441a      	add	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	fbb2 f2f3 	udiv	r2, r2, r3
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <UART_SetConfig+0x118>)
 800c316:	fba3 0302 	umull	r0, r3, r3, r2
 800c31a:	095b      	lsrs	r3, r3, #5
 800c31c:	2064      	movs	r0, #100	; 0x64
 800c31e:	fb00 f303 	mul.w	r3, r0, r3
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	011b      	lsls	r3, r3, #4
 800c326:	3332      	adds	r3, #50	; 0x32
 800c328:	4a07      	ldr	r2, [pc, #28]	; (800c348 <UART_SetConfig+0x118>)
 800c32a:	fba2 2303 	umull	r2, r3, r2, r3
 800c32e:	095b      	lsrs	r3, r3, #5
 800c330:	f003 020f 	and.w	r2, r3, #15
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	440a      	add	r2, r1
 800c33a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c33c:	bf00      	nop
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	40013800 	.word	0x40013800
 800c348:	51eb851f 	.word	0x51eb851f

0800c34c <__itoa>:
 800c34c:	1e93      	subs	r3, r2, #2
 800c34e:	2b22      	cmp	r3, #34	; 0x22
 800c350:	b510      	push	{r4, lr}
 800c352:	460c      	mov	r4, r1
 800c354:	d904      	bls.n	800c360 <__itoa+0x14>
 800c356:	2300      	movs	r3, #0
 800c358:	461c      	mov	r4, r3
 800c35a:	700b      	strb	r3, [r1, #0]
 800c35c:	4620      	mov	r0, r4
 800c35e:	bd10      	pop	{r4, pc}
 800c360:	2a0a      	cmp	r2, #10
 800c362:	d109      	bne.n	800c378 <__itoa+0x2c>
 800c364:	2800      	cmp	r0, #0
 800c366:	da07      	bge.n	800c378 <__itoa+0x2c>
 800c368:	232d      	movs	r3, #45	; 0x2d
 800c36a:	700b      	strb	r3, [r1, #0]
 800c36c:	2101      	movs	r1, #1
 800c36e:	4240      	negs	r0, r0
 800c370:	4421      	add	r1, r4
 800c372:	f000 f8d9 	bl	800c528 <__utoa>
 800c376:	e7f1      	b.n	800c35c <__itoa+0x10>
 800c378:	2100      	movs	r1, #0
 800c37a:	e7f9      	b.n	800c370 <__itoa+0x24>

0800c37c <itoa>:
 800c37c:	f7ff bfe6 	b.w	800c34c <__itoa>

0800c380 <malloc>:
 800c380:	4b02      	ldr	r3, [pc, #8]	; (800c38c <malloc+0xc>)
 800c382:	4601      	mov	r1, r0
 800c384:	6818      	ldr	r0, [r3, #0]
 800c386:	f000 b823 	b.w	800c3d0 <_malloc_r>
 800c38a:	bf00      	nop
 800c38c:	20000108 	.word	0x20000108

0800c390 <sbrk_aligned>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	4e0e      	ldr	r6, [pc, #56]	; (800c3cc <sbrk_aligned+0x3c>)
 800c394:	460c      	mov	r4, r1
 800c396:	6831      	ldr	r1, [r6, #0]
 800c398:	4605      	mov	r5, r0
 800c39a:	b911      	cbnz	r1, 800c3a2 <sbrk_aligned+0x12>
 800c39c:	f000 f930 	bl	800c600 <_sbrk_r>
 800c3a0:	6030      	str	r0, [r6, #0]
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 f92b 	bl	800c600 <_sbrk_r>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d00a      	beq.n	800c3c4 <sbrk_aligned+0x34>
 800c3ae:	1cc4      	adds	r4, r0, #3
 800c3b0:	f024 0403 	bic.w	r4, r4, #3
 800c3b4:	42a0      	cmp	r0, r4
 800c3b6:	d007      	beq.n	800c3c8 <sbrk_aligned+0x38>
 800c3b8:	1a21      	subs	r1, r4, r0
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f920 	bl	800c600 <_sbrk_r>
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d101      	bne.n	800c3c8 <sbrk_aligned+0x38>
 800c3c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	20000498 	.word	0x20000498

0800c3d0 <_malloc_r>:
 800c3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	1ccd      	adds	r5, r1, #3
 800c3d6:	f025 0503 	bic.w	r5, r5, #3
 800c3da:	3508      	adds	r5, #8
 800c3dc:	2d0c      	cmp	r5, #12
 800c3de:	bf38      	it	cc
 800c3e0:	250c      	movcc	r5, #12
 800c3e2:	2d00      	cmp	r5, #0
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	db01      	blt.n	800c3ec <_malloc_r+0x1c>
 800c3e8:	42a9      	cmp	r1, r5
 800c3ea:	d905      	bls.n	800c3f8 <_malloc_r+0x28>
 800c3ec:	230c      	movs	r3, #12
 800c3ee:	2600      	movs	r6, #0
 800c3f0:	603b      	str	r3, [r7, #0]
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4cc <_malloc_r+0xfc>
 800c3fc:	f000 f868 	bl	800c4d0 <__malloc_lock>
 800c400:	f8d8 3000 	ldr.w	r3, [r8]
 800c404:	461c      	mov	r4, r3
 800c406:	bb5c      	cbnz	r4, 800c460 <_malloc_r+0x90>
 800c408:	4629      	mov	r1, r5
 800c40a:	4638      	mov	r0, r7
 800c40c:	f7ff ffc0 	bl	800c390 <sbrk_aligned>
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	4604      	mov	r4, r0
 800c414:	d155      	bne.n	800c4c2 <_malloc_r+0xf2>
 800c416:	f8d8 4000 	ldr.w	r4, [r8]
 800c41a:	4626      	mov	r6, r4
 800c41c:	2e00      	cmp	r6, #0
 800c41e:	d145      	bne.n	800c4ac <_malloc_r+0xdc>
 800c420:	2c00      	cmp	r4, #0
 800c422:	d048      	beq.n	800c4b6 <_malloc_r+0xe6>
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	4631      	mov	r1, r6
 800c428:	4638      	mov	r0, r7
 800c42a:	eb04 0903 	add.w	r9, r4, r3
 800c42e:	f000 f8e7 	bl	800c600 <_sbrk_r>
 800c432:	4581      	cmp	r9, r0
 800c434:	d13f      	bne.n	800c4b6 <_malloc_r+0xe6>
 800c436:	6821      	ldr	r1, [r4, #0]
 800c438:	4638      	mov	r0, r7
 800c43a:	1a6d      	subs	r5, r5, r1
 800c43c:	4629      	mov	r1, r5
 800c43e:	f7ff ffa7 	bl	800c390 <sbrk_aligned>
 800c442:	3001      	adds	r0, #1
 800c444:	d037      	beq.n	800c4b6 <_malloc_r+0xe6>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	442b      	add	r3, r5
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	f8d8 3000 	ldr.w	r3, [r8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d038      	beq.n	800c4c6 <_malloc_r+0xf6>
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	42a2      	cmp	r2, r4
 800c458:	d12b      	bne.n	800c4b2 <_malloc_r+0xe2>
 800c45a:	2200      	movs	r2, #0
 800c45c:	605a      	str	r2, [r3, #4]
 800c45e:	e00f      	b.n	800c480 <_malloc_r+0xb0>
 800c460:	6822      	ldr	r2, [r4, #0]
 800c462:	1b52      	subs	r2, r2, r5
 800c464:	d41f      	bmi.n	800c4a6 <_malloc_r+0xd6>
 800c466:	2a0b      	cmp	r2, #11
 800c468:	d917      	bls.n	800c49a <_malloc_r+0xca>
 800c46a:	1961      	adds	r1, r4, r5
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	6025      	str	r5, [r4, #0]
 800c470:	bf18      	it	ne
 800c472:	6059      	strne	r1, [r3, #4]
 800c474:	6863      	ldr	r3, [r4, #4]
 800c476:	bf08      	it	eq
 800c478:	f8c8 1000 	streq.w	r1, [r8]
 800c47c:	5162      	str	r2, [r4, r5]
 800c47e:	604b      	str	r3, [r1, #4]
 800c480:	4638      	mov	r0, r7
 800c482:	f104 060b 	add.w	r6, r4, #11
 800c486:	f000 f829 	bl	800c4dc <__malloc_unlock>
 800c48a:	f026 0607 	bic.w	r6, r6, #7
 800c48e:	1d23      	adds	r3, r4, #4
 800c490:	1af2      	subs	r2, r6, r3
 800c492:	d0ae      	beq.n	800c3f2 <_malloc_r+0x22>
 800c494:	1b9b      	subs	r3, r3, r6
 800c496:	50a3      	str	r3, [r4, r2]
 800c498:	e7ab      	b.n	800c3f2 <_malloc_r+0x22>
 800c49a:	42a3      	cmp	r3, r4
 800c49c:	6862      	ldr	r2, [r4, #4]
 800c49e:	d1dd      	bne.n	800c45c <_malloc_r+0x8c>
 800c4a0:	f8c8 2000 	str.w	r2, [r8]
 800c4a4:	e7ec      	b.n	800c480 <_malloc_r+0xb0>
 800c4a6:	4623      	mov	r3, r4
 800c4a8:	6864      	ldr	r4, [r4, #4]
 800c4aa:	e7ac      	b.n	800c406 <_malloc_r+0x36>
 800c4ac:	4634      	mov	r4, r6
 800c4ae:	6876      	ldr	r6, [r6, #4]
 800c4b0:	e7b4      	b.n	800c41c <_malloc_r+0x4c>
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	e7cc      	b.n	800c450 <_malloc_r+0x80>
 800c4b6:	230c      	movs	r3, #12
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	f000 f80e 	bl	800c4dc <__malloc_unlock>
 800c4c0:	e797      	b.n	800c3f2 <_malloc_r+0x22>
 800c4c2:	6025      	str	r5, [r4, #0]
 800c4c4:	e7dc      	b.n	800c480 <_malloc_r+0xb0>
 800c4c6:	605b      	str	r3, [r3, #4]
 800c4c8:	deff      	udf	#255	; 0xff
 800c4ca:	bf00      	nop
 800c4cc:	20000494 	.word	0x20000494

0800c4d0 <__malloc_lock>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	; (800c4d8 <__malloc_lock+0x8>)
 800c4d2:	f000 b8cf 	b.w	800c674 <__retarget_lock_acquire_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	200005d4 	.word	0x200005d4

0800c4dc <__malloc_unlock>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	; (800c4e4 <__malloc_unlock+0x8>)
 800c4de:	f000 b8ca 	b.w	800c676 <__retarget_lock_release_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	200005d4 	.word	0x200005d4

0800c4e8 <siprintf>:
 800c4e8:	b40e      	push	{r1, r2, r3}
 800c4ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4ee:	b500      	push	{lr}
 800c4f0:	b09c      	sub	sp, #112	; 0x70
 800c4f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c4f4:	9002      	str	r0, [sp, #8]
 800c4f6:	9006      	str	r0, [sp, #24]
 800c4f8:	9107      	str	r1, [sp, #28]
 800c4fa:	9104      	str	r1, [sp, #16]
 800c4fc:	4808      	ldr	r0, [pc, #32]	; (800c520 <siprintf+0x38>)
 800c4fe:	4909      	ldr	r1, [pc, #36]	; (800c524 <siprintf+0x3c>)
 800c500:	f853 2b04 	ldr.w	r2, [r3], #4
 800c504:	9105      	str	r1, [sp, #20]
 800c506:	6800      	ldr	r0, [r0, #0]
 800c508:	a902      	add	r1, sp, #8
 800c50a:	9301      	str	r3, [sp, #4]
 800c50c:	f000 f95e 	bl	800c7cc <_svfiprintf_r>
 800c510:	2200      	movs	r2, #0
 800c512:	9b02      	ldr	r3, [sp, #8]
 800c514:	701a      	strb	r2, [r3, #0]
 800c516:	b01c      	add	sp, #112	; 0x70
 800c518:	f85d eb04 	ldr.w	lr, [sp], #4
 800c51c:	b003      	add	sp, #12
 800c51e:	4770      	bx	lr
 800c520:	20000108 	.word	0x20000108
 800c524:	ffff0208 	.word	0xffff0208

0800c528 <__utoa>:
 800c528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52a:	b08b      	sub	sp, #44	; 0x2c
 800c52c:	4605      	mov	r5, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	466e      	mov	r6, sp
 800c532:	4c1d      	ldr	r4, [pc, #116]	; (800c5a8 <__utoa+0x80>)
 800c534:	f104 0c20 	add.w	ip, r4, #32
 800c538:	4637      	mov	r7, r6
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	6861      	ldr	r1, [r4, #4]
 800c53e:	3408      	adds	r4, #8
 800c540:	c703      	stmia	r7!, {r0, r1}
 800c542:	4564      	cmp	r4, ip
 800c544:	463e      	mov	r6, r7
 800c546:	d1f7      	bne.n	800c538 <__utoa+0x10>
 800c548:	7921      	ldrb	r1, [r4, #4]
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	7139      	strb	r1, [r7, #4]
 800c54e:	1e91      	subs	r1, r2, #2
 800c550:	2922      	cmp	r1, #34	; 0x22
 800c552:	6038      	str	r0, [r7, #0]
 800c554:	f04f 0100 	mov.w	r1, #0
 800c558:	d904      	bls.n	800c564 <__utoa+0x3c>
 800c55a:	7019      	strb	r1, [r3, #0]
 800c55c:	460b      	mov	r3, r1
 800c55e:	4618      	mov	r0, r3
 800c560:	b00b      	add	sp, #44	; 0x2c
 800c562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c564:	1e58      	subs	r0, r3, #1
 800c566:	4684      	mov	ip, r0
 800c568:	fbb5 f7f2 	udiv	r7, r5, r2
 800c56c:	fb02 5617 	mls	r6, r2, r7, r5
 800c570:	3628      	adds	r6, #40	; 0x28
 800c572:	446e      	add	r6, sp
 800c574:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c578:	460c      	mov	r4, r1
 800c57a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c57e:	462e      	mov	r6, r5
 800c580:	42b2      	cmp	r2, r6
 800c582:	463d      	mov	r5, r7
 800c584:	f101 0101 	add.w	r1, r1, #1
 800c588:	d9ee      	bls.n	800c568 <__utoa+0x40>
 800c58a:	2200      	movs	r2, #0
 800c58c:	545a      	strb	r2, [r3, r1]
 800c58e:	1919      	adds	r1, r3, r4
 800c590:	1aa5      	subs	r5, r4, r2
 800c592:	42aa      	cmp	r2, r5
 800c594:	dae3      	bge.n	800c55e <__utoa+0x36>
 800c596:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c59a:	780e      	ldrb	r6, [r1, #0]
 800c59c:	3201      	adds	r2, #1
 800c59e:	7006      	strb	r6, [r0, #0]
 800c5a0:	f801 5901 	strb.w	r5, [r1], #-1
 800c5a4:	e7f4      	b.n	800c590 <__utoa+0x68>
 800c5a6:	bf00      	nop
 800c5a8:	0800dd16 	.word	0x0800dd16

0800c5ac <strcat>:
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	7814      	ldrb	r4, [r2, #0]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	3201      	adds	r2, #1
 800c5b6:	2c00      	cmp	r4, #0
 800c5b8:	d1fa      	bne.n	800c5b0 <strcat+0x4>
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5c4:	2a00      	cmp	r2, #0
 800c5c6:	d1f9      	bne.n	800c5bc <strcat+0x10>
 800c5c8:	bd10      	pop	{r4, pc}

0800c5ca <strncpy>:
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	3901      	subs	r1, #1
 800c5d0:	b132      	cbz	r2, 800c5e0 <strncpy+0x16>
 800c5d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5d6:	3a01      	subs	r2, #1
 800c5d8:	f803 4b01 	strb.w	r4, [r3], #1
 800c5dc:	2c00      	cmp	r4, #0
 800c5de:	d1f7      	bne.n	800c5d0 <strncpy+0x6>
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	441a      	add	r2, r3
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d100      	bne.n	800c5ea <strncpy+0x20>
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ee:	e7f9      	b.n	800c5e4 <strncpy+0x1a>

0800c5f0 <memset>:
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	4402      	add	r2, r0
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d100      	bne.n	800c5fa <memset+0xa>
 800c5f8:	4770      	bx	lr
 800c5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c5fe:	e7f9      	b.n	800c5f4 <memset+0x4>

0800c600 <_sbrk_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	2300      	movs	r3, #0
 800c604:	4d05      	ldr	r5, [pc, #20]	; (800c61c <_sbrk_r+0x1c>)
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7fb fff6 	bl	80085fc <_sbrk>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_sbrk_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_sbrk_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	200005d8 	.word	0x200005d8

0800c620 <__errno>:
 800c620:	4b01      	ldr	r3, [pc, #4]	; (800c628 <__errno+0x8>)
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	20000108 	.word	0x20000108

0800c62c <__libc_init_array>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	2600      	movs	r6, #0
 800c630:	4d0c      	ldr	r5, [pc, #48]	; (800c664 <__libc_init_array+0x38>)
 800c632:	4c0d      	ldr	r4, [pc, #52]	; (800c668 <__libc_init_array+0x3c>)
 800c634:	1b64      	subs	r4, r4, r5
 800c636:	10a4      	asrs	r4, r4, #2
 800c638:	42a6      	cmp	r6, r4
 800c63a:	d109      	bne.n	800c650 <__libc_init_array+0x24>
 800c63c:	f000 fbc6 	bl	800cdcc <_init>
 800c640:	2600      	movs	r6, #0
 800c642:	4d0a      	ldr	r5, [pc, #40]	; (800c66c <__libc_init_array+0x40>)
 800c644:	4c0a      	ldr	r4, [pc, #40]	; (800c670 <__libc_init_array+0x44>)
 800c646:	1b64      	subs	r4, r4, r5
 800c648:	10a4      	asrs	r4, r4, #2
 800c64a:	42a6      	cmp	r6, r4
 800c64c:	d105      	bne.n	800c65a <__libc_init_array+0x2e>
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	f855 3b04 	ldr.w	r3, [r5], #4
 800c654:	4798      	blx	r3
 800c656:	3601      	adds	r6, #1
 800c658:	e7ee      	b.n	800c638 <__libc_init_array+0xc>
 800c65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65e:	4798      	blx	r3
 800c660:	3601      	adds	r6, #1
 800c662:	e7f2      	b.n	800c64a <__libc_init_array+0x1e>
 800c664:	0800dd70 	.word	0x0800dd70
 800c668:	0800dd70 	.word	0x0800dd70
 800c66c:	0800dd70 	.word	0x0800dd70
 800c670:	0800dd74 	.word	0x0800dd74

0800c674 <__retarget_lock_acquire_recursive>:
 800c674:	4770      	bx	lr

0800c676 <__retarget_lock_release_recursive>:
 800c676:	4770      	bx	lr

0800c678 <strcpy>:
 800c678:	4603      	mov	r3, r0
 800c67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c67e:	f803 2b01 	strb.w	r2, [r3], #1
 800c682:	2a00      	cmp	r2, #0
 800c684:	d1f9      	bne.n	800c67a <strcpy+0x2>
 800c686:	4770      	bx	lr

0800c688 <_free_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4605      	mov	r5, r0
 800c68c:	2900      	cmp	r1, #0
 800c68e:	d040      	beq.n	800c712 <_free_r+0x8a>
 800c690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c694:	1f0c      	subs	r4, r1, #4
 800c696:	2b00      	cmp	r3, #0
 800c698:	bfb8      	it	lt
 800c69a:	18e4      	addlt	r4, r4, r3
 800c69c:	f7ff ff18 	bl	800c4d0 <__malloc_lock>
 800c6a0:	4a1c      	ldr	r2, [pc, #112]	; (800c714 <_free_r+0x8c>)
 800c6a2:	6813      	ldr	r3, [r2, #0]
 800c6a4:	b933      	cbnz	r3, 800c6b4 <_free_r+0x2c>
 800c6a6:	6063      	str	r3, [r4, #4]
 800c6a8:	6014      	str	r4, [r2, #0]
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b0:	f7ff bf14 	b.w	800c4dc <__malloc_unlock>
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	d908      	bls.n	800c6ca <_free_r+0x42>
 800c6b8:	6820      	ldr	r0, [r4, #0]
 800c6ba:	1821      	adds	r1, r4, r0
 800c6bc:	428b      	cmp	r3, r1
 800c6be:	bf01      	itttt	eq
 800c6c0:	6819      	ldreq	r1, [r3, #0]
 800c6c2:	685b      	ldreq	r3, [r3, #4]
 800c6c4:	1809      	addeq	r1, r1, r0
 800c6c6:	6021      	streq	r1, [r4, #0]
 800c6c8:	e7ed      	b.n	800c6a6 <_free_r+0x1e>
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	b10b      	cbz	r3, 800c6d4 <_free_r+0x4c>
 800c6d0:	42a3      	cmp	r3, r4
 800c6d2:	d9fa      	bls.n	800c6ca <_free_r+0x42>
 800c6d4:	6811      	ldr	r1, [r2, #0]
 800c6d6:	1850      	adds	r0, r2, r1
 800c6d8:	42a0      	cmp	r0, r4
 800c6da:	d10b      	bne.n	800c6f4 <_free_r+0x6c>
 800c6dc:	6820      	ldr	r0, [r4, #0]
 800c6de:	4401      	add	r1, r0
 800c6e0:	1850      	adds	r0, r2, r1
 800c6e2:	4283      	cmp	r3, r0
 800c6e4:	6011      	str	r1, [r2, #0]
 800c6e6:	d1e0      	bne.n	800c6aa <_free_r+0x22>
 800c6e8:	6818      	ldr	r0, [r3, #0]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	4408      	add	r0, r1
 800c6ee:	6010      	str	r0, [r2, #0]
 800c6f0:	6053      	str	r3, [r2, #4]
 800c6f2:	e7da      	b.n	800c6aa <_free_r+0x22>
 800c6f4:	d902      	bls.n	800c6fc <_free_r+0x74>
 800c6f6:	230c      	movs	r3, #12
 800c6f8:	602b      	str	r3, [r5, #0]
 800c6fa:	e7d6      	b.n	800c6aa <_free_r+0x22>
 800c6fc:	6820      	ldr	r0, [r4, #0]
 800c6fe:	1821      	adds	r1, r4, r0
 800c700:	428b      	cmp	r3, r1
 800c702:	bf01      	itttt	eq
 800c704:	6819      	ldreq	r1, [r3, #0]
 800c706:	685b      	ldreq	r3, [r3, #4]
 800c708:	1809      	addeq	r1, r1, r0
 800c70a:	6021      	streq	r1, [r4, #0]
 800c70c:	6063      	str	r3, [r4, #4]
 800c70e:	6054      	str	r4, [r2, #4]
 800c710:	e7cb      	b.n	800c6aa <_free_r+0x22>
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	20000494 	.word	0x20000494

0800c718 <__ssputs_r>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	461f      	mov	r7, r3
 800c71e:	688e      	ldr	r6, [r1, #8]
 800c720:	4682      	mov	sl, r0
 800c722:	42be      	cmp	r6, r7
 800c724:	460c      	mov	r4, r1
 800c726:	4690      	mov	r8, r2
 800c728:	680b      	ldr	r3, [r1, #0]
 800c72a:	d82c      	bhi.n	800c786 <__ssputs_r+0x6e>
 800c72c:	898a      	ldrh	r2, [r1, #12]
 800c72e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c732:	d026      	beq.n	800c782 <__ssputs_r+0x6a>
 800c734:	6965      	ldr	r5, [r4, #20]
 800c736:	6909      	ldr	r1, [r1, #16]
 800c738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c73c:	eba3 0901 	sub.w	r9, r3, r1
 800c740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c744:	1c7b      	adds	r3, r7, #1
 800c746:	444b      	add	r3, r9
 800c748:	106d      	asrs	r5, r5, #1
 800c74a:	429d      	cmp	r5, r3
 800c74c:	bf38      	it	cc
 800c74e:	461d      	movcc	r5, r3
 800c750:	0553      	lsls	r3, r2, #21
 800c752:	d527      	bpl.n	800c7a4 <__ssputs_r+0x8c>
 800c754:	4629      	mov	r1, r5
 800c756:	f7ff fe3b 	bl	800c3d0 <_malloc_r>
 800c75a:	4606      	mov	r6, r0
 800c75c:	b360      	cbz	r0, 800c7b8 <__ssputs_r+0xa0>
 800c75e:	464a      	mov	r2, r9
 800c760:	6921      	ldr	r1, [r4, #16]
 800c762:	f000 fb1c 	bl	800cd9e <memcpy>
 800c766:	89a3      	ldrh	r3, [r4, #12]
 800c768:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c770:	81a3      	strh	r3, [r4, #12]
 800c772:	6126      	str	r6, [r4, #16]
 800c774:	444e      	add	r6, r9
 800c776:	6026      	str	r6, [r4, #0]
 800c778:	463e      	mov	r6, r7
 800c77a:	6165      	str	r5, [r4, #20]
 800c77c:	eba5 0509 	sub.w	r5, r5, r9
 800c780:	60a5      	str	r5, [r4, #8]
 800c782:	42be      	cmp	r6, r7
 800c784:	d900      	bls.n	800c788 <__ssputs_r+0x70>
 800c786:	463e      	mov	r6, r7
 800c788:	4632      	mov	r2, r6
 800c78a:	4641      	mov	r1, r8
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	f000 fade 	bl	800cd4e <memmove>
 800c792:	2000      	movs	r0, #0
 800c794:	68a3      	ldr	r3, [r4, #8]
 800c796:	1b9b      	subs	r3, r3, r6
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	4433      	add	r3, r6
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	f000 faa3 	bl	800ccf0 <_realloc_r>
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d1e0      	bne.n	800c772 <__ssputs_r+0x5a>
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	6921      	ldr	r1, [r4, #16]
 800c7b4:	f7ff ff68 	bl	800c688 <_free_r>
 800c7b8:	230c      	movs	r3, #12
 800c7ba:	f8ca 3000 	str.w	r3, [sl]
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	e7e9      	b.n	800c7a0 <__ssputs_r+0x88>

0800c7cc <_svfiprintf_r>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	4698      	mov	r8, r3
 800c7d2:	898b      	ldrh	r3, [r1, #12]
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	061b      	lsls	r3, r3, #24
 800c7d8:	460d      	mov	r5, r1
 800c7da:	4614      	mov	r4, r2
 800c7dc:	b09d      	sub	sp, #116	; 0x74
 800c7de:	d50e      	bpl.n	800c7fe <_svfiprintf_r+0x32>
 800c7e0:	690b      	ldr	r3, [r1, #16]
 800c7e2:	b963      	cbnz	r3, 800c7fe <_svfiprintf_r+0x32>
 800c7e4:	2140      	movs	r1, #64	; 0x40
 800c7e6:	f7ff fdf3 	bl	800c3d0 <_malloc_r>
 800c7ea:	6028      	str	r0, [r5, #0]
 800c7ec:	6128      	str	r0, [r5, #16]
 800c7ee:	b920      	cbnz	r0, 800c7fa <_svfiprintf_r+0x2e>
 800c7f0:	230c      	movs	r3, #12
 800c7f2:	603b      	str	r3, [r7, #0]
 800c7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f8:	e0d0      	b.n	800c99c <_svfiprintf_r+0x1d0>
 800c7fa:	2340      	movs	r3, #64	; 0x40
 800c7fc:	616b      	str	r3, [r5, #20]
 800c7fe:	2300      	movs	r3, #0
 800c800:	9309      	str	r3, [sp, #36]	; 0x24
 800c802:	2320      	movs	r3, #32
 800c804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c808:	2330      	movs	r3, #48	; 0x30
 800c80a:	f04f 0901 	mov.w	r9, #1
 800c80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c812:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9b4 <_svfiprintf_r+0x1e8>
 800c816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c81a:	4623      	mov	r3, r4
 800c81c:	469a      	mov	sl, r3
 800c81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c822:	b10a      	cbz	r2, 800c828 <_svfiprintf_r+0x5c>
 800c824:	2a25      	cmp	r2, #37	; 0x25
 800c826:	d1f9      	bne.n	800c81c <_svfiprintf_r+0x50>
 800c828:	ebba 0b04 	subs.w	fp, sl, r4
 800c82c:	d00b      	beq.n	800c846 <_svfiprintf_r+0x7a>
 800c82e:	465b      	mov	r3, fp
 800c830:	4622      	mov	r2, r4
 800c832:	4629      	mov	r1, r5
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff ff6f 	bl	800c718 <__ssputs_r>
 800c83a:	3001      	adds	r0, #1
 800c83c:	f000 80a9 	beq.w	800c992 <_svfiprintf_r+0x1c6>
 800c840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c842:	445a      	add	r2, fp
 800c844:	9209      	str	r2, [sp, #36]	; 0x24
 800c846:	f89a 3000 	ldrb.w	r3, [sl]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 80a1 	beq.w	800c992 <_svfiprintf_r+0x1c6>
 800c850:	2300      	movs	r3, #0
 800c852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85a:	f10a 0a01 	add.w	sl, sl, #1
 800c85e:	9304      	str	r3, [sp, #16]
 800c860:	9307      	str	r3, [sp, #28]
 800c862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c866:	931a      	str	r3, [sp, #104]	; 0x68
 800c868:	4654      	mov	r4, sl
 800c86a:	2205      	movs	r2, #5
 800c86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c870:	4850      	ldr	r0, [pc, #320]	; (800c9b4 <_svfiprintf_r+0x1e8>)
 800c872:	f000 fa86 	bl	800cd82 <memchr>
 800c876:	9a04      	ldr	r2, [sp, #16]
 800c878:	b9d8      	cbnz	r0, 800c8b2 <_svfiprintf_r+0xe6>
 800c87a:	06d0      	lsls	r0, r2, #27
 800c87c:	bf44      	itt	mi
 800c87e:	2320      	movmi	r3, #32
 800c880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c884:	0711      	lsls	r1, r2, #28
 800c886:	bf44      	itt	mi
 800c888:	232b      	movmi	r3, #43	; 0x2b
 800c88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c88e:	f89a 3000 	ldrb.w	r3, [sl]
 800c892:	2b2a      	cmp	r3, #42	; 0x2a
 800c894:	d015      	beq.n	800c8c2 <_svfiprintf_r+0xf6>
 800c896:	4654      	mov	r4, sl
 800c898:	2000      	movs	r0, #0
 800c89a:	f04f 0c0a 	mov.w	ip, #10
 800c89e:	9a07      	ldr	r2, [sp, #28]
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8a6:	3b30      	subs	r3, #48	; 0x30
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	d94d      	bls.n	800c948 <_svfiprintf_r+0x17c>
 800c8ac:	b1b0      	cbz	r0, 800c8dc <_svfiprintf_r+0x110>
 800c8ae:	9207      	str	r2, [sp, #28]
 800c8b0:	e014      	b.n	800c8dc <_svfiprintf_r+0x110>
 800c8b2:	eba0 0308 	sub.w	r3, r0, r8
 800c8b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	46a2      	mov	sl, r4
 800c8be:	9304      	str	r3, [sp, #16]
 800c8c0:	e7d2      	b.n	800c868 <_svfiprintf_r+0x9c>
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	1d19      	adds	r1, r3, #4
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	9103      	str	r1, [sp, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	bfbb      	ittet	lt
 800c8ce:	425b      	neglt	r3, r3
 800c8d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d4:	9307      	strge	r3, [sp, #28]
 800c8d6:	9307      	strlt	r3, [sp, #28]
 800c8d8:	bfb8      	it	lt
 800c8da:	9204      	strlt	r2, [sp, #16]
 800c8dc:	7823      	ldrb	r3, [r4, #0]
 800c8de:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e0:	d10c      	bne.n	800c8fc <_svfiprintf_r+0x130>
 800c8e2:	7863      	ldrb	r3, [r4, #1]
 800c8e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e6:	d134      	bne.n	800c952 <_svfiprintf_r+0x186>
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	3402      	adds	r4, #2
 800c8ec:	1d1a      	adds	r2, r3, #4
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	9203      	str	r2, [sp, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	bfb8      	it	lt
 800c8f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8fa:	9305      	str	r3, [sp, #20]
 800c8fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9b8 <_svfiprintf_r+0x1ec>
 800c900:	2203      	movs	r2, #3
 800c902:	4650      	mov	r0, sl
 800c904:	7821      	ldrb	r1, [r4, #0]
 800c906:	f000 fa3c 	bl	800cd82 <memchr>
 800c90a:	b138      	cbz	r0, 800c91c <_svfiprintf_r+0x150>
 800c90c:	2240      	movs	r2, #64	; 0x40
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	eba0 000a 	sub.w	r0, r0, sl
 800c914:	4082      	lsls	r2, r0
 800c916:	4313      	orrs	r3, r2
 800c918:	3401      	adds	r4, #1
 800c91a:	9304      	str	r3, [sp, #16]
 800c91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c920:	2206      	movs	r2, #6
 800c922:	4826      	ldr	r0, [pc, #152]	; (800c9bc <_svfiprintf_r+0x1f0>)
 800c924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c928:	f000 fa2b 	bl	800cd82 <memchr>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d038      	beq.n	800c9a2 <_svfiprintf_r+0x1d6>
 800c930:	4b23      	ldr	r3, [pc, #140]	; (800c9c0 <_svfiprintf_r+0x1f4>)
 800c932:	bb1b      	cbnz	r3, 800c97c <_svfiprintf_r+0x1b0>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	3307      	adds	r3, #7
 800c938:	f023 0307 	bic.w	r3, r3, #7
 800c93c:	3308      	adds	r3, #8
 800c93e:	9303      	str	r3, [sp, #12]
 800c940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c942:	4433      	add	r3, r6
 800c944:	9309      	str	r3, [sp, #36]	; 0x24
 800c946:	e768      	b.n	800c81a <_svfiprintf_r+0x4e>
 800c948:	460c      	mov	r4, r1
 800c94a:	2001      	movs	r0, #1
 800c94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c950:	e7a6      	b.n	800c8a0 <_svfiprintf_r+0xd4>
 800c952:	2300      	movs	r3, #0
 800c954:	f04f 0c0a 	mov.w	ip, #10
 800c958:	4619      	mov	r1, r3
 800c95a:	3401      	adds	r4, #1
 800c95c:	9305      	str	r3, [sp, #20]
 800c95e:	4620      	mov	r0, r4
 800c960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c964:	3a30      	subs	r2, #48	; 0x30
 800c966:	2a09      	cmp	r2, #9
 800c968:	d903      	bls.n	800c972 <_svfiprintf_r+0x1a6>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0c6      	beq.n	800c8fc <_svfiprintf_r+0x130>
 800c96e:	9105      	str	r1, [sp, #20]
 800c970:	e7c4      	b.n	800c8fc <_svfiprintf_r+0x130>
 800c972:	4604      	mov	r4, r0
 800c974:	2301      	movs	r3, #1
 800c976:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97a:	e7f0      	b.n	800c95e <_svfiprintf_r+0x192>
 800c97c:	ab03      	add	r3, sp, #12
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	462a      	mov	r2, r5
 800c982:	4638      	mov	r0, r7
 800c984:	4b0f      	ldr	r3, [pc, #60]	; (800c9c4 <_svfiprintf_r+0x1f8>)
 800c986:	a904      	add	r1, sp, #16
 800c988:	f3af 8000 	nop.w
 800c98c:	1c42      	adds	r2, r0, #1
 800c98e:	4606      	mov	r6, r0
 800c990:	d1d6      	bne.n	800c940 <_svfiprintf_r+0x174>
 800c992:	89ab      	ldrh	r3, [r5, #12]
 800c994:	065b      	lsls	r3, r3, #25
 800c996:	f53f af2d 	bmi.w	800c7f4 <_svfiprintf_r+0x28>
 800c99a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c99c:	b01d      	add	sp, #116	; 0x74
 800c99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a2:	ab03      	add	r3, sp, #12
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	462a      	mov	r2, r5
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <_svfiprintf_r+0x1f8>)
 800c9ac:	a904      	add	r1, sp, #16
 800c9ae:	f000 f87d 	bl	800caac <_printf_i>
 800c9b2:	e7eb      	b.n	800c98c <_svfiprintf_r+0x1c0>
 800c9b4:	0800dd3b 	.word	0x0800dd3b
 800c9b8:	0800dd41 	.word	0x0800dd41
 800c9bc:	0800dd45 	.word	0x0800dd45
 800c9c0:	00000000 	.word	0x00000000
 800c9c4:	0800c719 	.word	0x0800c719

0800c9c8 <_printf_common>:
 800c9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9cc:	4616      	mov	r6, r2
 800c9ce:	4699      	mov	r9, r3
 800c9d0:	688a      	ldr	r2, [r1, #8]
 800c9d2:	690b      	ldr	r3, [r1, #16]
 800c9d4:	4607      	mov	r7, r0
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	bfb8      	it	lt
 800c9da:	4613      	movlt	r3, r2
 800c9dc:	6033      	str	r3, [r6, #0]
 800c9de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9e8:	b10a      	cbz	r2, 800c9ee <_printf_common+0x26>
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	6033      	str	r3, [r6, #0]
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	0699      	lsls	r1, r3, #26
 800c9f2:	bf42      	ittt	mi
 800c9f4:	6833      	ldrmi	r3, [r6, #0]
 800c9f6:	3302      	addmi	r3, #2
 800c9f8:	6033      	strmi	r3, [r6, #0]
 800c9fa:	6825      	ldr	r5, [r4, #0]
 800c9fc:	f015 0506 	ands.w	r5, r5, #6
 800ca00:	d106      	bne.n	800ca10 <_printf_common+0x48>
 800ca02:	f104 0a19 	add.w	sl, r4, #25
 800ca06:	68e3      	ldr	r3, [r4, #12]
 800ca08:	6832      	ldr	r2, [r6, #0]
 800ca0a:	1a9b      	subs	r3, r3, r2
 800ca0c:	42ab      	cmp	r3, r5
 800ca0e:	dc2b      	bgt.n	800ca68 <_printf_common+0xa0>
 800ca10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca14:	1e13      	subs	r3, r2, #0
 800ca16:	6822      	ldr	r2, [r4, #0]
 800ca18:	bf18      	it	ne
 800ca1a:	2301      	movne	r3, #1
 800ca1c:	0692      	lsls	r2, r2, #26
 800ca1e:	d430      	bmi.n	800ca82 <_printf_common+0xba>
 800ca20:	4649      	mov	r1, r9
 800ca22:	4638      	mov	r0, r7
 800ca24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca28:	47c0      	blx	r8
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	d023      	beq.n	800ca76 <_printf_common+0xae>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	6922      	ldr	r2, [r4, #16]
 800ca32:	f003 0306 	and.w	r3, r3, #6
 800ca36:	2b04      	cmp	r3, #4
 800ca38:	bf14      	ite	ne
 800ca3a:	2500      	movne	r5, #0
 800ca3c:	6833      	ldreq	r3, [r6, #0]
 800ca3e:	f04f 0600 	mov.w	r6, #0
 800ca42:	bf08      	it	eq
 800ca44:	68e5      	ldreq	r5, [r4, #12]
 800ca46:	f104 041a 	add.w	r4, r4, #26
 800ca4a:	bf08      	it	eq
 800ca4c:	1aed      	subeq	r5, r5, r3
 800ca4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca52:	bf08      	it	eq
 800ca54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	bfc4      	itt	gt
 800ca5c:	1a9b      	subgt	r3, r3, r2
 800ca5e:	18ed      	addgt	r5, r5, r3
 800ca60:	42b5      	cmp	r5, r6
 800ca62:	d11a      	bne.n	800ca9a <_printf_common+0xd2>
 800ca64:	2000      	movs	r0, #0
 800ca66:	e008      	b.n	800ca7a <_printf_common+0xb2>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	4652      	mov	r2, sl
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4638      	mov	r0, r7
 800ca70:	47c0      	blx	r8
 800ca72:	3001      	adds	r0, #1
 800ca74:	d103      	bne.n	800ca7e <_printf_common+0xb6>
 800ca76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7e:	3501      	adds	r5, #1
 800ca80:	e7c1      	b.n	800ca06 <_printf_common+0x3e>
 800ca82:	2030      	movs	r0, #48	; 0x30
 800ca84:	18e1      	adds	r1, r4, r3
 800ca86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca90:	4422      	add	r2, r4
 800ca92:	3302      	adds	r3, #2
 800ca94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca98:	e7c2      	b.n	800ca20 <_printf_common+0x58>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4622      	mov	r2, r4
 800ca9e:	4649      	mov	r1, r9
 800caa0:	4638      	mov	r0, r7
 800caa2:	47c0      	blx	r8
 800caa4:	3001      	adds	r0, #1
 800caa6:	d0e6      	beq.n	800ca76 <_printf_common+0xae>
 800caa8:	3601      	adds	r6, #1
 800caaa:	e7d9      	b.n	800ca60 <_printf_common+0x98>

0800caac <_printf_i>:
 800caac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cab0:	7e0f      	ldrb	r7, [r1, #24]
 800cab2:	4691      	mov	r9, r2
 800cab4:	2f78      	cmp	r7, #120	; 0x78
 800cab6:	4680      	mov	r8, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	469a      	mov	sl, r3
 800cabc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cabe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cac2:	d807      	bhi.n	800cad4 <_printf_i+0x28>
 800cac4:	2f62      	cmp	r7, #98	; 0x62
 800cac6:	d80a      	bhi.n	800cade <_printf_i+0x32>
 800cac8:	2f00      	cmp	r7, #0
 800caca:	f000 80d5 	beq.w	800cc78 <_printf_i+0x1cc>
 800cace:	2f58      	cmp	r7, #88	; 0x58
 800cad0:	f000 80c1 	beq.w	800cc56 <_printf_i+0x1aa>
 800cad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cadc:	e03a      	b.n	800cb54 <_printf_i+0xa8>
 800cade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cae2:	2b15      	cmp	r3, #21
 800cae4:	d8f6      	bhi.n	800cad4 <_printf_i+0x28>
 800cae6:	a101      	add	r1, pc, #4	; (adr r1, 800caec <_printf_i+0x40>)
 800cae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caec:	0800cb45 	.word	0x0800cb45
 800caf0:	0800cb59 	.word	0x0800cb59
 800caf4:	0800cad5 	.word	0x0800cad5
 800caf8:	0800cad5 	.word	0x0800cad5
 800cafc:	0800cad5 	.word	0x0800cad5
 800cb00:	0800cad5 	.word	0x0800cad5
 800cb04:	0800cb59 	.word	0x0800cb59
 800cb08:	0800cad5 	.word	0x0800cad5
 800cb0c:	0800cad5 	.word	0x0800cad5
 800cb10:	0800cad5 	.word	0x0800cad5
 800cb14:	0800cad5 	.word	0x0800cad5
 800cb18:	0800cc5f 	.word	0x0800cc5f
 800cb1c:	0800cb85 	.word	0x0800cb85
 800cb20:	0800cc19 	.word	0x0800cc19
 800cb24:	0800cad5 	.word	0x0800cad5
 800cb28:	0800cad5 	.word	0x0800cad5
 800cb2c:	0800cc81 	.word	0x0800cc81
 800cb30:	0800cad5 	.word	0x0800cad5
 800cb34:	0800cb85 	.word	0x0800cb85
 800cb38:	0800cad5 	.word	0x0800cad5
 800cb3c:	0800cad5 	.word	0x0800cad5
 800cb40:	0800cc21 	.word	0x0800cc21
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	1d1a      	adds	r2, r3, #4
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	602a      	str	r2, [r5, #0]
 800cb4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb54:	2301      	movs	r3, #1
 800cb56:	e0a0      	b.n	800cc9a <_printf_i+0x1ee>
 800cb58:	6820      	ldr	r0, [r4, #0]
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	0607      	lsls	r7, r0, #24
 800cb5e:	f103 0104 	add.w	r1, r3, #4
 800cb62:	6029      	str	r1, [r5, #0]
 800cb64:	d501      	bpl.n	800cb6a <_printf_i+0xbe>
 800cb66:	681e      	ldr	r6, [r3, #0]
 800cb68:	e003      	b.n	800cb72 <_printf_i+0xc6>
 800cb6a:	0646      	lsls	r6, r0, #25
 800cb6c:	d5fb      	bpl.n	800cb66 <_printf_i+0xba>
 800cb6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb72:	2e00      	cmp	r6, #0
 800cb74:	da03      	bge.n	800cb7e <_printf_i+0xd2>
 800cb76:	232d      	movs	r3, #45	; 0x2d
 800cb78:	4276      	negs	r6, r6
 800cb7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7e:	230a      	movs	r3, #10
 800cb80:	4859      	ldr	r0, [pc, #356]	; (800cce8 <_printf_i+0x23c>)
 800cb82:	e012      	b.n	800cbaa <_printf_i+0xfe>
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	6820      	ldr	r0, [r4, #0]
 800cb88:	1d19      	adds	r1, r3, #4
 800cb8a:	6029      	str	r1, [r5, #0]
 800cb8c:	0605      	lsls	r5, r0, #24
 800cb8e:	d501      	bpl.n	800cb94 <_printf_i+0xe8>
 800cb90:	681e      	ldr	r6, [r3, #0]
 800cb92:	e002      	b.n	800cb9a <_printf_i+0xee>
 800cb94:	0641      	lsls	r1, r0, #25
 800cb96:	d5fb      	bpl.n	800cb90 <_printf_i+0xe4>
 800cb98:	881e      	ldrh	r6, [r3, #0]
 800cb9a:	2f6f      	cmp	r7, #111	; 0x6f
 800cb9c:	bf0c      	ite	eq
 800cb9e:	2308      	moveq	r3, #8
 800cba0:	230a      	movne	r3, #10
 800cba2:	4851      	ldr	r0, [pc, #324]	; (800cce8 <_printf_i+0x23c>)
 800cba4:	2100      	movs	r1, #0
 800cba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbaa:	6865      	ldr	r5, [r4, #4]
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	bfa8      	it	ge
 800cbb0:	6821      	ldrge	r1, [r4, #0]
 800cbb2:	60a5      	str	r5, [r4, #8]
 800cbb4:	bfa4      	itt	ge
 800cbb6:	f021 0104 	bicge.w	r1, r1, #4
 800cbba:	6021      	strge	r1, [r4, #0]
 800cbbc:	b90e      	cbnz	r6, 800cbc2 <_printf_i+0x116>
 800cbbe:	2d00      	cmp	r5, #0
 800cbc0:	d04b      	beq.n	800cc5a <_printf_i+0x1ae>
 800cbc2:	4615      	mov	r5, r2
 800cbc4:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbc8:	fb03 6711 	mls	r7, r3, r1, r6
 800cbcc:	5dc7      	ldrb	r7, [r0, r7]
 800cbce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbd2:	4637      	mov	r7, r6
 800cbd4:	42bb      	cmp	r3, r7
 800cbd6:	460e      	mov	r6, r1
 800cbd8:	d9f4      	bls.n	800cbc4 <_printf_i+0x118>
 800cbda:	2b08      	cmp	r3, #8
 800cbdc:	d10b      	bne.n	800cbf6 <_printf_i+0x14a>
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	07de      	lsls	r6, r3, #31
 800cbe2:	d508      	bpl.n	800cbf6 <_printf_i+0x14a>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	6861      	ldr	r1, [r4, #4]
 800cbe8:	4299      	cmp	r1, r3
 800cbea:	bfde      	ittt	le
 800cbec:	2330      	movle	r3, #48	; 0x30
 800cbee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbf2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbf6:	1b52      	subs	r2, r2, r5
 800cbf8:	6122      	str	r2, [r4, #16]
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4640      	mov	r0, r8
 800cc00:	f8cd a000 	str.w	sl, [sp]
 800cc04:	aa03      	add	r2, sp, #12
 800cc06:	f7ff fedf 	bl	800c9c8 <_printf_common>
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	d14a      	bne.n	800cca4 <_printf_i+0x1f8>
 800cc0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc12:	b004      	add	sp, #16
 800cc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	f043 0320 	orr.w	r3, r3, #32
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	2778      	movs	r7, #120	; 0x78
 800cc22:	4832      	ldr	r0, [pc, #200]	; (800ccec <_printf_i+0x240>)
 800cc24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	6829      	ldr	r1, [r5, #0]
 800cc2c:	061f      	lsls	r7, r3, #24
 800cc2e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc32:	d402      	bmi.n	800cc3a <_printf_i+0x18e>
 800cc34:	065f      	lsls	r7, r3, #25
 800cc36:	bf48      	it	mi
 800cc38:	b2b6      	uxthmi	r6, r6
 800cc3a:	07df      	lsls	r7, r3, #31
 800cc3c:	bf48      	it	mi
 800cc3e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc42:	6029      	str	r1, [r5, #0]
 800cc44:	bf48      	it	mi
 800cc46:	6023      	strmi	r3, [r4, #0]
 800cc48:	b91e      	cbnz	r6, 800cc52 <_printf_i+0x1a6>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	f023 0320 	bic.w	r3, r3, #32
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	2310      	movs	r3, #16
 800cc54:	e7a6      	b.n	800cba4 <_printf_i+0xf8>
 800cc56:	4824      	ldr	r0, [pc, #144]	; (800cce8 <_printf_i+0x23c>)
 800cc58:	e7e4      	b.n	800cc24 <_printf_i+0x178>
 800cc5a:	4615      	mov	r5, r2
 800cc5c:	e7bd      	b.n	800cbda <_printf_i+0x12e>
 800cc5e:	682b      	ldr	r3, [r5, #0]
 800cc60:	6826      	ldr	r6, [r4, #0]
 800cc62:	1d18      	adds	r0, r3, #4
 800cc64:	6961      	ldr	r1, [r4, #20]
 800cc66:	6028      	str	r0, [r5, #0]
 800cc68:	0635      	lsls	r5, r6, #24
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	d501      	bpl.n	800cc72 <_printf_i+0x1c6>
 800cc6e:	6019      	str	r1, [r3, #0]
 800cc70:	e002      	b.n	800cc78 <_printf_i+0x1cc>
 800cc72:	0670      	lsls	r0, r6, #25
 800cc74:	d5fb      	bpl.n	800cc6e <_printf_i+0x1c2>
 800cc76:	8019      	strh	r1, [r3, #0]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4615      	mov	r5, r2
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	e7bc      	b.n	800cbfa <_printf_i+0x14e>
 800cc80:	682b      	ldr	r3, [r5, #0]
 800cc82:	2100      	movs	r1, #0
 800cc84:	1d1a      	adds	r2, r3, #4
 800cc86:	602a      	str	r2, [r5, #0]
 800cc88:	681d      	ldr	r5, [r3, #0]
 800cc8a:	6862      	ldr	r2, [r4, #4]
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	f000 f878 	bl	800cd82 <memchr>
 800cc92:	b108      	cbz	r0, 800cc98 <_printf_i+0x1ec>
 800cc94:	1b40      	subs	r0, r0, r5
 800cc96:	6060      	str	r0, [r4, #4]
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	6123      	str	r3, [r4, #16]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cca2:	e7aa      	b.n	800cbfa <_printf_i+0x14e>
 800cca4:	462a      	mov	r2, r5
 800cca6:	4649      	mov	r1, r9
 800cca8:	4640      	mov	r0, r8
 800ccaa:	6923      	ldr	r3, [r4, #16]
 800ccac:	47d0      	blx	sl
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d0ad      	beq.n	800cc0e <_printf_i+0x162>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	079b      	lsls	r3, r3, #30
 800ccb6:	d413      	bmi.n	800cce0 <_printf_i+0x234>
 800ccb8:	68e0      	ldr	r0, [r4, #12]
 800ccba:	9b03      	ldr	r3, [sp, #12]
 800ccbc:	4298      	cmp	r0, r3
 800ccbe:	bfb8      	it	lt
 800ccc0:	4618      	movlt	r0, r3
 800ccc2:	e7a6      	b.n	800cc12 <_printf_i+0x166>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	4632      	mov	r2, r6
 800ccc8:	4649      	mov	r1, r9
 800ccca:	4640      	mov	r0, r8
 800cccc:	47d0      	blx	sl
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d09d      	beq.n	800cc0e <_printf_i+0x162>
 800ccd2:	3501      	adds	r5, #1
 800ccd4:	68e3      	ldr	r3, [r4, #12]
 800ccd6:	9903      	ldr	r1, [sp, #12]
 800ccd8:	1a5b      	subs	r3, r3, r1
 800ccda:	42ab      	cmp	r3, r5
 800ccdc:	dcf2      	bgt.n	800ccc4 <_printf_i+0x218>
 800ccde:	e7eb      	b.n	800ccb8 <_printf_i+0x20c>
 800cce0:	2500      	movs	r5, #0
 800cce2:	f104 0619 	add.w	r6, r4, #25
 800cce6:	e7f5      	b.n	800ccd4 <_printf_i+0x228>
 800cce8:	0800dd4c 	.word	0x0800dd4c
 800ccec:	0800dd5d 	.word	0x0800dd5d

0800ccf0 <_realloc_r>:
 800ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf4:	4680      	mov	r8, r0
 800ccf6:	4614      	mov	r4, r2
 800ccf8:	460e      	mov	r6, r1
 800ccfa:	b921      	cbnz	r1, 800cd06 <_realloc_r+0x16>
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd02:	f7ff bb65 	b.w	800c3d0 <_malloc_r>
 800cd06:	b92a      	cbnz	r2, 800cd14 <_realloc_r+0x24>
 800cd08:	f7ff fcbe 	bl	800c688 <_free_r>
 800cd0c:	4625      	mov	r5, r4
 800cd0e:	4628      	mov	r0, r5
 800cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd14:	f000 f851 	bl	800cdba <_malloc_usable_size_r>
 800cd18:	4284      	cmp	r4, r0
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	d802      	bhi.n	800cd24 <_realloc_r+0x34>
 800cd1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd22:	d812      	bhi.n	800cd4a <_realloc_r+0x5a>
 800cd24:	4621      	mov	r1, r4
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7ff fb52 	bl	800c3d0 <_malloc_r>
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d0ed      	beq.n	800cd0e <_realloc_r+0x1e>
 800cd32:	42bc      	cmp	r4, r7
 800cd34:	4622      	mov	r2, r4
 800cd36:	4631      	mov	r1, r6
 800cd38:	bf28      	it	cs
 800cd3a:	463a      	movcs	r2, r7
 800cd3c:	f000 f82f 	bl	800cd9e <memcpy>
 800cd40:	4631      	mov	r1, r6
 800cd42:	4640      	mov	r0, r8
 800cd44:	f7ff fca0 	bl	800c688 <_free_r>
 800cd48:	e7e1      	b.n	800cd0e <_realloc_r+0x1e>
 800cd4a:	4635      	mov	r5, r6
 800cd4c:	e7df      	b.n	800cd0e <_realloc_r+0x1e>

0800cd4e <memmove>:
 800cd4e:	4288      	cmp	r0, r1
 800cd50:	b510      	push	{r4, lr}
 800cd52:	eb01 0402 	add.w	r4, r1, r2
 800cd56:	d902      	bls.n	800cd5e <memmove+0x10>
 800cd58:	4284      	cmp	r4, r0
 800cd5a:	4623      	mov	r3, r4
 800cd5c:	d807      	bhi.n	800cd6e <memmove+0x20>
 800cd5e:	1e43      	subs	r3, r0, #1
 800cd60:	42a1      	cmp	r1, r4
 800cd62:	d008      	beq.n	800cd76 <memmove+0x28>
 800cd64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd6c:	e7f8      	b.n	800cd60 <memmove+0x12>
 800cd6e:	4601      	mov	r1, r0
 800cd70:	4402      	add	r2, r0
 800cd72:	428a      	cmp	r2, r1
 800cd74:	d100      	bne.n	800cd78 <memmove+0x2a>
 800cd76:	bd10      	pop	{r4, pc}
 800cd78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd80:	e7f7      	b.n	800cd72 <memmove+0x24>

0800cd82 <memchr>:
 800cd82:	4603      	mov	r3, r0
 800cd84:	b510      	push	{r4, lr}
 800cd86:	b2c9      	uxtb	r1, r1
 800cd88:	4402      	add	r2, r0
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	d101      	bne.n	800cd94 <memchr+0x12>
 800cd90:	2000      	movs	r0, #0
 800cd92:	e003      	b.n	800cd9c <memchr+0x1a>
 800cd94:	7804      	ldrb	r4, [r0, #0]
 800cd96:	3301      	adds	r3, #1
 800cd98:	428c      	cmp	r4, r1
 800cd9a:	d1f6      	bne.n	800cd8a <memchr+0x8>
 800cd9c:	bd10      	pop	{r4, pc}

0800cd9e <memcpy>:
 800cd9e:	440a      	add	r2, r1
 800cda0:	4291      	cmp	r1, r2
 800cda2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cda6:	d100      	bne.n	800cdaa <memcpy+0xc>
 800cda8:	4770      	bx	lr
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb0:	4291      	cmp	r1, r2
 800cdb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdb6:	d1f9      	bne.n	800cdac <memcpy+0xe>
 800cdb8:	bd10      	pop	{r4, pc}

0800cdba <_malloc_usable_size_r>:
 800cdba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdbe:	1f18      	subs	r0, r3, #4
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	bfbc      	itt	lt
 800cdc4:	580b      	ldrlt	r3, [r1, r0]
 800cdc6:	18c0      	addlt	r0, r0, r3
 800cdc8:	4770      	bx	lr
	...

0800cdcc <_init>:
 800cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdce:	bf00      	nop
 800cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd2:	bc08      	pop	{r3}
 800cdd4:	469e      	mov	lr, r3
 800cdd6:	4770      	bx	lr

0800cdd8 <_fini>:
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	bf00      	nop
 800cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdde:	bc08      	pop	{r3}
 800cde0:	469e      	mov	lr, r3
 800cde2:	4770      	bx	lr
